	.text
	.file	"llvm-link"
	.globl	__meth                          // -- Begin function __meth
	.p2align	4
	.type	__meth,@function
__meth:                                 // @__meth
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-80]!           // 16-byte Folded Spill
	str	x25, [sp, #16]                  // 8-byte Folded Spill
	stp	x24, x23, [sp, #32]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #48]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #64]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 80
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -64
	.cfi_offset w30, -72
	.cfi_offset w29, -80
	mov	x19, x1
	mov	x20, x0
	ldp	w22, w8, [x0, #8]
	bfi	x22, x8, #32, #32
	ldp	w21, w8, [x22]
	bfi	x21, x8, #32, #32
	tst	x21, #0x6
	b.ne	.LBB0_4
// %bb.1:                               // %"$3"
	tbz	w21, #3, .LBB0_3
// %bb.2:                               // %"$6"
	ldp	w21, w8, [x21]
	bfi	x21, x8, #32, #32
	b	.LBB0_4
.LBB0_3:                                // %"$5"
	mov	x0, x21
	bl	evList
	mov	x21, x0
.LBB0_4:                                // %"$2"
	adrp	x23, env
	ldr	x8, [x23, :lo12:env]
	mov	x9, sp
	sub	x24, x9, #16                    // =16
	mov	sp, x24
	lsr	x10, x21, #32
	stp	w21, w10, [x9, #-16]
	lsr	x10, x8, #32
	stp	w8, w10, [x9, #-8]
	eor	w8, w21, #0x8
	tst	x8, #0xe
	str	x24, [x23, :lo12:env]
	b.ne	.LBB0_9
// %bb.5:                               // %"$8"
	ldurb	w8, [x21, #-8]
	tbz	w8, #3, .LBB0_7
// %bb.6:                               // %"$9"
	mov	x0, x20
	mov	x1, x21
	bl	dbFetch
.LBB0_7:                                // %"$10"
	adrp	x25, ($Ret)
	str	xzr, [x25, :lo12:($Ret)]
	mov	x0, x21
	mov	x1, x19
	bl	method
	mov	x3, x0
	cbz	x0, .LBB0_10
// %bb.8:                               // %"$11"
	ldr	x1, [x25, :lo12:($Ret)]
	ldp	w4, w8, [x22, #8]
	bfi	x4, x8, #32, #32
	mov	x0, x21
	mov	x2, x19
	bl	evMethod
	ldp	w9, w8, [x24, #8]
	bfi	x9, x8, #32, #32
	str	x9, [x23, :lo12:env]
	mov	sp, x29
	ldp	x20, x19, [sp, #64]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #48]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #32]             // 16-byte Folded Reload
	ldr	x25, [sp, #16]                  // 8-byte Folded Reload
	ldp	x29, x30, [sp], #80             // 16-byte Folded Reload
	ret
.LBB0_9:                                // %"$7"
	mov	x0, x20
	mov	x1, x21
	bl	symErr
.LBB0_10:                               // %"$12"
	adrp	x2, .L$181
	add	x2, x2, :lo12:.L$181
	mov	x0, x20
	mov	x1, x19
	bl	err
.Lfunc_end0:
	.size	__meth, .Lfunc_end0-__meth
	.cfi_endproc
                                        // -- End function
	.globl	_quote                          // -- Begin function _quote
	.p2align	4
	.type	_quote,@function
_quote:                                 // @_quote
	.cfi_startproc
// %bb.0:                               // %"$1"
	ldp	w0, w8, [x0, #8]
	bfi	x0, x8, #32, #32
	ret
.Lfunc_end1:
	.size	_quote, .Lfunc_end1-_quote
	.cfi_endproc
                                        // -- End function
	.globl	_gc                             // -- Begin function _gc
	.p2align	4
	.type	_gc,@function
_gc:                                    // @_gc
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-48]!                // 8-byte Folded Spill
	stp	x22, x21, [sp, #16]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #32]             // 16-byte Folded Spill
	.cfi_def_cfa_offset 48
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w30, -48
	mov	x20, x0
	ldp	w21, w8, [x0, #8]
	bfi	x21, x8, #32, #32
	ldp	w19, w8, [x21]
	bfi	x19, x8, #32, #32
	tst	x19, #0x6
	b.ne	.LBB2_4
// %bb.1:                               // %"$3"
	tbz	w19, #3, .LBB2_3
// %bb.2:                               // %"$6"
	ldp	w19, w8, [x19]
	bfi	x19, x8, #32, #32
	b	.LBB2_4
.LBB2_3:                                // %"$5"
	mov	x0, x19
	bl	evList
	mov	x19, x0
.LBB2_4:                                // %"$2"
	adrp	x8, SymTab+8
	add	x8, x8, :lo12:SymTab+8
	str	x8, [x8, #368]
	str	x8, [x8, #384]
	cmp	x19, x8
	b.ne	.LBB2_6
// %bb.5:                               // %"$7"
	bl	gc
	b	.LBB2_10
.LBB2_6:                                // %"$8"
	mov	x0, x20
	mov	x1, x19
	bl	xCnt
	lsl	x8, x0, #16
	adrp	x22, ($GcCount)
	str	x8, [x22, :lo12:($GcCount)]
	bl	gc
	ldp	w1, w8, [x21, #8]
	bfi	x1, x8, #32, #32
	tst	x1, #0xf
	b.eq	.LBB2_8
// %bb.7:
	mov	w8, #65536
	b	.LBB2_9
.LBB2_8:                                // %"$11"
	mov	x0, x20
	bl	evCnt
	lsl	x8, x0, #16
.LBB2_9:                                // %"$12"
	str	x8, [x22, :lo12:($GcCount)]
.LBB2_10:                               // %"$9"
	mov	x0, x19
	ldp	x20, x19, [sp, #32]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #16]             // 16-byte Folded Reload
	ldr	x30, [sp], #48                  // 8-byte Folded Reload
	ret
.Lfunc_end2:
	.size	_gc, .Lfunc_end2-_gc
	.cfi_endproc
                                        // -- End function
	.globl	_format                         // -- Begin function _format
	.p2align	4
	.type	_format,@function
_format:                                // @_format
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-80]!           // 16-byte Folded Spill
	stp	x26, x25, [sp, #16]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #32]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #48]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #64]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 80
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w30, -72
	.cfi_offset w29, -80
	mov	x21, x0
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w19, w8, [x9]
	bfi	x19, x8, #32, #32
	ldp	w20, w8, [x9, #8]
	bfi	x20, x8, #32, #32
	tst	x19, #0x6
	b.ne	.LBB3_4
// %bb.1:                               // %"$3"
	tbz	w19, #3, .LBB3_3
// %bb.2:                               // %"$6"
	ldp	w19, w8, [x19]
	bfi	x19, x8, #32, #32
	b	.LBB3_4
.LBB3_3:                                // %"$5"
	mov	x0, x19
	bl	evList
	mov	x19, x0
.LBB3_4:                                // %"$2"
	adrp	x23, env
	ldr	x8, [x23, :lo12:env]
	mov	x9, sp
	sub	x24, x9, #16                    // =16
	mov	sp, x24
	lsr	x10, x19, #32
	stp	w19, w10, [x9, #-16]
	lsr	x10, x8, #32
	stp	w8, w10, [x9, #-8]
	str	x24, [x23, :lo12:env]
	ldp	w1, w8, [x20]
	bfi	x1, x8, #32, #32
	ldp	w22, w25, [x20, #8]
	tst	x1, #0x6
	b.ne	.LBB3_8
// %bb.5:                               // %"$8"
	tbz	w1, #3, .LBB3_7
// %bb.6:                               // %"$11"
	ldp	w1, w8, [x1]
	bfi	x1, x8, #32, #32
	b	.LBB3_8
.LBB3_7:                                // %"$10"
	mov	x0, x1
	bl	evList
	mov	x1, x0
.LBB3_8:                                // %"$7"
	bfi	x22, x25, #32, #32
	adrp	x8, SymTab+8
	add	x8, x8, :lo12:SymTab+8
	cmp	x1, x8
	b.ne	.LBB3_11
// %bb.9:
	mov	x20, xzr
	tst	x22, #0xf
	b.eq	.LBB3_12
.LBB3_10:
	mov	w21, wzr
	mov	w22, #46
	tst	x19, #0x6
	b.ne	.LBB3_19
	b	.LBB3_26
.LBB3_11:                               // %"$13"
	mov	x0, x21
	bl	xCnt
	mov	x20, x0
	tst	x22, #0xf
	b.ne	.LBB3_10
.LBB3_12:                               // %"$15"
	ldp	w1, w8, [x22]
	bfi	x1, x8, #32, #32
	ldp	w25, w26, [x22, #8]
	tst	x1, #0x6
	b.ne	.LBB3_16
// %bb.13:                              // %"$18"
	tbz	w1, #3, .LBB3_15
// %bb.14:                              // %"$21"
	ldp	w1, w8, [x1]
	bfi	x1, x8, #32, #32
	b	.LBB3_16
.LBB3_15:                               // %"$20"
	mov	x0, x1
	bl	evList
	mov	x1, x0
.LBB3_16:                               // %"$17"
	eor	w8, w1, #0x8
	tst	x8, #0xe
	b.ne	.LBB3_34
// %bb.17:                              // %"$23"
	bfi	x25, x26, #32, #32
	mov	x0, x1
	bl	firstByte
	mov	w22, w0
	tst	x25, #0xf
	b.eq	.LBB3_20
// %bb.18:
	mov	w21, wzr
	tst	x19, #0x6
	b.eq	.LBB3_26
.LBB3_19:                               // %"$35"
	mov	x8, sp
	sub	x4, x8, #32                     // =32
	mov	sp, x4
	mov	w9, #4
	stp	w9, wzr, [x8, #-32]
	mov	w9, #2
	mov	x25, x4
	str	w9, [x25, #16]!
	str	wzr, [x25, #4]
	ldr	x9, [x23, :lo12:env]
	lsr	x10, x9, #32
	stp	w9, w10, [x8, #-8]
	str	x25, [x23, :lo12:env]
	mov	x0, x19
	mov	x1, x20
	mov	w2, w22
	mov	w3, w21
	bl	fmtNum
	ldp	w0, w8, [x25]
	bfi	x0, x8, #32, #32
	bl	consStr
	b	.LBB3_33
.LBB3_20:                               // %"$24"
	ldp	w1, w8, [x25]
	bfi	x1, x8, #32, #32
	tst	x1, #0x6
	b.ne	.LBB3_24
// %bb.21:                              // %"$27"
	tbz	w1, #3, .LBB3_23
// %bb.22:                              // %"$30"
	ldp	w1, w8, [x1]
	bfi	x1, x8, #32, #32
	b	.LBB3_24
.LBB3_23:                               // %"$29"
	mov	x0, x1
	bl	evList
	mov	x1, x0
.LBB3_24:                               // %"$26"
	eor	w8, w1, #0x8
	tst	x8, #0xe
	b.ne	.LBB3_34
// %bb.25:                              // %"$32"
	mov	x0, x1
	bl	firstByte
	mov	w21, w0
	tst	x19, #0x6
	b.ne	.LBB3_19
.LBB3_26:                               // %"$34"
	tbz	w19, #3, .LBB3_31
// %bb.27:                              // %"$37"
	ldp	w0, w8, [x19, #-8]
	bfi	x0, x8, #32, #32
	tbnz	w0, #3, .LBB3_32
// %bb.28:                              // %"$41"
	tst	x0, #0x6
	b.ne	.LBB3_30
.LBB3_29:                               // %"$42"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w0, w8, [x0, #8]
	bfi	x0, x8, #32, #32
	tst	x0, #0x6
	b.eq	.LBB3_29
.LBB3_30:                               // %"$43"
	mov	x1, x20
	mov	w2, w22
	mov	w3, w21
	bl	symToNum
	adrp	x8, SymTab+8
	add	x8, x8, :lo12:SymTab+8
	cmp	x0, #0                          // =0
	csel	x0, x8, x0, eq
	b	.LBB3_33
.LBB3_31:                               // %"$36"
	mov	x8, sp
	sub	x1, x8, #32                     // =32
	mov	sp, x1
	mov	w9, #4
	stp	w9, wzr, [x8, #-32]
	mov	w9, #2
	mov	x25, x1
	str	w9, [x25, #16]!
	str	wzr, [x25, #4]
	ldr	x9, [x23, :lo12:env]
	lsr	x10, x9, #32
	stp	w9, w10, [x8, #-8]
	str	x25, [x23, :lo12:env]
	mov	x0, x19
	bl	pack
	ldp	w0, w8, [x25]
	bfi	x0, x8, #32, #32
	mov	x1, x20
	mov	w2, w22
	mov	w3, w21
	bl	symToNum
	cbnz	x0, .LBB3_33
.LBB3_32:                               // %"$47"
	adrp	x0, SymTab+8
	add	x0, x0, :lo12:SymTab+8
.LBB3_33:                               // %"$33"
	ldp	w9, w8, [x24, #8]
	bfi	x9, x8, #32, #32
	str	x9, [x23, :lo12:env]
	mov	sp, x29
	ldp	x20, x19, [sp, #64]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #48]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #32]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #80             // 16-byte Folded Reload
	ret
.LBB3_34:                               // %"$22"
	mov	x0, x21
	bl	symErr
.Lfunc_end3:
	.size	_format, .Lfunc_end3-_format
	.cfi_endproc
                                        // -- End function
	.globl	_add                            // -- Begin function _add
	.p2align	4
	.type	_add,@function
_add:                                   // @_add
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-64]!           // 16-byte Folded Spill
	stp	x24, x23, [sp, #16]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #32]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #48]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 64
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w30, -56
	.cfi_offset w29, -64
	mov	x19, x0
	ldp	w20, w8, [x0, #8]
	bfi	x20, x8, #32, #32
	ldp	w1, w8, [x20]
	bfi	x1, x8, #32, #32
	tst	x1, #0x6
	b.ne	.LBB4_4
// %bb.1:                               // %"$3"
	tbz	w1, #3, .LBB4_3
// %bb.2:                               // %"$6"
	ldp	w1, w8, [x1]
	bfi	x1, x8, #32, #32
	b	.LBB4_4
.LBB4_3:                                // %"$5"
	mov	x0, x1
	bl	evList
	mov	x1, x0
.LBB4_4:                                // %"$2"
	adrp	x23, SymTab+8
	add	x23, x23, :lo12:SymTab+8
	cmp	x1, x23
	b.eq	.LBB4_17
// %bb.5:                               // %"$8"
	adrp	x21, env
	ldr	x8, [x21, :lo12:env]
	mov	x9, sp
	sub	x22, x9, #16                    // =16
	mov	sp, x22
	mov	w10, #10
	lsr	x11, x8, #32
	stp	w10, wzr, [x9, #-16]
	stp	w8, w11, [x9, #-8]
	tst	x1, #0x6
	str	x22, [x21, :lo12:env]
	b.eq	.LBB4_18
// %bb.6:                               // %"$11"
	mov	x9, sp
	sub	x24, x9, #16                    // =16
	mov	sp, x24
	lsr	x10, x1, #32
	adrp	x8, env
	add	x8, x8, :lo12:env
	stp	w1, w10, [x9, #-16]
	ldr	x10, [x8]
	lsr	x11, x10, #32
	stp	w10, w11, [x9, #-8]
	mov	x0, x24
.LBB4_7:                                // %"$12"
                                        // =>This Inner Loop Header: Depth=1
	lsr	x9, x0, #32
	stp	w0, w9, [x8]
	ldp	w20, w8, [x20, #8]
	bfi	x20, x8, #32, #32
	tst	x20, #0xf
	b.ne	.LBB4_15
// %bb.8:                               // %"$13"
                                        //   in Loop: Header=BB4_7 Depth=1
	ldp	w1, w8, [x20]
	bfi	x1, x8, #32, #32
	tst	x1, #0x6
	b.ne	.LBB4_11
// %bb.9:                               // %"$17"
                                        //   in Loop: Header=BB4_7 Depth=1
	tbz	w1, #3, .LBB4_14
// %bb.10:                              // %"$20"
                                        //   in Loop: Header=BB4_7 Depth=1
	ldp	w1, w8, [x1]
	bfi	x1, x8, #32, #32
.LBB4_11:                               // %"$16"
                                        //   in Loop: Header=BB4_7 Depth=1
	cmp	x1, x23
	b.eq	.LBB4_16
.LBB4_12:                               // %"$21"
                                        //   in Loop: Header=BB4_7 Depth=1
	tst	x1, #0x6
	b.eq	.LBB4_18
// %bb.13:                              // %"$24"
                                        //   in Loop: Header=BB4_7 Depth=1
	lsr	x8, x1, #32
	stp	w1, w8, [x22]
	ldp	w0, w8, [x24]
	bfi	x0, x8, #32, #32
	bl	adds
	mov	x8, x24
	b	.LBB4_7
.LBB4_14:                               // %"$19"
                                        //   in Loop: Header=BB4_7 Depth=1
	mov	x0, x1
	bl	evList
	mov	x1, x0
	cmp	x1, x23
	b.ne	.LBB4_12
	b	.LBB4_16
.LBB4_15:                               // %"$15"
	ldp	w1, w8, [x24]
	bfi	x1, x8, #32, #32
.LBB4_16:                               // %"$14"
	ldp	w9, w8, [x22, #8]
	bfi	x9, x8, #32, #32
	str	x9, [x21, :lo12:env]
.LBB4_17:                               // %"$9"
	mov	x0, x1
	mov	sp, x29
	ldp	x20, x19, [sp, #48]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #32]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #64             // 16-byte Folded Reload
	ret
.LBB4_18:                               // %"$10"
	mov	x0, x19
	bl	numErr
.Lfunc_end4:
	.size	_add, .Lfunc_end4-_add
	.cfi_endproc
                                        // -- End function
	.globl	_sub                            // -- Begin function _sub
	.p2align	4
	.type	_sub,@function
_sub:                                   // @_sub
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-80]!           // 16-byte Folded Spill
	str	x25, [sp, #16]                  // 8-byte Folded Spill
	stp	x24, x23, [sp, #32]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #48]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #64]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 80
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -64
	.cfi_offset w30, -72
	.cfi_offset w29, -80
	mov	x19, x0
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w1, w8, [x9]
	bfi	x1, x8, #32, #32
	ldp	w20, w21, [x9, #8]
	tst	x1, #0x6
	b.ne	.LBB5_4
// %bb.1:                               // %"$3"
	tbz	w1, #3, .LBB5_3
// %bb.2:                               // %"$6"
	ldp	w1, w8, [x1]
	bfi	x1, x8, #32, #32
	b	.LBB5_4
.LBB5_3:                                // %"$5"
	mov	x0, x1
	bl	evList
	mov	x1, x0
.LBB5_4:                                // %"$2"
	adrp	x22, SymTab+8
	add	x22, x22, :lo12:SymTab+8
	cmp	x1, x22
	b.eq	.LBB5_18
// %bb.5:                               // %"$8"
	tst	x1, #0x6
	b.eq	.LBB5_19
// %bb.6:                               // %"$11"
	bfi	x20, x21, #32, #32
	tst	x20, #0xf
	b.eq	.LBB5_8
// %bb.7:                               // %"$12"
	eor	x8, x1, #0x8
	cmp	x1, #2                          // =2
	csel	x1, x1, x8, eq
	b	.LBB5_18
.LBB5_8:                                // %"$13"
	adrp	x21, env
	ldr	x8, [x21, :lo12:env]
	mov	x9, sp
	sub	x23, x9, #16                    // =16
	mov	sp, x23
	mov	w10, #10
	lsr	x11, x8, #32
	stp	w10, wzr, [x9, #-16]
	stp	w8, w11, [x9, #-8]
	str	x23, [x21, :lo12:env]
	mov	x8, sp
	sub	x24, x8, #16                    // =16
	mov	sp, x24
	lsr	x9, x1, #32
	stp	w1, w9, [x8, #-16]
	ldr	x9, [x21, :lo12:env]
	lsr	x10, x9, #32
	stp	w9, w10, [x8, #-8]
	str	x24, [x21, :lo12:env]
.LBB5_9:                                // %"$18"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w1, w8, [x20]
	bfi	x1, x8, #32, #32
	ldp	w20, w25, [x20, #8]
	tst	x1, #0x6
	b.ne	.LBB5_13
// %bb.10:                              // %"$20"
                                        //   in Loop: Header=BB5_9 Depth=1
	tbz	w1, #3, .LBB5_12
// %bb.11:                              // %"$23"
                                        //   in Loop: Header=BB5_9 Depth=1
	ldp	w1, w8, [x1]
	bfi	x1, x8, #32, #32
	b	.LBB5_13
.LBB5_12:                               // %"$22"
                                        //   in Loop: Header=BB5_9 Depth=1
	mov	x0, x1
	bl	evList
	mov	x1, x0
.LBB5_13:                               // %"$19"
                                        //   in Loop: Header=BB5_9 Depth=1
	cmp	x1, x22
	b.eq	.LBB5_17
// %bb.14:                              // %"$24"
                                        //   in Loop: Header=BB5_9 Depth=1
	tst	x1, #0x6
	b.eq	.LBB5_19
// %bb.15:                              // %"$28"
                                        //   in Loop: Header=BB5_9 Depth=1
	bfi	x20, x25, #32, #32
	lsr	x8, x1, #32
	stp	w1, w8, [x23]
	ldp	w0, w8, [x24]
	bfi	x0, x8, #32, #32
	bl	subs
	lsr	x8, x0, #32
	stp	w0, w8, [x24]
	tst	x20, #0xf
	b.eq	.LBB5_9
// %bb.16:                              // %"$30"
	ldp	w1, w8, [x24]
	bfi	x1, x8, #32, #32
.LBB5_17:                               // %"$25"
	ldp	w9, w8, [x23, #8]
	bfi	x9, x8, #32, #32
	str	x9, [x21, :lo12:env]
.LBB5_18:                               // %"$9"
	mov	x0, x1
	mov	sp, x29
	ldp	x20, x19, [sp, #64]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #48]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #32]             // 16-byte Folded Reload
	ldr	x25, [sp, #16]                  // 8-byte Folded Reload
	ldp	x29, x30, [sp], #80             // 16-byte Folded Reload
	ret
.LBB5_19:                               // %"$10"
	mov	x0, x19
	bl	numErr
.Lfunc_end5:
	.size	_sub, .Lfunc_end5-_sub
	.cfi_endproc
                                        // -- End function
	.globl	_inc                            // -- Begin function _inc
	.p2align	4
	.type	_inc,@function
_inc:                                   // @_inc
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-64]!           // 16-byte Folded Spill
	stp	x24, x23, [sp, #16]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #32]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #48]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 64
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w30, -56
	.cfi_offset w29, -64
	mov	x20, x0
	ldp	w24, w8, [x0, #8]
	bfi	x24, x8, #32, #32
	ldp	w19, w8, [x24]
	bfi	x19, x8, #32, #32
	tst	x19, #0x6
	b.ne	.LBB6_4
// %bb.1:                               // %"$4"
	tbz	w19, #3, .LBB6_3
// %bb.2:                               // %"$7"
	ldp	w19, w8, [x19]
	bfi	x19, x8, #32, #32
	b	.LBB6_4
.LBB6_3:                                // %"$6"
	mov	x0, x19
	bl	evList
	mov	x19, x0
.LBB6_4:                                // %"$3"
	adrp	x23, SymTab+8
	add	x23, x23, :lo12:SymTab+8
	cmp	x19, x23
	b.eq	.LBB6_28
// %bb.5:                               // %"$8"
	tst	x19, #0x6
	b.eq	.LBB6_7
// %bb.6:                               // %"$11"
	mov	x0, x19
	bl	incs
	mov	x19, x0
	b	.LBB6_28
.LBB6_7:                                // %"$10"
	add	x8, x23, #208                   // =208
	cmp	x8, x19
	ccmp	x19, x23, #0, hs
	b.hs	.LBB6_29
// %bb.8:                               // %"$15"
	adrp	x21, env
	ldr	x8, [x21, :lo12:env]
	mov	x9, sp
	sub	x22, x9, #16                    // =16
	mov	sp, x22
	lsr	x10, x19, #32
	lsr	x11, x8, #32
	stp	w19, w10, [x9, #-16]
	stp	w8, w11, [x9, #-8]
	str	x22, [x21, :lo12:env]
	tbz	w19, #3, .LBB6_10
// %bb.9:                               // %"$17"
	ldurb	w8, [x19, #-8]
	ubfx	w8, w8, #3, #1
	cbnz	w8, .LBB6_11
	b	.LBB6_12
.LBB6_10:
	mov	w8, wzr
	cbz	w8, .LBB6_12
.LBB6_11:                               // %"$18"
	mov	x0, x20
	mov	x1, x19
	bl	dbTouch
.LBB6_12:                               // %"$19"
	ldp	w8, w9, [x24, #8]
	bfi	x8, x9, #32, #32
	tst	x8, #0xf
	b.eq	.LBB6_16
// %bb.13:                              // %"$20"
	ldp	w8, w9, [x19]
	bfi	x8, x9, #32, #32
	cmp	x8, x23
	b.eq	.LBB6_27
// %bb.14:                              // %"$24"
	tst	x8, #0x6
	b.eq	.LBB6_30
// %bb.15:                              // %"$27"
	mov	x0, x8
	bl	incs
	b	.LBB6_26
.LBB6_16:                               // %"$21"
	ldp	w1, w9, [x8]
	bfi	x1, x9, #32, #32
	tst	x1, #0x6
	b.ne	.LBB6_20
// %bb.17:                              // %"$29"
	tbz	w1, #3, .LBB6_19
// %bb.18:                              // %"$32"
	ldp	w1, w8, [x1]
	bfi	x1, x8, #32, #32
	b	.LBB6_20
.LBB6_19:                               // %"$31"
	mov	x0, x1
	bl	evList
	mov	x1, x0
.LBB6_20:                               // %"$28"
	ldr	x8, [x21, :lo12:env]
	mov	x9, sp
	sub	x10, x9, #16                    // =16
	mov	sp, x10
	lsr	x11, x1, #32
	stp	w1, w11, [x9, #-16]
	lsr	x11, x8, #32
	stp	w8, w11, [x9, #-8]
	str	x10, [x21, :lo12:env]
	ldp	w8, w9, [x19]
	bfi	x8, x9, #32, #32
	cmp	x8, x23
	b.eq	.LBB6_27
// %bb.21:                              // %"$34"
	cmp	x1, x23
	b.ne	.LBB6_23
// %bb.22:
	mov	x8, x1
	b	.LBB6_27
.LBB6_23:                               // %"$36"
	tst	x8, #0x6
	b.eq	.LBB6_30
// %bb.24:                              // %"$39"
	tst	x1, #0x6
	b.eq	.LBB6_31
// %bb.25:                              // %"$41"
	mov	x0, x8
	bl	adds
.LBB6_26:                               // %"$22"
	mov	x8, x0
	lsr	x9, x0, #32
	stp	w8, w9, [x19]
.LBB6_27:                               // %"$22"
	ldp	w10, w9, [x22, #8]
	bfi	x10, x9, #32, #32
	str	x10, [x21, :lo12:env]
	mov	x19, x8
.LBB6_28:                               // %"$2"
	mov	x0, x19
	mov	sp, x29
	ldp	x20, x19, [sp, #48]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #32]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #64             // 16-byte Folded Reload
	ret
.LBB6_29:                               // %"$14"
	mov	x0, x20
	mov	x1, x19
	bl	protErr
.LBB6_30:                               // %"$26"
	mov	x0, x20
	mov	x1, x8
	bl	numErr
.LBB6_31:                               // %"$40"
	mov	x0, x20
	bl	numErr
.Lfunc_end6:
	.size	_inc, .Lfunc_end6-_inc
	.cfi_endproc
                                        // -- End function
	.globl	_dec                            // -- Begin function _dec
	.p2align	4
	.type	_dec,@function
_dec:                                   // @_dec
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-64]!           // 16-byte Folded Spill
	stp	x24, x23, [sp, #16]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #32]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #48]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 64
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w30, -56
	.cfi_offset w29, -64
	mov	x20, x0
	ldp	w24, w8, [x0, #8]
	bfi	x24, x8, #32, #32
	ldp	w19, w8, [x24]
	bfi	x19, x8, #32, #32
	tst	x19, #0x6
	b.ne	.LBB7_4
// %bb.1:                               // %"$4"
	tbz	w19, #3, .LBB7_3
// %bb.2:                               // %"$7"
	ldp	w19, w8, [x19]
	bfi	x19, x8, #32, #32
	b	.LBB7_4
.LBB7_3:                                // %"$6"
	mov	x0, x19
	bl	evList
	mov	x19, x0
.LBB7_4:                                // %"$3"
	adrp	x23, SymTab+8
	add	x23, x23, :lo12:SymTab+8
	cmp	x19, x23
	b.eq	.LBB7_28
// %bb.5:                               // %"$8"
	tst	x19, #0x6
	b.eq	.LBB7_7
// %bb.6:                               // %"$11"
	mov	x0, x19
	bl	decs
	mov	x19, x0
	b	.LBB7_28
.LBB7_7:                                // %"$10"
	add	x8, x23, #208                   // =208
	cmp	x8, x19
	ccmp	x19, x23, #0, hs
	b.hs	.LBB7_29
// %bb.8:                               // %"$15"
	adrp	x21, env
	ldr	x8, [x21, :lo12:env]
	mov	x9, sp
	sub	x22, x9, #16                    // =16
	mov	sp, x22
	lsr	x10, x19, #32
	lsr	x11, x8, #32
	stp	w19, w10, [x9, #-16]
	stp	w8, w11, [x9, #-8]
	str	x22, [x21, :lo12:env]
	tbz	w19, #3, .LBB7_10
// %bb.9:                               // %"$17"
	ldurb	w8, [x19, #-8]
	ubfx	w8, w8, #3, #1
	cbnz	w8, .LBB7_11
	b	.LBB7_12
.LBB7_10:
	mov	w8, wzr
	cbz	w8, .LBB7_12
.LBB7_11:                               // %"$18"
	mov	x0, x20
	mov	x1, x19
	bl	dbTouch
.LBB7_12:                               // %"$19"
	ldp	w8, w9, [x24, #8]
	bfi	x8, x9, #32, #32
	tst	x8, #0xf
	b.eq	.LBB7_16
// %bb.13:                              // %"$20"
	ldp	w8, w9, [x19]
	bfi	x8, x9, #32, #32
	cmp	x8, x23
	b.eq	.LBB7_27
// %bb.14:                              // %"$24"
	tst	x8, #0x6
	b.eq	.LBB7_30
// %bb.15:                              // %"$27"
	mov	x0, x8
	bl	decs
	b	.LBB7_26
.LBB7_16:                               // %"$21"
	ldp	w1, w9, [x8]
	bfi	x1, x9, #32, #32
	tst	x1, #0x6
	b.ne	.LBB7_20
// %bb.17:                              // %"$29"
	tbz	w1, #3, .LBB7_19
// %bb.18:                              // %"$32"
	ldp	w1, w8, [x1]
	bfi	x1, x8, #32, #32
	b	.LBB7_20
.LBB7_19:                               // %"$31"
	mov	x0, x1
	bl	evList
	mov	x1, x0
.LBB7_20:                               // %"$28"
	ldr	x8, [x21, :lo12:env]
	mov	x9, sp
	sub	x10, x9, #16                    // =16
	mov	sp, x10
	lsr	x11, x1, #32
	stp	w1, w11, [x9, #-16]
	lsr	x11, x8, #32
	stp	w8, w11, [x9, #-8]
	str	x10, [x21, :lo12:env]
	ldp	w8, w9, [x19]
	bfi	x8, x9, #32, #32
	cmp	x8, x23
	b.eq	.LBB7_27
// %bb.21:                              // %"$34"
	cmp	x1, x23
	b.ne	.LBB7_23
// %bb.22:
	mov	x8, x1
	b	.LBB7_27
.LBB7_23:                               // %"$36"
	tst	x8, #0x6
	b.eq	.LBB7_30
// %bb.24:                              // %"$39"
	tst	x1, #0x6
	b.eq	.LBB7_31
// %bb.25:                              // %"$41"
	mov	x0, x8
	bl	subs
.LBB7_26:                               // %"$22"
	mov	x8, x0
	lsr	x9, x0, #32
	stp	w8, w9, [x19]
.LBB7_27:                               // %"$22"
	ldp	w10, w9, [x22, #8]
	bfi	x10, x9, #32, #32
	str	x10, [x21, :lo12:env]
	mov	x19, x8
.LBB7_28:                               // %"$2"
	mov	x0, x19
	mov	sp, x29
	ldp	x20, x19, [sp, #48]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #32]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #64             // 16-byte Folded Reload
	ret
.LBB7_29:                               // %"$14"
	mov	x0, x20
	mov	x1, x19
	bl	protErr
.LBB7_30:                               // %"$26"
	mov	x0, x20
	mov	x1, x8
	bl	numErr
.LBB7_31:                               // %"$40"
	mov	x0, x20
	bl	numErr
.Lfunc_end7:
	.size	_dec, .Lfunc_end7-_dec
	.cfi_endproc
                                        // -- End function
	.globl	_mul                            // -- Begin function _mul
	.p2align	4
	.type	_mul,@function
_mul:                                   // @_mul
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-80]!           // 16-byte Folded Spill
	str	x25, [sp, #16]                  // 8-byte Folded Spill
	stp	x24, x23, [sp, #32]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #48]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #64]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 80
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -64
	.cfi_offset w30, -72
	.cfi_offset w29, -80
	mov	x19, x0
	ldp	w20, w8, [x0, #8]
	bfi	x20, x8, #32, #32
	ldp	w1, w8, [x20]
	bfi	x1, x8, #32, #32
	tst	x1, #0x6
	b.ne	.LBB8_4
// %bb.1:                               // %"$3"
	tbz	w1, #3, .LBB8_3
// %bb.2:                               // %"$6"
	ldp	w1, w8, [x1]
	bfi	x1, x8, #32, #32
	b	.LBB8_4
.LBB8_3:                                // %"$5"
	mov	x0, x1
	bl	evList
	mov	x1, x0
.LBB8_4:                                // %"$2"
	adrp	x23, SymTab+8
	add	x23, x23, :lo12:SymTab+8
	cmp	x1, x23
	b.eq	.LBB8_17
// %bb.5:                               // %"$8"
	adrp	x21, env
	ldr	x8, [x21, :lo12:env]
	mov	x9, sp
	sub	x22, x9, #16                    // =16
	mov	sp, x22
	mov	w10, #10
	lsr	x11, x8, #32
	stp	w10, wzr, [x9, #-16]
	stp	w8, w11, [x9, #-8]
	tst	x1, #0x6
	str	x22, [x21, :lo12:env]
	b.eq	.LBB8_18
// %bb.6:                               // %"$11"
	ubfx	x24, x1, #3, #1
	and	x9, x1, #0xfffffffffffffff7
	mov	x10, sp
	sub	x25, x10, #16                   // =16
	mov	sp, x25
	lsr	x11, x1, #32
	adrp	x8, env
	add	x8, x8, :lo12:env
	stp	w9, w11, [x10, #-16]
	ldr	x9, [x8]
	lsr	x11, x9, #32
	stp	w9, w11, [x10, #-8]
	mov	x0, x25
.LBB8_7:                                // %"$12"
                                        // =>This Inner Loop Header: Depth=1
	lsr	x9, x0, #32
	stp	w0, w9, [x8]
	ldp	w20, w8, [x20, #8]
	bfi	x20, x8, #32, #32
	tst	x20, #0xf
	b.ne	.LBB8_15
// %bb.8:                               // %"$13"
                                        //   in Loop: Header=BB8_7 Depth=1
	ldp	w1, w8, [x20]
	bfi	x1, x8, #32, #32
	tst	x1, #0x6
	b.ne	.LBB8_11
// %bb.9:                               // %"$23"
                                        //   in Loop: Header=BB8_7 Depth=1
	tbz	w1, #3, .LBB8_14
// %bb.10:                              // %"$26"
                                        //   in Loop: Header=BB8_7 Depth=1
	ldp	w1, w8, [x1]
	bfi	x1, x8, #32, #32
.LBB8_11:                               // %"$22"
                                        //   in Loop: Header=BB8_7 Depth=1
	cmp	x1, x23
	b.eq	.LBB8_16
.LBB8_12:                               // %"$27"
                                        //   in Loop: Header=BB8_7 Depth=1
	tst	x1, #0x6
	b.eq	.LBB8_18
// %bb.13:                              // %"$30"
                                        //   in Loop: Header=BB8_7 Depth=1
	eor	w8, w24, #0x1
	and	x9, x1, #0xfffffffffffffff7
	tst	w1, #0x8
	csel	w24, w24, w8, eq
	csel	x1, x1, x9, eq
	lsr	x8, x1, #32
	stp	w1, w8, [x22]
	ldp	w0, w8, [x25]
	bfi	x0, x8, #32, #32
	bl	mulu
	mov	x8, x25
	b	.LBB8_7
.LBB8_14:                               // %"$25"
                                        //   in Loop: Header=BB8_7 Depth=1
	mov	x0, x1
	bl	evList
	mov	x1, x0
	cmp	x1, x23
	b.ne	.LBB8_12
	b	.LBB8_16
.LBB8_15:                               // %"$15"
	ldp	w9, w8, [x25]
	bfi	x9, x8, #32, #32
	eor	x8, x9, #0x8
	cmp	x9, #2                          // =2
	csel	x8, x9, x8, eq
	tst	w24, #0x1
	csel	x1, x9, x8, eq
.LBB8_16:                               // %"$14"
	ldp	w9, w8, [x22, #8]
	bfi	x9, x8, #32, #32
	str	x9, [x21, :lo12:env]
.LBB8_17:                               // %"$9"
	mov	x0, x1
	mov	sp, x29
	ldp	x20, x19, [sp, #64]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #48]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #32]             // 16-byte Folded Reload
	ldr	x25, [sp, #16]                  // 8-byte Folded Reload
	ldp	x29, x30, [sp], #80             // 16-byte Folded Reload
	ret
.LBB8_18:                               // %"$10"
	mov	x0, x19
	bl	numErr
.Lfunc_end8:
	.size	_mul, .Lfunc_end8-_mul
	.cfi_endproc
                                        // -- End function
	.globl	_mulDiv                         // -- Begin function _mulDiv
	.p2align	4
	.type	_mulDiv,@function
_mulDiv:                                // @_mulDiv
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-80]!           // 16-byte Folded Spill
	stp	x26, x25, [sp, #16]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #32]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #48]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #64]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 80
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w30, -72
	.cfi_offset w29, -80
	mov	x19, x0
	ldp	w20, w8, [x0, #8]
	bfi	x20, x8, #32, #32
	ldp	w1, w8, [x20]
	bfi	x1, x8, #32, #32
	tst	x1, #0x6
	b.ne	.LBB9_4
// %bb.1:                               // %"$3"
	tbz	w1, #3, .LBB9_3
// %bb.2:                               // %"$6"
	ldp	w1, w8, [x1]
	bfi	x1, x8, #32, #32
	b	.LBB9_4
.LBB9_3:                                // %"$5"
	mov	x0, x1
	bl	evList
	mov	x1, x0
.LBB9_4:                                // %"$2"
	adrp	x25, SymTab+8
	add	x25, x25, :lo12:SymTab+8
	cmp	x1, x25
	b.eq	.LBB9_19
// %bb.5:                               // %"$8"
	adrp	x21, env
	ldr	x8, [x21, :lo12:env]
	mov	x9, sp
	sub	x22, x9, #16                    // =16
	mov	sp, x22
	mov	w10, #10
	lsr	x11, x8, #32
	stp	w10, wzr, [x9, #-16]
	stp	w8, w11, [x9, #-8]
	tst	x1, #0x6
	str	x22, [x21, :lo12:env]
	b.eq	.LBB9_20
// %bb.6:                               // %"$11"
	ubfx	x23, x1, #3, #1
	and	x8, x1, #0xfffffffffffffff7
	mov	x9, sp
	sub	x24, x9, #16                    // =16
	mov	sp, x24
	lsr	x10, x1, #32
	stp	w8, w10, [x9, #-16]
	ldr	x8, [x21, :lo12:env]
	lsr	x10, x8, #32
	stp	w8, w10, [x9, #-8]
	str	x24, [x21, :lo12:env]
	ldp	w26, w8, [x20, #8]
	bfi	x26, x8, #32, #32
.LBB9_7:                                // %"$12"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w1, w8, [x26]
	bfi	x1, x8, #32, #32
	tst	x1, #0x6
	b.ne	.LBB9_10
// %bb.8:                               // %"$14"
                                        //   in Loop: Header=BB9_7 Depth=1
	tbz	w1, #3, .LBB9_14
// %bb.9:                               // %"$17"
                                        //   in Loop: Header=BB9_7 Depth=1
	ldp	w1, w8, [x1]
	bfi	x1, x8, #32, #32
.LBB9_10:                               // %"$13"
                                        //   in Loop: Header=BB9_7 Depth=1
	cmp	x1, x25
	b.eq	.LBB9_18
.LBB9_11:                               // %"$18"
                                        //   in Loop: Header=BB9_7 Depth=1
	tst	x1, #0x6
	b.eq	.LBB9_20
// %bb.12:                              // %"$22"
                                        //   in Loop: Header=BB9_7 Depth=1
	eor	w8, w23, #0x1
	and	x9, x1, #0xfffffffffffffff7
	tst	w1, #0x8
	csel	w23, w23, w8, eq
	csel	x20, x1, x9, eq
	lsr	x8, x20, #32
	stp	w20, w8, [x22]
	ldp	w26, w8, [x26, #8]
	bfi	x26, x8, #32, #32
	tst	x26, #0xf
	b.ne	.LBB9_15
// %bb.13:                              // %"$25"
                                        //   in Loop: Header=BB9_7 Depth=1
	ldp	w0, w8, [x24]
	bfi	x0, x8, #32, #32
	mov	x1, x20
	bl	mulu
	lsr	x8, x0, #32
	stp	w0, w8, [x24]
	b	.LBB9_7
.LBB9_14:                               // %"$16"
                                        //   in Loop: Header=BB9_7 Depth=1
	mov	x0, x1
	bl	evList
	mov	x1, x0
	cmp	x1, x25
	b.ne	.LBB9_11
	b	.LBB9_18
.LBB9_15:                               // %"$26"
	cmp	x20, #2                         // =2
	b.eq	.LBB9_21
// %bb.16:                              // %"$28"
	mov	x0, x20
	bl	shru
	mov	x1, x0
	ldr	x8, [x21, :lo12:env]
	mov	x9, sp
	sub	x10, x9, #16                    // =16
	mov	sp, x10
	lsr	x11, x0, #32
	stp	w1, w11, [x9, #-16]
	lsr	x11, x8, #32
	stp	w8, w11, [x9, #-8]
	str	x10, [x21, :lo12:env]
	ldp	w0, w8, [x24]
	bfi	x0, x8, #32, #32
	bl	addu
	lsr	x8, x0, #32
	stp	w0, w8, [x24]
	mov	x1, x20
	bl	divu
	mov	x1, x0
	tbz	w23, #0, .LBB9_18
// %bb.17:                              // %"$29"
	eor	x8, x1, #0x8
	cmp	x1, #2                          // =2
	csel	x1, x1, x8, eq
.LBB9_18:                               // %"$19"
	ldp	w9, w8, [x22, #8]
	bfi	x9, x8, #32, #32
	str	x9, [x21, :lo12:env]
.LBB9_19:                               // %"$9"
	mov	x0, x1
	mov	sp, x29
	ldp	x20, x19, [sp, #64]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #48]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #32]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #80             // 16-byte Folded Reload
	ret
.LBB9_20:                               // %"$10"
	mov	x0, x19
	bl	numErr
.LBB9_21:                               // %"$27"
	mov	x0, x19
	bl	divErr
.Lfunc_end9:
	.size	_mulDiv, .Lfunc_end9-_mulDiv
	.cfi_endproc
                                        // -- End function
	.globl	_div                            // -- Begin function _div
	.p2align	4
	.type	_div,@function
_div:                                   // @_div
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-80]!           // 16-byte Folded Spill
	str	x25, [sp, #16]                  // 8-byte Folded Spill
	stp	x24, x23, [sp, #32]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #48]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #64]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 80
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -64
	.cfi_offset w30, -72
	.cfi_offset w29, -80
	mov	x19, x0
	ldp	w20, w8, [x0, #8]
	bfi	x20, x8, #32, #32
	ldp	w1, w8, [x20]
	bfi	x1, x8, #32, #32
	tst	x1, #0x6
	b.ne	.LBB10_4
// %bb.1:                               // %"$3"
	tbz	w1, #3, .LBB10_3
// %bb.2:                               // %"$6"
	ldp	w1, w8, [x1]
	bfi	x1, x8, #32, #32
	b	.LBB10_4
.LBB10_3:                               // %"$5"
	mov	x0, x1
	bl	evList
	mov	x1, x0
.LBB10_4:                               // %"$2"
	adrp	x23, SymTab+8
	add	x23, x23, :lo12:SymTab+8
	cmp	x1, x23
	b.eq	.LBB10_18
// %bb.5:                               // %"$8"
	adrp	x21, env
	ldr	x8, [x21, :lo12:env]
	mov	x9, sp
	sub	x22, x9, #16                    // =16
	mov	sp, x22
	mov	w10, #10
	lsr	x11, x8, #32
	stp	w10, wzr, [x9, #-16]
	stp	w8, w11, [x9, #-8]
	tst	x1, #0x6
	str	x22, [x21, :lo12:env]
	b.eq	.LBB10_20
// %bb.6:                               // %"$11"
	ubfx	x24, x1, #3, #1
	and	x9, x1, #0xfffffffffffffff7
	mov	x10, sp
	sub	x25, x10, #16                   // =16
	mov	sp, x25
	lsr	x11, x1, #32
	adrp	x8, env
	add	x8, x8, :lo12:env
	stp	w9, w11, [x10, #-16]
	ldr	x9, [x8]
	lsr	x11, x9, #32
	stp	w9, w11, [x10, #-8]
	mov	x0, x25
.LBB10_7:                               // %"$12"
                                        // =>This Inner Loop Header: Depth=1
	lsr	x9, x0, #32
	stp	w0, w9, [x8]
	ldp	w20, w8, [x20, #8]
	bfi	x20, x8, #32, #32
	tst	x20, #0xf
	b.ne	.LBB10_16
// %bb.8:                               // %"$13"
                                        //   in Loop: Header=BB10_7 Depth=1
	ldp	w1, w8, [x20]
	bfi	x1, x8, #32, #32
	tst	x1, #0x6
	b.ne	.LBB10_11
// %bb.9:                               // %"$23"
                                        //   in Loop: Header=BB10_7 Depth=1
	tbz	w1, #3, .LBB10_15
// %bb.10:                              // %"$26"
                                        //   in Loop: Header=BB10_7 Depth=1
	ldp	w1, w8, [x1]
	bfi	x1, x8, #32, #32
.LBB10_11:                              // %"$22"
                                        //   in Loop: Header=BB10_7 Depth=1
	cmp	x1, x23
	b.eq	.LBB10_17
.LBB10_12:                              // %"$27"
                                        //   in Loop: Header=BB10_7 Depth=1
	cmp	x1, #2                          // =2
	b.eq	.LBB10_19
// %bb.13:                              // %"$30"
                                        //   in Loop: Header=BB10_7 Depth=1
	tst	x1, #0x6
	b.eq	.LBB10_20
// %bb.14:                              // %"$32"
                                        //   in Loop: Header=BB10_7 Depth=1
	eor	w8, w24, #0x1
	and	x9, x1, #0xfffffffffffffff7
	tst	w1, #0x8
	csel	w24, w24, w8, eq
	csel	x1, x1, x9, eq
	lsr	x8, x1, #32
	stp	w1, w8, [x22]
	ldp	w0, w8, [x25]
	bfi	x0, x8, #32, #32
	bl	divu
	mov	x8, x25
	b	.LBB10_7
.LBB10_15:                              // %"$25"
                                        //   in Loop: Header=BB10_7 Depth=1
	mov	x0, x1
	bl	evList
	mov	x1, x0
	cmp	x1, x23
	b.ne	.LBB10_12
	b	.LBB10_17
.LBB10_16:                              // %"$15"
	ldp	w9, w8, [x25]
	bfi	x9, x8, #32, #32
	eor	x8, x9, #0x8
	cmp	x9, #2                          // =2
	csel	x8, x9, x8, eq
	tst	w24, #0x1
	csel	x1, x9, x8, eq
.LBB10_17:                              // %"$14"
	ldp	w9, w8, [x22, #8]
	bfi	x9, x8, #32, #32
	str	x9, [x21, :lo12:env]
.LBB10_18:                              // %"$9"
	mov	x0, x1
	mov	sp, x29
	ldp	x20, x19, [sp, #64]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #48]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #32]             // 16-byte Folded Reload
	ldr	x25, [sp, #16]                  // 8-byte Folded Reload
	ldp	x29, x30, [sp], #80             // 16-byte Folded Reload
	ret
.LBB10_19:                              // %"$29"
	mov	x0, x19
	bl	divErr
.LBB10_20:                              // %"$10"
	mov	x0, x19
	bl	numErr
.Lfunc_end10:
	.size	_div, .Lfunc_end10-_div
	.cfi_endproc
                                        // -- End function
	.globl	_rem                            // -- Begin function _rem
	.p2align	4
	.type	_rem,@function
_rem:                                   // @_rem
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-80]!           // 16-byte Folded Spill
	str	x25, [sp, #16]                  // 8-byte Folded Spill
	stp	x24, x23, [sp, #32]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #48]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #64]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 80
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -64
	.cfi_offset w30, -72
	.cfi_offset w29, -80
	mov	x20, x0
	ldp	w21, w8, [x0, #8]
	bfi	x21, x8, #32, #32
	ldp	w19, w8, [x21]
	bfi	x19, x8, #32, #32
	tst	x19, #0x6
	b.ne	.LBB11_4
// %bb.1:                               // %"$3"
	tbz	w19, #3, .LBB11_3
// %bb.2:                               // %"$6"
	ldp	w19, w8, [x19]
	bfi	x19, x8, #32, #32
	b	.LBB11_4
.LBB11_3:                               // %"$5"
	mov	x0, x19
	bl	evList
	mov	x19, x0
.LBB11_4:                               // %"$2"
	adrp	x24, SymTab+8
	add	x24, x24, :lo12:SymTab+8
	cmp	x19, x24
	b.eq	.LBB11_18
// %bb.5:                               // %"$8"
	adrp	x22, env
	ldr	x8, [x22, :lo12:env]
	mov	x9, sp
	sub	x23, x9, #16                    // =16
	mov	sp, x23
	mov	w10, #10
	lsr	x11, x8, #32
	stp	w10, wzr, [x9, #-16]
	stp	w8, w11, [x9, #-8]
	tst	x19, #0x6
	str	x23, [x22, :lo12:env]
	b.eq	.LBB11_21
// %bb.6:                               // %"$11"
	and	x9, x19, #0xfffffffffffffff7
	mov	x10, sp
	sub	x25, x10, #16                   // =16
	mov	sp, x25
	lsr	x11, x19, #32
	adrp	x8, env
	add	x8, x8, :lo12:env
	stp	w9, w11, [x10, #-16]
	ldr	x9, [x8]
	lsr	x11, x9, #32
	stp	w9, w11, [x10, #-8]
	mov	x0, x25
.LBB11_7:                               // %"$12"
                                        // =>This Inner Loop Header: Depth=1
	lsr	x9, x0, #32
	stp	w0, w9, [x8]
	ldp	w21, w8, [x21, #8]
	bfi	x21, x8, #32, #32
	tst	x21, #0xf
	b.ne	.LBB11_16
// %bb.8:                               // %"$13"
                                        //   in Loop: Header=BB11_7 Depth=1
	ldp	w8, w9, [x21]
	bfi	x8, x9, #32, #32
	tst	x8, #0x6
	b.ne	.LBB11_11
// %bb.9:                               // %"$23"
                                        //   in Loop: Header=BB11_7 Depth=1
	tbz	w8, #3, .LBB11_15
// %bb.10:                              // %"$26"
                                        //   in Loop: Header=BB11_7 Depth=1
	ldp	w8, w9, [x8]
	bfi	x8, x9, #32, #32
.LBB11_11:                              // %"$22"
                                        //   in Loop: Header=BB11_7 Depth=1
	cmp	x8, x24
	b.eq	.LBB11_17
.LBB11_12:                              // %"$27"
                                        //   in Loop: Header=BB11_7 Depth=1
	cmp	x8, #2                          // =2
	b.eq	.LBB11_19
// %bb.13:                              // %"$30"
                                        //   in Loop: Header=BB11_7 Depth=1
	tst	x8, #0x6
	b.eq	.LBB11_20
// %bb.14:                              // %"$32"
                                        //   in Loop: Header=BB11_7 Depth=1
	ldp	w0, w9, [x25]
	bfi	x0, x9, #32, #32
	and	x1, x8, #0xfffffffffffffff7
	lsr	x8, x8, #32
	stp	w1, w8, [x23]
	bl	remu
	mov	x8, x25
	b	.LBB11_7
.LBB11_15:                              // %"$25"
                                        //   in Loop: Header=BB11_7 Depth=1
	mov	x0, x8
	bl	evList
	mov	x8, x0
	cmp	x8, x24
	b.ne	.LBB11_12
	b	.LBB11_17
.LBB11_16:                              // %"$15"
	ldp	w9, w8, [x25]
	bfi	x9, x8, #32, #32
	eor	x8, x9, #0x8
	cmp	x9, #2                          // =2
	csel	x8, x9, x8, eq
	tst	w19, #0x8
	csel	x8, x9, x8, eq
.LBB11_17:                              // %"$14"
	ldp	w10, w9, [x23, #8]
	bfi	x10, x9, #32, #32
	str	x10, [x22, :lo12:env]
	mov	x19, x8
.LBB11_18:                              // %"$9"
	mov	x0, x19
	mov	sp, x29
	ldp	x20, x19, [sp, #64]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #48]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #32]             // 16-byte Folded Reload
	ldr	x25, [sp, #16]                  // 8-byte Folded Reload
	ldp	x29, x30, [sp], #80             // 16-byte Folded Reload
	ret
.LBB11_19:                              // %"$29"
	mov	x0, x20
	bl	divErr
.LBB11_20:                              // %"$31"
	mov	x0, x20
	mov	x1, x8
	bl	numErr
.LBB11_21:                              // %"$10"
	mov	x0, x20
	mov	x1, x19
	bl	numErr
.Lfunc_end11:
	.size	_rem, .Lfunc_end11-_rem
	.cfi_endproc
                                        // -- End function
	.globl	_shr                            // -- Begin function _shr
	.p2align	4
	.type	_shr,@function
_shr:                                   // @_shr
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-48]!           // 16-byte Folded Spill
	stp	x22, x21, [sp, #16]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #32]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 48
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w30, -40
	.cfi_offset w29, -48
	mov	x21, x0
	ldp	w19, w8, [x0, #8]
	bfi	x19, x8, #32, #32
	mov	x1, x19
	bl	evCnt
	mov	x20, x0
	ldp	w9, w8, [x19, #8]
	bfi	x9, x8, #32, #32
	ldp	w19, w8, [x9]
	bfi	x19, x8, #32, #32
	tst	x19, #0x6
	b.eq	.LBB12_4
// %bb.1:                               // %"$2"
	cbz	x20, .LBB12_3
.LBB12_2:                               // %"$8"
	adrp	x8, SymTab+8
	add	x8, x8, :lo12:SymTab+8
	cmp	x19, x8
	b.ne	.LBB12_6
.LBB12_3:
	mov	w8, #1
	tbnz	w8, #0, .LBB12_20
	b	.LBB12_8
.LBB12_4:                               // %"$3"
	tbz	w19, #3, .LBB12_16
// %bb.5:                               // %"$6"
	ldp	w19, w8, [x19]
	bfi	x19, x8, #32, #32
	cbnz	x20, .LBB12_2
	b	.LBB12_3
.LBB12_6:                               // %"$9"
	tst	x19, #0x6
	b.eq	.LBB12_21
// %bb.7:                               // %"$11"
	cmp	x19, #2                         // =2
	cset	w8, eq
	tbnz	w8, #0, .LBB12_20
.LBB12_8:                               // %"$13"
	and	x1, x19, #0xfffffffffffffff7
	adrp	x21, env
	ldr	x8, [x21, :lo12:env]
	mov	x9, sp
	sub	x22, x9, #16                    // =16
	mov	sp, x22
	lsr	x10, x19, #32
	lsr	x11, x8, #32
	stp	w1, w10, [x9, #-16]
	stp	w8, w11, [x9, #-8]
	cmp	x20, #0                         // =0
	str	x22, [x21, :lo12:env]
	b.le	.LBB12_12
.LBB12_9:                               // %"$18"
                                        // =>This Inner Loop Header: Depth=1
	cmp	x20, #63                        // =63
	cset	w8, hi
	tst	w1, #0x4
	csel	w8, wzr, w8, eq
	cbz	w8, .LBB12_17
// %bb.10:                              // %"$21"
                                        //   in Loop: Header=BB12_9 Depth=1
	ldp	w1, w8, [x1, #4]
	bfi	x1, x8, #32, #32
	subs	x20, x20, #64                   // =64
	b.ne	.LBB12_9
	b	.LBB12_19
.LBB12_11:                              // %"$29"
                                        //   in Loop: Header=BB12_12 Depth=1
	mov	x0, xzr
	bl	consNum
	mov	x1, x0
	lsr	x8, x0, #32
	stp	w1, w8, [x22]
	adds	x20, x20, #64                   // =64
	b.eq	.LBB12_19
.LBB12_12:                              // %"$28"
                                        // =>This Inner Loop Header: Depth=1
	cmn	x20, #64                        // =64
	b.ls	.LBB12_11
// %bb.13:                              // %"$30"
	mov	x0, x1
	bl	shlu
.LBB12_14:                              // %"$33"
                                        // =>This Inner Loop Header: Depth=1
	mov	x1, x0
	add	x20, x20, #1                    // =1
	lsr	x8, x0, #32
	stp	w1, w8, [x22]
	cbz	x20, .LBB12_19
// %bb.15:                              // %"$34"
                                        //   in Loop: Header=BB12_14 Depth=1
	mov	x0, x1
	bl	twice
	b	.LBB12_14
.LBB12_16:                              // %"$5"
	mov	x0, x19
	bl	evList
	mov	x19, x0
	cbnz	x20, .LBB12_2
	b	.LBB12_3
.LBB12_17:                              // %"$22"
	mov	x0, x1
	bl	shru
	mov	x1, x0
	lsr	x8, x0, #32
	stp	w1, w8, [x22]
	sub	x20, x20, #1                    // =1
	cbz	x20, .LBB12_19
.LBB12_18:                              // %"$26"
                                        // =>This Inner Loop Header: Depth=1
	mov	x0, x1
	bl	half
	mov	x1, x0
	sub	x20, x20, #1                    // =1
	cbnz	x20, .LBB12_18
.LBB12_19:                              // %"$-9"
	eor	x8, x1, #0x8
	cmp	x1, #2                          // =2
	csel	x8, x1, x8, eq
	tst	w19, #0x8
	csel	x19, x1, x8, eq
	ldp	w9, w8, [x22, #8]
	bfi	x9, x8, #32, #32
	str	x9, [x21, :lo12:env]
.LBB12_20:                              // %"$14"
	mov	x0, x19
	mov	sp, x29
	ldp	x20, x19, [sp, #32]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #48             // 16-byte Folded Reload
	ret
.LBB12_21:                              // %"$10"
	mov	x0, x21
	mov	x1, x19
	bl	numErr
.Lfunc_end12:
	.size	_shr, .Lfunc_end12-_shr
	.cfi_endproc
                                        // -- End function
	.globl	_lt0                            // -- Begin function _lt0
	.p2align	4
	.type	_lt0,@function
_lt0:                                   // @_lt0
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w0, w8, [x9]
	bfi	x0, x8, #32, #32
	tst	x0, #0x6
	b.ne	.LBB13_4
// %bb.1:                               // %"$4"
	tbz	w0, #3, .LBB13_3
// %bb.2:                               // %"$7"
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB13_4
.LBB13_3:                               // %"$6"
	bl	evList
.LBB13_4:                               // %"$3"
	tst	x0, #0x6
	cset	w8, ne
	ubfx	x9, x0, #3, #1
	adrp	x10, SymTab+8
	add	x10, x10, :lo12:SymTab+8
	tst	w8, w9
	csel	x0, x0, x10, ne
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end13:
	.size	_lt0, .Lfunc_end13-_lt0
	.cfi_endproc
                                        // -- End function
	.globl	_le0                            // -- Begin function _le0
	.p2align	4
	.type	_le0,@function
_le0:                                   // @_le0
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w0, w8, [x9]
	bfi	x0, x8, #32, #32
	tst	x0, #0x6
	b.ne	.LBB14_4
// %bb.1:                               // %"$4"
	tbz	w0, #3, .LBB14_3
// %bb.2:                               // %"$7"
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB14_4
.LBB14_3:                               // %"$6"
	bl	evList
.LBB14_4:                               // %"$3"
	tst	x0, #0x6
	cset	w8, ne
	cmp	x0, #2                          // =2
	cset	w9, eq
	ubfx	x10, x0, #3, #1
	orr	w9, w9, w10
	adrp	x10, SymTab+8
	add	x10, x10, :lo12:SymTab+8
	tst	w8, w9
	csel	x0, x0, x10, ne
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end14:
	.size	_le0, .Lfunc_end14-_le0
	.cfi_endproc
                                        // -- End function
	.globl	_ge0                            // -- Begin function _ge0
	.p2align	4
	.type	_ge0,@function
_ge0:                                   // @_ge0
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w0, w8, [x9]
	bfi	x0, x8, #32, #32
	tst	x0, #0x6
	b.ne	.LBB15_4
// %bb.1:                               // %"$4"
	tbz	w0, #3, .LBB15_3
// %bb.2:                               // %"$7"
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB15_4
.LBB15_3:                               // %"$6"
	bl	evList
.LBB15_4:                               // %"$3"
	and	x8, x0, #0x6
	tst	x0, #0x8
	adrp	x9, SymTab+8
	add	x9, x9, :lo12:SymTab+8
	ccmp	x8, #0, #4, eq
	csel	x0, x0, x9, ne
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end15:
	.size	_ge0, .Lfunc_end15-_ge0
	.cfi_endproc
                                        // -- End function
	.globl	_gt0                            // -- Begin function _gt0
	.p2align	4
	.type	_gt0,@function
_gt0:                                   // @_gt0
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w0, w8, [x9]
	bfi	x0, x8, #32, #32
	tst	x0, #0x6
	b.ne	.LBB16_4
// %bb.1:                               // %"$4"
	tbz	w0, #3, .LBB16_3
// %bb.2:                               // %"$7"
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB16_4
.LBB16_3:                               // %"$6"
	bl	evList
.LBB16_4:                               // %"$3"
	and	x8, x0, #0x6
	tst	x0, #0x8
	cset	w9, eq
	cmp	x8, #0                          // =0
	ccmp	x0, #2, #4, ne
	csel	w8, wzr, w9, eq
	adrp	x9, SymTab+8
	add	x9, x9, :lo12:SymTab+8
	cmp	w8, #0                          // =0
	csel	x0, x0, x9, ne
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end16:
	.size	_gt0, .Lfunc_end16-_gt0
	.cfi_endproc
                                        // -- End function
	.globl	_abs                            // -- Begin function _abs
	.p2align	4
	.type	_abs,@function
_abs:                                   // @_abs
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x30, x19, [sp, #-16]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w19, -8
	.cfi_offset w30, -16
	mov	x19, x0
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w1, w8, [x9]
	bfi	x1, x8, #32, #32
	tst	x1, #0x6
	b.ne	.LBB17_4
// %bb.1:                               // %"$3"
	tbz	w1, #3, .LBB17_3
// %bb.2:                               // %"$6"
	ldp	w1, w8, [x1]
	bfi	x1, x8, #32, #32
	b	.LBB17_4
.LBB17_3:                               // %"$5"
	mov	x0, x1
	bl	evList
	mov	x1, x0
.LBB17_4:                               // %"$2"
	adrp	x8, SymTab+8
	add	x8, x8, :lo12:SymTab+8
	cmp	x1, x8
	b.eq	.LBB17_7
// %bb.5:                               // %"$8"
	tst	x1, #0x6
	b.eq	.LBB17_8
// %bb.6:                               // %"$11"
	and	x1, x1, #0xfffffffffffffff7
.LBB17_7:                               // %"$9"
	mov	x0, x1
	ldp	x30, x19, [sp], #16             // 16-byte Folded Reload
	ret
.LBB17_8:                               // %"$10"
	mov	x0, x19
	bl	numErr
.Lfunc_end17:
	.size	_abs, .Lfunc_end17-_abs
	.cfi_endproc
                                        // -- End function
	.globl	_bitQ                           // -- Begin function _bitQ
	.p2align	4
	.type	_bitQ,@function
_bitQ:                                  // @_bitQ
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-80]!           // 16-byte Folded Spill
	str	x25, [sp, #16]                  // 8-byte Folded Spill
	stp	x24, x23, [sp, #32]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #48]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #64]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 80
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -64
	.cfi_offset w30, -72
	.cfi_offset w29, -80
	mov	x19, x0
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w1, w8, [x9]
	bfi	x1, x8, #32, #32
	ldp	w21, w20, [x9, #8]
	tst	x1, #0x6
	b.ne	.LBB18_4
// %bb.1:                               // %"$3"
	tbz	w1, #3, .LBB18_3
// %bb.2:                               // %"$6"
	ldp	w1, w8, [x1]
	bfi	x1, x8, #32, #32
	b	.LBB18_4
.LBB18_3:                               // %"$5"
	mov	x0, x1
	bl	evList
	mov	x1, x0
.LBB18_4:                               // %"$2"
	tst	x1, #0x6
	b.eq	.LBB18_25
// %bb.5:                               // %"$8"
	bfi	x21, x20, #32, #32
	and	x20, x1, #0xfffffffffffffff7
	adrp	x22, env
	ldr	x8, [x22, :lo12:env]
	mov	x9, sp
	sub	x23, x9, #16                    // =16
	mov	sp, x23
	lsr	x10, x1, #32
	lsr	x11, x8, #32
	stp	w20, w10, [x9, #-16]
	stp	w8, w11, [x9, #-8]
	adrp	x24, SymTab+8
	add	x24, x24, :lo12:SymTab+8
	str	x23, [x22, :lo12:env]
.LBB18_6:                               // %"$9"
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB18_14 Depth 2
	tst	x21, #0xf
	b.ne	.LBB18_24
// %bb.7:                               // %"$10"
                                        //   in Loop: Header=BB18_6 Depth=1
	ldp	w1, w8, [x21]
	bfi	x1, x8, #32, #32
	ldp	w21, w25, [x21, #8]
	tst	x1, #0x6
	b.ne	.LBB18_11
// %bb.8:                               // %"$14"
                                        //   in Loop: Header=BB18_6 Depth=1
	tbz	w1, #3, .LBB18_10
// %bb.9:                               // %"$17"
                                        //   in Loop: Header=BB18_6 Depth=1
	ldp	w1, w8, [x1]
	bfi	x1, x8, #32, #32
	b	.LBB18_11
.LBB18_10:                              // %"$16"
                                        //   in Loop: Header=BB18_6 Depth=1
	mov	x0, x1
	bl	evList
	mov	x1, x0
.LBB18_11:                              // %"$13"
                                        //   in Loop: Header=BB18_6 Depth=1
	cmp	x1, x24
	b.eq	.LBB18_23
// %bb.12:                              // %"$18"
                                        //   in Loop: Header=BB18_6 Depth=1
	tst	x1, #0x6
	b.eq	.LBB18_25
// %bb.13:                              // %"$21"
                                        //   in Loop: Header=BB18_6 Depth=1
	bfi	x21, x25, #32, #32
	and	x8, x1, #0xfffffffffffffff7
	mov	x9, x20
	tbz	w9, #2, .LBB18_17
.LBB18_14:                              // %"$23"
                                        //   Parent Loop BB18_6 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	tbz	w8, #2, .LBB18_21
// %bb.15:                              // %"$26"
                                        //   in Loop: Header=BB18_14 Depth=2
	ldp	w11, w10, [x9, #-4]
	bfi	x11, x10, #32, #32
	ldp	w12, w10, [x8, #-4]
	bfi	x12, x10, #32, #32
	bics	xzr, x11, x12
	b.ne	.LBB18_21
// %bb.16:                              // %"$28"
                                        //   in Loop: Header=BB18_14 Depth=2
	ldp	w8, w10, [x8, #4]
	bfi	x8, x10, #32, #32
	ldp	w9, w10, [x9, #4]
	bfi	x9, x10, #32, #32
	tbnz	w9, #2, .LBB18_14
.LBB18_17:                              // %"$24"
                                        //   in Loop: Header=BB18_6 Depth=1
	tbz	w8, #2, .LBB18_19
// %bb.18:                              // %"$29"
                                        //   in Loop: Header=BB18_6 Depth=1
	lsr	x9, x9, #4
	ldp	w8, w10, [x8, #-4]
	bfi	x8, x10, #32, #32
.LBB18_19:                              // %"$30"
                                        //   in Loop: Header=BB18_6 Depth=1
	bics	xzr, x9, x8
	b.eq	.LBB18_6
// %bb.20:
	mov	x20, x24
	b	.LBB18_24
.LBB18_21:                              // %"$25"
	ldp	w9, w8, [x23, #8]
	bfi	x9, x8, #32, #32
	str	x9, [x22, :lo12:env]
	adrp	x0, SymTab+8
	add	x0, x0, :lo12:SymTab+8
.LBB18_22:                              // %"$25"
	mov	sp, x29
	ldp	x20, x19, [sp, #64]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #48]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #32]             // 16-byte Folded Reload
	ldr	x25, [sp, #16]                  // 8-byte Folded Reload
	ldp	x29, x30, [sp], #80             // 16-byte Folded Reload
	ret
.LBB18_23:
	mov	x20, x1
.LBB18_24:                              // %"$11"
	ldp	w9, w8, [x23, #8]
	bfi	x9, x8, #32, #32
	str	x9, [x22, :lo12:env]
	mov	x0, x20
	b	.LBB18_22
.LBB18_25:                              // %"$7"
	mov	x0, x19
	bl	numErr
.Lfunc_end18:
	.size	_bitQ, .Lfunc_end18-_bitQ
	.cfi_endproc
                                        // -- End function
	.globl	_bitAnd                         // -- Begin function _bitAnd
	.p2align	4
	.type	_bitAnd,@function
_bitAnd:                                // @_bitAnd
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-64]!           // 16-byte Folded Spill
	stp	x24, x23, [sp, #16]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #32]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #48]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 64
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w30, -56
	.cfi_offset w29, -64
	mov	x19, x0
	ldp	w20, w8, [x0, #8]
	bfi	x20, x8, #32, #32
	ldp	w1, w8, [x20]
	bfi	x1, x8, #32, #32
	tst	x1, #0x6
	b.ne	.LBB19_4
// %bb.1:                               // %"$3"
	tbz	w1, #3, .LBB19_3
// %bb.2:                               // %"$6"
	ldp	w1, w8, [x1]
	bfi	x1, x8, #32, #32
	b	.LBB19_4
.LBB19_3:                               // %"$5"
	mov	x0, x1
	bl	evList
	mov	x1, x0
.LBB19_4:                               // %"$2"
	adrp	x23, SymTab+8
	add	x23, x23, :lo12:SymTab+8
	cmp	x1, x23
	b.eq	.LBB19_17
// %bb.5:                               // %"$8"
	adrp	x21, env
	ldr	x8, [x21, :lo12:env]
	mov	x9, sp
	sub	x22, x9, #16                    // =16
	mov	sp, x22
	mov	w10, #10
	lsr	x11, x8, #32
	stp	w10, wzr, [x9, #-16]
	stp	w8, w11, [x9, #-8]
	tst	x1, #0x6
	str	x22, [x21, :lo12:env]
	b.eq	.LBB19_18
// %bb.6:                               // %"$11"
	and	x9, x1, #0xfffffffffffffff7
	mov	x10, sp
	sub	x24, x10, #16                   // =16
	mov	sp, x24
	lsr	x11, x1, #32
	adrp	x8, env
	add	x8, x8, :lo12:env
	stp	w9, w11, [x10, #-16]
	ldr	x9, [x8]
	lsr	x11, x9, #32
	stp	w9, w11, [x10, #-8]
	mov	x0, x24
.LBB19_7:                               // %"$12"
                                        // =>This Inner Loop Header: Depth=1
	lsr	x9, x0, #32
	stp	w0, w9, [x8]
	ldp	w20, w8, [x20, #8]
	bfi	x20, x8, #32, #32
	tst	x20, #0xf
	b.ne	.LBB19_15
// %bb.8:                               // %"$13"
                                        //   in Loop: Header=BB19_7 Depth=1
	ldp	w1, w8, [x20]
	bfi	x1, x8, #32, #32
	tst	x1, #0x6
	b.ne	.LBB19_11
// %bb.9:                               // %"$17"
                                        //   in Loop: Header=BB19_7 Depth=1
	tbz	w1, #3, .LBB19_14
// %bb.10:                              // %"$20"
                                        //   in Loop: Header=BB19_7 Depth=1
	ldp	w1, w8, [x1]
	bfi	x1, x8, #32, #32
.LBB19_11:                              // %"$16"
                                        //   in Loop: Header=BB19_7 Depth=1
	cmp	x1, x23
	b.eq	.LBB19_16
.LBB19_12:                              // %"$21"
                                        //   in Loop: Header=BB19_7 Depth=1
	tst	x1, #0x6
	b.eq	.LBB19_18
// %bb.13:                              // %"$24"
                                        //   in Loop: Header=BB19_7 Depth=1
	lsr	x8, x1, #32
	stp	w1, w8, [x22]
	ldp	w0, w8, [x24]
	bfi	x0, x8, #32, #32
	and	x1, x1, #0xfffffffffffffff7
	bl	andu
	mov	x8, x24
	b	.LBB19_7
.LBB19_14:                              // %"$19"
                                        //   in Loop: Header=BB19_7 Depth=1
	mov	x0, x1
	bl	evList
	mov	x1, x0
	cmp	x1, x23
	b.ne	.LBB19_12
	b	.LBB19_16
.LBB19_15:                              // %"$15"
	ldp	w1, w8, [x24]
	bfi	x1, x8, #32, #32
.LBB19_16:                              // %"$14"
	ldp	w9, w8, [x22, #8]
	bfi	x9, x8, #32, #32
	str	x9, [x21, :lo12:env]
.LBB19_17:                              // %"$9"
	mov	x0, x1
	mov	sp, x29
	ldp	x20, x19, [sp, #48]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #32]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #64             // 16-byte Folded Reload
	ret
.LBB19_18:                              // %"$10"
	mov	x0, x19
	bl	numErr
.Lfunc_end19:
	.size	_bitAnd, .Lfunc_end19-_bitAnd
	.cfi_endproc
                                        // -- End function
	.globl	_bitOr                          // -- Begin function _bitOr
	.p2align	4
	.type	_bitOr,@function
_bitOr:                                 // @_bitOr
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-64]!           // 16-byte Folded Spill
	stp	x24, x23, [sp, #16]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #32]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #48]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 64
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w30, -56
	.cfi_offset w29, -64
	mov	x19, x0
	ldp	w20, w8, [x0, #8]
	bfi	x20, x8, #32, #32
	ldp	w1, w8, [x20]
	bfi	x1, x8, #32, #32
	tst	x1, #0x6
	b.ne	.LBB20_4
// %bb.1:                               // %"$3"
	tbz	w1, #3, .LBB20_3
// %bb.2:                               // %"$6"
	ldp	w1, w8, [x1]
	bfi	x1, x8, #32, #32
	b	.LBB20_4
.LBB20_3:                               // %"$5"
	mov	x0, x1
	bl	evList
	mov	x1, x0
.LBB20_4:                               // %"$2"
	adrp	x23, SymTab+8
	add	x23, x23, :lo12:SymTab+8
	cmp	x1, x23
	b.eq	.LBB20_17
// %bb.5:                               // %"$8"
	adrp	x21, env
	ldr	x8, [x21, :lo12:env]
	mov	x9, sp
	sub	x22, x9, #16                    // =16
	mov	sp, x22
	mov	w10, #10
	lsr	x11, x8, #32
	stp	w10, wzr, [x9, #-16]
	stp	w8, w11, [x9, #-8]
	tst	x1, #0x6
	str	x22, [x21, :lo12:env]
	b.eq	.LBB20_18
// %bb.6:                               // %"$11"
	and	x9, x1, #0xfffffffffffffff7
	mov	x10, sp
	sub	x24, x10, #16                   // =16
	mov	sp, x24
	lsr	x11, x1, #32
	adrp	x8, env
	add	x8, x8, :lo12:env
	stp	w9, w11, [x10, #-16]
	ldr	x9, [x8]
	lsr	x11, x9, #32
	stp	w9, w11, [x10, #-8]
	mov	x0, x24
.LBB20_7:                               // %"$12"
                                        // =>This Inner Loop Header: Depth=1
	lsr	x9, x0, #32
	stp	w0, w9, [x8]
	ldp	w20, w8, [x20, #8]
	bfi	x20, x8, #32, #32
	tst	x20, #0xf
	b.ne	.LBB20_15
// %bb.8:                               // %"$13"
                                        //   in Loop: Header=BB20_7 Depth=1
	ldp	w1, w8, [x20]
	bfi	x1, x8, #32, #32
	tst	x1, #0x6
	b.ne	.LBB20_11
// %bb.9:                               // %"$17"
                                        //   in Loop: Header=BB20_7 Depth=1
	tbz	w1, #3, .LBB20_14
// %bb.10:                              // %"$20"
                                        //   in Loop: Header=BB20_7 Depth=1
	ldp	w1, w8, [x1]
	bfi	x1, x8, #32, #32
.LBB20_11:                              // %"$16"
                                        //   in Loop: Header=BB20_7 Depth=1
	cmp	x1, x23
	b.eq	.LBB20_16
.LBB20_12:                              // %"$21"
                                        //   in Loop: Header=BB20_7 Depth=1
	tst	x1, #0x6
	b.eq	.LBB20_18
// %bb.13:                              // %"$24"
                                        //   in Loop: Header=BB20_7 Depth=1
	lsr	x8, x1, #32
	stp	w1, w8, [x22]
	ldp	w0, w8, [x24]
	bfi	x0, x8, #32, #32
	and	x1, x1, #0xfffffffffffffff7
	bl	oru
	mov	x8, x24
	b	.LBB20_7
.LBB20_14:                              // %"$19"
                                        //   in Loop: Header=BB20_7 Depth=1
	mov	x0, x1
	bl	evList
	mov	x1, x0
	cmp	x1, x23
	b.ne	.LBB20_12
	b	.LBB20_16
.LBB20_15:                              // %"$15"
	ldp	w1, w8, [x24]
	bfi	x1, x8, #32, #32
.LBB20_16:                              // %"$14"
	ldp	w9, w8, [x22, #8]
	bfi	x9, x8, #32, #32
	str	x9, [x21, :lo12:env]
.LBB20_17:                              // %"$9"
	mov	x0, x1
	mov	sp, x29
	ldp	x20, x19, [sp, #48]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #32]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #64             // 16-byte Folded Reload
	ret
.LBB20_18:                              // %"$10"
	mov	x0, x19
	bl	numErr
.Lfunc_end20:
	.size	_bitOr, .Lfunc_end20-_bitOr
	.cfi_endproc
                                        // -- End function
	.globl	_bitXor                         // -- Begin function _bitXor
	.p2align	4
	.type	_bitXor,@function
_bitXor:                                // @_bitXor
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-64]!           // 16-byte Folded Spill
	stp	x24, x23, [sp, #16]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #32]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #48]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 64
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w30, -56
	.cfi_offset w29, -64
	mov	x19, x0
	ldp	w20, w8, [x0, #8]
	bfi	x20, x8, #32, #32
	ldp	w1, w8, [x20]
	bfi	x1, x8, #32, #32
	tst	x1, #0x6
	b.ne	.LBB21_4
// %bb.1:                               // %"$3"
	tbz	w1, #3, .LBB21_3
// %bb.2:                               // %"$6"
	ldp	w1, w8, [x1]
	bfi	x1, x8, #32, #32
	b	.LBB21_4
.LBB21_3:                               // %"$5"
	mov	x0, x1
	bl	evList
	mov	x1, x0
.LBB21_4:                               // %"$2"
	adrp	x23, SymTab+8
	add	x23, x23, :lo12:SymTab+8
	cmp	x1, x23
	b.eq	.LBB21_17
// %bb.5:                               // %"$8"
	adrp	x21, env
	ldr	x8, [x21, :lo12:env]
	mov	x9, sp
	sub	x22, x9, #16                    // =16
	mov	sp, x22
	mov	w10, #10
	lsr	x11, x8, #32
	stp	w10, wzr, [x9, #-16]
	stp	w8, w11, [x9, #-8]
	tst	x1, #0x6
	str	x22, [x21, :lo12:env]
	b.eq	.LBB21_18
// %bb.6:                               // %"$11"
	and	x9, x1, #0xfffffffffffffff7
	mov	x10, sp
	sub	x24, x10, #16                   // =16
	mov	sp, x24
	lsr	x11, x1, #32
	adrp	x8, env
	add	x8, x8, :lo12:env
	stp	w9, w11, [x10, #-16]
	ldr	x9, [x8]
	lsr	x11, x9, #32
	stp	w9, w11, [x10, #-8]
	mov	x0, x24
.LBB21_7:                               // %"$12"
                                        // =>This Inner Loop Header: Depth=1
	lsr	x9, x0, #32
	stp	w0, w9, [x8]
	ldp	w20, w8, [x20, #8]
	bfi	x20, x8, #32, #32
	tst	x20, #0xf
	b.ne	.LBB21_15
// %bb.8:                               // %"$13"
                                        //   in Loop: Header=BB21_7 Depth=1
	ldp	w1, w8, [x20]
	bfi	x1, x8, #32, #32
	tst	x1, #0x6
	b.ne	.LBB21_11
// %bb.9:                               // %"$17"
                                        //   in Loop: Header=BB21_7 Depth=1
	tbz	w1, #3, .LBB21_14
// %bb.10:                              // %"$20"
                                        //   in Loop: Header=BB21_7 Depth=1
	ldp	w1, w8, [x1]
	bfi	x1, x8, #32, #32
.LBB21_11:                              // %"$16"
                                        //   in Loop: Header=BB21_7 Depth=1
	cmp	x1, x23
	b.eq	.LBB21_16
.LBB21_12:                              // %"$21"
                                        //   in Loop: Header=BB21_7 Depth=1
	tst	x1, #0x6
	b.eq	.LBB21_18
// %bb.13:                              // %"$24"
                                        //   in Loop: Header=BB21_7 Depth=1
	lsr	x8, x1, #32
	stp	w1, w8, [x22]
	ldp	w0, w8, [x24]
	bfi	x0, x8, #32, #32
	and	x1, x1, #0xfffffffffffffff7
	bl	xoru
	mov	x8, x24
	b	.LBB21_7
.LBB21_14:                              // %"$19"
                                        //   in Loop: Header=BB21_7 Depth=1
	mov	x0, x1
	bl	evList
	mov	x1, x0
	cmp	x1, x23
	b.ne	.LBB21_12
	b	.LBB21_16
.LBB21_15:                              // %"$15"
	ldp	w1, w8, [x24]
	bfi	x1, x8, #32, #32
.LBB21_16:                              // %"$14"
	ldp	w9, w8, [x22, #8]
	bfi	x9, x8, #32, #32
	str	x9, [x21, :lo12:env]
.LBB21_17:                              // %"$9"
	mov	x0, x1
	mov	sp, x29
	ldp	x20, x19, [sp, #48]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #32]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #64             // 16-byte Folded Reload
	ret
.LBB21_18:                              // %"$10"
	mov	x0, x19
	bl	numErr
.Lfunc_end21:
	.size	_bitXor, .Lfunc_end21-_bitXor
	.cfi_endproc
                                        // -- End function
	.globl	_sqrt                           // -- Begin function _sqrt
	.p2align	4
	.type	_sqrt,@function
_sqrt:                                  // @_sqrt
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-96]!           // 16-byte Folded Spill
	stp	x28, x27, [sp, #16]             // 16-byte Folded Spill
	stp	x26, x25, [sp, #32]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #48]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #64]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #80]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	mov	x19, x0
	ldp	w21, w8, [x0, #8]
	bfi	x21, x8, #32, #32
	ldp	w20, w8, [x21]
	bfi	x20, x8, #32, #32
	tst	x20, #0x6
	b.ne	.LBB22_4
// %bb.1:                               // %"$3"
	tbz	w20, #3, .LBB22_3
// %bb.2:                               // %"$6"
	ldp	w20, w8, [x20]
	bfi	x20, x8, #32, #32
	b	.LBB22_4
.LBB22_3:                               // %"$5"
	mov	x0, x20
	bl	evList
	mov	x20, x0
.LBB22_4:                               // %"$2"
	adrp	x23, SymTab+8
	add	x23, x23, :lo12:SymTab+8
	cmp	x20, x23
	b.eq	.LBB22_31
// %bb.5:                               // %"$8"
	tst	x20, #0x6
	b.eq	.LBB22_32
// %bb.6:                               // %"$11"
	tbnz	w20, #3, .LBB22_33
// %bb.7:                               // %"$13"
	adrp	x22, env
	ldr	x8, [x22, :lo12:env]
	mov	x9, sp
	sub	x25, x9, #16                    // =16
	mov	sp, x25
	lsr	x10, x20, #32
	stp	w20, w10, [x9, #-16]
	lsr	x10, x8, #32
	stp	w8, w10, [x9, #-8]
	str	x25, [x22, :lo12:env]
	ldp	w9, w8, [x21, #8]
	bfi	x9, x8, #32, #32
	ldp	w19, w8, [x9]
	bfi	x19, x8, #32, #32
	tst	x19, #0x6
	b.ne	.LBB22_11
// %bb.8:                               // %"$15"
	tbz	w19, #3, .LBB22_10
// %bb.9:                               // %"$18"
	ldp	w19, w8, [x19]
	bfi	x19, x8, #32, #32
	b	.LBB22_11
.LBB22_10:                              // %"$17"
	mov	x0, x19
	bl	evList
	mov	x19, x0
.LBB22_11:                              // %"$14"
	ldr	x8, [x22, :lo12:env]
	mov	x9, sp
	sub	x10, x9, #16                    // =16
	mov	sp, x10
	lsr	x11, x19, #32
	lsr	x12, x8, #32
	stp	w19, w11, [x9, #-16]
	stp	w8, w12, [x9, #-8]
	tst	x19, #0x6
	str	x10, [x22, :lo12:env]
	b.eq	.LBB22_13
// %bb.12:                              // %"$19"
	mov	x0, x20
	mov	x1, x19
	bl	mulu
	mov	x20, x0
	lsr	x8, x0, #32
	stp	w20, w8, [x25]
.LBB22_13:                              // %"$20"
	tbz	w20, #1, .LBB22_17
// %bb.14:                              // %"$21"
	mov	x8, xzr
	lsr	x9, x20, #4
	mov	x10, #288230376151711744
.LBB22_15:                              // %"$24"
                                        // =>This Inner Loop Header: Depth=1
	add	x11, x8, x10
	subs	x12, x9, x11
	add	x11, x11, x10
	csel	x9, x9, x12, lo
	csel	x8, x8, x11, lo
	lsr	x8, x8, #1
	lsr	x10, x10, #2
	cbnz	x10, .LBB22_15
// %bb.16:                              // %"$28"
	cmp	x8, x9
	cinc	x9, x8, lo
	cmp	x19, x23
	csel	x8, x8, x9, eq
	mov	w20, #2
	bfi	x20, x8, #4, #60
	b	.LBB22_30
.LBB22_17:                              // %"$22"
	mov	x0, xzr
	mov	w1, #18
	bl	consNum
	mov	x21, x0
	mov	x8, sp
	sub	x24, x8, #16                    // =16
	mov	sp, x24
	lsr	x9, x0, #32
	adrp	x27, env
	add	x27, x27, :lo12:env
	stp	w21, w9, [x8, #-16]
	ldr	x9, [x27]
	lsr	x10, x9, #32
	stp	w9, w10, [x8, #-8]
	str	x24, [x27]
	mov	x8, sp
	sub	x28, x8, #16                    // =16
	mov	sp, x28
	mov	w9, #2
	stp	w9, wzr, [x8, #-16]
	ldr	x9, [x27]
	lsr	x10, x9, #32
	stp	w9, w10, [x8, #-8]
	str	x28, [x27]
	ldp	w0, w8, [x20, #-4]
	bfi	x0, x8, #32, #32
	bl	boxNum
	mov	x22, x0
	mov	x8, sp
	sub	x26, x8, #16                    // =16
	mov	sp, x26
	lsr	x9, x0, #32
	stp	w22, w9, [x8, #-16]
	ldr	x9, [x27]
	lsr	x10, x9, #32
	stp	w9, w10, [x8, #-8]
	mov	x0, x26
.LBB22_18:                              // %"$32"
                                        // =>This Inner Loop Header: Depth=1
	lsr	x8, x0, #32
	stp	w0, w8, [x27]
	ldp	w20, w8, [x20, #4]
	bfi	x20, x8, #32, #32
	tbz	w20, #2, .LBB22_20
// %bb.19:                              // %"$33"
                                        //   in Loop: Header=BB22_18 Depth=1
	ldp	w0, w8, [x20, #-4]
	bfi	x0, x8, #32, #32
	bl	boxNum
	mov	x23, x0
	lsr	x8, x0, #32
	stp	w23, w8, [x22, #4]
	mov	x0, xzr
	mov	x1, x21
	bl	consNum
	mov	x27, x24
	mov	x21, x0
	mov	x22, x23
	b	.LBB22_18
.LBB22_20:                              // %"$34"
	lsr	x8, x20, #32
	stp	w20, w8, [x22, #4]
	ldp	w22, w8, [x26]
	stp	w22, w8, [x25]
	bfi	x22, x8, #32, #32
	adrp	x23, SymTab+8
	add	x23, x23, :lo12:SymTab+8
.LBB22_21:                              // %"$35"
                                        // =>This Inner Loop Header: Depth=1
	mov	x0, x21
	mov	x1, x22
	bl	cmpu
	cmp	x0, #1                          // =1
	b.ge	.LBB22_24
// %bb.22:                              // %"$36"
                                        //   in Loop: Header=BB22_21 Depth=1
	mov	x0, x21
	bl	twiceBig
	mov	x0, x21
	bl	twiceBig
	b	.LBB22_21
.LBB22_23:                              // %"$40"
                                        //   in Loop: Header=BB22_24 Depth=1
	ldp	w0, w8, [x28]
	bfi	x0, x8, #32, #32
	bl	half
	lsr	x8, x0, #32
	stp	w0, w8, [x28]
	mov	x0, x21
	bl	half
	bl	half
	mov	x21, x0
	lsr	x8, x0, #32
	stp	w21, w8, [x24]
	cmp	x0, #2                          // =2
	b.eq	.LBB22_26
.LBB22_24:                              // %"$38"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w0, w8, [x28]
	bfi	x0, x8, #32, #32
	mov	x1, x21
	bl	addu
	mov	x20, x0
	lsr	x8, x0, #32
	stp	w20, w8, [x26]
	mov	x0, x22
	mov	x1, x20
	bl	cmpu
	tbnz	x0, #63, .LBB22_23
// %bb.25:                              // %"$39"
                                        //   in Loop: Header=BB22_24 Depth=1
	mov	x0, x22
	mov	x1, x20
	bl	subu
	mov	x22, x0
	lsr	x8, x0, #32
	stp	w22, w8, [x25]
	mov	x0, x20
	mov	x1, x21
	bl	addu
	lsr	x8, x0, #32
	stp	w0, w8, [x28]
	b	.LBB22_23
.LBB22_26:                              // %"$42"
	ldp	w20, w8, [x28]
	bfi	x20, x8, #32, #32
	cmp	x19, x23
	b.ne	.LBB22_28
// %bb.27:
	mov	w8, #1
	adrp	x22, env
	tbz	w8, #0, .LBB22_29
	b	.LBB22_30
.LBB22_28:                              // %"$44"
	mov	x0, x20
	mov	x1, x22
	bl	cmpu
	lsr	x8, x0, #63
	eor	w8, w8, #0x1
	adrp	x22, env
	tbnz	w8, #0, .LBB22_30
.LBB22_29:                              // %"$46"
	mov	x0, x20
	mov	w1, #18
	bl	addu
	mov	x20, x0
.LBB22_30:                              // %"$23"
	ldp	w9, w8, [x25, #8]
	bfi	x9, x8, #32, #32
	str	x9, [x22, :lo12:env]
.LBB22_31:                              // %"$9"
	mov	x0, x20
	mov	sp, x29
	ldp	x20, x19, [sp, #80]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #64]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #48]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #32]             // 16-byte Folded Reload
	ldp	x28, x27, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #96             // 16-byte Folded Reload
	ret
.LBB22_32:                              // %"$10"
	mov	x0, x19
	mov	x1, x20
	bl	numErr
.LBB22_33:                              // %"$12"
	mov	x0, x19
	mov	x1, x20
	bl	argErr
.Lfunc_end22:
	.size	_sqrt, .Lfunc_end22-_sqrt
	.cfi_endproc
                                        // -- End function
	.globl	_seed                           // -- Begin function _seed
	.p2align	4
	.type	_seed,@function
_seed:                                  // @_seed
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w0, w8, [x9]
	bfi	x0, x8, #32, #32
	tst	x0, #0x6
	b.ne	.LBB23_4
// %bb.1:                               // %"$3"
	tbz	w0, #3, .LBB23_3
// %bb.2:                               // %"$6"
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB23_4
.LBB23_3:                               // %"$5"
	bl	evList
.LBB23_4:                               // %"$2"
	bl	initSeed
	mov	x8, #32557
	movk	x8, #19605, lsl #16
	movk	x8, #62509, lsl #32
	movk	x8, #22609, lsl #48
	umulh	x9, x0, x8
	mul	x8, x0, x8
	adrp	x10, ($SeedL)
	str	x8, [x10, :lo12:($SeedL)]
	adrp	x10, ($SeedH)
	str	x9, [x10, :lo12:($SeedH)]
	lsr	x8, x8, #29
	and	x8, x8, #0x7fffffff8
	orr	x0, x8, #0x2
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end23:
	.size	_seed, .Lfunc_end23-_seed
	.cfi_endproc
                                        // -- End function
	.globl	_hash                           // -- Begin function _hash
	.p2align	4
	.type	_hash,@function
_hash:                                  // @_hash
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w0, w8, [x9]
	bfi	x0, x8, #32, #32
	tst	x0, #0x6
	b.ne	.LBB24_4
// %bb.1:                               // %"$3"
	tbz	w0, #3, .LBB24_3
// %bb.2:                               // %"$6"
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB24_4
.LBB24_3:                               // %"$5"
	bl	evList
.LBB24_4:                               // %"$2"
	bl	initSeed
	mov	x8, xzr
	mov	w9, #64
	mov	w10, #16386
	movk	w10, #1, lsl #16
.LBB24_5:                               // %"$7"
                                        // =>This Inner Loop Header: Depth=1
	eor	w11, w0, w8
	eor	x12, x8, x10
	tst	w11, #0x1
	csel	x8, x8, x12, eq
	lsr	x0, x0, #1
	lsr	x8, x8, #1
	subs	x9, x9, #1                      // =1
	b.ne	.LBB24_5
// %bb.6:                               // %"$11"
	lsl	x8, x8, #4
	add	x0, x8, #18                     // =18
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end24:
	.size	_hash, .Lfunc_end24-_hash
	.cfi_endproc
                                        // -- End function
	.globl	_rand                           // -- Begin function _rand
	.p2align	4
	.type	_rand,@function
_rand:                                  // @_rand
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x30, x23, [sp, #-48]!           // 16-byte Folded Spill
	stp	x22, x21, [sp, #16]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #32]             // 16-byte Folded Spill
	.cfi_def_cfa_offset 48
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w30, -48
	mov	x19, x0
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w1, w8, [x9]
	bfi	x1, x8, #32, #32
	ldp	w20, w21, [x9, #8]
	tst	x1, #0x6
	b.ne	.LBB25_4
// %bb.1:                               // %"$3"
	tbz	w1, #3, .LBB25_3
// %bb.2:                               // %"$6"
	ldp	w1, w8, [x1]
	bfi	x1, x8, #32, #32
	b	.LBB25_4
.LBB25_3:                               // %"$5"
	mov	x0, x1
	bl	evList
	mov	x1, x0
.LBB25_4:                               // %"$2"
	adrp	x22, ($SeedL)
	adrp	x23, ($SeedH)
	ldr	x8, [x22, :lo12:($SeedL)]
	mov	x9, #32557
	movk	x9, #19605, lsl #16
	movk	x9, #62509, lsl #32
	movk	x9, #22609, lsl #48
	umulh	x10, x8, x9
	mul	x8, x8, x9
	adds	x8, x8, #1                      // =1
	str	x8, [x22, :lo12:($SeedL)]
	cinc	x9, x10, hs
	str	x9, [x23, :lo12:($SeedH)]
	adrp	x9, SymTab+8
	add	x9, x9, :lo12:SymTab+8
	cmp	x1, x9
	b.ne	.LBB25_6
// %bb.5:                               // %"$9"
	lsr	x8, x8, #29
	and	x8, x8, #0x7fffffff8
	orr	x1, x8, #0x2
	b	.LBB25_12
.LBB25_6:                               // %"$8"
	adrp	x9, SymTab+216
	add	x9, x9, :lo12:SymTab+216
	cmp	x1, x9
	b.ne	.LBB25_9
// %bb.7:                               // %"$11"
	cmn	x8, x8
	b.hs	.LBB25_12
// %bb.8:                               // %"$13"
	adrp	x1, SymTab+8
	add	x1, x1, :lo12:SymTab+8
	b	.LBB25_12
.LBB25_9:                               // %"$10"
	bfi	x20, x21, #32, #32
	mov	x0, x19
	bl	xCnt
	mov	x21, x0
	mov	x0, x19
	mov	x1, x20
	bl	evCnt
	ldr	x8, [x23, :lo12:($SeedH)]
	ldr	x9, [x22, :lo12:($SeedL)]
	extr	x8, x8, x9, #32
	sub	x9, x0, x21
	add	x9, x9, #1                      // =1
	udiv	x10, x8, x9
	msub	x8, x10, x9, x8
	adds	x8, x8, x21
	b.mi	.LBB25_11
// %bb.10:                              // %"$16"
	mov	w1, #2
	bfi	x1, x8, #4, #60
	b	.LBB25_12
.LBB25_11:                              // %"$15"
	mov	w9, #10
	sub	x1, x9, x8, lsl #4
.LBB25_12:                              // %"$7"
	mov	x0, x1
	ldp	x20, x19, [sp, #32]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #16]             // 16-byte Folded Reload
	ldp	x30, x23, [sp], #48             // 16-byte Folded Reload
	ret
.Lfunc_end25:
	.size	_rand, .Lfunc_end25-_rand
	.cfi_endproc
                                        // -- End function
	.globl	_name                           // -- Begin function _name
	.p2align	4
	.type	_name,@function
_name:                                  // @_name
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-32]!           // 16-byte Folded Spill
	stp	x20, x19, [sp, #16]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 32
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w30, -24
	.cfi_offset w29, -32
	mov	x19, x0
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w1, w8, [x9]
	bfi	x1, x8, #32, #32
	tst	x1, #0x6
	b.ne	.LBB26_4
// %bb.1:                               // %"$3"
	tbz	w1, #3, .LBB26_3
// %bb.2:                               // %"$6"
	ldp	w1, w8, [x1]
	bfi	x1, x8, #32, #32
	b	.LBB26_4
.LBB26_3:                               // %"$5"
	mov	x0, x1
	bl	evList
	mov	x1, x0
.LBB26_4:                               // %"$2"
	eor	w8, w1, #0x8
	tst	x8, #0xe
	b.ne	.LBB26_13
// %bb.5:                               // %"$8"
	ldp	w0, w8, [x1, #-8]
	bfi	x0, x8, #32, #32
	tbz	w0, #3, .LBB26_9
// %bb.6:                               // %"$9"
	mov	x8, sp
	sub	x19, x8, #32                    // =32
	mov	sp, x19
	mov	w9, #4
	stp	w9, wzr, [x8, #-32]
	stur	wzr, [x8, #-12]
	mov	w9, #2
	mov	x10, x19
	str	w9, [x10, #16]!
	adrp	x20, env
	ldr	x9, [x20, :lo12:env]
	lsr	x11, x9, #32
	stp	w9, w11, [x8, #-8]
	str	x10, [x20, :lo12:env]
	tst	x0, #0x6
	b.ne	.LBB26_8
.LBB26_7:                               // %"$13"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w0, w8, [x0, #8]
	bfi	x0, x8, #32, #32
	tst	x0, #0x6
	b.eq	.LBB26_7
.LBB26_8:                               // %"$14"
	and	x0, x0, #0xfffffffffffffff7
	mov	x1, x19
	bl	packExtNm
	ldp	w0, w8, [x19, #16]
	bfi	x0, x8, #32, #32
	bl	consStr
	ldp	w9, w8, [x19, #24]
	bfi	x9, x8, #32, #32
	str	x9, [x20, :lo12:env]
	b	.LBB26_12
.LBB26_9:                               // %"$15"
                                        // =>This Inner Loop Header: Depth=1
	tst	x0, #0x6
	b.ne	.LBB26_11
// %bb.10:                              // %"$16"
                                        //   in Loop: Header=BB26_9 Depth=1
	ldp	w0, w8, [x0, #8]
	bfi	x0, x8, #32, #32
	b	.LBB26_9
.LBB26_11:                              // %"$17"
	bl	consStr
.LBB26_12:                              // %"$11"
	mov	sp, x29
	ldp	x20, x19, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #32             // 16-byte Folded Reload
	ret
.LBB26_13:                              // %"$7"
	mov	x0, x19
	bl	symErr
.Lfunc_end26:
	.size	_name, .Lfunc_end26-_name
	.cfi_endproc
                                        // -- End function
	.globl	_nsp                            // -- Begin function _nsp
	.p2align	4
	.type	_nsp,@function
_nsp:                                   // @_nsp
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x30, x23, [sp, #-48]!           // 16-byte Folded Spill
	stp	x22, x21, [sp, #16]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #32]             // 16-byte Folded Spill
	.cfi_def_cfa_offset 48
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w30, -48
	mov	x20, x0
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w19, w8, [x9]
	bfi	x19, x8, #32, #32
	tst	x19, #0x6
	b.ne	.LBB27_4
// %bb.1:                               // %"$3"
	tbz	w19, #3, .LBB27_3
// %bb.2:                               // %"$6"
	ldp	w19, w8, [x19]
	bfi	x19, x8, #32, #32
	b	.LBB27_4
.LBB27_3:                               // %"$5"
	mov	x0, x19
	bl	evList
	mov	x19, x0
.LBB27_4:                               // %"$2"
	eor	w8, w19, #0x8
	tst	x8, #0xe
	b.ne	.LBB27_15
// %bb.5:                               // %"$8"
	ldp	w20, w8, [x19, #-8]
	bfi	x20, x8, #32, #32
	tbz	w20, #3, .LBB27_7
// %bb.6:
	adrp	x21, SymTab+8
	add	x21, x21, :lo12:SymTab+8
	b	.LBB27_14
.LBB27_7:                               // %"$12"
                                        // =>This Inner Loop Header: Depth=1
	tst	x20, #0x6
	b.ne	.LBB27_9
// %bb.8:                               // %"$13"
                                        //   in Loop: Header=BB27_7 Depth=1
	ldp	w20, w8, [x20, #8]
	bfi	x20, x8, #32, #32
	b	.LBB27_7
.LBB27_9:                               // %"$14"
	adrp	x8, env+88
	add	x8, x8, :lo12:env+88
	adrp	x21, SymTab+8
	add	x21, x21, :lo12:SymTab+8
.LBB27_10:                              // %"$15"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w22, w9, [x8]
	bfi	x22, x9, #32, #32
	tst	x22, #0xf
	b.ne	.LBB27_14
// %bb.11:                              // %"$16"
                                        //   in Loop: Header=BB27_10 Depth=1
	ldp	w23, w8, [x22]
	bfi	x23, x8, #32, #32
	ldp	w9, w8, [x23]
	bfi	x9, x8, #32, #32
	ldp	w1, w8, [x9, #8]
	bfi	x1, x8, #32, #32
	mov	x0, x20
	bl	isIntern
	cmp	x19, x0
	b.eq	.LBB27_13
// %bb.12:                              // %"$19"
                                        //   in Loop: Header=BB27_10 Depth=1
	add	x8, x22, #8                     // =8
	b	.LBB27_10
.LBB27_13:
	mov	x21, x23
.LBB27_14:                              // %"$11"
	mov	x0, x21
	ldp	x20, x19, [sp, #32]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #16]             // 16-byte Folded Reload
	ldp	x30, x23, [sp], #48             // 16-byte Folded Reload
	ret
.LBB27_15:                              // %"$7"
	mov	x0, x20
	mov	x1, x19
	bl	symErr
.Lfunc_end27:
	.size	_nsp, .Lfunc_end27-_nsp
	.cfi_endproc
                                        // -- End function
	.globl	_spQ                            // -- Begin function _spQ
	.p2align	4
	.type	_spQ,@function
_spQ:                                   // @_spQ
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w0, w8, [x9]
	bfi	x0, x8, #32, #32
	tst	x0, #0x6
	b.ne	.LBB28_4
// %bb.1:                               // %"$3"
	tbz	w0, #3, .LBB28_3
// %bb.2:                               // %"$6"
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB28_4
.LBB28_3:                               // %"$5"
	bl	evList
.LBB28_4:                               // %"$2"
	bl	isBlank
	adrp	x8, SymTab+8
	add	x8, x8, :lo12:SymTab+8
	add	x9, x8, #208                    // =208
	tst	w0, #0x1
	csel	x0, x9, x8, ne
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end28:
	.size	_spQ, .Lfunc_end28-_spQ
	.cfi_endproc
                                        // -- End function
	.globl	_patQ                           // -- Begin function _patQ
	.p2align	4
	.type	_patQ,@function
_patQ:                                  // @_patQ
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x30, x19, [sp, #-16]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w19, -8
	.cfi_offset w30, -16
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w19, w8, [x9]
	bfi	x19, x8, #32, #32
	tst	x19, #0x6
	b.ne	.LBB29_4
// %bb.1:                               // %"$3"
	tbz	w19, #3, .LBB29_3
// %bb.2:                               // %"$6"
	ldp	w19, w8, [x19]
	bfi	x19, x8, #32, #32
	b	.LBB29_4
.LBB29_3:                               // %"$5"
	mov	x0, x19
	bl	evList
	mov	x19, x0
.LBB29_4:                               // %"$2"
	eor	w8, w19, #0x8
	tst	x8, #0xe
	b.eq	.LBB29_6
// %bb.5:
	mov	w8, wzr
	b	.LBB29_7
.LBB29_6:                               // %"$8"
	mov	x0, x19
	bl	firstChar
	cmp	w0, #64                         // =64
	cset	w8, eq
.LBB29_7:                               // %"$7"
	adrp	x9, SymTab+8
	add	x9, x9, :lo12:SymTab+8
	cmp	w8, #0                          // =0
	csel	x0, x19, x9, ne
	ldp	x30, x19, [sp], #16             // 16-byte Folded Reload
	ret
.Lfunc_end29:
	.size	_patQ, .Lfunc_end29-_patQ
	.cfi_endproc
                                        // -- End function
	.globl	_funQ                           // -- Begin function _funQ
	.p2align	4
	.type	_funQ,@function
_funQ:                                  // @_funQ
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w0, w8, [x9]
	bfi	x0, x8, #32, #32
	tst	x0, #0x6
	b.ne	.LBB30_4
// %bb.1:                               // %"$3"
	tbz	w0, #3, .LBB30_3
// %bb.2:                               // %"$6"
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB30_4
.LBB30_3:                               // %"$5"
	bl	evList
.LBB30_4:                               // %"$2"
	bl	funq
	adrp	x8, SymTab+8
	add	x8, x8, :lo12:SymTab+8
	cmp	x0, #0                          // =0
	csel	x0, x0, x8, ne
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end30:
	.size	_funQ, .Lfunc_end30-_funQ
	.cfi_endproc
                                        // -- End function
	.globl	_getd                           // -- Begin function _getd
	.p2align	4
	.type	_getd,@function
_getd:                                  // @_getd
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x30, x21, [sp, #-32]!           // 16-byte Folded Spill
	stp	x20, x19, [sp, #16]             // 16-byte Folded Spill
	.cfi_def_cfa_offset 32
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w30, -32
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w19, w8, [x9]
	bfi	x19, x8, #32, #32
	tst	x19, #0x6
	b.ne	.LBB31_4
// %bb.1:                               // %"$3"
	tbz	w19, #3, .LBB31_3
// %bb.2:                               // %"$6"
	ldp	w19, w8, [x19]
	bfi	x19, x8, #32, #32
	b	.LBB31_4
.LBB31_3:                               // %"$5"
	mov	x0, x19
	bl	evList
	mov	x19, x0
.LBB31_4:                               // %"$2"
	eor	w8, w19, #0x8
	tst	x8, #0xe
	adrp	x21, SymTab+8
	add	x21, x21, :lo12:SymTab+8
	b.ne	.LBB31_9
// %bb.5:                               // %"$8"
	ldp	w20, w8, [x19]
	bfi	x20, x8, #32, #32
	mov	x0, x20
	bl	funq
	cbnz	x0, .LBB31_12
// %bb.6:                               // %"$10"
	cmp	x20, x21
	b.ne	.LBB31_10
// %bb.7:                               // %"$13"
	mov	x0, x19
	bl	sharedLib
	tbnz	w0, #0, .LBB31_11
.LBB31_8:
	adrp	x20, SymTab+8
	add	x20, x20, :lo12:SymTab+8
	b	.LBB31_12
.LBB31_9:
	mov	x20, x21
	b	.LBB31_12
.LBB31_10:
	mov	w0, wzr
	tbz	w0, #0, .LBB31_8
.LBB31_11:                              // %"$15"
	ldp	w20, w8, [x19]
	bfi	x20, x8, #32, #32
.LBB31_12:                              // %"$7"
	mov	x0, x20
	ldp	x20, x19, [sp, #16]             // 16-byte Folded Reload
	ldp	x30, x21, [sp], #32             // 16-byte Folded Reload
	ret
.Lfunc_end31:
	.size	_getd, .Lfunc_end31-_getd
	.cfi_endproc
                                        // -- End function
	.globl	_all                            // -- Begin function _all
	.p2align	4
	.type	_all,@function
_all:                                   // @_all
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-32]!                // 8-byte Folded Spill
	stp	x20, x19, [sp, #16]             // 16-byte Folded Spill
	.cfi_def_cfa_offset 32
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w30, -32
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w1, w8, [x9]
	bfi	x1, x8, #32, #32
	tst	x1, #0x6
	b.ne	.LBB32_4
// %bb.1:                               // %"$3"
	tbz	w1, #3, .LBB32_3
// %bb.2:                               // %"$6"
	ldp	w1, w8, [x1]
	bfi	x1, x8, #32, #32
	b	.LBB32_4
.LBB32_3:                               // %"$5"
	mov	x0, x1
	bl	evList
	mov	x1, x0
.LBB32_4:                               // %"$2"
	adrp	x8, SymTab+8
	add	x8, x8, :lo12:SymTab+8
	cmp	x1, x8
	b.ne	.LBB32_7
// %bb.5:                               // %"$9"
	adrp	x8, env+88
	ldr	x20, [x8, :lo12:env+88]
.LBB32_6:                               // %"$10"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w9, w8, [x20]
	bfi	x9, x8, #32, #32
	ldp	w20, w8, [x20, #8]
	bfi	x20, x8, #32, #32
	ldp	w9, w8, [x9]
	bfi	x9, x8, #32, #32
	ldp	w9, w8, [x9, #8]
	bfi	x9, x8, #32, #32
	ldp	w19, w8, [x9]
	bfi	x19, x8, #32, #32
	ldp	w0, w8, [x9, #8]
	bfi	x0, x8, #32, #32
	bl	consTree
	mov	x1, x0
	mov	x0, x19
	bl	consTree
	mov	x1, x0
	tst	x20, #0xf
	b.eq	.LBB32_6
	b	.LBB32_13
.LBB32_7:                               // %"$8"
	adrp	x9, SymTab+216
	add	x9, x9, :lo12:SymTab+216
	cmp	x1, x9
	b.ne	.LBB32_10
// %bb.8:                               // %"$15"
	adrp	x8, gcData
	add	x8, x8, :lo12:gcData
	ldp	x19, x0, [x8]
.LBB32_9:                               // %"$7"
	adrp	x1, SymTab+8
	add	x1, x1, :lo12:SymTab+8
	bl	consTree
	mov	x1, x0
	mov	x0, x19
	b	.LBB32_12
.LBB32_10:                              // %"$14"
	tst	x1, #0x6
	b.eq	.LBB32_14
// %bb.11:                              // %"$17"
	adrp	x8, ($Extern)
	ldr	x0, [x8, :lo12:($Extern)]
	adrp	x1, SymTab+8
	add	x1, x1, :lo12:SymTab+8
.LBB32_12:                              // %"$7"
	bl	consTree
	mov	x1, x0
.LBB32_13:                              // %"$7"
	mov	x0, x1
	ldp	x20, x19, [sp, #16]             // 16-byte Folded Reload
	ldr	x30, [sp], #32                  // 8-byte Folded Reload
	ret
.LBB32_14:                              // %"$16"
	tbz	w1, #3, .LBB32_17
// %bb.15:                              // %"$19"
	ldp	w9, w8, [x1]
	bfi	x9, x8, #32, #32
	ldp	w8, w10, [x9, #8]
	bfi	x8, x10, #32, #32
	tst	x8, #0xf
	b.eq	.LBB32_22
// %bb.16:
	adrp	x1, SymTab+8
	add	x1, x1, :lo12:SymTab+8
	b	.LBB32_13
.LBB32_17:                              // %"$18"
	ldp	w11, w10, [x1]
	bfi	x11, x10, #32, #32
	cmp	x11, x8
	b.ne	.LBB32_19
// %bb.18:                              // %"$24"
	adrp	x9, env+88
	ldr	x9, [x9, :lo12:env+88]
	ldp	w9, w10, [x9]
	bfi	x9, x10, #32, #32
	ldp	w9, w10, [x9]
	bfi	x9, x10, #32, #32
	ldp	w11, w10, [x1, #8]
	bfi	x11, x10, #32, #32
	cmp	x11, x8
	add	x8, x9, #8                      // =8
	csel	x8, x8, x9, ne
	b	.LBB32_25
.LBB32_19:                              // %"$23"
	ldp	w11, w10, [x1]
	bfi	x11, x10, #32, #32
	cmp	x11, x9
	b.ne	.LBB32_23
// %bb.20:                              // %"$29"
	ldp	w10, w9, [x1, #8]
	bfi	x10, x9, #32, #32
	cmp	x10, x8
	b.ne	.LBB32_24
// %bb.21:                              // %"$30"
	adrp	x8, gcData
	add	x8, x8, :lo12:gcData
	b	.LBB32_25
.LBB32_22:                              // %"$20"
	ldp	w19, w9, [x8]
	bfi	x19, x9, #32, #32
	ldp	w0, w9, [x8, #8]
	bfi	x0, x9, #32, #32
	b	.LBB32_9
.LBB32_23:                              // %"$28"
	adrp	x8, ($Extern)
	ldr	x1, [x8, :lo12:($Extern)]
	b	.LBB32_13
.LBB32_24:                              // %"$31"
	adrp	x8, gcData+8
	add	x8, x8, :lo12:gcData+8
.LBB32_25:                              // %"$32"
	ldp	w1, w9, [x8]
	bfi	x1, x9, #32, #32
	b	.LBB32_13
.Lfunc_end32:
	.size	_all, .Lfunc_end32-_all
	.cfi_endproc
                                        // -- End function
	.globl	_symbols                        // -- Begin function _symbols
	.p2align	4
	.type	_symbols,@function
_symbols:                               // @_symbols
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-80]!           // 16-byte Folded Spill
	stp	x26, x25, [sp, #16]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #32]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #48]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #64]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 80
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w30, -72
	.cfi_offset w29, -80
	ldp	w8, w9, [x0, #8]
	bfi	x8, x9, #32, #32
	tst	x8, #0xf
	b.eq	.LBB33_2
// %bb.1:                               // %"$2"
	adrp	x8, env+88
	ldr	x0, [x8, :lo12:env+88]
	b	.LBB33_32
.LBB33_2:                               // %"$3"
	mov	x19, x0
	ldp	w20, w9, [x8]
	bfi	x20, x9, #32, #32
	ldp	w22, w9, [x8, #8]
	bfi	x22, x9, #32, #32
	tst	x20, #0x6
	b.ne	.LBB33_5
// %bb.3:                               // %"$6"
	tbz	w20, #3, .LBB33_23
// %bb.4:                               // %"$9"
	ldp	w20, w8, [x20]
	bfi	x20, x8, #32, #32
.LBB33_5:                               // %"$5"
	tst	x20, #0xf
	b.eq	.LBB33_24
.LBB33_6:                               // %"$11"
	eor	w8, w20, #0x8
	tst	x8, #0xe
	b.ne	.LBB33_44
// %bb.7:                               // %"$38"
	ldp	w9, w8, [x20]
	bfi	x9, x8, #32, #32
	mov	w8, #1
	adrp	x21, SymTab+8
	add	x21, x21, :lo12:SymTab+8
	cmp	x9, x20
	cset	w10, eq
	cmp	x9, x21
	csel	w8, w8, w10, eq
	adrp	x23, SymTab+40
	add	x23, x23, :lo12:SymTab+40
	cbz	w8, .LBB33_10
// %bb.8:                               // %"$40"
	add	x8, x21, #208                   // =208
	cmp	x8, x20
	ccmp	x20, x21, #0, hs
	b.hs	.LBB33_46
// %bb.9:                               // %"$46"
	mov	x0, x21
	mov	x1, x21
	bl	cons
	mov	x1, x0
	add	x0, x21, #32                    // =32
	bl	cons
	lsr	x8, x0, #32
	stp	w0, w8, [x20]
	b	.LBB33_12
.LBB33_10:                              // %"$41"
	ldp	w8, w9, [x20]
	bfi	x8, x9, #32, #32
	tst	x8, #0xf
	b.ne	.LBB33_45
// %bb.11:                              // %"$48"
	ldp	w8, w9, [x8]
	bfi	x8, x9, #32, #32
	cmp	x23, x8
	b.ne	.LBB33_45
.LBB33_12:                              // %"$42"
	adrp	x21, SymTab+8
	add	x21, x21, :lo12:SymTab+8
	mov	x0, x20
	mov	x1, x21
	bl	cons
	mov	x20, x0
	adrp	x8, env
	ldr	x9, [x8, :lo12:env]
	mov	x10, sp
	sub	x24, x10, #16                   // =16
	mov	sp, x24
	lsr	x11, x0, #32
	lsr	x12, x9, #32
	stp	w20, w11, [x10, #-16]
	stp	w9, w12, [x10, #-8]
	mov	x25, x0
	str	x24, [x8, :lo12:env]
	tst	x22, #0xf
	b.ne	.LBB33_21
.LBB33_13:                              // %"$52"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w1, w8, [x22]
	bfi	x1, x8, #32, #32
	ldp	w22, w26, [x22, #8]
	tst	x1, #0x6
	b.ne	.LBB33_17
// %bb.14:                              // %"$55"
                                        //   in Loop: Header=BB33_13 Depth=1
	tbz	w1, #3, .LBB33_16
// %bb.15:                              // %"$58"
                                        //   in Loop: Header=BB33_13 Depth=1
	ldp	w1, w8, [x1]
	bfi	x1, x8, #32, #32
	b	.LBB33_17
.LBB33_16:                              // %"$57"
                                        //   in Loop: Header=BB33_13 Depth=1
	mov	x0, x1
	bl	evList
	mov	x1, x0
.LBB33_17:                              // %"$54"
                                        //   in Loop: Header=BB33_13 Depth=1
	eor	w8, w1, #0x8
	tst	x8, #0xe
	b.ne	.LBB33_43
// %bb.18:                              // %"$60"
                                        //   in Loop: Header=BB33_13 Depth=1
	ldp	w8, w9, [x1]
	bfi	x8, x9, #32, #32
	tst	x8, #0xf
	b.ne	.LBB33_42
// %bb.19:                              // %"$62"
                                        //   in Loop: Header=BB33_13 Depth=1
	ldp	w8, w9, [x8]
	bfi	x8, x9, #32, #32
	cmp	x23, x8
	b.ne	.LBB33_42
// %bb.20:                              // %"$64"
                                        //   in Loop: Header=BB33_13 Depth=1
	bfi	x22, x26, #32, #32
	mov	x0, x1
	mov	x1, x21
	bl	cons
	lsr	x8, x0, #32
	stp	w0, w8, [x25, #8]
	mov	x25, x0
	tst	x22, #0xf
	b.eq	.LBB33_13
.LBB33_21:                              // %"$53"
	adrp	x19, env
	add	x19, x19, :lo12:env
	ldr	x0, [x19, #88]
	str	x20, [x19, #88]
	ldp	w20, w8, [x24, #8]
.LBB33_22:                              // %"$12"
	bfi	x20, x8, #32, #32
	b	.LBB33_31
.LBB33_23:                              // %"$8"
	mov	x0, x20
	bl	evList
	mov	x20, x0
	tst	x20, #0xf
	b.ne	.LBB33_6
.LBB33_24:                              // %"$13.preheader"
	mov	x8, x20
	adrp	x9, SymTab+40
	add	x9, x9, :lo12:SymTab+40
.LBB33_25:                              // %"$13"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w1, w10, [x8]
	eor	w11, w1, #0x8
	bfi	x1, x10, #32, #32
	tst	x11, #0xe
	b.ne	.LBB33_43
// %bb.26:                              // %"$15"
                                        //   in Loop: Header=BB33_25 Depth=1
	ldp	w10, w11, [x1]
	bfi	x10, x11, #32, #32
	tst	x10, #0xf
	b.ne	.LBB33_42
// %bb.27:                              // %"$17"
                                        //   in Loop: Header=BB33_25 Depth=1
	ldp	w10, w11, [x10]
	bfi	x10, x11, #32, #32
	cmp	x9, x10
	b.ne	.LBB33_42
// %bb.28:                              // %"$19"
                                        //   in Loop: Header=BB33_25 Depth=1
	ldp	w8, w10, [x8, #8]
	bfi	x8, x10, #32, #32
	tst	x8, #0xf
	b.eq	.LBB33_25
// %bb.29:                              // %"$21"
	tst	x22, #0xf
	b.eq	.LBB33_33
// %bb.30:                              // %"$22"
	adrp	x19, env+88
	add	x19, x19, :lo12:env+88
	ldr	x0, [x19]
.LBB33_31:                              // %"$12"
	lsr	x8, x20, #32
	stp	w20, w8, [x19]
.LBB33_32:                              // %"$4"
	mov	sp, x29
	ldp	x20, x19, [sp, #64]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #48]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #32]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #80             // 16-byte Folded Reload
	ret
.LBB33_33:                              // %"$23"
	adrp	x19, env
	add	x19, x19, :lo12:env
	ldr	x21, [x19, #88]
	ldr	x8, [x19]
	mov	x9, sp
	sub	x23, x9, #16                    // =16
	mov	sp, x23
	lsr	x10, x21, #32
	lsr	x11, x8, #32
	stp	w21, w10, [x9, #-16]
	stp	w8, w11, [x9, #-8]
	str	x23, [x19]
	str	x20, [x19, #88]
.LBB33_34:                              // %"$25"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w0, w8, [x22]
	bfi	x0, x8, #32, #32
	ldp	w22, w8, [x22, #8]
	bfi	x22, x8, #32, #32
	tst	x22, #0xf
	b.ne	.LBB33_37
// %bb.35:                              // %"$26"
                                        //   in Loop: Header=BB33_34 Depth=1
	tst	x0, #0xf
	b.ne	.LBB33_34
// %bb.36:                              // %"$35"
                                        //   in Loop: Header=BB33_34 Depth=1
	bl	evList
	b	.LBB33_34
.LBB33_37:                              // %"$28"
	tst	x0, #0x6
	b.ne	.LBB33_41
// %bb.38:                              // %"$30"
	tbz	w0, #3, .LBB33_40
// %bb.39:                              // %"$33"
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB33_41
.LBB33_40:                              // %"$32"
	bl	evList
.LBB33_41:                              // %"$27"
	str	x21, [x19, #88]
	ldp	w20, w8, [x23, #8]
	b	.LBB33_22
.LBB33_42:                              // %"$18"
	mov	x0, x19
	bl	symNspErr
.LBB33_43:                              // %"$14"
	mov	x0, x19
	bl	symErr
.LBB33_44:                              // %"$37"
	mov	x0, x19
	mov	x1, x20
	bl	symErr
.LBB33_45:                              // %"$49"
	mov	x0, x19
	mov	x1, x20
	bl	symNspErr
.LBB33_46:                              // %"$45"
	mov	x0, x19
	mov	x1, x20
	bl	protErr
.Lfunc_end33:
	.size	_symbols, .Lfunc_end33-_symbols
	.cfi_endproc
                                        // -- End function
	.globl	_intern                         // -- Begin function _intern
	.p2align	4
	.type	_intern,@function
_intern:                                // @_intern
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-64]!           // 16-byte Folded Spill
	stp	x24, x23, [sp, #16]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #32]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #48]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 64
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w30, -56
	.cfi_offset w29, -64
	mov	x20, x0
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w19, w8, [x9]
	bfi	x19, x8, #32, #32
	ldp	w24, w21, [x9, #8]
	tst	x19, #0x6
	b.ne	.LBB34_4
// %bb.1:                               // %"$3"
	tbz	w19, #3, .LBB34_3
// %bb.2:                               // %"$6"
	ldp	w19, w8, [x19]
	bfi	x19, x8, #32, #32
	b	.LBB34_4
.LBB34_3:                               // %"$5"
	mov	x0, x19
	bl	evList
	mov	x19, x0
.LBB34_4:                               // %"$2"
	eor	w8, w19, #0x8
	tst	x8, #0xe
	b.ne	.LBB34_21
// %bb.5:                               // %"$8"
	adrp	x22, env
	ldr	x8, [x22, :lo12:env]
	mov	x9, sp
	sub	x23, x9, #16                    // =16
	mov	sp, x23
	lsr	x10, x19, #32
	stp	w19, w10, [x9, #-16]
	lsr	x10, x8, #32
	stp	w8, w10, [x9, #-8]
	str	x23, [x22, :lo12:env]
	ldp	w20, w8, [x19, #-8]
	bfi	x20, x8, #32, #32
	tbz	w20, #3, .LBB34_7
// %bb.6:
	adrp	x21, SymTab+8
	add	x21, x21, :lo12:SymTab+8
	b	.LBB34_20
.LBB34_7:                               // %"$12.preheader"
	bfi	x24, x21, #32, #32
	tst	x20, #0x6
	b.ne	.LBB34_9
.LBB34_8:                               // %"$13"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w20, w8, [x20, #8]
	bfi	x20, x8, #32, #32
	tst	x20, #0x6
	b.eq	.LBB34_8
.LBB34_9:                               // %"$14"
	cmp	x20, #2                         // =2
	adrp	x21, SymTab+8
	add	x21, x21, :lo12:SymTab+8
	b.eq	.LBB34_20
// %bb.10:                              // %"$15"
	ldp	w0, w8, [x24]
	bfi	x0, x8, #32, #32
	tst	x0, #0x6
	b.ne	.LBB34_13
// %bb.11:                              // %"$18"
	tbz	w0, #3, .LBB34_15
// %bb.12:                              // %"$21"
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
.LBB34_13:                              // %"$17"
	cmp	x0, x21
	b.ne	.LBB34_16
.LBB34_14:                              // %"$22"
	adrp	x8, env+88
	ldr	x8, [x8, :lo12:env+88]
	ldp	w10, w9, [x8]
	bfi	x10, x9, #32, #32
	ldp	w10, w9, [x10]
	bfi	x10, x9, #32, #32
	ldp	w3, w9, [x10, #8]
	bfi	x3, x9, #32, #32
	ldp	w4, w9, [x8, #8]
	bfi	x4, x9, #32, #32
	b	.LBB34_19
.LBB34_15:                              // %"$20"
	bl	evList
	cmp	x0, x21
	b.eq	.LBB34_14
.LBB34_16:                              // %"$23"
	adrp	x8, SymTab+216
	add	x8, x8, :lo12:SymTab+216
	cmp	x0, x8
	b.ne	.LBB34_18
// %bb.17:                              // %"$25"
	adrp	x8, env+88
	ldr	x8, [x8, :lo12:env+88]
	ldp	w0, w9, [x8]
	bfi	x0, x9, #32, #32
.LBB34_18:                              // %"$27"
	ldp	w9, w8, [x0]
	bfi	x9, x8, #32, #32
	ldp	w3, w8, [x9, #8]
	bfi	x3, x8, #32, #32
	adrp	x4, SymTab+8
	add	x4, x4, :lo12:SymTab+8
.LBB34_19:                              // %"$24"
	mov	x0, x19
	mov	x1, xzr
	mov	x2, x20
	mov	w5, wzr
	bl	intern
	mov	x21, x0
.LBB34_20:                              // %"$9"
	ldp	w9, w8, [x23, #8]
	bfi	x9, x8, #32, #32
	str	x9, [x22, :lo12:env]
	mov	x0, x21
	mov	sp, x29
	ldp	x20, x19, [sp, #48]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #32]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #64             // 16-byte Folded Reload
	ret
.LBB34_21:                              // %"$7"
	mov	x0, x20
	mov	x1, x19
	bl	symErr
.Lfunc_end34:
	.size	_intern, .Lfunc_end34-_intern
	.cfi_endproc
                                        // -- End function
	.globl	_boxQ                           // -- Begin function _boxQ
	.p2align	4
	.type	_boxQ,@function
_boxQ:                                  // @_boxQ
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w0, w8, [x9]
	bfi	x0, x8, #32, #32
	tst	x0, #0x6
	b.ne	.LBB35_4
// %bb.1:                               // %"$3"
	tbz	w0, #3, .LBB35_3
// %bb.2:                               // %"$6"
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB35_4
.LBB35_3:                               // %"$5"
	bl	evList
.LBB35_4:                               // %"$2"
	eor	w8, w0, #0x8
	tst	x8, #0xe
	b.ne	.LBB35_6
// %bb.5:                               // %"$8"
	ldp	w8, w9, [x0, #-8]
	bfi	x8, x9, #32, #32
	tbz	w8, #3, .LBB35_9
.LBB35_6:
	mov	w8, wzr
.LBB35_7:                               // %"$7"
	adrp	x9, SymTab+8
	add	x9, x9, :lo12:SymTab+8
	cmp	w8, #0                          // =0
	csel	x0, x0, x9, ne
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.LBB35_8:                               // %"$11"
                                        //   in Loop: Header=BB35_9 Depth=1
	ldp	w8, w9, [x8, #8]
	bfi	x8, x9, #32, #32
.LBB35_9:                               // %"$10"
                                        // =>This Inner Loop Header: Depth=1
	tst	x8, #0x6
	b.eq	.LBB35_8
// %bb.10:                              // %"$12"
	cmp	x8, #2                          // =2
	cset	w8, eq
	b	.LBB35_7
.Lfunc_end35:
	.size	_boxQ, .Lfunc_end35-_boxQ
	.cfi_endproc
                                        // -- End function
	.globl	_strQ                           // -- Begin function _strQ
	.p2align	4
	.type	_strQ,@function
_strQ:                                  // @_strQ
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-32]!                // 8-byte Folded Spill
	stp	x20, x19, [sp, #16]             // 16-byte Folded Spill
	.cfi_def_cfa_offset 32
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w30, -32
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w19, w8, [x9]
	bfi	x19, x8, #32, #32
	tst	x19, #0x6
	b.ne	.LBB36_4
// %bb.1:                               // %"$3"
	tbz	w19, #3, .LBB36_3
// %bb.2:                               // %"$6"
	ldp	w19, w8, [x19]
	bfi	x19, x8, #32, #32
	b	.LBB36_4
.LBB36_3:                               // %"$5"
	mov	x0, x19
	bl	evList
	mov	x19, x0
.LBB36_4:                               // %"$2"
	eor	w8, w19, #0x8
	tst	x8, #0xe
	adrp	x20, SymTab+8
	add	x20, x20, :lo12:SymTab+8
	b.ne	.LBB36_11
// %bb.5:                               // %"$8"
	ldp	w1, w8, [x19, #-8]
	bfi	x1, x8, #32, #32
	tbz	w1, #3, .LBB36_7
// %bb.6:
	mov	w0, #1
	b	.LBB36_10
.LBB36_7:                               // %"$12"
                                        // =>This Inner Loop Header: Depth=1
	tst	x1, #0x6
	b.ne	.LBB36_9
// %bb.8:                               // %"$13"
                                        //   in Loop: Header=BB36_7 Depth=1
	ldp	w1, w8, [x1, #8]
	bfi	x1, x8, #32, #32
	b	.LBB36_7
.LBB36_9:                               // %"$14"
	adrp	x8, env+88
	ldr	x2, [x8, :lo12:env+88]
	mov	x0, x19
	bl	findSym
.LBB36_10:                              // %"$10"
	tst	w0, #0x1
	csel	x20, x20, x19, ne
.LBB36_11:                              // %"$7"
	mov	x0, x20
	ldp	x20, x19, [sp, #16]             // 16-byte Folded Reload
	ldr	x30, [sp], #32                  // 8-byte Folded Reload
	ret
.Lfunc_end36:
	.size	_strQ, .Lfunc_end36-_strQ
	.cfi_endproc
                                        // -- End function
	.globl	_zap                            // -- Begin function _zap
	.p2align	4
	.type	_zap,@function
_zap:                                   // @_zap
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-32]!                // 8-byte Folded Spill
	stp	x20, x19, [sp, #16]             // 16-byte Folded Spill
	.cfi_def_cfa_offset 32
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w30, -32
	mov	x20, x0
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w19, w8, [x9]
	bfi	x19, x8, #32, #32
	tst	x19, #0x6
	b.ne	.LBB37_4
// %bb.1:                               // %"$3"
	tbz	w19, #3, .LBB37_3
// %bb.2:                               // %"$6"
	ldp	w19, w8, [x19]
	bfi	x19, x8, #32, #32
	b	.LBB37_4
.LBB37_3:                               // %"$5"
	mov	x0, x19
	bl	evList
	mov	x19, x0
.LBB37_4:                               // %"$2"
	eor	w8, w19, #0x8
	tst	x8, #0xe
	b.ne	.LBB37_11
// %bb.5:                               // %"$8"
	ldp	w1, w8, [x19, #-8]
	bfi	x1, x8, #32, #32
	tbz	w1, #3, .LBB37_7
// %bb.6:                               // %"$9"
	mov	x0, x19
	bl	dbZap
	b	.LBB37_10
.LBB37_7:                               // %"$12"
                                        // =>This Inner Loop Header: Depth=1
	tst	x1, #0x6
	b.ne	.LBB37_9
// %bb.8:                               // %"$13"
                                        //   in Loop: Header=BB37_7 Depth=1
	ldp	w1, w8, [x1, #8]
	bfi	x1, x8, #32, #32
	b	.LBB37_7
.LBB37_9:                               // %"$14"
	adrp	x8, env+88
	ldr	x8, [x8, :lo12:env+88]
	ldp	w8, w9, [x8]
	bfi	x8, x9, #32, #32
	ldp	w8, w9, [x8]
	bfi	x8, x9, #32, #32
	ldp	w2, w9, [x8, #8]
	bfi	x2, x9, #32, #32
	mov	x0, x19
	bl	unintern
.LBB37_10:                              // %"$11"
	mov	x0, x19
	ldp	x20, x19, [sp, #16]             // 16-byte Folded Reload
	ldr	x30, [sp], #32                  // 8-byte Folded Reload
	ret
.LBB37_11:                              // %"$7"
	mov	x0, x20
	mov	x1, x19
	bl	symErr
.Lfunc_end37:
	.size	_zap, .Lfunc_end37-_zap
	.cfi_endproc
                                        // -- End function
	.globl	_chop                           // -- Begin function _chop
	.p2align	4
	.type	_chop,@function
_chop:                                  // @_chop
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-64]!           // 16-byte Folded Spill
	stp	x24, x23, [sp, #16]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #32]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #48]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 64
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w30, -56
	.cfi_offset w29, -64
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w19, w8, [x9]
	bfi	x19, x8, #32, #32
	tst	x19, #0x6
	b.ne	.LBB38_4
// %bb.1:                               // %"$3"
	tbz	w19, #3, .LBB38_3
// %bb.2:                               // %"$6"
	ldp	w19, w8, [x19]
	bfi	x19, x8, #32, #32
	b	.LBB38_4
.LBB38_3:                               // %"$5"
	mov	x0, x19
	bl	evList
	mov	x19, x0
.LBB38_4:                               // %"$2"
	tst	x19, #0xf
	cset	w8, eq
	adrp	x9, SymTab+8
	add	x9, x9, :lo12:SymTab+8
	cmp	x19, x9
	cset	w9, eq
	orr	w8, w8, w9
	tbnz	w8, #0, .LBB38_17
// %bb.5:                               // %"$10"
	mov	x0, x19
	bl	xSym
	ldp	w19, w8, [x0, #-8]
	bfi	x19, x8, #32, #32
	tbz	w19, #3, .LBB38_9
// %bb.6:                               // %"$12"
	and	x0, x19, #0xfffffffffffffff7
	tst	x0, #0x6
	b.ne	.LBB38_8
.LBB38_7:                               // %"$16"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w0, w8, [x0, #8]
	bfi	x0, x8, #32, #32
	tst	x0, #0x6
	b.eq	.LBB38_7
.LBB38_8:                               // %"$17"
	bl	chopExtNm
	mov	x19, x0
	b	.LBB38_17
.LBB38_9:
	mov	x8, x19
	tst	x8, #0x6
	b.ne	.LBB38_11
.LBB38_10:                              // %"$19"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w8, w9, [x8, #8]
	bfi	x8, x9, #32, #32
	tst	x8, #0x6
	b.eq	.LBB38_10
.LBB38_11:                              // %"$20"
	mov	x9, sp
	sub	x20, x9, #16                    // =16
	mov	sp, x20
	stp	wzr, wzr, [x9, #-16]
	lsr	x10, x8, #32
	stp	w8, w10, [x9, #-8]
	mov	x0, x20
	bl	symChar
	cbz	w0, .LBB38_16
// %bb.12:                              // %"$21"
	adrp	x22, env
	ldr	x8, [x22, :lo12:env]
	mov	x9, sp
	sub	x23, x9, #16                    // =16
	mov	sp, x23
	lsr	x10, x19, #32
	lsr	x11, x8, #32
	stp	w19, w10, [x9, #-16]
	stp	w8, w11, [x9, #-8]
	str	x23, [x22, :lo12:env]
	bl	mkChar
	adrp	x21, SymTab+8
	add	x21, x21, :lo12:SymTab+8
	mov	x1, x21
	bl	cons
	mov	x19, x0
	ldr	x8, [x22, :lo12:env]
	mov	x9, sp
	sub	x10, x9, #16                    // =16
	mov	sp, x10
	lsr	x11, x0, #32
	lsr	x12, x8, #32
	stp	w19, w11, [x9, #-16]
	stp	w8, w12, [x9, #-8]
	mov	x24, x0
	str	x10, [x22, :lo12:env]
.LBB38_13:                              // %"$24"
                                        // =>This Inner Loop Header: Depth=1
	mov	x0, x20
	bl	symChar
	cbz	w0, .LBB38_15
// %bb.14:                              // %"$25"
                                        //   in Loop: Header=BB38_13 Depth=1
	bl	mkChar
	mov	x1, x21
	bl	cons
	lsr	x8, x0, #32
	stp	w0, w8, [x24, #8]
	mov	x24, x0
	b	.LBB38_13
.LBB38_15:                              // %"$26"
	ldp	w9, w8, [x23, #8]
	bfi	x9, x8, #32, #32
	str	x9, [x22, :lo12:env]
	b	.LBB38_17
.LBB38_16:
	adrp	x19, SymTab+8
	add	x19, x19, :lo12:SymTab+8
.LBB38_17:                              // %"$11"
	mov	x0, x19
	mov	sp, x29
	ldp	x20, x19, [sp, #48]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #32]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #64             // 16-byte Folded Reload
	ret
.Lfunc_end38:
	.size	_chop, .Lfunc_end38-_chop
	.cfi_endproc
                                        // -- End function
	.globl	_pack                           // -- Begin function _pack
	.p2align	4
	.type	_pack,@function
_pack:                                  // @_pack
	.cfi_startproc
// %bb.0:                               // %"$1"
	sub	sp, sp, #80                     // =80
	stp	x20, x19, [sp, #64]             // 16-byte Folded Spill
	.cfi_def_cfa_offset 80
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w30, -32
	adrp	x19, env
	mov	w8, #10
	add	x9, sp, #32                     // =32
	mov	w10, #4
	ldr	x11, [x19, :lo12:env]
	str	x9, [x19, :lo12:env]
	str	x8, [sp, #32]
	stp	x11, x30, [sp, #40]             // 8-byte Folded Spill
	ldp	w20, w8, [x0, #8]
	bfi	x20, x8, #32, #32
	mov	w8, #2
	str	x10, [sp]
	stp	x8, x9, [sp, #16]
	mov	x8, sp
	add	x8, x8, #16                     // =16
	str	x8, [x19, :lo12:env]
	b	.LBB39_3
.LBB39_1:                               // %"$8"
                                        //   in Loop: Header=BB39_3 Depth=1
	bl	evList
.LBB39_2:                               // %"$5"
                                        //   in Loop: Header=BB39_3 Depth=1
	str	x0, [sp, #32]
	mov	x1, sp
	bl	pack
.LBB39_3:                               // %"$2"
                                        // =>This Inner Loop Header: Depth=1
	tst	x20, #0xf
	b.ne	.LBB39_7
// %bb.4:                               // %"$3"
                                        //   in Loop: Header=BB39_3 Depth=1
	ldp	w0, w8, [x20]
	bfi	x0, x8, #32, #32
	ldp	w20, w8, [x20, #8]
	bfi	x20, x8, #32, #32
	tst	x0, #0x6
	b.ne	.LBB39_2
// %bb.5:                               // %"$6"
                                        //   in Loop: Header=BB39_3 Depth=1
	tbz	w0, #3, .LBB39_1
// %bb.6:                               // %"$9"
                                        //   in Loop: Header=BB39_3 Depth=1
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB39_2
.LBB39_7:                               // %"$4"
	ldr	x0, [sp, #16]
	bl	consStr
	ldp	x8, x30, [sp, #40]              // 8-byte Folded Reload
	str	x8, [x19, :lo12:env]
	ldp	x20, x19, [sp, #64]             // 16-byte Folded Reload
	add	sp, sp, #80                     // =80
	ret
.Lfunc_end39:
	.size	_pack, .Lfunc_end39-_pack
	.cfi_endproc
                                        // -- End function
	.globl	_glue                           // -- Begin function _glue
	.p2align	4
	.type	_glue,@function
_glue:                                  // @_glue
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-64]!           // 16-byte Folded Spill
	str	x23, [sp, #16]                  // 8-byte Folded Spill
	stp	x22, x21, [sp, #32]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #48]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 64
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -48
	.cfi_offset w30, -56
	.cfi_offset w29, -64
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w19, w8, [x9]
	bfi	x19, x8, #32, #32
	ldp	w20, w8, [x9, #8]
	bfi	x20, x8, #32, #32
	tst	x19, #0x6
	b.ne	.LBB40_4
// %bb.1:                               // %"$3"
	tbz	w19, #3, .LBB40_3
// %bb.2:                               // %"$6"
	ldp	w19, w8, [x19]
	bfi	x19, x8, #32, #32
	b	.LBB40_4
.LBB40_3:                               // %"$5"
	mov	x0, x19
	bl	evList
	mov	x19, x0
.LBB40_4:                               // %"$2"
	adrp	x22, env
	ldr	x8, [x22, :lo12:env]
	mov	x9, sp
	sub	x23, x9, #16                    // =16
	mov	sp, x23
	lsr	x10, x19, #32
	stp	w19, w10, [x9, #-16]
	lsr	x10, x8, #32
	stp	w8, w10, [x9, #-8]
	str	x23, [x22, :lo12:env]
	ldp	w20, w8, [x20]
	bfi	x20, x8, #32, #32
	tst	x20, #0x6
	b.ne	.LBB40_7
// %bb.5:                               // %"$8"
	tbz	w20, #3, .LBB40_12
// %bb.6:                               // %"$11"
	ldp	w20, w8, [x20]
	bfi	x20, x8, #32, #32
.LBB40_7:                               // %"$7"
	tst	x20, #0xf
	b.ne	.LBB40_13
.LBB40_8:                               // %"$13"
	ldr	x8, [x22, :lo12:env]
	mov	x9, sp
	sub	x10, x9, #16                    // =16
	mov	sp, x10
	lsr	x11, x20, #32
	lsr	x12, x8, #32
	stp	w20, w11, [x9, #-16]
	stp	w8, w12, [x9, #-8]
	str	x10, [x22, :lo12:env]
	mov	x8, sp
	sub	x21, x8, #32                    // =32
	mov	sp, x21
	mov	w9, #4
	stp	w9, wzr, [x8, #-32]
	mov	w9, #2
	mov	x10, x21
	str	w9, [x10, #16]!
	stur	wzr, [x8, #-12]
	ldr	x9, [x22, :lo12:env]
	lsr	x11, x9, #32
	stp	w9, w11, [x8, #-8]
	str	x10, [x22, :lo12:env]
.LBB40_9:                               // %"$15"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w0, w8, [x20]
	bfi	x0, x8, #32, #32
	ldp	w20, w8, [x20, #8]
	bfi	x20, x8, #32, #32
	mov	x1, x21
	bl	pack
	tst	x20, #0xf
	b.ne	.LBB40_11
// %bb.10:                              // %"$16"
                                        //   in Loop: Header=BB40_9 Depth=1
	mov	x0, x19
	mov	x1, x21
	bl	pack
	b	.LBB40_9
.LBB40_11:                              // %"$17"
	ldp	w0, w8, [x21, #16]
	bfi	x0, x8, #32, #32
	bl	consStr
	mov	x20, x0
	b	.LBB40_13
.LBB40_12:                              // %"$10"
	mov	x0, x20
	bl	evList
	mov	x20, x0
	tst	x20, #0xf
	b.eq	.LBB40_8
.LBB40_13:                              // %"$14"
	ldp	w9, w8, [x23, #8]
	bfi	x9, x8, #32, #32
	str	x9, [x22, :lo12:env]
	mov	x0, x20
	mov	sp, x29
	ldp	x20, x19, [sp, #48]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #32]             // 16-byte Folded Reload
	ldr	x23, [sp, #16]                  // 8-byte Folded Reload
	ldp	x29, x30, [sp], #64             // 16-byte Folded Reload
	ret
.Lfunc_end40:
	.size	_glue, .Lfunc_end40-_glue
	.cfi_endproc
                                        // -- End function
	.globl	_text                           // -- Begin function _text
	.p2align	4
	.type	_text,@function
_text:                                  // @_text
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-80]!           // 16-byte Folded Spill
	str	x25, [sp, #16]                  // 8-byte Folded Spill
	stp	x24, x23, [sp, #32]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #48]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #64]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 80
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -64
	.cfi_offset w30, -72
	.cfi_offset w29, -80
	mov	x19, x0
	ldp	w21, w8, [x0, #8]
	bfi	x21, x8, #32, #32
	mov	x0, x21
	bl	evSym
	mov	x1, x0
	adrp	x8, SymTab+8
	add	x8, x8, :lo12:SymTab+8
	cmp	x0, x8
	b.eq	.LBB41_20
// %bb.1:                               // %"$3"
	mov	x0, x19
	bl	xName
	mov	x8, sp
	sub	x19, x8, #32                    // =32
	mov	sp, x19
	stp	wzr, wzr, [x8, #-32]
	lsr	x9, x0, #32
	stur	w9, [x8, #-20]
	mov	x23, x19
	str	w0, [x23, #8]!
	adrp	x22, env
	ldr	x9, [x22, :lo12:env]
	lsr	x10, x9, #32
	stp	w9, w10, [x8, #-16]
	str	x23, [x22, :lo12:env]
	mov	x8, sp
	sub	x20, x8, #32                    // =32
	mov	sp, x20
	mov	x24, xzr
	mov	w9, #4
	stp	w9, wzr, [x8, #-32]
	mov	w9, #2
	mov	x25, x20
	str	w9, [x25, #16]!
	stur	wzr, [x8, #-12]
	ldr	x9, [x22, :lo12:env]
	lsr	x10, x9, #32
	stp	w9, w10, [x8, #-8]
	str	x25, [x22, :lo12:env]
	b	.LBB41_4
.LBB41_2:                               // %"$11"
                                        //   in Loop: Header=BB41_4 Depth=1
	bl	evList
.LBB41_3:                               // %"$8"
                                        //   in Loop: Header=BB41_4 Depth=1
	mov	x8, sp
	sub	x25, x8, #16                    // =16
	mov	sp, x25
	lsr	x9, x0, #32
	stp	w0, w9, [x8, #-16]
	ldr	x9, [x22, :lo12:env]
	lsr	x10, x9, #32
	stp	w9, w10, [x8, #-8]
	str	x25, [x22, :lo12:env]
	add	x24, x24, #1                    // =1
.LBB41_4:                               // %"$5"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w21, w8, [x21, #8]
	bfi	x21, x8, #32, #32
	tst	x21, #0xf
	b.ne	.LBB41_9
// %bb.5:                               // %"$6"
                                        //   in Loop: Header=BB41_4 Depth=1
	ldp	w0, w8, [x21]
	bfi	x0, x8, #32, #32
	tst	x0, #0x6
	b.ne	.LBB41_3
// %bb.6:                               // %"$9"
                                        //   in Loop: Header=BB41_4 Depth=1
	tbz	w0, #3, .LBB41_2
// %bb.7:                               // %"$12"
                                        //   in Loop: Header=BB41_4 Depth=1
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB41_3
.LBB41_8:                               // %"$18"
                                        //   in Loop: Header=BB41_9 Depth=1
	mov	x1, x20
	bl	byteSym
.LBB41_9:                               // %"$13"
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB41_17 Depth 2
	mov	x0, x19
	bl	symByte
	tst	w0, #0xff
	b.eq	.LBB41_19
// %bb.10:                              // %"$14"
                                        //   in Loop: Header=BB41_9 Depth=1
	and	w8, w0, #0xff
	cmp	w8, #64                         // =64
	b.ne	.LBB41_8
// %bb.11:                              // %"$17"
                                        //   in Loop: Header=BB41_9 Depth=1
	mov	x0, x19
	bl	symByte
	and	w8, w0, #0xff
	cmp	w8, #64                         // =64
	b.eq	.LBB41_8
// %bb.12:                              // %"$19"
                                        //   in Loop: Header=BB41_9 Depth=1
	sub	w8, w0, #48                     // =48
	sxtb	w9, w8
	cmp	w9, #1                          // =1
	b.lt	.LBB41_9
// %bb.13:                              // %"$22"
                                        //   in Loop: Header=BB41_9 Depth=1
	and	w9, w8, #0xff
	cmp	w9, #10                         // =10
	b.lo	.LBB41_15
// %bb.14:                              // %"$23"
                                        //   in Loop: Header=BB41_9 Depth=1
	sub	w8, w8, #7                      // =7
.LBB41_15:                              // %"$24"
                                        //   in Loop: Header=BB41_9 Depth=1
	and	x8, x8, #0xff
	cmp	x24, x8
	b.mi	.LBB41_9
// %bb.16:                              // %"$27.preheader"
                                        //   in Loop: Header=BB41_9 Depth=1
	mvn	x8, x8
	add	x9, x8, x24
	mov	x8, x25
	tbnz	x9, #63, .LBB41_18
.LBB41_17:                              // %"$28"
                                        //   Parent Loop BB41_9 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	w8, w10, [x8, #8]
	bfi	x8, x10, #32, #32
	sub	x9, x9, #1                      // =1
	tbz	x9, #63, .LBB41_17
.LBB41_18:                              // %"$29"
                                        //   in Loop: Header=BB41_9 Depth=1
	ldp	w0, w9, [x8]
	bfi	x0, x9, #32, #32
	mov	x1, x20
	bl	pack
	b	.LBB41_9
.LBB41_19:                              // %"$15"
	ldp	w0, w8, [x20, #16]
	bfi	x0, x8, #32, #32
	bl	consStr
	mov	x1, x0
	ldp	w9, w8, [x23, #8]
	bfi	x9, x8, #32, #32
	str	x9, [x22, :lo12:env]
.LBB41_20:                              // %"$4"
	mov	x0, x1
	mov	sp, x29
	ldp	x20, x19, [sp, #64]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #48]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #32]             // 16-byte Folded Reload
	ldr	x25, [sp, #16]                  // 8-byte Folded Reload
	ldp	x29, x30, [sp], #80             // 16-byte Folded Reload
	ret
.Lfunc_end41:
	.size	_text, .Lfunc_end41-_text
	.cfi_endproc
                                        // -- End function
	.globl	_preQ                           // -- Begin function _preQ
	.p2align	4
	.type	_preQ,@function
_preQ:                                  // @_preQ
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-48]!           // 16-byte Folded Spill
	stp	x22, x21, [sp, #16]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #32]             // 16-byte Folded Spill
	mov	x29, sp
	sub	sp, sp, #16                     // =16
	.cfi_def_cfa w29, 48
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w30, -40
	.cfi_offset w29, -48
	mov	x20, x0
	ldp	w19, w8, [x0, #8]
	bfi	x19, x8, #32, #32
	mov	x0, x19
	bl	evSym
	mov	x21, x0
	adrp	x22, env
	ldr	x8, [x22, :lo12:env]
	stp	x0, x8, [x29, #-16]
	sub	x8, x29, #16                    // =16
	str	x8, [x22, :lo12:env]
	ldp	w0, w8, [x19, #8]
	bfi	x0, x8, #32, #32
	bl	evSym
	mov	x19, x0
	adrp	x8, SymTab+8
	add	x8, x8, :lo12:SymTab+8
	cmp	x21, x8
	b.eq	.LBB42_5
// %bb.1:                               // %"$3"
	mov	x0, x20
	mov	x1, x21
	bl	xName
	cmp	x0, #2                          // =2
	b.eq	.LBB42_5
// %bb.2:                               // %"$5"
	mov	x21, x0
	mov	x0, x20
	mov	x1, x19
	bl	xName
	mov	x8, sp
	sub	x20, x8, #16                    // =16
	mov	sp, x20
	stp	wzr, wzr, [x8, #-16]
	lsr	x9, x0, #32
	stp	w0, w9, [x8, #-8]
	mov	x0, x20
	bl	symByte
	tst	w0, #0xff
	b.eq	.LBB42_4
// %bb.3:                               // %"$8"
	mov	w1, w0
	mov	x0, x21
	mov	x2, x20
	bl	preStr
	tbnz	w0, #0, .LBB42_5
.LBB42_4:                               // %"$10"
	adrp	x19, SymTab+8
	add	x19, x19, :lo12:SymTab+8
.LBB42_5:                               // %"$2"
	ldur	x8, [x29, #-8]
	str	x8, [x22, :lo12:env]
	mov	x0, x19
	mov	sp, x29
	ldp	x20, x19, [sp, #32]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #48             // 16-byte Folded Reload
	ret
.Lfunc_end42:
	.size	_preQ, .Lfunc_end42-_preQ
	.cfi_endproc
                                        // -- End function
	.globl	_subQ                           // -- Begin function _subQ
	.p2align	4
	.type	_subQ,@function
_subQ:                                  // @_subQ
	.cfi_startproc
// %bb.0:                               // %"$1"
	sub	sp, sp, #48                     // =48
	stp	x30, x21, [sp, #16]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #32]             // 16-byte Folded Spill
	.cfi_def_cfa_offset 48
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w30, -32
	ldp	w19, w8, [x0, #8]
	bfi	x19, x8, #32, #32
	mov	x0, x19
	bl	evSym
	mov	x20, x0
	adrp	x21, env
	ldr	x8, [x21, :lo12:env]
	stp	x0, x8, [sp]
	mov	x8, sp
	str	x8, [x21, :lo12:env]
	ldp	w0, w8, [x19, #8]
	bfi	x0, x8, #32, #32
	bl	evSym
	mov	x19, x0
	mov	x0, x20
	mov	x1, x19
	bl	subStr
	adrp	x8, SymTab+8
	add	x8, x8, :lo12:SymTab+8
	tst	w0, #0x1
	csel	x0, x19, x8, ne
	ldr	x8, [sp, #8]
	str	x8, [x21, :lo12:env]
	ldp	x20, x19, [sp, #32]             // 16-byte Folded Reload
	ldp	x30, x21, [sp, #16]             // 16-byte Folded Reload
	add	sp, sp, #48                     // =48
	ret
.Lfunc_end43:
	.size	_subQ, .Lfunc_end43-_subQ
	.cfi_endproc
                                        // -- End function
	.globl	_val                            // -- Begin function _val
	.p2align	4
	.type	_val,@function
_val:                                   // @_val
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-32]!                // 8-byte Folded Spill
	stp	x20, x19, [sp, #16]             // 16-byte Folded Spill
	.cfi_def_cfa_offset 32
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w30, -32
	mov	x19, x0
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w20, w8, [x9]
	bfi	x20, x8, #32, #32
	tst	x20, #0x6
	b.ne	.LBB44_4
// %bb.1:                               // %"$3"
	tbz	w20, #3, .LBB44_3
// %bb.2:                               // %"$6"
	ldp	w20, w8, [x20]
	bfi	x20, x8, #32, #32
	b	.LBB44_4
.LBB44_3:                               // %"$5"
	mov	x0, x20
	bl	evList
	mov	x20, x0
.LBB44_4:                               // %"$2"
	tst	x20, #0x6
	b.ne	.LBB44_9
// %bb.5:                               // %"$8"
	tbz	w20, #3, .LBB44_8
// %bb.6:                               // %"$10"
	ldurb	w8, [x20, #-8]
	tbz	w8, #3, .LBB44_8
// %bb.7:                               // %"$11"
	mov	x0, x19
	mov	x1, x20
	bl	dbFetch
.LBB44_8:                               // %"$12"
	ldp	w0, w8, [x20]
	bfi	x0, x8, #32, #32
	ldp	x20, x19, [sp, #16]             // 16-byte Folded Reload
	ldr	x30, [sp], #32                  // 8-byte Folded Reload
	ret
.LBB44_9:                               // %"$7"
	mov	x0, x19
	mov	x1, x20
	bl	varErr
.Lfunc_end44:
	.size	_val, .Lfunc_end44-_val
	.cfi_endproc
                                        // -- End function
	.globl	_set                            // -- Begin function _set
	.p2align	4
	.type	_set,@function
_set:                                   // @_set
	.cfi_startproc
// %bb.0:                               // %"$1"
	sub	sp, sp, #80                     // =80
	stp	x24, x23, [sp, #32]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #48]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #64]             // 16-byte Folded Spill
	.cfi_def_cfa_offset 80
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w30, -64
	mov	x19, x0
	adrp	x21, env
	ldr	x8, [x21, :lo12:env]
	mov	w9, #10
	str	x9, [sp]
	stp	x8, x30, [sp, #8]               // 8-byte Folded Spill
	mov	x8, sp
	str	x8, [x21, :lo12:env]
	ldp	w23, w8, [x0, #8]
	bfi	x23, x8, #32, #32
	adrp	x22, SymTab+8
	add	x22, x22, :lo12:SymTab+8
	b	.LBB45_3
.LBB45_1:                               // %"$17"
                                        //   in Loop: Header=BB45_3 Depth=1
	ldp	w0, w8, [x23]
	bfi	x0, x8, #32, #32
	ldp	w23, w8, [x23, #8]
	bfi	x23, x8, #32, #32
	tst	x0, #0x6
	b.eq	.LBB45_6
.LBB45_2:                               // %"$18"
                                        //   in Loop: Header=BB45_3 Depth=1
	lsr	x8, x0, #32
	stp	w0, w8, [x20]
	tst	x23, #0xf
	b.ne	.LBB45_16
.LBB45_3:                               // %"$2"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w20, w8, [x23]
	bfi	x20, x8, #32, #32
	ldp	w23, w24, [x23, #8]
	tst	x20, #0x6
	b.ne	.LBB45_9
// %bb.4:                               // %"$4"
                                        //   in Loop: Header=BB45_3 Depth=1
	tbz	w20, #3, .LBB45_8
// %bb.5:                               // %"$7"
                                        //   in Loop: Header=BB45_3 Depth=1
	ldp	w20, w8, [x20]
	bfi	x20, x8, #32, #32
	b	.LBB45_9
.LBB45_6:                               // %"$19"
                                        //   in Loop: Header=BB45_3 Depth=1
	tbz	w0, #3, .LBB45_15
// %bb.7:                               // %"$22"
                                        //   in Loop: Header=BB45_3 Depth=1
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB45_2
.LBB45_8:                               // %"$6"
                                        //   in Loop: Header=BB45_3 Depth=1
	mov	x0, x20
	bl	evList
	mov	x20, x0
.LBB45_9:                               // %"$3"
                                        //   in Loop: Header=BB45_3 Depth=1
	tst	x20, #0x6
	b.ne	.LBB45_17
// %bb.10:                              // %"$9"
                                        //   in Loop: Header=BB45_3 Depth=1
	add	x8, x22, #208                   // =208
	cmp	x8, x20
	ccmp	x20, x22, #0, hs
	b.hs	.LBB45_18
// %bb.11:                              // %"$13"
                                        //   in Loop: Header=BB45_3 Depth=1
	bfi	x23, x24, #32, #32
	str	x20, [sp]
	tbz	w20, #3, .LBB45_13
// %bb.12:                              // %"$15"
                                        //   in Loop: Header=BB45_3 Depth=1
	ldurb	w8, [x20, #-8]
	ubfx	w8, w8, #3, #1
	cbz	w8, .LBB45_1
	b	.LBB45_14
.LBB45_13:                              //   in Loop: Header=BB45_3 Depth=1
	mov	w8, wzr
	cbz	w8, .LBB45_1
.LBB45_14:                              // %"$16"
                                        //   in Loop: Header=BB45_3 Depth=1
	mov	x0, x19
	mov	x1, x20
	bl	dbTouch
	b	.LBB45_1
.LBB45_15:                              // %"$21"
                                        //   in Loop: Header=BB45_3 Depth=1
	bl	evList
	b	.LBB45_2
.LBB45_16:                              // %"$24"
	ldp	x8, x30, [sp, #8]               // 8-byte Folded Reload
	str	x8, [x21, :lo12:env]
	ldp	x20, x19, [sp, #64]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #48]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #32]             // 16-byte Folded Reload
	add	sp, sp, #80                     // =80
	ret
.LBB45_17:                              // %"$8"
	mov	x0, x19
	mov	x1, x20
	bl	varErr
.LBB45_18:                              // %"$12"
	mov	x0, x19
	mov	x1, x20
	bl	protErr
.Lfunc_end45:
	.size	_set, .Lfunc_end45-_set
	.cfi_endproc
                                        // -- End function
	.globl	_setq                           // -- Begin function _setq
	.p2align	4
	.type	_setq,@function
_setq:                                  // @_setq
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-48]!                // 8-byte Folded Spill
	stp	x22, x21, [sp, #16]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #32]             // 16-byte Folded Spill
	.cfi_def_cfa_offset 48
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w30, -48
	mov	x19, x0
	ldp	w22, w8, [x0, #8]
	bfi	x22, x8, #32, #32
	adrp	x21, SymTab+8
	add	x21, x21, :lo12:SymTab+8
	b	.LBB46_3
.LBB46_1:                               // %"$12"
                                        //   in Loop: Header=BB46_3 Depth=1
	bl	evList
.LBB46_2:                               // %"$9"
                                        //   in Loop: Header=BB46_3 Depth=1
	lsr	x8, x0, #32
	stp	w0, w8, [x20]
	tst	x22, #0xf
	b.ne	.LBB46_8
.LBB46_3:                               // %"$2"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w20, w8, [x22]
	bfi	x20, x8, #32, #32
	tst	x20, #0x6
	b.ne	.LBB46_9
// %bb.4:                               // %"$4"
                                        //   in Loop: Header=BB46_3 Depth=1
	add	x8, x21, #208                   // =208
	cmp	x8, x20
	ccmp	x20, x21, #0, hs
	b.hs	.LBB46_10
// %bb.5:                               // %"$8"
                                        //   in Loop: Header=BB46_3 Depth=1
	ldp	w9, w8, [x22, #8]
	bfi	x9, x8, #32, #32
	ldp	w0, w8, [x9]
	bfi	x0, x8, #32, #32
	ldp	w22, w8, [x9, #8]
	bfi	x22, x8, #32, #32
	tst	x0, #0x6
	b.ne	.LBB46_2
// %bb.6:                               // %"$10"
                                        //   in Loop: Header=BB46_3 Depth=1
	tbz	w0, #3, .LBB46_1
// %bb.7:                               // %"$13"
                                        //   in Loop: Header=BB46_3 Depth=1
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB46_2
.LBB46_8:                               // %"$15"
	ldp	x20, x19, [sp, #32]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #16]             // 16-byte Folded Reload
	ldr	x30, [sp], #48                  // 8-byte Folded Reload
	ret
.LBB46_9:                               // %"$3"
	mov	x0, x19
	mov	x1, x20
	bl	varErr
.LBB46_10:                              // %"$7"
	mov	x0, x19
	mov	x1, x20
	bl	protErr
.Lfunc_end46:
	.size	_setq, .Lfunc_end46-_setq
	.cfi_endproc
                                        // -- End function
	.globl	_swap                           // -- Begin function _swap
	.p2align	4
	.type	_swap,@function
_swap:                                  // @_swap
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-64]!           // 16-byte Folded Spill
	str	x23, [sp, #16]                  // 8-byte Folded Spill
	stp	x22, x21, [sp, #32]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #48]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 64
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -48
	.cfi_offset w30, -56
	.cfi_offset w29, -64
	mov	x20, x0
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w19, w8, [x9]
	bfi	x19, x8, #32, #32
	ldp	w22, w21, [x9, #8]
	tst	x19, #0x6
	b.ne	.LBB47_4
// %bb.1:                               // %"$3"
	tbz	w19, #3, .LBB47_3
// %bb.2:                               // %"$6"
	ldp	w19, w8, [x19]
	bfi	x19, x8, #32, #32
	b	.LBB47_4
.LBB47_3:                               // %"$5"
	mov	x0, x19
	bl	evList
	mov	x19, x0
.LBB47_4:                               // %"$2"
	tst	x19, #0x6
	b.ne	.LBB47_14
// %bb.5:                               // %"$8"
	adrp	x8, SymTab+8
	add	x8, x8, :lo12:SymTab+8
	add	x9, x8, #208                    // =208
	cmp	x9, x19
	ccmp	x19, x8, #0, hs
	b.hs	.LBB47_15
// %bb.6:                               // %"$12"
	bfi	x22, x21, #32, #32
	adrp	x21, env
	ldr	x8, [x21, :lo12:env]
	mov	x9, sp
	sub	x23, x9, #16                    // =16
	mov	sp, x23
	lsr	x10, x19, #32
	lsr	x11, x8, #32
	stp	w19, w10, [x9, #-16]
	stp	w8, w11, [x9, #-8]
	str	x23, [x21, :lo12:env]
	tbz	w19, #3, .LBB47_9
// %bb.7:                               // %"$14"
	ldurb	w8, [x19, #-8]
	tbz	w8, #3, .LBB47_9
// %bb.8:                               // %"$15"
	mov	x0, x20
	mov	x1, x19
	bl	dbTouch
.LBB47_9:                               // %"$16"
	ldp	w0, w8, [x22]
	bfi	x0, x8, #32, #32
	tst	x0, #0x6
	b.ne	.LBB47_13
// %bb.10:                              // %"$18"
	tbz	w0, #3, .LBB47_12
// %bb.11:                              // %"$21"
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB47_13
.LBB47_12:                              // %"$20"
	bl	evList
.LBB47_13:                              // %"$17"
	ldp	w8, w9, [x19]
	bfi	x8, x9, #32, #32
	lsr	x9, x0, #32
	stp	w0, w9, [x19]
	ldp	w10, w9, [x23, #8]
	bfi	x10, x9, #32, #32
	str	x10, [x21, :lo12:env]
	mov	x0, x8
	mov	sp, x29
	ldp	x20, x19, [sp, #48]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #32]             // 16-byte Folded Reload
	ldr	x23, [sp, #16]                  // 8-byte Folded Reload
	ldp	x29, x30, [sp], #64             // 16-byte Folded Reload
	ret
.LBB47_14:                              // %"$7"
	mov	x0, x20
	mov	x1, x19
	bl	varErr
.LBB47_15:                              // %"$11"
	mov	x0, x20
	mov	x1, x19
	bl	protErr
.Lfunc_end47:
	.size	_swap, .Lfunc_end47-_swap
	.cfi_endproc
                                        // -- End function
	.globl	_xchg                           // -- Begin function _xchg
	.p2align	4
	.type	_xchg,@function
_xchg:                                  // @_xchg
	.cfi_startproc
// %bb.0:                               // %"$1"
	sub	sp, sp, #80                     // =80
	stp	x30, x25, [sp, #16]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #32]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #48]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #64]             // 16-byte Folded Spill
	.cfi_def_cfa_offset 80
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w30, -64
	mov	x19, x0
	adrp	x22, env
	ldr	x8, [x22, :lo12:env]
	mov	w9, #10
	stp	x9, x8, [sp]
	mov	x8, sp
	str	x8, [x22, :lo12:env]
	ldp	w24, w8, [x0, #8]
	bfi	x24, x8, #32, #32
	adrp	x23, SymTab+8
	add	x23, x23, :lo12:SymTab+8
	b	.LBB48_2
.LBB48_1:                               // %"$32"
                                        //   in Loop: Header=BB48_2 Depth=1
	ldp	w0, w8, [x20]
	ldp	w10, w9, [x21]
	stp	w10, w9, [x20]
	stp	w0, w8, [x21]
	tst	x24, #0xf
	b.ne	.LBB48_22
.LBB48_2:                               // %"$2"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w20, w8, [x24]
	bfi	x20, x8, #32, #32
	ldp	w24, w21, [x24, #8]
	tst	x20, #0x6
	b.ne	.LBB48_6
// %bb.3:                               // %"$4"
                                        //   in Loop: Header=BB48_2 Depth=1
	tbz	w20, #3, .LBB48_5
// %bb.4:                               // %"$7"
                                        //   in Loop: Header=BB48_2 Depth=1
	ldp	w20, w8, [x20]
	bfi	x20, x8, #32, #32
	b	.LBB48_6
.LBB48_5:                               // %"$6"
                                        //   in Loop: Header=BB48_2 Depth=1
	mov	x0, x20
	bl	evList
	mov	x20, x0
.LBB48_6:                               // %"$3"
                                        //   in Loop: Header=BB48_2 Depth=1
	tst	x20, #0x6
	b.ne	.LBB48_25
// %bb.7:                               // %"$9"
                                        //   in Loop: Header=BB48_2 Depth=1
	add	x8, x23, #208                   // =208
	cmp	x8, x20
	ccmp	x20, x23, #0, hs
	b.hs	.LBB48_26
// %bb.8:                               // %"$13"
                                        //   in Loop: Header=BB48_2 Depth=1
	bfi	x24, x21, #32, #32
	str	x20, [sp]
	tbz	w20, #3, .LBB48_10
// %bb.9:                               // %"$15"
                                        //   in Loop: Header=BB48_2 Depth=1
	ldurb	w8, [x20, #-8]
	ubfx	w8, w8, #3, #1
	cbnz	w8, .LBB48_11
	b	.LBB48_12
.LBB48_10:                              //   in Loop: Header=BB48_2 Depth=1
	mov	w8, wzr
	cbz	w8, .LBB48_12
.LBB48_11:                              // %"$16"
                                        //   in Loop: Header=BB48_2 Depth=1
	mov	x0, x19
	mov	x1, x20
	bl	dbTouch
.LBB48_12:                              // %"$17"
                                        //   in Loop: Header=BB48_2 Depth=1
	ldp	w21, w8, [x24]
	bfi	x21, x8, #32, #32
	ldp	w24, w25, [x24, #8]
	tst	x21, #0x6
	b.ne	.LBB48_16
// %bb.13:                              // %"$19"
                                        //   in Loop: Header=BB48_2 Depth=1
	tbz	w21, #3, .LBB48_15
// %bb.14:                              // %"$22"
                                        //   in Loop: Header=BB48_2 Depth=1
	ldp	w21, w8, [x21]
	bfi	x21, x8, #32, #32
	b	.LBB48_16
.LBB48_15:                              // %"$21"
                                        //   in Loop: Header=BB48_2 Depth=1
	mov	x0, x21
	bl	evList
	mov	x21, x0
.LBB48_16:                              // %"$18"
                                        //   in Loop: Header=BB48_2 Depth=1
	tst	x21, #0x6
	b.ne	.LBB48_23
// %bb.17:                              // %"$24"
                                        //   in Loop: Header=BB48_2 Depth=1
	add	x8, x23, #208                   // =208
	cmp	x8, x21
	ccmp	x21, x23, #0, hs
	b.hs	.LBB48_24
// %bb.18:                              // %"$28"
                                        //   in Loop: Header=BB48_2 Depth=1
	tbz	w21, #3, .LBB48_20
// %bb.19:                              // %"$30"
                                        //   in Loop: Header=BB48_2 Depth=1
	ldurb	w8, [x21, #-8]
	ubfx	w8, w8, #3, #1
	bfi	x24, x25, #32, #32
	cbz	w8, .LBB48_1
	b	.LBB48_21
.LBB48_20:                              //   in Loop: Header=BB48_2 Depth=1
	mov	w8, wzr
	bfi	x24, x25, #32, #32
	cbz	w8, .LBB48_1
.LBB48_21:                              // %"$31"
                                        //   in Loop: Header=BB48_2 Depth=1
	mov	x0, x19
	mov	x1, x21
	bl	dbTouch
	b	.LBB48_1
.LBB48_22:                              // %"$34"
	bfi	x0, x8, #32, #32
	ldr	x8, [sp, #8]
	str	x8, [x22, :lo12:env]
	ldp	x20, x19, [sp, #64]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #48]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #32]             // 16-byte Folded Reload
	ldp	x30, x25, [sp, #16]             // 16-byte Folded Reload
	add	sp, sp, #80                     // =80
	ret
.LBB48_23:                              // %"$23"
	mov	x0, x19
	mov	x1, x21
	bl	varErr
.LBB48_24:                              // %"$27"
	mov	x0, x19
	mov	x1, x21
	bl	protErr
.LBB48_25:                              // %"$8"
	mov	x0, x19
	mov	x1, x20
	bl	varErr
.LBB48_26:                              // %"$12"
	mov	x0, x19
	mov	x1, x20
	bl	protErr
.Lfunc_end48:
	.size	_xchg, .Lfunc_end48-_xchg
	.cfi_endproc
                                        // -- End function
	.globl	_on                             // -- Begin function _on
	.p2align	4
	.type	_on,@function
_on:                                    // @_on
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	ldp	w8, w9, [x0, #8]
	bfi	x8, x9, #32, #32
	adrp	x9, SymTab+8
	add	x9, x9, :lo12:SymTab+8
	adrp	x10, SymTab+216
	add	x10, x10, :lo12:SymTab+216
	lsr	x11, x10, #32
.LBB49_1:                               // %"$2"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w1, w12, [x8]
	bfi	x1, x12, #32, #32
	tst	x1, #0x6
	b.ne	.LBB49_5
// %bb.2:                               // %"$4"
                                        //   in Loop: Header=BB49_1 Depth=1
	add	x12, x9, #208                   // =208
	cmp	x12, x1
	ccmp	x1, x9, #0, hs
	b.hs	.LBB49_6
// %bb.3:                               // %"$8"
                                        //   in Loop: Header=BB49_1 Depth=1
	ldp	w8, w12, [x8, #8]
	bfi	x8, x12, #32, #32
	stp	w10, w11, [x1]
	tst	x8, #0xf
	b.eq	.LBB49_1
// %bb.4:                               // %"$10"
	adrp	x0, SymTab+216
	add	x0, x0, :lo12:SymTab+216
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.LBB49_5:                               // %"$3"
	bl	varErr
.LBB49_6:                               // %"$7"
	bl	protErr
.Lfunc_end49:
	.size	_on, .Lfunc_end49-_on
	.cfi_endproc
                                        // -- End function
	.globl	_off                            // -- Begin function _off
	.p2align	4
	.type	_off,@function
_off:                                   // @_off
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	ldp	w8, w9, [x0, #8]
	bfi	x8, x9, #32, #32
	adrp	x9, SymTab+8
	add	x9, x9, :lo12:SymTab+8
	lsr	x10, x9, #32
.LBB50_1:                               // %"$2"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w1, w11, [x8]
	bfi	x1, x11, #32, #32
	tst	x1, #0x6
	b.ne	.LBB50_5
// %bb.2:                               // %"$4"
                                        //   in Loop: Header=BB50_1 Depth=1
	add	x11, x9, #208                   // =208
	cmp	x11, x1
	ccmp	x1, x9, #0, hs
	b.hs	.LBB50_6
// %bb.3:                               // %"$8"
                                        //   in Loop: Header=BB50_1 Depth=1
	ldp	w8, w11, [x8, #8]
	bfi	x8, x11, #32, #32
	stp	w9, w10, [x1]
	tst	x8, #0xf
	b.eq	.LBB50_1
// %bb.4:                               // %"$10"
	adrp	x0, SymTab+8
	add	x0, x0, :lo12:SymTab+8
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.LBB50_5:                               // %"$3"
	bl	varErr
.LBB50_6:                               // %"$7"
	bl	protErr
.Lfunc_end50:
	.size	_off, .Lfunc_end50-_off
	.cfi_endproc
                                        // -- End function
	.globl	_onOff                          // -- Begin function _onOff
	.p2align	4
	.type	_onOff,@function
_onOff:                                 // @_onOff
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	adrp	x10, SymTab+8
	add	x10, x10, :lo12:SymTab+8
	b	.LBB51_2
.LBB51_1:                               // %"$11"
                                        //   in Loop: Header=BB51_2 Depth=1
	lsr	x11, x8, #32
	stp	w8, w11, [x1]
	tst	x9, #0xf
	b.ne	.LBB51_6
.LBB51_2:                               // %"$2"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w1, w8, [x9]
	bfi	x1, x8, #32, #32
	tst	x1, #0x6
	b.ne	.LBB51_7
// %bb.3:                               // %"$4"
                                        //   in Loop: Header=BB51_2 Depth=1
	add	x8, x10, #208                   // =208
	cmp	x8, x1
	ccmp	x1, x10, #0, hs
	b.hs	.LBB51_8
// %bb.4:                               // %"$8"
                                        //   in Loop: Header=BB51_2 Depth=1
	ldp	w9, w11, [x9, #8]
	bfi	x9, x11, #32, #32
	ldp	w12, w11, [x1]
	bfi	x12, x11, #32, #32
	cmp	x12, x10
	b.eq	.LBB51_1
// %bb.5:                               // %"$10"
                                        //   in Loop: Header=BB51_2 Depth=1
	mov	x8, x10
	b	.LBB51_1
.LBB51_6:                               // %"$13"
	mov	x0, x8
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.LBB51_7:                               // %"$3"
	bl	varErr
.LBB51_8:                               // %"$7"
	bl	protErr
.Lfunc_end51:
	.size	_onOff, .Lfunc_end51-_onOff
	.cfi_endproc
                                        // -- End function
	.globl	_zero                           // -- Begin function _zero
	.p2align	4
	.type	_zero,@function
_zero:                                  // @_zero
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	ldp	w8, w9, [x0, #8]
	bfi	x8, x9, #32, #32
	adrp	x9, SymTab+8
	add	x9, x9, :lo12:SymTab+8
	mov	w10, #2
.LBB52_1:                               // %"$2"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w1, w11, [x8]
	bfi	x1, x11, #32, #32
	tst	x1, #0x6
	b.ne	.LBB52_5
// %bb.2:                               // %"$4"
                                        //   in Loop: Header=BB52_1 Depth=1
	add	x11, x9, #208                   // =208
	cmp	x11, x1
	ccmp	x1, x9, #0, hs
	b.hs	.LBB52_6
// %bb.3:                               // %"$8"
                                        //   in Loop: Header=BB52_1 Depth=1
	ldp	w8, w11, [x8, #8]
	bfi	x8, x11, #32, #32
	stp	w10, wzr, [x1]
	tst	x8, #0xf
	b.eq	.LBB52_1
// %bb.4:                               // %"$10"
	mov	w0, #2
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.LBB52_5:                               // %"$3"
	bl	varErr
.LBB52_6:                               // %"$7"
	bl	protErr
.Lfunc_end52:
	.size	_zero, .Lfunc_end52-_zero
	.cfi_endproc
                                        // -- End function
	.globl	_one                            // -- Begin function _one
	.p2align	4
	.type	_one,@function
_one:                                   // @_one
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	ldp	w8, w9, [x0, #8]
	bfi	x8, x9, #32, #32
	adrp	x9, SymTab+8
	add	x9, x9, :lo12:SymTab+8
	mov	w10, #18
.LBB53_1:                               // %"$2"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w1, w11, [x8]
	bfi	x1, x11, #32, #32
	tst	x1, #0x6
	b.ne	.LBB53_5
// %bb.2:                               // %"$4"
                                        //   in Loop: Header=BB53_1 Depth=1
	add	x11, x9, #208                   // =208
	cmp	x11, x1
	ccmp	x1, x9, #0, hs
	b.hs	.LBB53_6
// %bb.3:                               // %"$8"
                                        //   in Loop: Header=BB53_1 Depth=1
	ldp	w8, w11, [x8, #8]
	bfi	x8, x11, #32, #32
	stp	w10, wzr, [x1]
	tst	x8, #0xf
	b.eq	.LBB53_1
// %bb.4:                               // %"$10"
	mov	w0, #18
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.LBB53_5:                               // %"$3"
	bl	varErr
.LBB53_6:                               // %"$7"
	bl	protErr
.Lfunc_end53:
	.size	_one, .Lfunc_end53-_one
	.cfi_endproc
                                        // -- End function
	.globl	_default                        // -- Begin function _default
	.p2align	4
	.type	_default,@function
_default:                               // @_default
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-48]!                // 8-byte Folded Spill
	stp	x22, x21, [sp, #16]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #32]             // 16-byte Folded Spill
	.cfi_def_cfa_offset 48
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w30, -48
	mov	x19, x0
	ldp	w8, w9, [x0, #8]
	bfi	x8, x9, #32, #32
	adrp	x21, SymTab+8
	add	x21, x21, :lo12:SymTab+8
	b	.LBB54_4
.LBB54_1:                               // %"$14"
                                        //   in Loop: Header=BB54_4 Depth=1
	bl	evList
.LBB54_2:                               // %"$11"
                                        //   in Loop: Header=BB54_4 Depth=1
	lsr	x8, x0, #32
	stp	w0, w8, [x20]
.LBB54_3:                               // %"$10"
                                        //   in Loop: Header=BB54_4 Depth=1
	ldp	w8, w9, [x22, #8]
	bfi	x8, x9, #32, #32
	tst	x8, #0xf
	b.ne	.LBB54_10
.LBB54_4:                               // %"$2"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w20, w9, [x8]
	bfi	x20, x9, #32, #32
	tst	x20, #0x6
	b.ne	.LBB54_11
// %bb.5:                               // %"$4"
                                        //   in Loop: Header=BB54_4 Depth=1
	add	x9, x21, #208                   // =208
	cmp	x9, x20
	ccmp	x20, x21, #0, hs
	b.hs	.LBB54_12
// %bb.6:                               // %"$8"
                                        //   in Loop: Header=BB54_4 Depth=1
	ldp	w22, w9, [x8, #8]
	bfi	x22, x9, #32, #32
	ldp	w9, w8, [x20]
	bfi	x9, x8, #32, #32
	cmp	x9, x21
	b.ne	.LBB54_3
// %bb.7:                               // %"$9"
                                        //   in Loop: Header=BB54_4 Depth=1
	ldp	w0, w8, [x22]
	bfi	x0, x8, #32, #32
	tst	x0, #0x6
	b.ne	.LBB54_2
// %bb.8:                               // %"$12"
                                        //   in Loop: Header=BB54_4 Depth=1
	tbz	w0, #3, .LBB54_1
// %bb.9:                               // %"$15"
                                        //   in Loop: Header=BB54_4 Depth=1
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB54_2
.LBB54_10:                              // %"$18"
	ldp	w0, w8, [x20]
	bfi	x0, x8, #32, #32
	ldp	x20, x19, [sp, #32]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #16]             // 16-byte Folded Reload
	ldr	x30, [sp], #48                  // 8-byte Folded Reload
	ret
.LBB54_11:                              // %"$3"
	mov	x0, x19
	mov	x1, x20
	bl	varErr
.LBB54_12:                              // %"$7"
	mov	x0, x19
	mov	x1, x20
	bl	protErr
.Lfunc_end54:
	.size	_default, .Lfunc_end54-_default
	.cfi_endproc
                                        // -- End function
	.globl	_push                           // -- Begin function _push
	.p2align	4
	.type	_push,@function
_push:                                  // @_push
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-64]!           // 16-byte Folded Spill
	stp	x24, x23, [sp, #16]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #32]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #48]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 64
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w30, -56
	.cfi_offset w29, -64
	mov	x20, x0
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w19, w8, [x9]
	bfi	x19, x8, #32, #32
	ldp	w21, w24, [x9, #8]
	tst	x19, #0x6
	b.ne	.LBB55_4
// %bb.1:                               // %"$3"
	tbz	w19, #3, .LBB55_3
// %bb.2:                               // %"$6"
	ldp	w19, w8, [x19]
	bfi	x19, x8, #32, #32
	b	.LBB55_4
.LBB55_3:                               // %"$5"
	mov	x0, x19
	bl	evList
	mov	x19, x0
.LBB55_4:                               // %"$2"
	tst	x19, #0x6
	b.ne	.LBB55_16
// %bb.5:                               // %"$8"
	adrp	x8, SymTab+8
	add	x8, x8, :lo12:SymTab+8
	add	x9, x8, #208                    // =208
	cmp	x9, x19
	ccmp	x19, x8, #0, hs
	b.hs	.LBB55_17
// %bb.6:                               // %"$12"
	adrp	x22, env
	ldr	x8, [x22, :lo12:env]
	mov	x9, sp
	sub	x23, x9, #16                    // =16
	mov	sp, x23
	lsr	x10, x19, #32
	lsr	x11, x8, #32
	stp	w19, w10, [x9, #-16]
	stp	w8, w11, [x9, #-8]
	str	x23, [x22, :lo12:env]
	tbz	w19, #3, .LBB55_8
// %bb.7:                               // %"$14"
	ldurb	w8, [x19, #-8]
	ubfx	w8, w8, #3, #1
	bfi	x21, x24, #32, #32
	cbz	w8, .LBB55_12
	b	.LBB55_9
.LBB55_8:
	mov	w8, wzr
	bfi	x21, x24, #32, #32
	cbz	w8, .LBB55_12
.LBB55_9:                               // %"$15"
	mov	x0, x20
	mov	x1, x19
	bl	dbTouch
	b	.LBB55_12
.LBB55_10:                              // %"$21"
                                        //   in Loop: Header=BB55_12 Depth=1
	mov	x0, x20
	bl	evList
	mov	x20, x0
.LBB55_11:                              // %"$18"
                                        //   in Loop: Header=BB55_12 Depth=1
	ldp	w1, w8, [x19]
	bfi	x1, x8, #32, #32
	mov	x0, x20
	bl	cons
	lsr	x8, x0, #32
	stp	w0, w8, [x19]
	tst	x21, #0xf
	b.ne	.LBB55_15
.LBB55_12:                              // %"$17"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w20, w8, [x21]
	bfi	x20, x8, #32, #32
	ldp	w21, w8, [x21, #8]
	bfi	x21, x8, #32, #32
	tst	x20, #0x6
	b.ne	.LBB55_11
// %bb.13:                              // %"$19"
                                        //   in Loop: Header=BB55_12 Depth=1
	tbz	w20, #3, .LBB55_10
// %bb.14:                              // %"$22"
                                        //   in Loop: Header=BB55_12 Depth=1
	ldp	w20, w8, [x20]
	bfi	x20, x8, #32, #32
	b	.LBB55_11
.LBB55_15:                              // %"$24"
	ldp	w9, w8, [x23, #8]
	bfi	x9, x8, #32, #32
	str	x9, [x22, :lo12:env]
	mov	x0, x20
	mov	sp, x29
	ldp	x20, x19, [sp, #48]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #32]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #64             // 16-byte Folded Reload
	ret
.LBB55_16:                              // %"$7"
	mov	x0, x20
	mov	x1, x19
	bl	varErr
.LBB55_17:                              // %"$11"
	mov	x0, x20
	mov	x1, x19
	bl	protErr
.Lfunc_end55:
	.size	_push, .Lfunc_end55-_push
	.cfi_endproc
                                        // -- End function
	.globl	_push1                          // -- Begin function _push1
	.p2align	4
	.type	_push1,@function
_push1:                                 // @_push1
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-80]!           // 16-byte Folded Spill
	str	x25, [sp, #16]                  // 8-byte Folded Spill
	stp	x24, x23, [sp, #32]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #48]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #64]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 80
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -64
	.cfi_offset w30, -72
	.cfi_offset w29, -80
	mov	x20, x0
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w19, w8, [x9]
	bfi	x19, x8, #32, #32
	ldp	w22, w21, [x9, #8]
	tst	x19, #0x6
	b.ne	.LBB56_4
// %bb.1:                               // %"$3"
	tbz	w19, #3, .LBB56_3
// %bb.2:                               // %"$6"
	ldp	w19, w8, [x19]
	bfi	x19, x8, #32, #32
	b	.LBB56_4
.LBB56_3:                               // %"$5"
	mov	x0, x19
	bl	evList
	mov	x19, x0
.LBB56_4:                               // %"$2"
	tst	x19, #0x6
	b.ne	.LBB56_20
// %bb.5:                               // %"$8"
	adrp	x8, SymTab+8
	add	x8, x8, :lo12:SymTab+8
	add	x9, x8, #208                    // =208
	cmp	x9, x19
	ccmp	x19, x8, #0, hs
	b.hs	.LBB56_21
// %bb.6:                               // %"$12"
	adrp	x23, env
	ldr	x8, [x23, :lo12:env]
	mov	x9, sp
	sub	x24, x9, #16                    // =16
	mov	sp, x24
	lsr	x10, x19, #32
	lsr	x11, x8, #32
	stp	w19, w10, [x9, #-16]
	stp	w8, w11, [x9, #-8]
	str	x24, [x23, :lo12:env]
	tbz	w19, #3, .LBB56_8
// %bb.7:                               // %"$14"
	ldurb	w8, [x19, #-8]
	ubfx	w8, w8, #3, #1
	bfi	x22, x21, #32, #32
	cbz	w8, .LBB56_12
	b	.LBB56_9
.LBB56_8:
	mov	w8, wzr
	bfi	x22, x21, #32, #32
	cbz	w8, .LBB56_12
.LBB56_9:                               // %"$15"
	mov	x0, x20
	mov	x1, x19
	bl	dbTouch
	b	.LBB56_12
.LBB56_10:                              // %"$29.critedge"
                                        //   in Loop: Header=BB56_12 Depth=1
	mov	x0, x20
	mov	x1, x21
	bl	cons
	lsr	x8, x0, #32
	stp	w0, w8, [x19]
.LBB56_11:                              // %"$30"
                                        //   in Loop: Header=BB56_12 Depth=1
	tst	x22, #0xf
	b.ne	.LBB56_19
.LBB56_12:                              // %"$17"
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB56_17 Depth 2
	ldp	w20, w8, [x22]
	bfi	x20, x8, #32, #32
	ldp	w22, w8, [x22, #8]
	bfi	x22, x8, #32, #32
	tst	x20, #0x6
	b.ne	.LBB56_16
// %bb.13:                              // %"$19"
                                        //   in Loop: Header=BB56_12 Depth=1
	tbz	w20, #3, .LBB56_15
// %bb.14:                              // %"$22"
                                        //   in Loop: Header=BB56_12 Depth=1
	ldp	w20, w8, [x20]
	bfi	x20, x8, #32, #32
	b	.LBB56_16
.LBB56_15:                              // %"$21"
                                        //   in Loop: Header=BB56_12 Depth=1
	mov	x0, x20
	bl	evList
	mov	x20, x0
.LBB56_16:                              // %"$18"
                                        //   in Loop: Header=BB56_12 Depth=1
	ldp	w21, w8, [x19]
	bfi	x21, x8, #32, #32
	mov	x25, x21
	tst	x25, #0xf
	b.ne	.LBB56_10
.LBB56_17:                              // %"$24"
                                        //   Parent Loop BB56_12 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	w1, w8, [x25]
	bfi	x1, x8, #32, #32
	mov	x0, x20
	bl	equal
	tbnz	w0, #0, .LBB56_11
// %bb.18:                              // %"$27"
                                        //   in Loop: Header=BB56_17 Depth=2
	ldp	w25, w8, [x25, #8]
	bfi	x25, x8, #32, #32
	tst	x25, #0xf
	b.eq	.LBB56_17
	b	.LBB56_10
.LBB56_19:                              // %"$32"
	ldp	w9, w8, [x24, #8]
	bfi	x9, x8, #32, #32
	str	x9, [x23, :lo12:env]
	mov	x0, x20
	mov	sp, x29
	ldp	x20, x19, [sp, #64]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #48]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #32]             // 16-byte Folded Reload
	ldr	x25, [sp, #16]                  // 8-byte Folded Reload
	ldp	x29, x30, [sp], #80             // 16-byte Folded Reload
	ret
.LBB56_20:                              // %"$7"
	mov	x0, x20
	mov	x1, x19
	bl	varErr
.LBB56_21:                              // %"$11"
	mov	x0, x20
	mov	x1, x19
	bl	protErr
.Lfunc_end56:
	.size	_push1, .Lfunc_end56-_push1
	.cfi_endproc
                                        // -- End function
	.globl	_push1q                         // -- Begin function _push1q
	.p2align	4
	.type	_push1q,@function
_push1q:                                // @_push1q
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-64]!           // 16-byte Folded Spill
	stp	x24, x23, [sp, #16]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #32]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #48]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 64
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w30, -56
	.cfi_offset w29, -64
	mov	x20, x0
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w19, w8, [x9]
	bfi	x19, x8, #32, #32
	ldp	w21, w24, [x9, #8]
	tst	x19, #0x6
	b.ne	.LBB57_4
// %bb.1:                               // %"$3"
	tbz	w19, #3, .LBB57_3
// %bb.2:                               // %"$6"
	ldp	w19, w8, [x19]
	bfi	x19, x8, #32, #32
	b	.LBB57_4
.LBB57_3:                               // %"$5"
	mov	x0, x19
	bl	evList
	mov	x19, x0
.LBB57_4:                               // %"$2"
	tst	x19, #0x6
	b.ne	.LBB57_20
// %bb.5:                               // %"$8"
	adrp	x8, SymTab+8
	add	x8, x8, :lo12:SymTab+8
	add	x9, x8, #208                    // =208
	cmp	x9, x19
	ccmp	x19, x8, #0, hs
	b.hs	.LBB57_21
// %bb.6:                               // %"$12"
	adrp	x22, env
	ldr	x8, [x22, :lo12:env]
	mov	x9, sp
	sub	x23, x9, #16                    // =16
	mov	sp, x23
	lsr	x10, x19, #32
	lsr	x11, x8, #32
	stp	w19, w10, [x9, #-16]
	stp	w8, w11, [x9, #-8]
	str	x23, [x22, :lo12:env]
	tbz	w19, #3, .LBB57_8
// %bb.7:                               // %"$14"
	ldurb	w8, [x19, #-8]
	ubfx	w8, w8, #3, #1
	bfi	x21, x24, #32, #32
	cbz	w8, .LBB57_12
	b	.LBB57_9
.LBB57_8:
	mov	w8, wzr
	bfi	x21, x24, #32, #32
	cbz	w8, .LBB57_12
.LBB57_9:                               // %"$15"
	mov	x0, x20
	mov	x1, x19
	bl	dbTouch
	b	.LBB57_12
.LBB57_10:                              // %"$29.critedge"
                                        //   in Loop: Header=BB57_12 Depth=1
	mov	x0, x20
	bl	cons
	lsr	x8, x0, #32
	stp	w0, w8, [x19]
.LBB57_11:                              // %"$30"
                                        //   in Loop: Header=BB57_12 Depth=1
	tst	x21, #0xf
	b.ne	.LBB57_19
.LBB57_12:                              // %"$17"
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB57_17 Depth 2
	ldp	w20, w8, [x21]
	bfi	x20, x8, #32, #32
	ldp	w21, w8, [x21, #8]
	bfi	x21, x8, #32, #32
	tst	x20, #0x6
	b.ne	.LBB57_16
// %bb.13:                              // %"$19"
                                        //   in Loop: Header=BB57_12 Depth=1
	tbz	w20, #3, .LBB57_15
// %bb.14:                              // %"$22"
                                        //   in Loop: Header=BB57_12 Depth=1
	ldp	w20, w8, [x20]
	bfi	x20, x8, #32, #32
	b	.LBB57_16
.LBB57_15:                              // %"$21"
                                        //   in Loop: Header=BB57_12 Depth=1
	mov	x0, x20
	bl	evList
	mov	x20, x0
.LBB57_16:                              // %"$18"
                                        //   in Loop: Header=BB57_12 Depth=1
	ldp	w1, w8, [x19]
	bfi	x1, x8, #32, #32
	mov	x8, x1
	tst	x8, #0xf
	b.ne	.LBB57_10
.LBB57_17:                              // %"$24"
                                        //   Parent Loop BB57_12 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	w10, w9, [x8]
	bfi	x10, x9, #32, #32
	cmp	x20, x10
	b.eq	.LBB57_11
// %bb.18:                              // %"$27"
                                        //   in Loop: Header=BB57_17 Depth=2
	ldp	w8, w9, [x8, #8]
	bfi	x8, x9, #32, #32
	tst	x8, #0xf
	b.eq	.LBB57_17
	b	.LBB57_10
.LBB57_19:                              // %"$32"
	ldp	w9, w8, [x23, #8]
	bfi	x9, x8, #32, #32
	str	x9, [x22, :lo12:env]
	mov	x0, x20
	mov	sp, x29
	ldp	x20, x19, [sp, #48]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #32]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #64             // 16-byte Folded Reload
	ret
.LBB57_20:                              // %"$7"
	mov	x0, x20
	mov	x1, x19
	bl	varErr
.LBB57_21:                              // %"$11"
	mov	x0, x20
	mov	x1, x19
	bl	protErr
.Lfunc_end57:
	.size	_push1q, .Lfunc_end57-_push1q
	.cfi_endproc
                                        // -- End function
	.globl	_pop                            // -- Begin function _pop
	.p2align	4
	.type	_pop,@function
_pop:                                   // @_pop
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-32]!                // 8-byte Folded Spill
	stp	x20, x19, [sp, #16]             // 16-byte Folded Spill
	.cfi_def_cfa_offset 32
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w30, -32
	mov	x20, x0
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w19, w8, [x9]
	bfi	x19, x8, #32, #32
	tst	x19, #0x6
	b.ne	.LBB58_4
// %bb.1:                               // %"$3"
	tbz	w19, #3, .LBB58_3
// %bb.2:                               // %"$6"
	ldp	w19, w8, [x19]
	bfi	x19, x8, #32, #32
	b	.LBB58_4
.LBB58_3:                               // %"$5"
	mov	x0, x19
	bl	evList
	mov	x19, x0
.LBB58_4:                               // %"$2"
	tst	x19, #0x6
	b.ne	.LBB58_12
// %bb.5:                               // %"$8"
	adrp	x8, SymTab+8
	add	x8, x8, :lo12:SymTab+8
	add	x9, x8, #208                    // =208
	cmp	x9, x19
	ccmp	x19, x8, #0, hs
	b.hs	.LBB58_13
// %bb.6:                               // %"$12"
	tbz	w19, #3, .LBB58_9
// %bb.7:                               // %"$14"
	ldurb	w8, [x19, #-8]
	tbz	w8, #3, .LBB58_9
// %bb.8:                               // %"$15"
	mov	x0, x20
	mov	x1, x19
	bl	dbTouch
.LBB58_9:                               // %"$16"
	ldp	w0, w8, [x19]
	bfi	x0, x8, #32, #32
	tst	x0, #0xf
	b.ne	.LBB58_11
// %bb.10:                              // %"$18"
	ldp	w8, w9, [x0, #8]
	stp	w8, w9, [x19]
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
.LBB58_11:                              // %"$19"
	ldp	x20, x19, [sp, #16]             // 16-byte Folded Reload
	ldr	x30, [sp], #32                  // 8-byte Folded Reload
	ret
.LBB58_12:                              // %"$7"
	mov	x0, x20
	mov	x1, x19
	bl	varErr
.LBB58_13:                              // %"$11"
	mov	x0, x20
	mov	x1, x19
	bl	protErr
.Lfunc_end58:
	.size	_pop, .Lfunc_end58-_pop
	.cfi_endproc
                                        // -- End function
	.globl	_popq                           // -- Begin function _popq
	.p2align	4
	.type	_popq,@function
_popq:                                  // @_popq
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w1, w8, [x9]
	bfi	x1, x8, #32, #32
	tst	x1, #0x6
	b.ne	.LBB59_5
// %bb.1:                               // %"$3"
	adrp	x8, SymTab+8
	add	x8, x8, :lo12:SymTab+8
	add	x9, x8, #208                    // =208
	cmp	x9, x1
	ccmp	x1, x8, #0, hs
	b.hs	.LBB59_6
// %bb.2:                               // %"$7"
	ldp	w0, w8, [x1]
	bfi	x0, x8, #32, #32
	tst	x0, #0xf
	b.eq	.LBB59_4
// %bb.3:                               // %"$10"
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.LBB59_4:                               // %"$9"
	ldp	w8, w9, [x0, #8]
	stp	w8, w9, [x1]
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.LBB59_5:                               // %"$2"
	bl	varErr
.LBB59_6:                               // %"$6"
	bl	protErr
.Lfunc_end59:
	.size	_popq, .Lfunc_end59-_popq
	.cfi_endproc
                                        // -- End function
	.globl	_cut                            // -- Begin function _cut
	.p2align	4
	.type	_cut,@function
_cut:                                   // @_cut
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-80]!           // 16-byte Folded Spill
	stp	x26, x25, [sp, #16]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #32]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #48]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #64]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 80
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w30, -72
	.cfi_offset w29, -80
	mov	x22, x0
	ldp	w20, w8, [x0, #8]
	bfi	x20, x8, #32, #32
	mov	x1, x20
	bl	evCnt
	adrp	x21, SymTab+8
	add	x21, x21, :lo12:SymTab+8
	cmp	x0, #1                          // =1
	b.lt	.LBB60_16
// %bb.1:                               // %"$3"
	mov	x19, x0
	ldp	w9, w8, [x20, #8]
	bfi	x9, x8, #32, #32
	ldp	w20, w8, [x9]
	bfi	x20, x8, #32, #32
	tst	x20, #0x6
	b.ne	.LBB60_5
// %bb.2:                               // %"$6"
	tbz	w20, #3, .LBB60_4
// %bb.3:                               // %"$9"
	ldp	w20, w8, [x20]
	bfi	x20, x8, #32, #32
	b	.LBB60_5
.LBB60_4:                               // %"$8"
	mov	x0, x20
	bl	evList
	mov	x20, x0
.LBB60_5:                               // %"$5"
	tst	x20, #0x6
	b.ne	.LBB60_17
// %bb.6:                               // %"$11"
	add	x8, x21, #208                   // =208
	cmp	x8, x20
	ccmp	x20, x21, #0, hs
	b.hs	.LBB60_18
// %bb.7:                               // %"$15"
	tbz	w20, #3, .LBB60_9
// %bb.8:                               // %"$17"
	ldurb	w8, [x20, #-8]
	ubfx	w8, w8, #3, #1
	cbnz	w8, .LBB60_10
	b	.LBB60_11
.LBB60_9:
	mov	w8, wzr
	cbz	w8, .LBB60_11
.LBB60_10:                              // %"$18"
	mov	x0, x22
	mov	x1, x20
	bl	dbTouch
.LBB60_11:                              // %"$19"
	ldp	w21, w8, [x20]
	bfi	x21, x8, #32, #32
	tst	x21, #0xf
	b.ne	.LBB60_16
// %bb.12:                              // %"$21"
	adrp	x23, env
	ldr	x8, [x23, :lo12:env]
	mov	x9, sp
	sub	x24, x9, #16                    // =16
	mov	sp, x24
	lsr	x10, x21, #32
	stp	w21, w10, [x9, #-16]
	lsr	x10, x8, #32
	stp	w8, w10, [x9, #-8]
	str	x24, [x23, :lo12:env]
	ldp	w0, w8, [x21]
	bfi	x0, x8, #32, #32
	ldp	w25, w8, [x21, #8]
	bfi	x25, x8, #32, #32
	adrp	x22, SymTab+8
	add	x22, x22, :lo12:SymTab+8
	mov	x1, x22
	bl	cons
	mov	x21, x0
	ldr	x8, [x23, :lo12:env]
	mov	x9, sp
	sub	x10, x9, #16                    // =16
	mov	sp, x10
	lsr	x11, x0, #32
	lsr	x12, x8, #32
	stp	w21, w11, [x9, #-16]
	stp	w8, w12, [x9, #-8]
	mov	x26, x0
	str	x10, [x23, :lo12:env]
.LBB60_13:                              // %"$23"
                                        // =>This Inner Loop Header: Depth=1
	subs	x8, x19, #1                     // =1
	cset	w9, ne
	tst	x25, #0xf
	csel	x19, x19, x8, ne
	csel	w8, wzr, w9, ne
	cbz	w8, .LBB60_15
// %bb.14:                              // %"$26"
                                        //   in Loop: Header=BB60_13 Depth=1
	ldp	w0, w8, [x25]
	bfi	x0, x8, #32, #32
	ldp	w25, w8, [x25, #8]
	bfi	x25, x8, #32, #32
	mov	x1, x22
	bl	cons
	lsr	x8, x0, #32
	stp	w0, w8, [x26, #8]
	mov	x26, x0
	b	.LBB60_13
.LBB60_15:                              // %"$27"
	lsr	x8, x25, #32
	stp	w25, w8, [x20]
	ldp	w9, w8, [x24, #8]
	bfi	x9, x8, #32, #32
	str	x9, [x23, :lo12:env]
.LBB60_16:                              // %"$4"
	mov	x0, x21
	mov	sp, x29
	ldp	x20, x19, [sp, #64]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #48]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #32]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #80             // 16-byte Folded Reload
	ret
.LBB60_17:                              // %"$10"
	mov	x0, x22
	mov	x1, x20
	bl	varErr
.LBB60_18:                              // %"$14"
	mov	x0, x22
	mov	x1, x20
	bl	protErr
.Lfunc_end60:
	.size	_cut, .Lfunc_end60-_cut
	.cfi_endproc
                                        // -- End function
	.globl	_del                            // -- Begin function _del
	.p2align	4
	.type	_del,@function
_del:                                   // @_del
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-96]!           // 16-byte Folded Spill
	stp	x28, x27, [sp, #16]             // 16-byte Folded Spill
	stp	x26, x25, [sp, #32]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #48]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #64]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #80]             // 16-byte Folded Spill
	mov	x29, sp
	sub	sp, sp, #16                     // =16
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	mov	x22, x0
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w19, w8, [x9]
	bfi	x19, x8, #32, #32
	ldp	w21, w8, [x9, #8]
	bfi	x21, x8, #32, #32
	tst	x19, #0x6
	b.ne	.LBB61_4
// %bb.1:                               // %"$3"
	tbz	w19, #3, .LBB61_3
// %bb.2:                               // %"$6"
	ldp	w19, w8, [x19]
	bfi	x19, x8, #32, #32
	b	.LBB61_4
.LBB61_3:                               // %"$5"
	mov	x0, x19
	bl	evList
	mov	x19, x0
.LBB61_4:                               // %"$2"
	adrp	x25, env
	ldr	x8, [x25, :lo12:env]
	mov	x9, sp
	sub	x27, x9, #16                    // =16
	mov	sp, x27
	lsr	x10, x19, #32
	stp	w19, w10, [x9, #-16]
	lsr	x10, x8, #32
	stp	w8, w10, [x9, #-8]
	str	x27, [x25, :lo12:env]
	ldp	w20, w8, [x21]
	bfi	x20, x8, #32, #32
	ldp	w23, w24, [x21, #8]
	tst	x20, #0x6
	b.ne	.LBB61_8
// %bb.5:                               // %"$8"
	tbz	w20, #3, .LBB61_7
// %bb.6:                               // %"$11"
	ldp	w20, w8, [x20]
	bfi	x20, x8, #32, #32
	b	.LBB61_8
.LBB61_7:                               // %"$10"
	mov	x0, x20
	bl	evList
	mov	x20, x0
.LBB61_8:                               // %"$7"
	tst	x20, #0x6
	b.ne	.LBB61_28
// %bb.9:                               // %"$13"
	adrp	x21, SymTab+8
	add	x21, x21, :lo12:SymTab+8
	add	x8, x21, #208                   // =208
	cmp	x8, x20
	ccmp	x20, x21, #0, hs
	b.hs	.LBB61_29
// %bb.10:                              // %"$17"
	bfi	x23, x24, #32, #32
	ldr	x8, [x25, :lo12:env]
	mov	x9, sp
	sub	x10, x9, #16                    // =16
	mov	sp, x10
	lsr	x11, x20, #32
	stp	w20, w11, [x9, #-16]
	lsr	x11, x8, #32
	stp	w8, w11, [x9, #-8]
	str	x10, [x25, :lo12:env]
	ldp	w23, w8, [x23]
	bfi	x23, x8, #32, #32
	tst	x23, #0x6
	b.ne	.LBB61_13
// %bb.11:                              // %"$19"
	tbz	w23, #3, .LBB61_16
// %bb.12:                              // %"$22"
	ldp	w23, w8, [x23]
	bfi	x23, x8, #32, #32
.LBB61_13:                              // %"$18"
	tbz	w20, #3, .LBB61_17
.LBB61_14:                              // %"$24"
	ldurb	w8, [x20, #-8]
	tbz	w8, #3, .LBB61_17
// %bb.15:                              // %"$25"
	mov	x0, x22
	mov	x1, x20
	bl	dbTouch
	b	.LBB61_17
.LBB61_16:                              // %"$21"
	mov	x0, x23
	bl	evList
	mov	x23, x0
	tbnz	w20, #3, .LBB61_14
.LBB61_17:                              // %"$26"
	ldp	w22, w8, [x20]
	bfi	x22, x8, #32, #32
.LBB61_18:                              // %"$27"
                                        // =>This Inner Loop Header: Depth=1
	tst	x22, #0xf
	b.ne	.LBB61_27
// %bb.19:                              // %"$28"
                                        //   in Loop: Header=BB61_18 Depth=1
	ldp	w24, w8, [x22]
	bfi	x24, x8, #32, #32
	ldp	w22, w8, [x22, #8]
	bfi	x22, x8, #32, #32
	mov	x0, x19
	mov	x1, x24
	bl	equal
	tbz	w0, #0, .LBB61_21
// %bb.20:                              // %"$31"
                                        //   in Loop: Header=BB61_18 Depth=1
	lsr	x8, x22, #32
	stp	w22, w8, [x20]
	cmp	x23, x21
	b.ne	.LBB61_18
	b	.LBB61_27
.LBB61_21:                              // %"$32"
	mov	x0, x24
	mov	x1, x21
	bl	cons
	mov	x26, x0
	ldr	x8, [x25, :lo12:env]
	mov	x9, sp
	sub	x28, x9, #16                    // =16
	mov	sp, x28
	lsr	x11, x0, #32
	lsr	x10, x8, #32
	stur	x11, [x29, #-8]                 // 8-byte Folded Spill
	stp	w26, w11, [x9, #-16]
	stp	w8, w10, [x9, #-8]
	mov	x24, x0
	str	x28, [x25, :lo12:env]
	b	.LBB61_23
.LBB61_22:                              // %"$37"
                                        //   in Loop: Header=BB61_23 Depth=1
	mov	x0, x25
	mov	x1, x21
	bl	cons
	lsr	x8, x0, #32
	stp	w0, w8, [x24, #8]
	mov	x24, x0
.LBB61_23:                              // %"$33"
                                        // =>This Inner Loop Header: Depth=1
	tst	x22, #0xf
	b.ne	.LBB61_26
// %bb.24:                              // %"$34"
                                        //   in Loop: Header=BB61_23 Depth=1
	ldp	w25, w8, [x22]
	bfi	x25, x8, #32, #32
	ldp	w22, w8, [x22, #8]
	bfi	x22, x8, #32, #32
	mov	x0, x19
	mov	x1, x25
	bl	equal
	tbz	w0, #0, .LBB61_22
// %bb.25:                              // %"$36"
                                        //   in Loop: Header=BB61_23 Depth=1
	cmp	x23, x21
	b.ne	.LBB61_23
.LBB61_26:                              // %"$35"
	ldp	w9, w8, [x28, #8]
	bfi	x9, x8, #32, #32
	adrp	x25, env
	str	x9, [x25, :lo12:env]
	lsr	x8, x22, #32
	stp	w22, w8, [x24, #8]
	ldur	x8, [x29, #-8]                  // 8-byte Folded Reload
	stp	w26, w8, [x20]
	mov	x22, x26
.LBB61_27:                              // %"$29"
	ldp	w9, w8, [x27, #8]
	bfi	x9, x8, #32, #32
	str	x9, [x25, :lo12:env]
	mov	x0, x22
	mov	sp, x29
	ldp	x20, x19, [sp, #80]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #64]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #48]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #32]             // 16-byte Folded Reload
	ldp	x28, x27, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #96             // 16-byte Folded Reload
	ret
.LBB61_28:                              // %"$12"
	mov	x0, x22
	mov	x1, x20
	bl	varErr
.LBB61_29:                              // %"$16"
	mov	x0, x22
	mov	x1, x20
	bl	protErr
.Lfunc_end61:
	.size	_del, .Lfunc_end61-_del
	.cfi_endproc
                                        // -- End function
	.globl	_queue                          // -- Begin function _queue
	.p2align	4
	.type	_queue,@function
_queue:                                 // @_queue
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-64]!           // 16-byte Folded Spill
	str	x23, [sp, #16]                  // 8-byte Folded Spill
	stp	x22, x21, [sp, #32]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #48]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 64
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -48
	.cfi_offset w30, -56
	.cfi_offset w29, -64
	mov	x20, x0
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w19, w8, [x9]
	bfi	x19, x8, #32, #32
	ldp	w23, w21, [x9, #8]
	tst	x19, #0x6
	b.ne	.LBB62_4
// %bb.1:                               // %"$3"
	tbz	w19, #3, .LBB62_3
// %bb.2:                               // %"$6"
	ldp	w19, w8, [x19]
	bfi	x19, x8, #32, #32
	b	.LBB62_4
.LBB62_3:                               // %"$5"
	mov	x0, x19
	bl	evList
	mov	x19, x0
.LBB62_4:                               // %"$2"
	tst	x19, #0x6
	b.ne	.LBB62_18
// %bb.5:                               // %"$8"
	adrp	x8, SymTab+8
	add	x8, x8, :lo12:SymTab+8
	add	x9, x8, #208                    // =208
	cmp	x9, x19
	ccmp	x19, x8, #0, hs
	b.hs	.LBB62_19
// %bb.6:                               // %"$12"
	bfi	x23, x21, #32, #32
	adrp	x21, env
	ldr	x8, [x21, :lo12:env]
	mov	x9, sp
	sub	x22, x9, #16                    // =16
	mov	sp, x22
	lsr	x10, x19, #32
	lsr	x11, x8, #32
	stp	w19, w10, [x9, #-16]
	stp	w8, w11, [x9, #-8]
	str	x22, [x21, :lo12:env]
	tbz	w19, #3, .LBB62_9
// %bb.7:                               // %"$14"
	ldurb	w8, [x19, #-8]
	tbz	w8, #3, .LBB62_9
// %bb.8:                               // %"$15"
	mov	x0, x20
	mov	x1, x19
	bl	dbTouch
.LBB62_9:                               // %"$16"
	ldp	w20, w8, [x23]
	bfi	x20, x8, #32, #32
	tst	x20, #0x6
	b.ne	.LBB62_13
// %bb.10:                              // %"$18"
	tbz	w20, #3, .LBB62_12
// %bb.11:                              // %"$21"
	ldp	w20, w8, [x20]
	bfi	x20, x8, #32, #32
	b	.LBB62_13
.LBB62_12:                              // %"$20"
	mov	x0, x20
	bl	evList
	mov	x20, x0
.LBB62_13:                              // %"$17"
	adrp	x1, SymTab+8
	add	x1, x1, :lo12:SymTab+8
	mov	x0, x20
	bl	cons
	ldp	w8, w9, [x19]
	bfi	x8, x9, #32, #32
	tst	x8, #0xf
	b.ne	.LBB62_17
	b	.LBB62_15
.LBB62_14:                              // %"$26"
                                        //   in Loop: Header=BB62_15 Depth=1
	ldp	w8, w9, [x8, #8]
	bfi	x8, x9, #32, #32
.LBB62_15:                              // %"$25"
                                        // =>This Inner Loop Header: Depth=1
	ldrb	w9, [x8, #8]
	tst	w9, #0xf
	b.eq	.LBB62_14
// %bb.16:                              // %"$27"
	add	x19, x8, #8                     // =8
.LBB62_17:                              // %"$24"
	lsr	x8, x0, #32
	stp	w0, w8, [x19]
	ldp	w9, w8, [x22, #8]
	bfi	x9, x8, #32, #32
	str	x9, [x21, :lo12:env]
	mov	x0, x20
	mov	sp, x29
	ldp	x20, x19, [sp, #48]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #32]             // 16-byte Folded Reload
	ldr	x23, [sp, #16]                  // 8-byte Folded Reload
	ldp	x29, x30, [sp], #64             // 16-byte Folded Reload
	ret
.LBB62_18:                              // %"$7"
	mov	x0, x20
	mov	x1, x19
	bl	varErr
.LBB62_19:                              // %"$11"
	mov	x0, x20
	mov	x1, x19
	bl	protErr
.Lfunc_end62:
	.size	_queue, .Lfunc_end62-_queue
	.cfi_endproc
                                        // -- End function
	.globl	_fifo                           // -- Begin function _fifo
	.p2align	4
	.type	_fifo,@function
_fifo:                                  // @_fifo
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-80]!           // 16-byte Folded Spill
	str	x25, [sp, #16]                  // 8-byte Folded Spill
	stp	x24, x23, [sp, #32]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #48]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #64]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 80
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -64
	.cfi_offset w30, -72
	.cfi_offset w29, -80
	mov	x20, x0
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w19, w8, [x9]
	bfi	x19, x8, #32, #32
	ldp	w24, w21, [x9, #8]
	tst	x19, #0x6
	b.ne	.LBB63_4
// %bb.1:                               // %"$3"
	tbz	w19, #3, .LBB63_3
// %bb.2:                               // %"$6"
	ldp	w19, w8, [x19]
	bfi	x19, x8, #32, #32
	b	.LBB63_4
.LBB63_3:                               // %"$5"
	mov	x0, x19
	bl	evList
	mov	x19, x0
.LBB63_4:                               // %"$2"
	tst	x19, #0x6
	b.ne	.LBB63_30
// %bb.5:                               // %"$8"
	adrp	x8, SymTab+8
	add	x8, x8, :lo12:SymTab+8
	add	x9, x8, #208                    // =208
	cmp	x9, x19
	ccmp	x19, x8, #0, hs
	b.hs	.LBB63_31
// %bb.6:                               // %"$12"
	adrp	x22, env
	ldr	x8, [x22, :lo12:env]
	mov	x9, sp
	sub	x23, x9, #16                    // =16
	mov	sp, x23
	lsr	x10, x19, #32
	lsr	x11, x8, #32
	stp	w19, w10, [x9, #-16]
	stp	w8, w11, [x9, #-8]
	str	x23, [x22, :lo12:env]
	tbz	w19, #3, .LBB63_8
// %bb.7:                               // %"$14"
	ldurb	w8, [x19, #-8]
	ubfx	w8, w8, #3, #1
	bfi	x24, x21, #32, #32
	cbnz	w8, .LBB63_9
	b	.LBB63_10
.LBB63_8:
	mov	w8, wzr
	bfi	x24, x21, #32, #32
	cbz	w8, .LBB63_10
.LBB63_9:                               // %"$15"
	mov	x0, x20
	mov	x1, x19
	bl	dbTouch
.LBB63_10:                              // %"$16"
	ldp	w21, w8, [x19]
	bfi	x21, x8, #32, #32
	tst	x24, #0xf
	b.eq	.LBB63_14
// %bb.11:                              // %"$18"
	tst	x21, #0xf
	adrp	x20, SymTab+8
	add	x20, x20, :lo12:SymTab+8
	b.ne	.LBB63_29
// %bb.12:                              // %"$36"
	ldp	w8, w9, [x21, #8]
	bfi	x8, x9, #32, #32
	cmp	x8, x21
	b.ne	.LBB63_19
// %bb.13:                              // %"$39"
	lsr	x8, x20, #32
	stp	w20, w8, [x19]
	ldp	w20, w8, [x21]
	bfi	x20, x8, #32, #32
	b	.LBB63_29
.LBB63_14:                              // %"$19"
	ldp	w20, w8, [x24]
	bfi	x20, x8, #32, #32
	tst	x20, #0x6
	b.ne	.LBB63_17
// %bb.15:                              // %"$21"
	tbz	w20, #3, .LBB63_20
// %bb.16:                              // %"$24"
	ldp	w20, w8, [x20]
	bfi	x20, x8, #32, #32
.LBB63_17:                              // %"$20"
	tst	x21, #0xf
	b.eq	.LBB63_21
.LBB63_18:                              // %"$26"
	mov	x0, x20
	mov	w1, #10
	bl	cons
	mov	x21, x0
	b	.LBB63_24
.LBB63_19:                              // %"$38"
	ldp	w9, w10, [x8, #8]
	stp	w9, w10, [x21, #8]
	ldp	w20, w9, [x8]
	bfi	x20, x9, #32, #32
	b	.LBB63_29
.LBB63_20:                              // %"$23"
	mov	x0, x20
	bl	evList
	mov	x20, x0
	tst	x21, #0xf
	b.ne	.LBB63_18
.LBB63_21:                              // %"$25"
	ldp	w1, w8, [x21, #8]
	bfi	x1, x8, #32, #32
	mov	x0, x20
	bl	cons
	b	.LBB63_24
.LBB63_22:                              // %"$34"
                                        //   in Loop: Header=BB63_24 Depth=1
	mov	x0, x20
	bl	evList
	mov	x20, x0
.LBB63_23:                              // %"$31"
                                        //   in Loop: Header=BB63_24 Depth=1
	ldp	w1, w8, [x25, #8]
	bfi	x1, x8, #32, #32
	mov	x0, x20
	bl	cons
	mov	x21, x25
.LBB63_24:                              // %"$28.preheader"
                                        // =>This Inner Loop Header: Depth=1
	mov	x25, x0
	lsr	x8, x0, #32
	stp	w0, w8, [x21, #8]
	ldp	w24, w8, [x24, #8]
	bfi	x24, x8, #32, #32
	tst	x24, #0xf
	b.ne	.LBB63_28
// %bb.25:                              // %"$29"
                                        //   in Loop: Header=BB63_24 Depth=1
	ldp	w20, w8, [x24]
	bfi	x20, x8, #32, #32
	tst	x20, #0x6
	b.ne	.LBB63_23
// %bb.26:                              // %"$32"
                                        //   in Loop: Header=BB63_24 Depth=1
	tbz	w20, #3, .LBB63_22
// %bb.27:                              // %"$35"
                                        //   in Loop: Header=BB63_24 Depth=1
	ldp	w20, w8, [x20]
	bfi	x20, x8, #32, #32
	b	.LBB63_23
.LBB63_28:                              // %"$30"
	lsr	x8, x25, #32
	stp	w25, w8, [x19]
.LBB63_29:                              // %"$17"
	ldp	w9, w8, [x23, #8]
	bfi	x9, x8, #32, #32
	str	x9, [x22, :lo12:env]
	mov	x0, x20
	mov	sp, x29
	ldp	x20, x19, [sp, #64]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #48]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #32]             // 16-byte Folded Reload
	ldr	x25, [sp, #16]                  // 8-byte Folded Reload
	ldp	x29, x30, [sp], #80             // 16-byte Folded Reload
	ret
.LBB63_30:                              // %"$7"
	mov	x0, x20
	mov	x1, x19
	bl	varErr
.LBB63_31:                              // %"$11"
	mov	x0, x20
	mov	x1, x19
	bl	protErr
.Lfunc_end63:
	.size	_fifo, .Lfunc_end63-_fifo
	.cfi_endproc
                                        // -- End function
	.globl	_idx                            // -- Begin function _idx
	.p2align	4
	.type	_idx,@function
_idx:                                   // @_idx
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-64]!           // 16-byte Folded Spill
	stp	x24, x23, [sp, #16]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #32]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #48]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 64
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w30, -56
	.cfi_offset w29, -64
	mov	x20, x0
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w19, w8, [x9]
	bfi	x19, x8, #32, #32
	ldp	w24, w21, [x9, #8]
	tst	x19, #0x6
	b.ne	.LBB64_4
// %bb.1:                               // %"$3"
	tbz	w19, #3, .LBB64_3
// %bb.2:                               // %"$6"
	ldp	w19, w8, [x19]
	bfi	x19, x8, #32, #32
	b	.LBB64_4
.LBB64_3:                               // %"$5"
	mov	x0, x19
	bl	evList
	mov	x19, x0
.LBB64_4:                               // %"$2"
	tst	x19, #0x6
	b.ne	.LBB64_23
// %bb.5:                               // %"$8"
	adrp	x23, SymTab+8
	add	x23, x23, :lo12:SymTab+8
	add	x8, x23, #208                   // =208
	cmp	x8, x19
	ccmp	x19, x23, #0, hs
	b.hs	.LBB64_24
// %bb.6:                               // %"$12"
	bfi	x24, x21, #32, #32
	tst	x24, #0xf
	b.eq	.LBB64_8
// %bb.7:                               // %"$13"
	ldp	w0, w8, [x19]
	bfi	x0, x8, #32, #32
	adrp	x1, SymTab+8
	add	x1, x1, :lo12:SymTab+8
	bl	consTree
	b	.LBB64_22
.LBB64_8:                               // %"$14"
	adrp	x21, env
	ldr	x8, [x21, :lo12:env]
	mov	x9, sp
	sub	x22, x9, #16                    // =16
	mov	sp, x22
	lsr	x10, x19, #32
	stp	w19, w10, [x9, #-16]
	lsr	x10, x8, #32
	stp	w8, w10, [x9, #-8]
	str	x22, [x21, :lo12:env]
	ldp	w20, w8, [x24]
	bfi	x20, x8, #32, #32
	ldp	w24, w8, [x24, #8]
	bfi	x24, x8, #32, #32
	tst	x20, #0x6
	b.ne	.LBB64_12
// %bb.9:                               // %"$17"
	tbz	w20, #3, .LBB64_11
// %bb.10:                              // %"$20"
	ldp	w20, w8, [x20]
	bfi	x20, x8, #32, #32
	b	.LBB64_12
.LBB64_11:                              // %"$19"
	mov	x0, x20
	bl	evList
	mov	x20, x0
.LBB64_12:                              // %"$16"
	ldr	x8, [x21, :lo12:env]
	mov	x9, sp
	sub	x10, x9, #16                    // =16
	mov	sp, x10
	lsr	x11, x20, #32
	lsr	x12, x8, #32
	stp	w20, w11, [x9, #-16]
	stp	w8, w12, [x9, #-8]
	tst	x24, #0xf
	str	x10, [x21, :lo12:env]
	b.eq	.LBB64_14
// %bb.13:                              // %"$23"
	mov	x0, x19
	mov	x1, x20
	bl	idxGet
	b	.LBB64_21
.LBB64_14:                              // %"$22"
	ldp	w0, w8, [x24]
	bfi	x0, x8, #32, #32
	tst	x0, #0x6
	b.ne	.LBB64_17
// %bb.15:                              // %"$25"
	tbz	w0, #3, .LBB64_19
// %bb.16:                              // %"$28"
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
.LBB64_17:                              // %"$24"
	cmp	x0, x23
	b.ne	.LBB64_20
.LBB64_18:                              // %"$30"
	mov	x0, x19
	mov	x1, x20
	bl	idxDel
	b	.LBB64_21
.LBB64_19:                              // %"$27"
	bl	evList
	cmp	x0, x23
	b.eq	.LBB64_18
.LBB64_20:                              // %"$29"
	mov	x0, x19
	mov	x1, x20
	bl	idxPut
.LBB64_21:                              // %"$21"
	ldp	w9, w8, [x22, #8]
	bfi	x9, x8, #32, #32
	str	x9, [x21, :lo12:env]
.LBB64_22:                              // %"$15"
	mov	sp, x29
	ldp	x20, x19, [sp, #48]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #32]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #64             // 16-byte Folded Reload
	ret
.LBB64_23:                              // %"$7"
	mov	x0, x20
	mov	x1, x19
	bl	varErr
.LBB64_24:                              // %"$11"
	mov	x0, x20
	mov	x1, x19
	bl	protErr
.Lfunc_end64:
	.size	_idx, .Lfunc_end64-_idx
	.cfi_endproc
                                        // -- End function
	.globl	_lup                            // -- Begin function _lup
	.p2align	4
	.type	_lup,@function
_lup:                                   // @_lup
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-96]!           // 16-byte Folded Spill
	stp	x28, x27, [sp, #16]             // 16-byte Folded Spill
	stp	x26, x25, [sp, #32]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #48]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #64]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #80]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w19, w8, [x9]
	bfi	x19, x8, #32, #32
	ldp	w21, w20, [x9, #8]
	tst	x19, #0x6
	b.ne	.LBB65_4
// %bb.1:                               // %"$3"
	tbz	w19, #3, .LBB65_3
// %bb.2:                               // %"$6"
	ldp	w19, w8, [x19]
	bfi	x19, x8, #32, #32
	b	.LBB65_4
.LBB65_3:                               // %"$5"
	mov	x0, x19
	bl	evList
	mov	x19, x0
.LBB65_4:                               // %"$2"
	adrp	x24, env
	ldr	x8, [x24, :lo12:env]
	mov	x9, sp
	sub	x25, x9, #16                    // =16
	mov	sp, x25
	lsr	x22, x19, #32
	lsr	x10, x8, #32
	stp	w19, w22, [x9, #-16]
	stp	w8, w10, [x9, #-8]
	tst	x19, #0xf
	str	x25, [x24, :lo12:env]
	b.ne	.LBB65_19
// %bb.5:                               // %"$8"
	bfi	x21, x20, #32, #32
	ldp	w20, w8, [x21]
	bfi	x20, x8, #32, #32
	ldp	w21, w8, [x21, #8]
	bfi	x21, x8, #32, #32
	tst	x20, #0x6
	b.ne	.LBB65_8
// %bb.6:                               // %"$11"
	tbz	w20, #3, .LBB65_21
// %bb.7:                               // %"$14"
	ldp	w20, w8, [x20]
	bfi	x20, x8, #32, #32
.LBB65_8:                               // %"$10"
	tst	x21, #0xf
	b.eq	.LBB65_22
.LBB65_9:                               // %"$18.preheader"
	adrp	x22, SymTab+216
	add	x22, x22, :lo12:SymTab+216
	adrp	x21, SymTab+8
	add	x21, x21, :lo12:SymTab+8
	b	.LBB65_12
.LBB65_10:                              // %"$21"
                                        //   in Loop: Header=BB65_12 Depth=1
	ldp	w8, w9, [x19, #8]
	bfi	x8, x9, #32, #32
.LBB65_11:                              // %"$19"
                                        //   in Loop: Header=BB65_12 Depth=1
	ldp	w19, w9, [x8]
	bfi	x19, x9, #32, #32
	tst	x19, #0xf
	b.ne	.LBB65_18
.LBB65_12:                              // %"$18"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w8, w9, [x19]
	bfi	x8, x9, #32, #32
	cmp	x8, x22
	b.eq	.LBB65_10
// %bb.13:                              // %"$20"
                                        //   in Loop: Header=BB65_12 Depth=1
	tst	x8, #0xf
	b.eq	.LBB65_15
// %bb.14:                              // %"$23"
                                        //   in Loop: Header=BB65_12 Depth=1
	ldp	w9, w8, [x19, #8]
	bfi	x9, x8, #32, #32
	add	x8, x9, #8                      // =8
	b	.LBB65_11
.LBB65_15:                              // %"$22"
                                        //   in Loop: Header=BB65_12 Depth=1
	ldp	w0, w9, [x8]
	bfi	x0, x9, #32, #32
	mov	x1, x20
	bl	compare
	cbz	x0, .LBB65_25
// %bb.16:                              // %"$24"
                                        //   in Loop: Header=BB65_12 Depth=1
	ldp	w8, w9, [x19, #8]
	bfi	x8, x9, #32, #32
	tbz	x0, #63, .LBB65_11
// %bb.17:                              // %"$27"
                                        //   in Loop: Header=BB65_12 Depth=1
	add	x8, x8, #8                      // =8
	b	.LBB65_11
.LBB65_18:
	mov	x19, x21
.LBB65_19:                              // %"$9"
	ldp	w9, w8, [x25, #8]
	bfi	x9, x8, #32, #32
	str	x9, [x24, :lo12:env]
	mov	x0, x19
.LBB65_20:                              // %"$56"
	mov	sp, x29
	ldp	x20, x19, [sp, #80]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #64]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #48]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #32]             // 16-byte Folded Reload
	ldp	x28, x27, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #96             // 16-byte Folded Reload
	ret
.LBB65_21:                              // %"$13"
	mov	x0, x20
	bl	evList
	mov	x20, x0
	tst	x21, #0xf
	b.ne	.LBB65_9
.LBB65_22:                              // %"$16"
	ldr	x8, [x24, :lo12:env]
	mov	x9, sp
	sub	x10, x9, #16                    // =16
	mov	sp, x10
	lsr	x11, x20, #32
	stp	w20, w11, [x9, #-16]
	lsr	x11, x8, #32
	stp	w8, w11, [x9, #-8]
	str	x10, [x24, :lo12:env]
	ldp	w21, w8, [x21]
	bfi	x21, x8, #32, #32
	tst	x21, #0x6
	b.ne	.LBB65_27
// %bb.23:                              // %"$33"
	tbz	w21, #3, .LBB65_26
// %bb.24:                              // %"$36"
	ldp	w21, w8, [x21]
	bfi	x21, x8, #32, #32
	b	.LBB65_27
.LBB65_25:                              // %"$26"
	ldp	w19, w8, [x19]
	bfi	x19, x8, #32, #32
	b	.LBB65_19
.LBB65_26:                              // %"$35"
	mov	x0, x21
	bl	evList
	mov	x21, x0
.LBB65_27:                              // %"$32"
	adrp	x8, env
	add	x8, x8, :lo12:env
	ldr	x9, [x8]
	mov	x10, sp
	sub	x11, x10, #16                   // =16
	mov	sp, x11
	lsr	x12, x21, #32
	lsr	x13, x9, #32
	stp	w21, w12, [x10, #-16]
	stp	w9, w13, [x10, #-8]
	str	x11, [x8]
	mov	x9, sp
	sub	x26, x9, #16                    // =16
	mov	sp, x26
	stp	w19, w22, [x9, #-16]
	ldr	x10, [x8]
	lsr	x11, x10, #32
	stp	w10, w11, [x9, #-8]
	str	x26, [x8]
	mov	x9, sp
	sub	x27, x9, #16                    // =16
	mov	sp, x27
	mov	x10, x26
	adrp	x22, SymTab+8
	add	x22, x22, :lo12:SymTab+8
	mov	w11, #10
	stp	w11, wzr, [x9, #-16]
	lsr	x11, x10, #32
	stp	w10, w11, [x9, #-8]
	mov	x9, x27
.LBB65_28:                              // %"$38"
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB65_36 Depth 2
                                        //       Child Loop BB65_42 Depth 3
	lsr	x10, x9, #32
	stp	w9, w10, [x8]
	ldp	w23, w8, [x19, #8]
	bfi	x23, x8, #32, #32
	ldp	w28, w8, [x23, #8]
	bfi	x28, x8, #32, #32
	tst	x28, #0xf
	b.ne	.LBB65_36
// %bb.29:                              // %"$39"
                                        //   in Loop: Header=BB65_28 Depth=1
	ldp	w8, w9, [x19]
	bfi	x8, x9, #32, #32
	adrp	x9, SymTab+216
	add	x9, x9, :lo12:SymTab+216
	cmp	x8, x9
	b.eq	.LBB65_36
// %bb.30:                              // %"$41"
                                        //   in Loop: Header=BB65_28 Depth=1
	tst	x8, #0xf
	b.eq	.LBB65_32
// %bb.31:                              //   in Loop: Header=BB65_28 Depth=1
	mov	w8, wzr
	b	.LBB65_33
.LBB65_32:                              // %"$43"
                                        //   in Loop: Header=BB65_28 Depth=1
	ldp	w0, w9, [x8]
	bfi	x0, x9, #32, #32
	mov	x1, x21
	bl	compare
	cmp	x0, #0                          // =0
	cset	w8, gt
.LBB65_33:                              // %"$42"
                                        //   in Loop: Header=BB65_28 Depth=1
	tbnz	w8, #0, .LBB65_36
// %bb.34:                              // %"$44"
                                        //   in Loop: Header=BB65_28 Depth=1
	ldp	w9, w10, [x27]
	mov	x8, x27
	stp	w9, w10, [x23, #8]
	mov	x9, x19
	mov	x19, x28
	b	.LBB65_28
.LBB65_35:                              // %"$60"
                                        //   in Loop: Header=BB65_36 Depth=2
	ldp	w11, w10, [x8, #8]
	bfi	x11, x10, #32, #32
	ldr	w10, [x11, #8]!
	ldr	w12, [x11, #4]
	stp	w10, w12, [x27]
	stp	w19, w9, [x11]
	mov	x19, x8
.LBB65_36:                              // %"$45"
                                        //   Parent Loop BB65_28 Depth=1
                                        // =>  This Loop Header: Depth=2
                                        //       Child Loop BB65_42 Depth 3
	lsr	x28, x19, #32
	stp	w19, w28, [x26]
	ldp	w23, w8, [x19]
	bfi	x23, x8, #32, #32
	tst	x23, #0xf
	b.eq	.LBB65_38
// %bb.37:                              //   in Loop: Header=BB65_36 Depth=2
	mov	w8, wzr
	tbz	w8, #0, .LBB65_42
	b	.LBB65_39
.LBB65_38:                              // %"$47"
                                        //   in Loop: Header=BB65_36 Depth=2
	ldp	w0, w8, [x23]
	bfi	x0, x8, #32, #32
	mov	x1, x20
	bl	compare
	lsr	x8, x0, #63
	eor	w8, w8, #0x1
	tbz	w8, #0, .LBB65_42
.LBB65_39:                              // %"$48"
                                        //   in Loop: Header=BB65_36 Depth=2
	ldp	w0, w8, [x23]
	bfi	x0, x8, #32, #32
	mov	x1, x21
	bl	compare
	cmp	x0, #0                          // =0
	b.gt	.LBB65_41
// %bb.40:                              // %"$50"
                                        //   in Loop: Header=BB65_36 Depth=2
	mov	x0, x23
	mov	x1, x22
	bl	cons
	mov	x22, x0
.LBB65_41:                              // %"$51"
                                        //   in Loop: Header=BB65_36 Depth=2
	ldp	w8, w9, [x19, #8]
	bfi	x8, x9, #32, #32
	ldp	w9, w10, [x8]
	bfi	x9, x10, #32, #32
	tst	x9, #0xf
	b.eq	.LBB65_45
.LBB65_42:                              // %"$55"
                                        //   Parent Loop BB65_28 Depth=1
                                        //     Parent Loop BB65_36 Depth=2
                                        // =>    This Inner Loop Header: Depth=3
	ldp	w8, w9, [x27]
	bfi	x8, x9, #32, #32
	cmp	x8, #10                         // =10
	b.eq	.LBB65_46
// %bb.43:                              // %"$57"
                                        //   in Loop: Header=BB65_42 Depth=3
	lsr	x9, x19, #32
	tbz	w8, #3, .LBB65_35
// %bb.44:                              // %"$58"
                                        //   in Loop: Header=BB65_42 Depth=3
	and	x10, x8, #0xfffffffffffffff7
	ldp	w12, w11, [x10, #8]
	bfi	x12, x11, #32, #32
	ldp	w11, w13, [x12]
	stp	w11, w13, [x27]
	stp	w19, w9, [x12]
	lsr	x8, x8, #32
	stp	w10, w8, [x26]
	mov	x19, x10
	b	.LBB65_42
.LBB65_45:                              // %"$54"
                                        //   in Loop: Header=BB65_28 Depth=1
	ldp	w10, w11, [x27]
	stp	w10, w11, [x8]
	orr	w8, w19, #0x8
	stp	w8, w28, [x27]
	mov	x8, x26
	mov	x19, x9
	b	.LBB65_28
.LBB65_46:                              // %"$56"
	ldp	w9, w8, [x25, #8]
	bfi	x9, x8, #32, #32
	str	x9, [x24, :lo12:env]
	mov	x0, x22
	b	.LBB65_20
.Lfunc_end65:
	.size	_lup, .Lfunc_end65-_lup
	.cfi_endproc
                                        // -- End function
	.globl	_put                            // -- Begin function _put
	.p2align	4
	.type	_put,@function
_put:                                   // @_put
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-80]!           // 16-byte Folded Spill
	str	x25, [sp, #16]                  // 8-byte Folded Spill
	stp	x24, x23, [sp, #32]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #48]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #64]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 80
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -64
	.cfi_offset w30, -72
	.cfi_offset w29, -80
	mov	x19, x0
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w20, w8, [x9]
	bfi	x20, x8, #32, #32
	ldp	w22, w8, [x9, #8]
	bfi	x22, x8, #32, #32
	tst	x20, #0x6
	b.ne	.LBB66_4
// %bb.1:                               // %"$3"
	tbz	w20, #3, .LBB66_3
// %bb.2:                               // %"$6"
	ldp	w20, w8, [x20]
	bfi	x20, x8, #32, #32
	b	.LBB66_4
.LBB66_3:                               // %"$5"
	mov	x0, x20
	bl	evList
	mov	x20, x0
.LBB66_4:                               // %"$2"
	adrp	x8, env
	add	x8, x8, :lo12:env
	ldr	x9, [x8]
	mov	x10, sp
	sub	x23, x10, #16                   // =16
	mov	sp, x23
	lsr	x11, x20, #32
	lsr	x12, x9, #32
	stp	w20, w11, [x10, #-16]
	mov	x0, x23
	stp	w9, w12, [x10, #-8]
.LBB66_5:                               // %"$7"
                                        // =>This Inner Loop Header: Depth=1
	lsr	x9, x0, #32
	stp	w0, w9, [x8]
	ldp	w21, w8, [x22]
	bfi	x21, x8, #32, #32
	ldp	w22, w8, [x22, #8]
	bfi	x22, x8, #32, #32
	tst	x21, #0x6
	b.ne	.LBB66_9
// %bb.6:                               // %"$9"
                                        //   in Loop: Header=BB66_5 Depth=1
	tbz	w21, #3, .LBB66_8
// %bb.7:                               // %"$12"
                                        //   in Loop: Header=BB66_5 Depth=1
	ldp	w21, w8, [x21]
	bfi	x21, x8, #32, #32
	b	.LBB66_9
.LBB66_8:                               // %"$11"
                                        //   in Loop: Header=BB66_5 Depth=1
	mov	x0, x21
	bl	evList
	mov	x21, x0
.LBB66_9:                               // %"$8"
                                        //   in Loop: Header=BB66_5 Depth=1
	ldrb	w8, [x22, #8]
	tst	w8, #0xf
	b.ne	.LBB66_11
// %bb.10:                              // %"$13"
                                        //   in Loop: Header=BB66_5 Depth=1
	mov	x0, x19
	mov	x1, x20
	mov	x2, x21
	bl	getn
	mov	x8, x23
	mov	x20, x0
	b	.LBB66_5
.LBB66_11:                              // %"$14"
	tst	x20, #0x6
	b.ne	.LBB66_27
// %bb.12:                              // %"$16"
	mov	x8, sp
	sub	x9, x8, #16                     // =16
	mov	sp, x9
	lsr	x10, x21, #32
	stp	w21, w10, [x8, #-16]
	adrp	x24, env
	ldr	x10, [x24, :lo12:env]
	lsr	x11, x10, #32
	stp	w10, w11, [x8, #-8]
	str	x9, [x24, :lo12:env]
	ldp	w22, w8, [x22]
	bfi	x22, x8, #32, #32
	tst	x22, #0x6
	b.ne	.LBB66_15
// %bb.13:                              // %"$18"
	tbz	w22, #3, .LBB66_22
// %bb.14:                              // %"$21"
	ldp	w22, w8, [x22]
	bfi	x22, x8, #32, #32
.LBB66_15:                              // %"$17"
	tst	x20, #0xf
	b.eq	.LBB66_23
.LBB66_16:                              // %"$23"
	ldurb	w8, [x20, #-8]
	adrp	x25, SymTab+8
	add	x25, x25, :lo12:SymTab+8
	tbz	w8, #3, .LBB66_19
// %bb.17:                              // %"$25"
	mov	x0, x19
	mov	x1, x20
	cmp	x21, x25
	b.ne	.LBB66_24
// %bb.18:                              // %"$27"
	bl	dbFetch
.LBB66_19:                              // %"$26"
	cmp	x21, #2                         // =2
	b.ne	.LBB66_25
.LBB66_20:                              // %"$30"
	add	x8, x25, #208                   // =208
	cmp	x8, x20
	ccmp	x20, x25, #0, hs
	b.hs	.LBB66_28
// %bb.21:                              // %"$36"
	lsr	x8, x22, #32
	stp	w22, w8, [x20]
	b	.LBB66_26
.LBB66_22:                              // %"$20"
	mov	x0, x22
	bl	evList
	mov	x22, x0
	tst	x20, #0xf
	b.ne	.LBB66_16
.LBB66_23:                              // %"$22"
	mov	x0, x19
	mov	x1, x20
	mov	x2, x21
	mov	x3, x22
	bl	putn
	b	.LBB66_26
.LBB66_24:                              // %"$28"
	bl	dbTouch
	cmp	x21, #2                         // =2
	b.eq	.LBB66_20
.LBB66_25:                              // %"$31"
	mov	x0, x20
	mov	x1, x21
	mov	x2, x22
	bl	put
.LBB66_26:                              // %"$24"
	ldp	w9, w8, [x23, #8]
	bfi	x9, x8, #32, #32
	str	x9, [x24, :lo12:env]
	mov	x0, x22
	mov	sp, x29
	ldp	x20, x19, [sp, #64]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #48]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #32]             // 16-byte Folded Reload
	ldr	x25, [sp, #16]                  // 8-byte Folded Reload
	ldp	x29, x30, [sp], #80             // 16-byte Folded Reload
	ret
.LBB66_27:                              // %"$15"
	mov	x0, x19
	mov	x1, x20
	bl	argErr
.LBB66_28:                              // %"$35"
	mov	x0, x19
	mov	x1, x20
	bl	protErr
.Lfunc_end66:
	.size	_put, .Lfunc_end66-_put
	.cfi_endproc
                                        // -- End function
	.globl	_get                            // -- Begin function _get
	.p2align	4
	.type	_get,@function
_get:                                   // @_get
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-48]!           // 16-byte Folded Spill
	stp	x22, x21, [sp, #16]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #32]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 48
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w30, -40
	.cfi_offset w29, -48
	mov	x19, x0
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w20, w8, [x9]
	bfi	x20, x8, #32, #32
	ldp	w21, w8, [x9, #8]
	bfi	x21, x8, #32, #32
	tst	x20, #0x6
	b.ne	.LBB67_3
// %bb.1:                               // %"$3"
	tbz	w20, #3, .LBB67_5
// %bb.2:                               // %"$6"
	ldp	w20, w8, [x20]
	bfi	x20, x8, #32, #32
.LBB67_3:                               // %"$2"
	tst	x21, #0xf
	b.eq	.LBB67_6
.LBB67_4:
	mov	x0, x20
	b	.LBB67_13
.LBB67_5:                               // %"$5"
	mov	x0, x20
	bl	evList
	mov	x20, x0
	tst	x21, #0xf
	b.ne	.LBB67_4
.LBB67_6:                               // %"$7"
	adrp	x8, env
	add	x8, x8, :lo12:env
	ldr	x9, [x8]
	mov	x10, sp
	sub	x22, x10, #16                   // =16
	mov	sp, x22
	lsr	x11, x20, #32
	lsr	x12, x9, #32
	stp	w20, w11, [x10, #-16]
	mov	x0, x22
	stp	w9, w12, [x10, #-8]
	b	.LBB67_9
.LBB67_7:                               // %"$13"
                                        //   in Loop: Header=BB67_9 Depth=1
	mov	x0, x2
	bl	evList
	mov	x2, x0
.LBB67_8:                               // %"$10"
                                        //   in Loop: Header=BB67_9 Depth=1
	mov	x0, x19
	mov	x1, x20
	bl	getn
	tst	x21, #0xf
	mov	x8, x22
	mov	x20, x0
	b.ne	.LBB67_12
.LBB67_9:                               // %"$9"
                                        // =>This Inner Loop Header: Depth=1
	lsr	x9, x0, #32
	stp	w0, w9, [x8]
	ldp	w2, w8, [x21]
	bfi	x2, x8, #32, #32
	ldp	w21, w8, [x21, #8]
	bfi	x21, x8, #32, #32
	tst	x2, #0x6
	b.ne	.LBB67_8
// %bb.10:                              // %"$11"
                                        //   in Loop: Header=BB67_9 Depth=1
	tbz	w2, #3, .LBB67_7
// %bb.11:                              // %"$14"
                                        //   in Loop: Header=BB67_9 Depth=1
	ldp	w2, w8, [x2]
	bfi	x2, x8, #32, #32
	b	.LBB67_8
.LBB67_12:                              // %"$16"
	ldp	w9, w8, [x22, #8]
	bfi	x9, x8, #32, #32
	adrp	x8, env
	str	x9, [x8, :lo12:env]
.LBB67_13:                              // %"$8"
	mov	sp, x29
	ldp	x20, x19, [sp, #32]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #48             // 16-byte Folded Reload
	ret
.Lfunc_end67:
	.size	_get, .Lfunc_end67-_get
	.cfi_endproc
                                        // -- End function
	.globl	_prop                           // -- Begin function _prop
	.p2align	4
	.type	_prop,@function
_prop:                                  // @_prop
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-64]!           // 16-byte Folded Spill
	str	x23, [sp, #16]                  // 8-byte Folded Spill
	stp	x22, x21, [sp, #32]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #48]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 64
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -48
	.cfi_offset w30, -56
	.cfi_offset w29, -64
	mov	x19, x0
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w20, w8, [x9]
	bfi	x20, x8, #32, #32
	ldp	w23, w8, [x9, #8]
	bfi	x23, x8, #32, #32
	tst	x20, #0x6
	b.ne	.LBB68_4
// %bb.1:                               // %"$3"
	tbz	w20, #3, .LBB68_3
// %bb.2:                               // %"$6"
	ldp	w20, w8, [x20]
	bfi	x20, x8, #32, #32
	b	.LBB68_4
.LBB68_3:                               // %"$5"
	mov	x0, x20
	bl	evList
	mov	x20, x0
.LBB68_4:                               // %"$2"
	adrp	x8, env
	add	x8, x8, :lo12:env
	ldr	x9, [x8]
	mov	x10, sp
	sub	x22, x10, #16                   // =16
	mov	sp, x22
	lsr	x11, x20, #32
	lsr	x12, x9, #32
	stp	w20, w11, [x10, #-16]
	mov	x0, x22
	stp	w9, w12, [x10, #-8]
.LBB68_5:                               // %"$7"
                                        // =>This Inner Loop Header: Depth=1
	lsr	x9, x0, #32
	stp	w0, w9, [x8]
	ldp	w21, w8, [x23]
	bfi	x21, x8, #32, #32
	ldp	w23, w8, [x23, #8]
	bfi	x23, x8, #32, #32
	tst	x21, #0x6
	b.ne	.LBB68_8
// %bb.6:                               // %"$9"
                                        //   in Loop: Header=BB68_5 Depth=1
	tbz	w21, #3, .LBB68_10
// %bb.7:                               // %"$12"
                                        //   in Loop: Header=BB68_5 Depth=1
	ldp	w21, w8, [x21]
	bfi	x21, x8, #32, #32
.LBB68_8:                               // %"$8"
                                        //   in Loop: Header=BB68_5 Depth=1
	tst	x23, #0xf
	b.ne	.LBB68_11
.LBB68_9:                               // %"$13"
                                        //   in Loop: Header=BB68_5 Depth=1
	mov	x0, x19
	mov	x1, x20
	mov	x2, x21
	bl	getn
	mov	x8, x22
	mov	x20, x0
	b	.LBB68_5
.LBB68_10:                              // %"$11"
                                        //   in Loop: Header=BB68_5 Depth=1
	mov	x0, x21
	bl	evList
	mov	x21, x0
	tst	x23, #0xf
	b.eq	.LBB68_9
.LBB68_11:                              // %"$14"
	eor	w8, w20, #0x8
	tst	x8, #0xe
	b.ne	.LBB68_17
// %bb.12:                              // %"$16"
	mov	x8, sp
	sub	x9, x8, #16                     // =16
	mov	sp, x9
	lsr	x10, x21, #32
	stp	w21, w10, [x8, #-16]
	adrp	x23, env
	ldr	x10, [x23, :lo12:env]
	lsr	x11, x10, #32
	stp	w10, w11, [x8, #-8]
	str	x9, [x23, :lo12:env]
	ldurb	w8, [x20, #-8]
	tbz	w8, #3, .LBB68_16
// %bb.13:                              // %"$17"
	adrp	x8, SymTab+8
	add	x8, x8, :lo12:SymTab+8
	mov	x0, x19
	mov	x1, x20
	cmp	x21, x8
	b.ne	.LBB68_15
// %bb.14:                              // %"$19"
	bl	dbFetch
	b	.LBB68_16
.LBB68_15:                              // %"$20"
	bl	dbTouch
.LBB68_16:                              // %"$18"
	mov	x0, x20
	mov	x1, x21
	bl	prop
	ldp	w9, w8, [x22, #8]
	bfi	x9, x8, #32, #32
	str	x9, [x23, :lo12:env]
	mov	sp, x29
	ldp	x20, x19, [sp, #48]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #32]             // 16-byte Folded Reload
	ldr	x23, [sp, #16]                  // 8-byte Folded Reload
	ldp	x29, x30, [sp], #64             // 16-byte Folded Reload
	ret
.LBB68_17:                              // %"$15"
	mov	x0, x19
	mov	x1, x20
	bl	symErr
.Lfunc_end68:
	.size	_prop, .Lfunc_end68-_prop
	.cfi_endproc
                                        // -- End function
	.globl	_semicol                        // -- Begin function _semicol
	.p2align	4
	.type	_semicol,@function
_semicol:                               // @_semicol
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-48]!           // 16-byte Folded Spill
	str	x21, [sp, #16]                  // 8-byte Folded Spill
	stp	x20, x19, [sp, #32]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 48
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -32
	.cfi_offset w30, -40
	.cfi_offset w29, -48
	mov	x19, x0
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w1, w8, [x9]
	bfi	x1, x8, #32, #32
	ldp	w20, w8, [x9, #8]
	bfi	x20, x8, #32, #32
	tst	x1, #0x6
	b.ne	.LBB69_3
// %bb.1:                               // %"$3"
	tbz	w1, #3, .LBB69_5
// %bb.2:                               // %"$6"
	ldp	w1, w8, [x1]
	bfi	x1, x8, #32, #32
.LBB69_3:                               // %"$2"
	tst	x20, #0xf
	b.eq	.LBB69_6
.LBB69_4:
	mov	x0, x1
	b	.LBB69_9
.LBB69_5:                               // %"$5"
	mov	x0, x1
	bl	evList
	mov	x1, x0
	tst	x20, #0xf
	b.ne	.LBB69_4
.LBB69_6:                               // %"$7"
	adrp	x8, env
	add	x8, x8, :lo12:env
	ldr	x9, [x8]
	mov	x10, sp
	sub	x21, x10, #16                   // =16
	mov	sp, x21
	lsr	x11, x1, #32
	lsr	x12, x9, #32
	stp	w1, w11, [x10, #-16]
	mov	x0, x21
	stp	w9, w12, [x10, #-8]
.LBB69_7:                               // %"$9"
                                        // =>This Inner Loop Header: Depth=1
	lsr	x9, x0, #32
	stp	w0, w9, [x8]
	ldp	w2, w8, [x20]
	bfi	x2, x8, #32, #32
	ldp	w20, w8, [x20, #8]
	bfi	x20, x8, #32, #32
	mov	x0, x19
	bl	getn
	tst	x20, #0xf
	mov	x8, x21
	mov	x1, x0
	b.eq	.LBB69_7
// %bb.8:                               // %"$11"
	ldp	w9, w8, [x21, #8]
	bfi	x9, x8, #32, #32
	adrp	x8, env
	str	x9, [x8, :lo12:env]
.LBB69_9:                               // %"$8"
	mov	sp, x29
	ldp	x20, x19, [sp, #32]             // 16-byte Folded Reload
	ldr	x21, [sp, #16]                  // 8-byte Folded Reload
	ldp	x29, x30, [sp], #48             // 16-byte Folded Reload
	ret
.Lfunc_end69:
	.size	_semicol, .Lfunc_end69-_semicol
	.cfi_endproc
                                        // -- End function
	.globl	_setCol                         // -- Begin function _setCol
	.p2align	4
	.type	_setCol,@function
_setCol:                                // @_setCol
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x30, x23, [sp, #-48]!           // 16-byte Folded Spill
	stp	x22, x21, [sp, #16]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #32]             // 16-byte Folded Spill
	.cfi_def_cfa_offset 48
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w30, -48
	mov	x19, x0
	ldp	w22, w8, [x0, #8]
	bfi	x22, x8, #32, #32
	adrp	x8, SymTab+424
	ldr	x20, [x8, :lo12:SymTab+424]
.LBB70_1:                               // %"$2"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w21, w8, [x22]
	bfi	x21, x8, #32, #32
	ldp	w22, w8, [x22, #8]
	bfi	x22, x8, #32, #32
	ldrb	w8, [x22, #8]
	tst	w8, #0xf
	b.ne	.LBB70_3
// %bb.2:                               // %"$3"
                                        //   in Loop: Header=BB70_1 Depth=1
	mov	x0, x19
	mov	x1, x20
	mov	x2, x21
	bl	getn
	mov	x20, x0
	b	.LBB70_1
.LBB70_3:                               // %"$4"
	tst	x20, #0x6
	b.ne	.LBB70_19
// %bb.4:                               // %"$6"
	ldp	w22, w8, [x22]
	bfi	x22, x8, #32, #32
	tst	x22, #0x6
	b.ne	.LBB70_7
// %bb.5:                               // %"$8"
	tbz	w22, #3, .LBB70_14
// %bb.6:                               // %"$11"
	ldp	w22, w8, [x22]
	bfi	x22, x8, #32, #32
.LBB70_7:                               // %"$7"
	tst	x20, #0xf
	b.eq	.LBB70_15
.LBB70_8:                               // %"$13"
	ldurb	w8, [x20, #-8]
	adrp	x23, SymTab+8
	add	x23, x23, :lo12:SymTab+8
	tbz	w8, #3, .LBB70_11
// %bb.9:                               // %"$15"
	mov	x0, x19
	mov	x1, x20
	cmp	x21, x23
	b.ne	.LBB70_16
// %bb.10:                              // %"$17"
	bl	dbFetch
.LBB70_11:                              // %"$16"
	cmp	x21, #2                         // =2
	b.ne	.LBB70_17
.LBB70_12:                              // %"$20"
	add	x8, x23, #208                   // =208
	cmp	x8, x20
	ccmp	x20, x23, #0, hs
	b.hs	.LBB70_20
// %bb.13:                              // %"$26"
	lsr	x8, x22, #32
	stp	w22, w8, [x20]
	b	.LBB70_18
.LBB70_14:                              // %"$10"
	mov	x0, x22
	bl	evList
	mov	x22, x0
	tst	x20, #0xf
	b.ne	.LBB70_8
.LBB70_15:                              // %"$12"
	mov	x0, x19
	mov	x1, x20
	mov	x2, x21
	mov	x3, x22
	bl	putn
	b	.LBB70_18
.LBB70_16:                              // %"$18"
	bl	dbTouch
	cmp	x21, #2                         // =2
	b.eq	.LBB70_12
.LBB70_17:                              // %"$21"
	mov	x0, x20
	mov	x1, x21
	mov	x2, x22
	bl	put
.LBB70_18:                              // %"$14"
	mov	x0, x22
	ldp	x20, x19, [sp, #32]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #16]             // 16-byte Folded Reload
	ldp	x30, x23, [sp], #48             // 16-byte Folded Reload
	ret
.LBB70_19:                              // %"$5"
	mov	x0, x19
	mov	x1, x20
	bl	argErr
.LBB70_20:                              // %"$25"
	mov	x0, x19
	mov	x1, x20
	bl	protErr
.Lfunc_end70:
	.size	_setCol, .Lfunc_end70-_setCol
	.cfi_endproc
                                        // -- End function
	.globl	_col                            // -- Begin function _col
	.p2align	4
	.type	_col,@function
_col:                                   // @_col
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-32]!                // 8-byte Folded Spill
	stp	x20, x19, [sp, #16]             // 16-byte Folded Spill
	.cfi_def_cfa_offset 32
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w30, -32
	mov	x19, x0
	ldp	w20, w8, [x0, #8]
	bfi	x20, x8, #32, #32
	adrp	x8, SymTab+424
	ldr	x1, [x8, :lo12:SymTab+424]
.LBB71_1:                               // %"$2"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w2, w8, [x20]
	bfi	x2, x8, #32, #32
	ldp	w20, w8, [x20, #8]
	bfi	x20, x8, #32, #32
	mov	x0, x19
	bl	getn
	mov	x1, x0
	tst	x20, #0xf
	b.eq	.LBB71_1
// %bb.2:                               // %"$4"
	mov	x0, x1
	ldp	x20, x19, [sp, #16]             // 16-byte Folded Reload
	ldr	x30, [sp], #32                  // 8-byte Folded Reload
	ret
.Lfunc_end71:
	.size	_col, .Lfunc_end71-_col
	.cfi_endproc
                                        // -- End function
	.globl	_propCol                        // -- Begin function _propCol
	.p2align	4
	.type	_propCol,@function
_propCol:                               // @_propCol
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-48]!                // 8-byte Folded Spill
	stp	x22, x21, [sp, #16]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #32]             // 16-byte Folded Spill
	.cfi_def_cfa_offset 48
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w30, -48
	mov	x19, x0
	ldp	w22, w8, [x0, #8]
	bfi	x22, x8, #32, #32
	adrp	x8, SymTab+424
	ldr	x20, [x8, :lo12:SymTab+424]
.LBB72_1:                               // %"$2"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w21, w8, [x22]
	bfi	x21, x8, #32, #32
	ldp	w22, w8, [x22, #8]
	bfi	x22, x8, #32, #32
	tst	x22, #0xf
	b.ne	.LBB72_3
// %bb.2:                               // %"$3"
                                        //   in Loop: Header=BB72_1 Depth=1
	mov	x0, x19
	mov	x1, x20
	mov	x2, x21
	bl	getn
	mov	x20, x0
	b	.LBB72_1
.LBB72_3:                               // %"$4"
	eor	w8, w20, #0x8
	tst	x8, #0xe
	b.ne	.LBB72_9
// %bb.4:                               // %"$6"
	ldurb	w8, [x20, #-8]
	tbz	w8, #3, .LBB72_8
// %bb.5:                               // %"$7"
	adrp	x8, SymTab+8
	add	x8, x8, :lo12:SymTab+8
	mov	x0, x19
	mov	x1, x20
	cmp	x21, x8
	b.ne	.LBB72_7
// %bb.6:                               // %"$9"
	bl	dbFetch
	b	.LBB72_8
.LBB72_7:                               // %"$10"
	bl	dbTouch
.LBB72_8:                               // %"$8"
	mov	x0, x20
	mov	x1, x21
	bl	prop
	ldp	x20, x19, [sp, #32]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #16]             // 16-byte Folded Reload
	ldr	x30, [sp], #48                  // 8-byte Folded Reload
	ret
.LBB72_9:                               // %"$5"
	mov	x0, x19
	mov	x1, x20
	bl	symErr
.Lfunc_end72:
	.size	_propCol, .Lfunc_end72-_propCol
	.cfi_endproc
                                        // -- End function
	.globl	_putl                           // -- Begin function _putl
	.p2align	4
	.type	_putl,@function
_putl:                                  // @_putl
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-80]!           // 16-byte Folded Spill
	stp	x26, x25, [sp, #16]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #32]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #48]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #64]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 80
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w30, -72
	.cfi_offset w29, -80
	mov	x21, x0
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w19, w8, [x9]
	bfi	x19, x8, #32, #32
	ldp	w23, w8, [x9, #8]
	bfi	x23, x8, #32, #32
	tst	x19, #0x6
	b.ne	.LBB73_4
// %bb.1:                               // %"$3"
	tbz	w19, #3, .LBB73_3
// %bb.2:                               // %"$6"
	ldp	w19, w8, [x19]
	bfi	x19, x8, #32, #32
	b	.LBB73_4
.LBB73_3:                               // %"$5"
	mov	x0, x19
	bl	evList
	mov	x19, x0
.LBB73_4:                               // %"$2"
	adrp	x8, env
	add	x8, x8, :lo12:env
	ldr	x9, [x8]
	mov	x10, sp
	sub	x22, x10, #16                   // =16
	mov	sp, x22
	lsr	x11, x19, #32
	lsr	x12, x9, #32
	stp	w19, w11, [x10, #-16]
	mov	x0, x22
	stp	w9, w12, [x10, #-8]
.LBB73_5:                               // %"$7"
                                        // =>This Inner Loop Header: Depth=1
	lsr	x9, x0, #32
	stp	w0, w9, [x8]
	ldp	w20, w8, [x23]
	bfi	x20, x8, #32, #32
	ldp	w23, w8, [x23, #8]
	bfi	x23, x8, #32, #32
	tst	x20, #0x6
	b.ne	.LBB73_8
// %bb.6:                               // %"$9"
                                        //   in Loop: Header=BB73_5 Depth=1
	tbz	w20, #3, .LBB73_10
// %bb.7:                               // %"$12"
                                        //   in Loop: Header=BB73_5 Depth=1
	ldp	w20, w8, [x20]
	bfi	x20, x8, #32, #32
.LBB73_8:                               // %"$8"
                                        //   in Loop: Header=BB73_5 Depth=1
	tst	x23, #0xf
	b.ne	.LBB73_11
.LBB73_9:                               // %"$13"
                                        //   in Loop: Header=BB73_5 Depth=1
	mov	x0, x21
	mov	x1, x19
	mov	x2, x20
	bl	getn
	mov	x8, x22
	mov	x19, x0
	b	.LBB73_5
.LBB73_10:                              // %"$11"
                                        //   in Loop: Header=BB73_5 Depth=1
	mov	x0, x20
	bl	evList
	mov	x20, x0
	tst	x23, #0xf
	b.eq	.LBB73_9
.LBB73_11:                              // %"$14"
	adrp	x23, env
	ldr	x8, [x23, :lo12:env]
	mov	x9, sp
	sub	x10, x9, #16                    // =16
	mov	sp, x10
	lsr	x11, x20, #32
	stp	w20, w11, [x9, #-16]
	lsr	x11, x8, #32
	stp	w8, w11, [x9, #-8]
	eor	w8, w19, #0x8
	tst	x8, #0xe
	str	x10, [x23, :lo12:env]
	b.ne	.LBB73_24
// %bb.12:                              // %"$16"
	ldp	w24, w8, [x19, #-8]
	bfi	x24, x8, #32, #32
	mov	x1, x24
	tbz	w24, #3, .LBB73_15
// %bb.13:                              // %"$17"
	mov	x0, x21
	mov	x1, x19
	bl	dbTouch
	ldp	w9, w8, [x19, #-8]
	bfi	x9, x8, #32, #32
	and	x1, x9, #0xfffffffffffffff7
	b	.LBB73_15
.LBB73_14:                              // %"$20"
                                        //   in Loop: Header=BB73_15 Depth=1
	ldp	w1, w8, [x1, #8]
	bfi	x1, x8, #32, #32
.LBB73_15:                              // %"$19"
                                        // =>This Inner Loop Header: Depth=1
	tst	x1, #0x6
	b.eq	.LBB73_14
// %bb.16:
	adrp	x21, SymTab+8
	add	x21, x21, :lo12:SymTab+8
	mov	x25, x20
	adrp	x26, SymTab+216
	add	x26, x26, :lo12:SymTab+216
	b	.LBB73_18
.LBB73_17:                              // %"$25"
                                        //   in Loop: Header=BB73_18 Depth=1
	bl	cons
	mov	x1, x0
.LBB73_18:                              // %"$22"
                                        // =>This Inner Loop Header: Depth=1
	tst	x25, #0xf
	b.ne	.LBB73_23
// %bb.19:                              // %"$23"
                                        //   in Loop: Header=BB73_18 Depth=1
	ldp	w0, w8, [x25]
	bfi	x0, x8, #32, #32
	ldp	w25, w8, [x25, #8]
	bfi	x25, x8, #32, #32
	tst	x0, #0xf
	b.ne	.LBB73_17
// %bb.20:                              // %"$26"
                                        //   in Loop: Header=BB73_18 Depth=1
	ldp	w9, w8, [x0]
	bfi	x9, x8, #32, #32
	cmp	x9, x21
	b.eq	.LBB73_18
// %bb.21:                              // %"$28"
                                        //   in Loop: Header=BB73_18 Depth=1
	ldp	w9, w8, [x0]
	bfi	x9, x8, #32, #32
	cmp	x9, x26
	b.ne	.LBB73_17
// %bb.22:                              // %"$30"
                                        //   in Loop: Header=BB73_18 Depth=1
	ldp	w0, w8, [x0, #8]
	bfi	x0, x8, #32, #32
	b	.LBB73_17
.LBB73_23:                              // %"$24"
	orr	x8, x1, #0x8
	tst	w24, #0x8
	csel	x8, x1, x8, eq
	lsr	x9, x8, #32
	stp	w8, w9, [x19, #-8]
	ldp	w9, w8, [x22, #8]
	bfi	x9, x8, #32, #32
	str	x9, [x23, :lo12:env]
	mov	x0, x20
	mov	sp, x29
	ldp	x20, x19, [sp, #64]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #48]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #32]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #80             // 16-byte Folded Reload
	ret
.LBB73_24:                              // %"$15"
	mov	x0, x21
	mov	x1, x19
	bl	symErr
.Lfunc_end73:
	.size	_putl, .Lfunc_end73-_putl
	.cfi_endproc
                                        // -- End function
	.globl	_getl                           // -- Begin function _getl
	.p2align	4
	.type	_getl,@function
_getl:                                  // @_getl
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-64]!           // 16-byte Folded Spill
	stp	x24, x23, [sp, #16]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #32]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #48]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 64
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w30, -56
	.cfi_offset w29, -64
	mov	x19, x0
	ldp	w22, w8, [x0, #8]
	bfi	x22, x8, #32, #32
	ldp	w20, w8, [x22]
	bfi	x20, x8, #32, #32
	tst	x20, #0x6
	b.ne	.LBB74_4
// %bb.1:                               // %"$3"
	tbz	w20, #3, .LBB74_3
// %bb.2:                               // %"$6"
	ldp	w20, w8, [x20]
	bfi	x20, x8, #32, #32
	b	.LBB74_4
.LBB74_3:                               // %"$5"
	mov	x0, x20
	bl	evList
	mov	x20, x0
.LBB74_4:                               // %"$2"
	adrp	x8, env
	add	x8, x8, :lo12:env
	ldr	x9, [x8]
	mov	x10, sp
	sub	x21, x10, #16                   // =16
	mov	sp, x21
	lsr	x11, x20, #32
	lsr	x12, x9, #32
	stp	w20, w11, [x10, #-16]
	mov	x0, x21
	stp	w9, w12, [x10, #-8]
	b	.LBB74_7
.LBB74_5:                               // %"$13"
                                        //   in Loop: Header=BB74_7 Depth=1
	mov	x0, x2
	bl	evList
	mov	x2, x0
.LBB74_6:                               // %"$10"
                                        //   in Loop: Header=BB74_7 Depth=1
	mov	x0, x19
	mov	x1, x20
	bl	getn
	mov	x8, x21
	mov	x20, x0
.LBB74_7:                               // %"$7"
                                        // =>This Inner Loop Header: Depth=1
	lsr	x9, x0, #32
	stp	w0, w9, [x8]
	ldp	w22, w8, [x22, #8]
	bfi	x22, x8, #32, #32
	tst	x22, #0xf
	b.ne	.LBB74_11
// %bb.8:                               // %"$8"
                                        //   in Loop: Header=BB74_7 Depth=1
	ldp	w2, w8, [x22]
	bfi	x2, x8, #32, #32
	tst	x2, #0x6
	b.ne	.LBB74_6
// %bb.9:                               // %"$11"
                                        //   in Loop: Header=BB74_7 Depth=1
	tbz	w2, #3, .LBB74_5
// %bb.10:                              // %"$14"
                                        //   in Loop: Header=BB74_7 Depth=1
	ldp	w2, w8, [x2]
	bfi	x2, x8, #32, #32
	b	.LBB74_6
.LBB74_11:                              // %"$9"
	eor	w8, w20, #0x8
	tst	x8, #0xe
	b.ne	.LBB74_20
// %bb.12:                              // %"$16"
	ldp	w23, w8, [x20, #-8]
	bfi	x23, x8, #32, #32
	tbz	w23, #3, .LBB74_14
// %bb.13:                              // %"$17"
	mov	x0, x19
	mov	x1, x20
	bl	dbFetch
	ldp	w9, w8, [x20, #-8]
	bfi	x9, x8, #32, #32
	and	x23, x9, #0xfffffffffffffff7
.LBB74_14:                              // %"$18"
	tst	x23, #0x6
	adrp	x22, env
	b.eq	.LBB74_17
// %bb.15:
	adrp	x19, SymTab+8
	add	x19, x19, :lo12:SymTab+8
.LBB74_16:                              // %"$21"
	ldp	w9, w8, [x21, #8]
	bfi	x9, x8, #32, #32
	str	x9, [x22, :lo12:env]
	mov	x0, x19
	mov	sp, x29
	ldp	x20, x19, [sp, #48]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #32]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #64             // 16-byte Folded Reload
	ret
.LBB74_17:                              // %"$20"
	ldp	w0, w8, [x23]
	bfi	x0, x8, #32, #32
	adrp	x20, SymTab+8
	add	x20, x20, :lo12:SymTab+8
	mov	x1, x20
	bl	cons
	mov	x19, x0
	mov	x8, sp
	sub	x9, x8, #16                     // =16
	mov	sp, x9
	lsr	x10, x0, #32
	stp	w19, w10, [x8, #-16]
	ldr	x10, [x22, :lo12:env]
	lsr	x11, x10, #32
	stp	w10, w11, [x8, #-8]
	str	x9, [x22, :lo12:env]
.LBB74_18:                              // %"$22"
                                        // =>This Inner Loop Header: Depth=1
	mov	x24, x0
	ldp	w23, w8, [x23, #8]
	bfi	x23, x8, #32, #32
	tst	x23, #0xf
	b.ne	.LBB74_16
// %bb.19:                              // %"$23"
                                        //   in Loop: Header=BB74_18 Depth=1
	ldp	w0, w8, [x23]
	bfi	x0, x8, #32, #32
	mov	x1, x20
	bl	cons
	lsr	x8, x0, #32
	stp	w0, w8, [x24, #8]
	b	.LBB74_18
.LBB74_20:                              // %"$15"
	mov	x0, x19
	mov	x1, x20
	bl	symErr
.Lfunc_end74:
	.size	_getl, .Lfunc_end74-_getl
	.cfi_endproc
                                        // -- End function
	.globl	_wipe                           // -- Begin function _wipe
	.p2align	4
	.type	_wipe,@function
_wipe:                                  // @_wipe
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x30, x21, [sp, #-32]!           // 16-byte Folded Spill
	stp	x20, x19, [sp, #16]             // 16-byte Folded Spill
	.cfi_def_cfa_offset 32
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w30, -32
	mov	x19, x0
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w20, w8, [x9]
	bfi	x20, x8, #32, #32
	tst	x20, #0x6
	b.ne	.LBB75_4
// %bb.1:                               // %"$3"
	tbz	w20, #3, .LBB75_3
// %bb.2:                               // %"$6"
	ldp	w20, w8, [x20]
	bfi	x20, x8, #32, #32
	b	.LBB75_4
.LBB75_3:                               // %"$5"
	mov	x0, x20
	bl	evList
	mov	x20, x0
.LBB75_4:                               // %"$2"
	adrp	x8, SymTab+8
	add	x8, x8, :lo12:SymTab+8
	cmp	x20, x8
	b.eq	.LBB75_9
// %bb.5:                               // %"$7"
	tst	x20, #0xf
	b.eq	.LBB75_7
// %bb.6:                               // %"$9"
	mov	x0, x19
	mov	x1, x20
	bl	wipe
	b	.LBB75_9
.LBB75_7:
	mov	x21, x20
.LBB75_8:                               // %"$12"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w1, w8, [x21]
	bfi	x1, x8, #32, #32
	ldp	w21, w8, [x21, #8]
	bfi	x21, x8, #32, #32
	mov	x0, x19
	bl	wipe
	tst	x21, #0xf
	b.eq	.LBB75_8
.LBB75_9:                               // %"$8"
	mov	x0, x20
	ldp	x20, x19, [sp, #16]             // 16-byte Folded Reload
	ldp	x30, x21, [sp], #32             // 16-byte Folded Reload
	ret
.Lfunc_end75:
	.size	_wipe, .Lfunc_end75-_wipe
	.cfi_endproc
                                        // -- End function
	.globl	_meta                           // -- Begin function _meta
	.p2align	4
	.type	_meta,@function
_meta:                                  // @_meta
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-64]!           // 16-byte Folded Spill
	stp	x24, x23, [sp, #16]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #32]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #48]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 64
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w30, -56
	.cfi_offset w29, -64
	mov	x19, x0
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w20, w8, [x9]
	bfi	x20, x8, #32, #32
	ldp	w21, w24, [x9, #8]
	tst	x20, #0x6
	b.ne	.LBB76_4
// %bb.1:                               // %"$3"
	tbz	w20, #3, .LBB76_3
// %bb.2:                               // %"$6"
	ldp	w20, w8, [x20]
	bfi	x20, x8, #32, #32
	b	.LBB76_4
.LBB76_3:                               // %"$5"
	mov	x0, x20
	bl	evList
	mov	x20, x0
.LBB76_4:                               // %"$2"
	adrp	x22, env
	ldr	x8, [x22, :lo12:env]
	mov	x9, sp
	sub	x23, x9, #16                    // =16
	mov	sp, x23
	lsr	x10, x20, #32
	lsr	x11, x8, #32
	stp	w20, w10, [x9, #-16]
	stp	w8, w11, [x9, #-8]
	tst	x20, #0x6
	str	x23, [x22, :lo12:env]
	b.ne	.LBB76_21
// %bb.5:                               // %"$8"
	bfi	x21, x24, #32, #32
	tbz	w20, #3, .LBB76_9
// %bb.6:                               // %"$9"
	ldurb	w8, [x20, #-8]
	tbz	w8, #3, .LBB76_8
// %bb.7:                               // %"$11"
	mov	x0, x19
	mov	x1, x20
	bl	dbFetch
.LBB76_8:                               // %"$12"
	ldp	w20, w8, [x20]
	bfi	x20, x8, #32, #32
.LBB76_9:                               // %"$10"
	ldp	w1, w8, [x21]
	bfi	x1, x8, #32, #32
	tst	x1, #0x6
	b.ne	.LBB76_13
// %bb.10:                              // %"$14"
	tbz	w1, #3, .LBB76_12
// %bb.11:                              // %"$17"
	ldp	w1, w8, [x1]
	bfi	x1, x8, #32, #32
	b	.LBB76_13
.LBB76_12:                              // %"$16"
	mov	x0, x1
	bl	evList
	mov	x1, x0
.LBB76_13:                              // %"$13"
	mov	x0, x20
	bl	meta
	b	.LBB76_16
.LBB76_14:                              // %"$24"
                                        //   in Loop: Header=BB76_16 Depth=1
	mov	x0, x2
	bl	evList
	mov	x2, x0
.LBB76_15:                              // %"$21"
                                        //   in Loop: Header=BB76_16 Depth=1
	mov	x0, x19
	mov	x1, x20
	bl	getn
.LBB76_16:                              // %"$18"
                                        // =>This Inner Loop Header: Depth=1
	mov	x20, x0
	ldp	w21, w8, [x21, #8]
	bfi	x21, x8, #32, #32
	tst	x21, #0xf
	b.ne	.LBB76_20
// %bb.17:                              // %"$19"
                                        //   in Loop: Header=BB76_16 Depth=1
	lsr	x8, x20, #32
	stp	w20, w8, [x23]
	ldp	w2, w8, [x21]
	bfi	x2, x8, #32, #32
	tst	x2, #0x6
	b.ne	.LBB76_15
// %bb.18:                              // %"$22"
                                        //   in Loop: Header=BB76_16 Depth=1
	tbz	w2, #3, .LBB76_14
// %bb.19:                              // %"$25"
                                        //   in Loop: Header=BB76_16 Depth=1
	ldp	w2, w8, [x2]
	bfi	x2, x8, #32, #32
	b	.LBB76_15
.LBB76_20:                              // %"$20"
	ldp	w9, w8, [x23, #8]
	bfi	x9, x8, #32, #32
	str	x9, [x22, :lo12:env]
	mov	x0, x20
	mov	sp, x29
	ldp	x20, x19, [sp, #48]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #32]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #64             // 16-byte Folded Reload
	ret
.LBB76_21:                              // %"$7"
	mov	x0, x19
	mov	x1, x20
	bl	argErr
.Lfunc_end76:
	.size	_meta, .Lfunc_end76-_meta
	.cfi_endproc
                                        // -- End function
	.globl	_lowQ                           // -- Begin function _lowQ
	.p2align	4
	.type	_lowQ,@function
_lowQ:                                  // @_lowQ
	.cfi_startproc
// %bb.0:                               // %"$1"
	adrp	x0, SymTab+8
	add	x0, x0, :lo12:SymTab+8
	ret
.Lfunc_end77:
	.size	_lowQ, .Lfunc_end77-_lowQ
	.cfi_endproc
                                        // -- End function
	.globl	_uppQ                           // -- Begin function _uppQ
	.p2align	4
	.type	_uppQ,@function
_uppQ:                                  // @_uppQ
	.cfi_startproc
// %bb.0:                               // %"$1"
	adrp	x0, SymTab+8
	add	x0, x0, :lo12:SymTab+8
	ret
.Lfunc_end78:
	.size	_uppQ, .Lfunc_end78-_uppQ
	.cfi_endproc
                                        // -- End function
	.globl	_lowc                           // -- Begin function _lowc
	.p2align	4
	.type	_lowc,@function
_lowc:                                  // @_lowc
	.cfi_startproc
// %bb.0:                               // %"$1"
	adrp	x0, SymTab+8
	add	x0, x0, :lo12:SymTab+8
	ret
.Lfunc_end79:
	.size	_lowc, .Lfunc_end79-_lowc
	.cfi_endproc
                                        // -- End function
	.globl	_uppc                           // -- Begin function _uppc
	.p2align	4
	.type	_uppc,@function
_uppc:                                  // @_uppc
	.cfi_startproc
// %bb.0:                               // %"$1"
	adrp	x0, SymTab+8
	add	x0, x0, :lo12:SymTab+8
	ret
.Lfunc_end80:
	.size	_uppc, .Lfunc_end80-_uppc
	.cfi_endproc
                                        // -- End function
	.globl	_fold                           // -- Begin function _fold
	.p2align	4
	.type	_fold,@function
_fold:                                  // @_fold
	.cfi_startproc
// %bb.0:                               // %"$1"
	adrp	x0, SymTab+8
	add	x0, x0, :lo12:SymTab+8
	ret
.Lfunc_end81:
	.size	_fold, .Lfunc_end81-_fold
	.cfi_endproc
                                        // -- End function
	.globl	_read                           // -- Begin function _read
	.p2align	4
	.type	_read,@function
_read:                                  // @_read
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-64]!           // 16-byte Folded Spill
	str	x23, [sp, #16]                  // 8-byte Folded Spill
	stp	x22, x21, [sp, #32]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #48]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 64
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -48
	.cfi_offset w30, -56
	.cfi_offset w29, -64
	ldp	w8, w9, [x0, #8]
	bfi	x8, x9, #32, #32
	tst	x8, #0xf
	b.eq	.LBB82_2
// %bb.1:                               // %"$2"
	mov	w0, wzr
	bl	read1
	b	.LBB82_15
.LBB82_2:                               // %"$3"
	mov	x19, x0
	ldp	w20, w9, [x8]
	bfi	x20, x9, #32, #32
	ldp	w23, w21, [x8, #8]
	tst	x20, #0x6
	b.ne	.LBB82_6
// %bb.3:                               // %"$6"
	tbz	w20, #3, .LBB82_5
// %bb.4:                               // %"$9"
	ldp	w20, w8, [x20]
	bfi	x20, x8, #32, #32
	b	.LBB82_6
.LBB82_5:                               // %"$8"
	mov	x0, x20
	bl	evList
	mov	x20, x0
.LBB82_6:                               // %"$5"
	eor	w8, w20, #0x8
	tst	x8, #0xe
	b.ne	.LBB82_19
// %bb.7:                               // %"$11"
	bfi	x23, x21, #32, #32
	adrp	x21, env
	ldr	x8, [x21, :lo12:env]
	mov	x9, sp
	sub	x22, x9, #16                    // =16
	mov	sp, x22
	lsr	x10, x20, #32
	stp	w20, w10, [x9, #-16]
	lsr	x10, x8, #32
	stp	w8, w10, [x9, #-8]
	str	x22, [x21, :lo12:env]
	ldp	w1, w8, [x23]
	bfi	x1, x8, #32, #32
	tst	x1, #0x6
	b.ne	.LBB82_11
// %bb.8:                               // %"$13"
	tbz	w1, #3, .LBB82_10
// %bb.9:                               // %"$16"
	ldp	w1, w8, [x1]
	bfi	x1, x8, #32, #32
	b	.LBB82_11
.LBB82_10:                              // %"$15"
	mov	x0, x1
	bl	evList
	mov	x1, x0
.LBB82_11:                              // %"$12"
	eor	w8, w1, #0x8
	tst	x8, #0xe
	b.ne	.LBB82_20
// %bb.12:                              // %"$18"
	mov	x0, x1
	bl	firstChar
	mov	w1, w0
	mov	x0, x20
	bl	token
	cbnz	x0, .LBB82_14
// %bb.13:                              // %"$20"
	adrp	x0, SymTab+8
	add	x0, x0, :lo12:SymTab+8
.LBB82_14:                              // %"$21"
	ldp	w9, w8, [x22, #8]
	bfi	x9, x8, #32, #32
	str	x9, [x21, :lo12:env]
.LBB82_15:                              // %"$4"
	adrp	x8, ($Chr)
	ldr	w9, [x8, :lo12:($Chr)]
	cmp	w9, #10                         // =10
	b.ne	.LBB82_18
// %bb.16:                              // %"$23"
	adrp	x9, ($InFile)
	ldr	x9, [x9, :lo12:($InFile)]
	adrp	x10, ($InFiles)
	ldr	x10, [x10, :lo12:($InFiles)]
	ldr	x10, [x10]
	cmp	x9, x10
	b.ne	.LBB82_18
// %bb.17:                              // %"$24"
	str	wzr, [x8, :lo12:($Chr)]
.LBB82_18:                              // %"$22"
	mov	sp, x29
	ldp	x20, x19, [sp, #48]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #32]             // 16-byte Folded Reload
	ldr	x23, [sp, #16]                  // 8-byte Folded Reload
	ldp	x29, x30, [sp], #64             // 16-byte Folded Reload
	ret
.LBB82_19:                              // %"$10"
	mov	x0, x19
	mov	x1, x20
	bl	symErr
.LBB82_20:                              // %"$17"
	mov	x0, x19
	bl	symErr
.Lfunc_end82:
	.size	_read, .Lfunc_end82-_read
	.cfi_endproc
                                        // -- End function
	.globl	_key                            // -- Begin function _key
	.p2align	4
	.type	_key,@function
_key:                                   // @_key
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-32]!                // 8-byte Folded Spill
	stp	x20, x19, [sp, #16]             // 16-byte Folded Spill
	.cfi_def_cfa_offset 32
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w30, -32
	bl	stdinByte
	cmp	w0, #128                        // =128
	b.lt	.LBB83_10
// %bb.1:                               // %"$3"
	cmp	w0, #255                        // =255
	b.ne	.LBB83_3
// %bb.2:
	mov	w0, #1114112
	b	.LBB83_10
.LBB83_3:                               // %"$5"
	tbz	w0, #5, .LBB83_6
// %bb.4:                               // %"$8"
	tbz	w0, #4, .LBB83_7
// %bb.5:                               // %"$11"
	and	w20, w0, #0x7
	bl	stdinByte
	and	w19, w0, #0x3f
	bfi	w19, w20, #6, #3
	b	.LBB83_8
.LBB83_6:                               // %"$7"
	and	w20, w0, #0x1f
	b	.LBB83_9
.LBB83_7:                               // %"$10"
	and	w19, w0, #0xf
.LBB83_8:                               // %"$12"
	bl	stdinByte
	and	w20, w0, #0x3f
	bfi	w20, w19, #6, #9
.LBB83_9:                               // %"$9"
	bl	stdinByte
	and	w0, w0, #0x3f
	bfi	w0, w20, #6, #15
.LBB83_10:                              // %"$2"
	bl	mkChar
	ldp	x20, x19, [sp, #16]             // 16-byte Folded Reload
	ldr	x30, [sp], #32                  // 8-byte Folded Reload
	ret
.Lfunc_end83:
	.size	_key, .Lfunc_end83-_key
	.cfi_endproc
                                        // -- End function
	.globl	_char                           // -- Begin function _char
	.p2align	4
	.type	_char,@function
_char:                                  // @_char
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-32]!                // 8-byte Folded Spill
	stp	x20, x19, [sp, #16]             // 16-byte Folded Spill
	.cfi_def_cfa_offset 32
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w30, -32
	ldp	w8, w9, [x0, #8]
	bfi	x8, x9, #32, #32
	tst	x8, #0xf
	b.eq	.LBB84_4
// %bb.1:                               // %"$4"
	adrp	x8, ($Chr)
	ldr	w0, [x8, :lo12:($Chr)]
	adrp	x20, ($Get)
	cbz	w0, .LBB84_10
// %bb.2:                               // %"$6"
	tbnz	w0, #31, .LBB84_11
.LBB84_3:                               // %"$8"
	bl	getChar
	bl	mkChar
	mov	x19, x0
	b	.LBB84_12
.LBB84_4:                               // %"$3"
	mov	x19, x0
	ldp	w1, w9, [x8]
	bfi	x1, x9, #32, #32
	tst	x1, #0x6
	b.ne	.LBB84_7
// %bb.5:                               // %"$11"
	tbz	w1, #3, .LBB84_13
// %bb.6:                               // %"$14"
	ldp	w1, w8, [x1]
	bfi	x1, x8, #32, #32
.LBB84_7:                               // %"$10"
	tbz	w1, #1, .LBB84_14
.LBB84_8:                               // %"$16"
	lsr	x0, x1, #4
	cbz	x0, .LBB84_19
// %bb.9:                               // %"$17"
                                        // kill: def $w0 killed $w0 killed $x0
	b	.LBB84_16
.LBB84_10:                              // %"$5"
	ldr	x8, [x20, :lo12:($Get)]
	blr	x8
	tbz	w0, #31, .LBB84_3
.LBB84_11:
	adrp	x19, SymTab+8
	add	x19, x19, :lo12:SymTab+8
.LBB84_12:                              // %"$9"
	ldr	x8, [x20, :lo12:($Get)]
	blr	x8
	b	.LBB84_20
.LBB84_13:                              // %"$13"
	mov	x0, x1
	bl	evList
	mov	x1, x0
	tbnz	w1, #1, .LBB84_8
.LBB84_14:                              // %"$15"
	adrp	x8, SymTab+216
	add	x8, x8, :lo12:SymTab+216
	cmp	x1, x8
	b.ne	.LBB84_17
// %bb.15:                              // %"$21"
	mov	w0, #1114112
.LBB84_16:                              // %"$2"
	bl	mkChar
	mov	x19, x0
	b	.LBB84_20
.LBB84_17:                              // %"$20"
	eor	w8, w1, #0x8
	tst	x8, #0xe
	b.ne	.LBB84_21
// %bb.18:                              // %"$23"
	mov	x0, x1
	bl	firstChar
                                        // kill: def $w0 killed $w0 def $x0
	sxtw	x8, w0
	mov	w19, #2
	bfi	x19, x8, #4, #60
	b	.LBB84_20
.LBB84_19:
	adrp	x19, SymTab+8
	add	x19, x19, :lo12:SymTab+8
.LBB84_20:                              // %"$2"
	mov	x0, x19
	ldp	x20, x19, [sp, #16]             // 16-byte Folded Reload
	ldr	x30, [sp], #32                  // 8-byte Folded Reload
	ret
.LBB84_21:                              // %"$22"
	mov	x0, x19
	bl	atomErr
.Lfunc_end84:
	.size	_char, .Lfunc_end84-_char
	.cfi_endproc
                                        // -- End function
	.globl	_skip                           // -- Begin function _skip
	.p2align	4
	.type	_skip,@function
_skip:                                  // @_skip
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	ldp	w0, w8, [x0, #8]
	bfi	x0, x8, #32, #32
	bl	evSym
	bl	firstChar
	bl	skipc
	tbnz	w0, #31, .LBB85_2
// %bb.1:                               // %"$3"
	bl	mkChar
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.LBB85_2:
	adrp	x0, SymTab+8
	add	x0, x0, :lo12:SymTab+8
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end85:
	.size	_skip, .Lfunc_end85-_skip
	.cfi_endproc
                                        // -- End function
	.globl	_eol                            // -- Begin function _eol
	.p2align	4
	.type	_eol,@function
_eol:                                   // @_eol
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	adrp	x8, ($Chr)
	ldr	w0, [x8, :lo12:($Chr)]
	cbnz	w0, .LBB86_2
// %bb.1:                               // %"$3"
	adrp	x8, ($Get)
	ldr	x8, [x8, :lo12:($Get)]
	blr	x8
.LBB86_2:                               // %"$4"
	cmp	w0, #10                         // =10
	ccmp	w0, #1, #8, ne
	adrp	x8, SymTab+8
	add	x8, x8, :lo12:SymTab+8
	add	x9, x8, #208                    // =208
	csel	x0, x9, x8, lt
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end86:
	.size	_eol, .Lfunc_end86-_eol
	.cfi_endproc
                                        // -- End function
	.globl	_eof                            // -- Begin function _eof
	.p2align	4
	.type	_eof,@function
_eof:                                   // @_eof
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x30, x19, [sp, #-16]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w19, -8
	.cfi_offset w30, -16
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w0, w8, [x9]
	bfi	x0, x8, #32, #32
	tst	x0, #0x6
	b.ne	.LBB87_4
// %bb.1:                               // %"$4"
	tbz	w0, #3, .LBB87_3
// %bb.2:                               // %"$7"
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB87_4
.LBB87_3:                               // %"$6"
	bl	evList
.LBB87_4:                               // %"$3"
	adrp	x19, SymTab+8
	add	x19, x19, :lo12:SymTab+8
	adrp	x8, ($Chr)
	cmp	x0, x19
	b.ne	.LBB87_7
// %bb.5:                               // %"$8"
	ldr	w8, [x8, :lo12:($Chr)]
	cbz	w8, .LBB87_8
// %bb.6:                               // %"$11"
	add	x9, x19, #208                   // =208
	cmp	w8, #0                          // =0
	csel	x0, x9, x19, lt
	ldp	x30, x19, [sp], #16             // 16-byte Folded Reload
	ret
.LBB87_7:                               // %"$9"
	mov	w9, #-1
	str	w9, [x8, :lo12:($Chr)]
	adrp	x0, SymTab+216
	add	x0, x0, :lo12:SymTab+216
	ldp	x30, x19, [sp], #16             // 16-byte Folded Reload
	ret
.LBB87_8:                               // %"$10"
	adrp	x8, ($Get)
	ldr	x8, [x8, :lo12:($Get)]
	blr	x8
	add	x8, x19, #208                   // =208
	cmp	w0, #0                          // =0
	csel	x0, x8, x19, lt
	ldp	x30, x19, [sp], #16             // 16-byte Folded Reload
	ret
.Lfunc_end87:
	.size	_eof, .Lfunc_end87-_eof
	.cfi_endproc
                                        // -- End function
	.globl	_from                           // -- Begin function _from
	.p2align	4
	.type	_from,@function
_from:                                  // @_from
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-80]!           // 16-byte Folded Spill
	stp	x26, x25, [sp, #16]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #32]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #48]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #64]             // 16-byte Folded Spill
	mov	x29, sp
	sub	sp, sp, #32                     // =32
	.cfi_def_cfa w29, 80
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w30, -72
	.cfi_offset w29, -80
	mov	x19, x0
	ldp	w20, w8, [x0, #8]
	bfi	x20, x8, #32, #32
	mov	x0, x20
	bl	evSym
	mov	x21, x0
	mov	x0, x19
	mov	x1, x21
	bl	xName
	mov	x22, x0
	bl	bufSize
	add	x8, x0, #15                     // =15
	and	x8, x8, #0xfffffffffffffff0
	mov	x9, sp
	sub	x1, x9, x8
	mov	sp, x1
	mov	x0, x22
	bl	bufString
	sub	x22, x29, #32                   // =32
	stp	xzr, x0, [x29, #-16]
	adrp	x23, env
	ldr	x8, [x23, :lo12:env]
	stp	x21, x8, [x29, #-32]
	str	x22, [x23, :lo12:env]
	mov	w24, #1
.LBB88_1:                               // %"$2"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w20, w8, [x20, #8]
	bfi	x20, x8, #32, #32
	tst	x20, #0xf
	b.ne	.LBB88_3
// %bb.2:                               // %"$3"
                                        //   in Loop: Header=BB88_1 Depth=1
	mov	x0, x20
	bl	evSym
	mov	x21, x0
	mov	x0, x19
	mov	x1, x21
	bl	xName
	mov	x22, x0
	bl	bufSize
	add	x8, x0, #15                     // =15
	and	x8, x8, #0xfffffffffffffff0
	mov	x9, sp
	sub	x1, x9, x8
	mov	sp, x1
	mov	x0, x22
	bl	bufString
	mov	x8, sp
	sub	x22, x8, #32                    // =32
	mov	sp, x22
	lsr	x9, x21, #32
	stp	w21, w9, [x8, #-32]
	stp	wzr, wzr, [x8, #-16]
	lsr	x9, x0, #32
	stp	w0, w9, [x8, #-8]
	ldr	x9, [x23, :lo12:env]
	lsr	x10, x9, #32
	stp	w9, w10, [x8, #-24]
	add	x24, x24, #1                    // =1
	str	x22, [x23, :lo12:env]
	b	.LBB88_1
.LBB88_3:                               // %"$4"
	adrp	x19, ($Chr)
	ldr	w8, [x19, :lo12:($Chr)]
	adrp	x20, ($Get)
	cbnz	w8, .LBB88_5
.LBB88_4:                               // %"$5"
	ldr	x8, [x20, :lo12:($Get)]
	blr	x8
.LBB88_5:                               // %"$7"
	ldr	w25, [x19, :lo12:($Chr)]
	tbnz	w25, #31, .LBB88_16
// %bb.6:                               // %"$8"
	mov	x21, x22
	mov	x26, x24
.LBB88_7:                               // %"$11"
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB88_9 Depth 2
	ldp	w9, w8, [x21, #24]
	bfi	x9, x8, #32, #32
	ldp	w10, w8, [x21, #16]
	bfi	x10, x8, #32, #32
	add	x8, x9, x10
	ldrb	w9, [x8]
	cmp	w9, w25, uxtb
	b.eq	.LBB88_11
// %bb.8:                               // %"$13"
                                        //   in Loop: Header=BB88_7 Depth=1
	ldp	w9, w8, [x21, #16]
	bfi	x9, x8, #32, #32
	cbz	x9, .LBB88_12
.LBB88_9:                               // %"$17"
                                        //   Parent Loop BB88_7 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	mov	x8, x21
	ldr	w9, [x8, #16]!
	ldr	w10, [x8, #4]
	bfi	x9, x10, #32, #32
	subs	x9, x9, #1                      // =1
	str	w9, [x8]
	lsr	x9, x9, #32
	str	w9, [x8, #4]
	b.eq	.LBB88_7
// %bb.10:                              // %"$18"
                                        //   in Loop: Header=BB88_9 Depth=2
	bl	memcmp
	cbnz	w0, .LBB88_9
	b	.LBB88_7
.LBB88_11:                              // %"$12"
                                        //   in Loop: Header=BB88_7 Depth=1
	mov	x9, x21
	ldr	w10, [x9, #16]!
	ldr	w11, [x9, #4]
	bfi	x10, x11, #32, #32
	add	x10, x10, #1                    // =1
	str	w10, [x9]
	lsr	x10, x10, #32
	str	w10, [x9, #4]
	ldrb	w8, [x8, #1]
	cbz	w8, .LBB88_14
.LBB88_12:                              // %"$15"
                                        //   in Loop: Header=BB88_7 Depth=1
	subs	x26, x26, #1                    // =1
	b.eq	.LBB88_4
// %bb.13:                              // %"$21"
                                        //   in Loop: Header=BB88_7 Depth=1
	ldp	w21, w8, [x21, #8]
	bfi	x21, x8, #32, #32
	b	.LBB88_7
.LBB88_14:                              // %"$14"
	ldr	x8, [x20, :lo12:($Get)]
	blr	x8
	ldur	x8, [x29, #-24]
	str	x8, [x23, :lo12:env]
	ldp	w0, w8, [x21]
	bfi	x0, x8, #32, #32
.LBB88_15:                              // %"$9"
	mov	sp, x29
	ldp	x20, x19, [sp, #64]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #48]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #32]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #80             // 16-byte Folded Reload
	ret
.LBB88_16:                              // %"$9"
	ldur	x8, [x29, #-24]
	str	x8, [x23, :lo12:env]
	adrp	x0, SymTab+8
	add	x0, x0, :lo12:SymTab+8
	b	.LBB88_15
.Lfunc_end88:
	.size	_from, .Lfunc_end88-_from
	.cfi_endproc
                                        // -- End function
	.globl	_till                           // -- Begin function _till
	.p2align	4
	.type	_till,@function
_till:                                  // @_till
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-80]!           // 16-byte Folded Spill
	stp	x26, x25, [sp, #16]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #32]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #48]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #64]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 80
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w30, -72
	.cfi_offset w29, -80
	mov	x19, x0
	ldp	w22, w8, [x0, #8]
	bfi	x22, x8, #32, #32
	mov	x0, x22
	bl	evSym
	mov	x1, x0
	mov	x0, x19
	bl	xName
	mov	x19, x0
	bl	bufSize
	add	x8, x0, #15                     // =15
	and	x8, x8, #0xfffffffffffffff0
	mov	x9, sp
	sub	x1, x9, x8
	mov	sp, x1
	mov	x0, x19
	bl	bufString
	mov	x19, x0
	adrp	x8, ($Chr)
	ldr	w21, [x8, :lo12:($Chr)]
	cbz	w21, .LBB89_3
// %bb.1:                               // %"$4"
	tbnz	w21, #31, .LBB89_4
.LBB89_2:                               // %"$7"
	mov	x0, x19
	mov	w1, w21
	bl	strchr2
	cmp	x0, #0                          // =0
	cset	w8, ne
	b	.LBB89_5
.LBB89_3:                               // %"$3"
	adrp	x8, ($Get)
	ldr	x8, [x8, :lo12:($Get)]
	blr	x8
	mov	w21, w0
	tbz	w21, #31, .LBB89_2
.LBB89_4:
	mov	w8, #1
.LBB89_5:                               // %"$6"
	adrp	x20, SymTab+8
	add	x20, x20, :lo12:SymTab+8
	tbnz	w8, #0, .LBB89_21
// %bb.6:                               // %"$8"
	ldp	w9, w8, [x22, #8]
	bfi	x9, x8, #32, #32
	ldp	w0, w8, [x9]
	bfi	x0, x8, #32, #32
	tst	x0, #0x6
	b.ne	.LBB89_10
// %bb.7:                               // %"$11"
	tbz	w0, #3, .LBB89_9
// %bb.8:                               // %"$14"
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB89_10
.LBB89_9:                               // %"$13"
	bl	evList
.LBB89_10:                              // %"$10"
	cmp	x0, x20
	adrp	x23, env
	b.ne	.LBB89_16
// %bb.11:                              // %"$16"
	mov	w0, w21
	bl	getChar
	bl	mkChar
	adrp	x21, SymTab+8
	add	x21, x21, :lo12:SymTab+8
	mov	x1, x21
	bl	cons
	mov	x20, x0
	ldr	x8, [x23, :lo12:env]
	mov	x9, sp
	sub	x24, x9, #16                    // =16
	mov	sp, x24
	lsr	x10, x0, #32
	lsr	x11, x8, #32
	stp	w20, w10, [x9, #-16]
	stp	w8, w11, [x9, #-8]
	adrp	x25, ($Get)
	mov	x26, x0
	str	x24, [x23, :lo12:env]
.LBB89_12:                              // %"$17"
                                        // =>This Inner Loop Header: Depth=1
	ldr	x8, [x25, :lo12:($Get)]
	blr	x8
	mov	w22, w0
	cmp	w0, #1                          // =1
	b.ge	.LBB89_14
// %bb.13:                              //   in Loop: Header=BB89_12 Depth=1
	mov	w8, #1
	tbz	w8, #0, .LBB89_15
	b	.LBB89_20
.LBB89_14:                              // %"$19"
                                        //   in Loop: Header=BB89_12 Depth=1
	mov	x0, x19
	mov	w1, w22
	bl	strchr2
	cmp	x0, #0                          // =0
	cset	w8, ne
	tbnz	w8, #0, .LBB89_20
.LBB89_15:                              // %"$20"
                                        //   in Loop: Header=BB89_12 Depth=1
	mov	w0, w22
	bl	mkChar
	mov	x1, x21
	bl	cons
	lsr	x8, x0, #32
	stp	w0, w8, [x26, #8]
	mov	x26, x0
	b	.LBB89_12
.LBB89_16:                              // %"$15"
	mov	x8, sp
	sub	x20, x8, #32                    // =32
	mov	sp, x20
	mov	w9, #4
	stp	w9, wzr, [x8, #-32]
	stur	wzr, [x8, #-12]
	mov	w9, #2
	mov	x24, x20
	str	w9, [x24, #16]!
	ldr	x9, [x23, :lo12:env]
	lsr	x10, x9, #32
	stp	w9, w10, [x8, #-8]
	adrp	x22, ($Get)
	str	x24, [x23, :lo12:env]
.LBB89_17:                              // %"$22"
                                        // =>This Inner Loop Header: Depth=1
	mov	w0, w21
	bl	getChar
	mov	x1, x20
	bl	charSym
	ldr	x8, [x22, :lo12:($Get)]
	blr	x8
	cmp	w0, #1                          // =1
	b.lt	.LBB89_19
// %bb.18:                              // %"$23"
                                        //   in Loop: Header=BB89_17 Depth=1
	mov	w21, w0
	mov	x0, x19
	mov	w1, w21
	bl	strchr2
	cbz	x0, .LBB89_17
.LBB89_19:                              // %"$24"
	ldp	w0, w8, [x20, #16]
	bfi	x0, x8, #32, #32
	bl	consStr
	mov	x20, x0
.LBB89_20:                              // %"$5.sink.split"
	ldp	w9, w8, [x24, #8]
	bfi	x9, x8, #32, #32
	str	x9, [x23, :lo12:env]
.LBB89_21:                              // %"$5"
	mov	x0, x20
	mov	sp, x29
	ldp	x20, x19, [sp, #64]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #48]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #32]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #80             // 16-byte Folded Reload
	ret
.Lfunc_end89:
	.size	_till, .Lfunc_end89-_till
	.cfi_endproc
                                        // -- End function
	.globl	_line                           // -- Begin function _line
	.p2align	4
	.type	_line,@function
_line:                                  // @_line
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-96]!           // 16-byte Folded Spill
	stp	x28, x27, [sp, #16]             // 16-byte Folded Spill
	stp	x26, x25, [sp, #32]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #48]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #64]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #80]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	mov	x20, x0
	adrp	x8, ($Chr)
	ldr	w22, [x8, :lo12:($Chr)]
	cbnz	w22, .LBB90_2
// %bb.1:                               // %"$2"
	adrp	x8, ($Get)
	ldr	x8, [x8, :lo12:($Get)]
	blr	x8
	mov	w22, w0
.LBB90_2:                               // %"$3"
	mov	w0, w22
	bl	eol
	adrp	x19, SymTab+8
	add	x19, x19, :lo12:SymTab+8
	tbnz	w0, #0, .LBB90_17
// %bb.3:                               // %"$5"
	ldp	w9, w8, [x20, #8]
	bfi	x9, x8, #32, #32
	ldp	w0, w8, [x9]
	bfi	x0, x8, #32, #32
	ldp	w21, w8, [x9, #8]
	bfi	x21, x8, #32, #32
	tst	x0, #0x6
	b.ne	.LBB90_6
// %bb.4:                               // %"$9"
	tbz	w0, #3, .LBB90_11
// %bb.5:                               // %"$12"
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
.LBB90_6:                               // %"$8"
	cmp	x0, x19
	b.ne	.LBB90_12
.LBB90_7:                               // %"$14"
	mov	w0, w22
	bl	getChar
	bl	mkChar
	adrp	x1, SymTab+8
	add	x1, x1, :lo12:SymTab+8
	bl	cons
	mov	x19, x0
	adrp	x12, env
	ldr	x8, [x12, :lo12:env]
	mov	x9, sp
	sub	x26, x9, #16                    // =16
	mov	sp, x26
	lsr	x10, x0, #32
	lsr	x11, x8, #32
	stp	w19, w10, [x9, #-16]
	stp	w8, w11, [x9, #-8]
	tst	x21, #0xf
	mov	x27, x0
	str	x26, [x12, :lo12:env]
	b.eq	.LBB90_19
.LBB90_8:                               // %"$27.preheader"
	adrp	x22, ($Get)
	adrp	x20, SymTab+8
	add	x20, x20, :lo12:SymTab+8
.LBB90_9:                               // %"$27"
                                        // =>This Inner Loop Header: Depth=1
	ldr	x8, [x22, :lo12:($Get)]
	blr	x8
	mov	w21, w0
	bl	eol
	tbnz	w0, #0, .LBB90_16
// %bb.10:                              // %"$28"
                                        //   in Loop: Header=BB90_9 Depth=1
	mov	w0, w21
	bl	getChar
	bl	mkChar
	mov	x1, x20
	bl	cons
	lsr	x8, x0, #32
	stp	w0, w8, [x27, #8]
	mov	x27, x0
	b	.LBB90_9
.LBB90_11:                              // %"$11"
	bl	evList
	cmp	x0, x19
	b.eq	.LBB90_7
.LBB90_12:                              // %"$13"
	tst	x21, #0xf
	b.eq	.LBB90_26
// %bb.13:                              // %"$31"
	mov	x8, sp
	sub	x19, x8, #32                    // =32
	mov	sp, x19
	mov	w9, #4
	stp	w9, wzr, [x8, #-32]
	mov	w9, #2
	mov	x26, x19
	str	w9, [x26, #16]!
	stur	wzr, [x8, #-12]
	adrp	x9, env
	ldr	x10, [x9, :lo12:env]
	lsr	x11, x10, #32
	stp	w10, w11, [x8, #-8]
	str	x26, [x9, :lo12:env]
	adrp	x20, ($Get)
.LBB90_14:                              // %"$32"
                                        // =>This Inner Loop Header: Depth=1
	mov	w0, w22
	bl	getChar
	mov	x1, x19
	bl	charSym
	ldr	x8, [x20, :lo12:($Get)]
	blr	x8
	mov	w22, w0
	bl	eol
	tbz	w0, #0, .LBB90_14
// %bb.15:                              // %"$34"
	ldp	w0, w8, [x19, #16]
	bfi	x0, x8, #32, #32
	bl	consStr
	mov	x19, x0
.LBB90_16:                              // %"$7"
	ldp	w9, w8, [x26, #8]
	bfi	x9, x8, #32, #32
	adrp	x8, env
	str	x9, [x8, :lo12:env]
.LBB90_17:                              // %"$6"
	mov	x0, x19
.LBB90_18:                              // %"$6"
	mov	sp, x29
	ldp	x20, x19, [sp, #80]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #64]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #48]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #32]             // 16-byte Folded Reload
	ldp	x28, x27, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #96             // 16-byte Folded Reload
	ret
.LBB90_19:                              // %"$15"
	ldp	w0, w8, [x19]
	bfi	x0, x8, #32, #32
	adrp	x22, SymTab+8
	add	x22, x22, :lo12:SymTab+8
	mov	x1, x22
	bl	cons
	mov	x23, x0
	lsr	x8, x0, #32
	stp	w23, w8, [x19]
	adrp	x28, ($Get)
	mov	x27, x19
.LBB90_20:                              // %"$17"
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB90_21 Depth 2
	mov	x0, x20
	mov	x1, x21
	bl	evCnt
	sub	x25, x0, #1                     // =1
	subs	x25, x25, #1                    // =1
	b.lt	.LBB90_23
.LBB90_21:                              // %"$19"
                                        //   Parent Loop BB90_20 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	x8, [x28, :lo12:($Get)]
	blr	x8
	mov	w24, w0
	bl	eol
	tbnz	w0, #0, .LBB90_16
// %bb.22:                              // %"$22"
                                        //   in Loop: Header=BB90_21 Depth=2
	mov	w0, w24
	bl	getChar
	bl	mkChar
	mov	x1, x22
	bl	cons
	lsr	x8, x0, #32
	stp	w0, w8, [x23, #8]
	mov	x23, x0
	subs	x25, x25, #1                    // =1
	b.ge	.LBB90_21
.LBB90_23:                              // %"$20"
                                        //   in Loop: Header=BB90_20 Depth=1
	ldp	w21, w8, [x21, #8]
	bfi	x21, x8, #32, #32
	tst	x21, #0xf
	b.ne	.LBB90_8
// %bb.24:                              // %"$23"
                                        //   in Loop: Header=BB90_20 Depth=1
	ldr	x8, [x28, :lo12:($Get)]
	blr	x8
	mov	w23, w0
	bl	eol
	tbnz	w0, #0, .LBB90_16
// %bb.25:                              // %"$26"
                                        //   in Loop: Header=BB90_20 Depth=1
	mov	w0, w23
	bl	getChar
	bl	mkChar
	mov	x1, x22
	bl	cons
	mov	x23, x0
	mov	x1, x22
	bl	cons
	lsr	x8, x0, #32
	stp	w0, w8, [x27, #8]
	mov	x27, x0
	b	.LBB90_20
.LBB90_26:                              // %"$30"
	mov	x0, x20
	mov	x1, x21
	bl	evCnt
	mov	x19, x0
	mov	x8, sp
	sub	x23, x8, #32                    // =32
	mov	sp, x23
	mov	w9, #4
	stp	w9, wzr, [x8, #-32]
	mov	w9, #2
	mov	x26, x23
	str	w9, [x26, #16]!
	stur	wzr, [x8, #-12]
	adrp	x27, env
	ldr	x9, [x27, :lo12:env]
	lsr	x10, x9, #32
	stp	w9, w10, [x8, #-8]
	str	x26, [x27, :lo12:env]
	adrp	x28, ($Get)
.LBB90_27:                              // %"$35"
                                        // =>This Inner Loop Header: Depth=1
	mov	w0, w22
	bl	getChar
	mov	x1, x23
	bl	charSym
	ldr	x8, [x28, :lo12:($Get)]
	blr	x8
	mov	w22, w0
	bl	eol
	tbnz	w0, #0, .LBB90_35
// %bb.28:                              // %"$37"
                                        //   in Loop: Header=BB90_27 Depth=1
	subs	x19, x19, #1                    // =1
	b.ne	.LBB90_27
// %bb.29:                              // %"$39"
	ldp	w0, w8, [x26]
	bfi	x0, x8, #32, #32
	bl	consStr
	adrp	x1, SymTab+8
	add	x1, x1, :lo12:SymTab+8
	bl	cons
	mov	x19, x0
	ldr	x8, [x27, :lo12:env]
	mov	x9, sp
	sub	x10, x9, #16                    // =16
	mov	sp, x10
	lsr	x11, x0, #32
	lsr	x12, x8, #32
	stp	w19, w11, [x9, #-16]
	stp	w8, w12, [x9, #-8]
	mov	x24, x0
	str	x10, [x27, :lo12:env]
.LBB90_30:                              // %"$40"
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB90_32 Depth 2
	ldp	w21, w8, [x21, #8]
	bfi	x21, x8, #32, #32
	tst	x21, #0xf
	b.ne	.LBB90_37
// %bb.31:                              // %"$41"
                                        //   in Loop: Header=BB90_30 Depth=1
	mov	x0, x20
	mov	x1, x21
	bl	evCnt
	mov	x25, x0
	mov	w8, #4
	stp	w8, wzr, [x23]
	mov	w8, #2
	stp	w8, wzr, [x23, #16]
.LBB90_32:                              // %"$43"
                                        //   Parent Loop BB90_30 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	mov	w0, w22
	bl	getChar
	mov	x1, x23
	bl	charSym
	ldr	x8, [x28, :lo12:($Get)]
	blr	x8
	mov	w22, w0
	bl	eol
	tbnz	w0, #0, .LBB90_36
// %bb.33:                              // %"$45"
                                        //   in Loop: Header=BB90_32 Depth=2
	subs	x25, x25, #1                    // =1
	b.ne	.LBB90_32
// %bb.34:                              // %"$47"
                                        //   in Loop: Header=BB90_30 Depth=1
	ldp	w0, w8, [x26]
	bfi	x0, x8, #32, #32
	bl	consStr
	adrp	x1, SymTab+8
	add	x1, x1, :lo12:SymTab+8
	bl	cons
	lsr	x8, x0, #32
	stp	w0, w8, [x24, #8]
	mov	x24, x0
	b	.LBB90_30
.LBB90_35:                              // %"$36"
	ldp	w0, w8, [x26]
	bfi	x0, x8, #32, #32
	bl	consStr
	adrp	x1, SymTab+8
	add	x1, x1, :lo12:SymTab+8
	bl	cons
	ldp	w9, w8, [x26, #8]
	bfi	x9, x8, #32, #32
	str	x9, [x27, :lo12:env]
	b	.LBB90_18
.LBB90_36:                              // %"$44"
	ldp	w0, w8, [x26]
	bfi	x0, x8, #32, #32
	bl	consStr
	adrp	x1, SymTab+8
	add	x1, x1, :lo12:SymTab+8
	bl	cons
	lsr	x8, x0, #32
	stp	w0, w8, [x24, #8]
	ldp	w9, w8, [x26, #8]
	bfi	x9, x8, #32, #32
	str	x9, [x27, :lo12:env]
	b	.LBB90_17
.LBB90_37:
	adrp	x20, SymTab+8
	add	x20, x20, :lo12:SymTab+8
.LBB90_38:                              // %"$48"
                                        // =>This Inner Loop Header: Depth=1
	mov	w0, w22
	bl	getChar
	bl	mkChar
	mov	x1, x20
	bl	cons
	mov	x21, x0
	lsr	x8, x0, #32
	stp	w21, w8, [x24, #8]
	ldr	x8, [x28, :lo12:($Get)]
	blr	x8
	mov	w22, w0
	bl	eol
	mov	x24, x21
	tbz	w0, #0, .LBB90_38
	b	.LBB90_16
.Lfunc_end90:
	.size	_line, .Lfunc_end90-_line
	.cfi_endproc
                                        // -- End function
	.globl	_echo                           // -- Begin function _echo
	.p2align	4
	.type	_echo,@function
_echo:                                  // @_echo
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-96]!           // 16-byte Folded Spill
	stp	x28, x27, [sp, #16]             // 16-byte Folded Spill
	stp	x26, x25, [sp, #32]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #48]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #64]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #80]             // 16-byte Folded Spill
	mov	x29, sp
	sub	sp, sp, #16                     // =16
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	mov	x19, x0
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w21, w8, [x9]
	bfi	x21, x8, #32, #32
	ldp	w20, w8, [x9, #8]
	bfi	x20, x8, #32, #32
	tst	x21, #0x6
	b.ne	.LBB91_4
// %bb.1:                               // %"$3"
	tbz	w21, #3, .LBB91_3
// %bb.2:                               // %"$6"
	ldp	w21, w8, [x21]
	bfi	x21, x8, #32, #32
	b	.LBB91_4
.LBB91_3:                               // %"$5"
	mov	x0, x21
	bl	evList
	mov	x21, x0
.LBB91_4:                               // %"$2"
	adrp	x8, SymTab+8
	add	x8, x8, :lo12:SymTab+8
	tst	x20, #0xf
	cset	w9, ne
	cmp	x21, x8
	csel	w8, wzr, w9, ne
	cbz	w8, .LBB91_10
// %bb.5:                               // %"$11"
	adrp	x8, ($Chr)
	ldr	w0, [x8, :lo12:($Chr)]
	cbnz	w0, .LBB91_7
// %bb.6:                               // %"$13"
	adrp	x8, ($Get)
	ldr	x8, [x8, :lo12:($Get)]
	blr	x8
.LBB91_7:                               // %"$15.preheader"
	adrp	x20, ($Put)
	adrp	x21, ($Get)
	adrp	x19, SymTab+216
	add	x19, x19, :lo12:SymTab+216
	tbnz	w0, #31, .LBB91_9
.LBB91_8:                               // %"$16"
                                        // =>This Inner Loop Header: Depth=1
	ldr	x8, [x20, :lo12:($Put)]
	blr	x8
	ldr	x8, [x21, :lo12:($Get)]
	blr	x8
	tbz	w0, #31, .LBB91_8
.LBB91_9:                               // %"$7"
	mov	x0, x19
	b	.LBB91_66
.LBB91_10:                              // %"$10"
	tst	x21, #0x6
	b.eq	.LBB91_16
// %bb.11:                              // %"$19"
	mov	x0, x19
	mov	x1, x21
	bl	xCnt
	mov	x21, x0
	tst	x20, #0xf
	b.ne	.LBB91_62
// %bb.12:                              // %"$20"
	mov	x0, x19
	mov	x1, x20
	bl	evCnt
	mov	x19, x0
	adrp	x20, ($Get)
.LBB91_13:                              // %"$22"
                                        // =>This Inner Loop Header: Depth=1
	subs	x21, x21, #1                    // =1
	b.mi	.LBB91_61
// %bb.14:                              // %"$23"
                                        //   in Loop: Header=BB91_13 Depth=1
	ldr	x8, [x20, :lo12:($Get)]
	blr	x8
	tbz	w0, #31, .LBB91_13
.LBB91_15:                              // %"$25"
	adrp	x0, SymTab+8
	add	x0, x0, :lo12:SymTab+8
	b	.LBB91_66
.LBB91_16:                              // %"$18"
	tst	x21, #0xf
	b.eq	.LBB91_68
// %bb.17:                              // %"$32"
	mov	x26, xzr
	mov	x0, x19
	mov	x1, x21
	bl	xName
	mov	x22, x0
	bl	bufSize
	add	x8, x0, #15                     // =15
	and	x8, x8, #0xfffffffffffffff0
	mov	x9, sp
	sub	x1, x9, x8
	mov	sp, x1
	mov	x0, x22
	bl	bufString
	mov	x8, sp
	sub	x11, x8, #32                    // =32
	mov	sp, x11
	adrp	x24, env
	lsr	x9, x21, #32
	stp	wzr, wzr, [x8, #-16]
	stp	w21, w9, [x8, #-32]
	lsr	x9, x0, #32
	stp	w0, w9, [x8, #-8]
	ldr	x9, [x24, :lo12:env]
	lsr	x10, x9, #32
	stp	w9, w10, [x8, #-24]
	mov	w23, #1
	mov	x22, x11
	stur	x11, [x29, #-16]                // 8-byte Folded Spill
	str	x11, [x24, :lo12:env]
	tst	x20, #0xf
	b.ne	.LBB91_19
.LBB91_18:                              // %"$35"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w0, w8, [x20]
	bfi	x0, x8, #32, #32
	ldp	w20, w8, [x20, #8]
	bfi	x20, x8, #32, #32
	bl	evSym
	mov	x21, x0
	mov	x0, x19
	mov	x1, x21
	bl	xName
	mov	x22, x0
	bl	bufSize
	add	x8, x0, #15                     // =15
	and	x8, x8, #0xfffffffffffffff0
	mov	x9, sp
	sub	x1, x9, x8
	mov	sp, x1
	mov	x0, x22
	bl	bufString
	mov	x8, sp
	sub	x22, x8, #32                    // =32
	mov	sp, x22
	lsr	x9, x21, #32
	stp	w21, w9, [x8, #-32]
	stp	wzr, wzr, [x8, #-16]
	lsr	x9, x0, #32
	stp	w0, w9, [x8, #-8]
	ldr	x9, [x24, :lo12:env]
	lsr	x10, x9, #32
	stp	w9, w10, [x8, #-24]
	add	x23, x23, #1                    // =1
	str	x22, [x24, :lo12:env]
	tst	x20, #0xf
	b.eq	.LBB91_18
.LBB91_19:                              // %"$36"
	adrp	x8, ($Chr)
	ldr	w8, [x8, :lo12:($Chr)]
	cbnz	w8, .LBB91_21
// %bb.20:                              // %"$37"
	adrp	x8, ($Get)
	ldr	x8, [x8, :lo12:($Get)]
	blr	x8
.LBB91_21:                              // %"$39.preheader"
	adrp	x21, ($Put)
.LBB91_22:                              // %"$39"
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB91_27 Depth 2
                                        //       Child Loop BB91_33 Depth 3
                                        //       Child Loop BB91_37 Depth 3
                                        //     Child Loop BB91_51 Depth 2
                                        //     Child Loop BB91_54 Depth 2
	adrp	x8, ($Chr)
	ldr	w19, [x8, :lo12:($Chr)]
	tbnz	w19, #31, .LBB91_67
// %bb.23:                              // %"$40"
                                        //   in Loop: Header=BB91_22 Depth=1
	cbz	x26, .LBB91_25
// %bb.24:                              // %"$42"
                                        //   in Loop: Header=BB91_22 Depth=1
	ldp	w27, w8, [x26, #16]
	bfi	x27, x8, #32, #32
	b	.LBB91_26
.LBB91_25:                              //   in Loop: Header=BB91_22 Depth=1
	mov	x27, xzr
.LBB91_26:                              // %"$46.preheader"
                                        //   in Loop: Header=BB91_22 Depth=1
	stur	x26, [x29, #-8]                 // 8-byte Folded Spill
	mov	x28, x22
	mov	x25, x23
.LBB91_27:                              // %"$46"
                                        //   Parent Loop BB91_22 Depth=1
                                        // =>  This Loop Header: Depth=2
                                        //       Child Loop BB91_33 Depth 3
                                        //       Child Loop BB91_37 Depth 3
	ldp	w9, w8, [x28, #24]
	bfi	x9, x8, #32, #32
	ldp	w10, w8, [x28, #16]
	bfi	x10, x8, #32, #32
	add	x8, x9, x10
	ldrb	w9, [x8]
	cmp	w9, w19, uxtb
	b.ne	.LBB91_31
// %bb.28:                              // %"$47"
                                        //   in Loop: Header=BB91_27 Depth=2
	mov	x9, x28
	ldr	w10, [x9, #16]!
	ldr	w11, [x9, #4]
	bfi	x10, x11, #32, #32
	add	x10, x10, #1                    // =1
	str	w10, [x9]
	lsr	x10, x10, #32
	str	w10, [x9, #4]
	ldrb	w8, [x8, #1]
	cbz	w8, .LBB91_57
// %bb.29:                              // %"$51"
                                        //   in Loop: Header=BB91_27 Depth=2
	cbz	x26, .LBB91_44
// %bb.30:                              // %"$53"
                                        //   in Loop: Header=BB91_27 Depth=2
	ldp	w9, w8, [x26, #16]
	bfi	x9, x8, #32, #32
	ldp	w10, w8, [x28, #16]
	bfi	x10, x8, #32, #32
	cmp	x9, x10
	cset	w8, hs
	tbz	w8, #0, .LBB91_45
	b	.LBB91_46
.LBB91_31:                              // %"$48"
                                        //   in Loop: Header=BB91_27 Depth=2
	ldp	w9, w8, [x28, #16]
	bfi	x9, x8, #32, #32
	cbz	x9, .LBB91_46
// %bb.32:                              // %"$61"
                                        //   in Loop: Header=BB91_27 Depth=2
	ldp	w20, w8, [x28, #24]
	bfi	x20, x8, #32, #32
.LBB91_33:                              // %"$62"
                                        //   Parent Loop BB91_22 Depth=1
                                        //     Parent Loop BB91_27 Depth=2
                                        // =>    This Inner Loop Header: Depth=3
	mov	x8, x28
	ldr	w9, [x8, #16]!
	ldr	w10, [x8, #4]
	bfi	x9, x10, #32, #32
	subs	x9, x9, #1                      // =1
	str	w9, [x8]
	lsr	x9, x9, #32
	str	w9, [x8, #4]
	b.eq	.LBB91_35
// %bb.34:                              // %"$63"
                                        //   in Loop: Header=BB91_33 Depth=3
	bl	memcmp
	add	x20, x20, #1                    // =1
	cbnz	w0, .LBB91_33
.LBB91_35:                              // %"$64"
                                        //   in Loop: Header=BB91_27 Depth=2
	cmp	x28, x26
	b.ne	.LBB91_27
// %bb.36:                              // %"$66"
                                        //   in Loop: Header=BB91_27 Depth=2
	mov	x26, xzr
	mov	x8, x22
	mov	x9, x23
.LBB91_37:                              // %"$68"
                                        //   Parent Loop BB91_22 Depth=1
                                        //     Parent Loop BB91_27 Depth=2
                                        // =>    This Inner Loop Header: Depth=3
	ldp	w11, w10, [x8, #16]
	bfi	x11, x10, #32, #32
	cbz	x11, .LBB91_41
// %bb.38:                              // %"$69"
                                        //   in Loop: Header=BB91_37 Depth=3
	cbz	x26, .LBB91_43
// %bb.39:                              // %"$72"
                                        //   in Loop: Header=BB91_37 Depth=3
	ldp	w11, w10, [x26, #16]
	bfi	x11, x10, #32, #32
	ldp	w12, w10, [x8, #16]
	bfi	x12, x10, #32, #32
	cmp	x11, x12
	cset	w10, hs
	tbnz	w10, #0, .LBB91_41
.LBB91_40:                              // %"$73"
                                        //   in Loop: Header=BB91_37 Depth=3
	mov	x26, x8
.LBB91_41:                              // %"$70"
                                        //   in Loop: Header=BB91_37 Depth=3
	subs	x9, x9, #1                      // =1
	b.eq	.LBB91_27
// %bb.42:                              // %"$75"
                                        //   in Loop: Header=BB91_37 Depth=3
	ldp	w8, w10, [x8, #8]
	bfi	x8, x10, #32, #32
	b	.LBB91_37
.LBB91_43:                              //   in Loop: Header=BB91_37 Depth=3
	mov	w10, wzr
	tbz	w10, #0, .LBB91_40
	b	.LBB91_41
.LBB91_44:                              //   in Loop: Header=BB91_27 Depth=2
	mov	w8, wzr
	tbnz	w8, #0, .LBB91_46
.LBB91_45:                              // %"$54"
                                        //   in Loop: Header=BB91_27 Depth=2
	mov	x26, x28
.LBB91_46:                              // %"$50"
                                        //   in Loop: Header=BB91_27 Depth=2
	subs	x25, x25, #1                    // =1
	b.eq	.LBB91_48
// %bb.47:                              // %"$77"
                                        //   in Loop: Header=BB91_27 Depth=2
	ldp	w28, w8, [x28, #8]
	bfi	x28, x8, #32, #32
	b	.LBB91_27
.LBB91_48:                              // %"$78"
                                        //   in Loop: Header=BB91_22 Depth=1
	cbz	x26, .LBB91_52
// %bb.49:                              // %"$80"
                                        //   in Loop: Header=BB91_22 Depth=1
	ldur	x9, [x29, #-8]                  // 8-byte Folded Reload
	cbz	x9, .LBB91_56
// %bb.50:                              // %"$88"
                                        //   in Loop: Header=BB91_22 Depth=1
	ldp	w19, w8, [x9, #24]
	bfi	x19, x8, #32, #32
	ldp	w9, w8, [x26, #16]
	bfi	x9, x8, #32, #32
	sub	x20, x27, x9
	tbnz	x20, #63, .LBB91_56
.LBB91_51:                              // %"$90"
                                        //   Parent Loop BB91_22 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	x8, [x21, :lo12:($Put)]
	ldrb	w0, [x19], #1
	blr	x8
	sub	x20, x20, #1                    // =1
	tbz	x20, #63, .LBB91_51
	b	.LBB91_56
.LBB91_52:                              // %"$81"
                                        //   in Loop: Header=BB91_22 Depth=1
	ldur	x9, [x29, #-8]                  // 8-byte Folded Reload
	cbz	x9, .LBB91_55
// %bb.53:                              // %"$82"
                                        //   in Loop: Header=BB91_22 Depth=1
	ldp	w20, w8, [x9, #24]
	bfi	x20, x8, #32, #32
.LBB91_54:                              // %"$84"
                                        //   Parent Loop BB91_22 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	x8, [x21, :lo12:($Put)]
	ldrb	w0, [x20], #1
	blr	x8
	subs	x27, x27, #1                    // =1
	b.ne	.LBB91_54
.LBB91_55:                              // %"$83"
                                        //   in Loop: Header=BB91_22 Depth=1
	ldr	x8, [x21, :lo12:($Put)]
	mov	w0, w19
	blr	x8
.LBB91_56:                              // %"$79"
                                        //   in Loop: Header=BB91_22 Depth=1
	adrp	x8, ($Get)
	ldr	x8, [x8, :lo12:($Get)]
	blr	x8
	b	.LBB91_22
.LBB91_57:                              // %"$49"
	ldur	x9, [x29, #-8]                  // 8-byte Folded Reload
	cbz	x9, .LBB91_60
// %bb.58:                              // %"$56"
	ldp	w19, w8, [x9, #24]
	bfi	x19, x8, #32, #32
	ldp	w9, w8, [x28, #16]
	bfi	x9, x8, #32, #32
	sub	x20, x27, x9
	tbnz	x20, #63, .LBB91_60
.LBB91_59:                              // %"$59"
                                        // =>This Inner Loop Header: Depth=1
	ldr	x8, [x21, :lo12:($Put)]
	ldrb	w0, [x19], #1
	blr	x8
	sub	x20, x20, #1                    // =1
	tbz	x20, #63, .LBB91_59
.LBB91_60:                              // %"$57"
	adrp	x8, ($Chr)
	str	wzr, [x8, :lo12:($Chr)]
	ldur	x9, [x29, #-16]                 // 8-byte Folded Reload
	ldp	w9, w8, [x9, #8]
	bfi	x9, x8, #32, #32
	str	x9, [x24, :lo12:env]
	ldp	w0, w8, [x28]
	bfi	x0, x8, #32, #32
	b	.LBB91_66
.LBB91_61:
	mov	x21, x19
.LBB91_62:                              // %"$27.preheader"
	sub	x19, x21, #1                    // =1
	adrp	x20, ($Get)
	adrp	x21, ($Put)
	tbnz	x19, #63, .LBB91_65
.LBB91_63:                              // %"$28"
                                        // =>This Inner Loop Header: Depth=1
	ldr	x8, [x20, :lo12:($Get)]
	blr	x8
	tbnz	w0, #31, .LBB91_15
// %bb.64:                              // %"$31"
                                        //   in Loop: Header=BB91_63 Depth=1
	ldr	x8, [x21, :lo12:($Put)]
	blr	x8
	sub	x19, x19, #1                    // =1
	tbz	x19, #63, .LBB91_63
.LBB91_65:                              // %"$29"
	adrp	x8, ($Chr)
	str	wzr, [x8, :lo12:($Chr)]
	adrp	x0, SymTab+216
	add	x0, x0, :lo12:SymTab+216
.LBB91_66:                              // %"$25"
	mov	sp, x29
	ldp	x20, x19, [sp, #80]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #64]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #48]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #32]             // 16-byte Folded Reload
	ldp	x28, x27, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #96             // 16-byte Folded Reload
	ret
.LBB91_67:                              // %"$41"
	ldur	x9, [x29, #-16]                 // 8-byte Folded Reload
	ldp	w9, w8, [x9, #8]
	bfi	x9, x8, #32, #32
	str	x9, [x24, :lo12:env]
	adrp	x19, SymTab+8
	add	x19, x19, :lo12:SymTab+8
	b	.LBB91_9
.LBB91_68:                              // %"$33"
	mov	x0, x19
	mov	x1, x21
	bl	argErr
.Lfunc_end91:
	.size	_echo, .Lfunc_end91-_echo
	.cfi_endproc
                                        // -- End function
	.globl	_prin                           // -- Begin function _prin
	.p2align	4
	.type	_prin,@function
_prin:                                  // @_prin
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-32]!                // 8-byte Folded Spill
	stp	x20, x19, [sp, #16]             // 16-byte Folded Spill
	.cfi_def_cfa_offset 32
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w30, -32
	ldp	w20, w8, [x0, #8]
	bfi	x20, x8, #32, #32
	b	.LBB92_3
.LBB92_1:                               // %"$6"
                                        //   in Loop: Header=BB92_3 Depth=1
	mov	x0, x19
	bl	evList
	mov	x19, x0
.LBB92_2:                               // %"$3"
                                        //   in Loop: Header=BB92_3 Depth=1
	mov	x0, x19
	bl	prin
	tst	x20, #0xf
	b.ne	.LBB92_6
.LBB92_3:                               // %"$2"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w19, w8, [x20]
	bfi	x19, x8, #32, #32
	ldp	w20, w8, [x20, #8]
	bfi	x20, x8, #32, #32
	tst	x19, #0x6
	b.ne	.LBB92_2
// %bb.4:                               // %"$4"
                                        //   in Loop: Header=BB92_3 Depth=1
	tbz	w19, #3, .LBB92_1
// %bb.5:                               // %"$7"
                                        //   in Loop: Header=BB92_3 Depth=1
	ldp	w19, w8, [x19]
	bfi	x19, x8, #32, #32
	b	.LBB92_2
.LBB92_6:                               // %"$9"
	mov	x0, x19
	ldp	x20, x19, [sp, #16]             // 16-byte Folded Reload
	ldr	x30, [sp], #32                  // 8-byte Folded Reload
	ret
.Lfunc_end92:
	.size	_prin, .Lfunc_end92-_prin
	.cfi_endproc
                                        // -- End function
	.globl	_prinl                          // -- Begin function _prinl
	.p2align	4
	.type	_prinl,@function
_prinl:                                 // @_prinl
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x30, x19, [sp, #-16]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w19, -8
	.cfi_offset w30, -16
	bl	_prin
	mov	x19, x0
	bl	newline
	mov	x0, x19
	ldp	x30, x19, [sp], #16             // 16-byte Folded Reload
	ret
.Lfunc_end93:
	.size	_prinl, .Lfunc_end93-_prinl
	.cfi_endproc
                                        // -- End function
	.globl	_space                          // -- Begin function _space
	.p2align	4
	.type	_space,@function
_space:                                 // @_space
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-32]!                // 8-byte Folded Spill
	stp	x20, x19, [sp, #16]             // 16-byte Folded Spill
	.cfi_def_cfa_offset 32
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w30, -32
	mov	x20, x0
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w19, w8, [x9]
	bfi	x19, x8, #32, #32
	tst	x19, #0x6
	b.ne	.LBB94_4
// %bb.1:                               // %"$3"
	tbz	w19, #3, .LBB94_3
// %bb.2:                               // %"$6"
	ldp	w19, w8, [x19]
	bfi	x19, x8, #32, #32
	b	.LBB94_4
.LBB94_3:                               // %"$5"
	mov	x0, x19
	bl	evList
	mov	x19, x0
.LBB94_4:                               // %"$2"
	adrp	x8, SymTab+8
	add	x8, x8, :lo12:SymTab+8
	cmp	x19, x8
	b.ne	.LBB94_7
// %bb.5:                               // %"$8"
	bl	space
	mov	w19, #18
.LBB94_6:                               // %"$9"
	mov	x0, x19
	ldp	x20, x19, [sp, #16]             // 16-byte Folded Reload
	ldr	x30, [sp], #32                  // 8-byte Folded Reload
	ret
.LBB94_7:                               // %"$7"
	mov	x0, x20
	mov	x1, x19
	bl	xCnt
	sub	x20, x0, #1                     // =1
	tbnz	x20, #63, .LBB94_6
.LBB94_8:                               // %"$11"
                                        // =>This Inner Loop Header: Depth=1
	bl	space
	sub	x20, x20, #1                    // =1
	tbz	x20, #63, .LBB94_8
	b	.LBB94_6
.Lfunc_end94:
	.size	_space, .Lfunc_end94-_space
	.cfi_endproc
                                        // -- End function
	.globl	_print                          // -- Begin function _print
	.p2align	4
	.type	_print,@function
_print:                                 // @_print
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-32]!                // 8-byte Folded Spill
	stp	x20, x19, [sp, #16]             // 16-byte Folded Spill
	.cfi_def_cfa_offset 32
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w30, -32
	ldp	w20, w8, [x0, #8]
	bfi	x20, x8, #32, #32
.LBB95_1:                               // %"$2"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w19, w8, [x20]
	bfi	x19, x8, #32, #32
	ldp	w20, w8, [x20, #8]
	bfi	x20, x8, #32, #32
	tst	x19, #0x6
	b.ne	.LBB95_5
// %bb.2:                               // %"$4"
                                        //   in Loop: Header=BB95_1 Depth=1
	tbz	w19, #3, .LBB95_4
// %bb.3:                               // %"$7"
                                        //   in Loop: Header=BB95_1 Depth=1
	ldp	w19, w8, [x19]
	bfi	x19, x8, #32, #32
	b	.LBB95_5
.LBB95_4:                               // %"$6"
                                        //   in Loop: Header=BB95_1 Depth=1
	mov	x0, x19
	bl	evList
	mov	x19, x0
.LBB95_5:                               // %"$3"
                                        //   in Loop: Header=BB95_1 Depth=1
	mov	x0, x19
	bl	print
	tst	x20, #0xf
	b.ne	.LBB95_7
// %bb.6:                               // %"$8"
                                        //   in Loop: Header=BB95_1 Depth=1
	bl	space
	b	.LBB95_1
.LBB95_7:                               // %"$9"
	mov	x0, x19
	ldp	x20, x19, [sp, #16]             // 16-byte Folded Reload
	ldr	x30, [sp], #32                  // 8-byte Folded Reload
	ret
.Lfunc_end95:
	.size	_print, .Lfunc_end95-_print
	.cfi_endproc
                                        // -- End function
	.globl	_printsp                        // -- Begin function _printsp
	.p2align	4
	.type	_printsp,@function
_printsp:                               // @_printsp
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x30, x19, [sp, #-16]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w19, -8
	.cfi_offset w30, -16
	bl	_print
	mov	x19, x0
	bl	space
	mov	x0, x19
	ldp	x30, x19, [sp], #16             // 16-byte Folded Reload
	ret
.Lfunc_end96:
	.size	_printsp, .Lfunc_end96-_printsp
	.cfi_endproc
                                        // -- End function
	.globl	_println                        // -- Begin function _println
	.p2align	4
	.type	_println,@function
_println:                               // @_println
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x30, x19, [sp, #-16]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w19, -8
	.cfi_offset w30, -16
	bl	_print
	mov	x19, x0
	bl	newline
	mov	x0, x19
	ldp	x30, x19, [sp], #16             // 16-byte Folded Reload
	ret
.Lfunc_end97:
	.size	_println, .Lfunc_end97-_println
	.cfi_endproc
                                        // -- End function
	.globl	_plio                           // -- Begin function _plio
	.p2align	4
	.type	_plio,@function
_plio:                                  // @_plio
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-48]!                // 8-byte Folded Spill
	stp	x22, x21, [sp, #16]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #32]             // 16-byte Folded Spill
	.cfi_def_cfa_offset 48
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w30, -48
	mov	x19, x0
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w1, w8, [x9]
	bfi	x1, x8, #32, #32
	ldp	w20, w21, [x9, #8]
	tst	x1, #0x6
	b.ne	.LBB98_4
// %bb.1:                               // %"$3"
	tbz	w1, #3, .LBB98_3
// %bb.2:                               // %"$6"
	ldp	w1, w8, [x1]
	bfi	x1, x8, #32, #32
	b	.LBB98_4
.LBB98_3:                               // %"$5"
	mov	x0, x1
	bl	evList
	mov	x1, x0
.LBB98_4:                               // %"$2"
	tst	x1, #0x6
	b.eq	.LBB98_17
// %bb.5:                               // %"$8"
	bfi	x20, x21, #32, #32
	tbz	w1, #1, .LBB98_7
// %bb.6:                               // %"$9"
	lsr	x21, x1, #4
	b	.LBB98_8
.LBB98_7:                               // %"$10"
	ldp	w21, w8, [x1, #-4]
	bfi	x21, x8, #32, #32
.LBB98_8:                               // %"$11"
	adrp	x8, ($ExtN)
	ldr	w8, [x8, :lo12:($ExtN)]
	adrp	x9, ($Extn)
	str	w8, [x9, :lo12:($Extn)]
	adrp	x22, ($Ptr)
	str	x21, [x22, :lo12:($Ptr)]
	tst	x20, #0xf
	b.eq	.LBB98_11
// %bb.9:                               // %"$13"
	adrp	x8, ($GetBin)
	adrp	x9, getPlio
	add	x9, x9, :lo12:getPlio
	str	x9, [x8, :lo12:($GetBin)]
	bl	binRead
	cbnz	x0, .LBB98_16
// %bb.10:                              // %"$21"
	adrp	x0, SymTab+8
	add	x0, x0, :lo12:SymTab+8
	b	.LBB98_16
.LBB98_11:                              // %"$12"
	mov	x0, x19
	mov	x1, x20
	bl	evCnt
	mov	x19, x0
	ldp	w9, w8, [x20, #8]
	bfi	x9, x8, #32, #32
	ldp	w0, w8, [x9]
	bfi	x0, x8, #32, #32
	tst	x0, #0x6
	b.ne	.LBB98_15
// %bb.12:                              // %"$16"
	tbz	w0, #3, .LBB98_14
// %bb.13:                              // %"$19"
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB98_15
.LBB98_14:                              // %"$18"
	bl	evList
.LBB98_15:                              // %"$15"
	adrp	x8, putPlio
	add	x8, x8, :lo12:putPlio
	adrp	x9, ($PutBin)
	str	x8, [x9, :lo12:($PutBin)]
	add	x8, x21, x19
	adrp	x9, ($End)
	str	x8, [x9, :lo12:($End)]
	bl	binPrint
	ldr	x8, [x22, :lo12:($Ptr)]
	sub	x8, x8, x21
	mov	w0, #2
	bfi	x0, x8, #4, #60
.LBB98_16:                              // %"$14"
	ldp	x20, x19, [sp, #32]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #16]             // 16-byte Folded Reload
	ldr	x30, [sp], #48                  // 8-byte Folded Reload
	ret
.LBB98_17:                              // %"$7"
	mov	x0, x19
	bl	numErr
.Lfunc_end98:
	.size	_plio, .Lfunc_end98-_plio
	.cfi_endproc
                                        // -- End function
	.globl	_any                            // -- Begin function _any
	.p2align	4
	.type	_any,@function
_any:                                   // @_any
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x30, x19, [sp, #-16]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w19, -8
	.cfi_offset w30, -16
	mov	x19, x0
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w1, w8, [x9]
	bfi	x1, x8, #32, #32
	tst	x1, #0x6
	b.ne	.LBB99_4
// %bb.1:                               // %"$4"
	tbz	w1, #3, .LBB99_3
// %bb.2:                               // %"$7"
	ldp	w1, w8, [x1]
	bfi	x1, x8, #32, #32
	b	.LBB99_4
.LBB99_3:                               // %"$6"
	mov	x0, x1
	bl	evList
	mov	x1, x0
.LBB99_4:                               // %"$3"
	eor	w8, w1, #0x8
	tst	x8, #0xe
	b.ne	.LBB99_12
// %bb.5:                               // %"$9"
	adrp	x8, SymTab+8
	add	x8, x8, :lo12:SymTab+8
	cmp	x1, x8
	b.eq	.LBB99_11
// %bb.6:                               // %"$10"
	ldp	w0, w8, [x1, #-8]
	bfi	x0, x8, #32, #32
	tbz	w0, #3, .LBB99_8
// %bb.7:
	adrp	x1, SymTab+8
	add	x1, x1, :lo12:SymTab+8
	b	.LBB99_11
.LBB99_8:                               // %"$14"
                                        // =>This Inner Loop Header: Depth=1
	tst	x0, #0x6
	b.ne	.LBB99_10
// %bb.9:                               // %"$15"
                                        //   in Loop: Header=BB99_8 Depth=1
	ldp	w0, w8, [x0, #8]
	bfi	x0, x8, #32, #32
	b	.LBB99_8
.LBB99_10:                              // %"$16"
	mov	w1, #1
	mov	w2, #32
	mov	w3, #1
	bl	parse
	mov	x1, x0
.LBB99_11:                              // %"$2"
	mov	x0, x1
	ldp	x30, x19, [sp], #16             // 16-byte Folded Reload
	ret
.LBB99_12:                              // %"$8"
	mov	x0, x19
	bl	symErr
.Lfunc_end99:
	.size	_any, .Lfunc_end99-_any
	.cfi_endproc
                                        // -- End function
	.globl	_sym                            // -- Begin function _sym
	.p2align	4
	.type	_sym,@function
_sym:                                   // @_sym
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-32]!           // 16-byte Folded Spill
	str	x19, [sp, #16]                  // 8-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 32
	.cfi_offset w19, -16
	.cfi_offset w30, -24
	.cfi_offset w29, -32
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w19, w8, [x9]
	bfi	x19, x8, #32, #32
	tst	x19, #0x6
	b.ne	.LBB100_4
// %bb.1:                               // %"$3"
	tbz	w19, #3, .LBB100_3
// %bb.2:                               // %"$6"
	ldp	w19, w8, [x19]
	bfi	x19, x8, #32, #32
	b	.LBB100_4
.LBB100_3:                              // %"$5"
	mov	x0, x19
	bl	evList
	mov	x19, x0
.LBB100_4:                              // %"$2"
	mov	x8, sp
	sub	x0, x8, #48                     // =48
	mov	sp, x0
	mov	w9, #4
	stp	w9, wzr, [x8, #-48]
	mov	w9, #2
	stp	w9, wzr, [x8, #-32]
	bl	begString
	mov	x0, x19
	bl	print
	bl	endString
	mov	sp, x29
	ldr	x19, [sp, #16]                  // 8-byte Folded Reload
	ldp	x29, x30, [sp], #32             // 16-byte Folded Reload
	ret
.Lfunc_end100:
	.size	_sym, .Lfunc_end100-_sym
	.cfi_endproc
                                        // -- End function
	.globl	_str                            // -- Begin function _str
	.p2align	4
	.type	_str,@function
_str:                                   // @_str
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-48]!           // 16-byte Folded Spill
	str	x21, [sp, #16]                  // 8-byte Folded Spill
	stp	x20, x19, [sp, #32]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 48
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -32
	.cfi_offset w30, -40
	.cfi_offset w29, -48
	mov	x20, x0
	ldp	w21, w8, [x0, #8]
	bfi	x21, x8, #32, #32
	ldp	w19, w8, [x21]
	bfi	x19, x8, #32, #32
	tst	x19, #0x6
	b.ne	.LBB101_4
// %bb.1:                               // %"$3"
	tbz	w19, #3, .LBB101_3
// %bb.2:                               // %"$6"
	ldp	w19, w8, [x19]
	bfi	x19, x8, #32, #32
	b	.LBB101_4
.LBB101_3:                              // %"$5"
	mov	x0, x19
	bl	evList
	mov	x19, x0
.LBB101_4:                              // %"$2"
	adrp	x8, SymTab+8
	add	x8, x8, :lo12:SymTab+8
	cmp	x19, x8
	b.eq	.LBB101_20
// %bb.5:                               // %"$8"
	tst	x19, #0x6
	b.ne	.LBB101_21
// %bb.6:                               // %"$10"
	tst	x19, #0xf
	b.eq	.LBB101_9
// %bb.7:                               // %"$12"
	ldp	w19, w8, [x19, #-8]
	bfi	x19, x8, #32, #32
	tbz	w19, #3, .LBB101_13
// %bb.8:
	adrp	x19, SymTab+8
	add	x19, x19, :lo12:SymTab+8
	b	.LBB101_20
.LBB101_9:                              // %"$13"
	mov	x8, sp
	sub	x0, x8, #48                     // =48
	mov	sp, x0
	mov	w9, #4
	stp	w9, wzr, [x8, #-48]
	mov	w9, #2
	stp	w9, wzr, [x8, #-32]
	bl	begString
.LBB101_10:                             // %"$14"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w0, w8, [x19]
	bfi	x0, x8, #32, #32
	ldp	w19, w8, [x19, #8]
	bfi	x19, x8, #32, #32
	bl	print
	tst	x19, #0xf
	b.ne	.LBB101_12
// %bb.11:                              // %"$15"
                                        //   in Loop: Header=BB101_10 Depth=1
	bl	space
	b	.LBB101_10
.LBB101_12:                             // %"$16"
	bl	endString
	mov	x19, x0
	b	.LBB101_20
.LBB101_13:                             // %"$17"
	ldp	w0, w8, [x21, #8]
	bfi	x0, x8, #32, #32
	tst	x0, #0xf
	b.eq	.LBB101_17
// %bb.14:                              // %"$21"
	tst	x19, #0x6
	b.ne	.LBB101_16
.LBB101_15:                             // %"$22"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w19, w8, [x19, #8]
	bfi	x19, x8, #32, #32
	tst	x19, #0x6
	b.eq	.LBB101_15
.LBB101_16:                             // %"$23"
	mov	x0, x19
	mov	w1, wzr
	mov	w2, #23818
	mov	x3, xzr
	bl	parse
	mov	x19, x0
	b	.LBB101_20
.LBB101_17:                             // %"$19"
	adrp	x20, env
	ldr	x8, [x20, :lo12:env]
	mov	x9, sp
	sub	x21, x9, #16                    // =16
	mov	sp, x21
	lsr	x10, x19, #32
	lsr	x11, x8, #32
	stp	w19, w10, [x9, #-16]
	stp	w8, w11, [x9, #-8]
	str	x21, [x20, :lo12:env]
	tst	x19, #0x6
	b.ne	.LBB101_19
.LBB101_18:                             // %"$25"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w19, w8, [x19, #8]
	bfi	x19, x8, #32, #32
	tst	x19, #0x6
	b.eq	.LBB101_18
.LBB101_19:                             // %"$26"
	bl	evSym
	mov	x3, x0
	ldr	x8, [x20, :lo12:env]
	mov	x9, sp
	sub	x10, x9, #16                    // =16
	mov	sp, x10
	lsr	x11, x0, #32
	lsr	x12, x8, #32
	stp	w3, w11, [x9, #-16]
	stp	w8, w12, [x9, #-8]
	str	x10, [x20, :lo12:env]
	mov	x0, x19
	mov	w1, wzr
	mov	x2, xzr
	bl	parse
	mov	x19, x0
	ldp	w9, w8, [x21, #8]
	bfi	x9, x8, #32, #32
	str	x9, [x20, :lo12:env]
.LBB101_20:                             // %"$7"
	mov	x0, x19
	mov	sp, x29
	ldp	x20, x19, [sp, #32]             // 16-byte Folded Reload
	ldr	x21, [sp, #16]                  // 8-byte Folded Reload
	ldp	x29, x30, [sp], #48             // 16-byte Folded Reload
	ret
.LBB101_21:                             // %"$11"
	mov	x0, x20
	mov	x1, x19
	bl	argErr
.Lfunc_end101:
	.size	_str, .Lfunc_end101-_str
	.cfi_endproc
                                        // -- End function
	.globl	_extQ                           // -- Begin function _extQ
	.p2align	4
	.type	_extQ,@function
_extQ:                                  // @_extQ
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x30, x19, [sp, #-16]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w19, -8
	.cfi_offset w30, -16
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w19, w8, [x9]
	bfi	x19, x8, #32, #32
	tst	x19, #0x6
	b.ne	.LBB102_4
// %bb.1:                               // %"$3"
	tbz	w19, #3, .LBB102_3
// %bb.2:                               // %"$6"
	ldp	w19, w8, [x19]
	bfi	x19, x8, #32, #32
	b	.LBB102_4
.LBB102_3:                              // %"$5"
	mov	x0, x19
	bl	evList
	mov	x19, x0
.LBB102_4:                              // %"$2"
	eor	w8, w19, #0x8
	tst	x8, #0xe
	b.ne	.LBB102_7
// %bb.5:                               // %"$8"
	ldurb	w8, [x19, #-8]
	tbz	w8, #3, .LBB102_7
// %bb.6:                               // %"$9"
	mov	x0, x19
	bl	isLife
	b	.LBB102_8
.LBB102_7:
	mov	w0, wzr
.LBB102_8:                              // %"$7"
	adrp	x8, SymTab+8
	add	x8, x8, :lo12:SymTab+8
	tst	w0, #0x1
	csel	x0, x19, x8, ne
	ldp	x30, x19, [sp], #16             // 16-byte Folded Reload
	ret
.Lfunc_end102:
	.size	_extQ, .Lfunc_end102-_extQ
	.cfi_endproc
                                        // -- End function
	.globl	_apply                          // -- Begin function _apply
	.p2align	4
	.type	_apply,@function
_apply:                                 // @_apply
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-96]!           // 16-byte Folded Spill
	str	x27, [sp, #16]                  // 8-byte Folded Spill
	stp	x26, x25, [sp, #32]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #48]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #64]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #80]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w0, w8, [x9]
	bfi	x0, x8, #32, #32
	ldp	w24, w8, [x9, #8]
	bfi	x24, x8, #32, #32
	tst	x0, #0x6
	b.ne	.LBB103_4
// %bb.1:                               // %"$3"
	tbz	w0, #3, .LBB103_3
// %bb.2:                               // %"$6"
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB103_4
.LBB103_3:                              // %"$5"
	bl	evList
.LBB103_4:                              // %"$2"
	mov	x8, sp
	sub	x19, x8, #48                    // =48
	mov	sp, x19
	adrp	x21, SymTab+8
	add	x21, x21, :lo12:SymTab+8
	lsr	x22, x21, #32
	stp	w21, w22, [x8, #-40]
	mov	w9, #2
	stp	w9, wzr, [x8, #-32]
	mov	x9, x19
	str	w0, [x9, #24]!
	lsr	x10, x0, #32
	stur	w10, [x8, #-20]
	adrp	x23, env
	ldr	x10, [x23, :lo12:env]
	lsr	x11, x10, #32
	stp	w10, w11, [x8, #-16]
	str	x9, [x23, :lo12:env]
	lsr	x10, x9, #32
	stp	w9, w10, [x8, #-48]
	ldp	w20, w8, [x24]
	bfi	x20, x8, #32, #32
	tst	x20, #0x6
	b.ne	.LBB103_8
// %bb.5:                               // %"$8"
	tbz	w20, #3, .LBB103_7
// %bb.6:                               // %"$11"
	ldp	w20, w8, [x20]
	bfi	x20, x8, #32, #32
	b	.LBB103_8
.LBB103_7:                              // %"$10"
	mov	x0, x20
	bl	evList
	mov	x20, x0
.LBB103_8:                              // %"$7"
	adrp	x26, env
	add	x26, x26, :lo12:env
	ldr	x8, [x26]
	mov	x12, sp
	sub	x10, x12, #16                   // =16
	mov	sp, x10
	lsr	x13, x20, #32
	mov	x11, x10
	mov	w27, #2
	mov	x9, x26
	stur	w13, [x12, #-12]
	mov	x25, x19
	str	w20, [x11], #8
	b	.LBB103_11
.LBB103_9:                              // %"$18"
                                        //   in Loop: Header=BB103_11 Depth=1
	bl	evList
.LBB103_10:                             // %"$15"
                                        //   in Loop: Header=BB103_11 Depth=1
	mov	x10, sp
	sub	x9, x10, #48                    // =48
	mov	sp, x9
	stp	w21, w22, [x10, #-40]
	stp	w27, wzr, [x10, #-32]
	mov	x8, x9
	str	w0, [x8, #24]!
	lsr	x11, x0, #32
	stur	w11, [x10, #-20]
	lsr	x11, x9, #32
	stp	w9, w11, [x25, #8]
	ldr	x12, [x26]
	lsr	x13, x12, #32
	mov	x11, x26
	stp	w12, w13, [x10, #-16]
	mov	x10, x8
	mov	x25, x9
.LBB103_11:                             // %"$12"
                                        // =>This Inner Loop Header: Depth=1
	lsr	x12, x8, #32
	stp	w8, w12, [x11]
	lsr	x8, x10, #32
	stp	w10, w8, [x9]
	ldp	w24, w8, [x24, #8]
	bfi	x24, x8, #32, #32
	tst	x24, #0xf
	b.ne	.LBB103_15
// %bb.12:                              // %"$13"
                                        //   in Loop: Header=BB103_11 Depth=1
	ldp	w0, w8, [x24]
	bfi	x0, x8, #32, #32
	tst	x0, #0x6
	b.ne	.LBB103_10
// %bb.13:                              // %"$16"
                                        //   in Loop: Header=BB103_11 Depth=1
	tbz	w0, #3, .LBB103_9
// %bb.14:                              // %"$19"
                                        //   in Loop: Header=BB103_11 Depth=1
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB103_10
.LBB103_15:
	mov	w8, #2
	tst	x20, #0xf
	b.ne	.LBB103_17
.LBB103_16:                             // %"$21"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w9, w10, [x20]
	ldp	w20, w11, [x20, #8]
	bfi	x20, x11, #32, #32
	mov	x11, sp
	sub	x12, x11, #48                   // =48
	mov	sp, x12
	stp	w21, w22, [x11, #-40]
	stp	w8, wzr, [x11, #-32]
	stur	w10, [x11, #-20]
	mov	x10, x12
	str	w9, [x10, #24]!
	lsr	x9, x12, #32
	stp	w12, w9, [x25, #8]
	ldr	x9, [x23, :lo12:env]
	lsr	x13, x9, #32
	stp	w9, w13, [x11, #-16]
	str	x10, [x23, :lo12:env]
	lsr	x9, x10, #32
	mov	x25, x12
	stp	w10, w9, [x11, #-48]
	tst	x20, #0xf
	b.eq	.LBB103_16
.LBB103_17:                             // %"$22"
	mov	x0, x19
	bl	evList
	ldp	w9, w8, [x19, #32]
	bfi	x9, x8, #32, #32
	str	x9, [x23, :lo12:env]
	mov	sp, x29
	ldp	x20, x19, [sp, #80]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #64]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #48]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #32]             // 16-byte Folded Reload
	ldr	x27, [sp, #16]                  // 8-byte Folded Reload
	ldp	x29, x30, [sp], #96             // 16-byte Folded Reload
	ret
.Lfunc_end103:
	.size	_apply, .Lfunc_end103-_apply
	.cfi_endproc
                                        // -- End function
	.globl	_pass                           // -- Begin function _pass
	.p2align	4
	.type	_pass,@function
_pass:                                  // @_pass
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-80]!           // 16-byte Folded Spill
	str	x25, [sp, #16]                  // 8-byte Folded Spill
	stp	x24, x23, [sp, #32]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #48]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #64]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 80
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -64
	.cfi_offset w30, -72
	.cfi_offset w29, -80
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w0, w8, [x9]
	bfi	x0, x8, #32, #32
	ldp	w23, w8, [x9, #8]
	bfi	x23, x8, #32, #32
	tst	x0, #0x6
	b.ne	.LBB104_4
// %bb.1:                               // %"$3"
	tbz	w0, #3, .LBB104_3
// %bb.2:                               // %"$6"
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB104_4
.LBB104_3:                              // %"$5"
	bl	evList
.LBB104_4:                              // %"$2"
	mov	x9, sp
	sub	x19, x9, #48                    // =48
	mov	sp, x19
	adrp	x20, SymTab+8
	add	x20, x20, :lo12:SymTab+8
	mov	w25, #2
	stp	w25, wzr, [x9, #-32]
	lsr	x10, x0, #32
	mov	x8, x19
	adrp	x21, env
	lsr	x22, x20, #32
	stp	w20, w22, [x9, #-40]
	mov	x24, x19
	stur	w10, [x9, #-20]
	str	w0, [x8, #24]!
	b	.LBB104_7
.LBB104_5:                              // %"$13"
                                        //   in Loop: Header=BB104_7 Depth=1
	bl	evList
.LBB104_6:                              // %"$10"
                                        //   in Loop: Header=BB104_7 Depth=1
	mov	x9, sp
	sub	x10, x9, #48                    // =48
	mov	sp, x10
	stp	w20, w22, [x9, #-40]
	stp	w25, wzr, [x9, #-32]
	mov	x8, x10
	str	w0, [x8, #24]!
	lsr	x11, x0, #32
	stur	w11, [x9, #-20]
	lsr	x9, x10, #32
	stp	w10, w9, [x24, #8]
	mov	x24, x10
.LBB104_7:                              // %"$7"
                                        // =>This Inner Loop Header: Depth=1
	ldr	x9, [x21, :lo12:env]
	lsr	x10, x8, #32
	lsr	x11, x9, #32
	stp	w9, w11, [x8, #8]
	str	x8, [x21, :lo12:env]
	stp	w8, w10, [x24]
	tst	x23, #0xf
	b.ne	.LBB104_11
// %bb.8:                               // %"$8"
                                        //   in Loop: Header=BB104_7 Depth=1
	ldp	w0, w8, [x23]
	bfi	x0, x8, #32, #32
	ldp	w23, w8, [x23, #8]
	bfi	x23, x8, #32, #32
	tst	x0, #0x6
	b.ne	.LBB104_6
// %bb.9:                               // %"$11"
                                        //   in Loop: Header=BB104_7 Depth=1
	tbz	w0, #3, .LBB104_5
// %bb.10:                              // %"$14"
                                        //   in Loop: Header=BB104_7 Depth=1
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB104_6
.LBB104_11:                             // %"$15.preheader"
	mov	w8, #2
	adrp	x9, env+96
	add	x9, x9, :lo12:env+96
.LBB104_12:                             // %"$15"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w9, w10, [x9]
	bfi	x9, x10, #32, #32
	tst	x9, #0xf
	b.ne	.LBB104_14
// %bb.13:                              // %"$16"
                                        //   in Loop: Header=BB104_12 Depth=1
	ldp	w10, w11, [x9, #8]
	mov	x12, sp
	sub	x13, x12, #48                   // =48
	mov	sp, x13
	stp	w20, w22, [x12, #-40]
	stp	w8, wzr, [x12, #-32]
	stur	w11, [x12, #-20]
	mov	x11, x13
	str	w10, [x11, #24]!
	lsr	x10, x13, #32
	stp	w13, w10, [x24, #8]
	ldr	x10, [x21, :lo12:env]
	lsr	x14, x10, #32
	stp	w10, w14, [x12, #-16]
	str	x11, [x21, :lo12:env]
	lsr	x10, x11, #32
	mov	x24, x13
	stp	w11, w10, [x12, #-48]
	b	.LBB104_12
.LBB104_14:                             // %"$17"
	mov	x0, x19
	bl	evList
	ldp	w9, w8, [x19, #32]
	bfi	x9, x8, #32, #32
	str	x9, [x21, :lo12:env]
	mov	sp, x29
	ldp	x20, x19, [sp, #64]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #48]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #32]             // 16-byte Folded Reload
	ldr	x25, [sp, #16]                  // 8-byte Folded Reload
	ldp	x29, x30, [sp], #80             // 16-byte Folded Reload
	ret
.Lfunc_end104:
	.size	_pass, .Lfunc_end104-_pass
	.cfi_endproc
                                        // -- End function
	.globl	_maps                           // -- Begin function _maps
	.p2align	4
	.type	_maps,@function
_maps:                                  // @_maps
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-96]!           // 16-byte Folded Spill
	stp	x28, x27, [sp, #16]             // 16-byte Folded Spill
	stp	x26, x25, [sp, #32]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #48]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #64]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #80]             // 16-byte Folded Spill
	mov	x29, sp
	sub	sp, sp, #16                     // =16
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	ldp	w9, w8, [x0, #8]
	stur	x0, [x29, #-16]                 // 8-byte Folded Spill
	bfi	x9, x8, #32, #32
	ldp	w0, w8, [x9]
	bfi	x0, x8, #32, #32
	ldp	w25, w8, [x9, #8]
	bfi	x25, x8, #32, #32
	tst	x0, #0x6
	b.ne	.LBB105_4
// %bb.1:                               // %"$3"
	tbz	w0, #3, .LBB105_3
// %bb.2:                               // %"$6"
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB105_4
.LBB105_3:                              // %"$5"
	bl	evList
.LBB105_4:                              // %"$2"
	mov	x8, sp
	sub	x19, x8, #48                    // =48
	mov	sp, x19
	adrp	x26, SymTab+8
	add	x26, x26, :lo12:SymTab+8
	mov	w9, #2
	stp	w9, wzr, [x8, #-32]
	lsr	x9, x0, #32
	mov	x11, x19
	lsr	x27, x26, #32
	stp	w26, w27, [x8, #-40]
	stur	w9, [x8, #-20]
	str	w0, [x11, #24]!
	sub	x24, sp, #16                    // =16
	mov	sp, x24
	adrp	x23, env
	ldr	x9, [x23, :lo12:env]
	lsr	x10, x9, #32
	stp	w9, w10, [x8, #-16]
	str	x11, [x23, :lo12:env]
	lsr	x9, x11, #32
	stp	w11, w9, [x8, #-48]
	stur	x11, [x29, #-8]                 // 8-byte Folded Spill
	ldp	w21, w8, [x25]
	bfi	x21, x8, #32, #32
	tst	x21, #0x6
	b.ne	.LBB105_8
// %bb.5:                               // %"$8"
	tbz	w21, #3, .LBB105_7
// %bb.6:                               // %"$11"
	ldp	w21, w8, [x21]
	bfi	x21, x8, #32, #32
	b	.LBB105_8
.LBB105_7:                              // %"$10"
	mov	x0, x21
	bl	evList
	mov	x21, x0
.LBB105_8:                              // %"$7"
	eor	w8, w21, #0x8
	tst	x8, #0xe
	b.ne	.LBB105_30
// %bb.9:                               // %"$13"
	ldr	x8, [x23, :lo12:env]
	mov	x9, sp
	sub	x10, x9, #16                    // =16
	mov	sp, x10
	lsr	x11, x21, #32
	lsr	x12, x8, #32
	stp	w21, w11, [x9, #-16]
	stp	w8, w12, [x9, #-8]
	str	x10, [x23, :lo12:env]
	mov	w28, #2
	mov	x9, x19
	mov	x8, x24
	mov	x0, x21
	stp	w21, w11, [x24]
.LBB105_10:                             // %"$14"
                                        // =>This Inner Loop Header: Depth=1
	mov	x10, sp
	sub	x20, x10, #48                   // =48
	mov	sp, x20
	stp	w26, w27, [x10, #-40]
	stp	w28, wzr, [x10, #-32]
	lsr	x11, x0, #32
	stur	w11, [x10, #-20]
	mov	x11, x20
	str	w0, [x11, #24]!
	lsr	x12, x20, #32
	stp	w20, w12, [x9, #8]
	ldr	x9, [x23, :lo12:env]
	lsr	x12, x9, #32
	stp	w9, w12, [x10, #-16]
	str	x11, [x23, :lo12:env]
	lsr	x9, x11, #32
	stp	w11, w9, [x10, #-48]
	ldp	w25, w9, [x25, #8]
	bfi	x25, x9, #32, #32
	tst	x25, #0xf
	b.ne	.LBB105_17
// %bb.11:                              // %"$15"
                                        //   in Loop: Header=BB105_10 Depth=1
	sub	x22, sp, #16                    // =16
	mov	sp, x22
	lsr	x9, x22, #32
	stp	w22, w9, [x8, #8]
	ldp	w0, w8, [x25]
	bfi	x0, x8, #32, #32
	tst	x0, #0x6
	b.ne	.LBB105_15
// %bb.12:                              // %"$18"
                                        //   in Loop: Header=BB105_10 Depth=1
	tbz	w0, #3, .LBB105_14
// %bb.13:                              // %"$21"
                                        //   in Loop: Header=BB105_10 Depth=1
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB105_15
.LBB105_14:                             // %"$20"
                                        //   in Loop: Header=BB105_10 Depth=1
	bl	evList
.LBB105_15:                             // %"$17"
                                        //   in Loop: Header=BB105_10 Depth=1
	ldr	x8, [x23, :lo12:env]
	mov	x9, sp
	sub	x10, x9, #16                    // =16
	mov	sp, x10
	lsr	x11, x0, #32
	lsr	x12, x8, #32
	stp	w0, w11, [x9, #-16]
	stp	w8, w12, [x9, #-8]
	str	x10, [x23, :lo12:env]
	tst	x0, #0xf
	mov	x9, x20
	mov	x8, x22
	stp	w0, w11, [x22]
	b.ne	.LBB105_10
// %bb.16:                              // %"$22"
                                        //   in Loop: Header=BB105_10 Depth=1
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	mov	x9, x20
	mov	x8, x22
	b	.LBB105_10
.LBB105_17:                             // %"$16"
	ldp	w8, w9, [x21, #-8]
	bfi	x8, x9, #32, #32
	tbz	w8, #3, .LBB105_19
// %bb.18:                              // %"$24"
	ldur	x0, [x29, #-16]                 // 8-byte Folded Reload
	mov	x1, x21
	bl	dbFetch
	ldp	w9, w8, [x21, #-8]
	bfi	x9, x8, #32, #32
	and	x8, x9, #0xfffffffffffffff7
.LBB105_19:                             // %"$25"
	ldp	w9, w10, [x19, #8]
	bfi	x9, x10, #32, #32
	tst	x8, #0xf
	mov	x10, x8
	b.ne	.LBB105_21
// %bb.20:                              // %"$26"
	ldp	w10, w11, [x8]
	bfi	x10, x11, #32, #32
.LBB105_21:                             // %"$28"
	lsr	x11, x10, #32
	lsr	x12, x8, #32
	stp	w10, w11, [x9, #24]
	tst	w8, #0xf
	stp	w8, w12, [x24]
	b.eq	.LBB105_28
// %bb.22:
	adrp	x0, SymTab+8
	add	x0, x0, :lo12:SymTab+8
	b	.LBB105_29
.LBB105_23:                             // %"$32"
                                        //   in Loop: Header=BB105_28 Depth=1
	ldp	w8, w10, [x19, #8]
	bfi	x8, x10, #32, #32
	ldp	w10, w11, [x9]
	bfi	x10, x11, #32, #32
	mov	x9, x24
.LBB105_24:                             // %"$34"
                                        //   Parent Loop BB105_28 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	lsr	x11, x10, #32
	stp	w10, w11, [x8, #24]
	ldp	w8, w10, [x8, #8]
	bfi	x8, x10, #32, #32
	tst	x8, #0xf
	b.ne	.LBB105_28
// %bb.25:                              // %"$35"
                                        //   in Loop: Header=BB105_24 Depth=2
	ldp	w9, w10, [x9, #8]
	bfi	x9, x10, #32, #32
	ldp	w10, w11, [x9]
	bfi	x10, x11, #32, #32
	tst	x10, #0xf
	b.ne	.LBB105_24
// %bb.26:                              // %"$38"
                                        //   in Loop: Header=BB105_24 Depth=2
	ldp	w10, w11, [x10, #8]
	stp	w10, w11, [x9]
	bfi	x10, x11, #32, #32
	tst	x10, #0xf
	b.ne	.LBB105_24
// %bb.27:                              // %"$40"
                                        //   in Loop: Header=BB105_24 Depth=2
	ldp	w10, w11, [x10]
	bfi	x10, x11, #32, #32
	b	.LBB105_24
.LBB105_28:                             // %"$31"
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB105_24 Depth 2
	mov	x0, x19
	bl	evList
	ldp	w9, w8, [x24]
	bfi	x9, x8, #32, #32
	ldp	w9, w8, [x9, #8]
	stp	w9, w8, [x24]
	bfi	x9, x8, #32, #32
	tst	x9, #0xf
	b.eq	.LBB105_23
.LBB105_29:                             // %"$30"
	ldur	x9, [x29, #-8]                  // 8-byte Folded Reload
	ldp	w9, w8, [x9, #8]
	bfi	x9, x8, #32, #32
	str	x9, [x23, :lo12:env]
	mov	sp, x29
	ldp	x20, x19, [sp, #80]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #64]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #48]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #32]             // 16-byte Folded Reload
	ldp	x28, x27, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #96             // 16-byte Folded Reload
	ret
.LBB105_30:                             // %"$12"
	ldur	x0, [x29, #-16]                 // 8-byte Folded Reload
	mov	x1, x21
	bl	symErr
.Lfunc_end105:
	.size	_maps, .Lfunc_end105-_maps
	.cfi_endproc
                                        // -- End function
	.globl	_map                            // -- Begin function _map
	.p2align	4
	.type	_map,@function
_map:                                   // @_map
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-80]!           // 16-byte Folded Spill
	stp	x26, x25, [sp, #16]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #32]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #48]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #64]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 80
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w30, -72
	.cfi_offset w29, -80
	ldp	w20, w8, [x0, #8]
	bfi	x20, x8, #32, #32
	ldp	w0, w8, [x20]
	bfi	x0, x8, #32, #32
	tst	x0, #0x6
	b.ne	.LBB106_4
// %bb.1:                               // %"$3"
	tbz	w0, #3, .LBB106_3
// %bb.2:                               // %"$6"
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB106_4
.LBB106_3:                              // %"$5"
	bl	evList
.LBB106_4:                              // %"$2"
	mov	x9, sp
	sub	x19, x9, #48                    // =48
	mov	sp, x19
	adrp	x23, SymTab+8
	add	x23, x23, :lo12:SymTab+8
	mov	w24, #2
	mov	x21, x19
	stp	w24, wzr, [x9, #-32]
	lsr	x25, x23, #32
	stp	w23, w25, [x9, #-40]
	str	w0, [x21, #24]!
	lsr	x10, x0, #32
	adrp	x22, env
	mov	x8, x21
	mov	x26, x19
	stur	w10, [x9, #-20]
	b	.LBB106_7
.LBB106_5:                              // %"$13"
                                        //   in Loop: Header=BB106_7 Depth=1
	bl	evList
.LBB106_6:                              // %"$10"
                                        //   in Loop: Header=BB106_7 Depth=1
	mov	x9, sp
	sub	x10, x9, #48                    // =48
	mov	sp, x10
	stp	w23, w25, [x9, #-40]
	stp	w24, wzr, [x9, #-32]
	mov	x8, x10
	str	w0, [x8, #24]!
	lsr	x11, x0, #32
	stur	w11, [x9, #-20]
	lsr	x9, x10, #32
	stp	w10, w9, [x26, #8]
	mov	x26, x10
.LBB106_7:                              // %"$7"
                                        // =>This Inner Loop Header: Depth=1
	ldr	x9, [x22, :lo12:env]
	lsr	x10, x9, #32
	stp	w9, w10, [x8, #8]
	str	x8, [x22, :lo12:env]
	lsr	x9, x8, #32
	stp	w8, w9, [x26]
	ldp	w20, w8, [x20, #8]
	bfi	x20, x8, #32, #32
	tst	x20, #0xf
	b.ne	.LBB106_11
// %bb.8:                               // %"$8"
                                        //   in Loop: Header=BB106_7 Depth=1
	ldp	w0, w8, [x20]
	bfi	x0, x8, #32, #32
	tst	x0, #0x6
	b.ne	.LBB106_6
// %bb.9:                               // %"$11"
                                        //   in Loop: Header=BB106_7 Depth=1
	tbz	w0, #3, .LBB106_5
// %bb.10:                              // %"$14"
                                        //   in Loop: Header=BB106_7 Depth=1
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB106_6
.LBB106_11:                             // %"$15.preheader"
	adrp	x0, SymTab+8
	add	x0, x0, :lo12:SymTab+8
.LBB106_12:                             // %"$15"
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB106_15 Depth 2
	ldp	w20, w8, [x19, #8]
	bfi	x20, x8, #32, #32
	ldrb	w8, [x20, #24]
	tst	w8, #0xf
	b.ne	.LBB106_17
// %bb.13:                              // %"$16"
                                        //   in Loop: Header=BB106_12 Depth=1
	mov	x0, x19
	bl	evList
	b	.LBB106_15
.LBB106_14:                             // %"$20"
                                        //   in Loop: Header=BB106_15 Depth=2
	ldp	w20, w8, [x20, #8]
	bfi	x20, x8, #32, #32
	tst	x20, #0xf
	b.ne	.LBB106_12
.LBB106_15:                             // %"$18"
                                        //   Parent Loop BB106_12 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	w8, w9, [x20, #24]
	bfi	x8, x9, #32, #32
	tst	x8, #0xf
	b.ne	.LBB106_14
// %bb.16:                              // %"$19"
                                        //   in Loop: Header=BB106_15 Depth=2
	ldp	w9, w8, [x8, #8]
	stp	w9, w8, [x20, #24]
	b	.LBB106_14
.LBB106_17:                             // %"$17"
	ldp	w9, w8, [x21, #8]
	bfi	x9, x8, #32, #32
	str	x9, [x22, :lo12:env]
	mov	sp, x29
	ldp	x20, x19, [sp, #64]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #48]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #32]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #80             // 16-byte Folded Reload
	ret
.Lfunc_end106:
	.size	_map, .Lfunc_end106-_map
	.cfi_endproc
                                        // -- End function
	.globl	_mapc                           // -- Begin function _mapc
	.p2align	4
	.type	_mapc,@function
_mapc:                                  // @_mapc
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-96]!           // 16-byte Folded Spill
	stp	x28, x27, [sp, #16]             // 16-byte Folded Spill
	stp	x26, x25, [sp, #32]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #48]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #64]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #80]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w0, w8, [x9]
	bfi	x0, x8, #32, #32
	ldp	w23, w8, [x9, #8]
	bfi	x23, x8, #32, #32
	tst	x0, #0x6
	b.ne	.LBB107_4
// %bb.1:                               // %"$3"
	tbz	w0, #3, .LBB107_3
// %bb.2:                               // %"$6"
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB107_4
.LBB107_3:                              // %"$5"
	bl	evList
.LBB107_4:                              // %"$2"
	mov	x8, sp
	sub	x19, x8, #48                    // =48
	mov	sp, x19
	adrp	x24, SymTab+8
	add	x24, x24, :lo12:SymTab+8
	mov	w25, #2
	stp	w25, wzr, [x8, #-32]
	lsr	x9, x0, #32
	mov	x20, x19
	lsr	x26, x24, #32
	stp	w24, w26, [x8, #-40]
	stur	w9, [x8, #-20]
	str	w0, [x20, #24]!
	sub	x22, sp, #16                    // =16
	mov	sp, x22
	adrp	x21, env
	ldr	x9, [x21, :lo12:env]
	str	x20, [x21, :lo12:env]
	lsr	x10, x20, #32
	lsr	x11, x9, #32
	stp	w9, w11, [x8, #-16]
	stp	w20, w10, [x8, #-48]
	mov	x28, x19
	mov	x27, x22
.LBB107_5:                              // %"$7"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w0, w8, [x23]
	bfi	x0, x8, #32, #32
	tst	x0, #0x6
	b.ne	.LBB107_9
// %bb.6:                               // %"$9"
                                        //   in Loop: Header=BB107_5 Depth=1
	tbz	w0, #3, .LBB107_8
// %bb.7:                               // %"$12"
                                        //   in Loop: Header=BB107_5 Depth=1
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB107_9
.LBB107_8:                              // %"$11"
                                        //   in Loop: Header=BB107_5 Depth=1
	bl	evList
.LBB107_9:                              // %"$8"
                                        //   in Loop: Header=BB107_5 Depth=1
	ldr	x8, [x21, :lo12:env]
	mov	x9, sp
	sub	x10, x9, #16                    // =16
	mov	sp, x10
	lsr	x11, x0, #32
	lsr	x12, x8, #32
	stp	w0, w11, [x9, #-16]
	stp	w8, w12, [x9, #-8]
	str	x10, [x21, :lo12:env]
	tst	x0, #0xf
	stp	w0, w11, [x27]
	b.ne	.LBB107_11
// %bb.10:                              // %"$13"
                                        //   in Loop: Header=BB107_5 Depth=1
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
.LBB107_11:                             // %"$14"
                                        //   in Loop: Header=BB107_5 Depth=1
	mov	x9, sp
	sub	x8, x9, #48                     // =48
	mov	sp, x8
	stp	w24, w26, [x9, #-40]
	stp	w25, wzr, [x9, #-32]
	lsr	x10, x0, #32
	stur	w10, [x9, #-20]
	mov	x10, x8
	str	w0, [x10, #24]!
	lsr	x11, x8, #32
	stp	w8, w11, [x28, #8]
	ldr	x11, [x21, :lo12:env]
	lsr	x12, x11, #32
	stp	w11, w12, [x9, #-16]
	str	x10, [x21, :lo12:env]
	lsr	x11, x10, #32
	stp	w10, w11, [x9, #-48]
	ldp	w23, w9, [x23, #8]
	bfi	x23, x9, #32, #32
	tst	x23, #0xf
	b.ne	.LBB107_13
// %bb.12:                              // %"$15"
                                        //   in Loop: Header=BB107_5 Depth=1
	sub	x9, sp, #16                     // =16
	mov	sp, x9
	lsr	x10, x9, #32
	stp	w9, w10, [x27, #8]
	mov	x28, x8
	mov	x27, x9
	b	.LBB107_5
.LBB107_13:                             // %"$16"
	ldrb	w8, [x22]
	tst	w8, #0xf
	b.eq	.LBB107_20
// %bb.14:
	adrp	x0, SymTab+8
	add	x0, x0, :lo12:SymTab+8
	b	.LBB107_21
.LBB107_15:                             // %"$20"
                                        //   in Loop: Header=BB107_20 Depth=1
	ldp	w8, w10, [x19, #8]
	bfi	x8, x10, #32, #32
	ldp	w10, w11, [x9]
	bfi	x10, x11, #32, #32
	mov	x9, x22
.LBB107_16:                             // %"$22"
                                        //   Parent Loop BB107_20 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	lsr	x11, x10, #32
	stp	w10, w11, [x8, #24]
	ldp	w8, w10, [x8, #8]
	bfi	x8, x10, #32, #32
	tst	x8, #0xf
	b.ne	.LBB107_20
// %bb.17:                              // %"$23"
                                        //   in Loop: Header=BB107_16 Depth=2
	ldp	w9, w10, [x9, #8]
	bfi	x9, x10, #32, #32
	ldp	w10, w11, [x9]
	bfi	x10, x11, #32, #32
	tst	x10, #0xf
	b.ne	.LBB107_16
// %bb.18:                              // %"$26"
                                        //   in Loop: Header=BB107_16 Depth=2
	ldp	w10, w11, [x10, #8]
	stp	w10, w11, [x9]
	bfi	x10, x11, #32, #32
	tst	x10, #0xf
	b.ne	.LBB107_16
// %bb.19:                              // %"$28"
                                        //   in Loop: Header=BB107_16 Depth=2
	ldp	w10, w11, [x10]
	bfi	x10, x11, #32, #32
	b	.LBB107_16
.LBB107_20:                             // %"$19"
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB107_16 Depth 2
	mov	x0, x19
	bl	evList
	ldp	w9, w8, [x22]
	bfi	x9, x8, #32, #32
	ldp	w9, w8, [x9, #8]
	stp	w9, w8, [x22]
	bfi	x9, x8, #32, #32
	tst	x9, #0xf
	b.eq	.LBB107_15
.LBB107_21:                             // %"$18"
	ldp	w9, w8, [x20, #8]
	bfi	x9, x8, #32, #32
	str	x9, [x21, :lo12:env]
	mov	sp, x29
	ldp	x20, x19, [sp, #80]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #64]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #48]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #32]             // 16-byte Folded Reload
	ldp	x28, x27, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #96             // 16-byte Folded Reload
	ret
.Lfunc_end107:
	.size	_mapc, .Lfunc_end107-_mapc
	.cfi_endproc
                                        // -- End function
	.globl	_maplist                        // -- Begin function _maplist
	.p2align	4
	.type	_maplist,@function
_maplist:                               // @_maplist
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-80]!           // 16-byte Folded Spill
	str	x25, [sp, #16]                  // 8-byte Folded Spill
	stp	x24, x23, [sp, #32]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #48]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #64]             // 16-byte Folded Spill
	mov	x29, sp
	sub	sp, sp, #16                     // =16
	.cfi_def_cfa w29, 80
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -64
	.cfi_offset w30, -72
	.cfi_offset w29, -80
	ldp	w20, w8, [x0, #8]
	bfi	x20, x8, #32, #32
	adrp	x22, env
	adrp	x21, SymTab+8
	add	x21, x21, :lo12:SymTab+8
	ldr	x8, [x22, :lo12:env]
	stp	x21, x8, [x29, #-16]
	sub	x8, x29, #16                    // =16
	str	x8, [x22, :lo12:env]
	ldp	w0, w8, [x20]
	bfi	x0, x8, #32, #32
	tst	x0, #0x6
	b.ne	.LBB108_4
// %bb.1:                               // %"$3"
	tbz	w0, #3, .LBB108_3
// %bb.2:                               // %"$6"
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB108_4
.LBB108_3:                              // %"$5"
	bl	evList
.LBB108_4:                              // %"$2"
	mov	x8, sp
	sub	x19, x8, #48                    // =48
	mov	sp, x19
	lsr	x23, x21, #32
	mov	w24, #2
	stp	w21, w23, [x8, #-40]
	stp	w24, wzr, [x8, #-32]
	lsr	x9, x0, #32
	mov	x25, x19
	stp	w0, w9, [x8, #-24]
	b	.LBB108_7
.LBB108_5:                              // %"$13"
                                        //   in Loop: Header=BB108_7 Depth=1
	bl	evList
.LBB108_6:                              // %"$10"
                                        //   in Loop: Header=BB108_7 Depth=1
	mov	x8, sp
	sub	x9, x8, #48                     // =48
	mov	sp, x9
	stp	w21, w23, [x8, #-40]
	stp	w24, wzr, [x8, #-32]
	lsr	x10, x0, #32
	stp	w0, w10, [x8, #-24]
	lsr	x8, x9, #32
	stp	w9, w8, [x25, #8]
	mov	x25, x9
.LBB108_7:                              // %"$7"
                                        // =>This Inner Loop Header: Depth=1
	add	x8, x25, #24                    // =24
	ldr	x9, [x22, :lo12:env]
	lsr	x10, x9, #32
	stp	w9, w10, [x25, #32]
	str	x8, [x22, :lo12:env]
	lsr	x9, x8, #32
	stp	w8, w9, [x25]
	ldp	w20, w8, [x20, #8]
	bfi	x20, x8, #32, #32
	tst	x20, #0xf
	b.ne	.LBB108_11
// %bb.8:                               // %"$8"
                                        //   in Loop: Header=BB108_7 Depth=1
	ldp	w0, w8, [x20]
	bfi	x0, x8, #32, #32
	tst	x0, #0x6
	b.ne	.LBB108_6
// %bb.9:                               // %"$11"
                                        //   in Loop: Header=BB108_7 Depth=1
	tbz	w0, #3, .LBB108_5
// %bb.10:                              // %"$14"
                                        //   in Loop: Header=BB108_7 Depth=1
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB108_6
.LBB108_11:                             // %"$15.preheader"
	mov	x24, xzr
	adrp	x20, SymTab+8
	add	x20, x20, :lo12:SymTab+8
	mov	x21, x20
	b	.LBB108_13
.LBB108_12:                             //   in Loop: Header=BB108_13 Depth=1
	mov	x24, x0
.LBB108_13:                             // %"$15"
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB108_19 Depth 2
	ldp	w23, w8, [x19, #8]
	bfi	x23, x8, #32, #32
	ldrb	w8, [x23, #24]
	tst	w8, #0xf
	b.ne	.LBB108_21
// %bb.14:                              // %"$16"
                                        //   in Loop: Header=BB108_13 Depth=1
	mov	x0, x19
	bl	evList
	mov	x1, x20
	bl	cons
	cbz	x24, .LBB108_16
// %bb.15:                              // %"$18"
                                        //   in Loop: Header=BB108_13 Depth=1
	add	x8, x24, #8                     // =8
	b	.LBB108_17
.LBB108_16:                             // %"$19"
                                        //   in Loop: Header=BB108_13 Depth=1
	sub	x8, x29, #16                    // =16
	mov	x21, x0
.LBB108_17:                             // %"$20"
                                        //   in Loop: Header=BB108_13 Depth=1
	lsr	x9, x0, #32
	stp	w0, w9, [x8]
	b	.LBB108_19
.LBB108_18:                             // %"$23"
                                        //   in Loop: Header=BB108_19 Depth=2
	ldp	w23, w8, [x23, #8]
	bfi	x23, x8, #32, #32
	tst	x23, #0xf
	b.ne	.LBB108_12
.LBB108_19:                             // %"$21"
                                        //   Parent Loop BB108_13 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	w8, w9, [x23, #24]
	bfi	x8, x9, #32, #32
	tst	x8, #0xf
	b.ne	.LBB108_18
// %bb.20:                              // %"$22"
                                        //   in Loop: Header=BB108_19 Depth=2
	ldp	w9, w8, [x8, #8]
	stp	w9, w8, [x23, #24]
	b	.LBB108_18
.LBB108_21:                             // %"$17"
	ldur	x8, [x29, #-8]
	str	x8, [x22, :lo12:env]
	mov	x0, x21
	mov	sp, x29
	ldp	x20, x19, [sp, #64]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #48]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #32]             // 16-byte Folded Reload
	ldr	x25, [sp, #16]                  // 8-byte Folded Reload
	ldp	x29, x30, [sp], #80             // 16-byte Folded Reload
	ret
.Lfunc_end108:
	.size	_maplist, .Lfunc_end108-_maplist
	.cfi_endproc
                                        // -- End function
	.globl	_mapcar                         // -- Begin function _mapcar
	.p2align	4
	.type	_mapcar,@function
_mapcar:                                // @_mapcar
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-96]!           // 16-byte Folded Spill
	str	x27, [sp, #16]                  // 8-byte Folded Spill
	stp	x26, x25, [sp, #32]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #48]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #64]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #80]             // 16-byte Folded Spill
	mov	x29, sp
	sub	sp, sp, #16                     // =16
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	adrp	x22, env
	adrp	x20, SymTab+8
	add	x20, x20, :lo12:SymTab+8
	ldr	x8, [x22, :lo12:env]
	stp	x20, x8, [x29, #-16]
	sub	x8, x29, #16                    // =16
	str	x8, [x22, :lo12:env]
	ldp	w0, w8, [x9]
	bfi	x0, x8, #32, #32
	ldp	w21, w8, [x9, #8]
	bfi	x21, x8, #32, #32
	tst	x0, #0x6
	b.ne	.LBB109_4
// %bb.1:                               // %"$3"
	tbz	w0, #3, .LBB109_3
// %bb.2:                               // %"$6"
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB109_4
.LBB109_3:                              // %"$5"
	bl	evList
.LBB109_4:                              // %"$2"
	mov	x8, sp
	sub	x19, x8, #48                    // =48
	mov	sp, x19
	lsr	x24, x20, #32
	mov	w25, #2
	stp	w20, w24, [x8, #-40]
	stp	w25, wzr, [x8, #-32]
	lsr	x9, x0, #32
	mov	x10, x19
	stur	w9, [x8, #-20]
	str	w0, [x10, #24]!
	sub	x23, sp, #16                    // =16
	mov	sp, x23
	ldr	x9, [x22, :lo12:env]
	str	x10, [x22, :lo12:env]
	lsr	x11, x10, #32
	lsr	x12, x9, #32
	stp	w9, w12, [x8, #-16]
	stp	w10, w11, [x8, #-48]
	mov	x27, x19
	mov	x26, x23
.LBB109_5:                              // %"$7"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w0, w8, [x21]
	bfi	x0, x8, #32, #32
	tst	x0, #0x6
	b.ne	.LBB109_9
// %bb.6:                               // %"$9"
                                        //   in Loop: Header=BB109_5 Depth=1
	tbz	w0, #3, .LBB109_8
// %bb.7:                               // %"$12"
                                        //   in Loop: Header=BB109_5 Depth=1
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB109_9
.LBB109_8:                              // %"$11"
                                        //   in Loop: Header=BB109_5 Depth=1
	bl	evList
.LBB109_9:                              // %"$8"
                                        //   in Loop: Header=BB109_5 Depth=1
	ldr	x8, [x22, :lo12:env]
	mov	x9, sp
	sub	x10, x9, #16                    // =16
	mov	sp, x10
	lsr	x11, x0, #32
	lsr	x12, x8, #32
	stp	w0, w11, [x9, #-16]
	stp	w8, w12, [x9, #-8]
	str	x10, [x22, :lo12:env]
	tst	x0, #0xf
	stp	w0, w11, [x26]
	b.ne	.LBB109_11
// %bb.10:                              // %"$13"
                                        //   in Loop: Header=BB109_5 Depth=1
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
.LBB109_11:                             // %"$14"
                                        //   in Loop: Header=BB109_5 Depth=1
	mov	x9, sp
	sub	x8, x9, #48                     // =48
	mov	sp, x8
	stp	w20, w24, [x9, #-40]
	stp	w25, wzr, [x9, #-32]
	lsr	x10, x0, #32
	stur	w10, [x9, #-20]
	mov	x10, x8
	str	w0, [x10, #24]!
	lsr	x11, x8, #32
	stp	w8, w11, [x27, #8]
	ldr	x11, [x22, :lo12:env]
	lsr	x12, x11, #32
	stp	w11, w12, [x9, #-16]
	str	x10, [x22, :lo12:env]
	lsr	x11, x10, #32
	stp	w10, w11, [x9, #-48]
	ldp	w21, w9, [x21, #8]
	bfi	x21, x9, #32, #32
	tst	x21, #0xf
	b.ne	.LBB109_13
// %bb.12:                              // %"$15"
                                        //   in Loop: Header=BB109_5 Depth=1
	sub	x9, sp, #16                     // =16
	mov	sp, x9
	lsr	x10, x9, #32
	stp	w9, w10, [x26, #8]
	mov	x27, x8
	mov	x26, x9
	b	.LBB109_5
.LBB109_13:                             // %"$16"
	ldrb	w8, [x23]
	tst	w8, #0xf
	b.eq	.LBB109_16
// %bb.14:
	adrp	x20, SymTab+8
	add	x20, x20, :lo12:SymTab+8
.LBB109_15:                             // %"$18"
	ldur	x8, [x29, #-8]
	str	x8, [x22, :lo12:env]
	mov	x0, x20
	mov	sp, x29
	ldp	x20, x19, [sp, #80]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #64]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #48]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #32]             // 16-byte Folded Reload
	ldr	x27, [sp, #16]                  // 8-byte Folded Reload
	ldp	x29, x30, [sp], #96             // 16-byte Folded Reload
	ret
.LBB109_16:                             // %"$19.preheader"
	mov	x24, xzr
	adrp	x21, SymTab+8
	add	x21, x21, :lo12:SymTab+8
	mov	x20, x21
	b	.LBB109_18
.LBB109_17:                             //   in Loop: Header=BB109_18 Depth=1
	mov	x24, x0
.LBB109_18:                             // %"$19"
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB109_23 Depth 2
	mov	x0, x19
	bl	evList
	mov	x1, x21
	bl	cons
	cbz	x24, .LBB109_20
// %bb.19:                              // %"$20"
                                        //   in Loop: Header=BB109_18 Depth=1
	add	x8, x24, #8                     // =8
	b	.LBB109_21
.LBB109_20:                             // %"$21"
                                        //   in Loop: Header=BB109_18 Depth=1
	sub	x8, x29, #16                    // =16
	mov	x20, x0
.LBB109_21:                             // %"$22"
                                        //   in Loop: Header=BB109_18 Depth=1
	lsr	x9, x0, #32
	stp	w0, w9, [x8]
	ldp	w9, w8, [x23]
	bfi	x9, x8, #32, #32
	ldp	w9, w8, [x9, #8]
	stp	w9, w8, [x23]
	bfi	x9, x8, #32, #32
	tst	x9, #0xf
	b.ne	.LBB109_15
// %bb.22:                              // %"$23"
                                        //   in Loop: Header=BB109_18 Depth=1
	ldp	w8, w10, [x19, #8]
	bfi	x8, x10, #32, #32
	ldp	w10, w11, [x9]
	bfi	x10, x11, #32, #32
	mov	x9, x23
.LBB109_23:                             // %"$25"
                                        //   Parent Loop BB109_18 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	lsr	x11, x10, #32
	stp	w10, w11, [x8, #24]
	ldp	w8, w10, [x8, #8]
	bfi	x8, x10, #32, #32
	tst	x8, #0xf
	b.ne	.LBB109_17
// %bb.24:                              // %"$26"
                                        //   in Loop: Header=BB109_23 Depth=2
	ldp	w9, w10, [x9, #8]
	bfi	x9, x10, #32, #32
	ldp	w10, w11, [x9]
	bfi	x10, x11, #32, #32
	tst	x10, #0xf
	b.ne	.LBB109_23
// %bb.25:                              // %"$29"
                                        //   in Loop: Header=BB109_23 Depth=2
	ldp	w10, w11, [x10, #8]
	stp	w10, w11, [x9]
	bfi	x10, x11, #32, #32
	tst	x10, #0xf
	b.ne	.LBB109_23
// %bb.26:                              // %"$31"
                                        //   in Loop: Header=BB109_23 Depth=2
	ldp	w10, w11, [x10]
	bfi	x10, x11, #32, #32
	b	.LBB109_23
.Lfunc_end109:
	.size	_mapcar, .Lfunc_end109-_mapcar
	.cfi_endproc
                                        // -- End function
	.globl	_mapcon                         // -- Begin function _mapcon
	.p2align	4
	.type	_mapcon,@function
_mapcon:                                // @_mapcon
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-80]!           // 16-byte Folded Spill
	str	x25, [sp, #16]                  // 8-byte Folded Spill
	stp	x24, x23, [sp, #32]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #48]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #64]             // 16-byte Folded Spill
	mov	x29, sp
	sub	sp, sp, #16                     // =16
	.cfi_def_cfa w29, 80
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -64
	.cfi_offset w30, -72
	.cfi_offset w29, -80
	ldp	w20, w8, [x0, #8]
	bfi	x20, x8, #32, #32
	adrp	x21, env
	adrp	x22, SymTab+8
	add	x22, x22, :lo12:SymTab+8
	ldr	x8, [x21, :lo12:env]
	stp	x22, x8, [x29, #-16]
	sub	x8, x29, #16                    // =16
	str	x8, [x21, :lo12:env]
	ldp	w0, w8, [x20]
	bfi	x0, x8, #32, #32
	tst	x0, #0x6
	b.ne	.LBB110_4
// %bb.1:                               // %"$3"
	tbz	w0, #3, .LBB110_3
// %bb.2:                               // %"$6"
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB110_4
.LBB110_3:                              // %"$5"
	bl	evList
.LBB110_4:                              // %"$2"
	mov	x8, sp
	sub	x19, x8, #48                    // =48
	mov	sp, x19
	lsr	x23, x22, #32
	mov	w24, #2
	stp	w22, w23, [x8, #-40]
	stp	w24, wzr, [x8, #-32]
	lsr	x9, x0, #32
	mov	x25, x19
	stp	w0, w9, [x8, #-24]
	b	.LBB110_7
.LBB110_5:                              // %"$13"
                                        //   in Loop: Header=BB110_7 Depth=1
	bl	evList
.LBB110_6:                              // %"$10"
                                        //   in Loop: Header=BB110_7 Depth=1
	mov	x8, sp
	sub	x9, x8, #48                     // =48
	mov	sp, x9
	stp	w22, w23, [x8, #-40]
	stp	w24, wzr, [x8, #-32]
	lsr	x10, x0, #32
	stp	w0, w10, [x8, #-24]
	lsr	x8, x9, #32
	stp	w9, w8, [x25, #8]
	mov	x25, x9
.LBB110_7:                              // %"$7"
                                        // =>This Inner Loop Header: Depth=1
	add	x8, x25, #24                    // =24
	ldr	x9, [x21, :lo12:env]
	lsr	x10, x9, #32
	stp	w9, w10, [x25, #32]
	str	x8, [x21, :lo12:env]
	lsr	x9, x8, #32
	stp	w8, w9, [x25]
	ldp	w20, w8, [x20, #8]
	bfi	x20, x8, #32, #32
	tst	x20, #0xf
	b.ne	.LBB110_11
// %bb.8:                               // %"$8"
                                        //   in Loop: Header=BB110_7 Depth=1
	ldp	w0, w8, [x20]
	bfi	x0, x8, #32, #32
	tst	x0, #0x6
	b.ne	.LBB110_6
// %bb.9:                               // %"$11"
                                        //   in Loop: Header=BB110_7 Depth=1
	tbz	w0, #3, .LBB110_5
// %bb.10:                              // %"$14"
                                        //   in Loop: Header=BB110_7 Depth=1
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB110_6
.LBB110_11:                             // %"$15.preheader"
	mov	x23, xzr
	adrp	x20, SymTab+8
	add	x20, x20, :lo12:SymTab+8
	b	.LBB110_13
.LBB110_12:                             //   in Loop: Header=BB110_13 Depth=1
	mov	x23, x0
.LBB110_13:                             // %"$15"
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB110_17 Depth 2
                                        //     Child Loop BB110_22 Depth 2
	ldp	w22, w8, [x19, #8]
	bfi	x22, x8, #32, #32
	ldrb	w8, [x22, #24]
	tst	w8, #0xf
	b.ne	.LBB110_24
// %bb.14:                              // %"$16"
                                        //   in Loop: Header=BB110_13 Depth=1
	mov	x0, x19
	bl	evList
	tst	x0, #0xf
	b.eq	.LBB110_16
// %bb.15:                              //   in Loop: Header=BB110_13 Depth=1
	mov	x0, x23
	b	.LBB110_22
.LBB110_16:                             // %"$18"
                                        //   in Loop: Header=BB110_13 Depth=1
	cbz	x23, .LBB110_19
.LBB110_17:                             // %"$23"
                                        //   Parent Loop BB110_13 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	mov	x8, x23
	ldp	w23, w9, [x23, #8]
	bfi	x23, x9, #32, #32
	tst	x23, #0xf
	b.eq	.LBB110_17
// %bb.18:                              // %"$25"
                                        //   in Loop: Header=BB110_13 Depth=1
	add	x8, x8, #8                      // =8
	b	.LBB110_20
.LBB110_19:                             // %"$21"
                                        //   in Loop: Header=BB110_13 Depth=1
	sub	x8, x29, #16                    // =16
	mov	x20, x0
.LBB110_20:                             // %"$22"
                                        //   in Loop: Header=BB110_13 Depth=1
	lsr	x9, x0, #32
	stp	w0, w9, [x8]
	b	.LBB110_22
.LBB110_21:                             // %"$28"
                                        //   in Loop: Header=BB110_22 Depth=2
	ldp	w22, w8, [x22, #8]
	bfi	x22, x8, #32, #32
	tst	x22, #0xf
	b.ne	.LBB110_12
.LBB110_22:                             // %"$26"
                                        //   Parent Loop BB110_13 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	w8, w9, [x22, #24]
	bfi	x8, x9, #32, #32
	tst	x8, #0xf
	b.ne	.LBB110_21
// %bb.23:                              // %"$27"
                                        //   in Loop: Header=BB110_22 Depth=2
	ldp	w9, w8, [x8, #8]
	stp	w9, w8, [x22, #24]
	b	.LBB110_21
.LBB110_24:                             // %"$17"
	ldur	x8, [x29, #-8]
	str	x8, [x21, :lo12:env]
	mov	x0, x20
	mov	sp, x29
	ldp	x20, x19, [sp, #64]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #48]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #32]             // 16-byte Folded Reload
	ldr	x25, [sp, #16]                  // 8-byte Folded Reload
	ldp	x29, x30, [sp], #80             // 16-byte Folded Reload
	ret
.Lfunc_end110:
	.size	_mapcon, .Lfunc_end110-_mapcon
	.cfi_endproc
                                        // -- End function
	.globl	_mapcan                         // -- Begin function _mapcan
	.p2align	4
	.type	_mapcan,@function
_mapcan:                                // @_mapcan
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-96]!           // 16-byte Folded Spill
	str	x27, [sp, #16]                  // 8-byte Folded Spill
	stp	x26, x25, [sp, #32]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #48]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #64]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #80]             // 16-byte Folded Spill
	mov	x29, sp
	sub	sp, sp, #16                     // =16
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	adrp	x21, env
	adrp	x20, SymTab+8
	add	x20, x20, :lo12:SymTab+8
	ldr	x8, [x21, :lo12:env]
	stp	x20, x8, [x29, #-16]
	sub	x8, x29, #16                    // =16
	str	x8, [x21, :lo12:env]
	ldp	w0, w8, [x9]
	bfi	x0, x8, #32, #32
	ldp	w23, w8, [x9, #8]
	bfi	x23, x8, #32, #32
	tst	x0, #0x6
	b.ne	.LBB111_4
// %bb.1:                               // %"$3"
	tbz	w0, #3, .LBB111_3
// %bb.2:                               // %"$6"
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB111_4
.LBB111_3:                              // %"$5"
	bl	evList
.LBB111_4:                              // %"$2"
	mov	x8, sp
	sub	x19, x8, #48                    // =48
	mov	sp, x19
	lsr	x24, x20, #32
	mov	w25, #2
	stp	w20, w24, [x8, #-40]
	stp	w25, wzr, [x8, #-32]
	lsr	x9, x0, #32
	mov	x10, x19
	stur	w9, [x8, #-20]
	str	w0, [x10, #24]!
	sub	x22, sp, #16                    // =16
	mov	sp, x22
	ldr	x9, [x21, :lo12:env]
	str	x10, [x21, :lo12:env]
	lsr	x11, x10, #32
	lsr	x12, x9, #32
	stp	w9, w12, [x8, #-16]
	stp	w10, w11, [x8, #-48]
	mov	x27, x19
	mov	x26, x22
.LBB111_5:                              // %"$7"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w0, w8, [x23]
	bfi	x0, x8, #32, #32
	tst	x0, #0x6
	b.ne	.LBB111_9
// %bb.6:                               // %"$9"
                                        //   in Loop: Header=BB111_5 Depth=1
	tbz	w0, #3, .LBB111_8
// %bb.7:                               // %"$12"
                                        //   in Loop: Header=BB111_5 Depth=1
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB111_9
.LBB111_8:                              // %"$11"
                                        //   in Loop: Header=BB111_5 Depth=1
	bl	evList
.LBB111_9:                              // %"$8"
                                        //   in Loop: Header=BB111_5 Depth=1
	ldr	x8, [x21, :lo12:env]
	mov	x9, sp
	sub	x10, x9, #16                    // =16
	mov	sp, x10
	lsr	x11, x0, #32
	lsr	x12, x8, #32
	stp	w0, w11, [x9, #-16]
	stp	w8, w12, [x9, #-8]
	str	x10, [x21, :lo12:env]
	tst	x0, #0xf
	stp	w0, w11, [x26]
	b.ne	.LBB111_11
// %bb.10:                              // %"$13"
                                        //   in Loop: Header=BB111_5 Depth=1
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
.LBB111_11:                             // %"$14"
                                        //   in Loop: Header=BB111_5 Depth=1
	mov	x9, sp
	sub	x8, x9, #48                     // =48
	mov	sp, x8
	stp	w20, w24, [x9, #-40]
	stp	w25, wzr, [x9, #-32]
	lsr	x10, x0, #32
	stur	w10, [x9, #-20]
	mov	x10, x8
	str	w0, [x10, #24]!
	lsr	x11, x8, #32
	stp	w8, w11, [x27, #8]
	ldr	x11, [x21, :lo12:env]
	lsr	x12, x11, #32
	stp	w11, w12, [x9, #-16]
	str	x10, [x21, :lo12:env]
	lsr	x11, x10, #32
	stp	w10, w11, [x9, #-48]
	ldp	w23, w9, [x23, #8]
	bfi	x23, x9, #32, #32
	tst	x23, #0xf
	b.ne	.LBB111_13
// %bb.12:                              // %"$15"
                                        //   in Loop: Header=BB111_5 Depth=1
	sub	x9, sp, #16                     // =16
	mov	sp, x9
	lsr	x10, x9, #32
	stp	w9, w10, [x26, #8]
	mov	x27, x8
	mov	x26, x9
	b	.LBB111_5
.LBB111_13:                             // %"$16"
	ldrb	w8, [x22]
	tst	w8, #0xf
	b.eq	.LBB111_16
// %bb.14:
	adrp	x20, SymTab+8
	add	x20, x20, :lo12:SymTab+8
.LBB111_15:                             // %"$18"
	ldur	x8, [x29, #-8]
	str	x8, [x21, :lo12:env]
	mov	x0, x20
	mov	sp, x29
	ldp	x20, x19, [sp, #80]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #64]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #48]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #32]             // 16-byte Folded Reload
	ldr	x27, [sp, #16]                  // 8-byte Folded Reload
	ldp	x29, x30, [sp], #96             // 16-byte Folded Reload
	ret
.LBB111_16:                             // %"$19.preheader"
	mov	x23, xzr
	adrp	x20, SymTab+8
	add	x20, x20, :lo12:SymTab+8
	b	.LBB111_18
.LBB111_17:                             //   in Loop: Header=BB111_18 Depth=1
	mov	x23, x0
.LBB111_18:                             // %"$19"
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB111_21 Depth 2
                                        //     Child Loop BB111_27 Depth 2
	mov	x0, x19
	bl	evList
	tst	x0, #0xf
	b.eq	.LBB111_20
// %bb.19:                              //   in Loop: Header=BB111_18 Depth=1
	mov	x0, x23
	b	.LBB111_25
.LBB111_20:                             // %"$20"
                                        //   in Loop: Header=BB111_18 Depth=1
	cbz	x23, .LBB111_23
.LBB111_21:                             // %"$25"
                                        //   Parent Loop BB111_18 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	mov	x8, x23
	ldp	w23, w9, [x23, #8]
	bfi	x23, x9, #32, #32
	tst	x23, #0xf
	b.eq	.LBB111_21
// %bb.22:                              // %"$27"
                                        //   in Loop: Header=BB111_18 Depth=1
	add	x8, x8, #8                      // =8
	b	.LBB111_24
.LBB111_23:                             // %"$23"
                                        //   in Loop: Header=BB111_18 Depth=1
	sub	x8, x29, #16                    // =16
	mov	x20, x0
.LBB111_24:                             // %"$24"
                                        //   in Loop: Header=BB111_18 Depth=1
	lsr	x9, x0, #32
	stp	w0, w9, [x8]
.LBB111_25:                             // %"$21"
                                        //   in Loop: Header=BB111_18 Depth=1
	ldp	w9, w8, [x22]
	bfi	x9, x8, #32, #32
	ldp	w9, w8, [x9, #8]
	stp	w9, w8, [x22]
	bfi	x9, x8, #32, #32
	tst	x9, #0xf
	b.ne	.LBB111_15
// %bb.26:                              // %"$28"
                                        //   in Loop: Header=BB111_18 Depth=1
	ldp	w8, w10, [x19, #8]
	bfi	x8, x10, #32, #32
	ldp	w10, w11, [x9]
	bfi	x10, x11, #32, #32
	mov	x9, x22
.LBB111_27:                             // %"$30"
                                        //   Parent Loop BB111_18 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	lsr	x11, x10, #32
	stp	w10, w11, [x8, #24]
	ldp	w8, w10, [x8, #8]
	bfi	x8, x10, #32, #32
	tst	x8, #0xf
	b.ne	.LBB111_17
// %bb.28:                              // %"$31"
                                        //   in Loop: Header=BB111_27 Depth=2
	ldp	w9, w10, [x9, #8]
	bfi	x9, x10, #32, #32
	ldp	w10, w11, [x9]
	bfi	x10, x11, #32, #32
	tst	x10, #0xf
	b.ne	.LBB111_27
// %bb.29:                              // %"$34"
                                        //   in Loop: Header=BB111_27 Depth=2
	ldp	w10, w11, [x10, #8]
	stp	w10, w11, [x9]
	bfi	x10, x11, #32, #32
	tst	x10, #0xf
	b.ne	.LBB111_27
// %bb.30:                              // %"$36"
                                        //   in Loop: Header=BB111_27 Depth=2
	ldp	w10, w11, [x10]
	bfi	x10, x11, #32, #32
	b	.LBB111_27
.Lfunc_end111:
	.size	_mapcan, .Lfunc_end111-_mapcan
	.cfi_endproc
                                        // -- End function
	.globl	_filter                         // -- Begin function _filter
	.p2align	4
	.type	_filter,@function
_filter:                                // @_filter
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-96]!           // 16-byte Folded Spill
	str	x27, [sp, #16]                  // 8-byte Folded Spill
	stp	x26, x25, [sp, #32]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #48]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #64]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #80]             // 16-byte Folded Spill
	mov	x29, sp
	sub	sp, sp, #16                     // =16
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	adrp	x22, env
	adrp	x20, SymTab+8
	add	x20, x20, :lo12:SymTab+8
	ldr	x8, [x22, :lo12:env]
	stp	x20, x8, [x29, #-16]
	sub	x8, x29, #16                    // =16
	str	x8, [x22, :lo12:env]
	ldp	w0, w8, [x9]
	bfi	x0, x8, #32, #32
	ldp	w21, w8, [x9, #8]
	bfi	x21, x8, #32, #32
	tst	x0, #0x6
	b.ne	.LBB112_4
// %bb.1:                               // %"$3"
	tbz	w0, #3, .LBB112_3
// %bb.2:                               // %"$6"
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB112_4
.LBB112_3:                              // %"$5"
	bl	evList
.LBB112_4:                              // %"$2"
	mov	x8, sp
	sub	x19, x8, #48                    // =48
	mov	sp, x19
	lsr	x24, x20, #32
	mov	w25, #2
	stp	w20, w24, [x8, #-40]
	stp	w25, wzr, [x8, #-32]
	lsr	x9, x0, #32
	mov	x10, x19
	stur	w9, [x8, #-20]
	str	w0, [x10, #24]!
	sub	x23, sp, #16                    // =16
	mov	sp, x23
	ldr	x9, [x22, :lo12:env]
	str	x10, [x22, :lo12:env]
	lsr	x11, x10, #32
	lsr	x12, x9, #32
	stp	w9, w12, [x8, #-16]
	stp	w10, w11, [x8, #-48]
	mov	x27, x19
	mov	x26, x23
.LBB112_5:                              // %"$7"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w0, w8, [x21]
	bfi	x0, x8, #32, #32
	tst	x0, #0x6
	b.ne	.LBB112_9
// %bb.6:                               // %"$9"
                                        //   in Loop: Header=BB112_5 Depth=1
	tbz	w0, #3, .LBB112_8
// %bb.7:                               // %"$12"
                                        //   in Loop: Header=BB112_5 Depth=1
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB112_9
.LBB112_8:                              // %"$11"
                                        //   in Loop: Header=BB112_5 Depth=1
	bl	evList
.LBB112_9:                              // %"$8"
                                        //   in Loop: Header=BB112_5 Depth=1
	ldr	x8, [x22, :lo12:env]
	mov	x9, sp
	sub	x10, x9, #16                    // =16
	mov	sp, x10
	lsr	x11, x0, #32
	lsr	x12, x8, #32
	stp	w0, w11, [x9, #-16]
	stp	w8, w12, [x9, #-8]
	str	x10, [x22, :lo12:env]
	tst	x0, #0xf
	stp	w0, w11, [x26]
	b.ne	.LBB112_11
// %bb.10:                              // %"$13"
                                        //   in Loop: Header=BB112_5 Depth=1
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
.LBB112_11:                             // %"$14"
                                        //   in Loop: Header=BB112_5 Depth=1
	mov	x9, sp
	sub	x8, x9, #48                     // =48
	mov	sp, x8
	stp	w20, w24, [x9, #-40]
	stp	w25, wzr, [x9, #-32]
	lsr	x10, x0, #32
	stur	w10, [x9, #-20]
	mov	x10, x8
	str	w0, [x10, #24]!
	lsr	x11, x8, #32
	stp	w8, w11, [x27, #8]
	ldr	x11, [x22, :lo12:env]
	lsr	x12, x11, #32
	stp	w11, w12, [x9, #-16]
	str	x10, [x22, :lo12:env]
	lsr	x11, x10, #32
	stp	w10, w11, [x9, #-48]
	ldp	w21, w9, [x21, #8]
	bfi	x21, x9, #32, #32
	tst	x21, #0xf
	b.ne	.LBB112_13
// %bb.12:                              // %"$15"
                                        //   in Loop: Header=BB112_5 Depth=1
	sub	x9, sp, #16                     // =16
	mov	sp, x9
	lsr	x10, x9, #32
	stp	w9, w10, [x26, #8]
	mov	x27, x8
	mov	x26, x9
	b	.LBB112_5
.LBB112_13:                             // %"$16"
	adrp	x20, SymTab+8
	add	x20, x20, :lo12:SymTab+8
	ldrb	w8, [x23]
	tst	w8, #0xf
	mov	x21, x20
	b.eq	.LBB112_15
.LBB112_14:                             // %"$18"
	ldur	x8, [x29, #-8]
	str	x8, [x22, :lo12:env]
	mov	x0, x21
	mov	sp, x29
	ldp	x20, x19, [sp, #80]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #64]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #48]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #32]             // 16-byte Folded Reload
	ldr	x27, [sp, #16]                  // 8-byte Folded Reload
	ldp	x29, x30, [sp], #96             // 16-byte Folded Reload
	ret
.LBB112_15:                             // %"$19.preheader"
	mov	x24, xzr
	mov	x21, x20
	b	.LBB112_17
.LBB112_16:                             //   in Loop: Header=BB112_17 Depth=1
	mov	x24, x0
.LBB112_17:                             // %"$19"
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB112_25 Depth 2
	mov	x0, x19
	bl	evList
	cmp	x0, x20
	b.ne	.LBB112_19
// %bb.18:                              //   in Loop: Header=BB112_17 Depth=1
	mov	x0, x24
	b	.LBB112_23
.LBB112_19:                             // %"$20"
                                        //   in Loop: Header=BB112_17 Depth=1
	ldp	w9, w8, [x23]
	bfi	x9, x8, #32, #32
	ldp	w0, w8, [x9]
	bfi	x0, x8, #32, #32
	mov	x1, x20
	bl	cons
	cbz	x24, .LBB112_21
// %bb.20:                              // %"$22"
                                        //   in Loop: Header=BB112_17 Depth=1
	add	x8, x24, #8                     // =8
	b	.LBB112_22
.LBB112_21:                             // %"$23"
                                        //   in Loop: Header=BB112_17 Depth=1
	sub	x8, x29, #16                    // =16
	mov	x21, x0
.LBB112_22:                             // %"$24"
                                        //   in Loop: Header=BB112_17 Depth=1
	lsr	x9, x0, #32
	stp	w0, w9, [x8]
.LBB112_23:                             // %"$21"
                                        //   in Loop: Header=BB112_17 Depth=1
	ldp	w9, w8, [x23]
	bfi	x9, x8, #32, #32
	ldp	w9, w8, [x9, #8]
	stp	w9, w8, [x23]
	bfi	x9, x8, #32, #32
	tst	x9, #0xf
	b.ne	.LBB112_14
// %bb.24:                              // %"$25"
                                        //   in Loop: Header=BB112_17 Depth=1
	ldp	w8, w10, [x19, #8]
	bfi	x8, x10, #32, #32
	ldp	w10, w11, [x9]
	bfi	x10, x11, #32, #32
	mov	x9, x23
.LBB112_25:                             // %"$27"
                                        //   Parent Loop BB112_17 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	lsr	x11, x10, #32
	stp	w10, w11, [x8, #24]
	ldp	w8, w10, [x8, #8]
	bfi	x8, x10, #32, #32
	tst	x8, #0xf
	b.ne	.LBB112_16
// %bb.26:                              // %"$28"
                                        //   in Loop: Header=BB112_25 Depth=2
	ldp	w9, w10, [x9, #8]
	bfi	x9, x10, #32, #32
	ldp	w10, w11, [x9]
	bfi	x10, x11, #32, #32
	tst	x10, #0xf
	b.ne	.LBB112_25
// %bb.27:                              // %"$31"
                                        //   in Loop: Header=BB112_25 Depth=2
	ldp	w10, w11, [x10, #8]
	stp	w10, w11, [x9]
	bfi	x10, x11, #32, #32
	tst	x10, #0xf
	b.ne	.LBB112_25
// %bb.28:                              // %"$33"
                                        //   in Loop: Header=BB112_25 Depth=2
	ldp	w10, w11, [x10]
	bfi	x10, x11, #32, #32
	b	.LBB112_25
.Lfunc_end112:
	.size	_filter, .Lfunc_end112-_filter
	.cfi_endproc
                                        // -- End function
	.globl	_extract                        // -- Begin function _extract
	.p2align	4
	.type	_extract,@function
_extract:                               // @_extract
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-96]!           // 16-byte Folded Spill
	str	x27, [sp, #16]                  // 8-byte Folded Spill
	stp	x26, x25, [sp, #32]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #48]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #64]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #80]             // 16-byte Folded Spill
	mov	x29, sp
	sub	sp, sp, #16                     // =16
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	adrp	x22, env
	adrp	x20, SymTab+8
	add	x20, x20, :lo12:SymTab+8
	ldr	x8, [x22, :lo12:env]
	stp	x20, x8, [x29, #-16]
	sub	x8, x29, #16                    // =16
	str	x8, [x22, :lo12:env]
	ldp	w0, w8, [x9]
	bfi	x0, x8, #32, #32
	ldp	w21, w8, [x9, #8]
	bfi	x21, x8, #32, #32
	tst	x0, #0x6
	b.ne	.LBB113_4
// %bb.1:                               // %"$3"
	tbz	w0, #3, .LBB113_3
// %bb.2:                               // %"$6"
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB113_4
.LBB113_3:                              // %"$5"
	bl	evList
.LBB113_4:                              // %"$2"
	mov	x8, sp
	sub	x19, x8, #48                    // =48
	mov	sp, x19
	lsr	x24, x20, #32
	mov	w25, #2
	stp	w20, w24, [x8, #-40]
	stp	w25, wzr, [x8, #-32]
	lsr	x9, x0, #32
	mov	x10, x19
	stur	w9, [x8, #-20]
	str	w0, [x10, #24]!
	sub	x23, sp, #16                    // =16
	mov	sp, x23
	ldr	x9, [x22, :lo12:env]
	str	x10, [x22, :lo12:env]
	lsr	x11, x10, #32
	lsr	x12, x9, #32
	stp	w9, w12, [x8, #-16]
	stp	w10, w11, [x8, #-48]
	mov	x27, x19
	mov	x26, x23
.LBB113_5:                              // %"$7"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w0, w8, [x21]
	bfi	x0, x8, #32, #32
	tst	x0, #0x6
	b.ne	.LBB113_9
// %bb.6:                               // %"$9"
                                        //   in Loop: Header=BB113_5 Depth=1
	tbz	w0, #3, .LBB113_8
// %bb.7:                               // %"$12"
                                        //   in Loop: Header=BB113_5 Depth=1
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB113_9
.LBB113_8:                              // %"$11"
                                        //   in Loop: Header=BB113_5 Depth=1
	bl	evList
.LBB113_9:                              // %"$8"
                                        //   in Loop: Header=BB113_5 Depth=1
	ldr	x8, [x22, :lo12:env]
	mov	x9, sp
	sub	x10, x9, #16                    // =16
	mov	sp, x10
	lsr	x11, x0, #32
	lsr	x12, x8, #32
	stp	w0, w11, [x9, #-16]
	stp	w8, w12, [x9, #-8]
	str	x10, [x22, :lo12:env]
	tst	x0, #0xf
	stp	w0, w11, [x26]
	b.ne	.LBB113_11
// %bb.10:                              // %"$13"
                                        //   in Loop: Header=BB113_5 Depth=1
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
.LBB113_11:                             // %"$14"
                                        //   in Loop: Header=BB113_5 Depth=1
	mov	x9, sp
	sub	x8, x9, #48                     // =48
	mov	sp, x8
	stp	w20, w24, [x9, #-40]
	stp	w25, wzr, [x9, #-32]
	lsr	x10, x0, #32
	stur	w10, [x9, #-20]
	mov	x10, x8
	str	w0, [x10, #24]!
	lsr	x11, x8, #32
	stp	w8, w11, [x27, #8]
	ldr	x11, [x22, :lo12:env]
	lsr	x12, x11, #32
	stp	w11, w12, [x9, #-16]
	str	x10, [x22, :lo12:env]
	lsr	x11, x10, #32
	stp	w10, w11, [x9, #-48]
	ldp	w21, w9, [x21, #8]
	bfi	x21, x9, #32, #32
	tst	x21, #0xf
	b.ne	.LBB113_13
// %bb.12:                              // %"$15"
                                        //   in Loop: Header=BB113_5 Depth=1
	sub	x9, sp, #16                     // =16
	mov	sp, x9
	lsr	x10, x9, #32
	stp	w9, w10, [x26, #8]
	mov	x27, x8
	mov	x26, x9
	b	.LBB113_5
.LBB113_13:                             // %"$16"
	adrp	x20, SymTab+8
	add	x20, x20, :lo12:SymTab+8
	ldrb	w8, [x23]
	tst	w8, #0xf
	mov	x21, x20
	b.eq	.LBB113_15
.LBB113_14:                             // %"$18"
	ldur	x8, [x29, #-8]
	str	x8, [x22, :lo12:env]
	mov	x0, x21
	mov	sp, x29
	ldp	x20, x19, [sp, #80]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #64]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #48]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #32]             // 16-byte Folded Reload
	ldr	x27, [sp, #16]                  // 8-byte Folded Reload
	ldp	x29, x30, [sp], #96             // 16-byte Folded Reload
	ret
.LBB113_15:                             // %"$19.preheader"
	mov	x24, xzr
	mov	x21, x20
	b	.LBB113_17
.LBB113_16:                             //   in Loop: Header=BB113_17 Depth=1
	mov	x24, x0
.LBB113_17:                             // %"$19"
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB113_25 Depth 2
	mov	x0, x19
	bl	evList
	cmp	x0, x20
	b.ne	.LBB113_19
// %bb.18:                              //   in Loop: Header=BB113_17 Depth=1
	mov	x0, x24
	b	.LBB113_23
.LBB113_19:                             // %"$20"
                                        //   in Loop: Header=BB113_17 Depth=1
	mov	x1, x20
	bl	cons
	cbz	x24, .LBB113_21
// %bb.20:                              // %"$22"
                                        //   in Loop: Header=BB113_17 Depth=1
	add	x8, x24, #8                     // =8
	b	.LBB113_22
.LBB113_21:                             // %"$23"
                                        //   in Loop: Header=BB113_17 Depth=1
	sub	x8, x29, #16                    // =16
	mov	x21, x0
.LBB113_22:                             // %"$24"
                                        //   in Loop: Header=BB113_17 Depth=1
	lsr	x9, x0, #32
	stp	w0, w9, [x8]
.LBB113_23:                             // %"$21"
                                        //   in Loop: Header=BB113_17 Depth=1
	ldp	w9, w8, [x23]
	bfi	x9, x8, #32, #32
	ldp	w9, w8, [x9, #8]
	stp	w9, w8, [x23]
	bfi	x9, x8, #32, #32
	tst	x9, #0xf
	b.ne	.LBB113_14
// %bb.24:                              // %"$25"
                                        //   in Loop: Header=BB113_17 Depth=1
	ldp	w8, w10, [x19, #8]
	bfi	x8, x10, #32, #32
	ldp	w10, w11, [x9]
	bfi	x10, x11, #32, #32
	mov	x9, x23
.LBB113_25:                             // %"$27"
                                        //   Parent Loop BB113_17 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	lsr	x11, x10, #32
	stp	w10, w11, [x8, #24]
	ldp	w8, w10, [x8, #8]
	bfi	x8, x10, #32, #32
	tst	x8, #0xf
	b.ne	.LBB113_16
// %bb.26:                              // %"$28"
                                        //   in Loop: Header=BB113_25 Depth=2
	ldp	w9, w10, [x9, #8]
	bfi	x9, x10, #32, #32
	ldp	w10, w11, [x9]
	bfi	x10, x11, #32, #32
	tst	x10, #0xf
	b.ne	.LBB113_25
// %bb.27:                              // %"$31"
                                        //   in Loop: Header=BB113_25 Depth=2
	ldp	w10, w11, [x10, #8]
	stp	w10, w11, [x9]
	bfi	x10, x11, #32, #32
	tst	x10, #0xf
	b.ne	.LBB113_25
// %bb.28:                              // %"$33"
                                        //   in Loop: Header=BB113_25 Depth=2
	ldp	w10, w11, [x10]
	bfi	x10, x11, #32, #32
	b	.LBB113_25
.Lfunc_end113:
	.size	_extract, .Lfunc_end113-_extract
	.cfi_endproc
                                        // -- End function
	.globl	_seek                           // -- Begin function _seek
	.p2align	4
	.type	_seek,@function
_seek:                                  // @_seek
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-80]!           // 16-byte Folded Spill
	stp	x26, x25, [sp, #16]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #32]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #48]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #64]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 80
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w30, -72
	.cfi_offset w29, -80
	ldp	w23, w8, [x0, #8]
	bfi	x23, x8, #32, #32
	ldp	w0, w8, [x23]
	bfi	x0, x8, #32, #32
	tst	x0, #0x6
	b.ne	.LBB114_4
// %bb.1:                               // %"$3"
	tbz	w0, #3, .LBB114_3
// %bb.2:                               // %"$6"
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB114_4
.LBB114_3:                              // %"$5"
	bl	evList
.LBB114_4:                              // %"$2"
	mov	x9, sp
	sub	x20, x9, #48                    // =48
	mov	sp, x20
	adrp	x19, SymTab+8
	add	x19, x19, :lo12:SymTab+8
	mov	w24, #2
	mov	x21, x20
	stp	w24, wzr, [x9, #-32]
	lsr	x25, x19, #32
	stp	w19, w25, [x9, #-40]
	str	w0, [x21, #24]!
	lsr	x10, x0, #32
	adrp	x22, env
	mov	x8, x21
	mov	x26, x20
	stur	w10, [x9, #-20]
	b	.LBB114_7
.LBB114_5:                              // %"$13"
                                        //   in Loop: Header=BB114_7 Depth=1
	bl	evList
.LBB114_6:                              // %"$10"
                                        //   in Loop: Header=BB114_7 Depth=1
	mov	x9, sp
	sub	x10, x9, #48                    // =48
	mov	sp, x10
	stp	w19, w25, [x9, #-40]
	stp	w24, wzr, [x9, #-32]
	mov	x8, x10
	str	w0, [x8, #24]!
	lsr	x11, x0, #32
	stur	w11, [x9, #-20]
	lsr	x9, x10, #32
	stp	w10, w9, [x26, #8]
	mov	x26, x10
.LBB114_7:                              // %"$7"
                                        // =>This Inner Loop Header: Depth=1
	ldr	x9, [x22, :lo12:env]
	lsr	x10, x9, #32
	stp	w9, w10, [x8, #8]
	str	x8, [x22, :lo12:env]
	lsr	x9, x8, #32
	stp	w8, w9, [x26]
	ldp	w23, w8, [x23, #8]
	bfi	x23, x8, #32, #32
	tst	x23, #0xf
	b.ne	.LBB114_15
// %bb.8:                               // %"$8"
                                        //   in Loop: Header=BB114_7 Depth=1
	ldp	w0, w8, [x23]
	bfi	x0, x8, #32, #32
	tst	x0, #0x6
	b.ne	.LBB114_6
// %bb.9:                               // %"$11"
                                        //   in Loop: Header=BB114_7 Depth=1
	tbz	w0, #3, .LBB114_5
// %bb.10:                              // %"$14"
                                        //   in Loop: Header=BB114_7 Depth=1
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB114_6
.LBB114_11:                             // %"$16"
                                        //   in Loop: Header=BB114_15 Depth=1
	mov	x0, x20
	bl	evList
	cmp	x0, x19
	b.eq	.LBB114_13
	b	.LBB114_16
.LBB114_12:                             // %"$23"
                                        //   in Loop: Header=BB114_13 Depth=2
	ldp	w23, w8, [x23, #8]
	bfi	x23, x8, #32, #32
	tst	x23, #0xf
	b.ne	.LBB114_15
.LBB114_13:                             // %"$21"
                                        //   Parent Loop BB114_15 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	w8, w9, [x23, #24]
	bfi	x8, x9, #32, #32
	tst	x8, #0xf
	b.ne	.LBB114_12
// %bb.14:                              // %"$22"
                                        //   in Loop: Header=BB114_13 Depth=2
	ldp	w9, w8, [x8, #8]
	stp	w9, w8, [x23, #24]
	b	.LBB114_12
.LBB114_15:                             // %"$15"
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB114_13 Depth 2
	ldp	w23, w8, [x20, #8]
	bfi	x23, x8, #32, #32
	ldrb	w8, [x23, #24]
	tst	w8, #0xf
	b.eq	.LBB114_11
	b	.LBB114_17
.LBB114_16:                             // %"$20"
	adrp	x8, SymTab+392
	str	x0, [x8, :lo12:SymTab+392]
	ldp	w19, w8, [x23, #24]
	bfi	x19, x8, #32, #32
.LBB114_17:                             // %"$17"
	ldp	w9, w8, [x21, #8]
	bfi	x9, x8, #32, #32
	str	x9, [x22, :lo12:env]
	mov	x0, x19
	mov	sp, x29
	ldp	x20, x19, [sp, #64]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #48]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #32]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #80             // 16-byte Folded Reload
	ret
.Lfunc_end114:
	.size	_seek, .Lfunc_end114-_seek
	.cfi_endproc
                                        // -- End function
	.globl	_find                           // -- Begin function _find
	.p2align	4
	.type	_find,@function
_find:                                  // @_find
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-96]!           // 16-byte Folded Spill
	stp	x28, x27, [sp, #16]             // 16-byte Folded Spill
	stp	x26, x25, [sp, #32]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #48]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #64]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #80]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w0, w8, [x9]
	bfi	x0, x8, #32, #32
	ldp	w20, w8, [x9, #8]
	bfi	x20, x8, #32, #32
	tst	x0, #0x6
	b.ne	.LBB115_4
// %bb.1:                               // %"$3"
	tbz	w0, #3, .LBB115_3
// %bb.2:                               // %"$6"
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB115_4
.LBB115_3:                              // %"$5"
	bl	evList
.LBB115_4:                              // %"$2"
	mov	x8, sp
	sub	x19, x8, #48                    // =48
	mov	sp, x19
	adrp	x24, SymTab+8
	add	x24, x24, :lo12:SymTab+8
	mov	w25, #2
	stp	w25, wzr, [x8, #-32]
	lsr	x9, x0, #32
	mov	x21, x19
	lsr	x26, x24, #32
	stp	w24, w26, [x8, #-40]
	stur	w9, [x8, #-20]
	str	w0, [x21, #24]!
	sub	x23, sp, #16                    // =16
	mov	sp, x23
	adrp	x22, env
	ldr	x9, [x22, :lo12:env]
	str	x21, [x22, :lo12:env]
	lsr	x10, x21, #32
	lsr	x11, x9, #32
	stp	w9, w11, [x8, #-16]
	stp	w21, w10, [x8, #-48]
	mov	x28, x19
	mov	x27, x23
.LBB115_5:                              // %"$7"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w0, w8, [x20]
	bfi	x0, x8, #32, #32
	tst	x0, #0x6
	b.ne	.LBB115_9
// %bb.6:                               // %"$9"
                                        //   in Loop: Header=BB115_5 Depth=1
	tbz	w0, #3, .LBB115_8
// %bb.7:                               // %"$12"
                                        //   in Loop: Header=BB115_5 Depth=1
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB115_9
.LBB115_8:                              // %"$11"
                                        //   in Loop: Header=BB115_5 Depth=1
	bl	evList
.LBB115_9:                              // %"$8"
                                        //   in Loop: Header=BB115_5 Depth=1
	ldr	x8, [x22, :lo12:env]
	mov	x9, sp
	sub	x10, x9, #16                    // =16
	mov	sp, x10
	lsr	x11, x0, #32
	lsr	x12, x8, #32
	stp	w0, w11, [x9, #-16]
	stp	w8, w12, [x9, #-8]
	str	x10, [x22, :lo12:env]
	tst	x0, #0xf
	stp	w0, w11, [x27]
	b.ne	.LBB115_11
// %bb.10:                              // %"$13"
                                        //   in Loop: Header=BB115_5 Depth=1
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
.LBB115_11:                             // %"$14"
                                        //   in Loop: Header=BB115_5 Depth=1
	mov	x9, sp
	sub	x8, x9, #48                     // =48
	mov	sp, x8
	stp	w24, w26, [x9, #-40]
	stp	w25, wzr, [x9, #-32]
	lsr	x10, x0, #32
	stur	w10, [x9, #-20]
	mov	x10, x8
	str	w0, [x10, #24]!
	lsr	x11, x8, #32
	stp	w8, w11, [x28, #8]
	ldr	x11, [x22, :lo12:env]
	lsr	x12, x11, #32
	stp	w11, w12, [x9, #-16]
	str	x10, [x22, :lo12:env]
	lsr	x11, x10, #32
	stp	w10, w11, [x9, #-48]
	ldp	w20, w9, [x20, #8]
	bfi	x20, x9, #32, #32
	tst	x20, #0xf
	b.ne	.LBB115_13
// %bb.12:                              // %"$15"
                                        //   in Loop: Header=BB115_5 Depth=1
	sub	x9, sp, #16                     // =16
	mov	sp, x9
	lsr	x10, x9, #32
	stp	w9, w10, [x27, #8]
	mov	x28, x8
	mov	x27, x9
	b	.LBB115_5
.LBB115_13:                             // %"$16"
	adrp	x20, SymTab+8
	add	x20, x20, :lo12:SymTab+8
	ldrb	w8, [x23]
	tst	w8, #0xf
	b.ne	.LBB115_22
	b	.LBB115_20
.LBB115_14:                             // %"$21"
                                        //   in Loop: Header=BB115_20 Depth=1
	ldp	w9, w8, [x23]
	bfi	x9, x8, #32, #32
	ldp	w9, w8, [x9, #8]
	stp	w9, w8, [x23]
	bfi	x9, x8, #32, #32
	tst	x9, #0xf
	b.ne	.LBB115_22
// %bb.15:                              // %"$24"
                                        //   in Loop: Header=BB115_20 Depth=1
	ldp	w8, w10, [x19, #8]
	bfi	x8, x10, #32, #32
	ldp	w10, w11, [x9]
	bfi	x10, x11, #32, #32
	mov	x9, x23
.LBB115_16:                             // %"$26"
                                        //   Parent Loop BB115_20 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	lsr	x11, x10, #32
	stp	w10, w11, [x8, #24]
	ldp	w8, w10, [x8, #8]
	bfi	x8, x10, #32, #32
	tst	x8, #0xf
	b.ne	.LBB115_20
// %bb.17:                              // %"$27"
                                        //   in Loop: Header=BB115_16 Depth=2
	ldp	w9, w10, [x9, #8]
	bfi	x9, x10, #32, #32
	ldp	w10, w11, [x9]
	bfi	x10, x11, #32, #32
	tst	x10, #0xf
	b.ne	.LBB115_16
// %bb.18:                              // %"$30"
                                        //   in Loop: Header=BB115_16 Depth=2
	ldp	w10, w11, [x10, #8]
	stp	w10, w11, [x9]
	bfi	x10, x11, #32, #32
	tst	x10, #0xf
	b.ne	.LBB115_16
// %bb.19:                              // %"$32"
                                        //   in Loop: Header=BB115_16 Depth=2
	ldp	w10, w11, [x10]
	bfi	x10, x11, #32, #32
	b	.LBB115_16
.LBB115_20:                             // %"$20"
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB115_16 Depth 2
	mov	x0, x19
	bl	evList
	cmp	x0, x20
	b.eq	.LBB115_14
// %bb.21:                              // %"$23"
	adrp	x8, SymTab+392
	str	x0, [x8, :lo12:SymTab+392]
	ldp	w9, w8, [x23]
	bfi	x9, x8, #32, #32
	ldp	w20, w8, [x9]
	bfi	x20, x8, #32, #32
.LBB115_22:                             // %"$19"
	ldp	w9, w8, [x21, #8]
	bfi	x9, x8, #32, #32
	str	x9, [x22, :lo12:env]
	mov	x0, x20
	mov	sp, x29
	ldp	x20, x19, [sp, #80]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #64]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #48]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #32]             // 16-byte Folded Reload
	ldp	x28, x27, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #96             // 16-byte Folded Reload
	ret
.Lfunc_end115:
	.size	_find, .Lfunc_end115-_find
	.cfi_endproc
                                        // -- End function
	.globl	_pick                           // -- Begin function _pick
	.p2align	4
	.type	_pick,@function
_pick:                                  // @_pick
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-96]!           // 16-byte Folded Spill
	stp	x28, x27, [sp, #16]             // 16-byte Folded Spill
	stp	x26, x25, [sp, #32]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #48]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #64]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #80]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w0, w8, [x9]
	bfi	x0, x8, #32, #32
	ldp	w20, w8, [x9, #8]
	bfi	x20, x8, #32, #32
	tst	x0, #0x6
	b.ne	.LBB116_4
// %bb.1:                               // %"$3"
	tbz	w0, #3, .LBB116_3
// %bb.2:                               // %"$6"
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB116_4
.LBB116_3:                              // %"$5"
	bl	evList
.LBB116_4:                              // %"$2"
	mov	x8, sp
	sub	x19, x8, #48                    // =48
	mov	sp, x19
	adrp	x24, SymTab+8
	add	x24, x24, :lo12:SymTab+8
	mov	w25, #2
	stp	w25, wzr, [x8, #-32]
	lsr	x9, x0, #32
	mov	x21, x19
	lsr	x26, x24, #32
	stp	w24, w26, [x8, #-40]
	stur	w9, [x8, #-20]
	str	w0, [x21, #24]!
	sub	x23, sp, #16                    // =16
	mov	sp, x23
	adrp	x22, env
	ldr	x9, [x22, :lo12:env]
	str	x21, [x22, :lo12:env]
	lsr	x10, x21, #32
	lsr	x11, x9, #32
	stp	w9, w11, [x8, #-16]
	stp	w21, w10, [x8, #-48]
	mov	x28, x19
	mov	x27, x23
.LBB116_5:                              // %"$7"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w0, w8, [x20]
	bfi	x0, x8, #32, #32
	tst	x0, #0x6
	b.ne	.LBB116_9
// %bb.6:                               // %"$9"
                                        //   in Loop: Header=BB116_5 Depth=1
	tbz	w0, #3, .LBB116_8
// %bb.7:                               // %"$12"
                                        //   in Loop: Header=BB116_5 Depth=1
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB116_9
.LBB116_8:                              // %"$11"
                                        //   in Loop: Header=BB116_5 Depth=1
	bl	evList
.LBB116_9:                              // %"$8"
                                        //   in Loop: Header=BB116_5 Depth=1
	ldr	x8, [x22, :lo12:env]
	mov	x9, sp
	sub	x10, x9, #16                    // =16
	mov	sp, x10
	lsr	x11, x0, #32
	lsr	x12, x8, #32
	stp	w0, w11, [x9, #-16]
	stp	w8, w12, [x9, #-8]
	str	x10, [x22, :lo12:env]
	tst	x0, #0xf
	stp	w0, w11, [x27]
	b.ne	.LBB116_11
// %bb.10:                              // %"$13"
                                        //   in Loop: Header=BB116_5 Depth=1
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
.LBB116_11:                             // %"$14"
                                        //   in Loop: Header=BB116_5 Depth=1
	mov	x9, sp
	sub	x8, x9, #48                     // =48
	mov	sp, x8
	stp	w24, w26, [x9, #-40]
	stp	w25, wzr, [x9, #-32]
	lsr	x10, x0, #32
	stur	w10, [x9, #-20]
	mov	x10, x8
	str	w0, [x10, #24]!
	lsr	x11, x8, #32
	stp	w8, w11, [x28, #8]
	ldr	x11, [x22, :lo12:env]
	lsr	x12, x11, #32
	stp	w11, w12, [x9, #-16]
	str	x10, [x22, :lo12:env]
	lsr	x11, x10, #32
	stp	w10, w11, [x9, #-48]
	ldp	w20, w9, [x20, #8]
	bfi	x20, x9, #32, #32
	tst	x20, #0xf
	b.ne	.LBB116_13
// %bb.12:                              // %"$15"
                                        //   in Loop: Header=BB116_5 Depth=1
	sub	x9, sp, #16                     // =16
	mov	sp, x9
	lsr	x10, x9, #32
	stp	w9, w10, [x27, #8]
	mov	x28, x8
	mov	x27, x9
	b	.LBB116_5
.LBB116_13:                             // %"$16"
	adrp	x20, SymTab+8
	add	x20, x20, :lo12:SymTab+8
	ldrb	w8, [x23]
	tst	w8, #0xf
	b.ne	.LBB116_22
	b	.LBB116_20
.LBB116_14:                             // %"$21"
                                        //   in Loop: Header=BB116_20 Depth=1
	ldp	w9, w8, [x23]
	bfi	x9, x8, #32, #32
	ldp	w9, w8, [x9, #8]
	stp	w9, w8, [x23]
	bfi	x9, x8, #32, #32
	tst	x9, #0xf
	b.ne	.LBB116_22
// %bb.15:                              // %"$24"
                                        //   in Loop: Header=BB116_20 Depth=1
	ldp	w8, w10, [x19, #8]
	bfi	x8, x10, #32, #32
	ldp	w10, w11, [x9]
	bfi	x10, x11, #32, #32
	mov	x9, x23
.LBB116_16:                             // %"$26"
                                        //   Parent Loop BB116_20 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	lsr	x11, x10, #32
	stp	w10, w11, [x8, #24]
	ldp	w8, w10, [x8, #8]
	bfi	x8, x10, #32, #32
	tst	x8, #0xf
	b.ne	.LBB116_20
// %bb.17:                              // %"$27"
                                        //   in Loop: Header=BB116_16 Depth=2
	ldp	w9, w10, [x9, #8]
	bfi	x9, x10, #32, #32
	ldp	w10, w11, [x9]
	bfi	x10, x11, #32, #32
	tst	x10, #0xf
	b.ne	.LBB116_16
// %bb.18:                              // %"$30"
                                        //   in Loop: Header=BB116_16 Depth=2
	ldp	w10, w11, [x10, #8]
	stp	w10, w11, [x9]
	bfi	x10, x11, #32, #32
	tst	x10, #0xf
	b.ne	.LBB116_16
// %bb.19:                              // %"$32"
                                        //   in Loop: Header=BB116_16 Depth=2
	ldp	w10, w11, [x10]
	bfi	x10, x11, #32, #32
	b	.LBB116_16
.LBB116_20:                             // %"$20"
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB116_16 Depth 2
	mov	x0, x19
	bl	evList
	cmp	x0, x20
	b.eq	.LBB116_14
// %bb.21:
	mov	x20, x0
.LBB116_22:                             // %"$19"
	ldp	w9, w8, [x21, #8]
	bfi	x9, x8, #32, #32
	str	x9, [x22, :lo12:env]
	mov	x0, x20
	mov	sp, x29
	ldp	x20, x19, [sp, #80]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #64]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #48]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #32]             // 16-byte Folded Reload
	ldp	x28, x27, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #96             // 16-byte Folded Reload
	ret
.Lfunc_end116:
	.size	_pick, .Lfunc_end116-_pick
	.cfi_endproc
                                        // -- End function
	.globl	_fully                          // -- Begin function _fully
	.p2align	4
	.type	_fully,@function
_fully:                                 // @_fully
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-96]!           // 16-byte Folded Spill
	stp	x28, x27, [sp, #16]             // 16-byte Folded Spill
	stp	x26, x25, [sp, #32]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #48]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #64]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #80]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w0, w8, [x9]
	bfi	x0, x8, #32, #32
	ldp	w24, w8, [x9, #8]
	bfi	x24, x8, #32, #32
	tst	x0, #0x6
	b.ne	.LBB117_4
// %bb.1:                               // %"$3"
	tbz	w0, #3, .LBB117_3
// %bb.2:                               // %"$6"
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB117_4
.LBB117_3:                              // %"$5"
	bl	evList
.LBB117_4:                              // %"$2"
	mov	x8, sp
	sub	x19, x8, #48                    // =48
	mov	sp, x19
	adrp	x21, SymTab+8
	add	x21, x21, :lo12:SymTab+8
	mov	w25, #2
	stp	w25, wzr, [x8, #-32]
	lsr	x9, x0, #32
	mov	x20, x19
	lsr	x26, x21, #32
	stp	w21, w26, [x8, #-40]
	stur	w9, [x8, #-20]
	str	w0, [x20, #24]!
	sub	x23, sp, #16                    // =16
	mov	sp, x23
	adrp	x22, env
	ldr	x9, [x22, :lo12:env]
	str	x20, [x22, :lo12:env]
	lsr	x10, x20, #32
	lsr	x11, x9, #32
	stp	w9, w11, [x8, #-16]
	stp	w20, w10, [x8, #-48]
	mov	x28, x19
	mov	x27, x23
.LBB117_5:                              // %"$7"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w0, w8, [x24]
	bfi	x0, x8, #32, #32
	tst	x0, #0x6
	b.ne	.LBB117_9
// %bb.6:                               // %"$9"
                                        //   in Loop: Header=BB117_5 Depth=1
	tbz	w0, #3, .LBB117_8
// %bb.7:                               // %"$12"
                                        //   in Loop: Header=BB117_5 Depth=1
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB117_9
.LBB117_8:                              // %"$11"
                                        //   in Loop: Header=BB117_5 Depth=1
	bl	evList
.LBB117_9:                              // %"$8"
                                        //   in Loop: Header=BB117_5 Depth=1
	ldr	x8, [x22, :lo12:env]
	mov	x9, sp
	sub	x10, x9, #16                    // =16
	mov	sp, x10
	lsr	x11, x0, #32
	lsr	x12, x8, #32
	stp	w0, w11, [x9, #-16]
	stp	w8, w12, [x9, #-8]
	str	x10, [x22, :lo12:env]
	tst	x0, #0xf
	stp	w0, w11, [x27]
	b.ne	.LBB117_11
// %bb.10:                              // %"$13"
                                        //   in Loop: Header=BB117_5 Depth=1
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
.LBB117_11:                             // %"$14"
                                        //   in Loop: Header=BB117_5 Depth=1
	mov	x9, sp
	sub	x8, x9, #48                     // =48
	mov	sp, x8
	stp	w21, w26, [x9, #-40]
	stp	w25, wzr, [x9, #-32]
	lsr	x10, x0, #32
	stur	w10, [x9, #-20]
	mov	x10, x8
	str	w0, [x10, #24]!
	lsr	x11, x8, #32
	stp	w8, w11, [x28, #8]
	ldr	x11, [x22, :lo12:env]
	lsr	x12, x11, #32
	stp	w11, w12, [x9, #-16]
	str	x10, [x22, :lo12:env]
	lsr	x11, x10, #32
	stp	w10, w11, [x9, #-48]
	ldp	w24, w9, [x24, #8]
	bfi	x24, x9, #32, #32
	tst	x24, #0xf
	b.ne	.LBB117_13
// %bb.12:                              // %"$15"
                                        //   in Loop: Header=BB117_5 Depth=1
	sub	x9, sp, #16                     // =16
	mov	sp, x9
	lsr	x10, x9, #32
	stp	w9, w10, [x27, #8]
	mov	x28, x8
	mov	x27, x9
	b	.LBB117_5
.LBB117_13:                             // %"$16"
	ldrb	w8, [x23]
	tst	w8, #0xf
	b.eq	.LBB117_15
// %bb.14:
	adrp	x0, SymTab+216
	add	x0, x0, :lo12:SymTab+216
	b	.LBB117_24
.LBB117_15:                             // %"$20.preheader"
	adrp	x24, SymTab+216
	add	x24, x24, :lo12:SymTab+216
.LBB117_16:                             // %"$20"
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB117_19 Depth 2
	mov	x0, x19
	bl	evList
	cmp	x0, x21
	b.eq	.LBB117_24
// %bb.17:                              // %"$21"
                                        //   in Loop: Header=BB117_16 Depth=1
	ldp	w9, w8, [x23]
	bfi	x9, x8, #32, #32
	ldp	w9, w8, [x9, #8]
	stp	w9, w8, [x23]
	bfi	x9, x8, #32, #32
	tst	x9, #0xf
	b.ne	.LBB117_23
// %bb.18:                              // %"$24"
                                        //   in Loop: Header=BB117_16 Depth=1
	ldp	w8, w10, [x19, #8]
	bfi	x8, x10, #32, #32
	ldp	w10, w11, [x9]
	bfi	x10, x11, #32, #32
	mov	x9, x23
.LBB117_19:                             // %"$26"
                                        //   Parent Loop BB117_16 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	lsr	x11, x10, #32
	stp	w10, w11, [x8, #24]
	ldp	w8, w10, [x8, #8]
	bfi	x8, x10, #32, #32
	tst	x8, #0xf
	b.ne	.LBB117_16
// %bb.20:                              // %"$27"
                                        //   in Loop: Header=BB117_19 Depth=2
	ldp	w9, w10, [x9, #8]
	bfi	x9, x10, #32, #32
	ldp	w10, w11, [x9]
	bfi	x10, x11, #32, #32
	tst	x10, #0xf
	b.ne	.LBB117_19
// %bb.21:                              // %"$30"
                                        //   in Loop: Header=BB117_19 Depth=2
	ldp	w10, w11, [x10, #8]
	stp	w10, w11, [x9]
	bfi	x10, x11, #32, #32
	tst	x10, #0xf
	b.ne	.LBB117_19
// %bb.22:                              // %"$32"
                                        //   in Loop: Header=BB117_19 Depth=2
	ldp	w10, w11, [x10]
	bfi	x10, x11, #32, #32
	b	.LBB117_19
.LBB117_23:
	mov	x0, x24
.LBB117_24:                             // %"$19"
	ldp	w9, w8, [x20, #8]
	bfi	x9, x8, #32, #32
	str	x9, [x22, :lo12:env]
	mov	sp, x29
	ldp	x20, x19, [sp, #80]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #64]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #48]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #32]             // 16-byte Folded Reload
	ldp	x28, x27, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #96             // 16-byte Folded Reload
	ret
.Lfunc_end117:
	.size	_fully, .Lfunc_end117-_fully
	.cfi_endproc
                                        // -- End function
	.globl	_cnt                            // -- Begin function _cnt
	.p2align	4
	.type	_cnt,@function
_cnt:                                   // @_cnt
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-96]!           // 16-byte Folded Spill
	stp	x28, x27, [sp, #16]             // 16-byte Folded Spill
	stp	x26, x25, [sp, #32]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #48]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #64]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #80]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w0, w8, [x9]
	bfi	x0, x8, #32, #32
	ldp	w20, w8, [x9, #8]
	bfi	x20, x8, #32, #32
	tst	x0, #0x6
	b.ne	.LBB118_4
// %bb.1:                               // %"$3"
	tbz	w0, #3, .LBB118_3
// %bb.2:                               // %"$6"
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB118_4
.LBB118_3:                              // %"$5"
	bl	evList
.LBB118_4:                              // %"$2"
	mov	x8, sp
	sub	x19, x8, #48                    // =48
	mov	sp, x19
	adrp	x21, SymTab+8
	add	x21, x21, :lo12:SymTab+8
	mov	w25, #2
	stp	w25, wzr, [x8, #-32]
	lsr	x9, x0, #32
	mov	x22, x19
	lsr	x26, x21, #32
	stp	w21, w26, [x8, #-40]
	stur	w9, [x8, #-20]
	str	w0, [x22, #24]!
	sub	x24, sp, #16                    // =16
	mov	sp, x24
	adrp	x23, env
	ldr	x9, [x23, :lo12:env]
	str	x22, [x23, :lo12:env]
	lsr	x10, x22, #32
	lsr	x11, x9, #32
	stp	w9, w11, [x8, #-16]
	stp	w22, w10, [x8, #-48]
	mov	x28, x19
	mov	x27, x24
.LBB118_5:                              // %"$7"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w0, w8, [x20]
	bfi	x0, x8, #32, #32
	tst	x0, #0x6
	b.ne	.LBB118_9
// %bb.6:                               // %"$9"
                                        //   in Loop: Header=BB118_5 Depth=1
	tbz	w0, #3, .LBB118_8
// %bb.7:                               // %"$12"
                                        //   in Loop: Header=BB118_5 Depth=1
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB118_9
.LBB118_8:                              // %"$11"
                                        //   in Loop: Header=BB118_5 Depth=1
	bl	evList
.LBB118_9:                              // %"$8"
                                        //   in Loop: Header=BB118_5 Depth=1
	ldr	x8, [x23, :lo12:env]
	mov	x9, sp
	sub	x10, x9, #16                    // =16
	mov	sp, x10
	lsr	x11, x0, #32
	lsr	x12, x8, #32
	stp	w0, w11, [x9, #-16]
	stp	w8, w12, [x9, #-8]
	str	x10, [x23, :lo12:env]
	tst	x0, #0xf
	stp	w0, w11, [x27]
	b.ne	.LBB118_11
// %bb.10:                              // %"$13"
                                        //   in Loop: Header=BB118_5 Depth=1
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
.LBB118_11:                             // %"$14"
                                        //   in Loop: Header=BB118_5 Depth=1
	mov	x9, sp
	sub	x8, x9, #48                     // =48
	mov	sp, x8
	stp	w21, w26, [x9, #-40]
	stp	w25, wzr, [x9, #-32]
	lsr	x10, x0, #32
	stur	w10, [x9, #-20]
	mov	x10, x8
	str	w0, [x10, #24]!
	lsr	x11, x8, #32
	stp	w8, w11, [x28, #8]
	ldr	x11, [x23, :lo12:env]
	lsr	x12, x11, #32
	stp	w11, w12, [x9, #-16]
	str	x10, [x23, :lo12:env]
	lsr	x11, x10, #32
	stp	w10, w11, [x9, #-48]
	ldp	w20, w9, [x20, #8]
	bfi	x20, x9, #32, #32
	tst	x20, #0xf
	b.ne	.LBB118_13
// %bb.12:                              // %"$15"
                                        //   in Loop: Header=BB118_5 Depth=1
	sub	x9, sp, #16                     // =16
	mov	sp, x9
	lsr	x10, x9, #32
	stp	w9, w10, [x27, #8]
	mov	x28, x8
	mov	x27, x9
	b	.LBB118_5
.LBB118_13:                             // %"$16"
	ldrb	w8, [x24]
	mov	w20, #2
	tst	w8, #0xf
	b.ne	.LBB118_22
	b	.LBB118_19
.LBB118_14:                             // %"$22"
                                        //   in Loop: Header=BB118_19 Depth=1
	ldp	w8, w10, [x19, #8]
	bfi	x8, x10, #32, #32
	ldp	w10, w11, [x9]
	bfi	x10, x11, #32, #32
	mov	x9, x24
.LBB118_15:                             // %"$24"
                                        //   Parent Loop BB118_19 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	lsr	x11, x10, #32
	stp	w10, w11, [x8, #24]
	ldp	w8, w10, [x8, #8]
	bfi	x8, x10, #32, #32
	tst	x8, #0xf
	b.ne	.LBB118_19
// %bb.16:                              // %"$25"
                                        //   in Loop: Header=BB118_15 Depth=2
	ldp	w9, w10, [x9, #8]
	bfi	x9, x10, #32, #32
	ldp	w10, w11, [x9]
	bfi	x10, x11, #32, #32
	tst	x10, #0xf
	b.ne	.LBB118_15
// %bb.17:                              // %"$28"
                                        //   in Loop: Header=BB118_15 Depth=2
	ldp	w10, w11, [x10, #8]
	stp	w10, w11, [x9]
	bfi	x10, x11, #32, #32
	tst	x10, #0xf
	b.ne	.LBB118_15
// %bb.18:                              // %"$30"
                                        //   in Loop: Header=BB118_15 Depth=2
	ldp	w10, w11, [x10]
	bfi	x10, x11, #32, #32
	b	.LBB118_15
.LBB118_19:                             // %"$19"
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB118_15 Depth 2
	mov	x0, x19
	bl	evList
	cmp	x0, x21
	b.eq	.LBB118_21
// %bb.20:                              // %"$20"
                                        //   in Loop: Header=BB118_19 Depth=1
	add	x20, x20, #16                   // =16
.LBB118_21:                             // %"$21"
                                        //   in Loop: Header=BB118_19 Depth=1
	ldp	w9, w8, [x24]
	bfi	x9, x8, #32, #32
	ldp	w9, w8, [x9, #8]
	stp	w9, w8, [x24]
	bfi	x9, x8, #32, #32
	tst	x9, #0xf
	b.eq	.LBB118_14
.LBB118_22:                             // %"$18"
	ldp	w9, w8, [x22, #8]
	bfi	x9, x8, #32, #32
	str	x9, [x23, :lo12:env]
	mov	x0, x20
	mov	sp, x29
	ldp	x20, x19, [sp, #80]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #64]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #48]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #32]             // 16-byte Folded Reload
	ldp	x28, x27, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #96             // 16-byte Folded Reload
	ret
.Lfunc_end118:
	.size	_cnt, .Lfunc_end118-_cnt
	.cfi_endproc
                                        // -- End function
	.globl	_sum                            // -- Begin function _sum
	.p2align	4
	.type	_sum,@function
_sum:                                   // @_sum
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-96]!           // 16-byte Folded Spill
	str	x27, [sp, #16]                  // 8-byte Folded Spill
	stp	x26, x25, [sp, #32]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #48]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #64]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #80]             // 16-byte Folded Spill
	mov	x29, sp
	sub	sp, sp, #16                     // =16
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	adrp	x21, env
	ldr	x8, [x21, :lo12:env]
	mov	w10, #2
	stp	x10, x8, [x29, #-16]
	sub	x8, x29, #16                    // =16
	str	x8, [x21, :lo12:env]
	ldp	w0, w8, [x9]
	bfi	x0, x8, #32, #32
	ldp	w20, w8, [x9, #8]
	bfi	x20, x8, #32, #32
	tst	x0, #0x6
	b.ne	.LBB119_4
// %bb.1:                               // %"$3"
	tbz	w0, #3, .LBB119_3
// %bb.2:                               // %"$6"
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB119_4
.LBB119_3:                              // %"$5"
	bl	evList
.LBB119_4:                              // %"$2"
	mov	x8, sp
	sub	x19, x8, #48                    // =48
	mov	sp, x19
	adrp	x23, SymTab+8
	add	x23, x23, :lo12:SymTab+8
	mov	w24, #2
	stp	w24, wzr, [x8, #-32]
	lsr	x9, x0, #32
	mov	x10, x19
	lsr	x25, x23, #32
	stp	w23, w25, [x8, #-40]
	stur	w9, [x8, #-20]
	str	w0, [x10, #24]!
	sub	x22, sp, #16                    // =16
	mov	sp, x22
	ldr	x9, [x21, :lo12:env]
	str	x10, [x21, :lo12:env]
	lsr	x11, x10, #32
	lsr	x12, x9, #32
	stp	w9, w12, [x8, #-16]
	stp	w10, w11, [x8, #-48]
	mov	x27, x19
	mov	x26, x22
.LBB119_5:                              // %"$7"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w0, w8, [x20]
	bfi	x0, x8, #32, #32
	tst	x0, #0x6
	b.ne	.LBB119_9
// %bb.6:                               // %"$9"
                                        //   in Loop: Header=BB119_5 Depth=1
	tbz	w0, #3, .LBB119_8
// %bb.7:                               // %"$12"
                                        //   in Loop: Header=BB119_5 Depth=1
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB119_9
.LBB119_8:                              // %"$11"
                                        //   in Loop: Header=BB119_5 Depth=1
	bl	evList
.LBB119_9:                              // %"$8"
                                        //   in Loop: Header=BB119_5 Depth=1
	ldr	x8, [x21, :lo12:env]
	mov	x9, sp
	sub	x10, x9, #16                    // =16
	mov	sp, x10
	lsr	x11, x0, #32
	lsr	x12, x8, #32
	stp	w0, w11, [x9, #-16]
	stp	w8, w12, [x9, #-8]
	str	x10, [x21, :lo12:env]
	tst	x0, #0xf
	stp	w0, w11, [x26]
	b.ne	.LBB119_11
// %bb.10:                              // %"$13"
                                        //   in Loop: Header=BB119_5 Depth=1
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
.LBB119_11:                             // %"$14"
                                        //   in Loop: Header=BB119_5 Depth=1
	mov	x9, sp
	sub	x8, x9, #48                     // =48
	mov	sp, x8
	stp	w23, w25, [x9, #-40]
	stp	w24, wzr, [x9, #-32]
	lsr	x10, x0, #32
	stur	w10, [x9, #-20]
	mov	x10, x8
	str	w0, [x10, #24]!
	lsr	x11, x8, #32
	stp	w8, w11, [x27, #8]
	ldr	x11, [x21, :lo12:env]
	lsr	x12, x11, #32
	stp	w11, w12, [x9, #-16]
	str	x10, [x21, :lo12:env]
	lsr	x11, x10, #32
	stp	w10, w11, [x9, #-48]
	ldp	w20, w9, [x20, #8]
	bfi	x20, x9, #32, #32
	tst	x20, #0xf
	b.ne	.LBB119_13
// %bb.12:                              // %"$15"
                                        //   in Loop: Header=BB119_5 Depth=1
	sub	x9, sp, #16                     // =16
	mov	sp, x9
	lsr	x10, x9, #32
	stp	w9, w10, [x26, #8]
	mov	x27, x8
	mov	x26, x9
	b	.LBB119_5
.LBB119_13:                             // %"$16"
	ldrb	w8, [x22]
	mov	w20, #2
	tst	w8, #0xf
	b.ne	.LBB119_22
	b	.LBB119_19
.LBB119_14:                             // %"$22"
                                        //   in Loop: Header=BB119_19 Depth=1
	ldp	w8, w10, [x19, #8]
	bfi	x8, x10, #32, #32
	ldp	w10, w11, [x9]
	bfi	x10, x11, #32, #32
	mov	x9, x22
.LBB119_15:                             // %"$24"
                                        //   Parent Loop BB119_19 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	lsr	x11, x10, #32
	stp	w10, w11, [x8, #24]
	ldp	w8, w10, [x8, #8]
	bfi	x8, x10, #32, #32
	tst	x8, #0xf
	b.ne	.LBB119_19
// %bb.16:                              // %"$25"
                                        //   in Loop: Header=BB119_15 Depth=2
	ldp	w9, w10, [x9, #8]
	bfi	x9, x10, #32, #32
	ldp	w10, w11, [x9]
	bfi	x10, x11, #32, #32
	tst	x10, #0xf
	b.ne	.LBB119_15
// %bb.17:                              // %"$28"
                                        //   in Loop: Header=BB119_15 Depth=2
	ldp	w10, w11, [x10, #8]
	stp	w10, w11, [x9]
	bfi	x10, x11, #32, #32
	tst	x10, #0xf
	b.ne	.LBB119_15
// %bb.18:                              // %"$30"
                                        //   in Loop: Header=BB119_15 Depth=2
	ldp	w10, w11, [x10]
	bfi	x10, x11, #32, #32
	b	.LBB119_15
.LBB119_19:                             // %"$19"
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB119_15 Depth 2
	mov	x0, x19
	bl	evList
	tst	x0, #0x6
	b.eq	.LBB119_21
// %bb.20:                              // %"$20"
                                        //   in Loop: Header=BB119_19 Depth=1
	mov	x1, x0
	ldr	x8, [x21, :lo12:env]
	mov	x9, sp
	sub	x10, x9, #16                    // =16
	mov	sp, x10
	lsr	x11, x0, #32
	mov	x23, x10
	stp	w1, w11, [x9, #-16]
	str	w8, [x23, #8]!
	lsr	x8, x8, #32
	str	w8, [x23, #4]
	str	x10, [x21, :lo12:env]
	mov	x0, x20
	bl	adds
	mov	x20, x0
	stur	x0, [x29, #-16]
	ldp	w9, w8, [x23]
	bfi	x9, x8, #32, #32
	str	x9, [x21, :lo12:env]
.LBB119_21:                             // %"$21"
                                        //   in Loop: Header=BB119_19 Depth=1
	ldp	w9, w8, [x22]
	bfi	x9, x8, #32, #32
	ldp	w9, w8, [x9, #8]
	stp	w9, w8, [x22]
	bfi	x9, x8, #32, #32
	tst	x9, #0xf
	b.eq	.LBB119_14
.LBB119_22:                             // %"$18"
	ldur	x8, [x29, #-8]
	str	x8, [x21, :lo12:env]
	mov	x0, x20
	mov	sp, x29
	ldp	x20, x19, [sp, #80]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #64]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #48]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #32]             // 16-byte Folded Reload
	ldr	x27, [sp, #16]                  // 8-byte Folded Reload
	ldp	x29, x30, [sp], #96             // 16-byte Folded Reload
	ret
.Lfunc_end119:
	.size	_sum, .Lfunc_end119-_sum
	.cfi_endproc
                                        // -- End function
	.globl	_maxi                           // -- Begin function _maxi
	.p2align	4
	.type	_maxi,@function
_maxi:                                  // @_maxi
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-96]!           // 16-byte Folded Spill
	str	x27, [sp, #16]                  // 8-byte Folded Spill
	stp	x26, x25, [sp, #32]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #48]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #64]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #80]             // 16-byte Folded Spill
	mov	x29, sp
	sub	sp, sp, #16                     // =16
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	adrp	x23, env
	adrp	x20, SymTab+8
	add	x20, x20, :lo12:SymTab+8
	ldr	x8, [x23, :lo12:env]
	stp	x20, x8, [x29, #-16]
	sub	x8, x29, #16                    // =16
	str	x8, [x23, :lo12:env]
	ldp	w0, w8, [x9]
	bfi	x0, x8, #32, #32
	ldp	w21, w8, [x9, #8]
	bfi	x21, x8, #32, #32
	tst	x0, #0x6
	b.ne	.LBB120_4
// %bb.1:                               // %"$3"
	tbz	w0, #3, .LBB120_3
// %bb.2:                               // %"$6"
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB120_4
.LBB120_3:                              // %"$5"
	bl	evList
.LBB120_4:                              // %"$2"
	mov	x8, sp
	sub	x19, x8, #48                    // =48
	mov	sp, x19
	lsr	x22, x20, #32
	mov	w25, #2
	stp	w20, w22, [x8, #-40]
	stp	w25, wzr, [x8, #-32]
	lsr	x9, x0, #32
	mov	x10, x19
	stur	w9, [x8, #-20]
	str	w0, [x10, #24]!
	sub	x24, sp, #16                    // =16
	mov	sp, x24
	ldr	x9, [x23, :lo12:env]
	str	x10, [x23, :lo12:env]
	lsr	x11, x10, #32
	lsr	x12, x9, #32
	stp	w9, w12, [x8, #-16]
	stp	w10, w11, [x8, #-48]
	mov	x27, x19
	mov	x26, x24
.LBB120_5:                              // %"$7"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w0, w8, [x21]
	bfi	x0, x8, #32, #32
	tst	x0, #0x6
	b.ne	.LBB120_9
// %bb.6:                               // %"$9"
                                        //   in Loop: Header=BB120_5 Depth=1
	tbz	w0, #3, .LBB120_8
// %bb.7:                               // %"$12"
                                        //   in Loop: Header=BB120_5 Depth=1
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB120_9
.LBB120_8:                              // %"$11"
                                        //   in Loop: Header=BB120_5 Depth=1
	bl	evList
.LBB120_9:                              // %"$8"
                                        //   in Loop: Header=BB120_5 Depth=1
	ldr	x8, [x23, :lo12:env]
	mov	x9, sp
	sub	x10, x9, #16                    // =16
	mov	sp, x10
	lsr	x11, x0, #32
	lsr	x12, x8, #32
	stp	w0, w11, [x9, #-16]
	stp	w8, w12, [x9, #-8]
	str	x10, [x23, :lo12:env]
	tst	x0, #0xf
	stp	w0, w11, [x26]
	b.ne	.LBB120_11
// %bb.10:                              // %"$13"
                                        //   in Loop: Header=BB120_5 Depth=1
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
.LBB120_11:                             // %"$14"
                                        //   in Loop: Header=BB120_5 Depth=1
	mov	x9, sp
	sub	x8, x9, #48                     // =48
	mov	sp, x8
	stp	w20, w22, [x9, #-40]
	stp	w25, wzr, [x9, #-32]
	lsr	x10, x0, #32
	stur	w10, [x9, #-20]
	mov	x10, x8
	str	w0, [x10, #24]!
	lsr	x11, x8, #32
	stp	w8, w11, [x27, #8]
	ldr	x11, [x23, :lo12:env]
	lsr	x12, x11, #32
	stp	w11, w12, [x9, #-16]
	str	x10, [x23, :lo12:env]
	lsr	x11, x10, #32
	stp	w10, w11, [x9, #-48]
	ldp	w21, w9, [x21, #8]
	bfi	x21, x9, #32, #32
	tst	x21, #0xf
	b.ne	.LBB120_13
// %bb.12:                              // %"$15"
                                        //   in Loop: Header=BB120_5 Depth=1
	sub	x9, sp, #16                     // =16
	mov	sp, x9
	lsr	x10, x9, #32
	stp	w9, w10, [x26, #8]
	mov	x27, x8
	mov	x26, x9
	b	.LBB120_5
.LBB120_13:                             // %"$16"
	ldrb	w8, [x24]
	adrp	x20, SymTab+8
	add	x20, x20, :lo12:SymTab+8
	mov	x21, x20
	tst	w8, #0xf
	b.ne	.LBB120_22
	b	.LBB120_19
.LBB120_14:                             // %"$22"
                                        //   in Loop: Header=BB120_19 Depth=1
	ldp	w8, w10, [x19, #8]
	bfi	x8, x10, #32, #32
	ldp	w10, w11, [x9]
	bfi	x10, x11, #32, #32
	mov	x9, x24
.LBB120_15:                             // %"$24"
                                        //   Parent Loop BB120_19 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	lsr	x11, x10, #32
	stp	w10, w11, [x8, #24]
	ldp	w8, w10, [x8, #8]
	bfi	x8, x10, #32, #32
	tst	x8, #0xf
	b.ne	.LBB120_19
// %bb.16:                              // %"$25"
                                        //   in Loop: Header=BB120_15 Depth=2
	ldp	w9, w10, [x9, #8]
	bfi	x9, x10, #32, #32
	ldp	w10, w11, [x9]
	bfi	x10, x11, #32, #32
	tst	x10, #0xf
	b.ne	.LBB120_15
// %bb.17:                              // %"$28"
                                        //   in Loop: Header=BB120_15 Depth=2
	ldp	w10, w11, [x10, #8]
	stp	w10, w11, [x9]
	bfi	x10, x11, #32, #32
	tst	x10, #0xf
	b.ne	.LBB120_15
// %bb.18:                              // %"$30"
                                        //   in Loop: Header=BB120_15 Depth=2
	ldp	w10, w11, [x10]
	bfi	x10, x11, #32, #32
	b	.LBB120_15
.LBB120_19:                             // %"$19"
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB120_15 Depth 2
	mov	x0, x19
	bl	evList
	mov	x22, x0
	mov	x1, x21
	bl	compare
	cmp	x0, #1                          // =1
	b.lt	.LBB120_21
// %bb.20:                              // %"$20"
                                        //   in Loop: Header=BB120_19 Depth=1
	ldp	w9, w8, [x24]
	bfi	x9, x8, #32, #32
	ldp	w20, w8, [x9]
	bfi	x20, x8, #32, #32
	stur	x22, [x29, #-16]
	mov	x21, x22
.LBB120_21:                             // %"$21"
                                        //   in Loop: Header=BB120_19 Depth=1
	ldp	w9, w8, [x24]
	bfi	x9, x8, #32, #32
	ldp	w9, w8, [x9, #8]
	stp	w9, w8, [x24]
	bfi	x9, x8, #32, #32
	tst	x9, #0xf
	b.eq	.LBB120_14
.LBB120_22:                             // %"$18"
	adrp	x8, SymTab+392
	str	x21, [x8, :lo12:SymTab+392]
	ldur	x8, [x29, #-8]
	str	x8, [x23, :lo12:env]
	mov	x0, x20
	mov	sp, x29
	ldp	x20, x19, [sp, #80]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #64]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #48]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #32]             // 16-byte Folded Reload
	ldr	x27, [sp, #16]                  // 8-byte Folded Reload
	ldp	x29, x30, [sp], #96             // 16-byte Folded Reload
	ret
.Lfunc_end120:
	.size	_maxi, .Lfunc_end120-_maxi
	.cfi_endproc
                                        // -- End function
	.globl	_mini                           // -- Begin function _mini
	.p2align	4
	.type	_mini,@function
_mini:                                  // @_mini
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-96]!           // 16-byte Folded Spill
	str	x27, [sp, #16]                  // 8-byte Folded Spill
	stp	x26, x25, [sp, #32]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #48]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #64]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #80]             // 16-byte Folded Spill
	mov	x29, sp
	sub	sp, sp, #16                     // =16
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	adrp	x23, env
	adrp	x8, SymTab+216
	add	x8, x8, :lo12:SymTab+216
	ldr	x10, [x23, :lo12:env]
	stp	x8, x10, [x29, #-16]
	sub	x8, x29, #16                    // =16
	str	x8, [x23, :lo12:env]
	ldp	w0, w8, [x9]
	bfi	x0, x8, #32, #32
	ldp	w21, w8, [x9, #8]
	bfi	x21, x8, #32, #32
	tst	x0, #0x6
	b.ne	.LBB121_4
// %bb.1:                               // %"$3"
	tbz	w0, #3, .LBB121_3
// %bb.2:                               // %"$6"
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB121_4
.LBB121_3:                              // %"$5"
	bl	evList
.LBB121_4:                              // %"$2"
	mov	x8, sp
	sub	x20, x8, #48                    // =48
	mov	sp, x20
	adrp	x19, SymTab+8
	add	x19, x19, :lo12:SymTab+8
	mov	w22, #2
	stp	w22, wzr, [x8, #-32]
	lsr	x9, x0, #32
	mov	x10, x20
	lsr	x25, x19, #32
	stp	w19, w25, [x8, #-40]
	stur	w9, [x8, #-20]
	str	w0, [x10, #24]!
	sub	x24, sp, #16                    // =16
	mov	sp, x24
	ldr	x9, [x23, :lo12:env]
	str	x10, [x23, :lo12:env]
	lsr	x11, x10, #32
	lsr	x12, x9, #32
	stp	w9, w12, [x8, #-16]
	stp	w10, w11, [x8, #-48]
	mov	x27, x20
	mov	x26, x24
.LBB121_5:                              // %"$7"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w0, w8, [x21]
	bfi	x0, x8, #32, #32
	tst	x0, #0x6
	b.ne	.LBB121_9
// %bb.6:                               // %"$9"
                                        //   in Loop: Header=BB121_5 Depth=1
	tbz	w0, #3, .LBB121_8
// %bb.7:                               // %"$12"
                                        //   in Loop: Header=BB121_5 Depth=1
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB121_9
.LBB121_8:                              // %"$11"
                                        //   in Loop: Header=BB121_5 Depth=1
	bl	evList
.LBB121_9:                              // %"$8"
                                        //   in Loop: Header=BB121_5 Depth=1
	ldr	x8, [x23, :lo12:env]
	mov	x9, sp
	sub	x10, x9, #16                    // =16
	mov	sp, x10
	lsr	x11, x0, #32
	lsr	x12, x8, #32
	stp	w0, w11, [x9, #-16]
	stp	w8, w12, [x9, #-8]
	str	x10, [x23, :lo12:env]
	tst	x0, #0xf
	stp	w0, w11, [x26]
	b.ne	.LBB121_11
// %bb.10:                              // %"$13"
                                        //   in Loop: Header=BB121_5 Depth=1
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
.LBB121_11:                             // %"$14"
                                        //   in Loop: Header=BB121_5 Depth=1
	mov	x9, sp
	sub	x8, x9, #48                     // =48
	mov	sp, x8
	stp	w19, w25, [x9, #-40]
	stp	w22, wzr, [x9, #-32]
	lsr	x10, x0, #32
	stur	w10, [x9, #-20]
	mov	x10, x8
	str	w0, [x10, #24]!
	lsr	x11, x8, #32
	stp	w8, w11, [x27, #8]
	ldr	x11, [x23, :lo12:env]
	lsr	x12, x11, #32
	stp	w11, w12, [x9, #-16]
	str	x10, [x23, :lo12:env]
	lsr	x11, x10, #32
	stp	w10, w11, [x9, #-48]
	ldp	w21, w9, [x21, #8]
	bfi	x21, x9, #32, #32
	tst	x21, #0xf
	b.ne	.LBB121_13
// %bb.12:                              // %"$15"
                                        //   in Loop: Header=BB121_5 Depth=1
	sub	x9, sp, #16                     // =16
	mov	sp, x9
	lsr	x10, x9, #32
	stp	w9, w10, [x26, #8]
	mov	x27, x8
	mov	x26, x9
	b	.LBB121_5
.LBB121_13:                             // %"$16"
	add	x21, x19, #208                  // =208
	ldrb	w8, [x24]
	tst	w8, #0xf
	b.ne	.LBB121_22
	b	.LBB121_19
.LBB121_14:                             // %"$22"
                                        //   in Loop: Header=BB121_19 Depth=1
	ldp	w8, w10, [x20, #8]
	bfi	x8, x10, #32, #32
	ldp	w10, w11, [x9]
	bfi	x10, x11, #32, #32
	mov	x9, x24
.LBB121_15:                             // %"$24"
                                        //   Parent Loop BB121_19 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	lsr	x11, x10, #32
	stp	w10, w11, [x8, #24]
	ldp	w8, w10, [x8, #8]
	bfi	x8, x10, #32, #32
	tst	x8, #0xf
	b.ne	.LBB121_19
// %bb.16:                              // %"$25"
                                        //   in Loop: Header=BB121_15 Depth=2
	ldp	w9, w10, [x9, #8]
	bfi	x9, x10, #32, #32
	ldp	w10, w11, [x9]
	bfi	x10, x11, #32, #32
	tst	x10, #0xf
	b.ne	.LBB121_15
// %bb.17:                              // %"$28"
                                        //   in Loop: Header=BB121_15 Depth=2
	ldp	w10, w11, [x10, #8]
	stp	w10, w11, [x9]
	bfi	x10, x11, #32, #32
	tst	x10, #0xf
	b.ne	.LBB121_15
// %bb.18:                              // %"$30"
                                        //   in Loop: Header=BB121_15 Depth=2
	ldp	w10, w11, [x10]
	bfi	x10, x11, #32, #32
	b	.LBB121_15
.LBB121_19:                             // %"$19"
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB121_15 Depth 2
	mov	x0, x20
	bl	evList
	mov	x22, x0
	mov	x1, x21
	bl	compare
	tbz	x0, #63, .LBB121_21
// %bb.20:                              // %"$20"
                                        //   in Loop: Header=BB121_19 Depth=1
	ldp	w9, w8, [x24]
	bfi	x9, x8, #32, #32
	ldp	w19, w8, [x9]
	bfi	x19, x8, #32, #32
	stur	x22, [x29, #-16]
	mov	x21, x22
.LBB121_21:                             // %"$21"
                                        //   in Loop: Header=BB121_19 Depth=1
	ldp	w9, w8, [x24]
	bfi	x9, x8, #32, #32
	ldp	w9, w8, [x9, #8]
	stp	w9, w8, [x24]
	bfi	x9, x8, #32, #32
	tst	x9, #0xf
	b.eq	.LBB121_14
.LBB121_22:                             // %"$18"
	adrp	x8, SymTab+392
	str	x21, [x8, :lo12:SymTab+392]
	ldur	x8, [x29, #-8]
	str	x8, [x23, :lo12:env]
	mov	x0, x19
	mov	sp, x29
	ldp	x20, x19, [sp, #80]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #64]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #48]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #32]             // 16-byte Folded Reload
	ldr	x27, [sp, #16]                  // 8-byte Folded Reload
	ldp	x29, x30, [sp], #96             // 16-byte Folded Reload
	ret
.Lfunc_end121:
	.size	_mini, .Lfunc_end121-_mini
	.cfi_endproc
                                        // -- End function
	.globl	_fish                           // -- Begin function _fish
	.p2align	4
	.type	_fish,@function
_fish:                                  // @_fish
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-64]!           // 16-byte Folded Spill
	str	x23, [sp, #16]                  // 8-byte Folded Spill
	stp	x22, x21, [sp, #32]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #48]             // 16-byte Folded Spill
	mov	x29, sp
	sub	sp, sp, #48                     // =48
	.cfi_def_cfa w29, 64
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -48
	.cfi_offset w30, -56
	.cfi_offset w29, -64
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	adrp	x8, SymTab+8
	add	x8, x8, :lo12:SymTab+8
	adrp	x22, env
	ldr	x10, [x22, :lo12:env]
	stp	x8, x10, [x29, #-16]
	sub	x10, x29, #16                   // =16
	str	x10, [x22, :lo12:env]
	mov	w10, #2
	stp	x8, x10, [x29, #-40]
	ldp	w0, w8, [x9]
	bfi	x0, x8, #32, #32
	ldp	w23, w8, [x9, #8]
	bfi	x23, x8, #32, #32
	tst	x0, #0x6
	b.ne	.LBB122_4
// %bb.1:                               // %"$3"
	tbz	w0, #3, .LBB122_3
// %bb.2:                               // %"$6"
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB122_4
.LBB122_3:                              // %"$5"
	bl	evList
.LBB122_4:                              // %"$2"
	mov	x8, sp
	sub	x19, x8, #48                    // =48
	mov	sp, x19
	sub	x9, x29, #48                    // =48
	lsr	x10, x9, #32
	stp	w9, w10, [x8, #-40]
	mov	w10, #2
	stp	w10, wzr, [x8, #-32]
	lsr	x10, x0, #32
	mov	x11, x19
	str	w0, [x11, #24]!
	stur	w10, [x8, #-20]
	add	x20, x9, #24                    // =24
	stur	x20, [x29, #-48]
	ldr	x9, [x22, :lo12:env]
	lsr	x10, x9, #32
	stp	w9, w10, [x8, #-16]
	str	x11, [x22, :lo12:env]
	lsr	x9, x11, #32
	stp	w11, w9, [x8, #-48]
	ldp	w21, w8, [x23]
	bfi	x21, x8, #32, #32
	ldp	w23, w8, [x23, #8]
	bfi	x23, x8, #32, #32
	tst	x21, #0x6
	b.ne	.LBB122_8
// %bb.5:                               // %"$8"
	tbz	w21, #3, .LBB122_7
// %bb.6:                               // %"$11"
	ldp	w21, w8, [x21]
	bfi	x21, x8, #32, #32
	b	.LBB122_8
.LBB122_7:                              // %"$10"
	mov	x0, x21
	bl	evList
	mov	x21, x0
.LBB122_8:                              // %"$7"
	ldr	x8, [x22, :lo12:env]
	mov	x9, sp
	sub	x10, x9, #16                    // =16
	mov	sp, x10
	lsr	x11, x21, #32
	stp	w21, w11, [x9, #-16]
	lsr	x11, x8, #32
	stp	w8, w11, [x9, #-8]
	str	x10, [x22, :lo12:env]
	ldp	w4, w8, [x23]
	bfi	x4, x8, #32, #32
	tst	x4, #0x6
	b.ne	.LBB122_12
// %bb.9:                               // %"$13"
	tbz	w4, #3, .LBB122_11
// %bb.10:                              // %"$16"
	ldp	w4, w8, [x4]
	bfi	x4, x8, #32, #32
	b	.LBB122_12
.LBB122_11:                             // %"$15"
	mov	x0, x4
	bl	evList
	mov	x4, x0
.LBB122_12:                             // %"$12"
	sub	x3, x29, #16                    // =16
	mov	x0, x19
	mov	x1, x21
	mov	x2, x20
	bl	fish
	ldp	x0, x8, [x29, #-16]
	str	x8, [x22, :lo12:env]
	mov	sp, x29
	ldp	x20, x19, [sp, #48]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #32]             // 16-byte Folded Reload
	ldr	x23, [sp, #16]                  // 8-byte Folded Reload
	ldp	x29, x30, [sp], #64             // 16-byte Folded Reload
	ret
.Lfunc_end122:
	.size	_fish, .Lfunc_end122-_fish
	.cfi_endproc
                                        // -- End function
	.globl	_by                             // -- Begin function _by
	.p2align	4
	.type	_by,@function
_by:                                    // @_by
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-96]!           // 16-byte Folded Spill
	stp	x28, x27, [sp, #16]             // 16-byte Folded Spill
	stp	x26, x25, [sp, #32]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #48]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #64]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #80]             // 16-byte Folded Spill
	mov	x29, sp
	sub	sp, sp, #32                     // =32
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	adrp	x22, env
	adrp	x21, SymTab+8
	add	x21, x21, :lo12:SymTab+8
	ldr	x8, [x22, :lo12:env]
	stp	x21, x8, [x29, #-16]
	sub	x8, x29, #16                    // =16
	str	x8, [x22, :lo12:env]
	ldp	w0, w8, [x9]
	bfi	x0, x8, #32, #32
	ldp	w19, w8, [x9, #8]
	bfi	x19, x8, #32, #32
	tst	x0, #0x6
	b.ne	.LBB123_4
// %bb.1:                               // %"$3"
	tbz	w0, #3, .LBB123_3
// %bb.2:                               // %"$6"
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB123_4
.LBB123_3:                              // %"$5"
	bl	evList
.LBB123_4:                              // %"$2"
	mov	x8, sp
	sub	x24, x8, #48                    // =48
	mov	sp, x24
	lsr	x25, x21, #32
	mov	w9, #2
	stp	w21, w25, [x8, #-40]
	stp	w9, wzr, [x8, #-32]
	lsr	x9, x0, #32
	stp	w0, w9, [x8, #-24]
	sub	x23, sp, #16                    // =16
	mov	sp, x23
	ldp	w20, w8, [x19]
	bfi	x20, x8, #32, #32
	ldp	w26, w8, [x19, #8]
	bfi	x26, x8, #32, #32
	tst	x20, #0x6
	b.ne	.LBB123_8
// %bb.5:                               // %"$8"
	tbz	w20, #3, .LBB123_7
// %bb.6:                               // %"$11"
	ldp	w20, w8, [x20]
	bfi	x20, x8, #32, #32
	b	.LBB123_8
.LBB123_7:                              // %"$10"
	mov	x0, x20
	bl	evList
	mov	x20, x0
.LBB123_8:                              // %"$7"
	ldr	x8, [x22, :lo12:env]
	mov	x9, sp
	sub	x10, x9, #16                    // =16
	mov	sp, x10
	lsr	x12, x20, #32
	lsr	x11, x8, #32
	stur	x12, [x29, #-24]                // 8-byte Folded Spill
	stp	w20, w12, [x9, #-16]
	stp	w8, w11, [x9, #-8]
	str	x10, [x22, :lo12:env]
	add	x8, x24, #24                    // =24
	lsr	x9, x10, #32
	stp	w10, w9, [x24, #32]
	str	x8, [x22, :lo12:env]
	lsr	x9, x8, #32
	mov	w27, #2
	mov	x19, x24
	mov	x28, x23
	stp	w8, w9, [x24]
.LBB123_9:                              // %"$12"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w0, w8, [x26]
	bfi	x0, x8, #32, #32
	tst	x0, #0x6
	b.ne	.LBB123_13
// %bb.10:                              // %"$14"
                                        //   in Loop: Header=BB123_9 Depth=1
	tbz	w0, #3, .LBB123_12
// %bb.11:                              // %"$17"
                                        //   in Loop: Header=BB123_9 Depth=1
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB123_13
.LBB123_12:                             // %"$16"
                                        //   in Loop: Header=BB123_9 Depth=1
	bl	evList
.LBB123_13:                             // %"$13"
                                        //   in Loop: Header=BB123_9 Depth=1
	ldr	x8, [x22, :lo12:env]
	mov	x9, sp
	sub	x10, x9, #16                    // =16
	mov	sp, x10
	lsr	x11, x0, #32
	lsr	x12, x8, #32
	stp	w0, w11, [x9, #-16]
	stp	w8, w12, [x9, #-8]
	str	x10, [x22, :lo12:env]
	tst	x0, #0xf
	stp	w0, w11, [x28]
	b.ne	.LBB123_15
// %bb.14:                              // %"$18"
                                        //   in Loop: Header=BB123_9 Depth=1
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
.LBB123_15:                             // %"$19"
                                        //   in Loop: Header=BB123_9 Depth=1
	mov	x9, sp
	sub	x8, x9, #48                     // =48
	mov	sp, x8
	stp	w21, w25, [x9, #-40]
	stp	w27, wzr, [x9, #-32]
	lsr	x10, x0, #32
	stur	w10, [x9, #-20]
	mov	x10, x8
	str	w0, [x10, #24]!
	lsr	x11, x8, #32
	stp	w8, w11, [x19, #8]
	ldr	x11, [x22, :lo12:env]
	lsr	x12, x11, #32
	stp	w11, w12, [x9, #-16]
	str	x10, [x22, :lo12:env]
	lsr	x11, x10, #32
	stp	w10, w11, [x9, #-48]
	ldp	w26, w9, [x26, #8]
	bfi	x26, x9, #32, #32
	tst	x26, #0xf
	b.ne	.LBB123_17
// %bb.16:                              // %"$20"
                                        //   in Loop: Header=BB123_9 Depth=1
	sub	x9, sp, #16                     // =16
	mov	sp, x9
	lsr	x10, x9, #32
	stp	w9, w10, [x28, #8]
	mov	x19, x8
	mov	x28, x9
	b	.LBB123_9
.LBB123_17:                             // %"$21"
	ldrb	w8, [x23]
	tst	w8, #0xf
	b.eq	.LBB123_19
// %bb.18:
	adrp	x0, SymTab+8
	add	x0, x0, :lo12:SymTab+8
	b	.LBB123_32
.LBB123_19:                             // %"$24.preheader"
	mov	x19, xzr
	adrp	x21, SymTab+8
	add	x21, x21, :lo12:SymTab+8
	mov	x25, x21
	b	.LBB123_21
.LBB123_20:                             //   in Loop: Header=BB123_21 Depth=1
	mov	x19, x0
.LBB123_21:                             // %"$24"
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB123_26 Depth 2
	mov	x0, x24
	bl	evList
	ldp	w9, w8, [x23]
	bfi	x9, x8, #32, #32
	ldp	w1, w8, [x9]
	bfi	x1, x8, #32, #32
	bl	cons
	mov	x1, x21
	bl	cons
	cbz	x19, .LBB123_23
// %bb.22:                              // %"$25"
                                        //   in Loop: Header=BB123_21 Depth=1
	add	x8, x19, #8                     // =8
	b	.LBB123_24
.LBB123_23:                             // %"$26"
                                        //   in Loop: Header=BB123_21 Depth=1
	sub	x8, x29, #16                    // =16
	mov	x25, x0
.LBB123_24:                             // %"$27"
                                        //   in Loop: Header=BB123_21 Depth=1
	lsr	x9, x0, #32
	stp	w0, w9, [x8]
	ldp	w9, w8, [x23]
	bfi	x9, x8, #32, #32
	ldp	w9, w8, [x9, #8]
	stp	w9, w8, [x23]
	bfi	x9, x8, #32, #32
	tst	x9, #0xf
	b.ne	.LBB123_30
// %bb.25:                              // %"$28"
                                        //   in Loop: Header=BB123_21 Depth=1
	ldp	w8, w10, [x24, #8]
	bfi	x8, x10, #32, #32
	ldp	w10, w11, [x9]
	bfi	x10, x11, #32, #32
	mov	x9, x23
.LBB123_26:                             // %"$30"
                                        //   Parent Loop BB123_21 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	lsr	x11, x10, #32
	stp	w10, w11, [x8, #24]
	ldp	w8, w10, [x8, #8]
	bfi	x8, x10, #32, #32
	tst	x8, #0xf
	b.ne	.LBB123_20
// %bb.27:                              // %"$31"
                                        //   in Loop: Header=BB123_26 Depth=2
	ldp	w9, w10, [x9, #8]
	bfi	x9, x10, #32, #32
	ldp	w10, w11, [x9]
	bfi	x10, x11, #32, #32
	tst	x10, #0xf
	b.ne	.LBB123_26
// %bb.28:                              // %"$34"
                                        //   in Loop: Header=BB123_26 Depth=2
	ldp	w10, w11, [x10, #8]
	stp	w10, w11, [x9]
	bfi	x10, x11, #32, #32
	tst	x10, #0xf
	b.ne	.LBB123_26
// %bb.29:                              // %"$36"
                                        //   in Loop: Header=BB123_26 Depth=2
	ldp	w10, w11, [x10]
	bfi	x10, x11, #32, #32
	b	.LBB123_26
.LBB123_30:                             // %"$29"
	ldur	x8, [x29, #-24]                 // 8-byte Folded Reload
	stp	w20, w8, [x24, #24]
	ldp	w9, w8, [x24, #8]
	bfi	x9, x8, #32, #32
	lsr	x8, x25, #32
	stp	w25, w8, [x9, #24]
	mov	x0, x24
	bl	evList
	stur	x0, [x29, #-16]
	mov	x8, x0
.LBB123_31:                             // %"$38"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w10, w9, [x8]
	bfi	x10, x9, #32, #32
	ldp	w10, w9, [x10, #8]
	stp	w10, w9, [x8]
	ldp	w8, w9, [x8, #8]
	bfi	x8, x9, #32, #32
	tst	x8, #0xf
	b.eq	.LBB123_31
.LBB123_32:                             // %"$23"
	ldur	x8, [x29, #-8]
	str	x8, [x22, :lo12:env]
	mov	sp, x29
	ldp	x20, x19, [sp, #80]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #64]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #48]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #32]             // 16-byte Folded Reload
	ldp	x28, x27, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #96             // 16-byte Folded Reload
	ret
.Lfunc_end123:
	.size	_by, .Lfunc_end123-_by
	.cfi_endproc
                                        // -- End function
	.globl	_as                             // -- Begin function _as
	.p2align	4
	.type	_as,@function
_as:                                    // @_as
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x30, x19, [sp, #-16]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w19, -8
	.cfi_offset w30, -16
	ldp	w19, w8, [x0, #8]
	bfi	x19, x8, #32, #32
	ldp	w0, w8, [x19]
	bfi	x0, x8, #32, #32
	tst	x0, #0x6
	b.ne	.LBB124_4
// %bb.1:                               // %"$3"
	tbz	w0, #3, .LBB124_3
// %bb.2:                               // %"$6"
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB124_4
.LBB124_3:                              // %"$5"
	bl	evList
.LBB124_4:                              // %"$2"
	adrp	x8, SymTab+8
	add	x8, x8, :lo12:SymTab+8
	cmp	x0, x8
	b.eq	.LBB124_6
// %bb.5:                               // %"$8"
	ldp	w0, w8, [x19, #8]
	bfi	x0, x8, #32, #32
.LBB124_6:                              // %"$9"
	ldp	x30, x19, [sp], #16             // 16-byte Folded Reload
	ret
.Lfunc_end124:
	.size	_as, .Lfunc_end124-_as
	.cfi_endproc
                                        // -- End function
	.globl	_lit                            // -- Begin function _lit
	.p2align	4
	.type	_lit,@function
_lit:                                   // @_lit
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w1, w8, [x9]
	bfi	x1, x8, #32, #32
	tst	x1, #0x6
	b.ne	.LBB125_4
// %bb.1:                               // %"$3"
	tbz	w1, #3, .LBB125_3
// %bb.2:                               // %"$6"
	ldp	w1, w8, [x1]
	bfi	x1, x8, #32, #32
	b	.LBB125_4
.LBB125_3:                              // %"$5"
	mov	x0, x1
	bl	evList
	mov	x1, x0
.LBB125_4:                              // %"$2"
	and	x8, x1, #0x6
	cmp	x8, #0                          // =0
	adrp	x8, SymTab+8
	add	x8, x8, :lo12:SymTab+8
	ccmp	x1, x8, #4, eq
	adrp	x8, SymTab+216
	add	x8, x8, :lo12:SymTab+216
	ccmp	x1, x8, #4, ne
	b.eq	.LBB125_8
// %bb.5:                               // %"$10"
	tst	x1, #0xf
	b.ne	.LBB125_7
// %bb.6:                               // %"$12"
	ldrb	w8, [x1]
	tst	w8, #0x6
	b.ne	.LBB125_8
.LBB125_7:                              // %"$14"
	adrp	x0, SymTab+200
	add	x0, x0, :lo12:SymTab+200
	bl	cons
	mov	x1, x0
.LBB125_8:                              // %"$15"
	mov	x0, x1
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end125:
	.size	_lit, .Lfunc_end125-_lit
	.cfi_endproc
                                        // -- End function
	.globl	_eval                           // -- Begin function _eval
	.p2align	4
	.type	_eval,@function
_eval:                                  // @_eval
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-64]!           // 16-byte Folded Spill
	str	x23, [sp, #16]                  // 8-byte Folded Spill
	stp	x22, x21, [sp, #32]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #48]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 64
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -48
	.cfi_offset w30, -56
	.cfi_offset w29, -64
	mov	x20, x0
	ldp	w23, w8, [x0, #8]
	bfi	x23, x8, #32, #32
	ldp	w19, w8, [x23]
	bfi	x19, x8, #32, #32
	tst	x19, #0x6
	b.ne	.LBB126_4
// %bb.1:                               // %"$3"
	tbz	w19, #3, .LBB126_3
// %bb.2:                               // %"$6"
	ldp	w19, w8, [x19]
	bfi	x19, x8, #32, #32
	b	.LBB126_4
.LBB126_3:                              // %"$5"
	mov	x0, x19
	bl	evList
	mov	x19, x0
.LBB126_4:                              // %"$2"
	adrp	x21, env
	ldr	x8, [x21, :lo12:env]
	mov	x9, sp
	sub	x22, x9, #16                    // =16
	mov	sp, x22
	lsr	x10, x19, #32
	stp	w19, w10, [x9, #-16]
	lsr	x10, x8, #32
	stp	w8, w10, [x9, #-8]
	str	x22, [x21, :lo12:env]
	ldp	w8, w9, [x23, #8]
	bfi	x8, x9, #32, #32
	tst	x8, #0xf
	b.eq	.LBB126_8
.LBB126_5:                              // %"$8"
	tst	x19, #0x6
	b.ne	.LBB126_12
// %bb.6:                               // %"$25"
	tbz	w19, #3, .LBB126_11
// %bb.7:                               // %"$28"
	ldp	w19, w8, [x19]
	bfi	x19, x8, #32, #32
	b	.LBB126_12
.LBB126_8:                              // %"$7"
	ldp	w1, w9, [x8]
	bfi	x1, x9, #32, #32
	tst	x1, #0x6
	b.ne	.LBB126_14
// %bb.9:                               // %"$10"
	tbz	w1, #3, .LBB126_13
// %bb.10:                              // %"$13"
	ldp	w1, w8, [x1]
	bfi	x1, x8, #32, #32
	b	.LBB126_14
.LBB126_11:                             // %"$27"
	mov	x0, x19
	bl	evList
	mov	x19, x0
.LBB126_12:                             // %"$24"
	ldp	w9, w8, [x22, #8]
	bfi	x9, x8, #32, #32
	str	x9, [x21, :lo12:env]
	mov	x0, x19
	mov	sp, x29
	ldp	x20, x19, [sp, #48]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #32]             // 16-byte Folded Reload
	ldr	x23, [sp, #16]                  // 8-byte Folded Reload
	ldp	x29, x30, [sp], #64             // 16-byte Folded Reload
	ret
.LBB126_13:                             // %"$12"
	mov	x0, x1
	bl	evList
	mov	x1, x0
.LBB126_14:                             // %"$9"
	tbz	w1, #1, .LBB126_22
// %bb.15:                              // %"$15"
	lsr	x8, x1, #4
	cbz	x8, .LBB126_5
// %bb.16:                              // %"$16"
	adrp	x11, env+8
	add	x11, x11, :lo12:env+8
	adrp	x9, SymTab+376
	adrp	x10, SymTab+376
	add	x10, x10, :lo12:SymTab+376
.LBB126_17:                             // %"$18"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w11, w12, [x11]
	bfi	x11, x12, #32, #32
	cbz	x11, .LBB126_5
// %bb.18:                              // %"$19"
                                        //   in Loop: Header=BB126_17 Depth=1
	ldp	w13, w12, [x11, #8]
	bfi	x13, x12, #32, #32
	cmp	x10, x13
	b.ne	.LBB126_20
// %bb.19:                              // %"$22"
                                        //   in Loop: Header=BB126_17 Depth=1
	ldp	w13, w12, [x11]
	bfi	x13, x12, #32, #32
	str	x13, [x9, :lo12:SymTab+376]
	subs	x8, x8, #1                      // =1
	cset	w12, eq
	tbz	w12, #0, .LBB126_21
	b	.LBB126_5
.LBB126_20:                             //   in Loop: Header=BB126_17 Depth=1
	mov	w12, wzr
	tbnz	w12, #0, .LBB126_5
.LBB126_21:                             // %"$23"
                                        //   in Loop: Header=BB126_17 Depth=1
	add	x11, x11, #16                   // =16
	b	.LBB126_17
.LBB126_22:                             // %"$14"
	mov	x0, x20
	bl	cntErr
.Lfunc_end126:
	.size	_eval, .Lfunc_end126-_eval
	.cfi_endproc
                                        // -- End function
	.globl	_run                            // -- Begin function _run
	.p2align	4
	.type	_run,@function
_run:                                   // @_run
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-64]!           // 16-byte Folded Spill
	str	x23, [sp, #16]                  // 8-byte Folded Spill
	stp	x22, x21, [sp, #32]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #48]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 64
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -48
	.cfi_offset w30, -56
	.cfi_offset w29, -64
	mov	x20, x0
	ldp	w23, w8, [x0, #8]
	bfi	x23, x8, #32, #32
	ldp	w19, w8, [x23]
	bfi	x19, x8, #32, #32
	tst	x19, #0x6
	b.ne	.LBB127_3
// %bb.1:                               // %"$3"
	tbz	w19, #3, .LBB127_6
// %bb.2:                               // %"$6"
	ldp	w19, w8, [x19]
	bfi	x19, x8, #32, #32
.LBB127_3:                              // %"$2"
	tst	x19, #0x6
	b.ne	.LBB127_9
.LBB127_4:                              // %"$8"
	tbz	w19, #3, .LBB127_7
// %bb.5:                               // %"$11"
	ldp	w19, w8, [x19]
	bfi	x19, x8, #32, #32
	b	.LBB127_9
.LBB127_6:                              // %"$5"
	mov	x0, x19
	bl	evList
	mov	x19, x0
	tst	x19, #0x6
	b.ne	.LBB127_9
	b	.LBB127_4
.LBB127_7:                              // %"$10"
	adrp	x21, env
	ldr	x8, [x21, :lo12:env]
	mov	x9, sp
	sub	x22, x9, #16                    // =16
	mov	sp, x22
	lsr	x10, x19, #32
	stp	w19, w10, [x9, #-16]
	lsr	x10, x8, #32
	stp	w8, w10, [x9, #-8]
	str	x22, [x21, :lo12:env]
	ldp	w8, w9, [x23, #8]
	bfi	x8, x9, #32, #32
	tst	x8, #0xf
	b.eq	.LBB127_10
.LBB127_8:                              // %"$13"
	mov	x0, x19
	bl	runAt
	mov	x19, x0
	ldp	w9, w8, [x22, #8]
	bfi	x9, x8, #32, #32
	str	x9, [x21, :lo12:env]
.LBB127_9:                              // %"$7"
	mov	x0, x19
	mov	sp, x29
	ldp	x20, x19, [sp, #48]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #32]             // 16-byte Folded Reload
	ldr	x23, [sp, #16]                  // 8-byte Folded Reload
	ldp	x29, x30, [sp], #64             // 16-byte Folded Reload
	ret
.LBB127_10:                             // %"$12"
	ldp	w1, w9, [x8]
	bfi	x1, x9, #32, #32
	tst	x1, #0x6
	b.ne	.LBB127_14
// %bb.11:                              // %"$15"
	tbz	w1, #3, .LBB127_13
// %bb.12:                              // %"$18"
	ldp	w1, w8, [x1]
	bfi	x1, x8, #32, #32
	b	.LBB127_14
.LBB127_13:                             // %"$17"
	mov	x0, x1
	bl	evList
	mov	x1, x0
.LBB127_14:                             // %"$14"
	tbz	w1, #1, .LBB127_23
// %bb.15:                              // %"$20"
	lsr	x8, x1, #4
	cbz	x8, .LBB127_8
// %bb.16:                              // %"$21"
	adrp	x11, env+8
	add	x11, x11, :lo12:env+8
	adrp	x9, SymTab+376
	adrp	x10, SymTab+376
	add	x10, x10, :lo12:SymTab+376
.LBB127_17:                             // %"$23"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w11, w12, [x11]
	bfi	x11, x12, #32, #32
	cbz	x11, .LBB127_8
// %bb.18:                              // %"$24"
                                        //   in Loop: Header=BB127_17 Depth=1
	ldp	w13, w12, [x11, #8]
	bfi	x13, x12, #32, #32
	cmp	x10, x13
	b.ne	.LBB127_20
// %bb.19:                              // %"$27"
                                        //   in Loop: Header=BB127_17 Depth=1
	ldp	w13, w12, [x11]
	bfi	x13, x12, #32, #32
	str	x13, [x9, :lo12:SymTab+376]
	subs	x8, x8, #1                      // =1
	cset	w12, eq
	b	.LBB127_21
.LBB127_20:                             //   in Loop: Header=BB127_17 Depth=1
	mov	w12, wzr
.LBB127_21:                             // %"$26"
                                        //   in Loop: Header=BB127_17 Depth=1
	tbnz	w12, #0, .LBB127_8
// %bb.22:                              // %"$28"
                                        //   in Loop: Header=BB127_17 Depth=1
	add	x11, x11, #16                   // =16
	b	.LBB127_17
.LBB127_23:                             // %"$19"
	mov	x0, x20
	bl	cntErr
.Lfunc_end127:
	.size	_run, .Lfunc_end127-_run
	.cfi_endproc
                                        // -- End function
	.globl	_def                            // -- Begin function _def
	.p2align	4
	.type	_def,@function
_def:                                   // @_def
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-80]!           // 16-byte Folded Spill
	str	x25, [sp, #16]                  // 8-byte Folded Spill
	stp	x24, x23, [sp, #32]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #48]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #64]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 80
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -64
	.cfi_offset w30, -72
	.cfi_offset w29, -80
	mov	x21, x0
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w19, w8, [x9]
	bfi	x19, x8, #32, #32
	ldp	w22, w20, [x9, #8]
	tst	x19, #0x6
	b.ne	.LBB128_4
// %bb.1:                               // %"$3"
	tbz	w19, #3, .LBB128_3
// %bb.2:                               // %"$6"
	ldp	w19, w8, [x19]
	bfi	x19, x8, #32, #32
	b	.LBB128_4
.LBB128_3:                              // %"$5"
	mov	x0, x19
	bl	evList
	mov	x19, x0
.LBB128_4:                              // %"$2"
	eor	w8, w19, #0x8
	tst	x8, #0xe
	b.ne	.LBB128_31
// %bb.5:                               // %"$8"
	bfi	x22, x20, #32, #32
	adrp	x23, env
	ldr	x8, [x23, :lo12:env]
	mov	x9, sp
	sub	x24, x9, #16                    // =16
	mov	sp, x24
	lsr	x10, x19, #32
	stp	w19, w10, [x9, #-16]
	lsr	x10, x8, #32
	stp	w8, w10, [x9, #-8]
	str	x24, [x23, :lo12:env]
	ldp	w20, w8, [x22]
	bfi	x20, x8, #32, #32
	ldp	w25, w8, [x22, #8]
	bfi	x25, x8, #32, #32
	tst	x20, #0x6
	b.ne	.LBB128_9
// %bb.6:                               // %"$10"
	tbz	w20, #3, .LBB128_8
// %bb.7:                               // %"$13"
	ldp	w20, w8, [x20]
	bfi	x20, x8, #32, #32
	b	.LBB128_9
.LBB128_8:                              // %"$12"
	mov	x0, x20
	bl	evList
	mov	x20, x0
.LBB128_9:                              // %"$9"
	ldr	x8, [x23, :lo12:env]
	mov	x9, sp
	sub	x10, x9, #16                    // =16
	mov	sp, x10
	lsr	x22, x20, #32
	lsr	x11, x8, #32
	stp	w20, w22, [x9, #-16]
	stp	w8, w11, [x9, #-8]
	tst	x25, #0xf
	str	x10, [x23, :lo12:env]
	b.eq	.LBB128_18
// %bb.10:                              // %"$15"
	adrp	x25, SymTab+8
	add	x25, x25, :lo12:SymTab+8
	add	x8, x25, #208                   // =208
	cmp	x8, x19
	ccmp	x19, x25, #0, hs
	b.hs	.LBB128_32
// %bb.11:                              // %"$34"
	ldurb	w8, [x19, #-8]
	tbz	w8, #3, .LBB128_13
// %bb.12:                              // %"$35"
	mov	x0, x21
	mov	x1, x19
	bl	dbTouch
.LBB128_13:                             // %"$36"
	ldp	w0, w8, [x19]
	bfi	x0, x8, #32, #32
	cmp	x0, x25
	b.eq	.LBB128_17
// %bb.14:                              // %"$36"
	cmp	x0, x19
	b.eq	.LBB128_17
// %bb.15:                              // %"$39"
	mov	x1, x20
	bl	equal
	tbnz	w0, #0, .LBB128_17
// %bb.16:                              // %"$40"
	mov	x0, x19
	mov	x1, xzr
	bl	redefMsg
.LBB128_17:                             // %"$41"
	stp	w20, w22, [x19]
	mov	x20, xzr
	b	.LBB128_30
.LBB128_18:                             // %"$14"
	ldp	w22, w8, [x25]
	bfi	x22, x8, #32, #32
	tst	x22, #0x6
	b.ne	.LBB128_22
// %bb.19:                              // %"$18"
	tbz	w22, #3, .LBB128_21
// %bb.20:                              // %"$21"
	ldp	w22, w8, [x22]
	bfi	x22, x8, #32, #32
	b	.LBB128_22
.LBB128_21:                             // %"$20"
	mov	x0, x22
	bl	evList
	mov	x22, x0
.LBB128_22:                             // %"$17"
	ldr	x8, [x23, :lo12:env]
	mov	x9, sp
	sub	x10, x9, #16                    // =16
	mov	sp, x10
	lsr	x11, x22, #32
	stp	w22, w11, [x9, #-16]
	lsr	x11, x8, #32
	stp	w8, w11, [x9, #-8]
	str	x10, [x23, :lo12:env]
	ldurb	w8, [x19, #-8]
	tbz	w8, #3, .LBB128_26
// %bb.23:                              // %"$22"
	adrp	x8, SymTab+8
	add	x8, x8, :lo12:SymTab+8
	mov	x0, x21
	mov	x1, x19
	cmp	x20, x8
	b.ne	.LBB128_25
// %bb.24:                              // %"$24"
	bl	dbFetch
	b	.LBB128_26
.LBB128_25:                             // %"$25"
	bl	dbTouch
.LBB128_26:                             // %"$23"
	mov	x0, x19
	mov	x1, x20
	bl	get
	adrp	x8, SymTab+8
	add	x8, x8, :lo12:SymTab+8
	cmp	x0, x8
	b.eq	.LBB128_29
// %bb.27:                              // %"$28"
	mov	x1, x22
	bl	equal
	tbnz	w0, #0, .LBB128_29
// %bb.28:                              // %"$29"
	mov	x0, x19
	mov	x1, x20
	bl	redefMsg
.LBB128_29:                             // %"$30"
	mov	x0, x19
	mov	x1, x20
	mov	x2, x22
	bl	put
.LBB128_30:                             // %"$16"
	mov	x0, x19
	mov	x1, x20
	bl	putSrc
	ldp	w9, w8, [x24, #8]
	bfi	x9, x8, #32, #32
	str	x9, [x23, :lo12:env]
	mov	x0, x19
	mov	sp, x29
	ldp	x20, x19, [sp, #64]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #48]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #32]             // 16-byte Folded Reload
	ldr	x25, [sp, #16]                  // 8-byte Folded Reload
	ldp	x29, x30, [sp], #80             // 16-byte Folded Reload
	ret
.LBB128_31:                             // %"$7"
	mov	x0, x21
	mov	x1, x19
	bl	symErr
.LBB128_32:                             // %"$33"
	mov	x0, x21
	mov	x1, x19
	bl	protErr
.Lfunc_end128:
	.size	_def, .Lfunc_end128-_def
	.cfi_endproc
                                        // -- End function
	.globl	_de                             // -- Begin function _de
	.p2align	4
	.type	_de,@function
_de:                                    // @_de
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x30, x19, [sp, #-16]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w19, -8
	.cfi_offset w30, -16
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w19, w8, [x9]
	bfi	x19, x8, #32, #32
	ldp	w2, w8, [x9, #8]
	bfi	x2, x8, #32, #32
	mov	x1, x19
	bl	redefine
	mov	x0, x19
	ldp	x30, x19, [sp], #16             // 16-byte Folded Reload
	ret
.Lfunc_end129:
	.size	_de, .Lfunc_end129-_de
	.cfi_endproc
                                        // -- End function
	.globl	_dm                             // -- Begin function _dm
	.p2align	4
	.type	_dm,@function
_dm:                                    // @_dm
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x30, x23, [sp, #-48]!           // 16-byte Folded Spill
	stp	x22, x21, [sp, #16]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #32]             // 16-byte Folded Spill
	.cfi_def_cfa_offset 48
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w30, -48
	mov	x23, x0
	ldp	w22, w8, [x0, #8]
	bfi	x22, x8, #32, #32
	ldp	w8, w9, [x22]
	bfi	x8, x9, #32, #32
	ldp	w21, w9, [x22, #8]
	tst	x8, #0xf
	mov	x19, x8
	b.ne	.LBB130_2
// %bb.1:                               // %"$3"
	ldp	w19, w10, [x8]
	bfi	x19, x10, #32, #32
.LBB130_2:                              // %"$4"
	bfi	x21, x9, #32, #32
	tst	x8, #0xf
	b.eq	.LBB130_4
// %bb.3:                               // %"$7"
	adrp	x8, SymTab+504
	ldr	x20, [x8, :lo12:SymTab+504]
	b	.LBB130_8
.LBB130_4:                              // %"$6"
	ldp	w20, w9, [x8, #8]
	bfi	x20, x9, #32, #32
	tst	x20, #0xf
	b.ne	.LBB130_8
// %bb.5:                               // %"$8"
	ldp	w0, w8, [x20, #8]
	bfi	x0, x8, #32, #32
	adrp	x8, SymTab+8
	add	x8, x8, :lo12:SymTab+8
	cmp	x0, x8
	b.ne	.LBB130_7
// %bb.6:                               // %"$10"
	adrp	x8, SymTab+504
	ldr	x0, [x8, :lo12:SymTab+504]
.LBB130_7:                              // %"$12"
	ldp	w1, w8, [x20]
	bfi	x1, x8, #32, #32
	bl	get
	mov	x20, x0
.LBB130_8:                              // %"$5"
	adrp	x8, SymTab+216
	add	x8, x8, :lo12:SymTab+216
	cmp	x19, x8
	b.eq	.LBB130_10
// %bb.9:                               // %"$13"
	adrp	x8, SymTab+184
	ldr	x2, [x8, :lo12:SymTab+184]
	mov	x0, x23
	mov	x1, x19
	bl	redefine
.LBB130_10:                             // %"$14"
	eor	w8, w21, #0x8
	tst	x8, #0xe
	b.ne	.LBB130_17
	b	.LBB130_12
.LBB130_11:                             // %"$22"
                                        //   in Loop: Header=BB130_12 Depth=1
	add	x21, x8, #8                     // =8
.LBB130_12:                             // %"$17"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w8, w9, [x21]
	bfi	x8, x9, #32, #32
	tst	x8, #0xf
	b.eq	.LBB130_14
// %bb.13:                              //   in Loop: Header=BB130_12 Depth=1
	mov	w9, #1
	cbz	w9, .LBB130_15
	b	.LBB130_29
.LBB130_14:                             // %"$19"
                                        //   in Loop: Header=BB130_12 Depth=1
	ldrb	w9, [x8]
	tst	w9, #0xf
	cset	w9, ne
	cbnz	w9, .LBB130_29
.LBB130_15:                             // %"$21"
                                        //   in Loop: Header=BB130_12 Depth=1
	ldp	w10, w9, [x8]
	bfi	x10, x9, #32, #32
	ldp	w10, w9, [x10]
	bfi	x10, x9, #32, #32
	cmp	x19, x10
	b.ne	.LBB130_11
// %bb.16:                              // %"$24"
	ldp	w22, w9, [x8]
	bfi	x22, x9, #32, #32
	ldp	w21, w8, [x22, #8]
	bfi	x21, x8, #32, #32
.LBB130_17:                             // %"$16"
	ldp	w23, w8, [x20]
	bfi	x23, x8, #32, #32
	mov	x8, x23
	tst	x8, #0xf
	b.eq	.LBB130_19
.LBB130_18:
	mov	w9, #1
	cbz	w9, .LBB130_20
	b	.LBB130_22
.LBB130_19:                             // %"$27"
	ldrb	w9, [x8]
	tst	w9, #0xf
	cset	w9, ne
	cbnz	w9, .LBB130_22
.LBB130_20:                             // %"$28"
	ldp	w10, w9, [x8]
	bfi	x10, x9, #32, #32
	ldp	w10, w9, [x10]
	bfi	x10, x9, #32, #32
	cmp	x19, x10
	b.eq	.LBB130_25
// %bb.21:                              // %"$34"
	ldp	w8, w9, [x8, #8]
	bfi	x8, x9, #32, #32
	tst	x8, #0xf
	b.ne	.LBB130_18
	b	.LBB130_19
.LBB130_22:                             // %"$30"
	ldrb	w8, [x22]
	tst	w8, #0xf
	b.ne	.LBB130_24
// %bb.23:                              // %"$32"
	mov	x0, x19
	mov	x1, x21
	bl	cons
	mov	x22, x0
.LBB130_24:                             // %"$33"
	mov	x0, x22
	mov	x1, x23
	bl	cons
	lsr	x8, x0, #32
	stp	w0, w8, [x20]
	b	.LBB130_28
.LBB130_25:                             // %"$35"
	ldp	w22, w9, [x8]
	bfi	x22, x9, #32, #32
	ldp	w1, w8, [x22, #8]
	bfi	x1, x8, #32, #32
	mov	x0, x21
	bl	equal
	tbnz	w0, #0, .LBB130_27
// %bb.26:                              // %"$36"
	mov	x0, x19
	mov	x1, x20
	bl	redefMsg
.LBB130_27:                             // %"$37"
	lsr	x8, x21, #32
	stp	w21, w8, [x22, #8]
.LBB130_28:                             // %"$29"
	mov	x0, x20
	mov	x1, x19
	bl	putSrc
	mov	x0, x19
	ldp	x20, x19, [sp, #32]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #16]             // 16-byte Folded Reload
	ldp	x30, x23, [sp], #48             // 16-byte Folded Reload
	ret
.LBB130_29:                             // %"$20"
	adrp	x2, .L$181
	add	x2, x2, :lo12:.L$181
	mov	x0, x23
	mov	x1, x19
	mov	x3, xzr
	bl	err
.Lfunc_end130:
	.size	_dm, .Lfunc_end130-_dm
	.cfi_endproc
                                        // -- End function
	.globl	_box                            // -- Begin function _box
	.p2align	4
	.type	_box,@function
_box:                                   // @_box
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w1, w8, [x9]
	bfi	x1, x8, #32, #32
	tst	x1, #0x6
	b.ne	.LBB131_4
// %bb.1:                               // %"$3"
	tbz	w1, #3, .LBB131_3
// %bb.2:                               // %"$6"
	ldp	w1, w8, [x1]
	bfi	x1, x8, #32, #32
	b	.LBB131_4
.LBB131_3:                              // %"$5"
	mov	x0, x1
	bl	evList
	mov	x1, x0
.LBB131_4:                              // %"$2"
	mov	w0, #2
	bl	consSym
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end131:
	.size	_box, .Lfunc_end131-_box
	.cfi_endproc
                                        // -- End function
	.globl	_new                            // -- Begin function _new
	.p2align	4
	.type	_new,@function
_new:                                   // @_new
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-64]!           // 16-byte Folded Spill
	stp	x24, x23, [sp, #16]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #32]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #48]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 64
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w30, -56
	.cfi_offset w29, -64
	mov	x20, x0
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w21, w8, [x9]
	bfi	x21, x8, #32, #32
	ldp	w19, w22, [x9, #8]
	tst	x21, #0x6
	b.ne	.LBB132_4
// %bb.1:                               // %"$3"
	tbz	w21, #3, .LBB132_3
// %bb.2:                               // %"$6"
	ldp	w21, w8, [x21]
	bfi	x21, x8, #32, #32
	b	.LBB132_4
.LBB132_3:                              // %"$5"
	mov	x0, x21
	bl	evList
	mov	x21, x0
.LBB132_4:                              // %"$2"
	bfi	x19, x22, #32, #32
	tst	x21, #0xf
	b.eq	.LBB132_7
// %bb.5:                               // %"$8"
	adrp	x8, SymTab+8
	add	x8, x8, :lo12:SymTab+8
	cmp	x21, x8
	b.ne	.LBB132_9
// %bb.6:                               // %"$11"
	mov	w0, #2
	mov	w1, #2
	b	.LBB132_8
.LBB132_7:                              // %"$9"
	mov	w0, #2
	mov	x1, x21
.LBB132_8:                              // %"$7"
	bl	consSym
	mov	x20, x0
	b	.LBB132_13
.LBB132_9:                              // %"$10"
	tbz	w21, #1, .LBB132_11
// %bb.10:                              // %"$12"
	lsr	x1, x21, #4
	b	.LBB132_12
.LBB132_11:
	mov	w1, #1
.LBB132_12:                             // %"$14"
	mov	x0, x20
                                        // kill: def $w1 killed $w1 killed $x1
	bl	newId
	mov	x22, x0
	bl	extern
	mov	x20, x0
	add	x8, x22, x22
	mov	x9, #8
	movk	x9, #32768, lsl #48
	orr	x8, x9, x8, lsr #1
	lsr	x9, x8, #32
	stp	w8, w9, [x0, #-8]
.LBB132_13:                             // %"$7"
	adrp	x22, env
	ldr	x8, [x22, :lo12:env]
	mov	x9, sp
	sub	x23, x9, #16                    // =16
	mov	sp, x23
	lsr	x10, x20, #32
	lsr	x11, x8, #32
	stp	w20, w10, [x9, #-16]
	stp	w8, w11, [x9, #-8]
	tst	x21, #0xf
	str	x23, [x22, :lo12:env]
	b.eq	.LBB132_19
// %bb.14:                              // %"$15"
	ldp	w0, w8, [x19]
	bfi	x0, x8, #32, #32
	ldp	w19, w8, [x19, #8]
	bfi	x19, x8, #32, #32
	tst	x0, #0x6
	b.ne	.LBB132_18
// %bb.15:                              // %"$18"
	tbz	w0, #3, .LBB132_17
// %bb.16:                              // %"$21"
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB132_18
.LBB132_17:                             // %"$20"
	bl	evList
.LBB132_18:                             // %"$17"
	lsr	x8, x0, #32
	stp	w0, w8, [x20]
.LBB132_19:                             // %"$16"
	adrp	x21, ($Ret)
	str	xzr, [x21, :lo12:($Ret)]
	adrp	x1, SymTab+216
	add	x1, x1, :lo12:SymTab+216
	mov	x0, x20
	bl	method
	cbz	x0, .LBB132_21
// %bb.20:                              // %"$24"
	mov	x3, x0
	ldr	x1, [x21, :lo12:($Ret)]
	adrp	x2, SymTab+216
	add	x2, x2, :lo12:SymTab+216
	mov	x0, x20
	mov	x4, x19
	bl	evMethod
	b	.LBB132_22
.LBB132_21:                             // %"$23"
	tst	x19, #0xf
	b.eq	.LBB132_23
.LBB132_22:                             // %"$22"
	ldp	w9, w8, [x23, #8]
	bfi	x9, x8, #32, #32
	str	x9, [x22, :lo12:env]
	mov	x0, x20
	mov	sp, x29
	ldp	x20, x19, [sp, #48]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #32]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #64             // 16-byte Folded Reload
	ret
.LBB132_23:                             // %"$26"
	mov	x8, sp
	sub	x24, x8, #16                    // =16
	mov	sp, x24
	ldr	x9, [x22, :lo12:env]
	lsr	x10, x9, #32
	stp	w9, w10, [x8, #-8]
	str	x24, [x22, :lo12:env]
	b	.LBB132_26
.LBB132_24:                             // %"$36"
                                        //   in Loop: Header=BB132_26 Depth=1
	mov	x0, x2
	bl	evList
	mov	x2, x0
.LBB132_25:                             // %"$33"
                                        //   in Loop: Header=BB132_26 Depth=1
	mov	x0, x20
	mov	x1, x21
	bl	put
	tst	x19, #0xf
	b.ne	.LBB132_22
.LBB132_26:                             // %"$27"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w21, w8, [x19]
	bfi	x21, x8, #32, #32
	ldp	w19, w8, [x19, #8]
	bfi	x19, x8, #32, #32
	tst	x21, #0x6
	b.ne	.LBB132_30
// %bb.27:                              // %"$29"
                                        //   in Loop: Header=BB132_26 Depth=1
	tbz	w21, #3, .LBB132_29
// %bb.28:                              // %"$32"
                                        //   in Loop: Header=BB132_26 Depth=1
	ldp	w21, w8, [x21]
	bfi	x21, x8, #32, #32
	b	.LBB132_30
.LBB132_29:                             // %"$31"
                                        //   in Loop: Header=BB132_26 Depth=1
	mov	x0, x21
	bl	evList
	mov	x21, x0
.LBB132_30:                             // %"$28"
                                        //   in Loop: Header=BB132_26 Depth=1
	lsr	x8, x21, #32
	stp	w21, w8, [x24]
	ldp	w2, w8, [x19]
	bfi	x2, x8, #32, #32
	ldp	w19, w8, [x19, #8]
	bfi	x19, x8, #32, #32
	tst	x2, #0x6
	b.ne	.LBB132_25
// %bb.31:                              // %"$34"
                                        //   in Loop: Header=BB132_26 Depth=1
	tbz	w2, #3, .LBB132_24
// %bb.32:                              // %"$37"
                                        //   in Loop: Header=BB132_26 Depth=1
	ldp	w2, w8, [x2]
	bfi	x2, x8, #32, #32
	b	.LBB132_25
.Lfunc_end132:
	.size	_new, .Lfunc_end132-_new
	.cfi_endproc
                                        // -- End function
	.globl	_type                           // -- Begin function _type
	.p2align	4
	.type	_type,@function
_type:                                  // @_type
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-32]!                // 8-byte Folded Spill
	stp	x20, x19, [sp, #16]             // 16-byte Folded Spill
	.cfi_def_cfa_offset 32
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w30, -32
	mov	x19, x0
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w20, w8, [x9]
	bfi	x20, x8, #32, #32
	tst	x20, #0x6
	b.ne	.LBB133_4
// %bb.1:                               // %"$3"
	tbz	w20, #3, .LBB133_3
// %bb.2:                               // %"$6"
	ldp	w20, w8, [x20]
	bfi	x20, x8, #32, #32
	b	.LBB133_4
.LBB133_3:                              // %"$5"
	mov	x0, x20
	bl	evList
	mov	x20, x0
.LBB133_4:                              // %"$2"
	eor	w8, w20, #0x8
	tst	x8, #0xe
	b.eq	.LBB133_7
// %bb.5:
	adrp	x0, SymTab+8
	add	x0, x0, :lo12:SymTab+8
.LBB133_6:                              // %"$9"
	ldp	x20, x19, [sp, #16]             // 16-byte Folded Reload
	ldr	x30, [sp], #32                  // 8-byte Folded Reload
	ret
.LBB133_7:                              // %"$8"
	ldurb	w8, [x20, #-8]
	tbz	w8, #3, .LBB133_9
// %bb.8:                               // %"$10"
	mov	x0, x19
	mov	x1, x20
	bl	dbFetch
.LBB133_9:                              // %"$11"
	ldp	w8, w9, [x20]
	bfi	x8, x9, #32, #32
	adrp	x0, SymTab+8
	add	x0, x0, :lo12:SymTab+8
	mov	x9, x8
.LBB133_10:                             // %"$12"
                                        // =>This Inner Loop Header: Depth=1
	tst	x9, #0xf
	b.ne	.LBB133_6
// %bb.11:                              // %"$13"
                                        //   in Loop: Header=BB133_10 Depth=1
	ldrb	w10, [x9]
	tst	w10, #0xf
	b.ne	.LBB133_13
// %bb.12:                              // %"$16"
                                        //   in Loop: Header=BB133_10 Depth=1
	ldp	w9, w10, [x9, #8]
	bfi	x9, x10, #32, #32
	cmp	x8, x9
	b.ne	.LBB133_10
	b	.LBB133_6
.LBB133_13:                             // %"$17"
	mov	x10, x9
	adrp	x0, SymTab+8
	add	x0, x0, :lo12:SymTab+8
.LBB133_14:                             // %"$18"
                                        // =>This Inner Loop Header: Depth=1
	ldr	w11, [x10]
	eor	w11, w11, #0x8
	tst	x11, #0xe
	b.ne	.LBB133_6
// %bb.15:                              // %"$19"
                                        //   in Loop: Header=BB133_14 Depth=1
	ldp	w10, w11, [x10, #8]
	bfi	x10, x11, #32, #32
	tst	x10, #0xf
	b.ne	.LBB133_17
// %bb.16:                              // %"$22"
                                        //   in Loop: Header=BB133_14 Depth=1
	cmp	x8, x10
	b.ne	.LBB133_14
	b	.LBB133_6
.LBB133_17:                             // %"$23"
	cmp	x10, x0
	adrp	x8, SymTab+8
	add	x8, x8, :lo12:SymTab+8
	csel	x0, x9, x8, eq
	b	.LBB133_6
.Lfunc_end133:
	.size	_type, .Lfunc_end133-_type
	.cfi_endproc
                                        // -- End function
	.globl	_isa                            // -- Begin function _isa
	.p2align	4
	.type	_isa,@function
_isa:                                   // @_isa
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-64]!           // 16-byte Folded Spill
	str	x23, [sp, #16]                  // 8-byte Folded Spill
	stp	x22, x21, [sp, #32]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #48]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 64
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -48
	.cfi_offset w30, -56
	.cfi_offset w29, -64
	mov	x20, x0
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w19, w8, [x9]
	bfi	x19, x8, #32, #32
	ldp	w21, w8, [x9, #8]
	bfi	x21, x8, #32, #32
	tst	x19, #0x6
	b.ne	.LBB134_4
// %bb.1:                               // %"$3"
	tbz	w19, #3, .LBB134_3
// %bb.2:                               // %"$6"
	ldp	w19, w8, [x19]
	bfi	x19, x8, #32, #32
	b	.LBB134_4
.LBB134_3:                              // %"$5"
	mov	x0, x19
	bl	evList
	mov	x19, x0
.LBB134_4:                              // %"$2"
	adrp	x22, env
	ldr	x8, [x22, :lo12:env]
	mov	x9, sp
	sub	x23, x9, #16                    // =16
	mov	sp, x23
	lsr	x10, x19, #32
	stp	w19, w10, [x9, #-16]
	lsr	x10, x8, #32
	stp	w8, w10, [x9, #-8]
	str	x23, [x22, :lo12:env]
	ldp	w21, w8, [x21]
	bfi	x21, x8, #32, #32
	tst	x21, #0x6
	b.ne	.LBB134_8
// %bb.5:                               // %"$8"
	tbz	w21, #3, .LBB134_7
// %bb.6:                               // %"$11"
	ldp	w21, w8, [x21]
	bfi	x21, x8, #32, #32
	b	.LBB134_8
.LBB134_7:                              // %"$10"
	mov	x0, x21
	bl	evList
	mov	x21, x0
.LBB134_8:                              // %"$7"
	eor	w8, w21, #0x8
	tst	x8, #0xe
	b.eq	.LBB134_11
.LBB134_9:                              // %"$26"
	adrp	x21, SymTab+8
	add	x21, x21, :lo12:SymTab+8
.LBB134_10:                             // %"$14"
	ldp	w9, w8, [x23, #8]
	bfi	x9, x8, #32, #32
	str	x9, [x22, :lo12:env]
	mov	x0, x21
	mov	sp, x29
	ldp	x20, x19, [sp, #48]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #32]             // 16-byte Folded Reload
	ldr	x23, [sp, #16]                  // 8-byte Folded Reload
	ldp	x29, x30, [sp], #64             // 16-byte Folded Reload
	ret
.LBB134_11:                             // %"$13"
	ldurb	w8, [x21, #-8]
	tbz	w8, #3, .LBB134_13
// %bb.12:                              // %"$15"
	mov	x0, x20
	mov	x1, x21
	bl	dbFetch
.LBB134_13:                             // %"$16"
	tst	x19, #0xf
	b.eq	.LBB134_15
// %bb.14:                              // %"$18"
	mov	x0, x19
	mov	x1, x21
	bl	isa
	tbz	w0, #0, .LBB134_9
	b	.LBB134_10
.LBB134_15:                             // %"$20.preheader"
	adrp	x20, SymTab+8
	add	x20, x20, :lo12:SymTab+8
.LBB134_16:                             // %"$20"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w0, w8, [x19]
	bfi	x0, x8, #32, #32
	mov	x1, x21
	bl	isa
	tbz	w0, #0, .LBB134_18
// %bb.17:                              // %"$21"
                                        //   in Loop: Header=BB134_16 Depth=1
	ldp	w19, w8, [x19, #8]
	bfi	x19, x8, #32, #32
	tst	x19, #0xf
	b.eq	.LBB134_16
	b	.LBB134_10
.LBB134_18:
	mov	x21, x20
	b	.LBB134_10
.Lfunc_end134:
	.size	_isa, .Lfunc_end134-_isa
	.cfi_endproc
                                        // -- End function
	.globl	_method                         // -- Begin function _method
	.p2align	4
	.type	_method,@function
_method:                                // @_method
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-64]!           // 16-byte Folded Spill
	str	x23, [sp, #16]                  // 8-byte Folded Spill
	stp	x22, x21, [sp, #32]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #48]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 64
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -48
	.cfi_offset w30, -56
	.cfi_offset w29, -64
	mov	x19, x0
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w20, w8, [x9]
	bfi	x20, x8, #32, #32
	ldp	w21, w8, [x9, #8]
	bfi	x21, x8, #32, #32
	tst	x20, #0x6
	b.ne	.LBB135_4
// %bb.1:                               // %"$3"
	tbz	w20, #3, .LBB135_3
// %bb.2:                               // %"$6"
	ldp	w20, w8, [x20]
	bfi	x20, x8, #32, #32
	b	.LBB135_4
.LBB135_3:                              // %"$5"
	mov	x0, x20
	bl	evList
	mov	x20, x0
.LBB135_4:                              // %"$2"
	adrp	x22, env
	ldr	x8, [x22, :lo12:env]
	mov	x9, sp
	sub	x23, x9, #16                    // =16
	mov	sp, x23
	lsr	x10, x20, #32
	stp	w20, w10, [x9, #-16]
	lsr	x10, x8, #32
	stp	w8, w10, [x9, #-8]
	str	x23, [x22, :lo12:env]
	ldp	w21, w8, [x21]
	bfi	x21, x8, #32, #32
	tst	x21, #0x6
	b.ne	.LBB135_8
// %bb.5:                               // %"$8"
	tbz	w21, #3, .LBB135_7
// %bb.6:                               // %"$11"
	ldp	w21, w8, [x21]
	bfi	x21, x8, #32, #32
	b	.LBB135_8
.LBB135_7:                              // %"$10"
	mov	x0, x21
	bl	evList
	mov	x21, x0
.LBB135_8:                              // %"$7"
	eor	w8, w21, #0x8
	tst	x8, #0xe
	b.ne	.LBB135_12
// %bb.9:                               // %"$13"
	ldurb	w8, [x21, #-8]
	tbz	w8, #3, .LBB135_11
// %bb.10:                              // %"$14"
	mov	x0, x19
	mov	x1, x21
	bl	dbFetch
.LBB135_11:                             // %"$15"
	mov	x0, x21
	mov	x1, x20
	bl	method
	adrp	x8, SymTab+8
	add	x8, x8, :lo12:SymTab+8
	cmp	x0, #0                          // =0
	csel	x0, x0, x8, ne
	ldp	w9, w8, [x23, #8]
	bfi	x9, x8, #32, #32
	str	x9, [x22, :lo12:env]
	mov	sp, x29
	ldp	x20, x19, [sp, #48]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #32]             // 16-byte Folded Reload
	ldr	x23, [sp, #16]                  // 8-byte Folded Reload
	ldp	x29, x30, [sp], #64             // 16-byte Folded Reload
	ret
.LBB135_12:                             // %"$12"
	mov	x0, x19
	mov	x1, x21
	bl	symErr
.Lfunc_end135:
	.size	_method, .Lfunc_end135-_method
	.cfi_endproc
                                        // -- End function
	.globl	_send                           // -- Begin function _send
	.p2align	4
	.type	_send,@function
_send:                                  // @_send
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-80]!           // 16-byte Folded Spill
	str	x25, [sp, #16]                  // 8-byte Folded Spill
	stp	x24, x23, [sp, #32]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #48]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #64]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 80
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -64
	.cfi_offset w30, -72
	.cfi_offset w29, -80
	mov	x19, x0
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w20, w8, [x9]
	bfi	x20, x8, #32, #32
	ldp	w22, w8, [x9, #8]
	bfi	x22, x8, #32, #32
	tst	x20, #0x6
	b.ne	.LBB136_4
// %bb.1:                               // %"$3"
	tbz	w20, #3, .LBB136_3
// %bb.2:                               // %"$6"
	ldp	w20, w8, [x20]
	bfi	x20, x8, #32, #32
	b	.LBB136_4
.LBB136_3:                              // %"$5"
	mov	x0, x20
	bl	evList
	mov	x20, x0
.LBB136_4:                              // %"$2"
	adrp	x23, env
	ldr	x8, [x23, :lo12:env]
	mov	x9, sp
	sub	x24, x9, #16                    // =16
	mov	sp, x24
	lsr	x10, x20, #32
	stp	w20, w10, [x9, #-16]
	lsr	x10, x8, #32
	stp	w8, w10, [x9, #-8]
	str	x24, [x23, :lo12:env]
	ldp	w21, w8, [x22]
	bfi	x21, x8, #32, #32
	tst	x21, #0x6
	b.ne	.LBB136_8
// %bb.5:                               // %"$8"
	tbz	w21, #3, .LBB136_7
// %bb.6:                               // %"$11"
	ldp	w21, w8, [x21]
	bfi	x21, x8, #32, #32
	b	.LBB136_8
.LBB136_7:                              // %"$10"
	mov	x0, x21
	bl	evList
	mov	x21, x0
.LBB136_8:                              // %"$7"
	eor	w8, w21, #0x8
	tst	x8, #0xe
	b.ne	.LBB136_13
// %bb.9:                               // %"$13"
	ldr	x8, [x23, :lo12:env]
	mov	x9, sp
	sub	x10, x9, #16                    // =16
	mov	sp, x10
	lsr	x11, x21, #32
	stp	w21, w11, [x9, #-16]
	lsr	x11, x8, #32
	stp	w8, w11, [x9, #-8]
	str	x10, [x23, :lo12:env]
	ldurb	w8, [x21, #-8]
	tbz	w8, #3, .LBB136_11
// %bb.10:                              // %"$14"
	mov	x0, x19
	mov	x1, x21
	bl	dbFetch
.LBB136_11:                             // %"$15"
	adrp	x25, ($Ret)
	str	xzr, [x25, :lo12:($Ret)]
	mov	x0, x21
	mov	x1, x20
	bl	method
	mov	x3, x0
	cbz	x0, .LBB136_14
// %bb.12:                              // %"$16"
	ldr	x1, [x25, :lo12:($Ret)]
	ldp	w4, w8, [x22, #8]
	bfi	x4, x8, #32, #32
	mov	x0, x21
	mov	x2, x20
	bl	evMethod
	ldp	w9, w8, [x24, #8]
	bfi	x9, x8, #32, #32
	str	x9, [x23, :lo12:env]
	mov	sp, x29
	ldp	x20, x19, [sp, #64]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #48]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #32]             // 16-byte Folded Reload
	ldr	x25, [sp, #16]                  // 8-byte Folded Reload
	ldp	x29, x30, [sp], #80             // 16-byte Folded Reload
	ret
.LBB136_13:                             // %"$12"
	mov	x0, x19
	mov	x1, x21
	bl	symErr
.LBB136_14:                             // %"$17"
	adrp	x2, .L$181
	add	x2, x2, :lo12:.L$181
	mov	x0, x19
	mov	x1, x20
	bl	err
.Lfunc_end136:
	.size	_send, .Lfunc_end136-_send
	.cfi_endproc
                                        // -- End function
	.globl	_try                            // -- Begin function _try
	.p2align	4
	.type	_try,@function
_try:                                   // @_try
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-64]!           // 16-byte Folded Spill
	stp	x24, x23, [sp, #16]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #32]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #48]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 64
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w30, -56
	.cfi_offset w29, -64
	mov	x20, x0
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w19, w8, [x9]
	bfi	x19, x8, #32, #32
	ldp	w23, w8, [x9, #8]
	bfi	x23, x8, #32, #32
	tst	x19, #0x6
	b.ne	.LBB137_4
// %bb.1:                               // %"$3"
	tbz	w19, #3, .LBB137_3
// %bb.2:                               // %"$6"
	ldp	w19, w8, [x19]
	bfi	x19, x8, #32, #32
	b	.LBB137_4
.LBB137_3:                              // %"$5"
	mov	x0, x19
	bl	evList
	mov	x19, x0
.LBB137_4:                              // %"$2"
	adrp	x22, env
	ldr	x8, [x22, :lo12:env]
	mov	x9, sp
	sub	x24, x9, #16                    // =16
	mov	sp, x24
	lsr	x10, x19, #32
	stp	w19, w10, [x9, #-16]
	lsr	x10, x8, #32
	stp	w8, w10, [x9, #-8]
	str	x24, [x22, :lo12:env]
	ldp	w21, w8, [x23]
	bfi	x21, x8, #32, #32
	tst	x21, #0x6
	b.ne	.LBB137_8
// %bb.5:                               // %"$8"
	tbz	w21, #3, .LBB137_7
// %bb.6:                               // %"$11"
	ldp	w21, w8, [x21]
	bfi	x21, x8, #32, #32
	b	.LBB137_8
.LBB137_7:                              // %"$10"
	mov	x0, x21
	bl	evList
	mov	x21, x0
.LBB137_8:                              // %"$7"
	ldr	x8, [x22, :lo12:env]
	mov	x9, sp
	sub	x10, x9, #16                    // =16
	mov	sp, x10
	lsr	x11, x21, #32
	stp	w21, w11, [x9, #-16]
	lsr	x11, x8, #32
	stp	w8, w11, [x9, #-8]
	eor	w8, w21, #0x8
	tst	x8, #0xe
	str	x10, [x22, :lo12:env]
	b.eq	.LBB137_11
.LBB137_9:
	adrp	x0, SymTab+8
	add	x0, x0, :lo12:SymTab+8
.LBB137_10:                             // %"$14"
	ldp	w9, w8, [x24, #8]
	bfi	x9, x8, #32, #32
	str	x9, [x22, :lo12:env]
	mov	sp, x29
	ldp	x20, x19, [sp, #48]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #32]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #64             // 16-byte Folded Reload
	ret
.LBB137_11:                             // %"$13"
	ldurb	w8, [x21, #-8]
	tbz	w8, #3, .LBB137_14
// %bb.12:                              // %"$15"
	mov	x0, x21
	bl	isLife
	tbz	w0, #0, .LBB137_9
// %bb.13:                              // %"$18"
	mov	x0, x20
	mov	x1, x21
	bl	dbFetch
.LBB137_14:                             // %"$16"
	adrp	x20, ($Ret)
	str	xzr, [x20, :lo12:($Ret)]
	mov	x0, x21
	mov	x1, x19
	bl	method
	cbz	x0, .LBB137_9
// %bb.15:                              // %"$19"
	mov	x3, x0
	ldr	x1, [x20, :lo12:($Ret)]
	ldp	w4, w8, [x23, #8]
	bfi	x4, x8, #32, #32
	mov	x0, x21
	mov	x2, x19
	bl	evMethod
	b	.LBB137_10
.Lfunc_end137:
	.size	_try, .Lfunc_end137-_try
	.cfi_endproc
                                        // -- End function
	.globl	_super                          // -- Begin function _super
	.p2align	4
	.type	_super,@function
_super:                                 // @_super
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-64]!                // 8-byte Folded Spill
	stp	x24, x23, [sp, #16]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #32]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #48]             // 16-byte Folded Spill
	.cfi_def_cfa_offset 64
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w30, -64
	mov	x19, x0
	adrp	x21, env+104
	add	x21, x21, :lo12:env+104
	adrp	x8, SymTab+424
	add	x8, x8, :lo12:SymTab+424
	ldp	x9, x20, [x21]
	cmp	x9, #0                          // =0
	csel	x8, x9, x8, ne
	ldp	w8, w9, [x8]
	bfi	x8, x9, #32, #32
	ldp	w22, w9, [x8]
	bfi	x22, x9, #32, #32
.LBB138_1:                              // %"$5"
                                        // =>This Inner Loop Header: Depth=1
	ldrb	w8, [x22]
	tst	w8, #0xf
	b.ne	.LBB138_3
// %bb.2:                               // %"$6"
                                        //   in Loop: Header=BB138_1 Depth=1
	ldp	w22, w8, [x22, #8]
	bfi	x22, x8, #32, #32
	b	.LBB138_1
.LBB138_3:
	adrp	x23, ($Ret)
	tst	x22, #0xf
	b.ne	.LBB138_6
.LBB138_4:                              // %"$10"
                                        // =>This Inner Loop Header: Depth=1
	str	x22, [x23, :lo12:($Ret)]
	ldp	w0, w8, [x22]
	bfi	x0, x8, #32, #32
	mov	x1, x20
	bl	method
	cbnz	x0, .LBB138_7
// %bb.5:                               // %"$11"
                                        //   in Loop: Header=BB138_4 Depth=1
	ldp	w22, w8, [x22, #8]
	bfi	x22, x8, #32, #32
	tst	x22, #0xf
	b.eq	.LBB138_4
.LBB138_6:                              // %"$9"
	adrp	x2, .L$182
	add	x2, x2, :lo12:.L$182
	mov	x0, x19
	mov	x1, x20
	mov	x3, xzr
	bl	err
.LBB138_7:                              // %"$13"
	ldp	x22, x24, [x21]
	ldr	x8, [x23, :lo12:($Ret)]
	stp	x8, x20, [x21]
	mov	x1, x19
	bl	evExpr
	stp	x22, x24, [x21]
	ldp	x20, x19, [sp, #48]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #32]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #16]             // 16-byte Folded Reload
	ldr	x30, [sp], #64                  // 8-byte Folded Reload
	ret
.Lfunc_end138:
	.size	_super, .Lfunc_end138-_super
	.cfi_endproc
                                        // -- End function
	.globl	_extra                          // -- Begin function _extra
	.p2align	4
	.type	_extra,@function
_extra:                                 // @_extra
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x30, x23, [sp, #-48]!           // 16-byte Folded Spill
	stp	x22, x21, [sp, #16]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #32]             // 16-byte Folded Spill
	.cfi_def_cfa_offset 48
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w30, -48
	mov	x19, x0
	adrp	x8, env+112
	ldr	x20, [x8, :lo12:env+112]
	adrp	x8, SymTab+424
	ldr	x0, [x8, :lo12:SymTab+424]
	mov	x1, x20
	bl	extra
	cmp	x0, #0                          // =0
	b.le	.LBB139_2
// %bb.1:                               // %"$3"
	adrp	x21, env+104
	add	x21, x21, :lo12:env+104
	ldp	x22, x23, [x21]
	adrp	x8, ($Ret)
	ldr	x8, [x8, :lo12:($Ret)]
	stp	x8, x20, [x21]
	mov	x1, x19
	bl	evExpr
	stp	x22, x23, [x21]
	ldp	x20, x19, [sp, #32]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #16]             // 16-byte Folded Reload
	ldp	x30, x23, [sp], #48             // 16-byte Folded Reload
	ret
.LBB139_2:                              // %"$2"
	adrp	x2, .L$183
	add	x2, x2, :lo12:.L$183
	mov	x0, x19
	mov	x1, x20
	mov	x3, xzr
	bl	err
.Lfunc_end139:
	.size	_extra, .Lfunc_end139-_extra
	.cfi_endproc
                                        // -- End function
	.globl	_and                            // -- Begin function _and
	.p2align	4
	.type	_and,@function
_and:                                   // @_and
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x30, x21, [sp, #-32]!           // 16-byte Folded Spill
	stp	x20, x19, [sp, #16]             // 16-byte Folded Spill
	.cfi_def_cfa_offset 32
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w30, -32
	ldp	w19, w8, [x0, #8]
	bfi	x19, x8, #32, #32
	adrp	x20, SymTab+8
	add	x20, x20, :lo12:SymTab+8
	adrp	x21, SymTab+376
.LBB140_1:                              // %"$2"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w0, w8, [x19]
	bfi	x0, x8, #32, #32
	tst	x0, #0x6
	b.ne	.LBB140_4
// %bb.2:                               // %"$4"
                                        //   in Loop: Header=BB140_1 Depth=1
	tbz	w0, #3, .LBB140_6
// %bb.3:                               // %"$7"
                                        //   in Loop: Header=BB140_1 Depth=1
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
.LBB140_4:                              // %"$3"
                                        //   in Loop: Header=BB140_1 Depth=1
	cmp	x0, x20
	b.eq	.LBB140_7
.LBB140_5:                              // %"$8"
                                        //   in Loop: Header=BB140_1 Depth=1
	str	x0, [x21, :lo12:SymTab+376]
	ldp	w19, w8, [x19, #8]
	bfi	x19, x8, #32, #32
	tst	x19, #0xf
	b.eq	.LBB140_1
	b	.LBB140_7
.LBB140_6:                              // %"$6"
                                        //   in Loop: Header=BB140_1 Depth=1
	bl	evList
	cmp	x0, x20
	b.ne	.LBB140_5
.LBB140_7:                              // %"$9"
	ldp	x20, x19, [sp, #16]             // 16-byte Folded Reload
	ldp	x30, x21, [sp], #32             // 16-byte Folded Reload
	ret
.Lfunc_end140:
	.size	_and, .Lfunc_end140-_and
	.cfi_endproc
                                        // -- End function
	.globl	_or                             // -- Begin function _or
	.p2align	4
	.type	_or,@function
_or:                                    // @_or
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-32]!                // 8-byte Folded Spill
	stp	x20, x19, [sp, #16]             // 16-byte Folded Spill
	.cfi_def_cfa_offset 32
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w30, -32
	ldp	w19, w8, [x0, #8]
	bfi	x19, x8, #32, #32
	adrp	x20, SymTab+8
	add	x20, x20, :lo12:SymTab+8
.LBB141_1:                              // %"$2"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w0, w8, [x19]
	bfi	x0, x8, #32, #32
	tst	x0, #0x6
	b.ne	.LBB141_4
// %bb.2:                               // %"$4"
                                        //   in Loop: Header=BB141_1 Depth=1
	tbz	w0, #3, .LBB141_6
// %bb.3:                               // %"$7"
                                        //   in Loop: Header=BB141_1 Depth=1
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
.LBB141_4:                              // %"$3"
                                        //   in Loop: Header=BB141_1 Depth=1
	cmp	x0, x20
	b.ne	.LBB141_7
.LBB141_5:                              // %"$8"
                                        //   in Loop: Header=BB141_1 Depth=1
	ldp	w19, w8, [x19, #8]
	bfi	x19, x8, #32, #32
	tst	x19, #0xf
	b.eq	.LBB141_1
	b	.LBB141_8
.LBB141_6:                              // %"$6"
                                        //   in Loop: Header=BB141_1 Depth=1
	bl	evList
	cmp	x0, x20
	b.eq	.LBB141_5
.LBB141_7:                              // %"$10"
	adrp	x8, SymTab+376
	str	x0, [x8, :lo12:SymTab+376]
.LBB141_8:                              // %"$9"
	ldp	x20, x19, [sp, #16]             // 16-byte Folded Reload
	ldr	x30, [sp], #32                  // 8-byte Folded Reload
	ret
.Lfunc_end141:
	.size	_or, .Lfunc_end141-_or
	.cfi_endproc
                                        // -- End function
	.globl	_nand                           // -- Begin function _nand
	.p2align	4
	.type	_nand,@function
_nand:                                  // @_nand
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-32]!                // 8-byte Folded Spill
	stp	x20, x19, [sp, #16]             // 16-byte Folded Spill
	.cfi_def_cfa_offset 32
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w30, -32
	ldp	w20, w8, [x0, #8]
	bfi	x20, x8, #32, #32
	adrp	x19, SymTab+8
	add	x19, x19, :lo12:SymTab+8
.LBB142_1:                              // %"$2"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w0, w8, [x20]
	bfi	x0, x8, #32, #32
	tst	x0, #0x6
	b.ne	.LBB142_4
// %bb.2:                               // %"$4"
                                        //   in Loop: Header=BB142_1 Depth=1
	tbz	w0, #3, .LBB142_6
// %bb.3:                               // %"$7"
                                        //   in Loop: Header=BB142_1 Depth=1
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
.LBB142_4:                              // %"$3"
                                        //   in Loop: Header=BB142_1 Depth=1
	cmp	x0, x19
	b.eq	.LBB142_7
.LBB142_5:                              // %"$8"
                                        //   in Loop: Header=BB142_1 Depth=1
	str	x0, [x19, #368]
	ldp	w20, w8, [x20, #8]
	bfi	x20, x8, #32, #32
	tst	x20, #0xf
	b.eq	.LBB142_1
	b	.LBB142_8
.LBB142_6:                              // %"$6"
                                        //   in Loop: Header=BB142_1 Depth=1
	bl	evList
	cmp	x0, x19
	b.ne	.LBB142_5
.LBB142_7:
	add	x19, x19, #208                  // =208
.LBB142_8:                              // %"$9"
	mov	x0, x19
	ldp	x20, x19, [sp, #16]             // 16-byte Folded Reload
	ldr	x30, [sp], #32                  // 8-byte Folded Reload
	ret
.Lfunc_end142:
	.size	_nand, .Lfunc_end142-_nand
	.cfi_endproc
                                        // -- End function
	.globl	_nor                            // -- Begin function _nor
	.p2align	4
	.type	_nor,@function
_nor:                                   // @_nor
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x30, x21, [sp, #-32]!           // 16-byte Folded Spill
	stp	x20, x19, [sp, #16]             // 16-byte Folded Spill
	.cfi_def_cfa_offset 32
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w30, -32
	ldp	w20, w8, [x0, #8]
	adrp	x19, SymTab+8
	add	x19, x19, :lo12:SymTab+8
	bfi	x20, x8, #32, #32
	adrp	x21, SymTab+216
	add	x21, x21, :lo12:SymTab+216
.LBB143_1:                              // %"$2"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w0, w8, [x20]
	bfi	x0, x8, #32, #32
	tst	x0, #0x6
	b.ne	.LBB143_4
// %bb.2:                               // %"$4"
                                        //   in Loop: Header=BB143_1 Depth=1
	tbz	w0, #3, .LBB143_6
// %bb.3:                               // %"$7"
                                        //   in Loop: Header=BB143_1 Depth=1
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
.LBB143_4:                              // %"$3"
                                        //   in Loop: Header=BB143_1 Depth=1
	cmp	x0, x19
	b.ne	.LBB143_7
.LBB143_5:                              // %"$8"
                                        //   in Loop: Header=BB143_1 Depth=1
	ldp	w20, w8, [x20, #8]
	bfi	x20, x8, #32, #32
	tst	x20, #0xf
	b.eq	.LBB143_1
	b	.LBB143_8
.LBB143_6:                              // %"$6"
                                        //   in Loop: Header=BB143_1 Depth=1
	bl	evList
	cmp	x0, x19
	b.eq	.LBB143_5
.LBB143_7:                              // %"$10"
	str	x0, [x19, #368]
	b	.LBB143_9
.LBB143_8:
	mov	x19, x21
.LBB143_9:                              // %"$9"
	mov	x0, x19
	ldp	x20, x19, [sp, #16]             // 16-byte Folded Reload
	ldp	x30, x21, [sp], #32             // 16-byte Folded Reload
	ret
.Lfunc_end143:
	.size	_nor, .Lfunc_end143-_nor
	.cfi_endproc
                                        // -- End function
	.globl	_xor                            // -- Begin function _xor
	.p2align	4
	.type	_xor,@function
_xor:                                   // @_xor
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-32]!                // 8-byte Folded Spill
	stp	x20, x19, [sp, #16]             // 16-byte Folded Spill
	.cfi_def_cfa_offset 32
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w30, -32
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w0, w8, [x9]
	bfi	x0, x8, #32, #32
	ldp	w20, w8, [x9, #8]
	bfi	x20, x8, #32, #32
	tst	x0, #0x6
	b.ne	.LBB144_4
// %bb.1:                               // %"$3"
	tbz	w0, #3, .LBB144_3
// %bb.2:                               // %"$6"
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB144_4
.LBB144_3:                              // %"$5"
	bl	evList
.LBB144_4:                              // %"$2"
	adrp	x19, SymTab+8
	add	x19, x19, :lo12:SymTab+8
	cmp	x0, x19
	b.ne	.LBB144_10
// %bb.5:                               // %"$7"
	ldp	w0, w8, [x20]
	bfi	x0, x8, #32, #32
	tst	x0, #0x6
	b.ne	.LBB144_8
// %bb.6:                               // %"$11"
	tbz	w0, #3, .LBB144_15
// %bb.7:                               // %"$14"
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
.LBB144_8:                              // %"$10"
	cmp	x0, x19
	b.eq	.LBB144_18
.LBB144_9:                              // %"$16"
	adrp	x0, SymTab+216
	add	x0, x0, :lo12:SymTab+216
	b	.LBB144_18
.LBB144_10:                             // %"$8"
	ldp	w0, w8, [x20]
	bfi	x0, x8, #32, #32
	tst	x0, #0x6
	b.ne	.LBB144_13
// %bb.11:                              // %"$19"
	tbz	w0, #3, .LBB144_16
// %bb.12:                              // %"$22"
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
.LBB144_13:                             // %"$18"
	cmp	x0, x19
	b.ne	.LBB144_17
.LBB144_14:
	add	x0, x19, #208                   // =208
	b	.LBB144_18
.LBB144_15:                             // %"$13"
	bl	evList
	cmp	x0, x19
	b.ne	.LBB144_9
	b	.LBB144_18
.LBB144_16:                             // %"$21"
	bl	evList
	cmp	x0, x19
	b.eq	.LBB144_14
.LBB144_17:                             // %"$24"
	adrp	x0, SymTab+8
	add	x0, x0, :lo12:SymTab+8
.LBB144_18:                             // %"$9"
	ldp	x20, x19, [sp, #16]             // 16-byte Folded Reload
	ldr	x30, [sp], #32                  // 8-byte Folded Reload
	ret
.Lfunc_end144:
	.size	_xor, .Lfunc_end144-_xor
	.cfi_endproc
                                        // -- End function
	.globl	_bool                           // -- Begin function _bool
	.p2align	4
	.type	_bool,@function
_bool:                                  // @_bool
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w0, w8, [x9]
	bfi	x0, x8, #32, #32
	tst	x0, #0x6
	b.ne	.LBB145_4
// %bb.1:                               // %"$3"
	tbz	w0, #3, .LBB145_3
// %bb.2:                               // %"$6"
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB145_4
.LBB145_3:                              // %"$5"
	bl	evList
.LBB145_4:                              // %"$2"
	adrp	x8, SymTab+8
	add	x8, x8, :lo12:SymTab+8
	add	x9, x8, #208                    // =208
	cmp	x0, x8
	csel	x0, x0, x9, eq
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end145:
	.size	_bool, .Lfunc_end145-_bool
	.cfi_endproc
                                        // -- End function
	.globl	_not                            // -- Begin function _not
	.p2align	4
	.type	_not,@function
_not:                                   // @_not
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w0, w8, [x9]
	bfi	x0, x8, #32, #32
	tst	x0, #0x6
	b.ne	.LBB146_4
// %bb.1:                               // %"$3"
	tbz	w0, #3, .LBB146_3
// %bb.2:                               // %"$6"
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB146_4
.LBB146_3:                              // %"$5"
	bl	evList
.LBB146_4:                              // %"$2"
	adrp	x8, SymTab+8
	add	x8, x8, :lo12:SymTab+8
	cmp	x0, x8
	b.ne	.LBB146_6
// %bb.5:
	add	x8, x8, #208                    // =208
	b	.LBB146_7
.LBB146_6:                              // %"$8"
	str	x0, [x8, #368]
.LBB146_7:                              // %"$9"
	mov	x0, x8
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end146:
	.size	_not, .Lfunc_end146-_not
	.cfi_endproc
                                        // -- End function
	.globl	_nil                            // -- Begin function _nil
	.p2align	4
	.type	_nil,@function
_nil:                                   // @_nil
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x30, x19, [sp, #-16]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w19, -8
	.cfi_offset w30, -16
	ldp	w19, w8, [x0, #8]
	bfi	x19, x8, #32, #32
	b	.LBB147_2
.LBB147_1:                              // %"$4"
                                        //   in Loop: Header=BB147_2 Depth=1
	tst	x19, #0xf
	b.ne	.LBB147_4
.LBB147_2:                              // %"$2"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w0, w8, [x19]
	bfi	x0, x8, #32, #32
	ldp	w19, w8, [x19, #8]
	bfi	x19, x8, #32, #32
	tst	x0, #0xf
	b.ne	.LBB147_1
// %bb.3:                               // %"$3"
                                        //   in Loop: Header=BB147_2 Depth=1
	bl	evList
	b	.LBB147_1
.LBB147_4:                              // %"$6"
	adrp	x0, SymTab+8
	add	x0, x0, :lo12:SymTab+8
	ldp	x30, x19, [sp], #16             // 16-byte Folded Reload
	ret
.Lfunc_end147:
	.size	_nil, .Lfunc_end147-_nil
	.cfi_endproc
                                        // -- End function
	.globl	_t                              // -- Begin function _t
	.p2align	4
	.type	_t,@function
_t:                                     // @_t
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x30, x19, [sp, #-16]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w19, -8
	.cfi_offset w30, -16
	ldp	w19, w8, [x0, #8]
	bfi	x19, x8, #32, #32
	b	.LBB148_2
.LBB148_1:                              // %"$4"
                                        //   in Loop: Header=BB148_2 Depth=1
	tst	x19, #0xf
	b.ne	.LBB148_4
.LBB148_2:                              // %"$2"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w0, w8, [x19]
	bfi	x0, x8, #32, #32
	ldp	w19, w8, [x19, #8]
	bfi	x19, x8, #32, #32
	tst	x0, #0xf
	b.ne	.LBB148_1
// %bb.3:                               // %"$3"
                                        //   in Loop: Header=BB148_2 Depth=1
	bl	evList
	b	.LBB148_1
.LBB148_4:                              // %"$6"
	adrp	x0, SymTab+216
	add	x0, x0, :lo12:SymTab+216
	ldp	x30, x19, [sp], #16             // 16-byte Folded Reload
	ret
.Lfunc_end148:
	.size	_t, .Lfunc_end148-_t
	.cfi_endproc
                                        // -- End function
	.globl	_prog                           // -- Begin function _prog
	.p2align	4
	.type	_prog,@function
_prog:                                  // @_prog
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x30, x19, [sp, #-16]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w19, -8
	.cfi_offset w30, -16
	ldp	w19, w8, [x0, #8]
	bfi	x19, x8, #32, #32
.LBB149_1:                              // %"$2"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w0, w8, [x19]
	bfi	x0, x8, #32, #32
	ldp	w19, w8, [x19, #8]
	bfi	x19, x8, #32, #32
	tst	x19, #0xf
	b.ne	.LBB149_4
// %bb.2:                               // %"$3"
                                        //   in Loop: Header=BB149_1 Depth=1
	tst	x0, #0xf
	b.ne	.LBB149_1
// %bb.3:                               // %"$12"
                                        //   in Loop: Header=BB149_1 Depth=1
	bl	evList
	b	.LBB149_1
.LBB149_4:                              // %"$5"
	tst	x0, #0x6
	b.eq	.LBB149_6
// %bb.5:                               // %"$4"
	ldp	x30, x19, [sp], #16             // 16-byte Folded Reload
	ret
.LBB149_6:                              // %"$7"
	tbz	w0, #3, .LBB149_8
// %bb.7:                               // %"$10"
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	ldp	x30, x19, [sp], #16             // 16-byte Folded Reload
	ret
.LBB149_8:                              // %"$9"
	bl	evList
	ldp	x30, x19, [sp], #16             // 16-byte Folded Reload
	ret
.Lfunc_end149:
	.size	_prog, .Lfunc_end149-_prog
	.cfi_endproc
                                        // -- End function
	.globl	_prog1                          // -- Begin function _prog1
	.p2align	4
	.type	_prog1,@function
_prog1:                                 // @_prog1
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-48]!           // 16-byte Folded Spill
	stp	x22, x21, [sp, #16]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #32]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 48
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w30, -40
	.cfi_offset w29, -48
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w19, w8, [x9]
	bfi	x19, x8, #32, #32
	ldp	w20, w8, [x9, #8]
	bfi	x20, x8, #32, #32
	tst	x19, #0x6
	b.ne	.LBB150_4
// %bb.1:                               // %"$3"
	tbz	w19, #3, .LBB150_3
// %bb.2:                               // %"$6"
	ldp	w19, w8, [x19]
	bfi	x19, x8, #32, #32
	b	.LBB150_4
.LBB150_3:                              // %"$5"
	mov	x0, x19
	bl	evList
	mov	x19, x0
.LBB150_4:                              // %"$2"
	adrp	x21, env
	ldr	x8, [x21, :lo12:env]
	mov	x9, sp
	sub	x22, x9, #16                    // =16
	mov	sp, x22
	lsr	x10, x19, #32
	lsr	x11, x8, #32
	stp	w19, w10, [x9, #-16]
	stp	w8, w11, [x9, #-8]
	str	x22, [x21, :lo12:env]
	adrp	x8, SymTab+376
	str	x19, [x8, :lo12:SymTab+376]
	b	.LBB150_6
.LBB150_5:                              // %"$9"
                                        //   in Loop: Header=BB150_6 Depth=1
	tst	x20, #0xf
	b.ne	.LBB150_8
.LBB150_6:                              // %"$7"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w0, w8, [x20]
	bfi	x0, x8, #32, #32
	ldp	w20, w8, [x20, #8]
	bfi	x20, x8, #32, #32
	tst	x0, #0xf
	b.ne	.LBB150_5
// %bb.7:                               // %"$8"
                                        //   in Loop: Header=BB150_6 Depth=1
	bl	evList
	b	.LBB150_5
.LBB150_8:                              // %"$11"
	ldp	w9, w8, [x22, #8]
	bfi	x9, x8, #32, #32
	str	x9, [x21, :lo12:env]
	mov	x0, x19
	mov	sp, x29
	ldp	x20, x19, [sp, #32]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #48             // 16-byte Folded Reload
	ret
.Lfunc_end150:
	.size	_prog1, .Lfunc_end150-_prog1
	.cfi_endproc
                                        // -- End function
	.globl	_prog2                          // -- Begin function _prog2
	.p2align	4
	.type	_prog2,@function
_prog2:                                 // @_prog2
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-48]!           // 16-byte Folded Spill
	stp	x22, x21, [sp, #16]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #32]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 48
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w30, -40
	.cfi_offset w29, -48
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w0, w8, [x9]
	bfi	x0, x8, #32, #32
	ldp	w20, w8, [x9, #8]
	bfi	x20, x8, #32, #32
	tst	x0, #0x6
	b.ne	.LBB151_3
// %bb.1:                               // %"$3"
	tbnz	w0, #3, .LBB151_3
// %bb.2:                               // %"$5"
	bl	evList
.LBB151_3:                              // %"$2"
	ldp	w19, w8, [x20]
	bfi	x19, x8, #32, #32
	ldp	w20, w8, [x20, #8]
	bfi	x20, x8, #32, #32
	tst	x19, #0x6
	b.ne	.LBB151_7
// %bb.4:                               // %"$8"
	tbz	w19, #3, .LBB151_6
// %bb.5:                               // %"$11"
	ldp	w19, w8, [x19]
	bfi	x19, x8, #32, #32
	b	.LBB151_7
.LBB151_6:                              // %"$10"
	mov	x0, x19
	bl	evList
	mov	x19, x0
.LBB151_7:                              // %"$7"
	adrp	x21, env
	ldr	x8, [x21, :lo12:env]
	mov	x9, sp
	sub	x22, x9, #16                    // =16
	mov	sp, x22
	lsr	x10, x19, #32
	lsr	x11, x8, #32
	stp	w19, w10, [x9, #-16]
	stp	w8, w11, [x9, #-8]
	str	x22, [x21, :lo12:env]
	adrp	x8, SymTab+376
	str	x19, [x8, :lo12:SymTab+376]
	b	.LBB151_9
.LBB151_8:                              // %"$14"
                                        //   in Loop: Header=BB151_9 Depth=1
	tst	x20, #0xf
	b.ne	.LBB151_11
.LBB151_9:                              // %"$12"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w0, w8, [x20]
	bfi	x0, x8, #32, #32
	ldp	w20, w8, [x20, #8]
	bfi	x20, x8, #32, #32
	tst	x0, #0xf
	b.ne	.LBB151_8
// %bb.10:                              // %"$13"
                                        //   in Loop: Header=BB151_9 Depth=1
	bl	evList
	b	.LBB151_8
.LBB151_11:                             // %"$16"
	ldp	w9, w8, [x22, #8]
	bfi	x9, x8, #32, #32
	str	x9, [x21, :lo12:env]
	mov	x0, x19
	mov	sp, x29
	ldp	x20, x19, [sp, #32]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #48             // 16-byte Folded Reload
	ret
.Lfunc_end151:
	.size	_prog2, .Lfunc_end151-_prog2
	.cfi_endproc
                                        // -- End function
	.globl	_if                             // -- Begin function _if
	.p2align	4
	.type	_if,@function
_if:                                    // @_if
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x30, x19, [sp, #-16]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w19, -8
	.cfi_offset w30, -16
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w0, w8, [x9]
	bfi	x0, x8, #32, #32
	ldp	w19, w8, [x9, #8]
	bfi	x19, x8, #32, #32
	tst	x0, #0x6
	b.ne	.LBB152_4
// %bb.1:                               // %"$3"
	tbz	w0, #3, .LBB152_3
// %bb.2:                               // %"$6"
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB152_4
.LBB152_3:                              // %"$5"
	bl	evList
.LBB152_4:                              // %"$2"
	adrp	x8, SymTab+8
	add	x8, x8, :lo12:SymTab+8
	cmp	x0, x8
	b.ne	.LBB152_9
// %bb.5:                               // %"$7"
	ldp	w19, w8, [x19, #8]
	bfi	x19, x8, #32, #32
.LBB152_6:                              // %"$10"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w0, w8, [x19]
	bfi	x0, x8, #32, #32
	ldp	w19, w8, [x19, #8]
	bfi	x19, x8, #32, #32
	tst	x19, #0xf
	b.ne	.LBB152_12
// %bb.7:                               // %"$11"
                                        //   in Loop: Header=BB152_6 Depth=1
	tst	x0, #0xf
	b.ne	.LBB152_6
// %bb.8:                               // %"$20"
                                        //   in Loop: Header=BB152_6 Depth=1
	bl	evList
	b	.LBB152_6
.LBB152_9:                              // %"$8"
	adrp	x8, SymTab+376
	str	x0, [x8, :lo12:SymTab+376]
	ldp	w0, w8, [x19]
	bfi	x0, x8, #32, #32
	tst	x0, #0x6
	b.ne	.LBB152_13
.LBB152_10:                             // %"$15"
	tbz	w0, #3, .LBB152_14
// %bb.11:                              // %"$18"
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	ldp	x30, x19, [sp], #16             // 16-byte Folded Reload
	ret
.LBB152_12:                             // %"$13"
	tst	x0, #0x6
	b.eq	.LBB152_10
.LBB152_13:                             // %"$9"
	ldp	x30, x19, [sp], #16             // 16-byte Folded Reload
	ret
.LBB152_14:                             // %"$24"
	bl	evList
	ldp	x30, x19, [sp], #16             // 16-byte Folded Reload
	ret
.Lfunc_end152:
	.size	_if, .Lfunc_end152-_if
	.cfi_endproc
                                        // -- End function
	.globl	_ifn                            // -- Begin function _ifn
	.p2align	4
	.type	_ifn,@function
_ifn:                                   // @_ifn
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x30, x19, [sp, #-16]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w19, -8
	.cfi_offset w30, -16
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w0, w8, [x9]
	bfi	x0, x8, #32, #32
	ldp	w19, w8, [x9, #8]
	bfi	x19, x8, #32, #32
	tst	x0, #0x6
	b.ne	.LBB153_4
// %bb.1:                               // %"$3"
	tbz	w0, #3, .LBB153_3
// %bb.2:                               // %"$6"
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB153_4
.LBB153_3:                              // %"$5"
	bl	evList
.LBB153_4:                              // %"$2"
	adrp	x8, SymTab+8
	add	x8, x8, :lo12:SymTab+8
	cmp	x0, x8
	b.ne	.LBB153_7
// %bb.5:                               // %"$7"
	ldp	w0, w8, [x19]
	bfi	x0, x8, #32, #32
	tst	x0, #0x6
	b.eq	.LBB153_12
.LBB153_6:                              // %"$9"
	ldp	x30, x19, [sp], #16             // 16-byte Folded Reload
	ret
.LBB153_7:                              // %"$8"
	adrp	x8, SymTab+376
	str	x0, [x8, :lo12:SymTab+376]
	ldp	w19, w8, [x19, #8]
	bfi	x19, x8, #32, #32
.LBB153_8:                              // %"$15"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w0, w8, [x19]
	bfi	x0, x8, #32, #32
	ldp	w19, w8, [x19, #8]
	bfi	x19, x8, #32, #32
	tst	x19, #0xf
	b.ne	.LBB153_11
// %bb.9:                               // %"$16"
                                        //   in Loop: Header=BB153_8 Depth=1
	tst	x0, #0xf
	b.ne	.LBB153_8
// %bb.10:                              // %"$25"
                                        //   in Loop: Header=BB153_8 Depth=1
	bl	evList
	b	.LBB153_8
.LBB153_11:                             // %"$18"
	tst	x0, #0x6
	b.ne	.LBB153_6
.LBB153_12:                             // %"$20"
	tbz	w0, #3, .LBB153_14
// %bb.13:                              // %"$14"
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	ldp	x30, x19, [sp], #16             // 16-byte Folded Reload
	ret
.LBB153_14:                             // %"$13"
	bl	evList
	ldp	x30, x19, [sp], #16             // 16-byte Folded Reload
	ret
.Lfunc_end153:
	.size	_ifn, .Lfunc_end153-_ifn
	.cfi_endproc
                                        // -- End function
	.globl	_if2                            // -- Begin function _if2
	.p2align	4
	.type	_if2,@function
_if2:                                   // @_if2
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x30, x21, [sp, #-32]!           // 16-byte Folded Spill
	stp	x20, x19, [sp, #16]             // 16-byte Folded Spill
	.cfi_def_cfa_offset 32
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w30, -32
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w0, w8, [x9]
	bfi	x0, x8, #32, #32
	ldp	w20, w8, [x9, #8]
	bfi	x20, x8, #32, #32
	tst	x0, #0x6
	b.ne	.LBB154_4
// %bb.1:                               // %"$3"
	tbz	w0, #3, .LBB154_3
// %bb.2:                               // %"$6"
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB154_4
.LBB154_3:                              // %"$5"
	bl	evList
.LBB154_4:                              // %"$2"
	adrp	x19, SymTab+8
	add	x19, x19, :lo12:SymTab+8
	cmp	x0, x19
	b.ne	.LBB154_11
// %bb.5:                               // %"$7"
	ldp	w0, w8, [x20]
	bfi	x0, x8, #32, #32
	ldp	w20, w8, [x20, #8]
	bfi	x20, x8, #32, #32
	tst	x0, #0x6
	b.eq	.LBB154_14
// %bb.6:                               // %"$10"
	cmp	x0, x19
	b.ne	.LBB154_19
.LBB154_7:                              // %"$15"
	ldp	w9, w8, [x20, #8]
	bfi	x9, x8, #32, #32
	ldp	w9, w8, [x9, #8]
	bfi	x9, x8, #32, #32
	ldp	w19, w8, [x9, #8]
	bfi	x19, x8, #32, #32
.LBB154_8:                              // %"$18"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w0, w8, [x19]
	bfi	x0, x8, #32, #32
	ldp	w19, w8, [x19, #8]
	bfi	x19, x8, #32, #32
	tst	x19, #0xf
	b.ne	.LBB154_24
// %bb.9:                               // %"$19"
                                        //   in Loop: Header=BB154_8 Depth=1
	tst	x0, #0xf
	b.ne	.LBB154_8
// %bb.10:                              // %"$28"
                                        //   in Loop: Header=BB154_8 Depth=1
	bl	evList
	b	.LBB154_8
.LBB154_11:                             // %"$8"
	adrp	x21, SymTab+376
	str	x0, [x21, :lo12:SymTab+376]
	ldp	w0, w8, [x20]
	bfi	x0, x8, #32, #32
	ldp	w20, w8, [x20, #8]
	bfi	x20, x8, #32, #32
	tst	x0, #0x6
	b.eq	.LBB154_16
// %bb.12:                              // %"$34"
	cmp	x0, x19
	b.ne	.LBB154_22
.LBB154_13:                             // %"$39"
	ldp	w9, w8, [x20, #8]
	b	.LBB154_20
.LBB154_14:                             // %"$11"
	tbz	w0, #3, .LBB154_18
// %bb.15:                              // %"$14"
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	cmp	x0, x19
	b.ne	.LBB154_19
	b	.LBB154_7
.LBB154_16:                             // %"$35"
	tbz	w0, #3, .LBB154_21
// %bb.17:                              // %"$38"
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	cmp	x0, x19
	b.ne	.LBB154_22
	b	.LBB154_13
.LBB154_18:                             // %"$13"
	bl	evList
	cmp	x0, x19
	b.eq	.LBB154_7
.LBB154_19:                             // %"$16"
	adrp	x8, SymTab+376
	str	x0, [x8, :lo12:SymTab+376]
	ldp	w9, w8, [x20, #8]
	bfi	x9, x8, #32, #32
	ldp	w9, w8, [x9, #8]
.LBB154_20:                             // %"$39"
	bfi	x9, x8, #32, #32
	ldp	w0, w8, [x9]
	b	.LBB154_23
.LBB154_21:                             // %"$37"
	bl	evList
	cmp	x0, x19
	b.eq	.LBB154_13
.LBB154_22:                             // %"$40"
	str	x0, [x21, :lo12:SymTab+376]
	ldp	w0, w8, [x20]
.LBB154_23:                             // %"$39"
	bfi	x0, x8, #32, #32
.LBB154_24:                             // %"$21"
	tst	x0, #0x6
	b.ne	.LBB154_28
// %bb.25:                              // %"$23"
	tbz	w0, #3, .LBB154_27
// %bb.26:                              // %"$26"
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB154_28
.LBB154_27:                             // %"$50"
	bl	evList
.LBB154_28:                             // %"$9"
	ldp	x20, x19, [sp, #16]             // 16-byte Folded Reload
	ldp	x30, x21, [sp], #32             // 16-byte Folded Reload
	ret
.Lfunc_end154:
	.size	_if2, .Lfunc_end154-_if2
	.cfi_endproc
                                        // -- End function
	.globl	_when                           // -- Begin function _when
	.p2align	4
	.type	_when,@function
_when:                                  // @_when
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-32]!                // 8-byte Folded Spill
	stp	x20, x19, [sp, #16]             // 16-byte Folded Spill
	.cfi_def_cfa_offset 32
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w30, -32
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w0, w8, [x9]
	bfi	x0, x8, #32, #32
	ldp	w19, w20, [x9, #8]
	tst	x0, #0x6
	b.ne	.LBB155_4
// %bb.1:                               // %"$3"
	tbz	w0, #3, .LBB155_3
// %bb.2:                               // %"$6"
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB155_4
.LBB155_3:                              // %"$5"
	bl	evList
.LBB155_4:                              // %"$2"
	adrp	x8, SymTab+8
	add	x8, x8, :lo12:SymTab+8
	cmp	x0, x8
	b.eq	.LBB155_13
// %bb.5:                               // %"$8"
	bfi	x19, x20, #32, #32
	adrp	x8, SymTab+376
	str	x0, [x8, :lo12:SymTab+376]
.LBB155_6:                              // %"$10"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w0, w8, [x19]
	bfi	x0, x8, #32, #32
	ldp	w19, w8, [x19, #8]
	bfi	x19, x8, #32, #32
	tst	x19, #0xf
	b.ne	.LBB155_9
// %bb.7:                               // %"$11"
                                        //   in Loop: Header=BB155_6 Depth=1
	tst	x0, #0xf
	b.ne	.LBB155_6
// %bb.8:                               // %"$20"
                                        //   in Loop: Header=BB155_6 Depth=1
	bl	evList
	b	.LBB155_6
.LBB155_9:                              // %"$13"
	tst	x0, #0x6
	b.ne	.LBB155_13
// %bb.10:                              // %"$15"
	tbz	w0, #3, .LBB155_12
// %bb.11:                              // %"$18"
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB155_13
.LBB155_12:                             // %"$17"
	bl	evList
.LBB155_13:                             // %"$9"
	ldp	x20, x19, [sp, #16]             // 16-byte Folded Reload
	ldr	x30, [sp], #32                  // 8-byte Folded Reload
	ret
.Lfunc_end155:
	.size	_when, .Lfunc_end155-_when
	.cfi_endproc
                                        // -- End function
	.globl	_unless                         // -- Begin function _unless
	.p2align	4
	.type	_unless,@function
_unless:                                // @_unless
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-32]!                // 8-byte Folded Spill
	stp	x20, x19, [sp, #16]             // 16-byte Folded Spill
	.cfi_def_cfa_offset 32
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w30, -32
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w8, w10, [x9]
	bfi	x8, x10, #32, #32
	ldp	w19, w20, [x9, #8]
	tst	x8, #0x6
	b.ne	.LBB156_4
// %bb.1:                               // %"$3"
	tbz	w8, #3, .LBB156_3
// %bb.2:                               // %"$6"
	ldp	w8, w9, [x8]
	bfi	x8, x9, #32, #32
	b	.LBB156_4
.LBB156_3:                              // %"$5"
	mov	x0, x8
	bl	evList
	mov	x8, x0
.LBB156_4:                              // %"$2"
	adrp	x0, SymTab+8
	add	x0, x0, :lo12:SymTab+8
	cmp	x8, x0
	b.ne	.LBB156_9
// %bb.5:                               // %"$7"
	bfi	x19, x20, #32, #32
.LBB156_6:                              // %"$10"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w0, w8, [x19]
	bfi	x0, x8, #32, #32
	ldp	w19, w8, [x19, #8]
	bfi	x19, x8, #32, #32
	tst	x19, #0xf
	b.ne	.LBB156_10
// %bb.7:                               // %"$11"
                                        //   in Loop: Header=BB156_6 Depth=1
	tst	x0, #0xf
	b.ne	.LBB156_6
// %bb.8:                               // %"$20"
                                        //   in Loop: Header=BB156_6 Depth=1
	bl	evList
	b	.LBB156_6
.LBB156_9:                              // %"$8"
	str	x8, [x0, #368]
	b	.LBB156_14
.LBB156_10:                             // %"$13"
	tst	x0, #0x6
	b.ne	.LBB156_14
// %bb.11:                              // %"$15"
	tbz	w0, #3, .LBB156_13
// %bb.12:                              // %"$18"
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB156_14
.LBB156_13:                             // %"$17"
	bl	evList
.LBB156_14:                             // %"$9"
	ldp	x20, x19, [sp, #16]             // 16-byte Folded Reload
	ldr	x30, [sp], #32                  // 8-byte Folded Reload
	ret
.Lfunc_end156:
	.size	_unless, .Lfunc_end156-_unless
	.cfi_endproc
                                        // -- End function
	.globl	_cond                           // -- Begin function _cond
	.p2align	4
	.type	_cond,@function
_cond:                                  // @_cond
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x30, x21, [sp, #-32]!           // 16-byte Folded Spill
	stp	x20, x19, [sp, #16]             // 16-byte Folded Spill
	.cfi_def_cfa_offset 32
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w30, -32
	mov	x20, x0
	adrp	x19, SymTab+8
	add	x19, x19, :lo12:SymTab+8
	b	.LBB157_3
.LBB157_1:                              // %"$9"
                                        //   in Loop: Header=BB157_3 Depth=1
	bl	evList
.LBB157_2:                              // %"$6"
                                        //   in Loop: Header=BB157_3 Depth=1
	cmp	x0, x19
	b.ne	.LBB157_7
.LBB157_3:                              // %"$2"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w20, w8, [x20, #8]
	bfi	x20, x8, #32, #32
	tst	x20, #0xf
	b.ne	.LBB157_15
// %bb.4:                               // %"$3"
                                        //   in Loop: Header=BB157_3 Depth=1
	ldp	w21, w8, [x20]
	bfi	x21, x8, #32, #32
	ldp	w0, w8, [x21]
	bfi	x0, x8, #32, #32
	tst	x0, #0x6
	b.ne	.LBB157_2
// %bb.5:                               // %"$7"
                                        //   in Loop: Header=BB157_3 Depth=1
	tbz	w0, #3, .LBB157_1
// %bb.6:                               // %"$10"
                                        //   in Loop: Header=BB157_3 Depth=1
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB157_2
.LBB157_7:                              // %"$12"
	adrp	x8, SymTab+376
	str	x0, [x8, :lo12:SymTab+376]
	ldp	w20, w8, [x21, #8]
	bfi	x20, x8, #32, #32
.LBB157_8:                              // %"$13"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w19, w8, [x20]
	bfi	x19, x8, #32, #32
	ldp	w20, w8, [x20, #8]
	bfi	x20, x8, #32, #32
	tst	x20, #0xf
	b.ne	.LBB157_11
// %bb.9:                               // %"$14"
                                        //   in Loop: Header=BB157_8 Depth=1
	tst	x19, #0xf
	b.ne	.LBB157_8
// %bb.10:                              // %"$23"
                                        //   in Loop: Header=BB157_8 Depth=1
	mov	x0, x19
	bl	evList
	b	.LBB157_8
.LBB157_11:                             // %"$16"
	tst	x19, #0x6
	b.ne	.LBB157_15
// %bb.12:                              // %"$18"
	tbz	w19, #3, .LBB157_14
// %bb.13:                              // %"$21"
	ldp	w19, w8, [x19]
	bfi	x19, x8, #32, #32
	b	.LBB157_15
.LBB157_14:                             // %"$20"
	mov	x0, x19
	bl	evList
	mov	x19, x0
.LBB157_15:                             // %"$4"
	mov	x0, x19
	ldp	x20, x19, [sp, #16]             // 16-byte Folded Reload
	ldp	x30, x21, [sp], #32             // 16-byte Folded Reload
	ret
.Lfunc_end157:
	.size	_cond, .Lfunc_end157-_cond
	.cfi_endproc
                                        // -- End function
	.globl	_nond                           // -- Begin function _nond
	.p2align	4
	.type	_nond,@function
_nond:                                  // @_nond
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-48]!                // 8-byte Folded Spill
	stp	x22, x21, [sp, #16]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #32]             // 16-byte Folded Spill
	.cfi_def_cfa_offset 48
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w30, -48
	mov	x20, x0
	adrp	x21, SymTab+376
	adrp	x19, SymTab+8
	add	x19, x19, :lo12:SymTab+8
.LBB158_1:                              // %"$2"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w20, w8, [x20, #8]
	bfi	x20, x8, #32, #32
	tst	x20, #0xf
	b.ne	.LBB158_16
// %bb.2:                               // %"$3"
                                        //   in Loop: Header=BB158_1 Depth=1
	ldp	w22, w8, [x20]
	bfi	x22, x8, #32, #32
	ldp	w0, w8, [x22]
	bfi	x0, x8, #32, #32
	tst	x0, #0x6
	b.ne	.LBB158_5
// %bb.3:                               // %"$7"
                                        //   in Loop: Header=BB158_1 Depth=1
	tbz	w0, #3, .LBB158_7
// %bb.4:                               // %"$10"
                                        //   in Loop: Header=BB158_1 Depth=1
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
.LBB158_5:                              // %"$6"
                                        //   in Loop: Header=BB158_1 Depth=1
	cmp	x0, x19
	b.eq	.LBB158_8
.LBB158_6:                              // %"$11"
                                        //   in Loop: Header=BB158_1 Depth=1
	str	x0, [x21, :lo12:SymTab+376]
	b	.LBB158_1
.LBB158_7:                              // %"$9"
                                        //   in Loop: Header=BB158_1 Depth=1
	bl	evList
	cmp	x0, x19
	b.ne	.LBB158_6
.LBB158_8:                              // %"$12"
	ldp	w20, w8, [x22, #8]
	bfi	x20, x8, #32, #32
.LBB158_9:                              // %"$13"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w19, w8, [x20]
	bfi	x19, x8, #32, #32
	ldp	w20, w8, [x20, #8]
	bfi	x20, x8, #32, #32
	tst	x20, #0xf
	b.ne	.LBB158_12
// %bb.10:                              // %"$14"
                                        //   in Loop: Header=BB158_9 Depth=1
	tst	x19, #0xf
	b.ne	.LBB158_9
// %bb.11:                              // %"$23"
                                        //   in Loop: Header=BB158_9 Depth=1
	mov	x0, x19
	bl	evList
	b	.LBB158_9
.LBB158_12:                             // %"$16"
	tst	x19, #0x6
	b.ne	.LBB158_16
// %bb.13:                              // %"$18"
	tbz	w19, #3, .LBB158_15
// %bb.14:                              // %"$21"
	ldp	w19, w8, [x19]
	bfi	x19, x8, #32, #32
	b	.LBB158_16
.LBB158_15:                             // %"$20"
	mov	x0, x19
	bl	evList
	mov	x19, x0
.LBB158_16:                             // %"$4"
	mov	x0, x19
	ldp	x20, x19, [sp, #32]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #16]             // 16-byte Folded Reload
	ldr	x30, [sp], #48                  // 8-byte Folded Reload
	ret
.Lfunc_end158:
	.size	_nond, .Lfunc_end158-_nond
	.cfi_endproc
                                        // -- End function
	.globl	_case                           // -- Begin function _case
	.p2align	4
	.type	_case,@function
_case:                                  // @_case
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-64]!                // 8-byte Folded Spill
	stp	x24, x23, [sp, #16]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #32]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #48]             // 16-byte Folded Spill
	.cfi_def_cfa_offset 64
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w30, -64
	ldp	w22, w8, [x0, #8]
	bfi	x22, x8, #32, #32
	ldp	w20, w8, [x22]
	bfi	x20, x8, #32, #32
	tst	x20, #0x6
	b.ne	.LBB159_4
// %bb.1:                               // %"$3"
	tbz	w20, #3, .LBB159_3
// %bb.2:                               // %"$6"
	ldp	w20, w8, [x20]
	bfi	x20, x8, #32, #32
	b	.LBB159_4
.LBB159_3:                              // %"$5"
	mov	x0, x20
	bl	evList
	mov	x20, x0
.LBB159_4:                              // %"$2"
	adrp	x8, SymTab+376
	adrp	x19, SymTab+8
	add	x19, x19, :lo12:SymTab+8
	str	x20, [x8, :lo12:SymTab+376]
	adrp	x23, SymTab+216
	add	x23, x23, :lo12:SymTab+216
	b	.LBB159_7
.LBB159_5:                              //   in Loop: Header=BB159_7 Depth=1
	mov	w0, #1
.LBB159_6:                              // %"$11"
                                        //   in Loop: Header=BB159_7 Depth=1
	tbnz	w0, #0, .LBB159_15
.LBB159_7:                              // %"$7"
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB159_12 Depth 2
	ldp	w22, w8, [x22, #8]
	bfi	x22, x8, #32, #32
	tst	x22, #0xf
	b.ne	.LBB159_23
// %bb.8:                               // %"$8"
                                        //   in Loop: Header=BB159_7 Depth=1
	ldp	w24, w8, [x22]
	bfi	x24, x8, #32, #32
	ldp	w21, w8, [x24]
	bfi	x21, x8, #32, #32
	cmp	x21, x23
	b.eq	.LBB159_5
// %bb.9:                               // %"$12"
                                        //   in Loop: Header=BB159_7 Depth=1
	tst	x21, #0xf
	b.eq	.LBB159_12
// %bb.10:                              // %"$13"
                                        //   in Loop: Header=BB159_7 Depth=1
	mov	x0, x21
	mov	x1, x20
	bl	equal
	b	.LBB159_6
.LBB159_11:                             // %"$20"
                                        //   in Loop: Header=BB159_12 Depth=2
	ldp	w21, w8, [x21, #8]
	bfi	x21, x8, #32, #32
.LBB159_12:                             // %"$16"
                                        //   Parent Loop BB159_7 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	tst	x21, #0xf
	b.ne	.LBB159_14
// %bb.13:                              // %"$17"
                                        //   in Loop: Header=BB159_12 Depth=2
	ldp	w1, w8, [x21]
	bfi	x1, x8, #32, #32
	mov	x0, x20
	bl	equal
	tbz	w0, #0, .LBB159_11
	b	.LBB159_5
.LBB159_14:                             //   in Loop: Header=BB159_7 Depth=1
	mov	w0, wzr
	b	.LBB159_6
.LBB159_15:                             // %"$23"
	ldp	w20, w8, [x24, #8]
	bfi	x20, x8, #32, #32
.LBB159_16:                             // %"$24"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w19, w8, [x20]
	bfi	x19, x8, #32, #32
	ldp	w20, w8, [x20, #8]
	bfi	x20, x8, #32, #32
	tst	x20, #0xf
	b.ne	.LBB159_19
// %bb.17:                              // %"$25"
                                        //   in Loop: Header=BB159_16 Depth=1
	tst	x19, #0xf
	b.ne	.LBB159_16
// %bb.18:                              // %"$34"
                                        //   in Loop: Header=BB159_16 Depth=1
	mov	x0, x19
	bl	evList
	b	.LBB159_16
.LBB159_19:                             // %"$27"
	tst	x19, #0x6
	b.ne	.LBB159_23
// %bb.20:                              // %"$29"
	tbz	w19, #3, .LBB159_22
// %bb.21:                              // %"$32"
	ldp	w19, w8, [x19]
	bfi	x19, x8, #32, #32
	b	.LBB159_23
.LBB159_22:                             // %"$31"
	mov	x0, x19
	bl	evList
	mov	x19, x0
.LBB159_23:                             // %"$9"
	mov	x0, x19
	ldp	x20, x19, [sp, #48]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #32]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #16]             // 16-byte Folded Reload
	ldr	x30, [sp], #64                  // 8-byte Folded Reload
	ret
.Lfunc_end159:
	.size	_case, .Lfunc_end159-_case
	.cfi_endproc
                                        // -- End function
	.globl	_casq                           // -- Begin function _casq
	.p2align	4
	.type	_casq,@function
_casq:                                  // @_casq
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x30, x19, [sp, #-16]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w19, -8
	.cfi_offset w30, -16
	ldp	w19, w8, [x0, #8]
	bfi	x19, x8, #32, #32
	ldp	w8, w9, [x19]
	bfi	x8, x9, #32, #32
	tst	x8, #0x6
	b.ne	.LBB160_4
// %bb.1:                               // %"$3"
	tbz	w8, #3, .LBB160_3
// %bb.2:                               // %"$6"
	ldp	w8, w9, [x8]
	bfi	x8, x9, #32, #32
	b	.LBB160_4
.LBB160_3:                              // %"$5"
	mov	x0, x8
	bl	evList
	mov	x8, x0
.LBB160_4:                              // %"$2"
	adrp	x9, SymTab+376
	adrp	x0, SymTab+8
	add	x0, x0, :lo12:SymTab+8
	str	x8, [x9, :lo12:SymTab+376]
	adrp	x9, SymTab+216
	add	x9, x9, :lo12:SymTab+216
	b	.LBB160_6
.LBB160_5:                              //   in Loop: Header=BB160_6 Depth=1
	mov	w11, #1
	cbnz	w11, .LBB160_13
.LBB160_6:                              // %"$7"
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB160_10 Depth 2
	ldp	w19, w10, [x19, #8]
	bfi	x19, x10, #32, #32
	tst	x19, #0xf
	b.ne	.LBB160_18
// %bb.7:                               // %"$8"
                                        //   in Loop: Header=BB160_6 Depth=1
	ldp	w10, w11, [x19]
	bfi	x10, x11, #32, #32
	ldp	w11, w12, [x10]
	bfi	x11, x12, #32, #32
	cmp	x11, x9
	b.eq	.LBB160_5
// %bb.8:                               // %"$12"
                                        //   in Loop: Header=BB160_6 Depth=1
	cmp	x11, x8
	b.eq	.LBB160_5
// %bb.9:                               // %"$14"
                                        //   in Loop: Header=BB160_6 Depth=1
	tst	x11, #0xf
	b.ne	.LBB160_12
.LBB160_10:                             // %"$15"
                                        //   Parent Loop BB160_6 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	w13, w12, [x11]
	bfi	x13, x12, #32, #32
	cmp	x8, x13
	b.eq	.LBB160_5
// %bb.11:                              // %"$18"
                                        //   in Loop: Header=BB160_10 Depth=2
	ldp	w11, w12, [x11, #8]
	bfi	x11, x12, #32, #32
	tst	x11, #0xf
	b.eq	.LBB160_10
.LBB160_12:                             //   in Loop: Header=BB160_6 Depth=1
	mov	w11, wzr
	cbz	w11, .LBB160_6
.LBB160_13:                             // %"$21"
	ldp	w19, w8, [x10, #8]
	bfi	x19, x8, #32, #32
.LBB160_14:                             // %"$22"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w0, w8, [x19]
	bfi	x0, x8, #32, #32
	ldp	w19, w8, [x19, #8]
	bfi	x19, x8, #32, #32
	tst	x19, #0xf
	b.ne	.LBB160_17
// %bb.15:                              // %"$23"
                                        //   in Loop: Header=BB160_14 Depth=1
	tst	x0, #0xf
	b.ne	.LBB160_14
// %bb.16:                              // %"$32"
                                        //   in Loop: Header=BB160_14 Depth=1
	bl	evList
	b	.LBB160_14
.LBB160_17:                             // %"$25"
	tst	x0, #0x6
	b.eq	.LBB160_19
.LBB160_18:                             // %"$9"
	ldp	x30, x19, [sp], #16             // 16-byte Folded Reload
	ret
.LBB160_19:                             // %"$27"
	tbz	w0, #3, .LBB160_21
// %bb.20:                              // %"$30"
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	ldp	x30, x19, [sp], #16             // 16-byte Folded Reload
	ret
.LBB160_21:                             // %"$29"
	bl	evList
	ldp	x30, x19, [sp], #16             // 16-byte Folded Reload
	ret
.Lfunc_end160:
	.size	_casq, .Lfunc_end160-_casq
	.cfi_endproc
                                        // -- End function
	.globl	_state                          // -- Begin function _state
	.p2align	4
	.type	_state,@function
_state:                                 // @_state
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-80]!           // 16-byte Folded Spill
	str	x25, [sp, #16]                  // 8-byte Folded Spill
	stp	x24, x23, [sp, #32]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #48]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #64]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 80
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -64
	.cfi_offset w30, -72
	.cfi_offset w29, -80
	mov	x21, x0
	ldp	w23, w8, [x0, #8]
	bfi	x23, x8, #32, #32
	ldp	w20, w8, [x23]
	bfi	x20, x8, #32, #32
	tst	x20, #0x6
	b.ne	.LBB161_4
// %bb.1:                               // %"$3"
	tbz	w20, #3, .LBB161_3
// %bb.2:                               // %"$6"
	ldp	w20, w8, [x20]
	bfi	x20, x8, #32, #32
	b	.LBB161_4
.LBB161_3:                              // %"$5"
	mov	x0, x20
	bl	evList
	mov	x20, x0
.LBB161_4:                              // %"$2"
	tst	x20, #0x6
	b.ne	.LBB161_29
// %bb.5:                               // %"$8"
	adrp	x19, SymTab+8
	add	x19, x19, :lo12:SymTab+8
	add	x8, x19, #208                   // =208
	cmp	x8, x20
	ccmp	x20, x19, #0, hs
	b.hs	.LBB161_30
// %bb.6:                               // %"$12"
	adrp	x21, env
	ldr	x8, [x21, :lo12:env]
	mov	x9, sp
	sub	x22, x9, #16                    // =16
	mov	sp, x22
	lsr	x10, x20, #32
	lsr	x11, x8, #32
	stp	w20, w10, [x9, #-16]
	stp	w8, w11, [x9, #-8]
	adrp	x24, SymTab+216
	add	x24, x24, :lo12:SymTab+216
	str	x22, [x21, :lo12:env]
	b	.LBB161_9
.LBB161_7:                              // %"$27"
                                        //   in Loop: Header=BB161_9 Depth=1
	ldp	w25, w9, [x8, #8]
	bfi	x25, x9, #32, #32
	ldp	w0, w8, [x25]
	bfi	x0, x8, #32, #32
	tst	x0, #0x6
	b.eq	.LBB161_16
.LBB161_8:                              // %"$29"
                                        //   in Loop: Header=BB161_9 Depth=1
	cmp	x0, x19
	b.ne	.LBB161_20
.LBB161_9:                              // %"$13"
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB161_13 Depth 2
	ldp	w23, w8, [x23, #8]
	bfi	x23, x8, #32, #32
	tst	x23, #0xf
	b.ne	.LBB161_28
// %bb.10:                              // %"$14"
                                        //   in Loop: Header=BB161_9 Depth=1
	ldp	w8, w9, [x23]
	bfi	x8, x9, #32, #32
	ldp	w9, w10, [x8]
	bfi	x9, x10, #32, #32
	cmp	x9, x24
	b.eq	.LBB161_12
// %bb.11:                              // %"$18"
                                        //   in Loop: Header=BB161_9 Depth=1
	ldp	w10, w11, [x20]
	bfi	x10, x11, #32, #32
	cmp	x9, x10
	b.ne	.LBB161_13
.LBB161_12:                             //   in Loop: Header=BB161_9 Depth=1
	mov	w9, #1
	cbz	w9, .LBB161_9
	b	.LBB161_7
.LBB161_13:                             // %"$21"
                                        //   Parent Loop BB161_9 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	tst	x9, #0xf
	b.ne	.LBB161_18
// %bb.14:                              // %"$22"
                                        //   in Loop: Header=BB161_13 Depth=2
	ldp	w12, w11, [x9]
	bfi	x12, x11, #32, #32
	cmp	x10, x12
	b.eq	.LBB161_12
// %bb.15:                              // %"$25"
                                        //   in Loop: Header=BB161_13 Depth=2
	ldp	w9, w11, [x9, #8]
	bfi	x9, x11, #32, #32
	b	.LBB161_13
.LBB161_16:                             // %"$30"
                                        //   in Loop: Header=BB161_9 Depth=1
	tbz	w0, #3, .LBB161_19
// %bb.17:                              // %"$33"
                                        //   in Loop: Header=BB161_9 Depth=1
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB161_8
.LBB161_18:                             //   in Loop: Header=BB161_9 Depth=1
	mov	w9, wzr
	cbz	w9, .LBB161_9
	b	.LBB161_7
.LBB161_19:                             // %"$32"
                                        //   in Loop: Header=BB161_9 Depth=1
	bl	evList
	b	.LBB161_8
.LBB161_20:                             // %"$35"
	adrp	x8, SymTab+376
	str	x0, [x8, :lo12:SymTab+376]
	lsr	x8, x0, #32
	stp	w0, w8, [x20]
	ldp	w20, w8, [x25, #8]
	bfi	x20, x8, #32, #32
.LBB161_21:                             // %"$36"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w19, w8, [x20]
	bfi	x19, x8, #32, #32
	ldp	w20, w8, [x20, #8]
	bfi	x20, x8, #32, #32
	tst	x20, #0xf
	b.ne	.LBB161_24
// %bb.22:                              // %"$37"
                                        //   in Loop: Header=BB161_21 Depth=1
	tst	x19, #0xf
	b.ne	.LBB161_21
// %bb.23:                              // %"$46"
                                        //   in Loop: Header=BB161_21 Depth=1
	mov	x0, x19
	bl	evList
	b	.LBB161_21
.LBB161_24:                             // %"$39"
	tst	x19, #0x6
	b.ne	.LBB161_28
// %bb.25:                              // %"$41"
	tbz	w19, #3, .LBB161_27
// %bb.26:                              // %"$44"
	ldp	w19, w8, [x19]
	bfi	x19, x8, #32, #32
	b	.LBB161_28
.LBB161_27:                             // %"$43"
	mov	x0, x19
	bl	evList
	mov	x19, x0
.LBB161_28:                             // %"$15"
	ldp	w9, w8, [x22, #8]
	bfi	x9, x8, #32, #32
	str	x9, [x21, :lo12:env]
	mov	x0, x19
	mov	sp, x29
	ldp	x20, x19, [sp, #64]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #48]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #32]             // 16-byte Folded Reload
	ldr	x25, [sp, #16]                  // 8-byte Folded Reload
	ldp	x29, x30, [sp], #80             // 16-byte Folded Reload
	ret
.LBB161_29:                             // %"$7"
	mov	x0, x21
	mov	x1, x20
	bl	varErr
.LBB161_30:                             // %"$11"
	mov	x0, x21
	mov	x1, x20
	bl	protErr
.Lfunc_end161:
	.size	_state, .Lfunc_end161-_state
	.cfi_endproc
                                        // -- End function
	.globl	_while                          // -- Begin function _while
	.p2align	4
	.type	_while,@function
_while:                                 // @_while
	.cfi_startproc
// %bb.0:                               // %"$1"
	sub	sp, sp, #80                     // =80
	str	x30, [sp, #16]                  // 8-byte Folded Spill
	stp	x24, x23, [sp, #32]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #48]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #64]             // 16-byte Folded Spill
	.cfi_def_cfa_offset 80
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w30, -64
	mov	x8, x0
	adrp	x24, env
	add	x24, x24, :lo12:env
	mov	x0, sp
	ldp	w8, w9, [x8, #8]
	ldr	x10, [x24]
	bfi	x8, x9, #32, #32
	ldp	w19, w9, [x8]
	ldp	w21, w11, [x8, #8]
	bfi	x19, x9, #32, #32
	bfi	x21, x11, #32, #32
	adrp	x22, SymTab+8
	add	x22, x22, :lo12:SymTab+8
	stp	x22, x10, [sp]
	adrp	x23, SymTab+376
	mov	x20, x22
	b	.LBB162_2
.LBB162_1:                              // %"$17"
                                        //   in Loop: Header=BB162_2 Depth=1
	bl	evList
	mov	x20, x0
.LBB162_2:                              // %"$2"
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB162_7 Depth 2
	lsr	x8, x0, #32
	stp	w0, w8, [x24]
	tst	x19, #0x6
	mov	x0, x19
	b.ne	.LBB162_5
// %bb.3:                               // %"$4"
                                        //   in Loop: Header=BB162_2 Depth=1
	tbz	w19, #3, .LBB162_13
// %bb.4:                               // %"$7"
                                        //   in Loop: Header=BB162_2 Depth=1
	ldp	w0, w8, [x19]
	bfi	x0, x8, #32, #32
.LBB162_5:                              // %"$3"
                                        //   in Loop: Header=BB162_2 Depth=1
	cmp	x0, x22
	b.eq	.LBB162_14
.LBB162_6:                              // %"$8"
                                        //   in Loop: Header=BB162_2 Depth=1
	str	x0, [x23, :lo12:SymTab+376]
	mov	x20, x21
.LBB162_7:                              // %"$10"
                                        //   Parent Loop BB162_2 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	w0, w8, [x20]
	bfi	x0, x8, #32, #32
	ldp	w20, w8, [x20, #8]
	bfi	x20, x8, #32, #32
	tst	x20, #0xf
	b.ne	.LBB162_10
// %bb.8:                               // %"$11"
                                        //   in Loop: Header=BB162_7 Depth=2
	tst	x0, #0xf
	b.ne	.LBB162_7
// %bb.9:                               // %"$20"
                                        //   in Loop: Header=BB162_7 Depth=2
	bl	evList
	b	.LBB162_7
.LBB162_10:                             // %"$13"
                                        //   in Loop: Header=BB162_2 Depth=1
	mov	x24, sp
	tst	x0, #0x6
	mov	x20, x0
	b.ne	.LBB162_2
// %bb.11:                              // %"$15"
                                        //   in Loop: Header=BB162_2 Depth=1
	mov	x24, sp
	tbz	w0, #3, .LBB162_1
// %bb.12:                              // %"$18"
                                        //   in Loop: Header=BB162_2 Depth=1
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	mov	x20, x0
	b	.LBB162_2
.LBB162_13:                             // %"$6"
                                        //   in Loop: Header=BB162_2 Depth=1
	mov	x0, x19
	bl	evList
	cmp	x0, x22
	b.ne	.LBB162_6
.LBB162_14:                             // %"$9"
	ldp	x8, x30, [sp, #8]               // 8-byte Folded Reload
	adrp	x9, env
	str	x8, [x9, :lo12:env]
	mov	x0, x20
	ldp	x20, x19, [sp, #64]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #48]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #32]             // 16-byte Folded Reload
	add	sp, sp, #80                     // =80
	ret
.Lfunc_end162:
	.size	_while, .Lfunc_end162-_while
	.cfi_endproc
                                        // -- End function
	.globl	_until                          // -- Begin function _until
	.p2align	4
	.type	_until,@function
_until:                                 // @_until
	.cfi_startproc
// %bb.0:                               // %"$1"
	sub	sp, sp, #64                     // =64
	stp	x30, x23, [sp, #16]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #32]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #48]             // 16-byte Folded Spill
	.cfi_def_cfa_offset 64
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w30, -48
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	adrp	x23, env
	add	x23, x23, :lo12:env
	ldp	w19, w8, [x9]
	ldp	w21, w10, [x9, #8]
	ldr	x9, [x23]
	bfi	x19, x8, #32, #32
	bfi	x21, x10, #32, #32
	mov	x0, sp
	adrp	x22, SymTab+8
	add	x22, x22, :lo12:SymTab+8
	stp	x22, x9, [sp]
	mov	x20, x22
	b	.LBB163_2
.LBB163_1:                              // %"$17"
                                        //   in Loop: Header=BB163_2 Depth=1
	bl	evList
	mov	x20, x0
.LBB163_2:                              // %"$2"
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB163_7 Depth 2
	lsr	x8, x0, #32
	stp	w0, w8, [x23]
	tst	x19, #0x6
	mov	x0, x19
	b.ne	.LBB163_5
// %bb.3:                               // %"$4"
                                        //   in Loop: Header=BB163_2 Depth=1
	tbz	w19, #3, .LBB163_13
// %bb.4:                               // %"$7"
                                        //   in Loop: Header=BB163_2 Depth=1
	ldp	w0, w8, [x19]
	bfi	x0, x8, #32, #32
.LBB163_5:                              // %"$3"
                                        //   in Loop: Header=BB163_2 Depth=1
	cmp	x0, x22
	b.ne	.LBB163_14
.LBB163_6:                              // %"$10.preheader"
                                        //   in Loop: Header=BB163_2 Depth=1
	mov	x20, x21
.LBB163_7:                              // %"$10"
                                        //   Parent Loop BB163_2 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	w0, w8, [x20]
	bfi	x0, x8, #32, #32
	ldp	w20, w8, [x20, #8]
	bfi	x20, x8, #32, #32
	tst	x20, #0xf
	b.ne	.LBB163_10
// %bb.8:                               // %"$11"
                                        //   in Loop: Header=BB163_7 Depth=2
	tst	x0, #0xf
	b.ne	.LBB163_7
// %bb.9:                               // %"$20"
                                        //   in Loop: Header=BB163_7 Depth=2
	bl	evList
	b	.LBB163_7
.LBB163_10:                             // %"$13"
                                        //   in Loop: Header=BB163_2 Depth=1
	mov	x23, sp
	tst	x0, #0x6
	mov	x20, x0
	b.ne	.LBB163_2
// %bb.11:                              // %"$15"
                                        //   in Loop: Header=BB163_2 Depth=1
	mov	x23, sp
	tbz	w0, #3, .LBB163_1
// %bb.12:                              // %"$18"
                                        //   in Loop: Header=BB163_2 Depth=1
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	mov	x20, x0
	b	.LBB163_2
.LBB163_13:                             // %"$6"
                                        //   in Loop: Header=BB163_2 Depth=1
	mov	x0, x19
	bl	evList
	cmp	x0, x22
	b.eq	.LBB163_6
.LBB163_14:                             // %"$9"
	adrp	x8, SymTab+376
	str	x0, [x8, :lo12:SymTab+376]
	ldr	x8, [sp, #8]
	adrp	x9, env
	str	x8, [x9, :lo12:env]
	mov	x0, x20
	ldp	x20, x19, [sp, #48]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #32]             // 16-byte Folded Reload
	ldp	x30, x23, [sp, #16]             // 16-byte Folded Reload
	add	sp, sp, #64                     // =64
	ret
.Lfunc_end163:
	.size	_until, .Lfunc_end163-_until
	.cfi_endproc
                                        // -- End function
	.globl	_at                             // -- Begin function _at
	.p2align	4
	.type	_at,@function
_at:                                    // @_at
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-32]!                // 8-byte Folded Spill
	stp	x20, x19, [sp, #16]             // 16-byte Folded Spill
	.cfi_def_cfa_offset 32
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w30, -32
	mov	x19, x0
	ldp	w20, w8, [x0, #8]
	bfi	x20, x8, #32, #32
	ldp	w1, w8, [x20]
	bfi	x1, x8, #32, #32
	tst	x1, #0x6
	b.ne	.LBB164_4
// %bb.1:                               // %"$3"
	tbz	w1, #3, .LBB164_3
// %bb.2:                               // %"$6"
	ldp	w1, w8, [x1]
	bfi	x1, x8, #32, #32
	b	.LBB164_4
.LBB164_3:                              // %"$5"
	mov	x0, x1
	bl	evList
	mov	x1, x0
.LBB164_4:                              // %"$2"
	tst	x1, #0xf
	b.ne	.LBB164_17
// %bb.5:                               // %"$8"
	ldp	w0, w8, [x1, #8]
	bfi	x0, x8, #32, #32
	adrp	x8, SymTab+8
	add	x8, x8, :lo12:SymTab+8
	cmp	x0, x8
	b.eq	.LBB164_16
// %bb.6:                               // %"$10"
	ldp	w9, w8, [x1]
	bfi	x9, x8, #32, #32
	add	x8, x9, #16                     // =16
	cmp	x8, x0
	b.hs	.LBB164_8
// %bb.7:                               // %"$13"
	lsr	x9, x8, #32
	stp	w8, w9, [x1]
	adrp	x0, SymTab+8
	add	x0, x0, :lo12:SymTab+8
	b	.LBB164_16
.LBB164_8:                              // %"$12"
	mov	w8, #2
	stp	w8, wzr, [x1]
	ldp	w19, w8, [x20, #8]
	bfi	x19, x8, #32, #32
.LBB164_9:                              // %"$14"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w0, w8, [x19]
	bfi	x0, x8, #32, #32
	ldp	w19, w8, [x19, #8]
	bfi	x19, x8, #32, #32
	tst	x19, #0xf
	b.ne	.LBB164_12
// %bb.10:                              // %"$15"
                                        //   in Loop: Header=BB164_9 Depth=1
	tst	x0, #0xf
	b.ne	.LBB164_9
// %bb.11:                              // %"$24"
                                        //   in Loop: Header=BB164_9 Depth=1
	bl	evList
	b	.LBB164_9
.LBB164_12:                             // %"$17"
	tst	x0, #0x6
	b.ne	.LBB164_16
// %bb.13:                              // %"$19"
	tbz	w0, #3, .LBB164_15
// %bb.14:                              // %"$22"
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB164_16
.LBB164_15:                             // %"$21"
	bl	evList
.LBB164_16:                             // %"$9"
	ldp	x20, x19, [sp, #16]             // 16-byte Folded Reload
	ldr	x30, [sp], #32                  // 8-byte Folded Reload
	ret
.LBB164_17:                             // %"$7"
	mov	x0, x19
	bl	pairErr
.Lfunc_end164:
	.size	_at, .Lfunc_end164-_at
	.cfi_endproc
                                        // -- End function
	.globl	_do                             // -- Begin function _do
	.p2align	4
	.type	_do,@function
_do:                                    // @_do
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-32]!                // 8-byte Folded Spill
	stp	x20, x19, [sp, #16]             // 16-byte Folded Spill
	.cfi_def_cfa_offset 32
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w30, -32
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w0, w8, [x9]
	bfi	x0, x8, #32, #32
	ldp	w19, w20, [x9, #8]
	tst	x0, #0x6
	b.ne	.LBB165_4
// %bb.1:                               // %"$3"
	tbz	w0, #3, .LBB165_3
// %bb.2:                               // %"$6"
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB165_4
.LBB165_3:                              // %"$5"
	bl	evList
.LBB165_4:                              // %"$2"
	adrp	x8, SymTab+8
	add	x8, x8, :lo12:SymTab+8
	cmp	x0, x8
	b.eq	.LBB165_14
// %bb.5:                               // %"$8"
	bfi	x19, x20, #32, #32
	tbz	w0, #1, .LBB165_11
// %bb.6:                               // %"$11"
	lsr	x20, x0, #4
	tbz	w0, #3, .LBB165_12
// %bb.7:
	mov	w8, #1
	tbnz	w8, #0, .LBB165_13
.LBB165_8:                              // %"$17"
                                        // =>This Inner Loop Header: Depth=1
	mov	x0, x19
	bl	loop1
	tbz	w0, #0, .LBB165_14
// %bb.9:                               // %"$18"
                                        //   in Loop: Header=BB165_8 Depth=1
	subs	x20, x20, #1                    // =1
	b.ne	.LBB165_8
// %bb.10:                              // %"$22"
	and	x0, x0, #0xfffffffffffffffe
	b	.LBB165_14
.LBB165_11:                             // %"$10"
	mov	x0, x19
	bl	loop2
	b	.LBB165_14
.LBB165_12:                             // %"$13"
	cmp	x20, #0                         // =0
	cset	w8, eq
	tbz	w8, #0, .LBB165_8
.LBB165_13:
	adrp	x0, SymTab+8
	add	x0, x0, :lo12:SymTab+8
.LBB165_14:                             // %"$7"
	ldp	x20, x19, [sp, #16]             // 16-byte Folded Reload
	ldr	x30, [sp], #32                  // 8-byte Folded Reload
	ret
.Lfunc_end165:
	.size	_do, .Lfunc_end165-_do
	.cfi_endproc
                                        // -- End function
	.globl	_loop                           // -- Begin function _loop
	.p2align	4
	.type	_loop,@function
_loop:                                  // @_loop
	.cfi_startproc
// %bb.0:                               // %"$1"
	ldp	w0, w8, [x0, #8]
	bfi	x0, x8, #32, #32
	b	loop2
.Lfunc_end166:
	.size	_loop, .Lfunc_end166-_loop
	.cfi_endproc
                                        // -- End function
	.globl	_for                            // -- Begin function _for
	.p2align	4
	.type	_for,@function
_for:                                   // @_for
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-96]!           // 16-byte Folded Spill
	stp	x28, x27, [sp, #16]             // 16-byte Folded Spill
	stp	x26, x25, [sp, #32]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #48]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #64]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #80]             // 16-byte Folded Spill
	mov	x29, sp
	sub	sp, sp, #16                     // =16
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w23, w8, [x9]
	bfi	x23, x8, #32, #32
	ldp	w19, w8, [x9, #8]
	bfi	x19, x8, #32, #32
	tst	x23, #0xf
	adrp	x24, env+8
	b.eq	.LBB167_7
// %bb.1:                               // %"$4"
	tst	x23, #0x6
	b.ne	.LBB167_89
// %bb.2:                               // %"$6"
	adrp	x8, SymTab+8
	add	x8, x8, :lo12:SymTab+8
	add	x9, x8, #208                    // =208
	cmp	x9, x23
	ccmp	x23, x8, #0, hs
	b.hs	.LBB167_90
// %bb.3:                               // %"$10"
	ldr	x8, [x24, :lo12:env+8]
	mov	x9, sp
	sub	x22, x9, #32                    // =32
	mov	sp, x22
	lsr	x10, x8, #32
	stp	w8, w10, [x9, #-16]
	str	x22, [x24, :lo12:env+8]
	ldp	w8, w10, [x23]
	stp	w8, w10, [x9, #-32]
	lsr	x8, x23, #32
	stp	w23, w8, [x9, #-24]
	ldp	w21, w8, [x19]
	bfi	x21, x8, #32, #32
	ldp	w19, w8, [x19, #8]
	bfi	x19, x8, #32, #32
	tst	x21, #0x6
	b.eq	.LBB167_15
// %bb.4:                               // %"$11"
	tst	x21, #0x6
	b.eq	.LBB167_27
.LBB167_5:                              // %"$16"
	tbz	w21, #3, .LBB167_17
// %bb.6:
	adrp	x20, SymTab+8
	add	x20, x20, :lo12:SymTab+8
	b	.LBB167_33
.LBB167_7:                              // %"$3"
	ldp	w21, w8, [x23, #8]
	bfi	x21, x8, #32, #32
	tst	x21, #0xf
	b.eq	.LBB167_20
// %bb.8:                               // %"$32"
	tst	x21, #0x6
	b.ne	.LBB167_93
// %bb.9:                               // %"$34"
	adrp	x8, SymTab+8
	add	x8, x8, :lo12:SymTab+8
	add	x9, x8, #208                    // =208
	cmp	x9, x21
	ccmp	x21, x8, #0, hs
	b.hs	.LBB167_94
// %bb.10:                              // %"$38"
	ldp	w22, w9, [x23]
	bfi	x22, x9, #32, #32
	tst	x22, #0x6
	b.ne	.LBB167_91
// %bb.11:                              // %"$40"
	add	x9, x8, #208                    // =208
	cmp	x9, x22
	ccmp	x22, x8, #0, hs
	b.hs	.LBB167_92
// %bb.12:                              // %"$44"
	ldr	x8, [x24, :lo12:env+8]
	mov	x9, sp
	sub	x25, x9, #32                    // =32
	mov	sp, x25
	lsr	x10, x8, #32
	stp	w8, w10, [x9, #-16]
	str	x25, [x24, :lo12:env+8]
	ldp	w8, w10, [x22]
	stp	w8, w10, [x9, #-32]
	lsr	x8, x22, #32
	stp	w22, w8, [x9, #-24]
	ldp	w8, w9, [x21]
	ldr	x10, [x24, :lo12:env+8]
	mov	x11, sp
	sub	x26, x11, #32                   // =32
	mov	sp, x26
	stp	w8, w9, [x11, #-32]
	lsr	x8, x21, #32
	stp	w21, w8, [x11, #-24]
	lsr	x8, x10, #32
	stp	w10, w8, [x11, #-16]
	str	x26, [x24, :lo12:env+8]
	ldp	w23, w8, [x19]
	bfi	x23, x8, #32, #32
	ldp	w19, w8, [x19, #8]
	bfi	x19, x8, #32, #32
	tst	x23, #0x6
	b.ne	.LBB167_43
// %bb.13:                              // %"$46"
	tbz	w23, #3, .LBB167_42
// %bb.14:                              // %"$49"
	ldp	w23, w8, [x23]
	bfi	x23, x8, #32, #32
	b	.LBB167_43
.LBB167_15:                             // %"$12"
	tbz	w21, #3, .LBB167_26
// %bb.16:                              // %"$15"
	ldp	w21, w8, [x21]
	bfi	x21, x8, #32, #32
	tst	x21, #0x6
	b.ne	.LBB167_5
	b	.LBB167_27
.LBB167_17:                             // %"$19"
	mov	w8, #2
	stp	w8, wzr, [x23]
	adrp	x20, SymTab+8
	add	x20, x20, :lo12:SymTab+8
.LBB167_18:                             // %"$21"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w9, w8, [x23]
	bfi	x9, x8, #32, #32
	add	x8, x9, #16                     // =16
	cmp	x8, x21
	b.hi	.LBB167_32
// %bb.19:                              // %"$22"
                                        //   in Loop: Header=BB167_18 Depth=1
	lsr	x9, x8, #32
	stp	w8, w9, [x23]
	mov	x0, x19
	bl	loop1
	mov	x20, x0
	tbnz	w20, #0, .LBB167_18
	b	.LBB167_33
.LBB167_20:                             // %"$31"
	ldp	w22, w8, [x23]
	bfi	x22, x8, #32, #32
	tst	x22, #0xf
	b.eq	.LBB167_35
// %bb.21:                              // %"$56"
	tst	x22, #0x6
	b.ne	.LBB167_91
// %bb.22:                              // %"$58"
	adrp	x25, SymTab+8
	add	x25, x25, :lo12:SymTab+8
	add	x8, x25, #208                   // =208
	cmp	x8, x22
	ccmp	x22, x25, #0, hs
	b.hs	.LBB167_92
// %bb.23:                              // %"$62"
	ldp	w9, w8, [x23, #8]
	bfi	x9, x8, #32, #32
	ldr	x8, [x24, :lo12:env+8]
	mov	x10, sp
	sub	x21, x10, #32                   // =32
	mov	sp, x21
	lsr	x11, x8, #32
	stp	w8, w11, [x10, #-16]
	str	x21, [x24, :lo12:env+8]
	ldp	w8, w11, [x22]
	stp	w8, w11, [x10, #-32]
	lsr	x8, x22, #32
	stp	w22, w8, [x10, #-24]
	ldp	w0, w8, [x9]
	bfi	x0, x8, #32, #32
	ldp	w23, w8, [x9, #8]
	bfi	x23, x8, #32, #32
	tst	x0, #0x6
	b.ne	.LBB167_51
// %bb.24:                              // %"$64"
	tbz	w0, #3, .LBB167_50
// %bb.25:                              // %"$67"
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB167_51
.LBB167_26:                             // %"$14"
	mov	x0, x21
	bl	evList
	mov	x21, x0
	tst	x21, #0x6
	b.ne	.LBB167_5
.LBB167_27:                             // %"$17"
	adrp	x25, env
	ldr	x8, [x25, :lo12:env]
	mov	x9, sp
	sub	x26, x9, #16                    // =16
	mov	sp, x26
	lsr	x10, x21, #32
	lsr	x11, x8, #32
	stp	w21, w10, [x9, #-16]
	stp	w8, w11, [x9, #-8]
	adrp	x20, SymTab+8
	add	x20, x20, :lo12:SymTab+8
	str	x26, [x25, :lo12:env]
.LBB167_28:                             // %"$26"
                                        // =>This Inner Loop Header: Depth=1
	tst	x21, #0xf
	b.ne	.LBB167_30
// %bb.29:                              // %"$27"
                                        //   in Loop: Header=BB167_28 Depth=1
	ldp	w8, w9, [x21]
	ldp	w21, w10, [x21, #8]
	bfi	x21, x10, #32, #32
	stp	w8, w9, [x23]
	mov	x0, x19
	bl	loop1
	mov	x20, x0
	tbnz	w20, #0, .LBB167_28
	b	.LBB167_31
.LBB167_30:                             // %"$29"
	and	x20, x20, #0xfffffffffffffffe
.LBB167_31:                             // %"$28"
	ldp	w9, w8, [x26, #8]
	bfi	x9, x8, #32, #32
	str	x9, [x25, :lo12:env]
	b	.LBB167_33
.LBB167_32:                             // %"$24"
	and	x20, x20, #0xfffffffffffffffe
.LBB167_33:                             // %"$18"
	ldp	w8, w9, [x22]
	stp	w8, w9, [x23]
	ldp	w8, w9, [x22, #16]
.LBB167_34:                             // %"$2"
	bfi	x8, x9, #32, #32
	b	.LBB167_49
.LBB167_35:                             // %"$55"
	ldp	w21, w8, [x22]
	bfi	x21, x8, #32, #32
	tst	x21, #0x6
	b.ne	.LBB167_93
// %bb.36:                              // %"$91"
	adrp	x25, SymTab+8
	add	x25, x25, :lo12:SymTab+8
	add	x8, x25, #208                   // =208
	cmp	x8, x21
	ccmp	x21, x25, #0, hs
	b.hs	.LBB167_94
// %bb.37:                              // %"$95"
	ldp	w22, w8, [x22, #8]
	bfi	x22, x8, #32, #32
	tst	x22, #0x6
	b.ne	.LBB167_91
// %bb.38:                              // %"$97"
	add	x8, x25, #208                   // =208
	cmp	x8, x22
	ccmp	x22, x25, #0, hs
	b.hs	.LBB167_92
// %bb.39:                              // %"$101"
	ldp	w8, w9, [x23, #8]
	bfi	x8, x9, #32, #32
	adrp	x9, env
	add	x9, x9, :lo12:env
	ldr	x10, [x9, #8]
	mov	x11, sp
	sub	x14, x11, #32                   // =32
	mov	sp, x14
	lsr	x12, x10, #32
	str	x14, [x9, #8]
	lsr	x13, x21, #32
	stp	w10, w12, [x11, #-16]
	ldp	w10, w12, [x21]
	stp	w10, w12, [x11, #-32]
	stp	w21, w13, [x11, #-24]
	ldr	x10, [x9]
	mov	x11, sp
	sub	x26, x11, #16                   // =16
	mov	sp, x26
	lsr	x12, x25, #32
	stp	w25, w12, [x11, #-16]
	lsr	x12, x10, #32
	stp	w10, w12, [x11, #-8]
	str	x26, [x9]
	ldp	w10, w11, [x22]
	ldr	x12, [x9, #8]
	mov	x13, sp
	sub	x15, x13, #32                   // =32
	mov	sp, x15
	stp	w10, w11, [x13, #-32]
	lsr	x10, x22, #32
	stp	w22, w10, [x13, #-24]
	lsr	x10, x12, #32
	stp	w12, w10, [x13, #-16]
	str	x15, [x9, #8]
	ldp	w0, w9, [x8]
	bfi	x0, x9, #32, #32
	ldp	w28, w9, [x8, #8]
	bfi	x28, x9, #32, #32
	tst	x0, #0x6
	stp	x15, x14, [x29, #-16]           // 16-byte Folded Spill
	b.ne	.LBB167_70
// %bb.40:                              // %"$103"
	tbz	w0, #3, .LBB167_69
// %bb.41:                              // %"$106"
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB167_70
.LBB167_42:                             // %"$48"
	mov	x0, x23
	bl	evList
	mov	x23, x0
.LBB167_43:                             // %"$45"
	adrp	x27, env
	ldr	x8, [x27, :lo12:env]
	mov	x9, sp
	sub	x28, x9, #16                    // =16
	mov	sp, x28
	lsr	x10, x23, #32
	lsr	x11, x8, #32
	stp	w23, w10, [x9, #-16]
	adrp	x20, SymTab+8
	add	x20, x20, :lo12:SymTab+8
	stp	w8, w11, [x9, #-8]
	mov	w8, #18
	str	x28, [x27, :lo12:env]
.LBB167_44:                             // %"$50"
                                        // =>This Inner Loop Header: Depth=1
	lsr	x9, x8, #32
	stp	w8, w9, [x22]
	tst	x23, #0xf
	b.ne	.LBB167_47
// %bb.45:                              // %"$51"
                                        //   in Loop: Header=BB167_44 Depth=1
	ldp	w8, w9, [x23]
	ldp	w23, w24, [x23, #8]
	stp	w8, w9, [x21]
	mov	x0, x19
	bl	loop1
	mov	x20, x0
	tbz	w20, #0, .LBB167_48
// %bb.46:                              // %"$54"
                                        //   in Loop: Header=BB167_44 Depth=1
	bfi	x23, x24, #32, #32
	ldp	w9, w8, [x22]
	bfi	x9, x8, #32, #32
	add	x8, x9, #16                     // =16
	b	.LBB167_44
.LBB167_47:                             // %"$53"
	and	x20, x20, #0xfffffffffffffffe
.LBB167_48:                             // %"$52"
	ldp	w8, w9, [x26]
	stp	w8, w9, [x21]
	ldp	w9, w8, [x28, #8]
	bfi	x9, x8, #32, #32
	str	x9, [x27, :lo12:env]
	ldp	w8, w9, [x25]
	stp	w8, w9, [x22]
	ldp	w8, w9, [x25, #16]
	bfi	x8, x9, #32, #32
	adrp	x24, env+8
.LBB167_49:                             // %"$2"
	str	x8, [x24, :lo12:env+8]
	mov	x0, x20
	mov	sp, x29
	ldp	x20, x19, [sp, #80]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #64]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #48]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #32]             // 16-byte Folded Reload
	ldp	x28, x27, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #96             // 16-byte Folded Reload
	ret
.LBB167_50:                             // %"$66"
	bl	evList
.LBB167_51:                             // %"$63"
	lsr	x8, x0, #32
	stp	w0, w8, [x22]
	adrp	x8, env
	add	x8, x8, :lo12:env
	ldr	x9, [x8]
	mov	x10, sp
	sub	x26, x10, #16                   // =16
	mov	sp, x26
	lsr	x11, x25, #32
	lsr	x12, x9, #32
	adrp	x27, SymTab+376
	stp	w25, w11, [x10, #-16]
	mov	x0, x26
	mov	x20, x25
	stp	w9, w12, [x10, #-8]
.LBB167_52:                             // %"$68.sink.split"
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB167_53 Depth 2
                                        //     Child Loop BB167_62 Depth 2
	lsr	x9, x0, #32
	stp	w0, w9, [x8]
.LBB167_53:                             // %"$68"
                                        //   Parent Loop BB167_52 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	w0, w8, [x23]
	bfi	x0, x8, #32, #32
	tst	x0, #0x6
	b.ne	.LBB167_57
// %bb.54:                              // %"$70"
                                        //   in Loop: Header=BB167_53 Depth=2
	tbz	w0, #3, .LBB167_56
// %bb.55:                              // %"$73"
                                        //   in Loop: Header=BB167_53 Depth=2
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB167_57
.LBB167_56:                             // %"$72"
                                        //   in Loop: Header=BB167_53 Depth=2
	bl	evList
.LBB167_57:                             // %"$69"
                                        //   in Loop: Header=BB167_53 Depth=2
	cmp	x0, x25
	b.eq	.LBB167_68
// %bb.58:                              // %"$74"
                                        //   in Loop: Header=BB167_53 Depth=2
	str	x0, [x27, :lo12:SymTab+376]
	mov	x0, x19
	bl	loop1
	tbz	w0, #0, .LBB167_67
// %bb.59:                              // %"$76"
                                        //   in Loop: Header=BB167_53 Depth=2
	and	x20, x0, #0xfffffffffffffffe
	lsr	x8, x0, #32
	stp	w20, w8, [x26]
	ldp	w28, w8, [x23, #8]
	bfi	x28, x8, #32, #32
	tst	x28, #0xf
	b.ne	.LBB167_53
	b	.LBB167_62
.LBB167_60:                             // %"$80"
                                        //   in Loop: Header=BB167_62 Depth=2
	tst	x0, #0xf
	b.ne	.LBB167_62
// %bb.61:                              // %"$89"
                                        //   in Loop: Header=BB167_62 Depth=2
	bl	evList
.LBB167_62:                             // %"$79"
                                        //   Parent Loop BB167_52 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	w0, w8, [x28]
	bfi	x0, x8, #32, #32
	ldp	w28, w8, [x28, #8]
	bfi	x28, x8, #32, #32
	tst	x28, #0xf
	b.eq	.LBB167_60
// %bb.63:                              // %"$82"
                                        //   in Loop: Header=BB167_52 Depth=1
	tst	x0, #0x6
	mov	x8, x22
	b.ne	.LBB167_52
// %bb.64:                              // %"$84"
                                        //   in Loop: Header=BB167_52 Depth=1
	tbz	w0, #3, .LBB167_66
// %bb.65:                              // %"$87"
                                        //   in Loop: Header=BB167_52 Depth=1
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	mov	x8, x22
	b	.LBB167_52
.LBB167_66:                             // %"$86"
                                        //   in Loop: Header=BB167_52 Depth=1
	bl	evList
	mov	x8, x22
	b	.LBB167_52
.LBB167_67:
	mov	x20, x0
.LBB167_68:                             // %"$75"
	ldp	w9, w8, [x26, #8]
	bfi	x9, x8, #32, #32
	adrp	x8, env
	str	x9, [x8, :lo12:env]
	ldp	w8, w9, [x21]
	stp	w8, w9, [x22]
	ldp	w8, w9, [x21, #16]
	b	.LBB167_34
.LBB167_69:                             // %"$105"
	bl	evList
.LBB167_70:                             // %"$102"
	adrp	x13, env
	ldr	x8, [x13, :lo12:env]
	mov	x9, sp
	sub	x10, x9, #16                    // =16
	mov	sp, x10
	lsr	x11, x0, #32
	lsr	x12, x8, #32
	stp	w0, w11, [x9, #-16]
	stp	w8, w12, [x9, #-8]
	str	x10, [x13, :lo12:env]
	mov	w8, #18
	adrp	x27, SymTab+376
	mov	x20, x25
	stp	w0, w11, [x22]
	b	.LBB167_74
.LBB167_71:                             // %"$125"
                                        //   in Loop: Header=BB167_74 Depth=1
	bl	evList
.LBB167_72:                             // %"$120"
                                        //   in Loop: Header=BB167_74 Depth=1
	lsr	x8, x0, #32
	stp	w0, w8, [x22]
.LBB167_73:                             // %"$117"
                                        //   in Loop: Header=BB167_74 Depth=1
	ldp	w9, w8, [x21]
	bfi	x9, x8, #32, #32
	add	x8, x9, #16                     // =16
.LBB167_74:                             // %"$107"
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB167_83 Depth 2
	lsr	x9, x8, #32
	stp	w8, w9, [x21]
	ldp	w0, w8, [x28]
	bfi	x0, x8, #32, #32
	tst	x0, #0x6
	b.ne	.LBB167_78
// %bb.75:                              // %"$109"
                                        //   in Loop: Header=BB167_74 Depth=1
	tbz	w0, #3, .LBB167_77
// %bb.76:                              // %"$112"
                                        //   in Loop: Header=BB167_74 Depth=1
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB167_78
.LBB167_77:                             // %"$111"
                                        //   in Loop: Header=BB167_74 Depth=1
	bl	evList
.LBB167_78:                             // %"$108"
                                        //   in Loop: Header=BB167_74 Depth=1
	cmp	x0, x25
	b.eq	.LBB167_88
// %bb.79:                              // %"$113"
                                        //   in Loop: Header=BB167_74 Depth=1
	str	x0, [x27, :lo12:SymTab+376]
	mov	x0, x19
	bl	loop1
	tbz	w0, #0, .LBB167_87
// %bb.80:                              // %"$115"
                                        //   in Loop: Header=BB167_74 Depth=1
	and	x20, x0, #0xfffffffffffffffe
	lsr	x8, x0, #32
	stp	w20, w8, [x26]
	ldp	w23, w8, [x28, #8]
	bfi	x23, x8, #32, #32
	tst	x23, #0xf
	b.ne	.LBB167_73
	b	.LBB167_83
.LBB167_81:                             // %"$119"
                                        //   in Loop: Header=BB167_83 Depth=2
	tst	x0, #0xf
	b.ne	.LBB167_83
// %bb.82:                              // %"$128"
                                        //   in Loop: Header=BB167_83 Depth=2
	bl	evList
.LBB167_83:                             // %"$118"
                                        //   Parent Loop BB167_74 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	w0, w8, [x23]
	bfi	x0, x8, #32, #32
	ldp	w23, w8, [x23, #8]
	bfi	x23, x8, #32, #32
	tst	x23, #0xf
	b.eq	.LBB167_81
// %bb.84:                              // %"$121"
                                        //   in Loop: Header=BB167_74 Depth=1
	tst	x0, #0x6
	b.ne	.LBB167_72
// %bb.85:                              // %"$123"
                                        //   in Loop: Header=BB167_74 Depth=1
	tbz	w0, #3, .LBB167_71
// %bb.86:                              // %"$126"
                                        //   in Loop: Header=BB167_74 Depth=1
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB167_72
.LBB167_87:
	mov	x20, x0
.LBB167_88:                             // %"$114"
	ldp	x9, x10, [x29, #-16]            // 16-byte Folded Reload
	ldp	w8, w9, [x9]
	stp	w8, w9, [x22]
	ldp	w9, w8, [x26, #8]
	bfi	x9, x8, #32, #32
	adrp	x8, env
	str	x9, [x8, :lo12:env]
	ldp	w8, w9, [x10]
	stp	w8, w9, [x21]
	ldp	w8, w9, [x10, #16]
	b	.LBB167_34
.LBB167_89:                             // %"$5"
	mov	x1, x23
	bl	varErr
.LBB167_90:                             // %"$9"
	mov	x1, x23
	bl	protErr
.LBB167_91:                             // %"$39"
	mov	x1, x22
	bl	varErr
.LBB167_92:                             // %"$43"
	mov	x1, x22
	bl	protErr
.LBB167_93:                             // %"$33"
	mov	x1, x21
	bl	varErr
.LBB167_94:                             // %"$37"
	mov	x1, x21
	bl	protErr
.Lfunc_end167:
	.size	_for, .Lfunc_end167-_for
	.cfi_endproc
                                        // -- End function
	.globl	_with                           // -- Begin function _with
	.p2align	4
	.type	_with,@function
_with:                                  // @_with
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-48]!           // 16-byte Folded Spill
	str	x21, [sp, #16]                  // 8-byte Folded Spill
	stp	x20, x19, [sp, #32]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 48
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -32
	.cfi_offset w30, -40
	.cfi_offset w29, -48
	mov	x19, x0
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w1, w8, [x9]
	bfi	x1, x8, #32, #32
	ldp	w20, w21, [x9, #8]
	tst	x1, #0x6
	b.ne	.LBB168_4
// %bb.1:                               // %"$3"
	tbz	w1, #3, .LBB168_3
// %bb.2:                               // %"$6"
	ldp	w1, w8, [x1]
	bfi	x1, x8, #32, #32
	b	.LBB168_4
.LBB168_3:                              // %"$5"
	mov	x0, x1
	bl	evList
	mov	x1, x0
.LBB168_4:                              // %"$2"
	tst	x1, #0x6
	b.ne	.LBB168_16
// %bb.5:                               // %"$8"
	adrp	x8, SymTab+8
	add	x8, x8, :lo12:SymTab+8
	cmp	x1, x8
	b.eq	.LBB168_15
// %bb.6:                               // %"$10"
	bfi	x20, x21, #32, #32
	adrp	x8, SymTab+424
	add	x8, x8, :lo12:SymTab+424
	ldr	x9, [x8]
	adrp	x19, env+8
	ldr	x10, [x19, :lo12:env+8]
	mov	x11, sp
	sub	x21, x11, #32                   // =32
	mov	sp, x21
	lsr	x12, x9, #32
	lsr	x13, x8, #32
	stp	w9, w12, [x11, #-32]
	stp	w8, w13, [x11, #-24]
	lsr	x9, x10, #32
	stp	w10, w9, [x11, #-16]
	str	x21, [x19, :lo12:env+8]
	str	x1, [x8]
.LBB168_7:                              // %"$12"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w1, w8, [x20]
	bfi	x1, x8, #32, #32
	ldp	w20, w8, [x20, #8]
	bfi	x20, x8, #32, #32
	tst	x20, #0xf
	b.ne	.LBB168_10
// %bb.8:                               // %"$13"
                                        //   in Loop: Header=BB168_7 Depth=1
	tst	x1, #0xf
	b.ne	.LBB168_7
// %bb.9:                               // %"$22"
                                        //   in Loop: Header=BB168_7 Depth=1
	mov	x0, x1
	bl	evList
	b	.LBB168_7
.LBB168_10:                             // %"$15"
	tst	x1, #0x6
	b.ne	.LBB168_14
// %bb.11:                              // %"$17"
	tbz	w1, #3, .LBB168_13
// %bb.12:                              // %"$20"
	ldp	w1, w8, [x1]
	bfi	x1, x8, #32, #32
	b	.LBB168_14
.LBB168_13:                             // %"$19"
	mov	x0, x1
	bl	evList
	mov	x1, x0
.LBB168_14:                             // %"$14"
	ldp	w9, w8, [x21]
	adrp	x10, SymTab+424
	bfi	x9, x8, #32, #32
	str	x9, [x10, :lo12:SymTab+424]
	ldp	w9, w8, [x21, #16]
	bfi	x9, x8, #32, #32
	str	x9, [x19, :lo12:env+8]
.LBB168_15:                             // %"$11"
	mov	x0, x1
	mov	sp, x29
	ldp	x20, x19, [sp, #32]             // 16-byte Folded Reload
	ldr	x21, [sp, #16]                  // 8-byte Folded Reload
	ldp	x29, x30, [sp], #48             // 16-byte Folded Reload
	ret
.LBB168_16:                             // %"$7"
	mov	x0, x19
	bl	varErr
.Lfunc_end168:
	.size	_with, .Lfunc_end168-_with
	.cfi_endproc
                                        // -- End function
	.globl	_bind                           // -- Begin function _bind
	.p2align	4
	.type	_bind,@function
_bind:                                  // @_bind
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-64]!           // 16-byte Folded Spill
	stp	x24, x23, [sp, #16]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #32]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #48]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 64
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w30, -56
	.cfi_offset w29, -64
	mov	x20, x0
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w19, w8, [x9]
	bfi	x19, x8, #32, #32
	ldp	w21, w22, [x9, #8]
	tst	x19, #0x6
	b.ne	.LBB169_4
// %bb.1:                               // %"$3"
	tbz	w19, #3, .LBB169_3
// %bb.2:                               // %"$6"
	ldp	w19, w8, [x19]
	bfi	x19, x8, #32, #32
	b	.LBB169_4
.LBB169_3:                              // %"$5"
	mov	x0, x19
	bl	evList
	mov	x19, x0
.LBB169_4:                              // %"$2"
	tst	x19, #0x6
	b.ne	.LBB169_43
// %bb.5:                               // %"$8"
	bfi	x21, x22, #32, #32
	adrp	x9, SymTab+8
	add	x9, x9, :lo12:SymTab+8
	cmp	x19, x9
	b.ne	.LBB169_9
.LBB169_6:                              // %"$12"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w0, w8, [x21]
	bfi	x0, x8, #32, #32
	ldp	w21, w8, [x21, #8]
	bfi	x21, x8, #32, #32
	tst	x21, #0xf
	b.ne	.LBB169_15
// %bb.7:                               // %"$13"
                                        //   in Loop: Header=BB169_6 Depth=1
	tst	x0, #0xf
	b.ne	.LBB169_6
// %bb.8:                               // %"$22"
                                        //   in Loop: Header=BB169_6 Depth=1
	bl	evList
	b	.LBB169_6
.LBB169_9:                              // %"$10"
	tbz	w19, #3, .LBB169_18
// %bb.10:                              // %"$24"
	add	x8, x9, #208                    // =208
	cmp	x8, x19
	ccmp	x19, x9, #0, hs
	b.hs	.LBB169_47
// %bb.11:                              // %"$28"
	ldp	w8, w9, [x19]
	adrp	x20, env+8
	ldr	x10, [x20, :lo12:env+8]
	mov	x11, sp
	sub	x22, x11, #32                   // =32
	mov	sp, x22
	stp	w8, w9, [x11, #-32]
	lsr	x8, x19, #32
	stp	w19, w8, [x11, #-24]
	lsr	x8, x10, #32
	stp	w10, w8, [x11, #-16]
	str	x22, [x20, :lo12:env+8]
.LBB169_12:                             // %"$29"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w0, w8, [x21]
	bfi	x0, x8, #32, #32
	ldp	w21, w8, [x21, #8]
	bfi	x21, x8, #32, #32
	tst	x21, #0xf
	b.ne	.LBB169_33
// %bb.13:                              // %"$30"
                                        //   in Loop: Header=BB169_12 Depth=1
	tst	x0, #0xf
	b.ne	.LBB169_12
// %bb.14:                              // %"$39"
                                        //   in Loop: Header=BB169_12 Depth=1
	bl	evList
	b	.LBB169_12
.LBB169_15:                             // %"$15"
	tst	x0, #0x6
	b.ne	.LBB169_42
// %bb.16:                              // %"$17"
	tbz	w0, #3, .LBB169_36
// %bb.17:                              // %"$20"
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB169_42
.LBB169_18:                             // %"$23"
	adrp	x22, env+8
	ldr	x23, [x22, :lo12:env+8]
	adrp	x10, env+8
	add	x10, x10, :lo12:env+8
	mov	x24, x23
	b	.LBB169_20
.LBB169_19:                             // %"$45"
                                        //   in Loop: Header=BB169_20 Depth=1
	lsr	x12, x11, #32
	stp	w11, w12, [x8]
	tst	x19, #0xf
	b.ne	.LBB169_29
.LBB169_20:                             // %"$40"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w1, w8, [x19]
	bfi	x1, x8, #32, #32
	ldp	w19, w8, [x19, #8]
	bfi	x19, x8, #32, #32
	tst	x1, #0x6
	b.ne	.LBB169_43
// %bb.21:                              // %"$42"
                                        //   in Loop: Header=BB169_20 Depth=1
	tbz	w1, #3, .LBB169_24
// %bb.22:                              // %"$43"
                                        //   in Loop: Header=BB169_20 Depth=1
	add	x8, x9, #208                    // =208
	cmp	x8, x1
	ccmp	x1, x9, #0, hs
	b.hs	.LBB169_44
// %bb.23:                              // %"$49"
                                        //   in Loop: Header=BB169_20 Depth=1
	ldp	w12, w8, [x1]
	bfi	x12, x8, #32, #32
	mov	x13, sp
	sub	x11, x13, #32                   // =32
	mov	sp, x11
	lsr	x8, x12, #32
	lsr	x14, x1, #32
	lsr	x15, x24, #32
	stp	w12, w8, [x13, #-32]
	stp	w24, w15, [x13, #-16]
	mov	x8, x10
	mov	x24, x11
	stp	w1, w14, [x13, #-24]
	b	.LBB169_19
.LBB169_24:                             // %"$44"
                                        //   in Loop: Header=BB169_20 Depth=1
	ldp	w8, w11, [x1]
	bfi	x8, x11, #32, #32
	tst	x8, #0x6
	b.ne	.LBB169_45
// %bb.25:                              // %"$51"
                                        //   in Loop: Header=BB169_20 Depth=1
	add	x11, x9, #208                   // =208
	cmp	x11, x8
	ccmp	x8, x9, #0, hs
	b.hs	.LBB169_46
// %bb.26:                              // %"$55"
                                        //   in Loop: Header=BB169_20 Depth=1
	ldp	w11, w12, [x8]
	mov	x13, sp
	sub	x14, x13, #32                   // =32
	mov	sp, x14
	stp	w11, w12, [x13, #-32]
	lsr	x11, x8, #32
	stp	w8, w11, [x13, #-24]
	lsr	x11, x24, #32
	stp	w24, w11, [x13, #-16]
	str	x14, [x22, :lo12:env+8]
	ldp	w11, w12, [x1, #8]
	bfi	x11, x12, #32, #32
	mov	x24, x14
	b	.LBB169_19
.LBB169_27:                             // %"$59"
                                        //   in Loop: Header=BB169_29 Depth=1
	tst	x0, #0xf
	b.ne	.LBB169_29
// %bb.28:                              // %"$68"
                                        //   in Loop: Header=BB169_29 Depth=1
	bl	evList
.LBB169_29:                             // %"$58"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w0, w8, [x21]
	bfi	x0, x8, #32, #32
	ldp	w21, w8, [x21, #8]
	bfi	x21, x8, #32, #32
	tst	x21, #0xf
	b.eq	.LBB169_27
// %bb.30:                              // %"$61"
	tst	x0, #0x6
	b.ne	.LBB169_40
// %bb.31:                              // %"$63"
	tbz	w0, #3, .LBB169_39
// %bb.32:                              // %"$66"
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB169_40
.LBB169_33:                             // %"$32"
	tst	x0, #0x6
	b.ne	.LBB169_38
// %bb.34:                              // %"$34"
	tbz	w0, #3, .LBB169_37
// %bb.35:                              // %"$37"
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB169_38
.LBB169_36:                             // %"$19"
	bl	evList
	b	.LBB169_42
.LBB169_37:                             // %"$36"
	bl	evList
.LBB169_38:                             // %"$31"
	ldp	w8, w9, [x22]
	stp	w8, w9, [x19]
	ldp	w9, w8, [x22, #16]
	bfi	x9, x8, #32, #32
	str	x9, [x20, :lo12:env+8]
	b	.LBB169_42
.LBB169_39:                             // %"$65"
	bl	evList
.LBB169_40:                             // %"$69"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w9, w8, [x24, #8]
	bfi	x9, x8, #32, #32
	ldp	w8, w10, [x24]
	stp	w8, w10, [x9]
	ldp	w24, w8, [x24, #16]
	bfi	x24, x8, #32, #32
	cmp	x23, x24
	b.ne	.LBB169_40
// %bb.41:                              // %"$71"
	str	x24, [x22, :lo12:env+8]
.LBB169_42:                             // %"$7"
	mov	sp, x29
	ldp	x20, x19, [sp, #48]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #32]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #64             // 16-byte Folded Reload
	ret
.LBB169_43:                             // %"$9"
	mov	x0, x20
	mov	x1, x19
	bl	argErr
.LBB169_44:                             // %"$48"
	mov	x0, x20
	bl	protErr
.LBB169_45:                             // %"$50"
	mov	x0, x20
	mov	x1, x8
	bl	varErr
.LBB169_46:                             // %"$54"
	mov	x0, x20
	mov	x1, x8
	bl	protErr
.LBB169_47:                             // %"$27"
	mov	x0, x20
	mov	x1, x19
	bl	protErr
.Lfunc_end169:
	.size	_bind, .Lfunc_end169-_bind
	.cfi_endproc
                                        // -- End function
	.globl	_job                            // -- Begin function _job
	.p2align	4
	.type	_job,@function
_job:                                   // @_job
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-64]!           // 16-byte Folded Spill
	stp	x24, x23, [sp, #16]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #32]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #48]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 64
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w30, -56
	.cfi_offset w29, -64
	mov	x19, x0
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w0, w8, [x9]
	bfi	x0, x8, #32, #32
	ldp	w24, w8, [x9, #8]
	bfi	x24, x8, #32, #32
	tst	x0, #0x6
	b.ne	.LBB170_4
// %bb.1:                               // %"$3"
	tbz	w0, #3, .LBB170_3
// %bb.2:                               // %"$6"
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB170_4
.LBB170_3:                              // %"$5"
	bl	evList
.LBB170_4:                              // %"$2"
	adrp	x20, env
	add	x20, x20, :lo12:env
	ldr	x8, [x20]
	mov	x9, sp
	sub	x21, x9, #16                    // =16
	mov	sp, x21
	lsr	x10, x0, #32
	stp	w0, w10, [x9, #-16]
	lsr	x10, x8, #32
	stp	w8, w10, [x9, #-8]
	adrp	x8, SymTab+8
	add	x8, x8, :lo12:SymTab+8
	str	x21, [x20]
	ldr	x22, [x20, #8]
	adrp	x9, env+8
	mov	x23, x22
	tst	x0, #0xf
	b.ne	.LBB170_10
.LBB170_5:                              // %"$8"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w10, w11, [x0]
	bfi	x10, x11, #32, #32
	ldp	w1, w11, [x10]
	bfi	x1, x11, #32, #32
	tst	x1, #0x6
	b.ne	.LBB170_18
// %bb.6:                               // %"$11"
                                        //   in Loop: Header=BB170_5 Depth=1
	add	x11, x8, #208                   // =208
	cmp	x11, x1
	ccmp	x1, x8, #0, hs
	b.hs	.LBB170_19
// %bb.7:                               // %"$15"
                                        //   in Loop: Header=BB170_5 Depth=1
	ldp	w0, w11, [x0, #8]
	bfi	x0, x11, #32, #32
	ldp	w11, w12, [x1]
	mov	x13, sp
	sub	x14, x13, #32                   // =32
	mov	sp, x14
	stp	w11, w12, [x13, #-32]
	lsr	x11, x1, #32
	stp	w1, w11, [x13, #-24]
	lsr	x11, x23, #32
	stp	w23, w11, [x13, #-16]
	lsr	x11, x10, #32
	stp	w10, w11, [x13, #-8]
	str	x14, [x9, :lo12:env+8]
	ldp	w11, w10, [x10, #8]
	mov	x23, x14
	stp	w11, w10, [x1]
	tst	x0, #0xf
	b.eq	.LBB170_5
	b	.LBB170_10
.LBB170_8:                              // %"$17"
                                        //   in Loop: Header=BB170_10 Depth=1
	tst	x0, #0xf
	b.ne	.LBB170_10
// %bb.9:                               // %"$26"
                                        //   in Loop: Header=BB170_10 Depth=1
	bl	evList
.LBB170_10:                             // %"$16"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w0, w8, [x24]
	bfi	x0, x8, #32, #32
	ldp	w24, w8, [x24, #8]
	bfi	x24, x8, #32, #32
	tst	x24, #0xf
	b.eq	.LBB170_8
// %bb.11:                              // %"$19"
	tst	x0, #0x6
	b.ne	.LBB170_16
// %bb.12:                              // %"$21"
	tbz	w0, #3, .LBB170_14
// %bb.13:                              // %"$24"
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB170_16
.LBB170_14:                             // %"$23"
	bl	evList
	b	.LBB170_16
.LBB170_15:                             // %"$28"
                                        //   in Loop: Header=BB170_16 Depth=1
	ldp	w9, w8, [x23, #8]
	bfi	x9, x8, #32, #32
	ldp	w10, w8, [x23, #24]
	bfi	x10, x8, #32, #32
	ldp	w8, w11, [x9]
	stp	w8, w11, [x10, #8]
	ldp	w8, w10, [x23]
	stp	w8, w10, [x9]
	ldp	w23, w8, [x23, #16]
	bfi	x23, x8, #32, #32
.LBB170_16:                             // %"$27"
                                        // =>This Inner Loop Header: Depth=1
	cmp	x22, x23
	b.ne	.LBB170_15
// %bb.17:                              // %"$29"
	ldp	w9, w8, [x21, #8]
	bfi	x9, x8, #32, #32
	stp	x9, x23, [x20]
	mov	sp, x29
	ldp	x20, x19, [sp, #48]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #32]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #64             // 16-byte Folded Reload
	ret
.LBB170_18:                             // %"$10"
	mov	x0, x19
	bl	varErr
.LBB170_19:                             // %"$14"
	mov	x0, x19
	bl	protErr
.Lfunc_end170:
	.size	_job, .Lfunc_end170-_job
	.cfi_endproc
                                        // -- End function
	.globl	_let                            // -- Begin function _let
	.p2align	4
	.type	_let,@function
_let:                                   // @_let
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-96]!           // 16-byte Folded Spill
	stp	x28, x27, [sp, #16]             // 16-byte Folded Spill
	stp	x26, x25, [sp, #32]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #48]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #64]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #80]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	mov	x19, x0
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w20, w8, [x9]
	bfi	x20, x8, #32, #32
	ldp	w24, w8, [x9, #8]
	bfi	x24, x8, #32, #32
	tst	x20, #0xf
	adrp	x22, env+8
	b.eq	.LBB171_6
// %bb.1:                               // %"$2"
	tst	x20, #0x6
	b.ne	.LBB171_62
// %bb.2:                               // %"$6"
	adrp	x8, SymTab+8
	add	x8, x8, :lo12:SymTab+8
	add	x9, x8, #208                    // =208
	cmp	x9, x20
	ccmp	x20, x8, #0, hs
	b.hs	.LBB171_63
// %bb.3:                               // %"$10"
	ldp	w8, w9, [x20]
	ldr	x10, [x22, :lo12:env+8]
	mov	x11, sp
	sub	x19, x11, #32                   // =32
	mov	sp, x19
	stp	w8, w9, [x11, #-32]
	lsr	x8, x20, #32
	stp	w20, w8, [x11, #-24]
	lsr	x8, x10, #32
	stp	w10, w8, [x11, #-16]
	str	x19, [x22, :lo12:env+8]
	ldp	w0, w8, [x24]
	bfi	x0, x8, #32, #32
	ldp	w21, w8, [x24, #8]
	bfi	x21, x8, #32, #32
	tst	x0, #0x6
	b.ne	.LBB171_46
// %bb.4:                               // %"$12"
	tbz	w0, #3, .LBB171_45
// %bb.5:                               // %"$15"
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB171_46
.LBB171_6:                              // %"$3"
	ldr	x23, [x22, :lo12:env+8]
	adrp	x26, SymTab+8
	add	x26, x26, :lo12:SymTab+8
	adrp	x27, env+8
	add	x27, x27, :lo12:env+8
	mov	x25, x23
	b	.LBB171_10
.LBB171_7:                              // %"$40"
                                        //   in Loop: Header=BB171_10 Depth=1
	bl	evList
.LBB171_8:                              // %"$37"
                                        //   in Loop: Header=BB171_10 Depth=1
	lsr	x8, x0, #32
	stp	w0, w8, [x21]
	mov	x25, x20
.LBB171_9:                              // %"$30"
                                        //   in Loop: Header=BB171_10 Depth=1
	ldp	w20, w8, [x28, #8]
	bfi	x20, x8, #32, #32
	tst	x20, #0xf
	b.ne	.LBB171_41
.LBB171_10:                             // %"$27"
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB171_18 Depth 2
                                        //       Child Loop BB171_30 Depth 3
	ldp	w21, w8, [x20]
	bfi	x21, x8, #32, #32
	ldp	w28, w8, [x20, #8]
	bfi	x28, x8, #32, #32
	tst	x21, #0xf
	b.eq	.LBB171_16
// %bb.11:                              // %"$28"
                                        //   in Loop: Header=BB171_10 Depth=1
	tst	x21, #0x6
	b.ne	.LBB171_58
// %bb.12:                              // %"$32"
                                        //   in Loop: Header=BB171_10 Depth=1
	add	x8, x26, #208                   // =208
	cmp	x8, x21
	ccmp	x21, x26, #0, hs
	b.hs	.LBB171_59
// %bb.13:                              // %"$36"
                                        //   in Loop: Header=BB171_10 Depth=1
	ldp	w8, w9, [x21]
	mov	x10, sp
	sub	x20, x10, #32                   // =32
	mov	sp, x20
	stp	w8, w9, [x10, #-32]
	lsr	x8, x21, #32
	stp	w21, w8, [x10, #-24]
	lsr	x8, x25, #32
	stp	w25, w8, [x10, #-16]
	str	x20, [x22, :lo12:env+8]
	ldp	w0, w8, [x28]
	bfi	x0, x8, #32, #32
	tst	x0, #0x6
	b.ne	.LBB171_8
// %bb.14:                              // %"$38"
                                        //   in Loop: Header=BB171_10 Depth=1
	tbz	w0, #3, .LBB171_7
// %bb.15:                              // %"$41"
                                        //   in Loop: Header=BB171_10 Depth=1
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB171_8
.LBB171_16:                             // %"$43.preheader"
                                        //   in Loop: Header=BB171_10 Depth=1
	mov	x9, xzr
	b	.LBB171_18
.LBB171_17:                             // %"$44"
                                        //   in Loop: Header=BB171_18 Depth=2
	lsr	x8, x9, #32
	stp	w9, w8, [x10]
	mov	x9, x10
.LBB171_18:                             // %"$43"
                                        //   Parent Loop BB171_10 Depth=1
                                        // =>  This Loop Header: Depth=2
                                        //       Child Loop BB171_30 Depth 3
	mov	x10, x21
	ldp	w21, w8, [x21]
	bfi	x21, x8, #32, #32
	tst	x21, #0xf
	b.eq	.LBB171_17
// %bb.19:                              // %"$45"
                                        //   in Loop: Header=BB171_18 Depth=2
	ldp	w1, w8, [x10]
	bfi	x1, x8, #32, #32
	cmp	x1, x26
	b.eq	.LBB171_24
// %bb.20:                              // %"$46"
                                        //   in Loop: Header=BB171_18 Depth=2
	tst	x1, #0x6
	b.ne	.LBB171_60
// %bb.21:                              // %"$49"
                                        //   in Loop: Header=BB171_18 Depth=2
	add	x8, x26, #208                   // =208
	cmp	x8, x1
	ccmp	x1, x26, #0, hs
	b.hs	.LBB171_61
// %bb.22:                              // %"$53"
                                        //   in Loop: Header=BB171_18 Depth=2
	ldp	w8, w11, [x1]
	mov	x12, sp
	sub	x20, x12, #32                   // =32
	mov	sp, x20
	stp	w8, w11, [x12, #-32]
	lsr	x11, x1, #32
	lsr	x8, x25, #32
	stp	w25, w8, [x12, #-16]
	mov	x8, x27
	mov	x25, x20
	stp	w1, w11, [x12, #-24]
.LBB171_23:                             // %"$54.sink.split"
                                        //   in Loop: Header=BB171_18 Depth=2
	lsr	x11, x20, #32
	stp	w20, w11, [x8]
.LBB171_24:                             // %"$54"
                                        //   in Loop: Header=BB171_18 Depth=2
	mov	x20, x10
	mov	x8, x9
	ldp	w21, w9, [x10, #8]
	bfi	x21, x9, #32, #32
	tst	x21, #0xf
	b.eq	.LBB171_32
// %bb.25:                              // %"$55"
                                        //   in Loop: Header=BB171_18 Depth=2
	cmp	x21, x26
	b.eq	.LBB171_29
// %bb.26:                              // %"$58"
                                        //   in Loop: Header=BB171_18 Depth=2
	tst	x21, #0x6
	b.ne	.LBB171_58
// %bb.27:                              // %"$61"
                                        //   in Loop: Header=BB171_18 Depth=2
	add	x9, x26, #208                   // =208
	cmp	x9, x21
	ccmp	x21, x26, #0, hs
	b.hs	.LBB171_59
// %bb.28:                              // %"$65"
                                        //   in Loop: Header=BB171_18 Depth=2
	ldp	w9, w10, [x21]
	mov	x11, sp
	sub	x12, x11, #32                   // =32
	mov	sp, x12
	stp	w9, w10, [x11, #-32]
	lsr	x9, x21, #32
	stp	w21, w9, [x11, #-24]
	lsr	x9, x25, #32
	stp	w25, w9, [x11, #-16]
	mov	x25, x12
	str	x12, [x22, :lo12:env+8]
.LBB171_29:                             // %"$66"
                                        //   in Loop: Header=BB171_18 Depth=2
	cbz	x8, .LBB171_34
.LBB171_30:                             // %"$68"
                                        //   Parent Loop BB171_10 Depth=1
                                        //     Parent Loop BB171_18 Depth=2
                                        // =>    This Inner Loop Header: Depth=3
	tbz	w8, #3, .LBB171_33
// %bb.31:                              // %"$69"
                                        //   in Loop: Header=BB171_30 Depth=3
	and	x9, x8, #0xfffffffffffffff7
	ldp	w8, w10, [x9, #8]
	bfi	x8, x10, #32, #32
	lsr	x10, x20, #32
	stp	w20, w10, [x9, #8]
	mov	x20, x9
	cbnz	x8, .LBB171_30
	b	.LBB171_34
.LBB171_32:                             // %"$57"
                                        //   in Loop: Header=BB171_18 Depth=2
	lsr	x9, x8, #32
	stp	w8, w9, [x20, #8]
	orr	x9, x20, #0x8
	b	.LBB171_18
.LBB171_33:                             // %"$71"
                                        //   in Loop: Header=BB171_18 Depth=2
	ldp	w9, w10, [x8]
	bfi	x9, x10, #32, #32
	mov	x10, x8
	b	.LBB171_23
.LBB171_34:                             // %"$-1"
                                        //   in Loop: Header=BB171_10 Depth=1
	ldp	w1, w8, [x28]
	bfi	x1, x8, #32, #32
	tst	x1, #0x6
	b.ne	.LBB171_38
// %bb.35:                              // %"$74"
                                        //   in Loop: Header=BB171_10 Depth=1
	tbz	w1, #3, .LBB171_37
// %bb.36:                              // %"$77"
                                        //   in Loop: Header=BB171_10 Depth=1
	ldp	w1, w8, [x1]
	bfi	x1, x8, #32, #32
	b	.LBB171_38
.LBB171_37:                             // %"$76"
                                        //   in Loop: Header=BB171_10 Depth=1
	mov	x0, x1
	bl	evList
	mov	x1, x0
.LBB171_38:                             // %"$73"
                                        //   in Loop: Header=BB171_10 Depth=1
	mov	x0, x20
	bl	setDestruct
	b	.LBB171_9
.LBB171_39:                             // %"$81"
                                        //   in Loop: Header=BB171_41 Depth=1
	tst	x0, #0xf
	b.ne	.LBB171_41
// %bb.40:                              // %"$90"
                                        //   in Loop: Header=BB171_41 Depth=1
	bl	evList
.LBB171_41:                             // %"$80"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w0, w8, [x24]
	bfi	x0, x8, #32, #32
	ldp	w24, w8, [x24, #8]
	bfi	x24, x8, #32, #32
	tst	x24, #0xf
	b.eq	.LBB171_39
// %bb.42:                              // %"$83"
	tst	x0, #0x6
	b.ne	.LBB171_56
// %bb.43:                              // %"$85"
	tbz	w0, #3, .LBB171_55
// %bb.44:                              // %"$88"
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB171_56
.LBB171_45:                             // %"$14"
	bl	evList
.LBB171_46:                             // %"$11"
	lsr	x8, x0, #32
	stp	w0, w8, [x20]
.LBB171_47:                             // %"$16"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w0, w8, [x21]
	bfi	x0, x8, #32, #32
	ldp	w21, w8, [x21, #8]
	bfi	x21, x8, #32, #32
	tst	x21, #0xf
	b.ne	.LBB171_50
// %bb.48:                              // %"$17"
                                        //   in Loop: Header=BB171_47 Depth=1
	tst	x0, #0xf
	b.ne	.LBB171_47
// %bb.49:                              // %"$26"
                                        //   in Loop: Header=BB171_47 Depth=1
	bl	evList
	b	.LBB171_47
.LBB171_50:                             // %"$19"
	tst	x0, #0x6
	b.ne	.LBB171_54
// %bb.51:                              // %"$21"
	tbz	w0, #3, .LBB171_53
// %bb.52:                              // %"$24"
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB171_54
.LBB171_53:                             // %"$23"
	bl	evList
.LBB171_54:                             // %"$18"
	ldp	w8, w9, [x19]
	stp	w8, w9, [x20]
	ldp	w25, w8, [x19, #16]
	bfi	x25, x8, #32, #32
	b	.LBB171_57
.LBB171_55:                             // %"$87"
	bl	evList
.LBB171_56:                             // %"$91"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w9, w8, [x25, #8]
	bfi	x9, x8, #32, #32
	ldp	w8, w10, [x25]
	stp	w8, w10, [x9]
	ldp	w25, w8, [x25, #16]
	bfi	x25, x8, #32, #32
	cmp	x23, x25
	b.ne	.LBB171_56
.LBB171_57:                             // %"$4"
	str	x25, [x22, :lo12:env+8]
	mov	sp, x29
	ldp	x20, x19, [sp, #80]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #64]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #48]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #32]             // 16-byte Folded Reload
	ldp	x28, x27, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #96             // 16-byte Folded Reload
	ret
.LBB171_58:                             // %"$31"
	mov	x0, x19
	mov	x1, x21
	bl	varErr
.LBB171_59:                             // %"$35"
	mov	x0, x19
	mov	x1, x21
	bl	protErr
.LBB171_60:                             // %"$48"
	mov	x0, x19
	bl	varErr
.LBB171_61:                             // %"$52"
	mov	x0, x19
	bl	protErr
.LBB171_62:                             // %"$5"
	mov	x0, x19
	mov	x1, x20
	bl	varErr
.LBB171_63:                             // %"$9"
	mov	x0, x19
	mov	x1, x20
	bl	protErr
.Lfunc_end171:
	.size	_let, .Lfunc_end171-_let
	.cfi_endproc
                                        // -- End function
	.globl	_letQ                           // -- Begin function _letQ
	.p2align	4
	.type	_letQ,@function
_letQ:                                  // @_letQ
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-48]!           // 16-byte Folded Spill
	stp	x22, x21, [sp, #16]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #32]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 48
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w30, -40
	.cfi_offset w29, -48
	ldp	w8, w9, [x0, #8]
	bfi	x8, x9, #32, #32
	ldp	w19, w9, [x8]
	bfi	x19, x9, #32, #32
	tst	x19, #0x6
	b.ne	.LBB172_17
// %bb.1:                               // %"$3"
	adrp	x20, SymTab+8
	add	x20, x20, :lo12:SymTab+8
	add	x9, x20, #208                   // =208
	cmp	x9, x19
	ccmp	x19, x20, #0, hs
	b.hs	.LBB172_18
// %bb.2:                               // %"$7"
	ldp	w22, w9, [x8, #8]
	bfi	x22, x9, #32, #32
	ldp	w0, w8, [x22]
	bfi	x0, x8, #32, #32
	tst	x0, #0x6
	b.ne	.LBB172_5
// %bb.3:                               // %"$9"
	tbz	w0, #3, .LBB172_13
// %bb.4:                               // %"$12"
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
.LBB172_5:                              // %"$8"
	cmp	x0, x20
	b.eq	.LBB172_16
.LBB172_6:                              // %"$14"
	ldp	w8, w9, [x19]
	adrp	x20, env+8
	ldr	x10, [x20, :lo12:env+8]
	mov	x11, sp
	sub	x21, x11, #32                   // =32
	mov	sp, x21
	stp	w8, w9, [x11, #-32]
	lsr	x8, x19, #32
	stp	w19, w8, [x11, #-24]
	lsr	x8, x10, #32
	stp	w10, w8, [x11, #-16]
	lsr	x8, x0, #32
	str	x21, [x20, :lo12:env+8]
	stp	w0, w8, [x19]
	ldp	w22, w8, [x22, #8]
	bfi	x22, x8, #32, #32
.LBB172_7:                              // %"$16"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w0, w8, [x22]
	bfi	x0, x8, #32, #32
	ldp	w22, w8, [x22, #8]
	bfi	x22, x8, #32, #32
	tst	x22, #0xf
	b.ne	.LBB172_10
// %bb.8:                               // %"$17"
                                        //   in Loop: Header=BB172_7 Depth=1
	tst	x0, #0xf
	b.ne	.LBB172_7
// %bb.9:                               // %"$26"
                                        //   in Loop: Header=BB172_7 Depth=1
	bl	evList
	b	.LBB172_7
.LBB172_10:                             // %"$19"
	tst	x0, #0x6
	b.ne	.LBB172_15
// %bb.11:                              // %"$21"
	tbz	w0, #3, .LBB172_14
// %bb.12:                              // %"$24"
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB172_15
.LBB172_13:                             // %"$11"
	bl	evList
	cmp	x0, x20
	b.ne	.LBB172_6
	b	.LBB172_16
.LBB172_14:                             // %"$23"
	bl	evList
.LBB172_15:                             // %"$18"
	ldp	w8, w9, [x21]
	stp	w8, w9, [x19]
	ldp	w9, w8, [x21, #16]
	bfi	x9, x8, #32, #32
	str	x9, [x20, :lo12:env+8]
.LBB172_16:                             // %"$15"
	mov	sp, x29
	ldp	x20, x19, [sp, #32]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #48             // 16-byte Folded Reload
	ret
.LBB172_17:                             // %"$2"
	mov	x1, x19
	bl	varErr
.LBB172_18:                             // %"$6"
	mov	x1, x19
	bl	protErr
.Lfunc_end172:
	.size	_letQ, .Lfunc_end172-_letQ
	.cfi_endproc
                                        // -- End function
	.globl	_use                            // -- Begin function _use
	.p2align	4
	.type	_use,@function
_use:                                   // @_use
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-64]!           // 16-byte Folded Spill
	str	x23, [sp, #16]                  // 8-byte Folded Spill
	stp	x22, x21, [sp, #32]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #48]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 64
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -48
	.cfi_offset w30, -56
	.cfi_offset w29, -64
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w20, w8, [x9]
	bfi	x20, x8, #32, #32
	ldp	w21, w8, [x9, #8]
	bfi	x21, x8, #32, #32
	tst	x20, #0xf
	adrp	x19, env+8
	b.eq	.LBB173_8
// %bb.1:                               // %"$2"
	ldp	w8, w9, [x20]
	ldr	x10, [x19, :lo12:env+8]
	mov	x11, sp
	sub	x22, x11, #32                   // =32
	mov	sp, x22
	stp	w8, w9, [x11, #-32]
	lsr	x8, x20, #32
	stp	w20, w8, [x11, #-24]
	lsr	x8, x10, #32
	stp	w10, w8, [x11, #-16]
	str	x22, [x19, :lo12:env+8]
.LBB173_2:                              // %"$5"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w0, w8, [x21]
	bfi	x0, x8, #32, #32
	ldp	w21, w8, [x21, #8]
	bfi	x21, x8, #32, #32
	tst	x21, #0xf
	b.ne	.LBB173_5
// %bb.3:                               // %"$6"
                                        //   in Loop: Header=BB173_2 Depth=1
	tst	x0, #0xf
	b.ne	.LBB173_2
// %bb.4:                               // %"$15"
                                        //   in Loop: Header=BB173_2 Depth=1
	bl	evList
	b	.LBB173_2
.LBB173_5:                              // %"$8"
	tst	x0, #0x6
	b.ne	.LBB173_17
// %bb.6:                               // %"$10"
	tbz	w0, #3, .LBB173_16
// %bb.7:                               // %"$13"
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB173_17
.LBB173_8:                              // %"$3"
	ldr	x22, [x19, :lo12:env+8]
	mov	x8, x22
.LBB173_9:                              // %"$16"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w10, w9, [x20]
	mov	x11, x10
	bfi	x11, x9, #32, #32
	ldp	w12, w11, [x11]
	mov	x13, sp
	sub	x23, x13, #32                   // =32
	mov	sp, x23
	stp	w12, w11, [x13, #-32]
	stp	w10, w9, [x13, #-24]
	lsr	x9, x8, #32
	stp	w8, w9, [x13, #-16]
	str	x23, [x19, :lo12:env+8]
	ldp	w20, w8, [x20, #8]
	bfi	x20, x8, #32, #32
	tst	x20, #0xf
	mov	x8, x23
	b.eq	.LBB173_9
	b	.LBB173_12
.LBB173_10:                             // %"$20"
                                        //   in Loop: Header=BB173_12 Depth=1
	tst	x0, #0xf
	b.ne	.LBB173_12
// %bb.11:                              // %"$29"
                                        //   in Loop: Header=BB173_12 Depth=1
	bl	evList
.LBB173_12:                             // %"$19"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w0, w8, [x21]
	bfi	x0, x8, #32, #32
	ldp	w21, w8, [x21, #8]
	bfi	x21, x8, #32, #32
	tst	x21, #0xf
	b.eq	.LBB173_10
// %bb.13:                              // %"$22"
	tst	x0, #0x6
	b.ne	.LBB173_19
// %bb.14:                              // %"$24"
	tbz	w0, #3, .LBB173_18
// %bb.15:                              // %"$27"
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB173_19
.LBB173_16:                             // %"$12"
	bl	evList
.LBB173_17:                             // %"$7"
	ldp	w8, w9, [x22]
	stp	w8, w9, [x20]
	ldp	w23, w8, [x22, #16]
	bfi	x23, x8, #32, #32
	b	.LBB173_20
.LBB173_18:                             // %"$26"
	bl	evList
.LBB173_19:                             // %"$30"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w9, w8, [x23, #8]
	bfi	x9, x8, #32, #32
	ldp	w8, w10, [x23]
	stp	w8, w10, [x9]
	ldp	w23, w8, [x23, #16]
	bfi	x23, x8, #32, #32
	cmp	x22, x23
	b.ne	.LBB173_19
.LBB173_20:                             // %"$4"
	str	x23, [x19, :lo12:env+8]
	mov	sp, x29
	ldp	x20, x19, [sp, #48]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #32]             // 16-byte Folded Reload
	ldr	x23, [sp, #16]                  // 8-byte Folded Reload
	ldp	x29, x30, [sp], #64             // 16-byte Folded Reload
	ret
.Lfunc_end173:
	.size	_use, .Lfunc_end173-_use
	.cfi_endproc
                                        // -- End function
	.globl	_buf                            // -- Begin function _buf
	.p2align	4
	.type	_buf,@function
_buf:                                   // @_buf
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-48]!           // 16-byte Folded Spill
	stp	x22, x21, [sp, #16]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #32]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 48
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w30, -40
	.cfi_offset w29, -48
	mov	x20, x0
	ldp	w8, w9, [x0, #8]
	bfi	x8, x9, #32, #32
	ldp	w19, w9, [x8]
	bfi	x19, x9, #32, #32
	tst	x19, #0x6
	b.ne	.LBB174_19
// %bb.1:                               // %"$3"
	adrp	x9, SymTab+8
	add	x9, x9, :lo12:SymTab+8
	add	x10, x9, #208                   // =208
	cmp	x10, x19
	ccmp	x19, x9, #0, hs
	b.hs	.LBB174_20
// %bb.2:                               // %"$7"
	ldp	w8, w9, [x8, #8]
	bfi	x8, x9, #32, #32
	ldp	w1, w9, [x8]
	bfi	x1, x9, #32, #32
	ldp	w21, w22, [x8, #8]
	tst	x1, #0x6
	b.ne	.LBB174_6
// %bb.3:                               // %"$9"
	tbz	w1, #3, .LBB174_5
// %bb.4:                               // %"$12"
	ldp	w1, w8, [x1]
	bfi	x1, x8, #32, #32
	b	.LBB174_6
.LBB174_5:                              // %"$11"
	mov	x0, x1
	bl	evList
	mov	x1, x0
.LBB174_6:                              // %"$8"
	tbz	w1, #1, .LBB174_21
// %bb.7:                               // %"$14"
	bfi	x21, x22, #32, #32
	ldp	w8, w9, [x19]
	adrp	x20, env+8
	ldr	x10, [x20, :lo12:env+8]
	mov	x11, sp
	sub	x22, x11, #32                   // =32
	mov	sp, x22
	stp	w8, w9, [x11, #-32]
	lsr	x8, x19, #32
	stp	w19, w8, [x11, #-24]
	lsr	x8, x10, #32
	stp	w10, w8, [x11, #-16]
	lsr	x8, x1, #4
	str	x22, [x20, :lo12:env+8]
	mov	x9, sp
	add	x8, x8, #15                     // =15
	and	x8, x8, #0x1ffffffffffffff0
	sub	x8, x9, x8
	mov	sp, x8
	tst	x8, #0xf000000000000000
	b.eq	.LBB174_9
// %bb.8:                               // %"$15"
	mov	x0, x8
	bl	boxNum
	b	.LBB174_10
.LBB174_9:                              // %"$16"
	mov	w0, #2
	bfi	x0, x8, #4, #60
.LBB174_10:                             // %"$17"
	lsr	x8, x0, #32
	stp	w0, w8, [x19]
.LBB174_11:                             // %"$18"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w0, w8, [x21]
	bfi	x0, x8, #32, #32
	ldp	w21, w8, [x21, #8]
	bfi	x21, x8, #32, #32
	tst	x21, #0xf
	b.ne	.LBB174_14
// %bb.12:                              // %"$19"
                                        //   in Loop: Header=BB174_11 Depth=1
	tst	x0, #0xf
	b.ne	.LBB174_11
// %bb.13:                              // %"$28"
                                        //   in Loop: Header=BB174_11 Depth=1
	bl	evList
	b	.LBB174_11
.LBB174_14:                             // %"$21"
	tst	x0, #0x6
	b.ne	.LBB174_18
// %bb.15:                              // %"$23"
	tbz	w0, #3, .LBB174_17
// %bb.16:                              // %"$26"
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB174_18
.LBB174_17:                             // %"$25"
	bl	evList
.LBB174_18:                             // %"$20"
	ldp	w8, w9, [x22]
	stp	w8, w9, [x19]
	ldp	w9, w8, [x22, #16]
	bfi	x9, x8, #32, #32
	str	x9, [x20, :lo12:env+8]
	mov	sp, x29
	ldp	x20, x19, [sp, #32]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #48             // 16-byte Folded Reload
	ret
.LBB174_19:                             // %"$2"
	mov	x0, x20
	mov	x1, x19
	bl	varErr
.LBB174_20:                             // %"$6"
	mov	x0, x20
	mov	x1, x19
	bl	protErr
.LBB174_21:                             // %"$13"
	mov	x0, x20
	bl	cntErr
.Lfunc_end174:
	.size	_buf, .Lfunc_end174-_buf
	.cfi_endproc
                                        // -- End function
	.globl	_catch                          // -- Begin function _catch
	.p2align	4
	.type	_catch,@function
_catch:                                 // @_catch
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-48]!           // 16-byte Folded Spill
	str	x21, [sp, #16]                  // 8-byte Folded Spill
	stp	x20, x19, [sp, #32]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 48
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -32
	.cfi_offset w30, -40
	.cfi_offset w29, -48
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	adrp	x8, ($JmpBufSize)
	ldr	x8, [x8, :lo12:($JmpBufSize)]
	mov	x10, sp
	add	x8, x8, #191                    // =191
	and	x8, x8, #0xfffffffffffffff0
	sub	x19, x10, x8
	mov	sp, x19
	ldp	w0, w8, [x9]
	bfi	x0, x8, #32, #32
	ldp	w20, w21, [x9, #8]
	tst	x0, #0x6
	b.ne	.LBB175_4
// %bb.1:                               // %"$3"
	tbz	w0, #3, .LBB175_3
// %bb.2:                               // %"$6"
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB175_4
.LBB175_3:                              // %"$5"
	bl	evList
.LBB175_4:                              // %"$2"
	lsr	x8, x0, #32
	adrp	x1, env
	add	x1, x1, :lo12:env
	mov	w9, #2
	stp	w0, w8, [x19, #8]
	ldr	x8, [x1, #24]
	str	x19, [x1, #24]
	str	x8, [x19]
	stp	w9, wzr, [x19, #16]
	add	x0, x19, #24                    // =24
	mov	w2, #152
	bl	memcpy2
	add	x0, x19, #176                   // =176
	bl	setjmp
	cbz	w0, .LBB175_6
// %bb.5:                               // %"$7"
	adrp	x8, ($Ret)
	ldr	x0, [x8, :lo12:($Ret)]
	b	.LBB175_14
.LBB175_6:                              // %"$8"
	bfi	x20, x21, #32, #32
.LBB175_7:                              // %"$10"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w0, w8, [x20]
	bfi	x0, x8, #32, #32
	ldp	w20, w8, [x20, #8]
	bfi	x20, x8, #32, #32
	tst	x20, #0xf
	b.ne	.LBB175_10
// %bb.8:                               // %"$11"
                                        //   in Loop: Header=BB175_7 Depth=1
	tst	x0, #0xf
	b.ne	.LBB175_7
// %bb.9:                               // %"$20"
                                        //   in Loop: Header=BB175_7 Depth=1
	bl	evList
	b	.LBB175_7
.LBB175_10:                             // %"$13"
	tst	x0, #0x6
	b.ne	.LBB175_14
// %bb.11:                              // %"$15"
	tbz	w0, #3, .LBB175_13
// %bb.12:                              // %"$18"
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB175_14
.LBB175_13:                             // %"$17"
	bl	evList
.LBB175_14:                             // %"$9"
	ldr	x8, [x19]
	adrp	x9, env+24
	str	x8, [x9, :lo12:env+24]
	mov	sp, x29
	ldp	x20, x19, [sp, #32]             // 16-byte Folded Reload
	ldr	x21, [sp, #16]                  // 8-byte Folded Reload
	ldp	x29, x30, [sp], #48             // 16-byte Folded Reload
	ret
.Lfunc_end175:
	.size	_catch, .Lfunc_end175-_catch
	.cfi_endproc
                                        // -- End function
	.globl	_throw                          // -- Begin function _throw
	.p2align	4
	.type	_throw,@function
_throw:                                 // @_throw
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-48]!           // 16-byte Folded Spill
	stp	x22, x21, [sp, #16]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #32]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 48
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w30, -40
	.cfi_offset w29, -48
	mov	x19, x0
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w20, w8, [x9]
	bfi	x20, x8, #32, #32
	ldp	w21, w8, [x9, #8]
	bfi	x21, x8, #32, #32
	tst	x20, #0x6
	b.ne	.LBB176_4
// %bb.1:                               // %"$3"
	tbz	w20, #3, .LBB176_3
// %bb.2:                               // %"$6"
	ldp	w20, w8, [x20]
	bfi	x20, x8, #32, #32
	b	.LBB176_4
.LBB176_3:                              // %"$5"
	mov	x0, x20
	bl	evList
	mov	x20, x0
.LBB176_4:                              // %"$2"
	adrp	x8, env
	ldr	x9, [x8, :lo12:env]
	mov	x10, sp
	sub	x11, x10, #16                   // =16
	mov	sp, x11
	lsr	x12, x20, #32
	stp	w20, w12, [x10, #-16]
	lsr	x12, x9, #32
	stp	w9, w12, [x10, #-8]
	str	x11, [x8, :lo12:env]
	ldp	w21, w8, [x21]
	bfi	x21, x8, #32, #32
	tst	x21, #0x6
	b.ne	.LBB176_8
// %bb.5:                               // %"$8"
	tbz	w21, #3, .LBB176_7
// %bb.6:                               // %"$11"
	ldp	w21, w8, [x21]
	bfi	x21, x8, #32, #32
	b	.LBB176_8
.LBB176_7:                              // %"$10"
	mov	x0, x21
	bl	evList
	mov	x21, x0
.LBB176_8:                              // %"$7"
	adrp	x22, env
	add	x22, x22, :lo12:env
	ldr	x9, [x22]
	mov	x10, sp
	sub	x11, x10, #16                   // =16
	mov	sp, x11
	adrp	x8, SymTab+216
	add	x8, x8, :lo12:SymTab+216
	lsr	x12, x21, #32
	stp	w21, w12, [x10, #-16]
	lsr	x12, x9, #32
	stp	w9, w12, [x10, #-8]
	str	x11, [x22], #24
	b	.LBB176_10
.LBB176_9:                              // %"$16"
                                        //   in Loop: Header=BB176_10 Depth=1
	ldp	w10, w9, [x22, #8]
	bfi	x10, x9, #32, #32
	cmp	x20, x10
	cset	w9, eq
	cbnz	w9, .LBB176_13
.LBB176_10:                             // %"$12"
                                        // =>This Inner Loop Header: Depth=1
	ldr	x22, [x22]
	cbz	x22, .LBB176_14
// %bb.11:                              // %"$13"
                                        //   in Loop: Header=BB176_10 Depth=1
	ldp	w10, w9, [x22, #8]
	bfi	x10, x9, #32, #32
	cmp	x10, x8
	b.ne	.LBB176_9
// %bb.12:                              //   in Loop: Header=BB176_10 Depth=1
	mov	w9, #1
	cbz	w9, .LBB176_10
.LBB176_13:                             // %"$17"
	mov	x0, x22
	bl	unwind
	adrp	x8, ($Ret)
	str	x21, [x8, :lo12:($Ret)]
	add	x0, x22, #176                   // =176
	mov	w1, #1
	bl	longjmp
.LBB176_14:                             // %"$14"
	adrp	x2, .L$184
	add	x2, x2, :lo12:.L$184
	mov	x0, x19
	mov	x1, x20
	mov	x3, xzr
	bl	err
.Lfunc_end176:
	.size	_throw, .Lfunc_end176-_throw
	.cfi_endproc
                                        // -- End function
	.globl	_finally                        // -- Begin function _finally
	.p2align	4
	.type	_finally,@function
_finally:                               // @_finally
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-48]!           // 16-byte Folded Spill
	stp	x22, x21, [sp, #16]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #32]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 48
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w30, -40
	.cfi_offset w29, -48
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	adrp	x8, ($JmpBufSize)
	ldr	x8, [x8, :lo12:($JmpBufSize)]
	mov	x10, sp
	add	x8, x8, #191                    // =191
	and	x8, x8, #0xfffffffffffffff0
	sub	x21, x10, x8
	mov	sp, x21
	adrp	x19, env
	add	x19, x19, :lo12:env
	stp	wzr, wzr, [x21, #8]
	ldr	x8, [x19, #24]
	str	x8, [x21]
	str	x21, [x19, #24]
	ldp	w8, w10, [x9]
	ldp	w22, w11, [x9, #8]
	bfi	x22, x11, #32, #32
	stp	w8, w10, [x21, #16]
	add	x0, x21, #24                    // =24
	mov	x1, x19
	mov	w2, #152
	bl	memcpy2
.LBB177_1:                              // %"$2"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w20, w8, [x22]
	bfi	x20, x8, #32, #32
	ldp	w22, w8, [x22, #8]
	bfi	x22, x8, #32, #32
	tst	x22, #0xf
	b.ne	.LBB177_4
// %bb.2:                               // %"$3"
                                        //   in Loop: Header=BB177_1 Depth=1
	tst	x20, #0xf
	b.ne	.LBB177_1
// %bb.3:                               // %"$12"
                                        //   in Loop: Header=BB177_1 Depth=1
	mov	x0, x20
	bl	evList
	b	.LBB177_1
.LBB177_4:                              // %"$5"
	tst	x20, #0x6
	b.ne	.LBB177_8
// %bb.5:                               // %"$7"
	tbz	w20, #3, .LBB177_7
// %bb.6:                               // %"$10"
	ldp	w20, w8, [x20]
	bfi	x20, x8, #32, #32
	b	.LBB177_8
.LBB177_7:                              // %"$9"
	mov	x0, x20
	bl	evList
	mov	x20, x0
.LBB177_8:                              // %"$4"
	adrp	x8, env
	ldr	x9, [x8, :lo12:env]
	mov	x10, sp
	sub	x22, x10, #16                   // =16
	mov	sp, x22
	lsr	x11, x20, #32
	stp	w20, w11, [x10, #-16]
	lsr	x11, x9, #32
	stp	w9, w11, [x10, #-8]
	str	x22, [x8, :lo12:env]
	ldp	w0, w8, [x21, #16]
	bfi	x0, x8, #32, #32
	tst	x0, #0x6
	b.ne	.LBB177_11
// %bb.9:                               // %"$14"
	tbnz	w0, #3, .LBB177_11
// %bb.10:                              // %"$16"
	bl	evList
.LBB177_11:                             // %"$13"
	ldr	x8, [x21]
	str	x8, [x19, #24]
	ldp	w9, w8, [x22, #8]
	bfi	x9, x8, #32, #32
	str	x9, [x19]
	mov	x0, x20
	mov	sp, x29
	ldp	x20, x19, [sp, #32]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #48             // 16-byte Folded Reload
	ret
.Lfunc_end177:
	.size	_finally, .Lfunc_end177-_finally
	.cfi_endproc
                                        // -- End function
	.globl	_co                             // -- Begin function _co
	.p2align	4
	.type	_co,@function
_co:                                    // @_co
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-80]!           // 16-byte Folded Spill
	str	x25, [sp, #16]                  // 8-byte Folded Spill
	stp	x24, x23, [sp, #32]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #48]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #64]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 80
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -64
	.cfi_offset w30, -72
	.cfi_offset w29, -80
	mov	x19, x0
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w20, w8, [x9]
	bfi	x20, x8, #32, #32
	ldp	w23, w8, [x9, #8]
	bfi	x23, x8, #32, #32
	tst	x20, #0x6
	b.ne	.LBB178_3
// %bb.1:                               // %"$3"
	tbz	w20, #3, .LBB178_11
// %bb.2:                               // %"$6"
	ldp	w20, w8, [x20]
	bfi	x20, x8, #32, #32
.LBB178_3:                              // %"$2"
	tst	x23, #0xf
	b.eq	.LBB178_12
.LBB178_4:                              // %"$8"
	adrp	x8, SymTab+216
	add	x8, x8, :lo12:SymTab+216
	cmp	x20, x8
	b.eq	.LBB178_26
// %bb.5:                               // %"$40"
	adrp	x8, env+40
	ldr	x0, [x8, :lo12:env+40]
	cbz	x0, .LBB178_8
.LBB178_6:                              // %"$44"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w9, w8, [x0]
	bfi	x9, x8, #32, #32
	cmp	x20, x9
	b.eq	.LBB178_9
// %bb.7:                               // %"$45"
                                        //   in Loop: Header=BB178_6 Depth=1
	ldr	x0, [x0, #16]
	cbnz	x0, .LBB178_6
	b	.LBB178_10
.LBB178_8:
	adrp	x20, SymTab+8
	add	x20, x20, :lo12:SymTab+8
	b	.LBB178_10
.LBB178_9:                              // %"$47"
	bl	stop
.LBB178_10:                             // %"$7"
	mov	x0, x20
	b	.LBB178_25
.LBB178_11:                             // %"$5"
	mov	x0, x20
	bl	evList
	mov	x20, x0
	tst	x23, #0xf
	b.ne	.LBB178_4
.LBB178_12:                             // %"$9"
	adrp	x8, env+40
	ldr	x8, [x8, :lo12:env+40]
	adrp	x21, env+32
	add	x21, x21, :lo12:env+32
	cbnz	x8, .LBB178_14
// %bb.13:                              // %"$10"
	adrp	x8, ($JmpBufSize)
	ldr	x8, [x8, :lo12:($JmpBufSize)]
	add	x1, x8, #264                    // =264
	mov	x0, xzr
	bl	alloc
	mov	x8, sp
	stp	xzr, xzr, [x0, #8]
	adrp	x9, SymTab+8
	add	x9, x9, :lo12:SymTab+8
	adrp	x10, ($StkSize)
	str	xzr, [x0, #24]
	add	x11, x9, #208                   // =208
	lsr	x12, x9, #32
	stp	w9, w12, [x0, #32]
	lsr	x9, x11, #32
	stp	w11, w9, [x0]
	ldr	x9, [x10, :lo12:($StkSize)]
	sub	x8, x8, x9, lsl #2
	str	x8, [x0, #40]
	stp	wzr, wzr, [x0, #48]
	stp	x0, x0, [x21]
.LBB178_14:                             // %"$11"
	ldp	x22, x25, [x21]
	mov	x0, x22
	bl	saveCoEnv
	mov	x21, xzr
	b	.LBB178_16
.LBB178_15:                             // %"$19"
                                        //   in Loop: Header=BB178_16 Depth=1
	ldr	x25, [x24, #16]
	cbz	x25, .LBB178_23
.LBB178_16:                             // %"$12"
                                        // =>This Inner Loop Header: Depth=1
	mov	x24, x25
	ldp	w9, w8, [x25]
	bfi	x9, x8, #32, #32
	cmp	x20, x9
	b.eq	.LBB178_20
// %bb.17:                              // %"$14"
                                        //   in Loop: Header=BB178_16 Depth=1
	cbnz	x21, .LBB178_15
// %bb.18:                              // %"$20"
                                        //   in Loop: Header=BB178_16 Depth=1
	ldp	w9, w8, [x24]
	bfi	x9, x8, #32, #32
	cbnz	x9, .LBB178_15
// %bb.19:                              // %"$21"
                                        //   in Loop: Header=BB178_16 Depth=1
	mov	x21, x24
	b	.LBB178_15
.LBB178_20:                             // %"$13"
	ldp	w9, w8, [x24, #48]
	bfi	x9, x8, #32, #32
	cbz	x9, .LBB178_27
// %bb.21:                              // %"$16"
	add	x0, x22, #264                   // =264
	bl	setjmp
	cbnz	w0, .LBB178_24
// %bb.22:                              // %"$18"
	adrp	x8, SymTab+8
	add	x8, x8, :lo12:SymTab+8
	adrp	x9, ($Ret)
	str	x8, [x9, :lo12:($Ret)]
	add	x0, x24, #264                   // =264
	mov	w1, #1
	bl	longjmp
.LBB178_23:                             // %"$23"
	add	x0, x22, #264                   // =264
	bl	setjmp
	cbz	w0, .LBB178_28
.LBB178_24:                             // %"$17"
	mov	x0, x22
	bl	loadCoEnv
.LBB178_25:                             // %"$7"
	mov	sp, x29
	ldp	x20, x19, [sp, #64]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #48]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #32]             // 16-byte Folded Reload
	ldr	x25, [sp, #16]                  // 8-byte Folded Reload
	ldp	x29, x30, [sp], #80             // 16-byte Folded Reload
	ret
.LBB178_26:                             // %"$41"
	adrp	x2, .L$186
	add	x2, x2, :lo12:.L$186
	mov	x0, x19
	mov	x1, xzr
	mov	x3, xzr
	bl	err
.LBB178_27:                             // %"$15"
	mov	x0, x19
	mov	x1, x20
	bl	reentErr
.LBB178_28:                             // %"$25"
	cbz	x21, .LBB178_30
// %bb.29:                              // %"$26"
	mov	sp, x21
	b	.LBB178_31
.LBB178_30:                             // %"$27"
	ldr	x8, [x24, #40]
	mov	sp, x8
	adrp	x8, ($JmpBufSize)
	ldr	x8, [x8, :lo12:($JmpBufSize)]
	mov	x9, sp
	add	x8, x8, #279                    // =279
	and	x8, x8, #0xfffffffffffffff0
	sub	x21, x9, x8
	mov	sp, x21
	str	x21, [x24, #16]
	stp	x24, xzr, [x21, #8]
.LBB178_31:                             // %"$28"
	lsr	x8, x20, #32
	stp	w20, w8, [x21]
	adrp	x20, env
	add	x20, x20, :lo12:env
	ldr	x8, [x20, #32]
	str	x8, [x21, #24]
	lsr	x8, x23, #32
	stp	w23, w8, [x21, #32]
	adrp	x8, ($StkSize)
	ldr	x8, [x8, :lo12:($StkSize)]
	sub	x8, x21, x8
	str	x8, [x21, #40]
	stp	wzr, wzr, [x21, #48]
	ldr	x8, [x20]
	lsr	x9, x8, #32
	stp	w8, w9, [x21, #56]
	ldr	x8, [x20, #8]
	mov	x9, sp
	sub	x10, x9, #32                    // =32
	mov	sp, x10
	mov	w11, #2
	stp	w11, wzr, [x9, #-32]
	adrp	x22, SymTab+8
	add	x22, x22, :lo12:SymTab+8
	add	x11, x22, #368                  // =368
	lsr	x12, x11, #32
	stp	w11, w12, [x9, #-24]
	lsr	x11, x8, #32
	stp	w8, w11, [x9, #-16]
	lsr	x8, x19, #32
	stp	w19, w8, [x9, #-8]
	str	x10, [x20, #8]
	lsr	x8, x10, #32
	stp	w10, w8, [x21, #64]
	ldr	x8, [x20, #24]
	str	x8, [x21, #72]
	ldr	x8, [x20, #48]
	str	x8, [x21, #80]
	ldr	x8, [x20, #56]
	str	x8, [x21, #88]
	ldr	x8, [x20, #64]
	str	x8, [x21, #96]
	ldr	x8, [x20, #72]
	str	x8, [x21, #104]
	add	x0, x21, #112                   // =112
	mov	x1, x20
	mov	w2, #152
	bl	memcpy2
	str	x22, [x20, #96]
	stp	xzr, xzr, [x20, #120]
	str	x21, [x20, #32]
	ldr	x8, [x21, #40]
	add	x8, x8, #1, lsl #12             // =4096
	adrp	x9, ($StkLimit)
	str	x8, [x9, :lo12:($StkLimit)]
.LBB178_32:                             // %"$29"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w0, w8, [x23]
	bfi	x0, x8, #32, #32
	ldp	w23, w8, [x23, #8]
	bfi	x23, x8, #32, #32
	tst	x23, #0xf
	b.ne	.LBB178_35
// %bb.33:                              // %"$30"
                                        //   in Loop: Header=BB178_32 Depth=1
	tst	x0, #0xf
	b.ne	.LBB178_32
// %bb.34:                              // %"$39"
                                        //   in Loop: Header=BB178_32 Depth=1
	bl	evList
	b	.LBB178_32
.LBB178_35:                             // %"$32"
	tst	x0, #0x6
	b.ne	.LBB178_39
// %bb.36:                              // %"$34"
	tbz	w0, #3, .LBB178_38
// %bb.37:                              // %"$37"
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB178_39
.LBB178_38:                             // %"$36"
	bl	evList
.LBB178_39:                             // %"$31"
	adrp	x8, ($Ret)
	str	x0, [x8, :lo12:($Ret)]
	mov	x0, x21
	bl	stop
	ldr	x8, [x21, #24]
	add	x0, x8, #264                    // =264
	mov	w1, #1
	bl	longjmp
.Lfunc_end178:
	.size	_co, .Lfunc_end178-_co
	.cfi_endproc
                                        // -- End function
	.globl	_yield                          // -- Begin function _yield
	.p2align	4
	.type	_yield,@function
_yield:                                 // @_yield
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-96]!           // 16-byte Folded Spill
	stp	x28, x27, [sp, #16]             // 16-byte Folded Spill
	stp	x26, x25, [sp, #32]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #48]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #64]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #80]             // 16-byte Folded Spill
	mov	x29, sp
	sub	sp, sp, #16                     // =16
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	mov	x21, x0
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w24, w8, [x9]
	bfi	x24, x8, #32, #32
	ldp	w19, w8, [x9, #8]
	bfi	x19, x8, #32, #32
	tst	x24, #0x6
	b.ne	.LBB179_4
// %bb.1:                               // %"$3"
	tbz	w24, #3, .LBB179_3
// %bb.2:                               // %"$6"
	ldp	w24, w8, [x24]
	bfi	x24, x8, #32, #32
	b	.LBB179_4
.LBB179_3:                              // %"$5"
	mov	x0, x24
	bl	evList
	mov	x24, x0
.LBB179_4:                              // %"$2"
	adrp	x20, env
	ldr	x8, [x20, :lo12:env]
	mov	x9, sp
	sub	x23, x9, #16                    // =16
	mov	sp, x23
	lsr	x10, x24, #32
	stp	w24, w10, [x9, #-16]
	lsr	x10, x8, #32
	stp	w8, w10, [x9, #-8]
	str	x23, [x20, :lo12:env]
	ldp	w1, w8, [x19]
	bfi	x1, x8, #32, #32
	tst	x1, #0x6
	b.ne	.LBB179_8
// %bb.5:                               // %"$8"
	tbz	w1, #3, .LBB179_7
// %bb.6:                               // %"$11"
	ldp	w1, w8, [x1]
	bfi	x1, x8, #32, #32
	b	.LBB179_8
.LBB179_7:                              // %"$10"
	mov	x0, x1
	bl	evList
	mov	x1, x0
.LBB179_8:                              // %"$7"
	adrp	x8, env+40
	ldr	x22, [x8, :lo12:env+40]
	cbz	x22, .LBB179_60
// %bb.9:                               // %"$13"
	adrp	x8, env+32
	ldr	x19, [x8, :lo12:env+32]
	adrp	x8, SymTab+8
	add	x8, x8, :lo12:SymTab+8
	cmp	x1, x8
	b.ne	.LBB179_13
// %bb.10:                              // %"$15"
	ldr	x22, [x19, #24]
	cbnz	x22, .LBB179_15
// %bb.11:                              // %"$25"
	adrp	x2, .L$189
	add	x2, x2, :lo12:.L$189
	b	.LBB179_61
.LBB179_12:                             // %"$18"
                                        //   in Loop: Header=BB179_13 Depth=1
	ldr	x22, [x22, #16]
	cbz	x22, .LBB179_59
.LBB179_13:                             // %"$17"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w9, w8, [x22]
	bfi	x9, x8, #32, #32
	cmp	x1, x9
	b.ne	.LBB179_12
// %bb.14:                              // %"$20"
	ldp	w9, w8, [x22, #48]
	bfi	x9, x8, #32, #32
	cbz	x9, .LBB179_63
.LBB179_15:                             // %"$14"
	mov	x25, xzr
	adrp	x8, ($Stdin)
	ldr	x26, [x8, :lo12:($Stdin)]
	adrp	x27, ($Stdout)
	ldr	x28, [x27, :lo12:($Stdout)]
	ldp	w9, w8, [x19]
	bfi	x9, x8, #32, #32
	adrp	x8, SymTab+216
	add	x8, x8, :lo12:SymTab+216
	cmp	x9, x8
	stp	x24, x23, [x29, #-16]           // 16-byte Folded Spill
	b.ne	.LBB179_17
// %bb.16:
	mov	x21, x25
	mov	x24, x25
	mov	x23, x25
	mov	x20, x25
	b	.LBB179_39
.LBB179_17:                             // %"$27"
	mov	x21, xzr
	ldr	x8, [x20, :lo12:env]
.LBB179_18:                             // %"$29"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w10, w9, [x19, #56]
	bfi	x10, x9, #32, #32
	cmp	x8, x10
	b.eq	.LBB179_20
// %bb.19:                              // %"$30"
                                        //   in Loop: Header=BB179_18 Depth=1
	mov	x9, x8
	ldr	w10, [x9, #8]!
	ldr	w11, [x9, #4]
	bfi	x10, x11, #32, #32
	lsr	x11, x21, #32
	stp	w21, w11, [x9]
	mov	x21, x8
	mov	x8, x10
	b	.LBB179_18
.LBB179_20:                             // %"$31"
	mov	x24, xzr
	adrp	x8, env
	add	x8, x8, :lo12:env
	str	x21, [x8]
	ldr	x8, [x8, #8]
.LBB179_21:                             // %"$32"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w10, w9, [x19, #64]
	bfi	x10, x9, #32, #32
	cmp	x8, x10
	b.eq	.LBB179_23
// %bb.22:                              // %"$33"
                                        //   in Loop: Header=BB179_21 Depth=1
	ldp	w10, w9, [x8, #8]
	bfi	x10, x9, #32, #32
	ldp	w9, w11, [x10]
	ldp	w13, w12, [x8]
	stp	w13, w12, [x10]
	stp	w9, w11, [x8]
	mov	x9, x8
	ldr	w10, [x9, #16]!
	ldr	w11, [x9, #4]
	bfi	x10, x11, #32, #32
	lsr	x11, x24, #32
	stp	w24, w11, [x9]
	mov	x24, x8
	mov	x8, x10
	b	.LBB179_21
.LBB179_23:                             // %"$34"
	ldp	w9, w8, [x19, #64]
	bfi	x9, x8, #32, #32
	lsr	x8, x24, #32
	stp	w24, w8, [x9, #16]
	adrp	x8, env+8
	add	x8, x8, :lo12:env+8
	str	x9, [x8]
	ldr	x8, [x8, #16]
	mov	x23, x25
.LBB179_24:                             // %"$35"
                                        // =>This Inner Loop Header: Depth=1
	ldr	x9, [x19, #72]
	cmp	x8, x9
	b.eq	.LBB179_26
// %bb.25:                              // %"$36"
                                        //   in Loop: Header=BB179_24 Depth=1
	ldr	x9, [x8]
	str	x23, [x8]
	mov	x23, x8
	mov	x8, x9
	b	.LBB179_24
.LBB179_26:                             // %"$37"
	adrp	x8, env+24
	add	x8, x8, :lo12:env+24
	str	x23, [x8]
	ldr	x8, [x8, #24]
.LBB179_27:                             // %"$38"
                                        // =>This Inner Loop Header: Depth=1
	ldr	x9, [x19, #80]
	cmp	x8, x9
	b.eq	.LBB179_29
// %bb.28:                              // %"$39"
                                        //   in Loop: Header=BB179_27 Depth=1
	ldr	x9, [x8]
	str	x26, [x8]
	mov	x26, x8
	mov	x8, x9
	b	.LBB179_27
.LBB179_29:                             // %"$40"
	adrp	x8, env+48
	add	x8, x8, :lo12:env+48
	str	x26, [x8]
	ldr	x8, [x8, #8]
.LBB179_30:                             // %"$41"
                                        // =>This Inner Loop Header: Depth=1
	ldr	x9, [x19, #88]
	cmp	x8, x9
	b.eq	.LBB179_32
// %bb.31:                              // %"$42"
                                        //   in Loop: Header=BB179_30 Depth=1
	ldr	x9, [x8]
	str	x28, [x8]
	mov	x28, x8
	mov	x8, x9
	b	.LBB179_30
.LBB179_32:                             // %"$43"
	adrp	x8, env+56
	add	x8, x8, :lo12:env+56
	str	x28, [x8]
	ldr	x8, [x8, #8]
	mov	x20, x25
.LBB179_33:                             // %"$44"
                                        // =>This Inner Loop Header: Depth=1
	ldr	x9, [x19, #96]
	cmp	x8, x9
	b.eq	.LBB179_35
// %bb.34:                              // %"$45"
                                        //   in Loop: Header=BB179_33 Depth=1
	ldr	x9, [x8]
	str	x20, [x8]
	mov	x20, x8
	mov	x8, x9
	b	.LBB179_33
.LBB179_35:                             // %"$46"
	adrp	x8, env+64
	add	x8, x8, :lo12:env+64
	str	x20, [x8]
	ldr	x8, [x8, #8]
.LBB179_36:                             // %"$47"
                                        // =>This Inner Loop Header: Depth=1
	ldr	x9, [x19, #104]
	cmp	x8, x9
	b.eq	.LBB179_38
// %bb.37:                              // %"$48"
                                        //   in Loop: Header=BB179_36 Depth=1
	ldr	x9, [x8]
	str	x25, [x8]
	mov	x25, x8
	mov	x8, x9
	b	.LBB179_36
.LBB179_38:                             // %"$49"
	adrp	x8, env+72
	str	x25, [x8, :lo12:env+72]
.LBB179_39:                             // %"$28"
	mov	x0, x19
	bl	saveCoEnv
	add	x0, x19, #264                   // =264
	bl	setjmp
	cbz	w0, .LBB179_62
// %bb.40:                              // %"$51"
	ldp	w9, w8, [x19]
	bfi	x9, x8, #32, #32
	adrp	x8, SymTab+216
	add	x8, x8, :lo12:SymTab+216
	cmp	x9, x8
	b.eq	.LBB179_58
// %bb.41:                              // %"$52"
	adrp	x8, env+72
	ldr	x8, [x8, :lo12:env+72]
	add	x10, x19, #104                  // =104
	mov	x9, x8
	adrp	x12, ($Stdin)
	str	x8, [x10]
	cbz	x25, .LBB179_43
.LBB179_42:                             // %"$55"
                                        // =>This Inner Loop Header: Depth=1
	mov	x11, x25
	mov	x10, x25
	ldr	x25, [x25]
	mov	x8, x9
	mov	x9, x11
	str	x8, [x10]
	cbnz	x25, .LBB179_42
.LBB179_43:                             // %"$56"
	str	x9, [x19, #184]
	adrp	x8, env+64
	ldr	x8, [x8, :lo12:env+64]
	add	x10, x19, #96                   // =96
	mov	x9, x8
	str	x8, [x10]
	cbz	x20, .LBB179_45
.LBB179_44:                             // %"$58"
                                        // =>This Inner Loop Header: Depth=1
	mov	x11, x20
	mov	x10, x20
	ldr	x20, [x20]
	mov	x8, x9
	mov	x9, x11
	str	x8, [x10]
	cbnz	x20, .LBB179_44
.LBB179_45:                             // %"$59"
	str	x9, [x19, #176]
	adrp	x8, env+56
	ldr	x9, [x8, :lo12:env+56]
	add	x10, x19, #88                   // =88
	mov	x8, x9
	adrp	x16, env
.LBB179_46:                             // %"$60"
                                        // =>This Inner Loop Header: Depth=1
	str	x9, [x10]
	ldr	x9, [x27, :lo12:($Stdout)]
	cmp	x28, x9
	b.eq	.LBB179_48
// %bb.47:                              // %"$61"
                                        //   in Loop: Header=BB179_46 Depth=1
	mov	x11, x28
	mov	x10, x28
	ldr	x28, [x28]
	mov	x9, x8
	mov	x8, x11
	b	.LBB179_46
.LBB179_48:                             // %"$62"
	str	x8, [x19, #168]
	adrp	x8, env+48
	ldr	x9, [x8, :lo12:env+48]
	add	x10, x19, #80                   // =80
	mov	x8, x9
.LBB179_49:                             // %"$63"
                                        // =>This Inner Loop Header: Depth=1
	str	x9, [x10]
	ldr	x9, [x12, :lo12:($Stdin)]
	cmp	x26, x9
	b.eq	.LBB179_51
// %bb.50:                              // %"$64"
                                        //   in Loop: Header=BB179_49 Depth=1
	mov	x11, x26
	mov	x10, x26
	ldr	x26, [x26]
	mov	x9, x8
	mov	x8, x11
	b	.LBB179_49
.LBB179_51:                             // %"$65"
	str	x8, [x19, #160]
	adrp	x8, env+24
	ldr	x9, [x8, :lo12:env+24]
	add	x10, x19, #72                   // =72
	mov	x8, x9
	str	x9, [x10]
	cbz	x23, .LBB179_53
.LBB179_52:                             // %"$67"
                                        // =>This Inner Loop Header: Depth=1
	mov	x11, x23
	mov	x10, x23
	ldr	x23, [x23]
	mov	x9, x8
	mov	x8, x11
	str	x9, [x10]
	cbnz	x23, .LBB179_52
.LBB179_53:                             // %"$68"
	mov	x9, x19
	ldr	w10, [x9, #64]!
	str	x8, [x9, #72]
	adrp	x8, env+8
	ldr	x8, [x8, :lo12:env+8]
	ldr	w11, [x9, #4]
	bfi	x10, x11, #32, #32
	lsr	x11, x8, #32
	stp	w8, w11, [x10, #16]
	ldp	w8, w10, [x9]
	bfi	x8, x10, #32, #32
	lsr	x9, x8, #32
	cbz	x24, .LBB179_55
.LBB179_54:                             // %"$70"
                                        // =>This Inner Loop Header: Depth=1
	mov	x10, x24
	ldp	w12, w11, [x24, #8]
	bfi	x12, x11, #32, #32
	ldp	w11, w13, [x12]
	ldp	w15, w14, [x24]
	stp	w15, w14, [x12]
	stp	w11, w13, [x24]
	mov	x11, x24
	ldr	w24, [x11, #16]!
	ldr	w12, [x11, #4]
	stp	w8, w9, [x11]
	bfi	x24, x12, #32, #32
	mov	x8, x10
	lsr	x9, x8, #32
	cbnz	x24, .LBB179_54
.LBB179_55:                             // %"$71"
	stp	w8, w9, [x19, #120]
	ldr	x8, [x16, :lo12:env]
	lsr	x9, x8, #32
	stp	w8, w9, [x19, #56]
	lsr	x9, x8, #32
	cbz	x21, .LBB179_57
.LBB179_56:                             // %"$73"
                                        // =>This Inner Loop Header: Depth=1
	mov	x10, x21
	mov	x11, x21
	ldr	w21, [x11, #8]!
	ldr	w12, [x11, #4]
	stp	w8, w9, [x11]
	bfi	x21, x12, #32, #32
	mov	x8, x10
	lsr	x9, x8, #32
	cbnz	x21, .LBB179_56
.LBB179_57:                             // %"$74"
	stp	w8, w9, [x19, #112]
.LBB179_58:                             // %"$53"
	mov	x0, x19
	bl	loadCoEnv
	ldur	x9, [x29, #-8]                  // 8-byte Folded Reload
	ldp	w9, w8, [x9, #8]
	bfi	x9, x8, #32, #32
	adrp	x8, env
	str	x9, [x8, :lo12:env]
	mov	sp, x29
	ldp	x20, x19, [sp, #80]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #64]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #48]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #32]             // 16-byte Folded Reload
	ldp	x28, x27, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #96             // 16-byte Folded Reload
	ret
.LBB179_59:                             // %"$23"
	adrp	x2, .L$188
	add	x2, x2, :lo12:.L$188
	mov	x0, x21
	mov	x3, xzr
	bl	err
.LBB179_60:                             // %"$12"
	adrp	x2, .L$187
	add	x2, x2, :lo12:.L$187
.LBB179_61:                             // %"$12"
	mov	x0, x21
	mov	x1, xzr
	mov	x3, xzr
	bl	err
.LBB179_62:                             // %"$50"
	adrp	x8, ($Ret)
	ldur	x9, [x29, #-16]                 // 8-byte Folded Reload
	str	x9, [x8, :lo12:($Ret)]
	add	x0, x22, #264                   // =264
	mov	w1, #1
	bl	longjmp
.LBB179_63:                             // %"$21"
	mov	x0, x21
	bl	reentErr
.Lfunc_end179:
	.size	_yield, .Lfunc_end179-_yield
	.cfi_endproc
                                        // -- End function
	.globl	_break                          // -- Begin function _break
	.p2align	4
	.type	_break,@function
_break:                                 // @_break
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	ldp	w0, w8, [x0, #8]
	adrp	x9, SymTab+8
	add	x9, x9, :lo12:SymTab+8
	bfi	x0, x8, #32, #32
	ldr	x8, [x9, #720]
	cmp	x8, x9
	b.eq	.LBB180_2
// %bb.1:                               // %"$2"
	bl	brkLoad
.LBB180_2:                              // %"$3"
	tst	x0, #0x6
	b.eq	.LBB180_4
// %bb.3:                               // %"$4"
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.LBB180_4:                              // %"$5"
	tbz	w0, #3, .LBB180_6
// %bb.5:                               // %"$8"
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.LBB180_6:                              // %"$7"
	bl	evList
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end180:
	.size	_break, .Lfunc_end180-_break
	.cfi_endproc
                                        // -- End function
	.globl	_e                              // -- Begin function _e
	.p2align	4
	.type	_e,@function
_e:                                     // @_e
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-80]!           // 16-byte Folded Spill
	stp	x26, x25, [sp, #16]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #32]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #48]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #64]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 80
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w30, -72
	.cfi_offset w29, -80
	mov	x21, x0
	adrp	x8, env+16
	ldr	x10, [x8, :lo12:env+16]
	cbz	x10, .LBB181_12
// %bb.1:                               // %"$3"
	adrp	x8, SymTab+8
	add	x8, x8, :lo12:SymTab+8
	ldr	x22, [x8, #720]
	adrp	x9, env
	add	x9, x9, :lo12:env
	ldr	x11, [x9]
	mov	x12, sp
	sub	x23, x12, #16                   // =16
	mov	sp, x23
	lsr	x13, x22, #32
	stp	w22, w13, [x12, #-16]
	lsr	x13, x11, #32
	stp	w11, w13, [x12, #-8]
	ldr	x24, [x8, #368]
	str	x23, [x9]
	mov	x11, sp
	sub	x12, x11, #16                   // =16
	mov	sp, x12
	lsr	x13, x24, #32
	stp	w24, w13, [x11, #-16]
	lsr	x13, x23, #32
	stp	w23, w13, [x11, #-8]
	ldr	x25, [x8, #512]
	str	x12, [x9]
	mov	x11, sp
	sub	x13, x11, #16                   // =16
	mov	sp, x13
	lsr	x14, x25, #32
	stp	w25, w14, [x11, #-16]
	lsr	x14, x12, #32
	stp	w12, w14, [x11, #-8]
	str	x13, [x9]
	str	x8, [x8, #720]
	ldp	w12, w11, [x10]
	bfi	x12, x11, #32, #32
	str	x12, [x8, #512]
	ldp	w10, w11, [x10, #16]
	bfi	x10, x11, #32, #32
	ldp	w10, w11, [x10, #16]
	bfi	x10, x11, #32, #32
	ldp	w10, w11, [x10]
	bfi	x10, x11, #32, #32
	str	x10, [x8, #368]
	ldp	x19, x20, [x9, #48]
	bl	popInFiles
	bl	tosInFile
	bl	popOutFiles
	bl	tosOutFile
	ldp	w26, w8, [x21, #8]
	bfi	x26, x8, #32, #32
	tst	x26, #0xf
	b.eq	.LBB181_7
// %bb.2:                               // %"$5"
	adrp	x8, SymTab+632
	ldr	x21, [x8, :lo12:SymTab+632]
	tst	x21, #0x6
	b.ne	.LBB181_11
// %bb.3:                               // %"$19"
	tbz	w21, #3, .LBB181_10
.LBB181_4:                              // %"$15"
	ldp	w21, w8, [x21]
	bfi	x21, x8, #32, #32
	b	.LBB181_11
.LBB181_5:                              // %"$8"
                                        //   in Loop: Header=BB181_7 Depth=1
	tst	x21, #0xf
	b.ne	.LBB181_7
// %bb.6:                               // %"$17"
                                        //   in Loop: Header=BB181_7 Depth=1
	mov	x0, x21
	bl	evList
.LBB181_7:                              // %"$7"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w21, w8, [x26]
	bfi	x21, x8, #32, #32
	ldp	w26, w8, [x26, #8]
	bfi	x26, x8, #32, #32
	tst	x26, #0xf
	b.eq	.LBB181_5
// %bb.8:                               // %"$10"
	tst	x21, #0x6
	b.ne	.LBB181_11
// %bb.9:                               // %"$12"
	tbnz	w21, #3, .LBB181_4
.LBB181_10:                             // %"$21"
	mov	x0, x21
	bl	evList
	mov	x21, x0
.LBB181_11:                             // %"$6"
	ldr	x1, [x20, #8]
	ldr	w2, [x20, #24]
	mov	x0, x20
	bl	pushOutFile
	ldr	x1, [x19, #8]
	ldr	w2, [x19, #24]
	mov	x0, x19
	bl	pushInFile
	adrp	x8, SymTab+376
	add	x8, x8, :lo12:SymTab+376
	str	x25, [x8, #144]
	str	x24, [x8]
	str	x22, [x8, #352]
	ldp	w9, w8, [x23, #8]
	bfi	x9, x8, #32, #32
	adrp	x8, env
	str	x9, [x8, :lo12:env]
	mov	x0, x21
	mov	sp, x29
	ldp	x20, x19, [sp, #64]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #48]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #32]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #80             // 16-byte Folded Reload
	ret
.LBB181_12:                             // %"$2"
	adrp	x2, .L$191
	add	x2, x2, :lo12:.L$191
	mov	x0, x21
	mov	x1, xzr
	mov	x3, xzr
	bl	err
.Lfunc_end181:
	.size	_e, .Lfunc_end181-_e
	.cfi_endproc
                                        // -- End function
	.globl	_trace                          // -- Begin function _trace
	.p2align	4
	.type	_trace,@function
_trace:                                 // @_trace
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-96]!           // 16-byte Folded Spill
	stp	x28, x27, [sp, #16]             // 16-byte Folded Spill
	stp	x26, x25, [sp, #32]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #48]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #64]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #80]             // 16-byte Folded Spill
	.cfi_def_cfa_offset 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	ldp	w8, w9, [x0, #8]
	adrp	x20, SymTab+8
	add	x20, x20, :lo12:SymTab+8
	bfi	x8, x9, #32, #32
	ldr	x9, [x20, #720]
	cmp	x9, x20
	b.ne	.LBB182_5
// %bb.1:                               // %"$2"
	ldp	w8, w9, [x8, #8]
	bfi	x8, x9, #32, #32
	ldp	w19, w9, [x8, #8]
	bfi	x19, x9, #32, #32
.LBB182_2:                              // %"$5"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w20, w8, [x19]
	bfi	x20, x8, #32, #32
	ldp	w19, w8, [x19, #8]
	bfi	x19, x8, #32, #32
	tst	x19, #0xf
	b.ne	.LBB182_11
// %bb.3:                               // %"$6"
                                        //   in Loop: Header=BB182_2 Depth=1
	tst	x20, #0xf
	b.ne	.LBB182_2
// %bb.4:                               // %"$15"
                                        //   in Loop: Header=BB182_2 Depth=1
	mov	x0, x20
	bl	evList
	b	.LBB182_2
.LBB182_5:                              // %"$3"
	adrp	x21, ($OutFiles)
	adrp	x22, ($OutFile)
	ldr	x23, [x22, :lo12:($OutFile)]
	ldr	x9, [x21, :lo12:($OutFiles)]
	adrp	x26, _putStdout
	add	x26, x26, :lo12:_putStdout
	ldr	x9, [x9, #16]
	adrp	x24, ($Put)
	ldr	x25, [x24, :lo12:($Put)]
	str	x26, [x24, :lo12:($Put)]
	str	x9, [x22, :lo12:($OutFile)]
	ldp	w10, w9, [x8, #8]
	ldp	w19, w11, [x8]
	bfi	x19, x11, #32, #32
	bfi	x10, x9, #32, #32
	ldp	w29, w8, [x10]
	bfi	x29, x8, #32, #32
	ldp	w28, w8, [x10, #8]
	bfi	x28, x8, #32, #32
	adrp	x27, env+144
	ldr	w8, [x27, :lo12:env+144]
	add	w0, w8, #1                      // =1
	str	w0, [x27, :lo12:env+144]
	mov	x1, x19
	bl	trace
	adrp	x0, .L$192
	add	x0, x0, :lo12:.L$192
	bl	outString
	tst	x29, #0xf
	b.ne	.LBB182_7
.LBB182_6:                              // %"$17"
                                        // =>This Inner Loop Header: Depth=1
	bl	space
	ldp	w9, w8, [x29]
	bfi	x9, x8, #32, #32
	ldp	w29, w8, [x29, #8]
	bfi	x29, x8, #32, #32
	ldp	w0, w8, [x9]
	bfi	x0, x8, #32, #32
	bl	print
	tst	x29, #0xf
	b.eq	.LBB182_6
.LBB182_7:                              // %"$18"
	adrp	x8, SymTab+376
	add	x8, x8, :lo12:SymTab+376
	cmp	x29, x8
	b.ne	.LBB182_14
// %bb.8:                               // %"$22.preheader"
	adrp	x20, env+96
	add	x20, x20, :lo12:env+96
.LBB182_9:                              // %"$22"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w20, w8, [x20]
	bfi	x20, x8, #32, #32
	tst	x20, #0xf
	b.ne	.LBB182_16
// %bb.10:                              // %"$23"
                                        //   in Loop: Header=BB182_9 Depth=1
	bl	space
	ldp	w0, w8, [x20, #8]
	bfi	x0, x8, #32, #32
	bl	print
	b	.LBB182_9
.LBB182_11:                             // %"$8"
	tst	x20, #0x6
	b.ne	.LBB182_26
// %bb.12:                              // %"$10"
	tbz	w20, #3, .LBB182_23
// %bb.13:                              // %"$13"
	ldp	w20, w8, [x20]
	bfi	x20, x8, #32, #32
	b	.LBB182_26
.LBB182_14:                             // %"$20"
	cmp	x29, x20
	b.eq	.LBB182_16
// %bb.15:                              // %"$26"
	bl	space
	ldp	w0, w8, [x29]
	bfi	x0, x8, #32, #32
	bl	print
.LBB182_16:                             // %"$19"
	bl	newline
	str	x25, [x24, :lo12:($Put)]
	str	x23, [x22, :lo12:($OutFile)]
.LBB182_17:                             // %"$27"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w20, w8, [x28]
	bfi	x20, x8, #32, #32
	ldp	w28, w8, [x28, #8]
	bfi	x28, x8, #32, #32
	tst	x28, #0xf
	b.ne	.LBB182_20
// %bb.18:                              // %"$28"
                                        //   in Loop: Header=BB182_17 Depth=1
	tst	x20, #0xf
	b.ne	.LBB182_17
// %bb.19:                              // %"$37"
                                        //   in Loop: Header=BB182_17 Depth=1
	mov	x0, x20
	bl	evList
	b	.LBB182_17
.LBB182_20:                             // %"$30"
	tst	x20, #0x6
	b.ne	.LBB182_25
// %bb.21:                              // %"$32"
	tbz	w20, #3, .LBB182_24
// %bb.22:                              // %"$35"
	ldp	w20, w8, [x20]
	bfi	x20, x8, #32, #32
	b	.LBB182_25
.LBB182_23:                             // %"$12"
	mov	x0, x20
	bl	evList
	mov	x20, x0
	b	.LBB182_26
.LBB182_24:                             // %"$34"
	mov	x0, x20
	bl	evList
	mov	x20, x0
.LBB182_25:                             // %"$29"
	ldr	x8, [x21, :lo12:($OutFiles)]
	ldr	x8, [x8, #16]
	str	x8, [x22, :lo12:($OutFile)]
	str	x26, [x24, :lo12:($Put)]
	ldr	w21, [x27, :lo12:env+144]
	mov	w0, w21
	mov	x1, x19
	bl	trace
	sub	w8, w21, #1                     // =1
	str	w8, [x27, :lo12:env+144]
	adrp	x0, .L$193
	add	x0, x0, :lo12:.L$193
	bl	outString
	mov	x0, x20
	bl	print
	bl	newline
	str	x25, [x24, :lo12:($Put)]
	str	x23, [x22, :lo12:($OutFile)]
.LBB182_26:                             // %"$4"
	mov	x0, x20
	ldp	x20, x19, [sp, #80]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #64]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #48]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #32]             // 16-byte Folded Reload
	ldp	x28, x27, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #96             // 16-byte Folded Reload
	ret
.Lfunc_end182:
	.size	_trace, .Lfunc_end182-_trace
	.cfi_endproc
                                        // -- End function
	.globl	_car                            // -- Begin function _car
	.p2align	4
	.type	_car,@function
_car:                                   // @_car
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x30, x19, [sp, #-16]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w19, -8
	.cfi_offset w30, -16
	mov	x19, x0
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w1, w8, [x9]
	bfi	x1, x8, #32, #32
	tst	x1, #0x6
	b.ne	.LBB183_4
// %bb.1:                               // %"$3"
	tbz	w1, #3, .LBB183_3
// %bb.2:                               // %"$6"
	ldp	w1, w8, [x1]
	bfi	x1, x8, #32, #32
	b	.LBB183_4
.LBB183_3:                              // %"$5"
	mov	x0, x1
	bl	evList
	mov	x1, x0
.LBB183_4:                              // %"$2"
	tst	x1, #0x6
	b.ne	.LBB183_6
// %bb.5:                               // %"$8"
	ldp	w0, w8, [x1]
	bfi	x0, x8, #32, #32
	ldp	x30, x19, [sp], #16             // 16-byte Folded Reload
	ret
.LBB183_6:                              // %"$7"
	mov	x0, x19
	bl	varErr
.Lfunc_end183:
	.size	_car, .Lfunc_end183-_car
	.cfi_endproc
                                        // -- End function
	.globl	_cdr                            // -- Begin function _cdr
	.p2align	4
	.type	_cdr,@function
_cdr:                                   // @_cdr
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x30, x19, [sp, #-16]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w19, -8
	.cfi_offset w30, -16
	mov	x19, x0
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w1, w8, [x9]
	bfi	x1, x8, #32, #32
	tst	x1, #0x6
	b.ne	.LBB184_4
// %bb.1:                               // %"$3"
	tbz	w1, #3, .LBB184_3
// %bb.2:                               // %"$6"
	ldp	w1, w8, [x1]
	bfi	x1, x8, #32, #32
	b	.LBB184_4
.LBB184_3:                              // %"$5"
	mov	x0, x1
	bl	evList
	mov	x1, x0
.LBB184_4:                              // %"$2"
	tst	x1, #0xf
	cset	w8, eq
	adrp	x9, SymTab+8
	add	x9, x9, :lo12:SymTab+8
	cmp	x1, x9
	cset	w9, eq
	orr	w8, w8, w9
	tbz	w8, #0, .LBB184_6
// %bb.5:                               // %"$10"
	ldp	w0, w8, [x1, #8]
	bfi	x0, x8, #32, #32
	ldp	x30, x19, [sp], #16             // 16-byte Folded Reload
	ret
.LBB184_6:                              // %"$9"
	mov	x0, x19
	bl	lstErr
.Lfunc_end184:
	.size	_cdr, .Lfunc_end184-_cdr
	.cfi_endproc
                                        // -- End function
	.globl	_caar                           // -- Begin function _caar
	.p2align	4
	.type	_caar,@function
_caar:                                  // @_caar
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x30, x19, [sp, #-16]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w19, -8
	.cfi_offset w30, -16
	mov	x19, x0
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w1, w8, [x9]
	bfi	x1, x8, #32, #32
	tst	x1, #0x6
	b.ne	.LBB185_4
// %bb.1:                               // %"$3"
	tbz	w1, #3, .LBB185_3
// %bb.2:                               // %"$6"
	ldp	w1, w8, [x1]
	bfi	x1, x8, #32, #32
	b	.LBB185_4
.LBB185_3:                              // %"$5"
	mov	x0, x1
	bl	evList
	mov	x1, x0
.LBB185_4:                              // %"$2"
	tst	x1, #0x6
	b.ne	.LBB185_7
// %bb.5:                               // %"$8"
	ldp	w1, w8, [x1]
	bfi	x1, x8, #32, #32
	tst	x1, #0x6
	b.ne	.LBB185_7
// %bb.6:                               // %"$10"
	ldp	w0, w8, [x1]
	bfi	x0, x8, #32, #32
	ldp	x30, x19, [sp], #16             // 16-byte Folded Reload
	ret
.LBB185_7:                              // %"$7"
	mov	x0, x19
	bl	varErr
.Lfunc_end185:
	.size	_caar, .Lfunc_end185-_caar
	.cfi_endproc
                                        // -- End function
	.globl	_cadr                           // -- Begin function _cadr
	.p2align	4
	.type	_cadr,@function
_cadr:                                  // @_cadr
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x30, x19, [sp, #-16]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w19, -8
	.cfi_offset w30, -16
	mov	x19, x0
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w1, w8, [x9]
	bfi	x1, x8, #32, #32
	tst	x1, #0x6
	b.ne	.LBB186_4
// %bb.1:                               // %"$3"
	tbz	w1, #3, .LBB186_3
// %bb.2:                               // %"$6"
	ldp	w1, w8, [x1]
	bfi	x1, x8, #32, #32
	b	.LBB186_4
.LBB186_3:                              // %"$5"
	mov	x0, x1
	bl	evList
	mov	x1, x0
.LBB186_4:                              // %"$2"
	tst	x1, #0xf
	cset	w8, eq
	adrp	x9, SymTab+8
	add	x9, x9, :lo12:SymTab+8
	cmp	x1, x9
	cset	w9, eq
	orr	w8, w8, w9
	tbz	w8, #0, .LBB186_7
// %bb.5:                               // %"$10"
	ldp	w1, w8, [x1, #8]
	bfi	x1, x8, #32, #32
	tst	x1, #0x6
	b.ne	.LBB186_8
// %bb.6:                               // %"$12"
	ldp	w0, w8, [x1]
	bfi	x0, x8, #32, #32
	ldp	x30, x19, [sp], #16             // 16-byte Folded Reload
	ret
.LBB186_7:                              // %"$9"
	mov	x0, x19
	bl	lstErr
.LBB186_8:                              // %"$11"
	mov	x0, x19
	bl	varErr
.Lfunc_end186:
	.size	_cadr, .Lfunc_end186-_cadr
	.cfi_endproc
                                        // -- End function
	.globl	_cdar                           // -- Begin function _cdar
	.p2align	4
	.type	_cdar,@function
_cdar:                                  // @_cdar
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x30, x19, [sp, #-16]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w19, -8
	.cfi_offset w30, -16
	mov	x19, x0
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w1, w8, [x9]
	bfi	x1, x8, #32, #32
	tst	x1, #0x6
	b.ne	.LBB187_4
// %bb.1:                               // %"$3"
	tbz	w1, #3, .LBB187_3
// %bb.2:                               // %"$6"
	ldp	w1, w8, [x1]
	bfi	x1, x8, #32, #32
	b	.LBB187_4
.LBB187_3:                              // %"$5"
	mov	x0, x1
	bl	evList
	mov	x1, x0
.LBB187_4:                              // %"$2"
	tst	x1, #0x6
	b.ne	.LBB187_7
// %bb.5:                               // %"$8"
	ldp	w1, w8, [x1]
	bfi	x1, x8, #32, #32
	tst	x1, #0xf
	cset	w8, eq
	adrp	x9, SymTab+8
	add	x9, x9, :lo12:SymTab+8
	cmp	x1, x9
	cset	w9, eq
	orr	w8, w8, w9
	tbz	w8, #0, .LBB187_8
// %bb.6:                               // %"$12"
	ldp	w0, w8, [x1, #8]
	bfi	x0, x8, #32, #32
	ldp	x30, x19, [sp], #16             // 16-byte Folded Reload
	ret
.LBB187_7:                              // %"$7"
	mov	x0, x19
	bl	varErr
.LBB187_8:                              // %"$11"
	mov	x0, x19
	bl	lstErr
.Lfunc_end187:
	.size	_cdar, .Lfunc_end187-_cdar
	.cfi_endproc
                                        // -- End function
	.globl	_cddr                           // -- Begin function _cddr
	.p2align	4
	.type	_cddr,@function
_cddr:                                  // @_cddr
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x30, x19, [sp, #-16]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w19, -8
	.cfi_offset w30, -16
	mov	x19, x0
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w1, w8, [x9]
	bfi	x1, x8, #32, #32
	tst	x1, #0x6
	b.ne	.LBB188_4
// %bb.1:                               // %"$3"
	tbz	w1, #3, .LBB188_3
// %bb.2:                               // %"$6"
	ldp	w1, w8, [x1]
	bfi	x1, x8, #32, #32
	b	.LBB188_4
.LBB188_3:                              // %"$5"
	mov	x0, x1
	bl	evList
	mov	x1, x0
.LBB188_4:                              // %"$2"
	tst	x1, #0xf
	cset	w9, eq
	adrp	x8, SymTab+8
	add	x8, x8, :lo12:SymTab+8
	cmp	x1, x8
	cset	w10, eq
	orr	w9, w9, w10
	tbz	w9, #0, .LBB188_7
// %bb.5:                               // %"$10"
	ldp	w1, w9, [x1, #8]
	bfi	x1, x9, #32, #32
	tst	x1, #0xf
	cset	w9, eq
	cmp	x1, x8
	cset	w8, eq
	orr	w8, w9, w8
	tbz	w8, #0, .LBB188_7
// %bb.6:                               // %"$14"
	ldp	w0, w8, [x1, #8]
	bfi	x0, x8, #32, #32
	ldp	x30, x19, [sp], #16             // 16-byte Folded Reload
	ret
.LBB188_7:                              // %"$9"
	mov	x0, x19
	bl	lstErr
.Lfunc_end188:
	.size	_cddr, .Lfunc_end188-_cddr
	.cfi_endproc
                                        // -- End function
	.globl	_caaar                          // -- Begin function _caaar
	.p2align	4
	.type	_caaar,@function
_caaar:                                 // @_caaar
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x30, x19, [sp, #-16]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w19, -8
	.cfi_offset w30, -16
	mov	x19, x0
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w1, w8, [x9]
	bfi	x1, x8, #32, #32
	tst	x1, #0x6
	b.ne	.LBB189_4
// %bb.1:                               // %"$3"
	tbz	w1, #3, .LBB189_3
// %bb.2:                               // %"$6"
	ldp	w1, w8, [x1]
	bfi	x1, x8, #32, #32
	b	.LBB189_4
.LBB189_3:                              // %"$5"
	mov	x0, x1
	bl	evList
	mov	x1, x0
.LBB189_4:                              // %"$2"
	tst	x1, #0x6
	b.ne	.LBB189_8
// %bb.5:                               // %"$8"
	ldp	w1, w8, [x1]
	bfi	x1, x8, #32, #32
	tst	x1, #0x6
	b.ne	.LBB189_8
// %bb.6:                               // %"$10"
	ldp	w1, w8, [x1]
	bfi	x1, x8, #32, #32
	tst	x1, #0x6
	b.ne	.LBB189_8
// %bb.7:                               // %"$12"
	ldp	w0, w8, [x1]
	bfi	x0, x8, #32, #32
	ldp	x30, x19, [sp], #16             // 16-byte Folded Reload
	ret
.LBB189_8:                              // %"$7"
	mov	x0, x19
	bl	varErr
.Lfunc_end189:
	.size	_caaar, .Lfunc_end189-_caaar
	.cfi_endproc
                                        // -- End function
	.globl	_caadr                          // -- Begin function _caadr
	.p2align	4
	.type	_caadr,@function
_caadr:                                 // @_caadr
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x30, x19, [sp, #-16]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w19, -8
	.cfi_offset w30, -16
	mov	x19, x0
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w1, w8, [x9]
	bfi	x1, x8, #32, #32
	tst	x1, #0x6
	b.ne	.LBB190_4
// %bb.1:                               // %"$3"
	tbz	w1, #3, .LBB190_3
// %bb.2:                               // %"$6"
	ldp	w1, w8, [x1]
	bfi	x1, x8, #32, #32
	b	.LBB190_4
.LBB190_3:                              // %"$5"
	mov	x0, x1
	bl	evList
	mov	x1, x0
.LBB190_4:                              // %"$2"
	tst	x1, #0xf
	cset	w8, eq
	adrp	x9, SymTab+8
	add	x9, x9, :lo12:SymTab+8
	cmp	x1, x9
	cset	w9, eq
	orr	w8, w8, w9
	tbz	w8, #0, .LBB190_9
// %bb.5:                               // %"$10"
	ldp	w1, w8, [x1, #8]
	bfi	x1, x8, #32, #32
	tst	x1, #0x6
	b.ne	.LBB190_8
// %bb.6:                               // %"$12"
	ldp	w1, w8, [x1]
	bfi	x1, x8, #32, #32
	tst	x1, #0x6
	b.ne	.LBB190_8
// %bb.7:                               // %"$14"
	ldp	w0, w8, [x1]
	bfi	x0, x8, #32, #32
	ldp	x30, x19, [sp], #16             // 16-byte Folded Reload
	ret
.LBB190_8:                              // %"$11"
	mov	x0, x19
	bl	varErr
.LBB190_9:                              // %"$9"
	mov	x0, x19
	bl	lstErr
.Lfunc_end190:
	.size	_caadr, .Lfunc_end190-_caadr
	.cfi_endproc
                                        // -- End function
	.globl	_cadar                          // -- Begin function _cadar
	.p2align	4
	.type	_cadar,@function
_cadar:                                 // @_cadar
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x30, x19, [sp, #-16]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w19, -8
	.cfi_offset w30, -16
	mov	x19, x0
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w1, w8, [x9]
	bfi	x1, x8, #32, #32
	tst	x1, #0x6
	b.ne	.LBB191_4
// %bb.1:                               // %"$3"
	tbz	w1, #3, .LBB191_3
// %bb.2:                               // %"$6"
	ldp	w1, w8, [x1]
	bfi	x1, x8, #32, #32
	b	.LBB191_4
.LBB191_3:                              // %"$5"
	mov	x0, x1
	bl	evList
	mov	x1, x0
.LBB191_4:                              // %"$2"
	tst	x1, #0x6
	b.ne	.LBB191_8
// %bb.5:                               // %"$8"
	ldp	w1, w8, [x1]
	bfi	x1, x8, #32, #32
	tst	x1, #0xf
	cset	w8, eq
	adrp	x9, SymTab+8
	add	x9, x9, :lo12:SymTab+8
	cmp	x1, x9
	cset	w9, eq
	orr	w8, w8, w9
	tbz	w8, #0, .LBB191_9
// %bb.6:                               // %"$12"
	ldp	w1, w8, [x1, #8]
	bfi	x1, x8, #32, #32
	tst	x1, #0x6
	b.ne	.LBB191_8
// %bb.7:                               // %"$14"
	ldp	w0, w8, [x1]
	bfi	x0, x8, #32, #32
	ldp	x30, x19, [sp], #16             // 16-byte Folded Reload
	ret
.LBB191_8:                              // %"$7"
	mov	x0, x19
	bl	varErr
.LBB191_9:                              // %"$11"
	mov	x0, x19
	bl	lstErr
.Lfunc_end191:
	.size	_cadar, .Lfunc_end191-_cadar
	.cfi_endproc
                                        // -- End function
	.globl	_caddr                          // -- Begin function _caddr
	.p2align	4
	.type	_caddr,@function
_caddr:                                 // @_caddr
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x30, x19, [sp, #-16]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w19, -8
	.cfi_offset w30, -16
	mov	x19, x0
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w1, w8, [x9]
	bfi	x1, x8, #32, #32
	tst	x1, #0x6
	b.ne	.LBB192_4
// %bb.1:                               // %"$3"
	tbz	w1, #3, .LBB192_3
// %bb.2:                               // %"$6"
	ldp	w1, w8, [x1]
	bfi	x1, x8, #32, #32
	b	.LBB192_4
.LBB192_3:                              // %"$5"
	mov	x0, x1
	bl	evList
	mov	x1, x0
.LBB192_4:                              // %"$2"
	tst	x1, #0xf
	cset	w9, eq
	adrp	x8, SymTab+8
	add	x8, x8, :lo12:SymTab+8
	cmp	x1, x8
	cset	w10, eq
	orr	w9, w9, w10
	tbz	w9, #0, .LBB192_8
// %bb.5:                               // %"$10"
	ldp	w1, w9, [x1, #8]
	bfi	x1, x9, #32, #32
	tst	x1, #0xf
	cset	w9, eq
	cmp	x1, x8
	cset	w8, eq
	orr	w8, w9, w8
	tbz	w8, #0, .LBB192_8
// %bb.6:                               // %"$14"
	ldp	w1, w8, [x1, #8]
	bfi	x1, x8, #32, #32
	tst	x1, #0x6
	b.ne	.LBB192_9
// %bb.7:                               // %"$16"
	ldp	w0, w8, [x1]
	bfi	x0, x8, #32, #32
	ldp	x30, x19, [sp], #16             // 16-byte Folded Reload
	ret
.LBB192_8:                              // %"$9"
	mov	x0, x19
	bl	lstErr
.LBB192_9:                              // %"$15"
	mov	x0, x19
	bl	varErr
.Lfunc_end192:
	.size	_caddr, .Lfunc_end192-_caddr
	.cfi_endproc
                                        // -- End function
	.globl	_cdaar                          // -- Begin function _cdaar
	.p2align	4
	.type	_cdaar,@function
_cdaar:                                 // @_cdaar
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x30, x19, [sp, #-16]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w19, -8
	.cfi_offset w30, -16
	mov	x19, x0
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w1, w8, [x9]
	bfi	x1, x8, #32, #32
	tst	x1, #0x6
	b.ne	.LBB193_4
// %bb.1:                               // %"$3"
	tbz	w1, #3, .LBB193_3
// %bb.2:                               // %"$6"
	ldp	w1, w8, [x1]
	bfi	x1, x8, #32, #32
	b	.LBB193_4
.LBB193_3:                              // %"$5"
	mov	x0, x1
	bl	evList
	mov	x1, x0
.LBB193_4:                              // %"$2"
	tst	x1, #0x6
	b.ne	.LBB193_8
// %bb.5:                               // %"$8"
	ldp	w1, w8, [x1]
	bfi	x1, x8, #32, #32
	tst	x1, #0x6
	b.ne	.LBB193_8
// %bb.6:                               // %"$10"
	ldp	w1, w8, [x1]
	bfi	x1, x8, #32, #32
	tst	x1, #0xf
	cset	w8, eq
	adrp	x9, SymTab+8
	add	x9, x9, :lo12:SymTab+8
	cmp	x1, x9
	cset	w9, eq
	orr	w8, w8, w9
	tbz	w8, #0, .LBB193_9
// %bb.7:                               // %"$14"
	ldp	w0, w8, [x1, #8]
	bfi	x0, x8, #32, #32
	ldp	x30, x19, [sp], #16             // 16-byte Folded Reload
	ret
.LBB193_8:                              // %"$7"
	mov	x0, x19
	bl	varErr
.LBB193_9:                              // %"$13"
	mov	x0, x19
	bl	lstErr
.Lfunc_end193:
	.size	_cdaar, .Lfunc_end193-_cdaar
	.cfi_endproc
                                        // -- End function
	.globl	_cdadr                          // -- Begin function _cdadr
	.p2align	4
	.type	_cdadr,@function
_cdadr:                                 // @_cdadr
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x30, x19, [sp, #-16]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w19, -8
	.cfi_offset w30, -16
	mov	x19, x0
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w1, w8, [x9]
	bfi	x1, x8, #32, #32
	tst	x1, #0x6
	b.ne	.LBB194_4
// %bb.1:                               // %"$3"
	tbz	w1, #3, .LBB194_3
// %bb.2:                               // %"$6"
	ldp	w1, w8, [x1]
	bfi	x1, x8, #32, #32
	b	.LBB194_4
.LBB194_3:                              // %"$5"
	mov	x0, x1
	bl	evList
	mov	x1, x0
.LBB194_4:                              // %"$2"
	tst	x1, #0xf
	cset	w9, eq
	adrp	x8, SymTab+8
	add	x8, x8, :lo12:SymTab+8
	cmp	x1, x8
	cset	w10, eq
	orr	w9, w9, w10
	tbz	w9, #0, .LBB194_8
// %bb.5:                               // %"$10"
	ldp	w1, w9, [x1, #8]
	bfi	x1, x9, #32, #32
	tst	x1, #0x6
	b.ne	.LBB194_9
// %bb.6:                               // %"$12"
	ldp	w1, w9, [x1]
	bfi	x1, x9, #32, #32
	tst	x1, #0xf
	cset	w9, eq
	cmp	x1, x8
	cset	w8, eq
	orr	w8, w9, w8
	tbz	w8, #0, .LBB194_8
// %bb.7:                               // %"$16"
	ldp	w0, w8, [x1, #8]
	bfi	x0, x8, #32, #32
	ldp	x30, x19, [sp], #16             // 16-byte Folded Reload
	ret
.LBB194_8:                              // %"$9"
	mov	x0, x19
	bl	lstErr
.LBB194_9:                              // %"$11"
	mov	x0, x19
	bl	varErr
.Lfunc_end194:
	.size	_cdadr, .Lfunc_end194-_cdadr
	.cfi_endproc
                                        // -- End function
	.globl	_cddar                          // -- Begin function _cddar
	.p2align	4
	.type	_cddar,@function
_cddar:                                 // @_cddar
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x30, x19, [sp, #-16]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w19, -8
	.cfi_offset w30, -16
	mov	x19, x0
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w1, w8, [x9]
	bfi	x1, x8, #32, #32
	tst	x1, #0x6
	b.ne	.LBB195_4
// %bb.1:                               // %"$3"
	tbz	w1, #3, .LBB195_3
// %bb.2:                               // %"$6"
	ldp	w1, w8, [x1]
	bfi	x1, x8, #32, #32
	b	.LBB195_4
.LBB195_3:                              // %"$5"
	mov	x0, x1
	bl	evList
	mov	x1, x0
.LBB195_4:                              // %"$2"
	tst	x1, #0x6
	b.ne	.LBB195_9
// %bb.5:                               // %"$8"
	ldp	w1, w8, [x1]
	bfi	x1, x8, #32, #32
	tst	x1, #0xf
	cset	w9, eq
	adrp	x8, SymTab+8
	add	x8, x8, :lo12:SymTab+8
	cmp	x1, x8
	cset	w10, eq
	orr	w9, w9, w10
	tbz	w9, #0, .LBB195_8
// %bb.6:                               // %"$12"
	ldp	w1, w9, [x1, #8]
	bfi	x1, x9, #32, #32
	tst	x1, #0xf
	cset	w9, eq
	cmp	x1, x8
	cset	w8, eq
	orr	w8, w9, w8
	tbz	w8, #0, .LBB195_8
// %bb.7:                               // %"$16"
	ldp	w0, w8, [x1, #8]
	bfi	x0, x8, #32, #32
	ldp	x30, x19, [sp], #16             // 16-byte Folded Reload
	ret
.LBB195_8:                              // %"$11"
	mov	x0, x19
	bl	lstErr
.LBB195_9:                              // %"$7"
	mov	x0, x19
	bl	varErr
.Lfunc_end195:
	.size	_cddar, .Lfunc_end195-_cddar
	.cfi_endproc
                                        // -- End function
	.globl	_cdddr                          // -- Begin function _cdddr
	.p2align	4
	.type	_cdddr,@function
_cdddr:                                 // @_cdddr
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x30, x19, [sp, #-16]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w19, -8
	.cfi_offset w30, -16
	mov	x19, x0
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w1, w8, [x9]
	bfi	x1, x8, #32, #32
	tst	x1, #0x6
	b.ne	.LBB196_4
// %bb.1:                               // %"$3"
	tbz	w1, #3, .LBB196_3
// %bb.2:                               // %"$6"
	ldp	w1, w8, [x1]
	bfi	x1, x8, #32, #32
	b	.LBB196_4
.LBB196_3:                              // %"$5"
	mov	x0, x1
	bl	evList
	mov	x1, x0
.LBB196_4:                              // %"$2"
	tst	x1, #0xf
	cset	w9, eq
	adrp	x8, SymTab+8
	add	x8, x8, :lo12:SymTab+8
	cmp	x1, x8
	cset	w10, eq
	orr	w9, w9, w10
	tbz	w9, #0, .LBB196_8
// %bb.5:                               // %"$10"
	ldp	w1, w9, [x1, #8]
	bfi	x1, x9, #32, #32
	tst	x1, #0xf
	cset	w9, eq
	cmp	x1, x8
	cset	w10, eq
	orr	w9, w9, w10
	tbz	w9, #0, .LBB196_8
// %bb.6:                               // %"$14"
	ldp	w1, w9, [x1, #8]
	bfi	x1, x9, #32, #32
	tst	x1, #0xf
	cset	w9, eq
	cmp	x1, x8
	cset	w8, eq
	orr	w8, w9, w8
	tbz	w8, #0, .LBB196_8
// %bb.7:                               // %"$18"
	ldp	w0, w8, [x1, #8]
	bfi	x0, x8, #32, #32
	ldp	x30, x19, [sp], #16             // 16-byte Folded Reload
	ret
.LBB196_8:                              // %"$9"
	mov	x0, x19
	bl	lstErr
.Lfunc_end196:
	.size	_cdddr, .Lfunc_end196-_cdddr
	.cfi_endproc
                                        // -- End function
	.globl	_caaaar                         // -- Begin function _caaaar
	.p2align	4
	.type	_caaaar,@function
_caaaar:                                // @_caaaar
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x30, x19, [sp, #-16]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w19, -8
	.cfi_offset w30, -16
	mov	x19, x0
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w1, w8, [x9]
	bfi	x1, x8, #32, #32
	tst	x1, #0x6
	b.ne	.LBB197_4
// %bb.1:                               // %"$3"
	tbz	w1, #3, .LBB197_3
// %bb.2:                               // %"$6"
	ldp	w1, w8, [x1]
	bfi	x1, x8, #32, #32
	b	.LBB197_4
.LBB197_3:                              // %"$5"
	mov	x0, x1
	bl	evList
	mov	x1, x0
.LBB197_4:                              // %"$2"
	tst	x1, #0x6
	b.ne	.LBB197_9
// %bb.5:                               // %"$8"
	ldp	w1, w8, [x1]
	bfi	x1, x8, #32, #32
	tst	x1, #0x6
	b.ne	.LBB197_9
// %bb.6:                               // %"$10"
	ldp	w1, w8, [x1]
	bfi	x1, x8, #32, #32
	tst	x1, #0x6
	b.ne	.LBB197_9
// %bb.7:                               // %"$12"
	ldp	w1, w8, [x1]
	bfi	x1, x8, #32, #32
	tst	x1, #0x6
	b.ne	.LBB197_9
// %bb.8:                               // %"$14"
	ldp	w0, w8, [x1]
	bfi	x0, x8, #32, #32
	ldp	x30, x19, [sp], #16             // 16-byte Folded Reload
	ret
.LBB197_9:                              // %"$7"
	mov	x0, x19
	bl	varErr
.Lfunc_end197:
	.size	_caaaar, .Lfunc_end197-_caaaar
	.cfi_endproc
                                        // -- End function
	.globl	_caaadr                         // -- Begin function _caaadr
	.p2align	4
	.type	_caaadr,@function
_caaadr:                                // @_caaadr
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x30, x19, [sp, #-16]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w19, -8
	.cfi_offset w30, -16
	mov	x19, x0
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w1, w8, [x9]
	bfi	x1, x8, #32, #32
	tst	x1, #0x6
	b.ne	.LBB198_4
// %bb.1:                               // %"$3"
	tbz	w1, #3, .LBB198_3
// %bb.2:                               // %"$6"
	ldp	w1, w8, [x1]
	bfi	x1, x8, #32, #32
	b	.LBB198_4
.LBB198_3:                              // %"$5"
	mov	x0, x1
	bl	evList
	mov	x1, x0
.LBB198_4:                              // %"$2"
	tst	x1, #0xf
	cset	w8, eq
	adrp	x9, SymTab+8
	add	x9, x9, :lo12:SymTab+8
	cmp	x1, x9
	cset	w9, eq
	orr	w8, w8, w9
	tbz	w8, #0, .LBB198_10
// %bb.5:                               // %"$10"
	ldp	w1, w8, [x1, #8]
	bfi	x1, x8, #32, #32
	tst	x1, #0x6
	b.ne	.LBB198_9
// %bb.6:                               // %"$12"
	ldp	w1, w8, [x1]
	bfi	x1, x8, #32, #32
	tst	x1, #0x6
	b.ne	.LBB198_9
// %bb.7:                               // %"$14"
	ldp	w1, w8, [x1]
	bfi	x1, x8, #32, #32
	tst	x1, #0x6
	b.ne	.LBB198_9
// %bb.8:                               // %"$16"
	ldp	w0, w8, [x1]
	bfi	x0, x8, #32, #32
	ldp	x30, x19, [sp], #16             // 16-byte Folded Reload
	ret
.LBB198_9:                              // %"$11"
	mov	x0, x19
	bl	varErr
.LBB198_10:                             // %"$9"
	mov	x0, x19
	bl	lstErr
.Lfunc_end198:
	.size	_caaadr, .Lfunc_end198-_caaadr
	.cfi_endproc
                                        // -- End function
	.globl	_caadar                         // -- Begin function _caadar
	.p2align	4
	.type	_caadar,@function
_caadar:                                // @_caadar
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x30, x19, [sp, #-16]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w19, -8
	.cfi_offset w30, -16
	mov	x19, x0
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w1, w8, [x9]
	bfi	x1, x8, #32, #32
	tst	x1, #0x6
	b.ne	.LBB199_4
// %bb.1:                               // %"$3"
	tbz	w1, #3, .LBB199_3
// %bb.2:                               // %"$6"
	ldp	w1, w8, [x1]
	bfi	x1, x8, #32, #32
	b	.LBB199_4
.LBB199_3:                              // %"$5"
	mov	x0, x1
	bl	evList
	mov	x1, x0
.LBB199_4:                              // %"$2"
	tst	x1, #0x6
	b.ne	.LBB199_9
// %bb.5:                               // %"$8"
	ldp	w1, w8, [x1]
	bfi	x1, x8, #32, #32
	tst	x1, #0xf
	cset	w8, eq
	adrp	x9, SymTab+8
	add	x9, x9, :lo12:SymTab+8
	cmp	x1, x9
	cset	w9, eq
	orr	w8, w8, w9
	tbz	w8, #0, .LBB199_10
// %bb.6:                               // %"$12"
	ldp	w1, w8, [x1, #8]
	bfi	x1, x8, #32, #32
	tst	x1, #0x6
	b.ne	.LBB199_9
// %bb.7:                               // %"$14"
	ldp	w1, w8, [x1]
	bfi	x1, x8, #32, #32
	tst	x1, #0x6
	b.ne	.LBB199_9
// %bb.8:                               // %"$16"
	ldp	w0, w8, [x1]
	bfi	x0, x8, #32, #32
	ldp	x30, x19, [sp], #16             // 16-byte Folded Reload
	ret
.LBB199_9:                              // %"$7"
	mov	x0, x19
	bl	varErr
.LBB199_10:                             // %"$11"
	mov	x0, x19
	bl	lstErr
.Lfunc_end199:
	.size	_caadar, .Lfunc_end199-_caadar
	.cfi_endproc
                                        // -- End function
	.globl	_caaddr                         // -- Begin function _caaddr
	.p2align	4
	.type	_caaddr,@function
_caaddr:                                // @_caaddr
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x30, x19, [sp, #-16]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w19, -8
	.cfi_offset w30, -16
	mov	x19, x0
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w1, w8, [x9]
	bfi	x1, x8, #32, #32
	tst	x1, #0x6
	b.ne	.LBB200_4
// %bb.1:                               // %"$3"
	tbz	w1, #3, .LBB200_3
// %bb.2:                               // %"$6"
	ldp	w1, w8, [x1]
	bfi	x1, x8, #32, #32
	b	.LBB200_4
.LBB200_3:                              // %"$5"
	mov	x0, x1
	bl	evList
	mov	x1, x0
.LBB200_4:                              // %"$2"
	tst	x1, #0xf
	cset	w9, eq
	adrp	x8, SymTab+8
	add	x8, x8, :lo12:SymTab+8
	cmp	x1, x8
	cset	w10, eq
	orr	w9, w9, w10
	tbz	w9, #0, .LBB200_9
// %bb.5:                               // %"$10"
	ldp	w1, w9, [x1, #8]
	bfi	x1, x9, #32, #32
	tst	x1, #0xf
	cset	w9, eq
	cmp	x1, x8
	cset	w8, eq
	orr	w8, w9, w8
	tbz	w8, #0, .LBB200_9
// %bb.6:                               // %"$14"
	ldp	w1, w8, [x1, #8]
	bfi	x1, x8, #32, #32
	tst	x1, #0x6
	b.ne	.LBB200_10
// %bb.7:                               // %"$16"
	ldp	w1, w8, [x1]
	bfi	x1, x8, #32, #32
	tst	x1, #0x6
	b.ne	.LBB200_10
// %bb.8:                               // %"$18"
	ldp	w0, w8, [x1]
	bfi	x0, x8, #32, #32
	ldp	x30, x19, [sp], #16             // 16-byte Folded Reload
	ret
.LBB200_9:                              // %"$9"
	mov	x0, x19
	bl	lstErr
.LBB200_10:                             // %"$15"
	mov	x0, x19
	bl	varErr
.Lfunc_end200:
	.size	_caaddr, .Lfunc_end200-_caaddr
	.cfi_endproc
                                        // -- End function
	.globl	_cadaar                         // -- Begin function _cadaar
	.p2align	4
	.type	_cadaar,@function
_cadaar:                                // @_cadaar
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x30, x19, [sp, #-16]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w19, -8
	.cfi_offset w30, -16
	mov	x19, x0
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w1, w8, [x9]
	bfi	x1, x8, #32, #32
	tst	x1, #0x6
	b.ne	.LBB201_4
// %bb.1:                               // %"$3"
	tbz	w1, #3, .LBB201_3
// %bb.2:                               // %"$6"
	ldp	w1, w8, [x1]
	bfi	x1, x8, #32, #32
	b	.LBB201_4
.LBB201_3:                              // %"$5"
	mov	x0, x1
	bl	evList
	mov	x1, x0
.LBB201_4:                              // %"$2"
	tst	x1, #0x6
	b.ne	.LBB201_9
// %bb.5:                               // %"$8"
	ldp	w1, w8, [x1]
	bfi	x1, x8, #32, #32
	tst	x1, #0x6
	b.ne	.LBB201_9
// %bb.6:                               // %"$10"
	ldp	w1, w8, [x1]
	bfi	x1, x8, #32, #32
	tst	x1, #0xf
	cset	w8, eq
	adrp	x9, SymTab+8
	add	x9, x9, :lo12:SymTab+8
	cmp	x1, x9
	cset	w9, eq
	orr	w8, w8, w9
	tbz	w8, #0, .LBB201_10
// %bb.7:                               // %"$14"
	ldp	w1, w8, [x1, #8]
	bfi	x1, x8, #32, #32
	tst	x1, #0x6
	b.ne	.LBB201_9
// %bb.8:                               // %"$16"
	ldp	w0, w8, [x1]
	bfi	x0, x8, #32, #32
	ldp	x30, x19, [sp], #16             // 16-byte Folded Reload
	ret
.LBB201_9:                              // %"$7"
	mov	x0, x19
	bl	varErr
.LBB201_10:                             // %"$13"
	mov	x0, x19
	bl	lstErr
.Lfunc_end201:
	.size	_cadaar, .Lfunc_end201-_cadaar
	.cfi_endproc
                                        // -- End function
	.globl	_cadadr                         // -- Begin function _cadadr
	.p2align	4
	.type	_cadadr,@function
_cadadr:                                // @_cadadr
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x30, x19, [sp, #-16]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w19, -8
	.cfi_offset w30, -16
	mov	x19, x0
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w1, w8, [x9]
	bfi	x1, x8, #32, #32
	tst	x1, #0x6
	b.ne	.LBB202_4
// %bb.1:                               // %"$3"
	tbz	w1, #3, .LBB202_3
// %bb.2:                               // %"$6"
	ldp	w1, w8, [x1]
	bfi	x1, x8, #32, #32
	b	.LBB202_4
.LBB202_3:                              // %"$5"
	mov	x0, x1
	bl	evList
	mov	x1, x0
.LBB202_4:                              // %"$2"
	tst	x1, #0xf
	cset	w9, eq
	adrp	x8, SymTab+8
	add	x8, x8, :lo12:SymTab+8
	cmp	x1, x8
	cset	w10, eq
	orr	w9, w9, w10
	tbz	w9, #0, .LBB202_9
// %bb.5:                               // %"$10"
	ldp	w1, w9, [x1, #8]
	bfi	x1, x9, #32, #32
	tst	x1, #0x6
	b.ne	.LBB202_10
// %bb.6:                               // %"$12"
	ldp	w1, w9, [x1]
	bfi	x1, x9, #32, #32
	tst	x1, #0xf
	cset	w9, eq
	cmp	x1, x8
	cset	w8, eq
	orr	w8, w9, w8
	tbz	w8, #0, .LBB202_9
// %bb.7:                               // %"$16"
	ldp	w1, w8, [x1, #8]
	bfi	x1, x8, #32, #32
	tst	x1, #0x6
	b.ne	.LBB202_10
// %bb.8:                               // %"$18"
	ldp	w0, w8, [x1]
	bfi	x0, x8, #32, #32
	ldp	x30, x19, [sp], #16             // 16-byte Folded Reload
	ret
.LBB202_9:                              // %"$9"
	mov	x0, x19
	bl	lstErr
.LBB202_10:                             // %"$11"
	mov	x0, x19
	bl	varErr
.Lfunc_end202:
	.size	_cadadr, .Lfunc_end202-_cadadr
	.cfi_endproc
                                        // -- End function
	.globl	_caddar                         // -- Begin function _caddar
	.p2align	4
	.type	_caddar,@function
_caddar:                                // @_caddar
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x30, x19, [sp, #-16]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w19, -8
	.cfi_offset w30, -16
	mov	x19, x0
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w1, w8, [x9]
	bfi	x1, x8, #32, #32
	tst	x1, #0x6
	b.ne	.LBB203_4
// %bb.1:                               // %"$3"
	tbz	w1, #3, .LBB203_3
// %bb.2:                               // %"$6"
	ldp	w1, w8, [x1]
	bfi	x1, x8, #32, #32
	b	.LBB203_4
.LBB203_3:                              // %"$5"
	mov	x0, x1
	bl	evList
	mov	x1, x0
.LBB203_4:                              // %"$2"
	tst	x1, #0x6
	b.ne	.LBB203_10
// %bb.5:                               // %"$8"
	ldp	w1, w8, [x1]
	bfi	x1, x8, #32, #32
	tst	x1, #0xf
	cset	w9, eq
	adrp	x8, SymTab+8
	add	x8, x8, :lo12:SymTab+8
	cmp	x1, x8
	cset	w10, eq
	orr	w9, w9, w10
	tbz	w9, #0, .LBB203_9
// %bb.6:                               // %"$12"
	ldp	w1, w9, [x1, #8]
	bfi	x1, x9, #32, #32
	tst	x1, #0xf
	cset	w9, eq
	cmp	x1, x8
	cset	w8, eq
	orr	w8, w9, w8
	tbz	w8, #0, .LBB203_9
// %bb.7:                               // %"$16"
	ldp	w1, w8, [x1, #8]
	bfi	x1, x8, #32, #32
	tst	x1, #0x6
	b.ne	.LBB203_10
// %bb.8:                               // %"$18"
	ldp	w0, w8, [x1]
	bfi	x0, x8, #32, #32
	ldp	x30, x19, [sp], #16             // 16-byte Folded Reload
	ret
.LBB203_9:                              // %"$11"
	mov	x0, x19
	bl	lstErr
.LBB203_10:                             // %"$7"
	mov	x0, x19
	bl	varErr
.Lfunc_end203:
	.size	_caddar, .Lfunc_end203-_caddar
	.cfi_endproc
                                        // -- End function
	.globl	_cadddr                         // -- Begin function _cadddr
	.p2align	4
	.type	_cadddr,@function
_cadddr:                                // @_cadddr
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x30, x19, [sp, #-16]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w19, -8
	.cfi_offset w30, -16
	mov	x19, x0
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w1, w8, [x9]
	bfi	x1, x8, #32, #32
	tst	x1, #0x6
	b.ne	.LBB204_4
// %bb.1:                               // %"$3"
	tbz	w1, #3, .LBB204_3
// %bb.2:                               // %"$6"
	ldp	w1, w8, [x1]
	bfi	x1, x8, #32, #32
	b	.LBB204_4
.LBB204_3:                              // %"$5"
	mov	x0, x1
	bl	evList
	mov	x1, x0
.LBB204_4:                              // %"$2"
	tst	x1, #0xf
	cset	w9, eq
	adrp	x8, SymTab+8
	add	x8, x8, :lo12:SymTab+8
	cmp	x1, x8
	cset	w10, eq
	orr	w9, w9, w10
	tbz	w9, #0, .LBB204_9
// %bb.5:                               // %"$10"
	ldp	w1, w9, [x1, #8]
	bfi	x1, x9, #32, #32
	tst	x1, #0xf
	cset	w9, eq
	cmp	x1, x8
	cset	w10, eq
	orr	w9, w9, w10
	tbz	w9, #0, .LBB204_9
// %bb.6:                               // %"$14"
	ldp	w1, w9, [x1, #8]
	bfi	x1, x9, #32, #32
	tst	x1, #0xf
	cset	w9, eq
	cmp	x1, x8
	cset	w8, eq
	orr	w8, w9, w8
	tbz	w8, #0, .LBB204_9
// %bb.7:                               // %"$18"
	ldp	w1, w8, [x1, #8]
	bfi	x1, x8, #32, #32
	tst	x1, #0x6
	b.ne	.LBB204_10
// %bb.8:                               // %"$20"
	ldp	w0, w8, [x1]
	bfi	x0, x8, #32, #32
	ldp	x30, x19, [sp], #16             // 16-byte Folded Reload
	ret
.LBB204_9:                              // %"$9"
	mov	x0, x19
	bl	lstErr
.LBB204_10:                             // %"$19"
	mov	x0, x19
	bl	varErr
.Lfunc_end204:
	.size	_cadddr, .Lfunc_end204-_cadddr
	.cfi_endproc
                                        // -- End function
	.globl	_cdaaar                         // -- Begin function _cdaaar
	.p2align	4
	.type	_cdaaar,@function
_cdaaar:                                // @_cdaaar
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x30, x19, [sp, #-16]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w19, -8
	.cfi_offset w30, -16
	mov	x19, x0
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w1, w8, [x9]
	bfi	x1, x8, #32, #32
	tst	x1, #0x6
	b.ne	.LBB205_4
// %bb.1:                               // %"$3"
	tbz	w1, #3, .LBB205_3
// %bb.2:                               // %"$6"
	ldp	w1, w8, [x1]
	bfi	x1, x8, #32, #32
	b	.LBB205_4
.LBB205_3:                              // %"$5"
	mov	x0, x1
	bl	evList
	mov	x1, x0
.LBB205_4:                              // %"$2"
	tst	x1, #0x6
	b.ne	.LBB205_9
// %bb.5:                               // %"$8"
	ldp	w1, w8, [x1]
	bfi	x1, x8, #32, #32
	tst	x1, #0x6
	b.ne	.LBB205_9
// %bb.6:                               // %"$10"
	ldp	w1, w8, [x1]
	bfi	x1, x8, #32, #32
	tst	x1, #0x6
	b.ne	.LBB205_9
// %bb.7:                               // %"$12"
	ldp	w1, w8, [x1]
	bfi	x1, x8, #32, #32
	tst	x1, #0xf
	cset	w8, eq
	adrp	x9, SymTab+8
	add	x9, x9, :lo12:SymTab+8
	cmp	x1, x9
	cset	w9, eq
	orr	w8, w8, w9
	tbz	w8, #0, .LBB205_10
// %bb.8:                               // %"$16"
	ldp	w0, w8, [x1, #8]
	bfi	x0, x8, #32, #32
	ldp	x30, x19, [sp], #16             // 16-byte Folded Reload
	ret
.LBB205_9:                              // %"$7"
	mov	x0, x19
	bl	varErr
.LBB205_10:                             // %"$15"
	mov	x0, x19
	bl	lstErr
.Lfunc_end205:
	.size	_cdaaar, .Lfunc_end205-_cdaaar
	.cfi_endproc
                                        // -- End function
	.globl	_cdaadr                         // -- Begin function _cdaadr
	.p2align	4
	.type	_cdaadr,@function
_cdaadr:                                // @_cdaadr
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x30, x19, [sp, #-16]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w19, -8
	.cfi_offset w30, -16
	mov	x19, x0
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w1, w8, [x9]
	bfi	x1, x8, #32, #32
	tst	x1, #0x6
	b.ne	.LBB206_4
// %bb.1:                               // %"$3"
	tbz	w1, #3, .LBB206_3
// %bb.2:                               // %"$6"
	ldp	w1, w8, [x1]
	bfi	x1, x8, #32, #32
	b	.LBB206_4
.LBB206_3:                              // %"$5"
	mov	x0, x1
	bl	evList
	mov	x1, x0
.LBB206_4:                              // %"$2"
	tst	x1, #0xf
	cset	w9, eq
	adrp	x8, SymTab+8
	add	x8, x8, :lo12:SymTab+8
	cmp	x1, x8
	cset	w10, eq
	orr	w9, w9, w10
	tbz	w9, #0, .LBB206_10
// %bb.5:                               // %"$10"
	ldp	w1, w9, [x1, #8]
	bfi	x1, x9, #32, #32
	tst	x1, #0x6
	b.ne	.LBB206_9
// %bb.6:                               // %"$12"
	ldp	w1, w9, [x1]
	bfi	x1, x9, #32, #32
	tst	x1, #0x6
	b.ne	.LBB206_9
// %bb.7:                               // %"$14"
	ldp	w1, w9, [x1]
	bfi	x1, x9, #32, #32
	tst	x1, #0xf
	cset	w9, eq
	cmp	x1, x8
	cset	w8, eq
	orr	w8, w9, w8
	tbz	w8, #0, .LBB206_10
// %bb.8:                               // %"$18"
	ldp	w0, w8, [x1, #8]
	bfi	x0, x8, #32, #32
	ldp	x30, x19, [sp], #16             // 16-byte Folded Reload
	ret
.LBB206_9:                              // %"$11"
	mov	x0, x19
	bl	varErr
.LBB206_10:                             // %"$9"
	mov	x0, x19
	bl	lstErr
.Lfunc_end206:
	.size	_cdaadr, .Lfunc_end206-_cdaadr
	.cfi_endproc
                                        // -- End function
	.globl	_cdadar                         // -- Begin function _cdadar
	.p2align	4
	.type	_cdadar,@function
_cdadar:                                // @_cdadar
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x30, x19, [sp, #-16]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w19, -8
	.cfi_offset w30, -16
	mov	x19, x0
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w1, w8, [x9]
	bfi	x1, x8, #32, #32
	tst	x1, #0x6
	b.ne	.LBB207_4
// %bb.1:                               // %"$3"
	tbz	w1, #3, .LBB207_3
// %bb.2:                               // %"$6"
	ldp	w1, w8, [x1]
	bfi	x1, x8, #32, #32
	b	.LBB207_4
.LBB207_3:                              // %"$5"
	mov	x0, x1
	bl	evList
	mov	x1, x0
.LBB207_4:                              // %"$2"
	tst	x1, #0x6
	b.ne	.LBB207_9
// %bb.5:                               // %"$8"
	ldp	w1, w8, [x1]
	bfi	x1, x8, #32, #32
	tst	x1, #0xf
	cset	w9, eq
	adrp	x8, SymTab+8
	add	x8, x8, :lo12:SymTab+8
	cmp	x1, x8
	cset	w10, eq
	orr	w9, w9, w10
	tbz	w9, #0, .LBB207_10
// %bb.6:                               // %"$12"
	ldp	w1, w9, [x1, #8]
	bfi	x1, x9, #32, #32
	tst	x1, #0x6
	b.ne	.LBB207_9
// %bb.7:                               // %"$14"
	ldp	w1, w9, [x1]
	bfi	x1, x9, #32, #32
	tst	x1, #0xf
	cset	w9, eq
	cmp	x1, x8
	cset	w8, eq
	orr	w8, w9, w8
	tbz	w8, #0, .LBB207_10
// %bb.8:                               // %"$18"
	ldp	w0, w8, [x1, #8]
	bfi	x0, x8, #32, #32
	ldp	x30, x19, [sp], #16             // 16-byte Folded Reload
	ret
.LBB207_9:                              // %"$7"
	mov	x0, x19
	bl	varErr
.LBB207_10:                             // %"$11"
	mov	x0, x19
	bl	lstErr
.Lfunc_end207:
	.size	_cdadar, .Lfunc_end207-_cdadar
	.cfi_endproc
                                        // -- End function
	.globl	_cdaddr                         // -- Begin function _cdaddr
	.p2align	4
	.type	_cdaddr,@function
_cdaddr:                                // @_cdaddr
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x30, x19, [sp, #-16]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w19, -8
	.cfi_offset w30, -16
	mov	x19, x0
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w1, w8, [x9]
	bfi	x1, x8, #32, #32
	tst	x1, #0x6
	b.ne	.LBB208_4
// %bb.1:                               // %"$3"
	tbz	w1, #3, .LBB208_3
// %bb.2:                               // %"$6"
	ldp	w1, w8, [x1]
	bfi	x1, x8, #32, #32
	b	.LBB208_4
.LBB208_3:                              // %"$5"
	mov	x0, x1
	bl	evList
	mov	x1, x0
.LBB208_4:                              // %"$2"
	tst	x1, #0xf
	cset	w9, eq
	adrp	x8, SymTab+8
	add	x8, x8, :lo12:SymTab+8
	cmp	x1, x8
	cset	w10, eq
	orr	w9, w9, w10
	tbz	w9, #0, .LBB208_9
// %bb.5:                               // %"$10"
	ldp	w1, w9, [x1, #8]
	bfi	x1, x9, #32, #32
	tst	x1, #0xf
	cset	w9, eq
	cmp	x1, x8
	cset	w10, eq
	orr	w9, w9, w10
	tbz	w9, #0, .LBB208_9
// %bb.6:                               // %"$14"
	ldp	w1, w9, [x1, #8]
	bfi	x1, x9, #32, #32
	tst	x1, #0x6
	b.ne	.LBB208_10
// %bb.7:                               // %"$16"
	ldp	w1, w9, [x1]
	bfi	x1, x9, #32, #32
	tst	x1, #0xf
	cset	w9, eq
	cmp	x1, x8
	cset	w8, eq
	orr	w8, w9, w8
	tbz	w8, #0, .LBB208_9
// %bb.8:                               // %"$20"
	ldp	w0, w8, [x1, #8]
	bfi	x0, x8, #32, #32
	ldp	x30, x19, [sp], #16             // 16-byte Folded Reload
	ret
.LBB208_9:                              // %"$9"
	mov	x0, x19
	bl	lstErr
.LBB208_10:                             // %"$15"
	mov	x0, x19
	bl	varErr
.Lfunc_end208:
	.size	_cdaddr, .Lfunc_end208-_cdaddr
	.cfi_endproc
                                        // -- End function
	.globl	_cddaar                         // -- Begin function _cddaar
	.p2align	4
	.type	_cddaar,@function
_cddaar:                                // @_cddaar
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x30, x19, [sp, #-16]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w19, -8
	.cfi_offset w30, -16
	mov	x19, x0
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w1, w8, [x9]
	bfi	x1, x8, #32, #32
	tst	x1, #0x6
	b.ne	.LBB209_4
// %bb.1:                               // %"$3"
	tbz	w1, #3, .LBB209_3
// %bb.2:                               // %"$6"
	ldp	w1, w8, [x1]
	bfi	x1, x8, #32, #32
	b	.LBB209_4
.LBB209_3:                              // %"$5"
	mov	x0, x1
	bl	evList
	mov	x1, x0
.LBB209_4:                              // %"$2"
	tst	x1, #0x6
	b.ne	.LBB209_9
// %bb.5:                               // %"$8"
	ldp	w1, w8, [x1]
	bfi	x1, x8, #32, #32
	tst	x1, #0x6
	b.ne	.LBB209_9
// %bb.6:                               // %"$10"
	ldp	w1, w8, [x1]
	bfi	x1, x8, #32, #32
	tst	x1, #0xf
	cset	w9, eq
	adrp	x8, SymTab+8
	add	x8, x8, :lo12:SymTab+8
	cmp	x1, x8
	cset	w10, eq
	orr	w9, w9, w10
	tbz	w9, #0, .LBB209_10
// %bb.7:                               // %"$14"
	ldp	w1, w9, [x1, #8]
	bfi	x1, x9, #32, #32
	tst	x1, #0xf
	cset	w9, eq
	cmp	x1, x8
	cset	w8, eq
	orr	w8, w9, w8
	tbz	w8, #0, .LBB209_10
// %bb.8:                               // %"$18"
	ldp	w0, w8, [x1, #8]
	bfi	x0, x8, #32, #32
	ldp	x30, x19, [sp], #16             // 16-byte Folded Reload
	ret
.LBB209_9:                              // %"$7"
	mov	x0, x19
	bl	varErr
.LBB209_10:                             // %"$13"
	mov	x0, x19
	bl	lstErr
.Lfunc_end209:
	.size	_cddaar, .Lfunc_end209-_cddaar
	.cfi_endproc
                                        // -- End function
	.globl	_cddadr                         // -- Begin function _cddadr
	.p2align	4
	.type	_cddadr,@function
_cddadr:                                // @_cddadr
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x30, x19, [sp, #-16]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w19, -8
	.cfi_offset w30, -16
	mov	x19, x0
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w1, w8, [x9]
	bfi	x1, x8, #32, #32
	tst	x1, #0x6
	b.ne	.LBB210_4
// %bb.1:                               // %"$3"
	tbz	w1, #3, .LBB210_3
// %bb.2:                               // %"$6"
	ldp	w1, w8, [x1]
	bfi	x1, x8, #32, #32
	b	.LBB210_4
.LBB210_3:                              // %"$5"
	mov	x0, x1
	bl	evList
	mov	x1, x0
.LBB210_4:                              // %"$2"
	tst	x1, #0xf
	cset	w9, eq
	adrp	x8, SymTab+8
	add	x8, x8, :lo12:SymTab+8
	cmp	x1, x8
	cset	w10, eq
	orr	w9, w9, w10
	tbz	w9, #0, .LBB210_9
// %bb.5:                               // %"$10"
	ldp	w1, w9, [x1, #8]
	bfi	x1, x9, #32, #32
	tst	x1, #0x6
	b.ne	.LBB210_10
// %bb.6:                               // %"$12"
	ldp	w1, w9, [x1]
	bfi	x1, x9, #32, #32
	tst	x1, #0xf
	cset	w9, eq
	cmp	x1, x8
	cset	w10, eq
	orr	w9, w9, w10
	tbz	w9, #0, .LBB210_9
// %bb.7:                               // %"$16"
	ldp	w1, w9, [x1, #8]
	bfi	x1, x9, #32, #32
	tst	x1, #0xf
	cset	w9, eq
	cmp	x1, x8
	cset	w8, eq
	orr	w8, w9, w8
	tbz	w8, #0, .LBB210_9
// %bb.8:                               // %"$20"
	ldp	w0, w8, [x1, #8]
	bfi	x0, x8, #32, #32
	ldp	x30, x19, [sp], #16             // 16-byte Folded Reload
	ret
.LBB210_9:                              // %"$9"
	mov	x0, x19
	bl	lstErr
.LBB210_10:                             // %"$11"
	mov	x0, x19
	bl	varErr
.Lfunc_end210:
	.size	_cddadr, .Lfunc_end210-_cddadr
	.cfi_endproc
                                        // -- End function
	.globl	_cdddar                         // -- Begin function _cdddar
	.p2align	4
	.type	_cdddar,@function
_cdddar:                                // @_cdddar
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x30, x19, [sp, #-16]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w19, -8
	.cfi_offset w30, -16
	mov	x19, x0
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w1, w8, [x9]
	bfi	x1, x8, #32, #32
	tst	x1, #0x6
	b.ne	.LBB211_4
// %bb.1:                               // %"$3"
	tbz	w1, #3, .LBB211_3
// %bb.2:                               // %"$6"
	ldp	w1, w8, [x1]
	bfi	x1, x8, #32, #32
	b	.LBB211_4
.LBB211_3:                              // %"$5"
	mov	x0, x1
	bl	evList
	mov	x1, x0
.LBB211_4:                              // %"$2"
	tst	x1, #0x6
	b.ne	.LBB211_10
// %bb.5:                               // %"$8"
	ldp	w1, w8, [x1]
	bfi	x1, x8, #32, #32
	tst	x1, #0xf
	cset	w9, eq
	adrp	x8, SymTab+8
	add	x8, x8, :lo12:SymTab+8
	cmp	x1, x8
	cset	w10, eq
	orr	w9, w9, w10
	tbz	w9, #0, .LBB211_9
// %bb.6:                               // %"$12"
	ldp	w1, w9, [x1, #8]
	bfi	x1, x9, #32, #32
	tst	x1, #0xf
	cset	w9, eq
	cmp	x1, x8
	cset	w10, eq
	orr	w9, w9, w10
	tbz	w9, #0, .LBB211_9
// %bb.7:                               // %"$16"
	ldp	w1, w9, [x1, #8]
	bfi	x1, x9, #32, #32
	tst	x1, #0xf
	cset	w9, eq
	cmp	x1, x8
	cset	w8, eq
	orr	w8, w9, w8
	tbz	w8, #0, .LBB211_9
// %bb.8:                               // %"$20"
	ldp	w0, w8, [x1, #8]
	bfi	x0, x8, #32, #32
	ldp	x30, x19, [sp], #16             // 16-byte Folded Reload
	ret
.LBB211_9:                              // %"$11"
	mov	x0, x19
	bl	lstErr
.LBB211_10:                             // %"$7"
	mov	x0, x19
	bl	varErr
.Lfunc_end211:
	.size	_cdddar, .Lfunc_end211-_cdddar
	.cfi_endproc
                                        // -- End function
	.globl	_cddddr                         // -- Begin function _cddddr
	.p2align	4
	.type	_cddddr,@function
_cddddr:                                // @_cddddr
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x30, x19, [sp, #-16]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w19, -8
	.cfi_offset w30, -16
	mov	x19, x0
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w1, w8, [x9]
	bfi	x1, x8, #32, #32
	tst	x1, #0x6
	b.ne	.LBB212_4
// %bb.1:                               // %"$3"
	tbz	w1, #3, .LBB212_3
// %bb.2:                               // %"$6"
	ldp	w1, w8, [x1]
	bfi	x1, x8, #32, #32
	b	.LBB212_4
.LBB212_3:                              // %"$5"
	mov	x0, x1
	bl	evList
	mov	x1, x0
.LBB212_4:                              // %"$2"
	tst	x1, #0xf
	cset	w9, eq
	adrp	x8, SymTab+8
	add	x8, x8, :lo12:SymTab+8
	cmp	x1, x8
	cset	w10, eq
	orr	w9, w9, w10
	tbz	w9, #0, .LBB212_9
// %bb.5:                               // %"$10"
	ldp	w1, w9, [x1, #8]
	bfi	x1, x9, #32, #32
	tst	x1, #0xf
	cset	w9, eq
	cmp	x1, x8
	cset	w10, eq
	orr	w9, w9, w10
	tbz	w9, #0, .LBB212_9
// %bb.6:                               // %"$14"
	ldp	w1, w9, [x1, #8]
	bfi	x1, x9, #32, #32
	tst	x1, #0xf
	cset	w9, eq
	cmp	x1, x8
	cset	w10, eq
	orr	w9, w9, w10
	tbz	w9, #0, .LBB212_9
// %bb.7:                               // %"$18"
	ldp	w1, w9, [x1, #8]
	bfi	x1, x9, #32, #32
	tst	x1, #0xf
	cset	w9, eq
	cmp	x1, x8
	cset	w8, eq
	orr	w8, w9, w8
	tbz	w8, #0, .LBB212_9
// %bb.8:                               // %"$22"
	ldp	w0, w8, [x1, #8]
	bfi	x0, x8, #32, #32
	ldp	x30, x19, [sp], #16             // 16-byte Folded Reload
	ret
.LBB212_9:                              // %"$9"
	mov	x0, x19
	bl	lstErr
.Lfunc_end212:
	.size	_cddddr, .Lfunc_end212-_cddddr
	.cfi_endproc
                                        // -- End function
	.globl	_nth                            // -- Begin function _nth
	.p2align	4
	.type	_nth,@function
_nth:                                   // @_nth
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-64]!           // 16-byte Folded Spill
	stp	x24, x23, [sp, #16]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #32]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #48]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 64
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w30, -56
	.cfi_offset w29, -64
	mov	x20, x0
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w19, w8, [x9]
	bfi	x19, x8, #32, #32
	ldp	w21, w8, [x9, #8]
	bfi	x21, x8, #32, #32
	tst	x19, #0x6
	b.ne	.LBB213_4
// %bb.1:                               // %"$3"
	tbz	w19, #3, .LBB213_3
// %bb.2:                               // %"$6"
	ldp	w19, w8, [x19]
	bfi	x19, x8, #32, #32
	b	.LBB213_4
.LBB213_3:                              // %"$5"
	mov	x0, x19
	bl	evList
	mov	x19, x0
.LBB213_4:                              // %"$2"
	adrp	x22, env
	ldr	x8, [x22, :lo12:env]
	mov	x9, sp
	sub	x23, x9, #16                    // =16
	mov	sp, x23
	lsr	x10, x19, #32
	lsr	x11, x8, #32
	stp	w19, w10, [x9, #-16]
	stp	w8, w11, [x9, #-8]
	adrp	x24, SymTab+8
	add	x24, x24, :lo12:SymTab+8
	str	x23, [x22, :lo12:env]
	tst	x19, #0xf
	b.ne	.LBB213_11
.LBB213_5:                              // %"$8"
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB213_7 Depth 2
	mov	x0, x20
	mov	x1, x21
	bl	evCnt
	cmp	x0, #1                          // =1
	b.mi	.LBB213_10
// %bb.6:                               // %"$13.preheader"
                                        //   in Loop: Header=BB213_5 Depth=1
	sub	x8, x0, #2                      // =2
	tbnz	x8, #63, .LBB213_8
.LBB213_7:                              // %"$14"
                                        //   Parent Loop BB213_5 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	w19, w9, [x19, #8]
	bfi	x19, x9, #32, #32
	sub	x8, x8, #1                      // =1
	tbz	x8, #63, .LBB213_7
.LBB213_8:                              // %"$15"
                                        //   in Loop: Header=BB213_5 Depth=1
	ldp	w21, w8, [x21, #8]
	bfi	x21, x8, #32, #32
	tst	x21, #0xf
	b.ne	.LBB213_11
// %bb.9:                               // %"$16"
                                        //   in Loop: Header=BB213_5 Depth=1
	ldp	w19, w8, [x19]
	bfi	x19, x8, #32, #32
	tst	x19, #0xf
	b.eq	.LBB213_5
	b	.LBB213_11
.LBB213_10:
	mov	x19, x24
.LBB213_11:                             // %"$9"
	ldp	w9, w8, [x23, #8]
	bfi	x9, x8, #32, #32
	str	x9, [x22, :lo12:env]
	mov	x0, x19
	mov	sp, x29
	ldp	x20, x19, [sp, #48]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #32]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #64             // 16-byte Folded Reload
	ret
.Lfunc_end213:
	.size	_nth, .Lfunc_end213-_nth
	.cfi_endproc
                                        // -- End function
	.globl	_con                            // -- Begin function _con
	.p2align	4
	.type	_con,@function
_con:                                   // @_con
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-48]!           // 16-byte Folded Spill
	stp	x22, x21, [sp, #16]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #32]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 48
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w30, -40
	.cfi_offset w29, -48
	mov	x20, x0
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w19, w8, [x9]
	bfi	x19, x8, #32, #32
	ldp	w21, w22, [x9, #8]
	tst	x19, #0x6
	b.ne	.LBB214_4
// %bb.1:                               // %"$3"
	tbz	w19, #3, .LBB214_3
// %bb.2:                               // %"$6"
	ldp	w19, w8, [x19]
	bfi	x19, x8, #32, #32
	b	.LBB214_4
.LBB214_3:                              // %"$5"
	mov	x0, x19
	bl	evList
	mov	x19, x0
.LBB214_4:                              // %"$2"
	tst	x19, #0xf
	b.ne	.LBB214_10
// %bb.5:                               // %"$8"
	bfi	x21, x22, #32, #32
	adrp	x20, env
	ldr	x8, [x20, :lo12:env]
	mov	x9, sp
	sub	x22, x9, #16                    // =16
	mov	sp, x22
	lsr	x10, x19, #32
	stp	w19, w10, [x9, #-16]
	lsr	x10, x8, #32
	stp	w8, w10, [x9, #-8]
	str	x22, [x20, :lo12:env]
	ldp	w0, w8, [x21]
	bfi	x0, x8, #32, #32
	tst	x0, #0x6
	b.ne	.LBB214_9
// %bb.6:                               // %"$10"
	tbz	w0, #3, .LBB214_8
// %bb.7:                               // %"$13"
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB214_9
.LBB214_8:                              // %"$12"
	bl	evList
.LBB214_9:                              // %"$9"
	lsr	x8, x0, #32
	stp	w0, w8, [x19, #8]
	ldp	w9, w8, [x22, #8]
	bfi	x9, x8, #32, #32
	str	x9, [x20, :lo12:env]
	mov	sp, x29
	ldp	x20, x19, [sp, #32]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #48             // 16-byte Folded Reload
	ret
.LBB214_10:                             // %"$7"
	mov	x0, x20
	mov	x1, x19
	bl	pairErr
.Lfunc_end214:
	.size	_con, .Lfunc_end214-_con
	.cfi_endproc
                                        // -- End function
	.globl	_cons                           // -- Begin function _cons
	.p2align	4
	.type	_cons,@function
_cons:                                  // @_cons
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-64]!           // 16-byte Folded Spill
	stp	x24, x23, [sp, #16]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #32]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #48]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 64
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w30, -56
	.cfi_offset w29, -64
	ldp	w21, w8, [x0, #8]
	bfi	x21, x8, #32, #32
	ldp	w0, w8, [x21]
	bfi	x0, x8, #32, #32
	tst	x0, #0x6
	b.ne	.LBB215_4
// %bb.1:                               // %"$3"
	tbz	w0, #3, .LBB215_3
// %bb.2:                               // %"$6"
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB215_4
.LBB215_3:                              // %"$5"
	bl	evList
.LBB215_4:                              // %"$2"
	adrp	x20, SymTab+8
	add	x20, x20, :lo12:SymTab+8
	mov	x1, x20
	bl	cons
	mov	x19, x0
	adrp	x22, env
	ldr	x8, [x22, :lo12:env]
	mov	x9, sp
	sub	x23, x9, #16                    // =16
	mov	sp, x23
	lsr	x10, x0, #32
	lsr	x11, x8, #32
	stp	w19, w10, [x9, #-16]
	stp	w8, w11, [x9, #-8]
	mov	x24, x0
	str	x23, [x22, :lo12:env]
	b	.LBB215_7
.LBB215_5:                              // %"$13"
                                        //   in Loop: Header=BB215_7 Depth=1
	bl	evList
.LBB215_6:                              // %"$10"
                                        //   in Loop: Header=BB215_7 Depth=1
	mov	x1, x20
	bl	cons
	lsr	x8, x0, #32
	stp	w0, w8, [x24, #8]
	mov	x24, x0
.LBB215_7:                              // %"$7"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w21, w8, [x21, #8]
	bfi	x21, x8, #32, #32
	ldrb	w8, [x21, #8]
	tst	w8, #0xf
	b.ne	.LBB215_11
// %bb.8:                               // %"$8"
                                        //   in Loop: Header=BB215_7 Depth=1
	ldp	w0, w8, [x21]
	bfi	x0, x8, #32, #32
	tst	x0, #0x6
	b.ne	.LBB215_6
// %bb.9:                               // %"$11"
                                        //   in Loop: Header=BB215_7 Depth=1
	tbz	w0, #3, .LBB215_5
// %bb.10:                              // %"$14"
                                        //   in Loop: Header=BB215_7 Depth=1
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB215_6
.LBB215_11:                             // %"$9"
	ldp	w0, w8, [x21]
	bfi	x0, x8, #32, #32
	tst	x0, #0x6
	b.ne	.LBB215_15
// %bb.12:                              // %"$16"
	tbz	w0, #3, .LBB215_14
// %bb.13:                              // %"$19"
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB215_15
.LBB215_14:                             // %"$18"
	bl	evList
.LBB215_15:                             // %"$15"
	lsr	x8, x0, #32
	stp	w0, w8, [x24, #8]
	ldp	w9, w8, [x23, #8]
	bfi	x9, x8, #32, #32
	str	x9, [x22, :lo12:env]
	mov	x0, x19
	mov	sp, x29
	ldp	x20, x19, [sp, #48]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #32]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #64             // 16-byte Folded Reload
	ret
.Lfunc_end215:
	.size	_cons, .Lfunc_end215-_cons
	.cfi_endproc
                                        // -- End function
	.globl	_conc                           // -- Begin function _conc
	.p2align	4
	.type	_conc,@function
_conc:                                  // @_conc
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-64]!           // 16-byte Folded Spill
	str	x23, [sp, #16]                  // 8-byte Folded Spill
	stp	x22, x21, [sp, #32]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #48]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 64
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -48
	.cfi_offset w30, -56
	.cfi_offset w29, -64
	ldp	w21, w8, [x0, #8]
	bfi	x21, x8, #32, #32
	ldp	w19, w8, [x21]
	bfi	x19, x8, #32, #32
	tst	x19, #0x6
	b.ne	.LBB216_4
// %bb.1:                               // %"$3"
	tbz	w19, #3, .LBB216_3
// %bb.2:                               // %"$6"
	ldp	w19, w8, [x19]
	bfi	x19, x8, #32, #32
	b	.LBB216_4
.LBB216_3:                              // %"$5"
	mov	x0, x19
	bl	evList
	mov	x19, x0
.LBB216_4:                              // %"$2"
	adrp	x22, env
	ldr	x8, [x22, :lo12:env]
	mov	x9, sp
	sub	x23, x9, #16                    // =16
	mov	sp, x23
	lsr	x10, x19, #32
	lsr	x11, x8, #32
	stp	w19, w10, [x9, #-16]
	stp	w8, w11, [x9, #-8]
	mov	x20, x19
	str	x23, [x22, :lo12:env]
	b	.LBB216_7
.LBB216_5:                              // %"$15"
                                        //   in Loop: Header=BB216_7 Depth=1
	mov	x9, x23
	mov	x8, x0
	mov	x20, x0
.LBB216_6:                              // %"$17"
                                        //   in Loop: Header=BB216_7 Depth=1
	lsr	x10, x0, #32
	stp	w0, w10, [x9]
	mov	x19, x8
.LBB216_7:                              // %"$7"
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB216_12 Depth 2
	ldp	w21, w8, [x21, #8]
	bfi	x21, x8, #32, #32
	tst	x21, #0xf
	b.ne	.LBB216_15
// %bb.8:                               // %"$8"
                                        //   in Loop: Header=BB216_7 Depth=1
	ldp	w0, w8, [x21]
	bfi	x0, x8, #32, #32
	tst	x0, #0x6
	b.ne	.LBB216_11
// %bb.9:                               // %"$11"
                                        //   in Loop: Header=BB216_7 Depth=1
	tbz	w0, #3, .LBB216_14
// %bb.10:                              // %"$14"
                                        //   in Loop: Header=BB216_7 Depth=1
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
.LBB216_11:                             // %"$10"
                                        //   in Loop: Header=BB216_7 Depth=1
	tst	x19, #0xf
	b.ne	.LBB216_5
.LBB216_12:                             // %"$18"
                                        //   Parent Loop BB216_7 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	mov	x8, x19
	ldp	w19, w9, [x19, #8]
	bfi	x19, x9, #32, #32
	tst	x19, #0xf
	b.eq	.LBB216_12
// %bb.13:                              // %"$20"
                                        //   in Loop: Header=BB216_7 Depth=1
	add	x9, x8, #8                      // =8
	b	.LBB216_6
.LBB216_14:                             // %"$13"
                                        //   in Loop: Header=BB216_7 Depth=1
	bl	evList
	tst	x19, #0xf
	b.ne	.LBB216_5
	b	.LBB216_12
.LBB216_15:                             // %"$9"
	ldp	w9, w8, [x23, #8]
	bfi	x9, x8, #32, #32
	str	x9, [x22, :lo12:env]
	mov	x0, x20
	mov	sp, x29
	ldp	x20, x19, [sp, #48]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #32]             // 16-byte Folded Reload
	ldr	x23, [sp, #16]                  // 8-byte Folded Reload
	ldp	x29, x30, [sp], #64             // 16-byte Folded Reload
	ret
.Lfunc_end216:
	.size	_conc, .Lfunc_end216-_conc
	.cfi_endproc
                                        // -- End function
	.globl	_circ                           // -- Begin function _circ
	.p2align	4
	.type	_circ,@function
_circ:                                  // @_circ
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-80]!           // 16-byte Folded Spill
	str	x25, [sp, #16]                  // 8-byte Folded Spill
	stp	x24, x23, [sp, #32]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #48]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #64]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 80
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -64
	.cfi_offset w30, -72
	.cfi_offset w29, -80
	ldp	w21, w8, [x0, #8]
	bfi	x21, x8, #32, #32
	ldp	w0, w8, [x21]
	bfi	x0, x8, #32, #32
	tst	x0, #0x6
	b.ne	.LBB217_4
// %bb.1:                               // %"$3"
	tbz	w0, #3, .LBB217_3
// %bb.2:                               // %"$6"
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB217_4
.LBB217_3:                              // %"$5"
	bl	evList
.LBB217_4:                              // %"$2"
	adrp	x20, SymTab+8
	add	x20, x20, :lo12:SymTab+8
	mov	x1, x20
	bl	cons
	mov	x19, x0
	adrp	x22, env
	ldr	x8, [x22, :lo12:env]
	mov	x9, sp
	sub	x23, x9, #16                    // =16
	mov	sp, x23
	lsr	x24, x0, #32
	lsr	x10, x8, #32
	stp	w19, w24, [x9, #-16]
	stp	w8, w10, [x9, #-8]
	mov	x25, x0
	str	x23, [x22, :lo12:env]
	b	.LBB217_7
.LBB217_5:                              // %"$13"
                                        //   in Loop: Header=BB217_7 Depth=1
	bl	evList
.LBB217_6:                              // %"$10"
                                        //   in Loop: Header=BB217_7 Depth=1
	mov	x1, x20
	bl	cons
	lsr	x8, x0, #32
	stp	w0, w8, [x25, #8]
	mov	x25, x0
.LBB217_7:                              // %"$7"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w21, w8, [x21, #8]
	bfi	x21, x8, #32, #32
	tst	x21, #0xf
	b.ne	.LBB217_11
// %bb.8:                               // %"$8"
                                        //   in Loop: Header=BB217_7 Depth=1
	ldp	w0, w8, [x21]
	bfi	x0, x8, #32, #32
	tst	x0, #0x6
	b.ne	.LBB217_6
// %bb.9:                               // %"$11"
                                        //   in Loop: Header=BB217_7 Depth=1
	tbz	w0, #3, .LBB217_5
// %bb.10:                              // %"$14"
                                        //   in Loop: Header=BB217_7 Depth=1
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB217_6
.LBB217_11:                             // %"$9"
	stp	w19, w24, [x25, #8]
	ldp	w9, w8, [x23, #8]
	bfi	x9, x8, #32, #32
	str	x9, [x22, :lo12:env]
	mov	x0, x19
	mov	sp, x29
	ldp	x20, x19, [sp, #64]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #48]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #32]             // 16-byte Folded Reload
	ldr	x25, [sp, #16]                  // 8-byte Folded Reload
	ldp	x29, x30, [sp], #80             // 16-byte Folded Reload
	ret
.Lfunc_end217:
	.size	_circ, .Lfunc_end217-_circ
	.cfi_endproc
                                        // -- End function
	.globl	_rot                            // -- Begin function _rot
	.p2align	4
	.type	_rot,@function
_rot:                                   // @_rot
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-64]!           // 16-byte Folded Spill
	stp	x24, x23, [sp, #16]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #32]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #48]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 64
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w30, -56
	.cfi_offset w29, -64
	mov	x20, x0
	ldp	w23, w8, [x0, #8]
	bfi	x23, x8, #32, #32
	ldp	w19, w8, [x23]
	bfi	x19, x8, #32, #32
	tst	x19, #0x6
	b.eq	.LBB218_5
// %bb.1:                               // %"$2"
	tst	x19, #0xf
	b.ne	.LBB218_13
.LBB218_2:                              // %"$7"
	ldp	w22, w8, [x19]
	bfi	x22, x8, #32, #32
	ldp	w21, w8, [x19, #8]
	bfi	x21, x8, #32, #32
	ldp	w1, w8, [x23, #8]
	bfi	x1, x8, #32, #32
	tst	x1, #0xf
	b.eq	.LBB218_8
.LBB218_3:                              // %"$18"
                                        // =>This Inner Loop Header: Depth=1
	tst	x21, #0xf
	b.ne	.LBB218_11
// %bb.4:                               // %"$19"
                                        //   in Loop: Header=BB218_3 Depth=1
	ldp	w8, w9, [x21]
	bfi	x8, x9, #32, #32
	lsr	x9, x22, #32
	stp	w22, w9, [x21]
	ldp	w21, w9, [x21, #8]
	bfi	x21, x9, #32, #32
	cmp	x19, x21
	mov	x22, x8
	b.ne	.LBB218_3
	b	.LBB218_12
.LBB218_5:                              // %"$3"
	tbz	w19, #3, .LBB218_7
// %bb.6:                               // %"$6"
	ldp	w19, w8, [x19]
	bfi	x19, x8, #32, #32
	tst	x19, #0xf
	b.ne	.LBB218_13
	b	.LBB218_2
.LBB218_7:                              // %"$5"
	mov	x0, x19
	bl	evList
	mov	x19, x0
	tst	x19, #0xf
	b.ne	.LBB218_13
	b	.LBB218_2
.LBB218_8:                              // %"$9"
	adrp	x23, env
	ldr	x8, [x23, :lo12:env]
	mov	x9, sp
	sub	x10, x9, #16                    // =16
	mov	sp, x10
	lsr	x11, x19, #32
	mov	x24, x10
	stp	w19, w11, [x9, #-16]
	str	w8, [x24, #8]!
	lsr	x8, x8, #32
	str	w8, [x24, #4]
	str	x10, [x23, :lo12:env]
	mov	x0, x20
	bl	evCnt
	ldp	w9, w8, [x24]
	bfi	x9, x8, #32, #32
	str	x9, [x23, :lo12:env]
.LBB218_9:                              // %"$12"
                                        // =>This Inner Loop Header: Depth=1
	sub	x8, x0, #1                      // =1
	cmp	x8, #0                          // =0
	cset	w9, gt
	tst	x21, #0xf
	csel	x0, x0, x8, ne
	csel	w8, wzr, w9, ne
	cbz	w8, .LBB218_11
// %bb.10:                              // %"$15"
                                        //   in Loop: Header=BB218_9 Depth=1
	ldp	w8, w9, [x21]
	bfi	x8, x9, #32, #32
	lsr	x9, x22, #32
	stp	w22, w9, [x21]
	ldp	w21, w9, [x21, #8]
	bfi	x21, x9, #32, #32
	cmp	x19, x21
	mov	x22, x8
	b.ne	.LBB218_9
	b	.LBB218_12
.LBB218_11:
	mov	x8, x22
.LBB218_12:                             // %"$11"
	lsr	x9, x8, #32
	stp	w8, w9, [x19]
.LBB218_13:                             // %"$8"
	mov	x0, x19
	mov	sp, x29
	ldp	x20, x19, [sp, #48]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #32]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #64             // 16-byte Folded Reload
	ret
.Lfunc_end218:
	.size	_rot, .Lfunc_end218-_rot
	.cfi_endproc
                                        // -- End function
	.globl	_list                           // -- Begin function _list
	.p2align	4
	.type	_list,@function
_list:                                  // @_list
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-64]!           // 16-byte Folded Spill
	stp	x24, x23, [sp, #16]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #32]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #48]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 64
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w30, -56
	.cfi_offset w29, -64
	ldp	w21, w8, [x0, #8]
	bfi	x21, x8, #32, #32
	ldp	w0, w8, [x21]
	bfi	x0, x8, #32, #32
	tst	x0, #0x6
	b.ne	.LBB219_4
// %bb.1:                               // %"$3"
	tbz	w0, #3, .LBB219_3
// %bb.2:                               // %"$6"
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB219_4
.LBB219_3:                              // %"$5"
	bl	evList
.LBB219_4:                              // %"$2"
	adrp	x20, SymTab+8
	add	x20, x20, :lo12:SymTab+8
	mov	x1, x20
	bl	cons
	mov	x19, x0
	adrp	x22, env
	ldr	x8, [x22, :lo12:env]
	mov	x9, sp
	sub	x23, x9, #16                    // =16
	mov	sp, x23
	lsr	x10, x0, #32
	lsr	x11, x8, #32
	stp	w19, w10, [x9, #-16]
	stp	w8, w11, [x9, #-8]
	mov	x24, x0
	str	x23, [x22, :lo12:env]
	b	.LBB219_7
.LBB219_5:                              // %"$13"
                                        //   in Loop: Header=BB219_7 Depth=1
	bl	evList
.LBB219_6:                              // %"$10"
                                        //   in Loop: Header=BB219_7 Depth=1
	mov	x1, x20
	bl	cons
	lsr	x8, x0, #32
	stp	w0, w8, [x24, #8]
	mov	x24, x0
.LBB219_7:                              // %"$7"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w21, w8, [x21, #8]
	bfi	x21, x8, #32, #32
	tst	x21, #0xf
	b.ne	.LBB219_11
// %bb.8:                               // %"$8"
                                        //   in Loop: Header=BB219_7 Depth=1
	ldp	w0, w8, [x21]
	bfi	x0, x8, #32, #32
	tst	x0, #0x6
	b.ne	.LBB219_6
// %bb.9:                               // %"$11"
                                        //   in Loop: Header=BB219_7 Depth=1
	tbz	w0, #3, .LBB219_5
// %bb.10:                              // %"$14"
                                        //   in Loop: Header=BB219_7 Depth=1
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB219_6
.LBB219_11:                             // %"$9"
	ldp	w9, w8, [x23, #8]
	bfi	x9, x8, #32, #32
	str	x9, [x22, :lo12:env]
	mov	x0, x19
	mov	sp, x29
	ldp	x20, x19, [sp, #48]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #32]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #64             // 16-byte Folded Reload
	ret
.Lfunc_end219:
	.size	_list, .Lfunc_end219-_list
	.cfi_endproc
                                        // -- End function
	.globl	_need                           // -- Begin function _need
	.p2align	4
	.type	_need,@function
_need:                                  // @_need
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-80]!           // 16-byte Folded Spill
	str	x25, [sp, #16]                  // 8-byte Folded Spill
	stp	x24, x23, [sp, #32]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #48]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #64]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 80
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -64
	.cfi_offset w30, -72
	.cfi_offset w29, -80
	ldp	w19, w8, [x0, #8]
	bfi	x19, x8, #32, #32
	mov	x1, x19
	bl	evCnt
	mov	x20, x0
	ldp	w21, w8, [x19, #8]
	bfi	x21, x8, #32, #32
	ldp	w19, w8, [x21]
	bfi	x19, x8, #32, #32
	tst	x19, #0x6
	b.ne	.LBB220_4
// %bb.1:                               // %"$3"
	tbz	w19, #3, .LBB220_3
// %bb.2:                               // %"$6"
	ldp	w19, w8, [x19]
	bfi	x19, x8, #32, #32
	b	.LBB220_4
.LBB220_3:                              // %"$5"
	mov	x0, x19
	bl	evList
	mov	x19, x0
.LBB220_4:                              // %"$2"
	adrp	x22, env
	ldr	x8, [x22, :lo12:env]
	mov	x9, sp
	sub	x23, x9, #16                    // =16
	mov	sp, x23
	lsr	x10, x19, #32
	stp	w19, w10, [x9, #-16]
	adrp	x10, SymTab+8
	add	x10, x10, :lo12:SymTab+8
	lsr	x11, x8, #32
	stp	w8, w11, [x9, #-8]
	cmp	x19, x10
	cset	w8, eq
	str	x23, [x22, :lo12:env]
	tst	x19, #0xf
	mov	w9, #1
	csel	w8, w9, w8, eq
	cbz	w8, .LBB220_8
// %bb.5:                               // %"$9"
	ldp	w9, w8, [x21, #8]
	bfi	x9, x8, #32, #32
	ldp	w0, w8, [x9]
	bfi	x0, x8, #32, #32
	tst	x0, #0x6
	b.ne	.LBB220_10
// %bb.6:                               // %"$13"
	tbz	w0, #3, .LBB220_9
// %bb.7:                               // %"$16"
	mov	x21, x19
	ldp	w19, w8, [x0]
	bfi	x19, x8, #32, #32
	b	.LBB220_11
.LBB220_8:
	adrp	x21, SymTab+8
	add	x21, x21, :lo12:SymTab+8
	b	.LBB220_11
.LBB220_9:                              // %"$15"
	bl	evList
.LBB220_10:                             // %"$11"
	mov	x21, x19
	mov	x19, x0
.LBB220_11:                             // %"$11"
	ldr	x8, [x22, :lo12:env]
	mov	x9, sp
	sub	x10, x9, #16                    // =16
	mov	sp, x10
	lsr	x11, x19, #32
	lsr	x12, x8, #32
	stp	w19, w11, [x9, #-16]
	stp	w8, w12, [x9, #-8]
	str	x10, [x22, :lo12:env]
	cbz	x20, .LBB220_17
// %bb.12:                              // %"$17"
	subs	x24, x20, #1                    // =1
	b.lt	.LBB220_18
// %bb.13:                              // %"$22.preheader"
	mov	x8, x21
	tst	x8, #0xf
	b.ne	.LBB220_16
.LBB220_14:                             // %"$23"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w8, w9, [x8, #8]
	bfi	x8, x9, #32, #32
	sub	x24, x24, #1                    // =1
	tst	x8, #0xf
	b.eq	.LBB220_14
	b	.LBB220_16
.LBB220_15:                             // %"$26"
                                        //   in Loop: Header=BB220_16 Depth=1
	mov	x0, x19
	mov	x1, x21
	bl	cons
	mov	x21, x0
	lsr	x8, x0, #32
	stp	w21, w8, [x23]
	sub	x24, x24, #1                    // =1
.LBB220_16:                             // %"$25"
                                        // =>This Inner Loop Header: Depth=1
	tbz	x24, #63, .LBB220_15
.LBB220_17:                             // %"$18"
	ldp	w9, w8, [x23, #8]
	bfi	x9, x8, #32, #32
	str	x9, [x22, :lo12:env]
	mov	x0, x21
	mov	sp, x29
	ldp	x20, x19, [sp, #64]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #48]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #32]             // 16-byte Folded Reload
	ldr	x25, [sp, #16]                  // 8-byte Folded Reload
	ldp	x29, x30, [sp], #80             // 16-byte Folded Reload
	ret
.LBB220_18:                             // %"$20"
	tst	x21, #0xf
	b.eq	.LBB220_22
// %bb.19:                              // %"$28"
	adrp	x1, SymTab+8
	add	x1, x1, :lo12:SymTab+8
	mov	x0, x19
	bl	cons
	mov	x21, x0
	lsr	x8, x0, #32
	stp	w21, w8, [x23]
	mov	x24, x0
.LBB220_20:                             // %"$34.preheader"
	add	x25, x20, #1                    // =1
	adrp	x20, SymTab+8
	add	x20, x20, :lo12:SymTab+8
	tbz	x25, #63, .LBB220_17
.LBB220_21:                             // %"$35"
                                        // =>This Inner Loop Header: Depth=1
	mov	x0, x19
	mov	x1, x20
	bl	cons
	lsr	x8, x0, #32
	stp	w0, w8, [x24, #8]
	add	x25, x25, #1                    // =1
	mov	x24, x0
	tbnz	x25, #63, .LBB220_21
	b	.LBB220_17
.LBB220_22:
	mov	x24, x21
.LBB220_23:                             // %"$31"
                                        // =>This Inner Loop Header: Depth=1
	ldrb	w8, [x24, #8]
	tst	w8, #0xf
	b.ne	.LBB220_20
// %bb.24:                              // %"$32"
                                        //   in Loop: Header=BB220_23 Depth=1
	ldp	w24, w8, [x24, #8]
	bfi	x24, x8, #32, #32
	add	x20, x20, #1                    // =1
	b	.LBB220_23
.Lfunc_end220:
	.size	_need, .Lfunc_end220-_need
	.cfi_endproc
                                        // -- End function
	.globl	_range                          // -- Begin function _range
	.p2align	4
	.type	_range,@function
_range:                                 // @_range
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-96]!           // 16-byte Folded Spill
	str	x27, [sp, #16]                  // 8-byte Folded Spill
	stp	x26, x25, [sp, #32]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #48]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #64]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #80]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	mov	x21, x0
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w19, w8, [x9]
	bfi	x19, x8, #32, #32
	ldp	w23, w20, [x9, #8]
	tst	x19, #0x6
	b.ne	.LBB221_4
// %bb.1:                               // %"$3"
	tbz	w19, #3, .LBB221_3
// %bb.2:                               // %"$6"
	ldp	w19, w8, [x19]
	bfi	x19, x8, #32, #32
	b	.LBB221_4
.LBB221_3:                              // %"$5"
	mov	x0, x19
	bl	evList
	mov	x19, x0
.LBB221_4:                              // %"$2"
	tst	x19, #0x6
	b.eq	.LBB221_27
// %bb.5:                               // %"$8"
	bfi	x23, x20, #32, #32
	adrp	x24, SymTab+8
	add	x24, x24, :lo12:SymTab+8
	mov	x0, x19
	mov	x1, x24
	bl	cons
	mov	x20, x0
	adrp	x25, env
	ldr	x8, [x25, :lo12:env]
	mov	x9, sp
	sub	x26, x9, #16                    // =16
	mov	sp, x26
	lsr	x10, x0, #32
	stp	w20, w10, [x9, #-16]
	lsr	x10, x8, #32
	stp	w8, w10, [x9, #-8]
	str	x26, [x25, :lo12:env]
	ldp	w22, w8, [x23]
	bfi	x22, x8, #32, #32
	ldp	w23, w27, [x23, #8]
	tst	x22, #0x6
	b.ne	.LBB221_9
// %bb.6:                               // %"$10"
	tbz	w22, #3, .LBB221_8
// %bb.7:                               // %"$13"
	ldp	w22, w8, [x22]
	bfi	x22, x8, #32, #32
	b	.LBB221_9
.LBB221_8:                              // %"$12"
	mov	x0, x22
	bl	evList
	mov	x22, x0
.LBB221_9:                              // %"$9"
	tst	x22, #0x6
	b.eq	.LBB221_28
// %bb.10:                              // %"$15"
	bfi	x23, x27, #32, #32
	ldr	x8, [x25, :lo12:env]
	mov	x9, sp
	sub	x10, x9, #16                    // =16
	mov	sp, x10
	lsr	x11, x22, #32
	stp	w22, w11, [x9, #-16]
	lsr	x11, x8, #32
	stp	w8, w11, [x9, #-8]
	str	x10, [x25, :lo12:env]
	ldp	w23, w8, [x23]
	bfi	x23, x8, #32, #32
	tst	x23, #0x6
	b.ne	.LBB221_13
// %bb.11:                              // %"$17"
	tbz	w23, #3, .LBB221_16
// %bb.12:                              // %"$20"
	ldp	w23, w8, [x23]
	bfi	x23, x8, #32, #32
.LBB221_13:                             // %"$16"
	cmp	x23, x24
	b.ne	.LBB221_17
.LBB221_14:
	mov	w23, #18
	cmp	x23, #2                         // =2
	b.ne	.LBB221_19
.LBB221_15:
	mov	w8, #1
	b	.LBB221_20
.LBB221_16:                             // %"$19"
	mov	x0, x23
	bl	evList
	mov	x23, x0
	cmp	x23, x24
	b.eq	.LBB221_14
.LBB221_17:                             // %"$22"
	tst	x23, #0x6
	b.eq	.LBB221_30
// %bb.18:                              // %"$25"
	ldr	x8, [x25, :lo12:env]
	mov	x9, sp
	sub	x10, x9, #16                    // =16
	mov	sp, x10
	lsr	x11, x23, #32
	lsr	x12, x8, #32
	stp	w23, w11, [x9, #-16]
	stp	w8, w12, [x9, #-8]
	str	x10, [x25, :lo12:env]
	cmp	x23, #2                         // =2
	b.eq	.LBB221_15
.LBB221_19:                             // %"$27"
	ubfx	x8, x23, #3, #1
.LBB221_20:                             // %"$26"
	cbnz	w8, .LBB221_29
// %bb.21:                              // %"$29"
	mov	x0, x19
	mov	x1, x22
	bl	cmpNum
	mov	x24, x20
	adrp	x21, SymTab+8
	add	x21, x21, :lo12:SymTab+8
	cmp	x0, #1                          // =1
	b.ge	.LBB221_24
.LBB221_22:                             // %"$33"
                                        // =>This Inner Loop Header: Depth=1
	mov	x0, x19
	mov	x1, x23
	bl	adds
	mov	x19, x0
	mov	x1, x22
	bl	cmpNum
	cmp	x0, #0                          // =0
	b.gt	.LBB221_26
// %bb.23:                              // %"$34"
                                        //   in Loop: Header=BB221_22 Depth=1
	mov	x0, x19
	mov	x1, x21
	bl	cons
	lsr	x8, x0, #32
	stp	w0, w8, [x24, #8]
	mov	x24, x0
	b	.LBB221_22
.LBB221_24:                             // %"$36"
                                        // =>This Inner Loop Header: Depth=1
	mov	x0, x19
	mov	x1, x23
	bl	subs
	mov	x19, x0
	mov	x1, x22
	bl	cmpNum
	tbnz	x0, #63, .LBB221_26
// %bb.25:                              // %"$37"
                                        //   in Loop: Header=BB221_24 Depth=1
	mov	x0, x19
	mov	x1, x21
	bl	cons
	lsr	x8, x0, #32
	stp	w0, w8, [x24, #8]
	mov	x24, x0
	b	.LBB221_24
.LBB221_26:                             // %"$32"
	ldp	w9, w8, [x26, #8]
	bfi	x9, x8, #32, #32
	str	x9, [x25, :lo12:env]
	mov	x0, x20
	mov	sp, x29
	ldp	x20, x19, [sp, #80]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #64]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #48]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #32]             // 16-byte Folded Reload
	ldr	x27, [sp, #16]                  // 8-byte Folded Reload
	ldp	x29, x30, [sp], #96             // 16-byte Folded Reload
	ret
.LBB221_27:                             // %"$7"
	mov	x0, x21
	mov	x1, x19
	bl	numErr
.LBB221_28:                             // %"$14"
	mov	x0, x21
	mov	x1, x22
	bl	numErr
.LBB221_29:                             // %"$28"
	mov	x0, x21
	mov	x1, x23
	bl	argErr
.LBB221_30:                             // %"$24"
	mov	x0, x21
	mov	x1, x23
	bl	numErr
.Lfunc_end221:
	.size	_range, .Lfunc_end221-_range
	.cfi_endproc
                                        // -- End function
	.globl	_full                           // -- Begin function _full
	.p2align	4
	.type	_full,@function
_full:                                  // @_full
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w0, w8, [x9]
	bfi	x0, x8, #32, #32
	tst	x0, #0x6
	b.ne	.LBB222_4
// %bb.1:                               // %"$3"
	tbz	w0, #3, .LBB222_3
// %bb.2:                               // %"$6"
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB222_4
.LBB222_3:                              // %"$5"
	bl	evList
.LBB222_4:                              // %"$7.preheader"
	adrp	x8, SymTab+216
	add	x8, x8, :lo12:SymTab+216
	adrp	x9, SymTab+8
	add	x9, x9, :lo12:SymTab+8
	tst	x0, #0xf
	b.ne	.LBB222_8
.LBB222_5:                              // %"$8"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w11, w10, [x0]
	bfi	x11, x10, #32, #32
	cmp	x11, x9
	b.eq	.LBB222_7
// %bb.6:                               // %"$11"
                                        //   in Loop: Header=BB222_5 Depth=1
	ldp	w0, w10, [x0, #8]
	bfi	x0, x10, #32, #32
	tst	x0, #0xf
	b.eq	.LBB222_5
	b	.LBB222_8
.LBB222_7:
	mov	x8, x9
.LBB222_8:                              // %"$9"
	mov	x0, x8
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end222:
	.size	_full, .Lfunc_end222-_full
	.cfi_endproc
                                        // -- End function
	.globl	_make                           // -- Begin function _make
	.p2align	4
	.type	_make,@function
_make:                                  // @_make
	.cfi_startproc
// %bb.0:                               // %"$1"
	sub	sp, sp, #64                     // =64
	stp	x22, x21, [sp, #32]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #48]             // 16-byte Folded Spill
	.cfi_def_cfa_offset 64
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w30, -48
	adrp	x19, env
	add	x19, x19, :lo12:env
	ldp	x20, x21, [x19, #120]
	adrp	x8, SymTab+8
	add	x8, x8, :lo12:SymTab+8
	ldr	x9, [x19]
	str	x8, [sp]
	stp	x9, x30, [sp, #8]               // 8-byte Folded Spill
	mov	x8, sp
	str	x8, [x19]
	stp	x8, x8, [x19, #120]
	ldp	w22, w8, [x0, #8]
	bfi	x22, x8, #32, #32
	b	.LBB223_2
.LBB223_1:                              // %"$4"
                                        //   in Loop: Header=BB223_2 Depth=1
	tst	x22, #0xf
	b.ne	.LBB223_4
.LBB223_2:                              // %"$2"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w0, w8, [x22]
	bfi	x0, x8, #32, #32
	ldp	w22, w8, [x22, #8]
	bfi	x22, x8, #32, #32
	tst	x0, #0xf
	b.ne	.LBB223_1
// %bb.3:                               // %"$3"
                                        //   in Loop: Header=BB223_2 Depth=1
	bl	evList
	b	.LBB223_1
.LBB223_4:                              // %"$6"
	stp	x20, x21, [x19, #120]
	ldp	x0, x8, [sp]
	str	x8, [x19]
	ldp	x20, x19, [sp, #48]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #32]             // 16-byte Folded Reload
	ldr	x30, [sp, #16]                  // 8-byte Folded Reload
	add	sp, sp, #64                     // =64
	ret
.Lfunc_end223:
	.size	_make, .Lfunc_end223-_make
	.cfi_endproc
                                        // -- End function
	.globl	_made                           // -- Begin function _made
	.p2align	4
	.type	_made,@function
_made:                                  // @_made
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-48]!                // 8-byte Folded Spill
	stp	x22, x21, [sp, #16]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #32]             // 16-byte Folded Spill
	.cfi_def_cfa_offset 48
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w30, -48
	adrp	x19, env+120
	ldr	x8, [x19, :lo12:env+120]
	cbz	x8, .LBB224_15
// %bb.1:                               // %"$3"
	ldp	w8, w9, [x0, #8]
	bfi	x8, x9, #32, #32
	tst	x8, #0xf
	adrp	x20, env+128
	b.ne	.LBB224_13
// %bb.2:                               // %"$4"
	ldr	x21, [x20, :lo12:env+128]
	ldp	w0, w9, [x8]
	bfi	x0, x9, #32, #32
	ldp	w22, w9, [x8, #8]
	bfi	x22, x9, #32, #32
	tst	x0, #0x6
	b.ne	.LBB224_6
// %bb.3:                               // %"$7"
	tbz	w0, #3, .LBB224_5
// %bb.4:                               // %"$10"
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB224_6
.LBB224_5:                              // %"$9"
	bl	evList
.LBB224_6:                              // %"$6"
	lsr	x8, x0, #32
	stp	w0, w8, [x21]
	ldp	w0, w8, [x22]
	bfi	x0, x8, #32, #32
	tst	x0, #0x6
	b.ne	.LBB224_9
// %bb.7:                               // %"$12"
	tbz	w0, #3, .LBB224_14
// %bb.8:                               // %"$15"
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
.LBB224_9:                              // %"$11"
	tst	x0, #0xf
	b.eq	.LBB224_12
.LBB224_10:                             // %"$16"
	ldr	x8, [x20, :lo12:env+128]
	ldp	w8, w9, [x8]
	bfi	x8, x9, #32, #32
.LBB224_11:                             // %"$18"
                                        // =>This Inner Loop Header: Depth=1
	mov	x0, x8
	ldp	w8, w9, [x8, #8]
	bfi	x8, x9, #32, #32
	tst	x8, #0xf
	b.eq	.LBB224_11
.LBB224_12:                             // %"$17"
	add	x8, x0, #8                      // =8
	str	x8, [x19, :lo12:env+120]
.LBB224_13:                             // %"$5"
	ldr	x8, [x20, :lo12:env+128]
	ldp	w0, w9, [x8]
	bfi	x0, x9, #32, #32
	ldp	x20, x19, [sp, #32]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #16]             // 16-byte Folded Reload
	ldr	x30, [sp], #48                  // 8-byte Folded Reload
	ret
.LBB224_14:                             // %"$14"
	bl	evList
	tst	x0, #0xf
	b.ne	.LBB224_10
	b	.LBB224_12
.LBB224_15:                             // %"$2"
	bl	makeErr
.Lfunc_end224:
	.size	_made, .Lfunc_end224-_made
	.cfi_endproc
                                        // -- End function
	.globl	_chain                          // -- Begin function _chain
	.p2align	4
	.type	_chain,@function
_chain:                                 // @_chain
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-48]!                // 8-byte Folded Spill
	stp	x22, x21, [sp, #16]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #32]             // 16-byte Folded Spill
	.cfi_def_cfa_offset 48
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w30, -48
	adrp	x19, env+120
	ldr	x8, [x19, :lo12:env+120]
	cbz	x8, .LBB225_12
// %bb.1:
	ldp	w20, w8, [x0, #8]
	bfi	x20, x8, #32, #32
	b	.LBB225_3
.LBB225_2:                              // %"$11"
                                        //   in Loop: Header=BB225_3 Depth=1
	tst	x20, #0xf
	b.ne	.LBB225_11
.LBB225_3:                              // %"$4"
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB225_9 Depth 2
	ldr	x21, [x19, :lo12:env+120]
	ldp	w0, w8, [x20]
	bfi	x0, x8, #32, #32
	ldp	w20, w22, [x20, #8]
	tst	x0, #0x6
	b.ne	.LBB225_7
// %bb.4:                               // %"$6"
                                        //   in Loop: Header=BB225_3 Depth=1
	tbz	w0, #3, .LBB225_6
// %bb.5:                               // %"$9"
                                        //   in Loop: Header=BB225_3 Depth=1
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB225_7
.LBB225_6:                              // %"$8"
                                        //   in Loop: Header=BB225_3 Depth=1
	bl	evList
.LBB225_7:                              // %"$5"
                                        //   in Loop: Header=BB225_3 Depth=1
	bfi	x20, x22, #32, #32
	lsr	x8, x0, #32
	stp	w0, w8, [x21]
	tst	x0, #0xf
	b.ne	.LBB225_2
// %bb.8:                               // %"$12.preheader"
                                        //   in Loop: Header=BB225_3 Depth=1
	mov	x9, x0
.LBB225_9:                              // %"$12"
                                        //   Parent Loop BB225_3 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	mov	x8, x9
	ldp	w9, w10, [x9, #8]
	bfi	x9, x10, #32, #32
	tst	x9, #0xf
	b.eq	.LBB225_9
// %bb.10:                              // %"$14"
                                        //   in Loop: Header=BB225_3 Depth=1
	add	x8, x8, #8                      // =8
	str	x8, [x19, :lo12:env+120]
	b	.LBB225_2
.LBB225_11:                             // %"$16"
	ldp	x20, x19, [sp, #32]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #16]             // 16-byte Folded Reload
	ldr	x30, [sp], #48                  // 8-byte Folded Reload
	ret
.LBB225_12:                             // %"$2"
	bl	makeErr
.Lfunc_end225:
	.size	_chain, .Lfunc_end225-_chain
	.cfi_endproc
                                        // -- End function
	.globl	_link                           // -- Begin function _link
	.p2align	4
	.type	_link,@function
_link:                                  // @_link
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x30, x23, [sp, #-48]!           // 16-byte Folded Spill
	stp	x22, x21, [sp, #16]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #32]             // 16-byte Folded Spill
	.cfi_def_cfa_offset 48
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w30, -48
	adrp	x21, env+120
	ldr	x8, [x21, :lo12:env+120]
	cbz	x8, .LBB226_8
// %bb.1:
	ldp	w22, w8, [x0, #8]
	bfi	x22, x8, #32, #32
	adrp	x19, SymTab+8
	add	x19, x19, :lo12:SymTab+8
	b	.LBB226_4
.LBB226_2:                              // %"$8"
                                        //   in Loop: Header=BB226_4 Depth=1
	mov	x0, x20
	bl	evList
	mov	x20, x0
.LBB226_3:                              // %"$5"
                                        //   in Loop: Header=BB226_4 Depth=1
	ldr	x23, [x21, :lo12:env+120]
	mov	x0, x20
	mov	x1, x19
	bl	cons
	lsr	x8, x0, #32
	stp	w0, w8, [x23]
	add	x8, x0, #8                      // =8
	str	x8, [x21, :lo12:env+120]
	tst	x22, #0xf
	b.ne	.LBB226_7
.LBB226_4:                              // %"$4"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w20, w8, [x22]
	bfi	x20, x8, #32, #32
	ldp	w22, w8, [x22, #8]
	bfi	x22, x8, #32, #32
	tst	x20, #0x6
	b.ne	.LBB226_3
// %bb.5:                               // %"$6"
                                        //   in Loop: Header=BB226_4 Depth=1
	tbz	w20, #3, .LBB226_2
// %bb.6:                               // %"$9"
                                        //   in Loop: Header=BB226_4 Depth=1
	ldp	w20, w8, [x20]
	bfi	x20, x8, #32, #32
	b	.LBB226_3
.LBB226_7:                              // %"$11"
	mov	x0, x20
	ldp	x20, x19, [sp, #32]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #16]             // 16-byte Folded Reload
	ldp	x30, x23, [sp], #48             // 16-byte Folded Reload
	ret
.LBB226_8:                              // %"$2"
	bl	makeErr
.Lfunc_end226:
	.size	_link, .Lfunc_end226-_link
	.cfi_endproc
                                        // -- End function
	.globl	_yoke                           // -- Begin function _yoke
	.p2align	4
	.type	_yoke,@function
_yoke:                                  // @_yoke
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x30, x23, [sp, #-48]!           // 16-byte Folded Spill
	stp	x22, x21, [sp, #16]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #32]             // 16-byte Folded Spill
	.cfi_def_cfa_offset 48
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w30, -48
	adrp	x20, env+120
	ldr	x8, [x20, :lo12:env+120]
	cbz	x8, .LBB227_11
// %bb.1:
	ldp	w21, w8, [x0, #8]
	bfi	x21, x8, #32, #32
	adrp	x22, env+128
	b	.LBB227_4
.LBB227_2:                              // %"$8"
                                        //   in Loop: Header=BB227_4 Depth=1
	mov	x0, x19
	bl	evList
	mov	x19, x0
.LBB227_3:                              // %"$5"
                                        //   in Loop: Header=BB227_4 Depth=1
	ldr	x23, [x22, :lo12:env+128]
	ldp	w1, w8, [x23]
	bfi	x1, x8, #32, #32
	mov	x0, x19
	bl	cons
	lsr	x8, x0, #32
	stp	w0, w8, [x23]
	tst	x21, #0xf
	b.ne	.LBB227_7
.LBB227_4:                              // %"$4"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w19, w8, [x21]
	bfi	x19, x8, #32, #32
	ldp	w21, w8, [x21, #8]
	bfi	x21, x8, #32, #32
	tst	x19, #0x6
	b.ne	.LBB227_3
// %bb.5:                               // %"$6"
                                        //   in Loop: Header=BB227_4 Depth=1
	tbz	w19, #3, .LBB227_2
// %bb.6:                               // %"$9"
                                        //   in Loop: Header=BB227_4 Depth=1
	ldp	w19, w8, [x19]
	bfi	x19, x8, #32, #32
	b	.LBB227_3
.LBB227_7:                              // %"$12"
	ldr	x8, [x20, :lo12:env+120]
.LBB227_8:                              // %"$13"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w9, w10, [x8]
	bfi	x9, x10, #32, #32
	tst	x9, #0xf
	b.ne	.LBB227_10
// %bb.9:                               // %"$14"
                                        //   in Loop: Header=BB227_8 Depth=1
	add	x8, x9, #8                      // =8
	b	.LBB227_8
.LBB227_10:                             // %"$15"
	str	x8, [x20, :lo12:env+120]
	mov	x0, x19
	ldp	x20, x19, [sp, #32]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #16]             // 16-byte Folded Reload
	ldp	x30, x23, [sp], #48             // 16-byte Folded Reload
	ret
.LBB227_11:                             // %"$2"
	bl	makeErr
.Lfunc_end227:
	.size	_yoke, .Lfunc_end227-_yoke
	.cfi_endproc
                                        // -- End function
	.globl	_copy                           // -- Begin function _copy
	.p2align	4
	.type	_copy,@function
_copy:                                  // @_copy
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-64]!           // 16-byte Folded Spill
	stp	x24, x23, [sp, #16]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #32]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #48]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 64
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w30, -56
	.cfi_offset w29, -64
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w19, w8, [x9]
	bfi	x19, x8, #32, #32
	tst	x19, #0x6
	b.ne	.LBB228_3
// %bb.1:                               // %"$3"
	tbz	w19, #3, .LBB228_5
// %bb.2:                               // %"$6"
	ldp	w19, w8, [x19]
	bfi	x19, x8, #32, #32
.LBB228_3:                              // %"$2"
	tst	x19, #0xf
	b.eq	.LBB228_6
.LBB228_4:
	mov	x20, x19
	b	.LBB228_12
.LBB228_5:                              // %"$5"
	mov	x0, x19
	bl	evList
	mov	x19, x0
	tst	x19, #0xf
	b.ne	.LBB228_4
.LBB228_6:                              // %"$8"
	ldp	w0, w8, [x19]
	bfi	x0, x8, #32, #32
	ldp	w1, w8, [x19, #8]
	bfi	x1, x8, #32, #32
	bl	cons
	mov	x20, x0
	adrp	x21, env
	ldr	x8, [x21, :lo12:env]
	mov	x9, sp
	sub	x22, x9, #16                    // =16
	mov	sp, x22
	lsr	x23, x0, #32
	lsr	x10, x8, #32
	stp	w20, w23, [x9, #-16]
	stp	w8, w10, [x9, #-8]
	mov	x24, x0
	str	x22, [x21, :lo12:env]
.LBB228_7:                              // %"$10"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w8, w9, [x24, #8]
	bfi	x8, x9, #32, #32
	tst	x8, #0xf
	b.ne	.LBB228_11
// %bb.8:                               // %"$11"
                                        //   in Loop: Header=BB228_7 Depth=1
	cmp	x8, x19
	b.eq	.LBB228_10
// %bb.9:                               // %"$13"
                                        //   in Loop: Header=BB228_7 Depth=1
	ldp	w0, w9, [x8]
	bfi	x0, x9, #32, #32
	ldp	w1, w9, [x8, #8]
	bfi	x1, x9, #32, #32
	bl	cons
	lsr	x8, x0, #32
	stp	w0, w8, [x24, #8]
	mov	x24, x0
	b	.LBB228_7
.LBB228_10:                             // %"$14"
	stp	w20, w23, [x24, #8]
.LBB228_11:                             // %"$12"
	ldp	w9, w8, [x22, #8]
	bfi	x9, x8, #32, #32
	str	x9, [x21, :lo12:env]
.LBB228_12:                             // %"$9"
	mov	x0, x20
	mov	sp, x29
	ldp	x20, x19, [sp, #48]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #32]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #64             // 16-byte Folded Reload
	ret
.Lfunc_end228:
	.size	_copy, .Lfunc_end228-_copy
	.cfi_endproc
                                        // -- End function
	.globl	_mix                            // -- Begin function _mix
	.p2align	4
	.type	_mix,@function
_mix:                                   // @_mix
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-80]!           // 16-byte Folded Spill
	str	x25, [sp, #16]                  // 8-byte Folded Spill
	stp	x24, x23, [sp, #32]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #48]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #64]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 80
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -64
	.cfi_offset w30, -72
	.cfi_offset w29, -80
	ldp	w20, w8, [x0, #8]
	bfi	x20, x8, #32, #32
	ldp	w19, w8, [x20]
	bfi	x19, x8, #32, #32
	tst	x19, #0x6
	b.ne	.LBB229_4
// %bb.1:                               // %"$3"
	tbz	w19, #3, .LBB229_3
// %bb.2:                               // %"$6"
	ldp	w19, w8, [x19]
	bfi	x19, x8, #32, #32
	b	.LBB229_4
.LBB229_3:                              // %"$5"
	mov	x0, x19
	bl	evList
	mov	x19, x0
.LBB229_4:                              // %"$2"
	adrp	x8, SymTab+8
	add	x8, x8, :lo12:SymTab+8
	cmp	x19, x8
	cset	w8, eq
	tst	x19, #0xf
	mov	w9, #1
	csel	w8, w9, w8, eq
	cbz	w8, .LBB229_7
// %bb.5:                               // %"$10"
	ldp	w22, w8, [x20, #8]
	bfi	x22, x8, #32, #32
	tst	x22, #0xf
	b.eq	.LBB229_8
// %bb.6:
	adrp	x20, SymTab+8
	add	x20, x20, :lo12:SymTab+8
	b	.LBB229_28
.LBB229_7:
	mov	x20, x19
	b	.LBB229_28
.LBB229_8:                              // %"$12"
	adrp	x23, env
	ldr	x8, [x23, :lo12:env]
	mov	x9, sp
	sub	x24, x9, #16                    // =16
	mov	sp, x24
	lsr	x10, x19, #32
	stp	w19, w10, [x9, #-16]
	lsr	x10, x8, #32
	stp	w8, w10, [x9, #-8]
	str	x24, [x23, :lo12:env]
	ldp	w0, w8, [x22]
	bfi	x0, x8, #32, #32
	tbz	w0, #1, .LBB229_12
// %bb.9:                               // %"$14"
	lsr	x8, x0, #4
	sub	x9, x8, #1                      // =1
	mov	x8, x19
	cbz	x9, .LBB229_11
.LBB229_10:                             // %"$18"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w8, w10, [x8, #8]
	bfi	x8, x10, #32, #32
	sub	x9, x9, #1                      // =1
	cbnz	x9, .LBB229_10
.LBB229_11:                             // %"$19"
	add	x9, x8, #8                      // =8
	tst	w0, #0x8
	csel	x8, x8, x9, eq
	ldp	w0, w9, [x8]
	bfi	x0, x9, #32, #32
	b	.LBB229_16
.LBB229_12:                             // %"$15"
	tst	x0, #0x6
	b.ne	.LBB229_16
// %bb.13:                              // %"$24"
	tbz	w0, #3, .LBB229_15
// %bb.14:                              // %"$27"
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB229_16
.LBB229_15:                             // %"$26"
	bl	evList
.LBB229_16:                             // %"$16"
	adrp	x21, SymTab+8
	add	x21, x21, :lo12:SymTab+8
	mov	x1, x21
	bl	cons
	mov	x20, x0
	ldr	x8, [x23, :lo12:env]
	mov	x9, sp
	sub	x10, x9, #16                    // =16
	mov	sp, x10
	lsr	x11, x0, #32
	lsr	x12, x8, #32
	stp	w20, w11, [x9, #-16]
	stp	w8, w12, [x9, #-8]
	mov	x25, x0
	str	x10, [x23, :lo12:env]
	b	.LBB229_19
.LBB229_17:                             // %"$36"
                                        //   in Loop: Header=BB229_19 Depth=1
	add	x9, x8, #8                      // =8
	tst	w0, #0x8
	csel	x8, x8, x9, eq
	ldp	w0, w9, [x8]
	bfi	x0, x9, #32, #32
.LBB229_18:                             // %"$33"
                                        //   in Loop: Header=BB229_19 Depth=1
	mov	x1, x21
	bl	cons
	lsr	x8, x0, #32
	stp	w0, w8, [x25, #8]
	mov	x25, x0
.LBB229_19:                             // %"$28"
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB229_22 Depth 2
	ldp	w22, w8, [x22, #8]
	bfi	x22, x8, #32, #32
	tst	x22, #0xf
	b.ne	.LBB229_27
// %bb.20:                              // %"$29"
                                        //   in Loop: Header=BB229_19 Depth=1
	ldp	w0, w8, [x22]
	bfi	x0, x8, #32, #32
	tbz	w0, #1, .LBB229_23
// %bb.21:                              // %"$31"
                                        //   in Loop: Header=BB229_19 Depth=1
	lsr	x8, x0, #4
	sub	x9, x8, #1                      // =1
	mov	x8, x19
	cbz	x9, .LBB229_17
.LBB229_22:                             // %"$35"
                                        //   Parent Loop BB229_19 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	w8, w10, [x8, #8]
	bfi	x8, x10, #32, #32
	sub	x9, x9, #1                      // =1
	cbnz	x9, .LBB229_22
	b	.LBB229_17
.LBB229_23:                             // %"$32"
                                        //   in Loop: Header=BB229_19 Depth=1
	tst	x0, #0x6
	b.ne	.LBB229_18
// %bb.24:                              // %"$41"
                                        //   in Loop: Header=BB229_19 Depth=1
	tbz	w0, #3, .LBB229_26
// %bb.25:                              // %"$44"
                                        //   in Loop: Header=BB229_19 Depth=1
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB229_18
.LBB229_26:                             // %"$43"
                                        //   in Loop: Header=BB229_19 Depth=1
	bl	evList
	b	.LBB229_18
.LBB229_27:                             // %"$30"
	ldp	w9, w8, [x24, #8]
	bfi	x9, x8, #32, #32
	str	x9, [x23, :lo12:env]
.LBB229_28:                             // %"$7"
	mov	x0, x20
	mov	sp, x29
	ldp	x20, x19, [sp, #64]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #48]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #32]             // 16-byte Folded Reload
	ldr	x25, [sp, #16]                  // 8-byte Folded Reload
	ldp	x29, x30, [sp], #80             // 16-byte Folded Reload
	ret
.Lfunc_end229:
	.size	_mix, .Lfunc_end229-_mix
	.cfi_endproc
                                        // -- End function
	.globl	_append                         // -- Begin function _append
	.p2align	4
	.type	_append,@function
_append:                                // @_append
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-80]!           // 16-byte Folded Spill
	str	x25, [sp, #16]                  // 8-byte Folded Spill
	stp	x24, x23, [sp, #32]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #48]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #64]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 80
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -64
	.cfi_offset w30, -72
	.cfi_offset w29, -80
	mov	x19, x0
	b	.LBB230_3
.LBB230_1:                              // %"$14"
                                        //   in Loop: Header=BB230_3 Depth=1
	bl	evList
.LBB230_2:                              // %"$11"
                                        //   in Loop: Header=BB230_3 Depth=1
	tst	x0, #0xf
	b.eq	.LBB230_10
.LBB230_3:                              // %"$2"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w19, w8, [x19, #8]
	bfi	x19, x8, #32, #32
	ldrb	w8, [x19, #8]
	tst	w8, #0xf
	b.ne	.LBB230_7
// %bb.4:                               // %"$3"
                                        //   in Loop: Header=BB230_3 Depth=1
	ldp	w0, w8, [x19]
	bfi	x0, x8, #32, #32
	tst	x0, #0x6
	b.ne	.LBB230_2
// %bb.5:                               // %"$12"
                                        //   in Loop: Header=BB230_3 Depth=1
	tbz	w0, #3, .LBB230_1
// %bb.6:                               // %"$15"
                                        //   in Loop: Header=BB230_3 Depth=1
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB230_2
.LBB230_7:                              // %"$5"
	ldp	w20, w8, [x19]
	bfi	x20, x8, #32, #32
	tst	x20, #0x6
	b.ne	.LBB230_27
// %bb.8:                               // %"$7"
	tbz	w20, #3, .LBB230_24
// %bb.9:                               // %"$10"
	ldp	w20, w8, [x20]
	bfi	x20, x8, #32, #32
	b	.LBB230_27
.LBB230_10:                             // %"$17"
	adrp	x22, env
	ldr	x8, [x22, :lo12:env]
	mov	x24, sp
	sub	x23, x24, #16                   // =16
	mov	sp, x23
	lsr	x9, x0, #32
	stp	w0, w9, [x24, #-16]
	lsr	x9, x8, #32
	stp	w8, w9, [x24, #-8]
	str	x23, [x22, :lo12:env]
	ldp	w8, w9, [x0]
	bfi	x8, x9, #32, #32
	ldp	w21, w9, [x0, #8]
	bfi	x21, x9, #32, #32
	mov	x0, x8
	mov	x1, x21
	bl	cons
	mov	x20, x0
	lsr	x8, x0, #32
	stp	w20, w8, [x24, #-16]
.LBB230_11:                             // %"$18"
                                        // =>This Inner Loop Header: Depth=1
	mov	x24, x0
	tst	x21, #0xf
	b.ne	.LBB230_14
// %bb.12:                              // %"$19"
                                        //   in Loop: Header=BB230_11 Depth=1
	ldp	w0, w8, [x21]
	bfi	x0, x8, #32, #32
	ldp	w21, w8, [x21, #8]
	bfi	x21, x8, #32, #32
	mov	x1, x21
	bl	cons
	lsr	x8, x0, #32
	stp	w0, w8, [x24, #8]
	b	.LBB230_11
.LBB230_13:                             // %"$31"
                                        //   in Loop: Header=BB230_14 Depth=1
	ldp	w9, w8, [x25, #8]
	bfi	x9, x8, #32, #32
	str	x9, [x22, :lo12:env]
.LBB230_14:                             // %"$21"
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB230_20 Depth 2
	ldp	w19, w8, [x19, #8]
	bfi	x19, x8, #32, #32
	ldrb	w8, [x19, #8]
	tst	w8, #0xf
	b.ne	.LBB230_21
// %bb.15:                              // %"$22"
                                        //   in Loop: Header=BB230_14 Depth=1
	ldp	w21, w8, [x19]
	bfi	x21, x8, #32, #32
	tst	x21, #0x6
	b.ne	.LBB230_19
// %bb.16:                              // %"$25"
                                        //   in Loop: Header=BB230_14 Depth=1
	tbz	w21, #3, .LBB230_18
// %bb.17:                              // %"$28"
                                        //   in Loop: Header=BB230_14 Depth=1
	ldp	w21, w8, [x21]
	bfi	x21, x8, #32, #32
	b	.LBB230_19
.LBB230_18:                             // %"$27"
                                        //   in Loop: Header=BB230_14 Depth=1
	mov	x0, x21
	bl	evList
	mov	x21, x0
.LBB230_19:                             // %"$24"
                                        //   in Loop: Header=BB230_14 Depth=1
	ldr	x8, [x22, :lo12:env]
	mov	x9, sp
	sub	x25, x9, #16                    // =16
	mov	sp, x25
	lsr	x10, x21, #32
	lsr	x11, x8, #32
	stp	w21, w10, [x9, #-16]
	stp	w8, w11, [x9, #-8]
	str	x25, [x22, :lo12:env]
	tst	x21, #0xf
	b.ne	.LBB230_13
.LBB230_20:                             // %"$30"
                                        //   Parent Loop BB230_14 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	w0, w8, [x21]
	bfi	x0, x8, #32, #32
	ldp	w21, w8, [x21, #8]
	bfi	x21, x8, #32, #32
	mov	x1, x21
	bl	cons
	lsr	x8, x0, #32
	stp	w0, w8, [x24, #8]
	mov	x24, x0
	tst	x21, #0xf
	b.eq	.LBB230_20
	b	.LBB230_13
.LBB230_21:                             // %"$23"
	ldp	w0, w8, [x19]
	bfi	x0, x8, #32, #32
	tst	x0, #0x6
	b.ne	.LBB230_26
// %bb.22:                              // %"$33"
	tbz	w0, #3, .LBB230_25
// %bb.23:                              // %"$36"
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB230_26
.LBB230_24:                             // %"$9"
	mov	x0, x20
	bl	evList
	mov	x20, x0
	b	.LBB230_27
.LBB230_25:                             // %"$35"
	bl	evList
.LBB230_26:                             // %"$32"
	lsr	x8, x0, #32
	stp	w0, w8, [x24, #8]
	ldp	w9, w8, [x23, #8]
	bfi	x9, x8, #32, #32
	str	x9, [x22, :lo12:env]
.LBB230_27:                             // %"$4"
	mov	x0, x20
	mov	sp, x29
	ldp	x20, x19, [sp, #64]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #48]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #32]             // 16-byte Folded Reload
	ldr	x25, [sp, #16]                  // 8-byte Folded Reload
	ldp	x29, x30, [sp], #80             // 16-byte Folded Reload
	ret
.Lfunc_end230:
	.size	_append, .Lfunc_end230-_append
	.cfi_endproc
                                        // -- End function
	.globl	_delete                         // -- Begin function _delete
	.p2align	4
	.type	_delete,@function
_delete:                                // @_delete
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-80]!           // 16-byte Folded Spill
	stp	x26, x25, [sp, #16]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #32]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #48]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #64]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 80
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w30, -72
	.cfi_offset w29, -80
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w19, w8, [x9]
	bfi	x19, x8, #32, #32
	ldp	w21, w8, [x9, #8]
	bfi	x21, x8, #32, #32
	tst	x19, #0x6
	b.ne	.LBB231_4
// %bb.1:                               // %"$3"
	tbz	w19, #3, .LBB231_3
// %bb.2:                               // %"$6"
	ldp	w19, w8, [x19]
	bfi	x19, x8, #32, #32
	b	.LBB231_4
.LBB231_3:                              // %"$5"
	mov	x0, x19
	bl	evList
	mov	x19, x0
.LBB231_4:                              // %"$2"
	adrp	x24, env
	ldr	x8, [x24, :lo12:env]
	mov	x9, sp
	sub	x25, x9, #16                    // =16
	mov	sp, x25
	lsr	x10, x19, #32
	stp	w19, w10, [x9, #-16]
	lsr	x10, x8, #32
	stp	w8, w10, [x9, #-8]
	str	x25, [x24, :lo12:env]
	ldp	w20, w8, [x21]
	bfi	x20, x8, #32, #32
	ldp	w21, w8, [x21, #8]
	bfi	x21, x8, #32, #32
	tst	x20, #0x6
	b.ne	.LBB231_8
// %bb.5:                               // %"$8"
	tbz	w20, #3, .LBB231_7
// %bb.6:                               // %"$11"
	ldp	w20, w8, [x20]
	bfi	x20, x8, #32, #32
	b	.LBB231_8
.LBB231_7:                              // %"$10"
	mov	x0, x20
	bl	evList
	mov	x20, x0
.LBB231_8:                              // %"$7"
	ldr	x8, [x24, :lo12:env]
	mov	x9, sp
	sub	x10, x9, #16                    // =16
	mov	sp, x10
	lsr	x11, x20, #32
	stp	w20, w11, [x9, #-16]
	lsr	x11, x8, #32
	stp	w8, w11, [x9, #-8]
	str	x10, [x24, :lo12:env]
	ldp	w21, w8, [x21]
	bfi	x21, x8, #32, #32
	tst	x21, #0x6
	b.ne	.LBB231_12
// %bb.9:                               // %"$13"
	tbz	w21, #3, .LBB231_11
// %bb.10:                              // %"$16"
	ldp	w21, w8, [x21]
	bfi	x21, x8, #32, #32
	b	.LBB231_12
.LBB231_11:                             // %"$15"
	mov	x0, x21
	bl	evList
	mov	x21, x0
.LBB231_12:                             // %"$12"
	adrp	x22, SymTab+8
	add	x22, x22, :lo12:SymTab+8
.LBB231_13:                             // %"$17"
                                        // =>This Inner Loop Header: Depth=1
	tst	x20, #0xf
	b.ne	.LBB231_23
// %bb.14:                              // %"$18"
                                        //   in Loop: Header=BB231_13 Depth=1
	ldp	w1, w8, [x20]
	bfi	x1, x8, #32, #32
	mov	x0, x19
	bl	equal
	tbz	w0, #0, .LBB231_16
// %bb.15:                              // %"$21"
                                        //   in Loop: Header=BB231_13 Depth=1
	ldp	w20, w8, [x20, #8]
	bfi	x20, x8, #32, #32
	cmp	x21, x22
	b.ne	.LBB231_13
	b	.LBB231_23
.LBB231_16:                             // %"$22"
	ldp	w0, w8, [x20]
	bfi	x0, x8, #32, #32
	mov	x1, x22
	bl	cons
	mov	x23, x0
	ldr	x8, [x24, :lo12:env]
	mov	x9, sp
	sub	x10, x9, #16                    // =16
	mov	sp, x10
	lsr	x11, x0, #32
	lsr	x12, x8, #32
	stp	w23, w11, [x9, #-16]
	stp	w8, w12, [x9, #-8]
	mov	x26, x0
	str	x10, [x24, :lo12:env]
	b	.LBB231_18
.LBB231_17:                             // %"$27"
                                        //   in Loop: Header=BB231_18 Depth=1
	ldp	w0, w8, [x20]
	bfi	x0, x8, #32, #32
	mov	x1, x22
	bl	cons
	lsr	x8, x0, #32
	stp	w0, w8, [x26, #8]
	mov	x26, x0
.LBB231_18:                             // %"$23"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w20, w8, [x20, #8]
	bfi	x20, x8, #32, #32
	tst	x20, #0xf
	b.ne	.LBB231_22
// %bb.19:                              // %"$24"
                                        //   in Loop: Header=BB231_18 Depth=1
	ldp	w1, w8, [x20]
	bfi	x1, x8, #32, #32
	mov	x0, x19
	bl	equal
	tbz	w0, #0, .LBB231_17
// %bb.20:                              // %"$28"
                                        //   in Loop: Header=BB231_18 Depth=1
	cmp	x21, x22
	b.ne	.LBB231_18
// %bb.21:                              // %"$31"
	ldp	w20, w8, [x20, #8]
	bfi	x20, x8, #32, #32
.LBB231_22:                             // %"$25"
	lsr	x8, x20, #32
	stp	w20, w8, [x26, #8]
	mov	x20, x23
.LBB231_23:                             // %"$19"
	ldp	w9, w8, [x25, #8]
	bfi	x9, x8, #32, #32
	str	x9, [x24, :lo12:env]
	mov	x0, x20
	mov	sp, x29
	ldp	x20, x19, [sp, #64]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #48]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #32]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #80             // 16-byte Folded Reload
	ret
.Lfunc_end231:
	.size	_delete, .Lfunc_end231-_delete
	.cfi_endproc
                                        // -- End function
	.globl	_delq                           // -- Begin function _delq
	.p2align	4
	.type	_delq,@function
_delq:                                  // @_delq
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-80]!           // 16-byte Folded Spill
	stp	x26, x25, [sp, #16]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #32]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #48]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #64]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 80
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w30, -72
	.cfi_offset w29, -80
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w19, w8, [x9]
	bfi	x19, x8, #32, #32
	ldp	w21, w8, [x9, #8]
	bfi	x21, x8, #32, #32
	tst	x19, #0x6
	b.ne	.LBB232_4
// %bb.1:                               // %"$3"
	tbz	w19, #3, .LBB232_3
// %bb.2:                               // %"$6"
	ldp	w19, w8, [x19]
	bfi	x19, x8, #32, #32
	b	.LBB232_4
.LBB232_3:                              // %"$5"
	mov	x0, x19
	bl	evList
	mov	x19, x0
.LBB232_4:                              // %"$2"
	adrp	x24, env
	ldr	x8, [x24, :lo12:env]
	mov	x9, sp
	sub	x25, x9, #16                    // =16
	mov	sp, x25
	lsr	x10, x19, #32
	stp	w19, w10, [x9, #-16]
	lsr	x10, x8, #32
	stp	w8, w10, [x9, #-8]
	str	x25, [x24, :lo12:env]
	ldp	w20, w8, [x21]
	bfi	x20, x8, #32, #32
	ldp	w21, w8, [x21, #8]
	bfi	x21, x8, #32, #32
	tst	x20, #0x6
	b.ne	.LBB232_8
// %bb.5:                               // %"$8"
	tbz	w20, #3, .LBB232_7
// %bb.6:                               // %"$11"
	ldp	w20, w8, [x20]
	bfi	x20, x8, #32, #32
	b	.LBB232_8
.LBB232_7:                              // %"$10"
	mov	x0, x20
	bl	evList
	mov	x20, x0
.LBB232_8:                              // %"$7"
	ldr	x8, [x24, :lo12:env]
	mov	x9, sp
	sub	x10, x9, #16                    // =16
	mov	sp, x10
	lsr	x11, x20, #32
	stp	w20, w11, [x9, #-16]
	lsr	x11, x8, #32
	stp	w8, w11, [x9, #-8]
	str	x10, [x24, :lo12:env]
	ldp	w21, w8, [x21]
	bfi	x21, x8, #32, #32
	tst	x21, #0x6
	b.ne	.LBB232_12
// %bb.9:                               // %"$13"
	tbz	w21, #3, .LBB232_11
// %bb.10:                              // %"$16"
	ldp	w21, w8, [x21]
	bfi	x21, x8, #32, #32
	b	.LBB232_12
.LBB232_11:                             // %"$15"
	mov	x0, x21
	bl	evList
	mov	x21, x0
.LBB232_12:                             // %"$12"
	adrp	x22, SymTab+8
	add	x22, x22, :lo12:SymTab+8
.LBB232_13:                             // %"$17"
                                        // =>This Inner Loop Header: Depth=1
	tst	x20, #0xf
	b.ne	.LBB232_23
// %bb.14:                              // %"$18"
                                        //   in Loop: Header=BB232_13 Depth=1
	ldp	w9, w8, [x20]
	bfi	x9, x8, #32, #32
	cmp	x19, x9
	b.ne	.LBB232_16
// %bb.15:                              // %"$21"
                                        //   in Loop: Header=BB232_13 Depth=1
	ldp	w20, w8, [x20, #8]
	bfi	x20, x8, #32, #32
	cmp	x21, x22
	b.ne	.LBB232_13
	b	.LBB232_23
.LBB232_16:                             // %"$22"
	ldp	w0, w8, [x20]
	bfi	x0, x8, #32, #32
	mov	x1, x22
	bl	cons
	mov	x23, x0
	ldr	x8, [x24, :lo12:env]
	mov	x9, sp
	sub	x10, x9, #16                    // =16
	mov	sp, x10
	lsr	x11, x0, #32
	lsr	x12, x8, #32
	stp	w23, w11, [x9, #-16]
	stp	w8, w12, [x9, #-8]
	mov	x26, x0
	str	x10, [x24, :lo12:env]
	b	.LBB232_18
.LBB232_17:                             // %"$27"
                                        //   in Loop: Header=BB232_18 Depth=1
	ldp	w0, w8, [x20]
	bfi	x0, x8, #32, #32
	mov	x1, x22
	bl	cons
	lsr	x8, x0, #32
	stp	w0, w8, [x26, #8]
	mov	x26, x0
.LBB232_18:                             // %"$23"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w20, w8, [x20, #8]
	bfi	x20, x8, #32, #32
	tst	x20, #0xf
	b.ne	.LBB232_22
// %bb.19:                              // %"$24"
                                        //   in Loop: Header=BB232_18 Depth=1
	ldp	w9, w8, [x20]
	bfi	x9, x8, #32, #32
	cmp	x19, x9
	b.ne	.LBB232_17
// %bb.20:                              // %"$28"
                                        //   in Loop: Header=BB232_18 Depth=1
	cmp	x21, x22
	b.ne	.LBB232_18
// %bb.21:                              // %"$31"
	ldp	w20, w8, [x20, #8]
	bfi	x20, x8, #32, #32
.LBB232_22:                             // %"$25"
	lsr	x8, x20, #32
	stp	w20, w8, [x26, #8]
	mov	x20, x23
.LBB232_23:                             // %"$19"
	ldp	w9, w8, [x25, #8]
	bfi	x9, x8, #32, #32
	str	x9, [x24, :lo12:env]
	mov	x0, x20
	mov	sp, x29
	ldp	x20, x19, [sp, #64]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #48]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #32]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #80             // 16-byte Folded Reload
	ret
.Lfunc_end232:
	.size	_delq, .Lfunc_end232-_delq
	.cfi_endproc
                                        // -- End function
	.globl	_replace                        // -- Begin function _replace
	.p2align	4
	.type	_replace,@function
_replace:                               // @_replace
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-96]!           // 16-byte Folded Spill
	stp	x28, x27, [sp, #16]             // 16-byte Folded Spill
	stp	x26, x25, [sp, #32]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #48]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #64]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #80]             // 16-byte Folded Spill
	mov	x29, sp
	sub	sp, sp, #16                     // =16
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	ldp	w20, w8, [x0, #8]
	bfi	x20, x8, #32, #32
	ldp	w19, w8, [x20]
	bfi	x19, x8, #32, #32
	tst	x19, #0x6
	b.ne	.LBB233_4
// %bb.1:                               // %"$3"
	tbz	w19, #3, .LBB233_3
// %bb.2:                               // %"$6"
	ldp	w19, w8, [x19]
	bfi	x19, x8, #32, #32
	b	.LBB233_4
.LBB233_3:                              // %"$5"
	mov	x0, x19
	bl	evList
	mov	x19, x0
.LBB233_4:                              // %"$2"
	adrp	x21, env
	ldr	x8, [x21, :lo12:env]
	mov	x9, sp
	sub	x12, x9, #16                    // =16
	mov	sp, x12
	lsr	x10, x19, #32
	lsr	x11, x8, #32
	stp	w19, w10, [x9, #-16]
	stp	w8, w11, [x9, #-8]
	tst	x19, #0xf
	str	x12, [x21, :lo12:env]
	b.ne	.LBB233_28
// %bb.5:                               // %"$8"
	sub	x8, sp, #16                     // =16
	stp	x12, x8, [x29, #-16]            // 16-byte Folded Spill
	mov	sp, x8
	mov	x25, xzr
	adrp	x22, SymTab+8
	add	x22, x22, :lo12:SymTab+8
	b	.LBB233_8
.LBB233_6:                              // %"$21"
                                        //   in Loop: Header=BB233_8 Depth=1
	bl	evList
.LBB233_7:                              // %"$18"
                                        //   in Loop: Header=BB233_8 Depth=1
	mov	x8, sp
	sub	x22, x8, #16                    // =16
	mov	sp, x22
	lsr	x9, x0, #32
	stp	w0, w9, [x8, #-16]
	ldr	x9, [x21, :lo12:env]
	lsr	x10, x9, #32
	stp	w9, w10, [x8, #-8]
	str	x22, [x21, :lo12:env]
	add	x25, x25, #1                    // =1
.LBB233_8:                              // %"$10"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w8, w9, [x20, #8]
	bfi	x8, x9, #32, #32
	tst	x8, #0xf
	b.ne	.LBB233_16
// %bb.9:                               // %"$11"
                                        //   in Loop: Header=BB233_8 Depth=1
	ldp	w0, w9, [x8]
	bfi	x0, x9, #32, #32
	ldp	w20, w9, [x8, #8]
	bfi	x20, x9, #32, #32
	tst	x0, #0x6
	b.ne	.LBB233_13
// %bb.10:                              // %"$14"
                                        //   in Loop: Header=BB233_8 Depth=1
	tbz	w0, #3, .LBB233_12
// %bb.11:                              // %"$17"
                                        //   in Loop: Header=BB233_8 Depth=1
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB233_13
.LBB233_12:                             // %"$16"
                                        //   in Loop: Header=BB233_8 Depth=1
	bl	evList
.LBB233_13:                             // %"$13"
                                        //   in Loop: Header=BB233_8 Depth=1
	mov	x8, sp
	sub	x9, x8, #16                     // =16
	mov	sp, x9
	lsr	x10, x0, #32
	stp	w0, w10, [x8, #-16]
	ldr	x10, [x21, :lo12:env]
	lsr	x11, x10, #32
	stp	w10, w11, [x8, #-8]
	str	x9, [x21, :lo12:env]
	ldp	w0, w8, [x20]
	bfi	x0, x8, #32, #32
	tst	x0, #0x6
	b.ne	.LBB233_7
// %bb.14:                              // %"$19"
                                        //   in Loop: Header=BB233_8 Depth=1
	tbz	w0, #3, .LBB233_6
// %bb.15:                              // %"$22"
                                        //   in Loop: Header=BB233_8 Depth=1
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB233_7
.LBB233_16:                             // %"$12"
	ldp	w20, w8, [x19]
	bfi	x20, x8, #32, #32
	ldp	w27, w8, [x19, #8]
	bfi	x27, x8, #32, #32
	mov	x19, x25
	mov	x23, x22
.LBB233_17:                             // %"$23"
                                        // =>This Inner Loop Header: Depth=1
	subs	x19, x19, #1                    // =1
	b.mi	.LBB233_20
// %bb.18:                              // %"$24"
                                        //   in Loop: Header=BB233_17 Depth=1
	ldp	w21, w24, [x23]
	ldp	w9, w8, [x23, #8]
	bfi	x9, x8, #32, #32
	ldp	w1, w8, [x9]
	bfi	x1, x8, #32, #32
	ldp	w23, w8, [x9, #8]
	bfi	x23, x8, #32, #32
	mov	x0, x20
	bl	equal
	tbz	w0, #0, .LBB233_17
// %bb.19:
	bfi	x21, x24, #32, #32
	mov	x20, x21
.LBB233_20:                             // %"$25"
	adrp	x10, env
	ldr	x8, [x10, :lo12:env]
	lsr	x9, x8, #32
	ldur	x21, [x29, #-8]                 // 8-byte Folded Reload
	stp	w8, w9, [x21, #8]
	str	x21, [x10, :lo12:env]
	adrp	x19, SymTab+8
	add	x19, x19, :lo12:SymTab+8
	mov	x0, x20
	mov	x1, x19
	bl	cons
	mov	x20, x0
	lsr	x8, x0, #32
	stp	w20, w8, [x21]
	b	.LBB233_23
.LBB233_21:                             //   in Loop: Header=BB233_23 Depth=1
	bfi	x21, x23, #32, #32
	mov	x24, x21
.LBB233_22:                             // %"$33"
                                        //   in Loop: Header=BB233_23 Depth=1
	mov	x0, x24
	mov	x1, x19
	bl	cons
	lsr	x8, x0, #32
	stp	w0, w8, [x20, #8]
	mov	x20, x0
.LBB233_23:                             // %"$28"
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB233_25 Depth 2
	tst	x27, #0xf
	b.ne	.LBB233_27
// %bb.24:                              // %"$29"
                                        //   in Loop: Header=BB233_23 Depth=1
	ldp	w24, w8, [x27]
	bfi	x24, x8, #32, #32
	ldp	w27, w8, [x27, #8]
	bfi	x27, x8, #32, #32
	mov	x28, x25
	mov	x26, x22
.LBB233_25:                             // %"$31"
                                        //   Parent Loop BB233_23 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	subs	x28, x28, #1                    // =1
	b.mi	.LBB233_22
// %bb.26:                              // %"$32"
                                        //   in Loop: Header=BB233_25 Depth=2
	ldp	w21, w23, [x26]
	ldp	w9, w8, [x26, #8]
	bfi	x9, x8, #32, #32
	ldp	w1, w8, [x9]
	bfi	x1, x8, #32, #32
	ldp	w26, w8, [x9, #8]
	bfi	x26, x8, #32, #32
	mov	x0, x24
	bl	equal
	tbz	w0, #0, .LBB233_25
	b	.LBB233_21
.LBB233_27:                             // %"$30"
	ldp	x12, x9, [x29, #-16]            // 16-byte Folded Reload
	ldp	w19, w8, [x9]
	bfi	x19, x8, #32, #32
	adrp	x21, env
.LBB233_28:                             // %"$9"
	ldp	w9, w8, [x12, #8]
	bfi	x9, x8, #32, #32
	str	x9, [x21, :lo12:env]
	mov	x0, x19
	mov	sp, x29
	ldp	x20, x19, [sp, #80]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #64]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #48]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #32]             // 16-byte Folded Reload
	ldp	x28, x27, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #96             // 16-byte Folded Reload
	ret
.Lfunc_end233:
	.size	_replace, .Lfunc_end233-_replace
	.cfi_endproc
                                        // -- End function
	.globl	_insert                         // -- Begin function _insert
	.p2align	4
	.type	_insert,@function
_insert:                                // @_insert
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-80]!           // 16-byte Folded Spill
	stp	x26, x25, [sp, #16]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #32]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #48]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #64]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 80
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w30, -72
	.cfi_offset w29, -80
	ldp	w20, w8, [x0, #8]
	bfi	x20, x8, #32, #32
	mov	x1, x20
	bl	evCnt
	mov	x19, x0
	ldp	w21, w8, [x20, #8]
	bfi	x21, x8, #32, #32
	ldp	w20, w8, [x21]
	bfi	x20, x8, #32, #32
	tst	x20, #0x6
	b.ne	.LBB234_4
// %bb.1:                               // %"$3"
	tbz	w20, #3, .LBB234_3
// %bb.2:                               // %"$6"
	ldp	w20, w8, [x20]
	bfi	x20, x8, #32, #32
	b	.LBB234_4
.LBB234_3:                              // %"$5"
	mov	x0, x20
	bl	evList
	mov	x20, x0
.LBB234_4:                              // %"$2"
	adrp	x24, env
	ldr	x8, [x24, :lo12:env]
	mov	x9, sp
	sub	x25, x9, #16                    // =16
	mov	sp, x25
	lsr	x10, x20, #32
	stp	w20, w10, [x9, #-16]
	lsr	x10, x8, #32
	stp	w8, w10, [x9, #-8]
	str	x25, [x24, :lo12:env]
	ldp	w9, w8, [x21, #8]
	bfi	x9, x8, #32, #32
	ldp	w21, w8, [x9]
	bfi	x21, x8, #32, #32
	tst	x21, #0x6
	b.ne	.LBB234_7
// %bb.5:                               // %"$8"
	tbz	w21, #3, .LBB234_10
// %bb.6:                               // %"$11"
	ldp	w21, w8, [x21]
	bfi	x21, x8, #32, #32
.LBB234_7:                              // %"$7"
	tst	x20, #0xf
	b.eq	.LBB234_11
.LBB234_8:
	mov	w8, #1
	cbz	w8, .LBB234_12
.LBB234_9:                              // %"$14"
	mov	x0, x21
	mov	x1, x20
	bl	cons
	mov	x22, x0
	b	.LBB234_16
.LBB234_10:                             // %"$10"
	mov	x0, x21
	bl	evList
	mov	x21, x0
	tst	x20, #0xf
	b.ne	.LBB234_8
.LBB234_11:                             // %"$13"
	sub	x19, x19, #1                    // =1
	cmp	x19, #1                         // =1
	cset	w8, lt
	cbnz	w8, .LBB234_9
.LBB234_12:                             // %"$15"
	ldp	w0, w8, [x20]
	bfi	x0, x8, #32, #32
	adrp	x23, SymTab+8
	add	x23, x23, :lo12:SymTab+8
	mov	x1, x23
	bl	cons
	mov	x22, x0
	ldr	x8, [x24, :lo12:env]
	mov	x9, sp
	sub	x10, x9, #16                    // =16
	mov	sp, x10
	lsr	x11, x0, #32
	lsr	x12, x8, #32
	stp	w22, w11, [x9, #-16]
	stp	w8, w12, [x9, #-8]
	mov	x26, x0
	str	x10, [x24, :lo12:env]
.LBB234_13:                             // %"$17"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w20, w8, [x20, #8]
	bfi	x20, x8, #32, #32
	subs	x8, x19, #1                     // =1
	cset	w9, ne
	tst	x20, #0xf
	csel	x19, x19, x8, ne
	csel	w8, wzr, w9, ne
	cbz	w8, .LBB234_15
// %bb.14:                              // %"$20"
                                        //   in Loop: Header=BB234_13 Depth=1
	ldp	w0, w8, [x20]
	bfi	x0, x8, #32, #32
	mov	x1, x23
	bl	cons
	lsr	x8, x0, #32
	stp	w0, w8, [x26, #8]
	mov	x26, x0
	b	.LBB234_13
.LBB234_15:                             // %"$21"
	mov	x0, x21
	mov	x1, x20
	bl	cons
	lsr	x8, x0, #32
	stp	w0, w8, [x26, #8]
.LBB234_16:                             // %"$16"
	ldp	w9, w8, [x25, #8]
	bfi	x9, x8, #32, #32
	str	x9, [x24, :lo12:env]
	mov	x0, x22
	mov	sp, x29
	ldp	x20, x19, [sp, #64]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #48]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #32]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #80             // 16-byte Folded Reload
	ret
.Lfunc_end234:
	.size	_insert, .Lfunc_end234-_insert
	.cfi_endproc
                                        // -- End function
	.globl	_remove                         // -- Begin function _remove
	.p2align	4
	.type	_remove,@function
_remove:                                // @_remove
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-80]!           // 16-byte Folded Spill
	str	x25, [sp, #16]                  // 8-byte Folded Spill
	stp	x24, x23, [sp, #32]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #48]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #64]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 80
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -64
	.cfi_offset w30, -72
	.cfi_offset w29, -80
	ldp	w19, w8, [x0, #8]
	bfi	x19, x8, #32, #32
	mov	x1, x19
	bl	evCnt
	mov	x20, x0
	ldp	w9, w8, [x19, #8]
	bfi	x9, x8, #32, #32
	ldp	w19, w8, [x9]
	bfi	x19, x8, #32, #32
	tst	x19, #0x6
	b.ne	.LBB235_4
// %bb.1:                               // %"$3"
	tbz	w19, #3, .LBB235_3
// %bb.2:                               // %"$6"
	ldp	w19, w8, [x19]
	bfi	x19, x8, #32, #32
	b	.LBB235_4
.LBB235_3:                              // %"$5"
	mov	x0, x19
	bl	evList
	mov	x19, x0
.LBB235_4:                              // %"$2"
	adrp	x22, env
	ldr	x8, [x22, :lo12:env]
	mov	x9, sp
	sub	x23, x9, #16                    // =16
	mov	sp, x23
	lsr	x10, x19, #32
	lsr	x11, x8, #32
	stp	w19, w10, [x9, #-16]
	sub	x10, x20, #1                    // =1
	lsr	x12, x10, #63
	tst	x19, #0xf
	stp	w8, w11, [x9, #-8]
	mov	w8, #1
	csel	x24, x20, x10, ne
	csel	w8, w8, w12, ne
	str	x23, [x22, :lo12:env]
	tbz	w8, #0, .LBB235_6
// %bb.5:
	mov	x20, x19
	b	.LBB235_14
.LBB235_6:                              // %"$10"
	cbz	x24, .LBB235_11
// %bb.7:                               // %"$12"
	ldp	w0, w8, [x19]
	bfi	x0, x8, #32, #32
	adrp	x21, SymTab+8
	add	x21, x21, :lo12:SymTab+8
	mov	x1, x21
	bl	cons
	mov	x20, x0
	ldr	x8, [x22, :lo12:env]
	mov	x9, sp
	sub	x10, x9, #16                    // =16
	mov	sp, x10
	lsr	x11, x0, #32
	lsr	x12, x8, #32
	stp	w20, w11, [x9, #-16]
	stp	w8, w12, [x9, #-8]
	sub	x25, x24, #1                    // =1
	mov	x24, x0
	str	x10, [x22, :lo12:env]
.LBB235_8:                              // %"$14"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w19, w8, [x19, #8]
	bfi	x19, x8, #32, #32
	tst	x19, #0xf
	b.ne	.LBB235_13
// %bb.9:                               // %"$15"
                                        //   in Loop: Header=BB235_8 Depth=1
	cbz	x25, .LBB235_12
// %bb.10:                              // %"$18"
                                        //   in Loop: Header=BB235_8 Depth=1
	ldp	w0, w8, [x19]
	bfi	x0, x8, #32, #32
	mov	x1, x21
	bl	cons
	lsr	x8, x0, #32
	stp	w0, w8, [x24, #8]
	sub	x25, x25, #1                    // =1
	mov	x24, x0
	b	.LBB235_8
.LBB235_11:                             // %"$13"
	ldp	w20, w8, [x19, #8]
	bfi	x20, x8, #32, #32
	b	.LBB235_14
.LBB235_12:                             // %"$19"
	ldp	w19, w8, [x19, #8]
	bfi	x19, x8, #32, #32
.LBB235_13:                             // %"$16"
	lsr	x8, x19, #32
	stp	w19, w8, [x24, #8]
.LBB235_14:                             // %"$7"
	ldp	w9, w8, [x23, #8]
	bfi	x9, x8, #32, #32
	str	x9, [x22, :lo12:env]
	mov	x0, x20
	mov	sp, x29
	ldp	x20, x19, [sp, #64]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #48]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #32]             // 16-byte Folded Reload
	ldr	x25, [sp, #16]                  // 8-byte Folded Reload
	ldp	x29, x30, [sp], #80             // 16-byte Folded Reload
	ret
.Lfunc_end235:
	.size	_remove, .Lfunc_end235-_remove
	.cfi_endproc
                                        // -- End function
	.globl	_place                          // -- Begin function _place
	.p2align	4
	.type	_place,@function
_place:                                 // @_place
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-80]!           // 16-byte Folded Spill
	stp	x26, x25, [sp, #16]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #32]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #48]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #64]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 80
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w30, -72
	.cfi_offset w29, -80
	ldp	w19, w8, [x0, #8]
	bfi	x19, x8, #32, #32
	mov	x1, x19
	bl	evCnt
	mov	x20, x0
	ldp	w21, w8, [x19, #8]
	bfi	x21, x8, #32, #32
	ldp	w19, w8, [x21]
	bfi	x19, x8, #32, #32
	tst	x19, #0x6
	b.ne	.LBB236_4
// %bb.1:                               // %"$3"
	tbz	w19, #3, .LBB236_3
// %bb.2:                               // %"$6"
	ldp	w19, w8, [x19]
	bfi	x19, x8, #32, #32
	b	.LBB236_4
.LBB236_3:                              // %"$5"
	mov	x0, x19
	bl	evList
	mov	x19, x0
.LBB236_4:                              // %"$2"
	adrp	x24, env
	ldr	x8, [x24, :lo12:env]
	mov	x9, sp
	sub	x25, x9, #16                    // =16
	mov	sp, x25
	lsr	x10, x19, #32
	stp	w19, w10, [x9, #-16]
	lsr	x10, x8, #32
	stp	w8, w10, [x9, #-8]
	str	x25, [x24, :lo12:env]
	ldp	w9, w8, [x21, #8]
	bfi	x9, x8, #32, #32
	ldp	w22, w8, [x9]
	bfi	x22, x8, #32, #32
	tst	x22, #0x6
	b.ne	.LBB236_7
// %bb.5:                               // %"$8"
	tbz	w22, #3, .LBB236_11
// %bb.6:                               // %"$11"
	ldp	w22, w8, [x22]
	bfi	x22, x8, #32, #32
.LBB236_7:                              // %"$7"
	tst	x19, #0xf
	b.eq	.LBB236_12
.LBB236_8:                              // %"$14"
	ldp	w21, w8, [x22]
	bfi	x21, x8, #32, #32
	tst	x21, #0x6
	b.ne	.LBB236_22
// %bb.9:                               // %"$16"
	tbz	w21, #3, .LBB236_18
// %bb.10:                              // %"$19"
	ldp	w21, w8, [x21]
	bfi	x21, x8, #32, #32
	b	.LBB236_22
.LBB236_11:                             // %"$10"
	mov	x0, x22
	bl	evList
	mov	x22, x0
	tst	x19, #0xf
	b.ne	.LBB236_8
.LBB236_12:                             // %"$13"
	sub	x8, x20, #1                     // =1
	cmp	x8, #0                          // =0
	b.gt	.LBB236_14
// %bb.13:                              // %"$21"
	ldp	w1, w8, [x19, #8]
	bfi	x1, x8, #32, #32
	mov	x0, x22
	bl	cons
	mov	x21, x0
	b	.LBB236_22
.LBB236_14:                             // %"$20"
	ldp	w0, w8, [x19]
	bfi	x0, x8, #32, #32
	adrp	x23, SymTab+8
	add	x23, x23, :lo12:SymTab+8
	mov	x1, x23
	bl	cons
	mov	x21, x0
	ldr	x8, [x24, :lo12:env]
	mov	x9, sp
	sub	x10, x9, #16                    // =16
	mov	sp, x10
	lsr	x11, x0, #32
	lsr	x12, x8, #32
	stp	w21, w11, [x9, #-16]
	stp	w8, w12, [x9, #-8]
	sub	x26, x20, #2                    // =2
	mov	x20, x0
	str	x10, [x24, :lo12:env]
.LBB236_15:                             // %"$22"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w19, w8, [x19, #8]
	bfi	x19, x8, #32, #32
	tst	x19, #0xf
	b.ne	.LBB236_19
// %bb.16:                              // %"$23"
                                        //   in Loop: Header=BB236_15 Depth=1
	cbz	x26, .LBB236_20
// %bb.17:                              // %"$26"
                                        //   in Loop: Header=BB236_15 Depth=1
	ldp	w0, w8, [x19]
	bfi	x0, x8, #32, #32
	mov	x1, x23
	bl	cons
	lsr	x8, x0, #32
	stp	w0, w8, [x20, #8]
	sub	x26, x26, #1                    // =1
	mov	x20, x0
	b	.LBB236_15
.LBB236_18:                             // %"$18"
	mov	x0, x21
	bl	evList
	mov	x21, x0
	b	.LBB236_22
.LBB236_19:                             // %"$25"
	mov	x0, x22
	mov	x1, x19
	b	.LBB236_21
.LBB236_20:                             // %"$27"
	ldp	w1, w8, [x19, #8]
	bfi	x1, x8, #32, #32
	mov	x0, x22
.LBB236_21:                             // %"$24"
	bl	cons
	lsr	x8, x0, #32
	stp	w0, w8, [x20, #8]
.LBB236_22:                             // %"$12"
	ldp	w9, w8, [x25, #8]
	bfi	x9, x8, #32, #32
	str	x9, [x24, :lo12:env]
	mov	x0, x21
	mov	sp, x29
	ldp	x20, x19, [sp, #64]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #48]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #32]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #80             // 16-byte Folded Reload
	ret
.Lfunc_end236:
	.size	_place, .Lfunc_end236-_place
	.cfi_endproc
                                        // -- End function
	.globl	_strip                          // -- Begin function _strip
	.p2align	4
	.type	_strip,@function
_strip:                                 // @_strip
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w0, w8, [x9]
	bfi	x0, x8, #32, #32
	tst	x0, #0x6
	b.ne	.LBB237_4
// %bb.1:                               // %"$3"
	tbz	w0, #3, .LBB237_3
// %bb.2:                               // %"$6"
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB237_4
.LBB237_3:                              // %"$5"
	bl	evList
.LBB237_4:                              // %"$7.preheader"
	adrp	x9, SymTab+200
	add	x9, x9, :lo12:SymTab+200
.LBB237_5:                              // %"$7"
                                        // =>This Inner Loop Header: Depth=1
	mov	x8, x0
	tst	x0, #0xf
	b.eq	.LBB237_7
// %bb.6:                               //   in Loop: Header=BB237_5 Depth=1
	mov	w10, wzr
	cbnz	w10, .LBB237_8
	b	.LBB237_9
.LBB237_7:                              // %"$9"
                                        //   in Loop: Header=BB237_5 Depth=1
	ldp	w11, w10, [x8]
	bfi	x11, x10, #32, #32
	cmp	x9, x11
	cset	w10, eq
	cbz	w10, .LBB237_9
.LBB237_8:                              // %"$10"
                                        //   in Loop: Header=BB237_5 Depth=1
	ldp	w0, w10, [x8, #8]
	bfi	x0, x10, #32, #32
	cmp	x0, x8
	b.ne	.LBB237_5
.LBB237_9:                              // %"$11"
	mov	x0, x8
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end237:
	.size	_strip, .Lfunc_end237-_strip
	.cfi_endproc
                                        // -- End function
	.globl	_split                          // -- Begin function _split
	.p2align	4
	.type	_split,@function
_split:                                 // @_split
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-96]!           // 16-byte Folded Spill
	stp	x28, x27, [sp, #16]             // 16-byte Folded Spill
	stp	x26, x25, [sp, #32]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #48]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #64]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #80]             // 16-byte Folded Spill
	mov	x29, sp
	sub	sp, sp, #32                     // =32
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	ldp	w21, w8, [x0, #8]
	bfi	x21, x8, #32, #32
	ldp	w19, w8, [x21]
	bfi	x19, x8, #32, #32
	tst	x19, #0x6
	b.ne	.LBB238_4
// %bb.1:                               // %"$3"
	tbz	w19, #3, .LBB238_3
// %bb.2:                               // %"$6"
	ldp	w19, w8, [x19]
	bfi	x19, x8, #32, #32
	b	.LBB238_4
.LBB238_3:                              // %"$5"
	mov	x0, x19
	bl	evList
	mov	x19, x0
.LBB238_4:                              // %"$2"
	adrp	x20, env
	ldr	x8, [x20, :lo12:env]
	mov	x9, sp
	sub	x12, x9, #16                    // =16
	mov	sp, x12
	lsr	x10, x19, #32
	lsr	x11, x8, #32
	stp	w19, w10, [x9, #-16]
	stp	w8, w11, [x9, #-8]
	tst	x19, #0xf
	str	x12, [x20, :lo12:env]
	b.ne	.LBB238_28
// %bb.5:                               // %"$10.preheader"
	stur	x12, [x29, #-24]                // 8-byte Folded Spill
	mov	x27, xzr
	adrp	x22, SymTab+8
	add	x22, x22, :lo12:SymTab+8
	mov	x26, x22
	b	.LBB238_8
.LBB238_6:                              // %"$16"
                                        //   in Loop: Header=BB238_8 Depth=1
	bl	evList
.LBB238_7:                              // %"$13"
                                        //   in Loop: Header=BB238_8 Depth=1
	mov	x8, sp
	sub	x26, x8, #16                    // =16
	mov	sp, x26
	lsr	x9, x0, #32
	stp	w0, w9, [x8, #-16]
	ldr	x9, [x20, :lo12:env]
	lsr	x10, x9, #32
	stp	w9, w10, [x8, #-8]
	str	x26, [x20, :lo12:env]
	add	x27, x27, #1                    // =1
.LBB238_8:                              // %"$10"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w21, w8, [x21, #8]
	bfi	x21, x8, #32, #32
	tst	x21, #0xf
	b.ne	.LBB238_12
// %bb.9:                               // %"$11"
                                        //   in Loop: Header=BB238_8 Depth=1
	ldp	w0, w8, [x21]
	bfi	x0, x8, #32, #32
	tst	x0, #0x6
	b.ne	.LBB238_7
// %bb.10:                              // %"$14"
                                        //   in Loop: Header=BB238_8 Depth=1
	tbz	w0, #3, .LBB238_6
// %bb.11:                              // %"$17"
                                        //   in Loop: Header=BB238_8 Depth=1
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB238_7
.LBB238_12:                             // %"$12"
	mov	x8, sp
	sub	x11, x8, #16                    // =16
	mov	sp, x11
	lsr	x12, x22, #32
	stp	w22, w12, [x8, #-16]
	ldr	x9, [x20, :lo12:env]
	lsr	x10, x9, #32
	stp	w9, w10, [x8, #-8]
	stp	x11, x12, [x29, #-16]           // 16-byte Folded Spill
	str	x11, [x20, :lo12:env]
	mov	x8, sp
	sub	x28, x8, #16                    // =16
	mov	sp, x28
	stp	w22, w12, [x8, #-16]
	ldr	x9, [x20, :lo12:env]
	lsr	x10, x9, #32
	stp	w9, w10, [x8, #-8]
	str	x28, [x20, :lo12:env]
	mov	x20, x22
	mov	x23, x22
	b	.LBB238_16
.LBB238_13:                             // %"$24"
                                        //   in Loop: Header=BB238_16 Depth=1
	add	x8, x23, #8                     // =8
.LBB238_14:                             // %"$25"
                                        //   in Loop: Header=BB238_16 Depth=1
	lsr	x9, x0, #32
	stp	w0, w9, [x8]
.LBB238_15:                             // %"$21"
                                        //   in Loop: Header=BB238_16 Depth=1
	tst	x19, #0xf
	mov	x23, x0
	b.ne	.LBB238_25
.LBB238_16:                             // %"$18"
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB238_17 Depth 2
	ldp	w21, w8, [x19]
	bfi	x21, x8, #32, #32
	ldp	w19, w8, [x19, #8]
	bfi	x19, x8, #32, #32
	mov	x24, x27
	mov	x25, x26
.LBB238_17:                             // %"$19"
                                        //   Parent Loop BB238_16 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	subs	x24, x24, #1                    // =1
	b.mi	.LBB238_21
// %bb.18:                              // %"$20"
                                        //   in Loop: Header=BB238_17 Depth=2
	ldp	w1, w8, [x25]
	bfi	x1, x8, #32, #32
	ldp	w25, w8, [x25, #8]
	bfi	x25, x8, #32, #32
	mov	x0, x21
	bl	equal
	tbz	w0, #0, .LBB238_17
// %bb.19:                              // %"$27"
                                        //   in Loop: Header=BB238_16 Depth=1
	ldp	w0, w8, [x28]
	bfi	x0, x8, #32, #32
	mov	x1, x22
	bl	cons
	cmp	x20, x22
	b.ne	.LBB238_23
// %bb.20:                              // %"$28"
                                        //   in Loop: Header=BB238_16 Depth=1
	ldur	x8, [x29, #-16]                 // 8-byte Folded Reload
	b	.LBB238_24
.LBB238_21:                             // %"$22"
                                        //   in Loop: Header=BB238_16 Depth=1
	mov	x0, x21
	mov	x1, x22
	bl	cons
	cmp	x23, x22
	b.ne	.LBB238_13
// %bb.22:                              // %"$23"
                                        //   in Loop: Header=BB238_16 Depth=1
	mov	x8, x28
	b	.LBB238_14
.LBB238_23:                             // %"$29"
                                        //   in Loop: Header=BB238_16 Depth=1
	add	x8, x20, #8                     // =8
.LBB238_24:                             // %"$30"
                                        //   in Loop: Header=BB238_16 Depth=1
	lsr	x9, x0, #32
	mov	x20, x0
	stp	w0, w9, [x8]
	mov	x0, x22
	ldur	x8, [x29, #-8]                  // 8-byte Folded Reload
	stp	w22, w8, [x28]
	b	.LBB238_15
.LBB238_25:                             // %"$32"
	ldp	w0, w8, [x28]
	bfi	x0, x8, #32, #32
	mov	x1, x22
	bl	cons
	mov	x19, x0
	cmp	x20, x22
	b.eq	.LBB238_27
// %bb.26:                              // %"$34"
	lsr	x8, x19, #32
	stp	w19, w8, [x20, #8]
	ldur	x9, [x29, #-16]                 // 8-byte Folded Reload
	ldp	w19, w8, [x9]
	bfi	x19, x8, #32, #32
.LBB238_27:                             // %"$9"
	adrp	x20, env
	ldur	x12, [x29, #-24]                // 8-byte Folded Reload
.LBB238_28:                             // %"$9"
	ldp	w9, w8, [x12, #8]
	bfi	x9, x8, #32, #32
	str	x9, [x20, :lo12:env]
	mov	x0, x19
	mov	sp, x29
	ldp	x20, x19, [sp, #80]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #64]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #48]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #32]             // 16-byte Folded Reload
	ldp	x28, x27, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #96             // 16-byte Folded Reload
	ret
.Lfunc_end238:
	.size	_split, .Lfunc_end238-_split
	.cfi_endproc
                                        // -- End function
	.globl	_reverse                        // -- Begin function _reverse
	.p2align	4
	.type	_reverse,@function
_reverse:                               // @_reverse
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-48]!           // 16-byte Folded Spill
	str	x21, [sp, #16]                  // 8-byte Folded Spill
	stp	x20, x19, [sp, #32]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 48
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -32
	.cfi_offset w30, -40
	.cfi_offset w29, -48
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w19, w8, [x9]
	bfi	x19, x8, #32, #32
	tst	x19, #0x6
	b.ne	.LBB239_4
// %bb.1:                               // %"$3"
	tbz	w19, #3, .LBB239_3
// %bb.2:                               // %"$6"
	ldp	w19, w8, [x19]
	bfi	x19, x8, #32, #32
	b	.LBB239_4
.LBB239_3:                              // %"$5"
	mov	x0, x19
	bl	evList
	mov	x19, x0
.LBB239_4:                              // %"$2"
	adrp	x20, env
	ldr	x8, [x20, :lo12:env]
	mov	x9, sp
	sub	x21, x9, #16                    // =16
	mov	sp, x21
	lsr	x10, x19, #32
	lsr	x11, x8, #32
	stp	w19, w10, [x9, #-16]
	stp	w8, w11, [x9, #-8]
	adrp	x1, SymTab+8
	add	x1, x1, :lo12:SymTab+8
	str	x21, [x20, :lo12:env]
	tst	x19, #0xf
	b.ne	.LBB239_6
.LBB239_5:                              // %"$8"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w0, w8, [x19]
	bfi	x0, x8, #32, #32
	ldp	w19, w8, [x19, #8]
	bfi	x19, x8, #32, #32
	bl	cons
	mov	x1, x0
	tst	x19, #0xf
	b.eq	.LBB239_5
.LBB239_6:                              // %"$9"
	ldp	w9, w8, [x21, #8]
	bfi	x9, x8, #32, #32
	str	x9, [x20, :lo12:env]
	mov	x0, x1
	mov	sp, x29
	ldp	x20, x19, [sp, #32]             // 16-byte Folded Reload
	ldr	x21, [sp, #16]                  // 8-byte Folded Reload
	ldp	x29, x30, [sp], #48             // 16-byte Folded Reload
	ret
.Lfunc_end239:
	.size	_reverse, .Lfunc_end239-_reverse
	.cfi_endproc
                                        // -- End function
	.globl	_flip                           // -- Begin function _flip
	.p2align	4
	.type	_flip,@function
_flip:                                  // @_flip
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-64]!           // 16-byte Folded Spill
	stp	x24, x23, [sp, #16]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #32]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #48]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 64
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w30, -56
	.cfi_offset w29, -64
	mov	x21, x0
	ldp	w20, w8, [x0, #8]
	bfi	x20, x8, #32, #32
	ldp	w19, w8, [x20]
	bfi	x19, x8, #32, #32
	tst	x19, #0x6
	b.eq	.LBB240_6
// %bb.1:                               // %"$2"
	tst	x19, #0xf
	b.ne	.LBB240_9
.LBB240_2:                              // %"$8"
	ldp	w22, w8, [x19, #8]
	bfi	x22, x8, #32, #32
	tst	x22, #0xf
	b.ne	.LBB240_9
// %bb.3:                               // %"$11"
	ldp	w20, w8, [x20, #8]
	bfi	x20, x8, #32, #32
	tst	x20, #0xf
	b.eq	.LBB240_11
// %bb.4:                               // %"$14"
	adrp	x8, SymTab+8
	add	x8, x8, :lo12:SymTab+8
	lsr	x9, x8, #32
	stp	w8, w9, [x19, #8]
.LBB240_5:                              // %"$15"
                                        // =>This Inner Loop Header: Depth=1
	mov	x0, x22
	mov	x8, x22
	ldr	w22, [x8, #8]!
	ldr	w9, [x8, #4]
	bfi	x22, x9, #32, #32
	lsr	x9, x19, #32
	stp	w19, w9, [x8]
	tst	x22, #0xf
	mov	x19, x0
	b.eq	.LBB240_5
	b	.LBB240_10
.LBB240_6:                              // %"$3"
	tbz	w19, #3, .LBB240_8
// %bb.7:                               // %"$6"
	ldp	w19, w8, [x19]
	bfi	x19, x8, #32, #32
	tst	x19, #0xf
	b.ne	.LBB240_9
	b	.LBB240_2
.LBB240_8:                              // %"$5"
	mov	x0, x19
	bl	evList
	mov	x19, x0
	tst	x19, #0xf
	b.eq	.LBB240_2
.LBB240_9:
	mov	x0, x19
.LBB240_10:                             // %"$9"
	mov	sp, x29
	ldp	x20, x19, [sp, #48]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #32]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #64             // 16-byte Folded Reload
	ret
.LBB240_11:                             // %"$13"
	adrp	x23, env
	ldr	x8, [x23, :lo12:env]
	mov	x9, sp
	sub	x10, x9, #16                    // =16
	mov	sp, x10
	lsr	x11, x19, #32
	mov	x24, x10
	stp	w19, w11, [x9, #-16]
	str	w8, [x24, #8]!
	lsr	x8, x8, #32
	str	w8, [x24, #4]
	str	x10, [x23, :lo12:env]
	mov	x0, x21
	mov	x1, x20
	bl	evCnt
	ldp	w9, w8, [x24]
	bfi	x9, x8, #32, #32
	str	x9, [x23, :lo12:env]
	sub	x8, x0, #1                      // =1
	cmp	x8, #1                          // =1
	b.lt	.LBB240_9
// %bb.12:                              // %"$22.preheader"
	mov	x0, x19
	b	.LBB240_14
.LBB240_13:                             //   in Loop: Header=BB240_14 Depth=1
	mov	w9, #1
	mov	x22, x20
	cbnz	w9, .LBB240_10
.LBB240_14:                             // %"$22"
                                        // =>This Inner Loop Header: Depth=1
	mov	x9, x0
	mov	x0, x22
	mov	x10, x22
	ldr	w11, [x10, #8]!
	ldr	w12, [x10, #4]
	stp	w11, w12, [x19, #8]
	lsr	x11, x9, #32
	stp	w9, w11, [x10]
	subs	x8, x8, #1                      // =1
	b.eq	.LBB240_13
// %bb.15:                              // %"$24"
                                        //   in Loop: Header=BB240_14 Depth=1
	ldp	w20, w9, [x19, #8]
	bfi	x20, x9, #32, #32
	tst	x20, #0xf
	cset	w9, ne
	mov	x22, x20
	cbz	w9, .LBB240_14
	b	.LBB240_10
.Lfunc_end240:
	.size	_flip, .Lfunc_end240-_flip
	.cfi_endproc
                                        // -- End function
	.globl	_trim                           // -- Begin function _trim
	.p2align	4
	.type	_trim,@function
_trim:                                  // @_trim
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-32]!           // 16-byte Folded Spill
	stp	x20, x19, [sp, #16]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 32
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w30, -24
	.cfi_offset w29, -32
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w0, w8, [x9]
	bfi	x0, x8, #32, #32
	tst	x0, #0x6
	b.ne	.LBB241_4
// %bb.1:                               // %"$3"
	tbz	w0, #3, .LBB241_3
// %bb.2:                               // %"$6"
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB241_4
.LBB241_3:                              // %"$5"
	bl	evList
.LBB241_4:                              // %"$2"
	adrp	x19, env
	ldr	x8, [x19, :lo12:env]
	mov	x9, sp
	sub	x10, x9, #16                    // =16
	mov	sp, x10
	lsr	x11, x0, #32
	mov	x20, x10
	stp	w0, w11, [x9, #-16]
	str	w8, [x20, #8]!
	lsr	x8, x8, #32
	str	w8, [x20, #4]
	str	x10, [x19, :lo12:env]
	bl	trim
	ldp	w9, w8, [x20]
	bfi	x9, x8, #32, #32
	str	x9, [x19, :lo12:env]
	mov	sp, x29
	ldp	x20, x19, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #32             // 16-byte Folded Reload
	ret
.Lfunc_end241:
	.size	_trim, .Lfunc_end241-_trim
	.cfi_endproc
                                        // -- End function
	.globl	_clip                           // -- Begin function _clip
	.p2align	4
	.type	_clip,@function
_clip:                                  // @_clip
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-48]!           // 16-byte Folded Spill
	str	x21, [sp, #16]                  // 8-byte Folded Spill
	stp	x20, x19, [sp, #32]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 48
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -32
	.cfi_offset w30, -40
	.cfi_offset w29, -48
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w19, w8, [x9]
	bfi	x19, x8, #32, #32
	tst	x19, #0x6
	b.ne	.LBB242_4
// %bb.1:                               // %"$3"
	tbz	w19, #3, .LBB242_3
// %bb.2:                               // %"$6"
	ldp	w19, w8, [x19]
	bfi	x19, x8, #32, #32
	tst	x19, #0xf
	b.ne	.LBB242_5
	b	.LBB242_6
.LBB242_3:                              // %"$5"
	mov	x0, x19
	bl	evList
	mov	x19, x0
.LBB242_4:                              // %"$7"
	tst	x19, #0xf
	b.eq	.LBB242_6
.LBB242_5:
	mov	w0, wzr
	tbnz	w0, #0, .LBB242_7
	b	.LBB242_8
.LBB242_6:                              // %"$9"
	ldp	w0, w8, [x19]
	bfi	x0, x8, #32, #32
	bl	isBlank
	tbz	w0, #0, .LBB242_8
.LBB242_7:                              // %"$10"
	ldp	w19, w8, [x19, #8]
	bfi	x19, x8, #32, #32
	tst	x19, #0xf
	b.ne	.LBB242_5
	b	.LBB242_6
.LBB242_8:                              // %"$11"
	adrp	x20, env
	ldr	x8, [x20, :lo12:env]
	mov	x9, sp
	sub	x10, x9, #16                    // =16
	mov	sp, x10
	lsr	x11, x19, #32
	mov	x21, x10
	stp	w19, w11, [x9, #-16]
	str	w8, [x21, #8]!
	lsr	x8, x8, #32
	str	w8, [x21, #4]
	str	x10, [x20, :lo12:env]
	mov	x0, x19
	bl	trim
	ldp	w9, w8, [x21]
	bfi	x9, x8, #32, #32
	str	x9, [x20, :lo12:env]
	mov	sp, x29
	ldp	x20, x19, [sp, #32]             // 16-byte Folded Reload
	ldr	x21, [sp, #16]                  // 8-byte Folded Reload
	ldp	x29, x30, [sp], #48             // 16-byte Folded Reload
	ret
.Lfunc_end242:
	.size	_clip, .Lfunc_end242-_clip
	.cfi_endproc
                                        // -- End function
	.globl	_head                           // -- Begin function _head
	.p2align	4
	.type	_head,@function
_head:                                  // @_head
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-80]!           // 16-byte Folded Spill
	str	x25, [sp, #16]                  // 8-byte Folded Spill
	stp	x24, x23, [sp, #32]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #48]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #64]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 80
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -64
	.cfi_offset w30, -72
	.cfi_offset w29, -80
	mov	x20, x0
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w19, w8, [x9]
	bfi	x19, x8, #32, #32
	ldp	w23, w21, [x9, #8]
	tst	x19, #0x6
	b.ne	.LBB243_4
// %bb.1:                               // %"$3"
	tbz	w19, #3, .LBB243_3
// %bb.2:                               // %"$6"
	ldp	w19, w8, [x19]
	bfi	x19, x8, #32, #32
	b	.LBB243_4
.LBB243_3:                              // %"$5"
	mov	x0, x19
	bl	evList
	mov	x19, x0
.LBB243_4:                              // %"$2"
	adrp	x8, SymTab+8
	add	x8, x8, :lo12:SymTab+8
	cmp	x19, x8
	b.eq	.LBB243_27
// %bb.5:                               // %"$8"
	bfi	x23, x21, #32, #32
	tst	x19, #0xf
	b.eq	.LBB243_10
// %bb.6:                               // %"$10"
	mov	x0, x20
	mov	x1, x19
	bl	xCnt
	cbz	x0, .LBB243_26
// %bb.7:                               // %"$25"
	mov	x20, x0
	ldp	w21, w8, [x23]
	bfi	x21, x8, #32, #32
	tst	x21, #0x6
	b.eq	.LBB243_13
// %bb.8:                               // %"$27"
	tst	x21, #0xf
	b.eq	.LBB243_24
.LBB243_9:
	mov	x19, x21
	b	.LBB243_27
.LBB243_10:                             // %"$11"
	adrp	x21, env
	ldr	x8, [x21, :lo12:env]
	mov	x9, sp
	sub	x22, x9, #16                    // =16
	mov	sp, x22
	lsr	x10, x19, #32
	stp	w19, w10, [x9, #-16]
	lsr	x10, x8, #32
	stp	w8, w10, [x9, #-8]
	str	x22, [x21, :lo12:env]
	ldp	w20, w8, [x23]
	bfi	x20, x8, #32, #32
	tst	x20, #0x6
	b.ne	.LBB243_16
// %bb.11:                              // %"$13"
	tbz	w20, #3, .LBB243_15
// %bb.12:                              // %"$16"
	ldp	w20, w8, [x20]
	bfi	x20, x8, #32, #32
	b	.LBB243_16
.LBB243_13:                             // %"$28"
	tbz	w21, #3, .LBB243_23
// %bb.14:                              // %"$31"
	ldp	w21, w8, [x21]
	bfi	x21, x8, #32, #32
	tst	x21, #0xf
	b.ne	.LBB243_9
	b	.LBB243_24
.LBB243_15:                             // %"$15"
	mov	x0, x20
	bl	evList
	mov	x20, x0
.LBB243_16:                             // %"$17.preheader"
	mov	x24, x19
	adrp	x23, SymTab+8
	add	x23, x23, :lo12:SymTab+8
	tst	x20, #0xf
	b.ne	.LBB243_19
	b	.LBB243_18
.LBB243_17:                             // %"$23"
	ldp	w20, w8, [x20, #8]
	bfi	x20, x8, #32, #32
	tst	x20, #0xf
	b.ne	.LBB243_19
.LBB243_18:                             // %"$19"
	ldp	w0, w8, [x24]
	bfi	x0, x8, #32, #32
	ldp	w1, w8, [x20]
	bfi	x1, x8, #32, #32
	bl	equal
	eor	w8, w0, #0x1
	tbz	w8, #0, .LBB243_20
	b	.LBB243_21
.LBB243_19:
	mov	w8, #1
	tbnz	w8, #0, .LBB243_21
.LBB243_20:                             // %"$20"
	ldp	w24, w8, [x24, #8]
	bfi	x24, x8, #32, #32
	tst	x24, #0xf
	b.eq	.LBB243_17
	b	.LBB243_22
.LBB243_21:
	mov	x19, x23
.LBB243_22:                             // %"$21"
	ldp	w9, w8, [x22, #8]
	bfi	x9, x8, #32, #32
	str	x9, [x21, :lo12:env]
	b	.LBB243_27
.LBB243_23:                             // %"$30"
	mov	x0, x21
	bl	evList
	mov	x21, x0
	tst	x21, #0xf
	b.ne	.LBB243_9
.LBB243_24:                             // %"$33"
	tbnz	x20, #63, .LBB243_28
// %bb.25:
	mov	w8, wzr
	tbz	w8, #0, .LBB243_31
.LBB243_26:
	adrp	x19, SymTab+8
	add	x19, x19, :lo12:SymTab+8
.LBB243_27:                             // %"$7"
	mov	x0, x19
	mov	sp, x29
	ldp	x20, x19, [sp, #64]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #48]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #32]             // 16-byte Folded Reload
	ldr	x25, [sp, #16]                  // 8-byte Folded Reload
	ldp	x29, x30, [sp], #80             // 16-byte Folded Reload
	ret
.LBB243_28:                             // %"$36"
	mov	x8, xzr
	mov	x9, x21
	tst	x9, #0xf
	b.ne	.LBB243_30
.LBB243_29:                             // %"$38"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w9, w10, [x9, #8]
	bfi	x9, x10, #32, #32
	add	x8, x8, #1                      // =1
	tst	x9, #0xf
	b.eq	.LBB243_29
.LBB243_30:                             // %"$39"
	add	x20, x20, x8
	cmp	x20, #1                         // =1
	cset	w8, lt
	tbnz	w8, #0, .LBB243_26
.LBB243_31:                             // %"$40"
	adrp	x23, env
	ldr	x8, [x23, :lo12:env]
	mov	x9, sp
	sub	x24, x9, #16                    // =16
	mov	sp, x24
	lsr	x10, x21, #32
	stp	w21, w10, [x9, #-16]
	lsr	x10, x8, #32
	stp	w8, w10, [x9, #-8]
	str	x24, [x23, :lo12:env]
	ldp	w0, w8, [x21]
	bfi	x0, x8, #32, #32
	adrp	x22, SymTab+8
	add	x22, x22, :lo12:SymTab+8
	mov	x1, x22
	bl	cons
	mov	x19, x0
	ldr	x8, [x23, :lo12:env]
	mov	x9, sp
	sub	x10, x9, #16                    // =16
	mov	sp, x10
	lsr	x11, x0, #32
	lsr	x12, x8, #32
	stp	w19, w11, [x9, #-16]
	stp	w8, w12, [x9, #-8]
	mov	x25, x0
	str	x10, [x23, :lo12:env]
	subs	x20, x20, #1                    // =1
	b.ne	.LBB243_34
	b	.LBB243_33
.LBB243_32:                             // %"$45"
	ldp	w0, w8, [x21]
	bfi	x0, x8, #32, #32
	mov	x1, x22
	bl	cons
	lsr	x8, x0, #32
	stp	w0, w8, [x25, #8]
	mov	x25, x0
	subs	x20, x20, #1                    // =1
	b.ne	.LBB243_34
.LBB243_33:
	mov	w8, wzr
	cbnz	w8, .LBB243_32
	b	.LBB243_35
.LBB243_34:                             // %"$44"
	ldp	w21, w8, [x21, #8]
	bfi	x21, x8, #32, #32
	tst	x21, #0xf
	cset	w8, eq
	cbnz	w8, .LBB243_32
.LBB243_35:                             // %"$46"
	ldp	w9, w8, [x24, #8]
	bfi	x9, x8, #32, #32
	str	x9, [x23, :lo12:env]
	b	.LBB243_27
.Lfunc_end243:
	.size	_head, .Lfunc_end243-_head
	.cfi_endproc
                                        // -- End function
	.globl	_tail                           // -- Begin function _tail
	.p2align	4
	.type	_tail,@function
_tail:                                  // @_tail
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-64]!           // 16-byte Folded Spill
	str	x23, [sp, #16]                  // 8-byte Folded Spill
	stp	x22, x21, [sp, #32]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #48]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 64
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -48
	.cfi_offset w30, -56
	.cfi_offset w29, -64
	mov	x20, x0
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w19, w8, [x9]
	bfi	x19, x8, #32, #32
	ldp	w23, w21, [x9, #8]
	tst	x19, #0x6
	b.ne	.LBB244_4
// %bb.1:                               // %"$3"
	tbz	w19, #3, .LBB244_3
// %bb.2:                               // %"$6"
	ldp	w19, w8, [x19]
	bfi	x19, x8, #32, #32
	b	.LBB244_4
.LBB244_3:                              // %"$5"
	mov	x0, x19
	bl	evList
	mov	x19, x0
.LBB244_4:                              // %"$2"
	adrp	x8, SymTab+8
	add	x8, x8, :lo12:SymTab+8
	cmp	x19, x8
	b.eq	.LBB244_30
// %bb.5:                               // %"$8"
	bfi	x23, x21, #32, #32
	tst	x19, #0xf
	b.eq	.LBB244_18
// %bb.6:                               // %"$10"
	mov	x0, x20
	mov	x1, x19
	bl	xCnt
	cbz	x0, .LBB244_21
// %bb.7:                               // %"$25"
	mov	x20, x0
	ldp	w19, w8, [x23]
	bfi	x19, x8, #32, #32
	tst	x19, #0x6
	b.ne	.LBB244_10
// %bb.8:                               // %"$28"
	tbz	w19, #3, .LBB244_22
// %bb.9:                               // %"$31"
	ldp	w19, w8, [x19]
	bfi	x19, x8, #32, #32
.LBB244_10:                             // %"$27"
	tst	x19, #0xf
	b.ne	.LBB244_30
.LBB244_11:                             // %"$33"
	tbnz	x20, #63, .LBB244_17
// %bb.12:
	mov	x8, x19
.LBB244_13:                             // %"$41"
                                        // =>This Inner Loop Header: Depth=1
	subs	x20, x20, #1                    // =1
	b.eq	.LBB244_16
// %bb.14:                              // %"$42"
                                        //   in Loop: Header=BB244_13 Depth=1
	ldp	w8, w9, [x8, #8]
	bfi	x8, x9, #32, #32
	tst	x8, #0xf
	b.eq	.LBB244_13
	b	.LBB244_16
.LBB244_15:                             // %"$46"
                                        //   in Loop: Header=BB244_16 Depth=1
	ldp	w19, w9, [x19, #8]
	bfi	x19, x9, #32, #32
.LBB244_16:                             // %"$45"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w8, w9, [x8, #8]
	bfi	x8, x9, #32, #32
	tst	x8, #0xf
	b.eq	.LBB244_15
	b	.LBB244_30
.LBB244_17:                             // %"$37"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w19, w8, [x19, #8]
	bfi	x19, x8, #32, #32
	adds	x20, x20, #1                    // =1
	b.lo	.LBB244_17
	b	.LBB244_30
.LBB244_18:                             // %"$11"
	adrp	x21, env
	ldr	x8, [x21, :lo12:env]
	mov	x9, sp
	sub	x22, x9, #16                    // =16
	mov	sp, x22
	lsr	x10, x19, #32
	stp	w19, w10, [x9, #-16]
	lsr	x10, x8, #32
	stp	w8, w10, [x9, #-8]
	str	x22, [x21, :lo12:env]
	ldp	w20, w8, [x23]
	bfi	x20, x8, #32, #32
	tst	x20, #0x6
	b.ne	.LBB244_24
// %bb.19:                              // %"$13"
	tbz	w20, #3, .LBB244_23
// %bb.20:                              // %"$16"
	ldp	w20, w8, [x20]
	bfi	x20, x8, #32, #32
	b	.LBB244_24
.LBB244_21:
	adrp	x19, SymTab+8
	add	x19, x19, :lo12:SymTab+8
	b	.LBB244_30
.LBB244_22:                             // %"$30"
	mov	x0, x19
	bl	evList
	mov	x19, x0
	tst	x19, #0xf
	b.ne	.LBB244_30
	b	.LBB244_11
.LBB244_23:                             // %"$15"
	mov	x0, x20
	bl	evList
	mov	x20, x0
.LBB244_24:                             // %"$17.preheader"
	adrp	x23, SymTab+8
	add	x23, x23, :lo12:SymTab+8
.LBB244_25:                             // %"$17"
                                        // =>This Inner Loop Header: Depth=1
	tst	x20, #0xf
	b.ne	.LBB244_28
// %bb.26:                              // %"$18"
                                        //   in Loop: Header=BB244_25 Depth=1
	mov	x0, x20
	mov	x1, x19
	bl	equal
	tbnz	w0, #0, .LBB244_29
// %bb.27:                              // %"$21"
                                        //   in Loop: Header=BB244_25 Depth=1
	ldp	w20, w8, [x20, #8]
	bfi	x20, x8, #32, #32
	tst	x20, #0xf
	b.eq	.LBB244_25
.LBB244_28:
	mov	x19, x23
.LBB244_29:                             // %"$19"
	ldp	w9, w8, [x22, #8]
	bfi	x9, x8, #32, #32
	str	x9, [x21, :lo12:env]
.LBB244_30:                             // %"$7"
	mov	x0, x19
	mov	sp, x29
	ldp	x20, x19, [sp, #48]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #32]             // 16-byte Folded Reload
	ldr	x23, [sp, #16]                  // 8-byte Folded Reload
	ldp	x29, x30, [sp], #64             // 16-byte Folded Reload
	ret
.Lfunc_end244:
	.size	_tail, .Lfunc_end244-_tail
	.cfi_endproc
                                        // -- End function
	.globl	_stem                           // -- Begin function _stem
	.p2align	4
	.type	_stem,@function
_stem:                                  // @_stem
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-80]!           // 16-byte Folded Spill
	stp	x26, x25, [sp, #16]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #32]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #48]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #64]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 80
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w30, -72
	.cfi_offset w29, -80
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w19, w8, [x9]
	bfi	x19, x8, #32, #32
	ldp	w20, w8, [x9, #8]
	bfi	x20, x8, #32, #32
	tst	x19, #0x6
	b.ne	.LBB245_4
// %bb.1:                               // %"$3"
	tbz	w19, #3, .LBB245_3
// %bb.2:                               // %"$6"
	ldp	w19, w8, [x19]
	bfi	x19, x8, #32, #32
	b	.LBB245_4
.LBB245_3:                              // %"$5"
	mov	x0, x19
	bl	evList
	mov	x19, x0
.LBB245_4:                              // %"$2"
	adrp	x21, env
	ldr	x8, [x21, :lo12:env]
	mov	x9, sp
	sub	x22, x9, #16                    // =16
	mov	sp, x22
	lsr	x10, x19, #32
	lsr	x11, x8, #32
	stp	w19, w10, [x9, #-16]
	stp	w8, w11, [x9, #-8]
	tst	x20, #0xf
	str	x22, [x21, :lo12:env]
	b.eq	.LBB245_6
// %bb.5:
	mov	x20, x19
	b	.LBB245_19
.LBB245_6:                              // %"$10.preheader"
	mov	w23, #1
.LBB245_7:                              // %"$10"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w0, w8, [x20]
	bfi	x0, x8, #32, #32
	tst	x0, #0x6
	b.ne	.LBB245_11
// %bb.8:                               // %"$12"
                                        //   in Loop: Header=BB245_7 Depth=1
	tbz	w0, #3, .LBB245_10
// %bb.9:                               // %"$15"
                                        //   in Loop: Header=BB245_7 Depth=1
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB245_11
.LBB245_10:                             // %"$14"
                                        //   in Loop: Header=BB245_7 Depth=1
	bl	evList
.LBB245_11:                             // %"$11"
                                        //   in Loop: Header=BB245_7 Depth=1
	mov	x8, sp
	sub	x24, x8, #16                    // =16
	mov	sp, x24
	lsr	x9, x0, #32
	stp	w0, w9, [x8, #-16]
	ldr	x9, [x21, :lo12:env]
	lsr	x10, x9, #32
	stp	w9, w10, [x8, #-8]
	str	x24, [x21, :lo12:env]
	ldp	w20, w8, [x20, #8]
	bfi	x20, x8, #32, #32
	tst	x20, #0xf
	b.ne	.LBB245_13
// %bb.12:                              // %"$16"
                                        //   in Loop: Header=BB245_7 Depth=1
	add	x23, x23, #1                    // =1
	b	.LBB245_7
.LBB245_13:                             // %"$19.preheader"
	mov	x20, x19
	mov	x25, x24
	mov	x26, x23
	b	.LBB245_16
.LBB245_14:                             // %"$20"
                                        //   in Loop: Header=BB245_16 Depth=1
	subs	x26, x26, #1                    // =1
	b.eq	.LBB245_18
// %bb.15:                              // %"$23"
                                        //   in Loop: Header=BB245_16 Depth=1
	ldp	w25, w8, [x25, #8]
	bfi	x25, x8, #32, #32
.LBB245_16:                             // %"$19"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w0, w8, [x19]
	bfi	x0, x8, #32, #32
	ldp	w1, w8, [x25]
	bfi	x1, x8, #32, #32
	bl	equal
	tbz	w0, #0, .LBB245_14
// %bb.17:                              // %"$22"
                                        //   in Loop: Header=BB245_16 Depth=1
	ldp	w20, w8, [x19, #8]
	bfi	x20, x8, #32, #32
.LBB245_18:                             // %"$21"
                                        //   in Loop: Header=BB245_16 Depth=1
	ldp	w19, w8, [x19, #8]
	bfi	x19, x8, #32, #32
	tst	x19, #0xf
	mov	x25, x24
	mov	x26, x23
	b.eq	.LBB245_16
.LBB245_19:                             // %"$9"
	ldp	w9, w8, [x22, #8]
	bfi	x9, x8, #32, #32
	str	x9, [x21, :lo12:env]
	mov	x0, x20
	mov	sp, x29
	ldp	x20, x19, [sp, #64]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #48]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #32]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #80             // 16-byte Folded Reload
	ret
.Lfunc_end245:
	.size	_stem, .Lfunc_end245-_stem
	.cfi_endproc
                                        // -- End function
	.globl	_fin                            // -- Begin function _fin
	.p2align	4
	.type	_fin,@function
_fin:                                   // @_fin
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w0, w8, [x9]
	bfi	x0, x8, #32, #32
	tst	x0, #0x6
	b.ne	.LBB246_5
// %bb.1:                               // %"$3"
	tbz	w0, #3, .LBB246_3
// %bb.2:                               // %"$6"
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB246_5
.LBB246_3:                              // %"$5"
	bl	evList
	b	.LBB246_5
.LBB246_4:                              // %"$8"
                                        //   in Loop: Header=BB246_5 Depth=1
	ldp	w0, w8, [x0, #8]
	bfi	x0, x8, #32, #32
.LBB246_5:                              // %"$7"
                                        // =>This Inner Loop Header: Depth=1
	tst	x0, #0xf
	b.eq	.LBB246_4
// %bb.6:                               // %"$9"
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end246:
	.size	_fin, .Lfunc_end246-_fin
	.cfi_endproc
                                        // -- End function
	.globl	_last                           // -- Begin function _last
	.p2align	4
	.type	_last,@function
_last:                                  // @_last
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w0, w8, [x9]
	bfi	x0, x8, #32, #32
	tst	x0, #0x6
	b.eq	.LBB247_3
// %bb.1:                               // %"$2"
	tst	x0, #0xf
	b.eq	.LBB247_6
.LBB247_2:                              // %"$9"
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.LBB247_3:                              // %"$3"
	tbz	w0, #3, .LBB247_5
// %bb.4:                               // %"$6"
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	tst	x0, #0xf
	b.ne	.LBB247_2
	b	.LBB247_6
.LBB247_5:                              // %"$5"
	bl	evList
	tst	x0, #0xf
	b.ne	.LBB247_2
.LBB247_6:                              // %"$10"
                                        // =>This Inner Loop Header: Depth=1
	mov	x8, x0
	ldp	w0, w9, [x0, #8]
	bfi	x0, x9, #32, #32
	tst	x0, #0xf
	b.eq	.LBB247_6
// %bb.7:                               // %"$12"
	ldp	w0, w9, [x8]
	bfi	x0, x9, #32, #32
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end247:
	.size	_last, .Lfunc_end247-_last
	.cfi_endproc
                                        // -- End function
	.globl	_eq                             // -- Begin function _eq
	.p2align	4
	.type	_eq,@function
_eq:                                    // @_eq
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-64]!           // 16-byte Folded Spill
	stp	x24, x23, [sp, #16]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #32]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #48]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 64
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w30, -56
	.cfi_offset w29, -64
	ldp	w21, w8, [x0, #8]
	bfi	x21, x8, #32, #32
	ldp	w19, w8, [x21]
	bfi	x19, x8, #32, #32
	tst	x19, #0x6
	b.ne	.LBB248_4
// %bb.1:                               // %"$3"
	tbz	w19, #3, .LBB248_3
// %bb.2:                               // %"$6"
	ldp	w19, w8, [x19]
	bfi	x19, x8, #32, #32
	b	.LBB248_4
.LBB248_3:                              // %"$5"
	mov	x0, x19
	bl	evList
	mov	x19, x0
.LBB248_4:                              // %"$2"
	adrp	x22, env
	ldr	x8, [x22, :lo12:env]
	mov	x9, sp
	sub	x23, x9, #16                    // =16
	mov	sp, x23
	lsr	x10, x19, #32
	lsr	x11, x8, #32
	stp	w19, w10, [x9, #-16]
	stp	w8, w11, [x9, #-8]
	adrp	x20, SymTab+216
	add	x20, x20, :lo12:SymTab+216
	adrp	x24, SymTab+8
	add	x24, x24, :lo12:SymTab+8
	str	x23, [x22, :lo12:env]
	b	.LBB248_7
.LBB248_5:                              // %"$14"
                                        //   in Loop: Header=BB248_7 Depth=1
	bl	evList
.LBB248_6:                              // %"$11"
                                        //   in Loop: Header=BB248_7 Depth=1
	cmp	x19, x0
	b.ne	.LBB248_11
.LBB248_7:                              // %"$7"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w21, w8, [x21, #8]
	bfi	x21, x8, #32, #32
	tst	x21, #0xf
	b.ne	.LBB248_12
// %bb.8:                               // %"$8"
                                        //   in Loop: Header=BB248_7 Depth=1
	ldp	w0, w8, [x21]
	bfi	x0, x8, #32, #32
	tst	x0, #0x6
	b.ne	.LBB248_6
// %bb.9:                               // %"$12"
                                        //   in Loop: Header=BB248_7 Depth=1
	tbz	w0, #3, .LBB248_5
// %bb.10:                              // %"$15"
                                        //   in Loop: Header=BB248_7 Depth=1
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB248_6
.LBB248_11:
	mov	x20, x24
.LBB248_12:                             // %"$9"
	ldp	w9, w8, [x23, #8]
	bfi	x9, x8, #32, #32
	str	x9, [x22, :lo12:env]
	mov	x0, x20
	mov	sp, x29
	ldp	x20, x19, [sp, #48]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #32]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #64             // 16-byte Folded Reload
	ret
.Lfunc_end248:
	.size	_eq, .Lfunc_end248-_eq
	.cfi_endproc
                                        // -- End function
	.globl	_neq                            // -- Begin function _neq
	.p2align	4
	.type	_neq,@function
_neq:                                   // @_neq
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-64]!           // 16-byte Folded Spill
	stp	x24, x23, [sp, #16]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #32]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #48]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 64
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w30, -56
	.cfi_offset w29, -64
	ldp	w21, w8, [x0, #8]
	bfi	x21, x8, #32, #32
	ldp	w19, w8, [x21]
	bfi	x19, x8, #32, #32
	tst	x19, #0x6
	b.ne	.LBB249_4
// %bb.1:                               // %"$3"
	tbz	w19, #3, .LBB249_3
// %bb.2:                               // %"$6"
	ldp	w19, w8, [x19]
	bfi	x19, x8, #32, #32
	b	.LBB249_4
.LBB249_3:                              // %"$5"
	mov	x0, x19
	bl	evList
	mov	x19, x0
.LBB249_4:                              // %"$2"
	adrp	x22, env
	ldr	x8, [x22, :lo12:env]
	mov	x9, sp
	sub	x23, x9, #16                    // =16
	mov	sp, x23
	lsr	x10, x19, #32
	lsr	x11, x8, #32
	stp	w19, w10, [x9, #-16]
	stp	w8, w11, [x9, #-8]
	adrp	x20, SymTab+8
	add	x20, x20, :lo12:SymTab+8
	adrp	x24, SymTab+216
	add	x24, x24, :lo12:SymTab+216
	str	x23, [x22, :lo12:env]
	b	.LBB249_7
.LBB249_5:                              // %"$14"
                                        //   in Loop: Header=BB249_7 Depth=1
	bl	evList
.LBB249_6:                              // %"$11"
                                        //   in Loop: Header=BB249_7 Depth=1
	cmp	x19, x0
	b.ne	.LBB249_11
.LBB249_7:                              // %"$7"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w21, w8, [x21, #8]
	bfi	x21, x8, #32, #32
	tst	x21, #0xf
	b.ne	.LBB249_12
// %bb.8:                               // %"$8"
                                        //   in Loop: Header=BB249_7 Depth=1
	ldp	w0, w8, [x21]
	bfi	x0, x8, #32, #32
	tst	x0, #0x6
	b.ne	.LBB249_6
// %bb.9:                               // %"$12"
                                        //   in Loop: Header=BB249_7 Depth=1
	tbz	w0, #3, .LBB249_5
// %bb.10:                              // %"$15"
                                        //   in Loop: Header=BB249_7 Depth=1
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB249_6
.LBB249_11:
	mov	x20, x24
.LBB249_12:                             // %"$9"
	ldp	w9, w8, [x23, #8]
	bfi	x9, x8, #32, #32
	str	x9, [x22, :lo12:env]
	mov	x0, x20
	mov	sp, x29
	ldp	x20, x19, [sp, #48]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #32]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #64             // 16-byte Folded Reload
	ret
.Lfunc_end249:
	.size	_neq, .Lfunc_end249-_neq
	.cfi_endproc
                                        // -- End function
	.globl	_equal                          // -- Begin function _equal
	.p2align	4
	.type	_equal,@function
_equal:                                 // @_equal
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-64]!           // 16-byte Folded Spill
	stp	x24, x23, [sp, #16]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #32]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #48]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 64
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w30, -56
	.cfi_offset w29, -64
	ldp	w21, w8, [x0, #8]
	bfi	x21, x8, #32, #32
	ldp	w19, w8, [x21]
	bfi	x19, x8, #32, #32
	tst	x19, #0x6
	b.ne	.LBB250_4
// %bb.1:                               // %"$3"
	tbz	w19, #3, .LBB250_3
// %bb.2:                               // %"$6"
	ldp	w19, w8, [x19]
	bfi	x19, x8, #32, #32
	b	.LBB250_4
.LBB250_3:                              // %"$5"
	mov	x0, x19
	bl	evList
	mov	x19, x0
.LBB250_4:                              // %"$2"
	adrp	x22, env
	ldr	x8, [x22, :lo12:env]
	mov	x9, sp
	sub	x23, x9, #16                    // =16
	mov	sp, x23
	lsr	x10, x19, #32
	lsr	x11, x8, #32
	stp	w19, w10, [x9, #-16]
	stp	w8, w11, [x9, #-8]
	adrp	x20, SymTab+216
	add	x20, x20, :lo12:SymTab+216
	adrp	x24, SymTab+8
	add	x24, x24, :lo12:SymTab+8
	str	x23, [x22, :lo12:env]
	b	.LBB250_7
.LBB250_5:                              // %"$14"
                                        //   in Loop: Header=BB250_7 Depth=1
	mov	x0, x1
	bl	evList
	mov	x1, x0
.LBB250_6:                              // %"$11"
                                        //   in Loop: Header=BB250_7 Depth=1
	mov	x0, x19
	bl	equal
	tbz	w0, #0, .LBB250_11
.LBB250_7:                              // %"$7"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w21, w8, [x21, #8]
	bfi	x21, x8, #32, #32
	tst	x21, #0xf
	b.ne	.LBB250_12
// %bb.8:                               // %"$8"
                                        //   in Loop: Header=BB250_7 Depth=1
	ldp	w1, w8, [x21]
	bfi	x1, x8, #32, #32
	tst	x1, #0x6
	b.ne	.LBB250_6
// %bb.9:                               // %"$12"
                                        //   in Loop: Header=BB250_7 Depth=1
	tbz	w1, #3, .LBB250_5
// %bb.10:                              // %"$15"
                                        //   in Loop: Header=BB250_7 Depth=1
	ldp	w1, w8, [x1]
	bfi	x1, x8, #32, #32
	b	.LBB250_6
.LBB250_11:
	mov	x20, x24
.LBB250_12:                             // %"$9"
	ldp	w9, w8, [x23, #8]
	bfi	x9, x8, #32, #32
	str	x9, [x22, :lo12:env]
	mov	x0, x20
	mov	sp, x29
	ldp	x20, x19, [sp, #48]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #32]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #64             // 16-byte Folded Reload
	ret
.Lfunc_end250:
	.size	_equal, .Lfunc_end250-_equal
	.cfi_endproc
                                        // -- End function
	.globl	_nequal                         // -- Begin function _nequal
	.p2align	4
	.type	_nequal,@function
_nequal:                                // @_nequal
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-64]!           // 16-byte Folded Spill
	stp	x24, x23, [sp, #16]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #32]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #48]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 64
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w30, -56
	.cfi_offset w29, -64
	ldp	w21, w8, [x0, #8]
	bfi	x21, x8, #32, #32
	ldp	w19, w8, [x21]
	bfi	x19, x8, #32, #32
	tst	x19, #0x6
	b.ne	.LBB251_4
// %bb.1:                               // %"$3"
	tbz	w19, #3, .LBB251_3
// %bb.2:                               // %"$6"
	ldp	w19, w8, [x19]
	bfi	x19, x8, #32, #32
	b	.LBB251_4
.LBB251_3:                              // %"$5"
	mov	x0, x19
	bl	evList
	mov	x19, x0
.LBB251_4:                              // %"$2"
	adrp	x22, env
	ldr	x8, [x22, :lo12:env]
	mov	x9, sp
	sub	x23, x9, #16                    // =16
	mov	sp, x23
	lsr	x10, x19, #32
	lsr	x11, x8, #32
	stp	w19, w10, [x9, #-16]
	stp	w8, w11, [x9, #-8]
	adrp	x20, SymTab+8
	add	x20, x20, :lo12:SymTab+8
	adrp	x24, SymTab+216
	add	x24, x24, :lo12:SymTab+216
	str	x23, [x22, :lo12:env]
	b	.LBB251_7
.LBB251_5:                              // %"$14"
                                        //   in Loop: Header=BB251_7 Depth=1
	mov	x0, x1
	bl	evList
	mov	x1, x0
.LBB251_6:                              // %"$11"
                                        //   in Loop: Header=BB251_7 Depth=1
	mov	x0, x19
	bl	equal
	tbz	w0, #0, .LBB251_11
.LBB251_7:                              // %"$7"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w21, w8, [x21, #8]
	bfi	x21, x8, #32, #32
	tst	x21, #0xf
	b.ne	.LBB251_12
// %bb.8:                               // %"$8"
                                        //   in Loop: Header=BB251_7 Depth=1
	ldp	w1, w8, [x21]
	bfi	x1, x8, #32, #32
	tst	x1, #0x6
	b.ne	.LBB251_6
// %bb.9:                               // %"$12"
                                        //   in Loop: Header=BB251_7 Depth=1
	tbz	w1, #3, .LBB251_5
// %bb.10:                              // %"$15"
                                        //   in Loop: Header=BB251_7 Depth=1
	ldp	w1, w8, [x1]
	bfi	x1, x8, #32, #32
	b	.LBB251_6
.LBB251_11:
	mov	x20, x24
.LBB251_12:                             // %"$9"
	ldp	w9, w8, [x23, #8]
	bfi	x9, x8, #32, #32
	str	x9, [x22, :lo12:env]
	mov	x0, x20
	mov	sp, x29
	ldp	x20, x19, [sp, #48]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #32]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #64             // 16-byte Folded Reload
	ret
.Lfunc_end251:
	.size	_nequal, .Lfunc_end251-_nequal
	.cfi_endproc
                                        // -- End function
	.globl	_eq0                            // -- Begin function _eq0
	.p2align	4
	.type	_eq0,@function
_eq0:                                   // @_eq0
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w0, w8, [x9]
	bfi	x0, x8, #32, #32
	tst	x0, #0x6
	b.ne	.LBB252_4
// %bb.1:                               // %"$3"
	tbz	w0, #3, .LBB252_3
// %bb.2:                               // %"$6"
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB252_4
.LBB252_3:                              // %"$5"
	bl	evList
.LBB252_4:                              // %"$2"
	adrp	x8, SymTab+8
	add	x8, x8, :lo12:SymTab+8
	cmp	x0, #2                          // =2
	csel	x0, x0, x8, eq
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end252:
	.size	_eq0, .Lfunc_end252-_eq0
	.cfi_endproc
                                        // -- End function
	.globl	_eq1                            // -- Begin function _eq1
	.p2align	4
	.type	_eq1,@function
_eq1:                                   // @_eq1
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w0, w8, [x9]
	bfi	x0, x8, #32, #32
	tst	x0, #0x6
	b.ne	.LBB253_4
// %bb.1:                               // %"$3"
	tbz	w0, #3, .LBB253_3
// %bb.2:                               // %"$6"
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB253_4
.LBB253_3:                              // %"$5"
	bl	evList
.LBB253_4:                              // %"$2"
	adrp	x8, SymTab+8
	add	x8, x8, :lo12:SymTab+8
	cmp	x0, #18                         // =18
	csel	x0, x0, x8, eq
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end253:
	.size	_eq1, .Lfunc_end253-_eq1
	.cfi_endproc
                                        // -- End function
	.globl	_eqT                            // -- Begin function _eqT
	.p2align	4
	.type	_eqT,@function
_eqT:                                   // @_eqT
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w0, w8, [x9]
	bfi	x0, x8, #32, #32
	tst	x0, #0x6
	b.ne	.LBB254_4
// %bb.1:                               // %"$3"
	tbz	w0, #3, .LBB254_3
// %bb.2:                               // %"$6"
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB254_4
.LBB254_3:                              // %"$5"
	bl	evList
.LBB254_4:                              // %"$2"
	adrp	x8, SymTab+8
	add	x8, x8, :lo12:SymTab+8
	add	x9, x8, #208                    // =208
	cmp	x0, x9
	csel	x0, x0, x8, eq
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end254:
	.size	_eqT, .Lfunc_end254-_eqT
	.cfi_endproc
                                        // -- End function
	.globl	_neq0                           // -- Begin function _neq0
	.p2align	4
	.type	_neq0,@function
_neq0:                                  // @_neq0
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w0, w8, [x9]
	bfi	x0, x8, #32, #32
	tst	x0, #0x6
	b.ne	.LBB255_4
// %bb.1:                               // %"$3"
	tbz	w0, #3, .LBB255_3
// %bb.2:                               // %"$6"
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB255_4
.LBB255_3:                              // %"$5"
	bl	evList
.LBB255_4:                              // %"$2"
	adrp	x8, SymTab+8
	add	x8, x8, :lo12:SymTab+8
	add	x9, x8, #208                    // =208
	cmp	x0, #2                          // =2
	csel	x0, x8, x9, eq
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end255:
	.size	_neq0, .Lfunc_end255-_neq0
	.cfi_endproc
                                        // -- End function
	.globl	_neqT                           // -- Begin function _neqT
	.p2align	4
	.type	_neqT,@function
_neqT:                                  // @_neqT
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w0, w8, [x9]
	bfi	x0, x8, #32, #32
	tst	x0, #0x6
	b.ne	.LBB256_4
// %bb.1:                               // %"$3"
	tbz	w0, #3, .LBB256_3
// %bb.2:                               // %"$6"
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB256_4
.LBB256_3:                              // %"$5"
	bl	evList
.LBB256_4:                              // %"$2"
	adrp	x8, SymTab+8
	add	x8, x8, :lo12:SymTab+8
	add	x9, x8, #208                    // =208
	cmp	x0, x9
	csel	x0, x8, x9, eq
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end256:
	.size	_neqT, .Lfunc_end256-_neqT
	.cfi_endproc
                                        // -- End function
	.globl	_lt                             // -- Begin function _lt
	.p2align	4
	.type	_lt,@function
_lt:                                    // @_lt
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-64]!           // 16-byte Folded Spill
	stp	x24, x23, [sp, #16]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #32]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #48]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 64
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w30, -56
	.cfi_offset w29, -64
	ldp	w22, w8, [x0, #8]
	bfi	x22, x8, #32, #32
	ldp	w19, w8, [x22]
	bfi	x19, x8, #32, #32
	tst	x19, #0x6
	b.ne	.LBB257_4
// %bb.1:                               // %"$3"
	tbz	w19, #3, .LBB257_3
// %bb.2:                               // %"$6"
	ldp	w19, w8, [x19]
	bfi	x19, x8, #32, #32
	b	.LBB257_4
.LBB257_3:                              // %"$5"
	mov	x0, x19
	bl	evList
	mov	x19, x0
.LBB257_4:                              // %"$2"
	adrp	x8, env
	add	x8, x8, :lo12:env
	ldr	x9, [x8]
	mov	x10, sp
	sub	x23, x10, #16                   // =16
	mov	sp, x23
	adrp	x20, SymTab+216
	add	x20, x20, :lo12:SymTab+216
	lsr	x11, x19, #32
	stp	w19, w11, [x10, #-16]
	lsr	x11, x9, #32
	adrp	x24, SymTab+8
	add	x24, x24, :lo12:SymTab+8
	mov	x21, x23
	stp	w9, w11, [x10, #-8]
	b	.LBB257_7
.LBB257_5:                              // %"$14"
                                        //   in Loop: Header=BB257_7 Depth=1
	mov	x0, x21
	bl	evList
	mov	x21, x0
.LBB257_6:                              // %"$11"
                                        //   in Loop: Header=BB257_7 Depth=1
	mov	x0, x19
	mov	x1, x21
	bl	compare
	mov	x8, x23
	mov	x19, x21
	tbz	x0, #63, .LBB257_11
.LBB257_7:                              // %"$7"
                                        // =>This Inner Loop Header: Depth=1
	lsr	x9, x21, #32
	stp	w21, w9, [x8]
	ldp	w22, w8, [x22, #8]
	bfi	x22, x8, #32, #32
	tst	x22, #0xf
	b.ne	.LBB257_12
// %bb.8:                               // %"$8"
                                        //   in Loop: Header=BB257_7 Depth=1
	ldp	w21, w8, [x22]
	bfi	x21, x8, #32, #32
	tst	x21, #0x6
	b.ne	.LBB257_6
// %bb.9:                               // %"$12"
                                        //   in Loop: Header=BB257_7 Depth=1
	tbz	w21, #3, .LBB257_5
// %bb.10:                              // %"$15"
                                        //   in Loop: Header=BB257_7 Depth=1
	ldp	w21, w8, [x21]
	bfi	x21, x8, #32, #32
	b	.LBB257_6
.LBB257_11:
	mov	x20, x24
.LBB257_12:                             // %"$9"
	ldp	w9, w8, [x23, #8]
	bfi	x9, x8, #32, #32
	adrp	x8, env
	str	x9, [x8, :lo12:env]
	mov	x0, x20
	mov	sp, x29
	ldp	x20, x19, [sp, #48]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #32]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #64             // 16-byte Folded Reload
	ret
.Lfunc_end257:
	.size	_lt, .Lfunc_end257-_lt
	.cfi_endproc
                                        // -- End function
	.globl	_le                             // -- Begin function _le
	.p2align	4
	.type	_le,@function
_le:                                    // @_le
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-64]!           // 16-byte Folded Spill
	stp	x24, x23, [sp, #16]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #32]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #48]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 64
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w30, -56
	.cfi_offset w29, -64
	ldp	w22, w8, [x0, #8]
	bfi	x22, x8, #32, #32
	ldp	w19, w8, [x22]
	bfi	x19, x8, #32, #32
	tst	x19, #0x6
	b.ne	.LBB258_4
// %bb.1:                               // %"$3"
	tbz	w19, #3, .LBB258_3
// %bb.2:                               // %"$6"
	ldp	w19, w8, [x19]
	bfi	x19, x8, #32, #32
	b	.LBB258_4
.LBB258_3:                              // %"$5"
	mov	x0, x19
	bl	evList
	mov	x19, x0
.LBB258_4:                              // %"$2"
	adrp	x8, env
	add	x8, x8, :lo12:env
	ldr	x9, [x8]
	mov	x10, sp
	sub	x23, x10, #16                   // =16
	mov	sp, x23
	adrp	x20, SymTab+216
	add	x20, x20, :lo12:SymTab+216
	lsr	x11, x19, #32
	stp	w19, w11, [x10, #-16]
	lsr	x11, x9, #32
	adrp	x24, SymTab+8
	add	x24, x24, :lo12:SymTab+8
	mov	x21, x23
	stp	w9, w11, [x10, #-8]
	b	.LBB258_7
.LBB258_5:                              // %"$14"
                                        //   in Loop: Header=BB258_7 Depth=1
	mov	x0, x21
	bl	evList
	mov	x21, x0
.LBB258_6:                              // %"$11"
                                        //   in Loop: Header=BB258_7 Depth=1
	mov	x0, x19
	mov	x1, x21
	bl	compare
	cmp	x0, #1                          // =1
	mov	x8, x23
	mov	x19, x21
	b.ge	.LBB258_11
.LBB258_7:                              // %"$7"
                                        // =>This Inner Loop Header: Depth=1
	lsr	x9, x21, #32
	stp	w21, w9, [x8]
	ldp	w22, w8, [x22, #8]
	bfi	x22, x8, #32, #32
	tst	x22, #0xf
	b.ne	.LBB258_12
// %bb.8:                               // %"$8"
                                        //   in Loop: Header=BB258_7 Depth=1
	ldp	w21, w8, [x22]
	bfi	x21, x8, #32, #32
	tst	x21, #0x6
	b.ne	.LBB258_6
// %bb.9:                               // %"$12"
                                        //   in Loop: Header=BB258_7 Depth=1
	tbz	w21, #3, .LBB258_5
// %bb.10:                              // %"$15"
                                        //   in Loop: Header=BB258_7 Depth=1
	ldp	w21, w8, [x21]
	bfi	x21, x8, #32, #32
	b	.LBB258_6
.LBB258_11:
	mov	x20, x24
.LBB258_12:                             // %"$9"
	ldp	w9, w8, [x23, #8]
	bfi	x9, x8, #32, #32
	adrp	x8, env
	str	x9, [x8, :lo12:env]
	mov	x0, x20
	mov	sp, x29
	ldp	x20, x19, [sp, #48]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #32]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #64             // 16-byte Folded Reload
	ret
.Lfunc_end258:
	.size	_le, .Lfunc_end258-_le
	.cfi_endproc
                                        // -- End function
	.globl	_gt                             // -- Begin function _gt
	.p2align	4
	.type	_gt,@function
_gt:                                    // @_gt
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-64]!           // 16-byte Folded Spill
	stp	x24, x23, [sp, #16]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #32]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #48]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 64
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w30, -56
	.cfi_offset w29, -64
	ldp	w22, w8, [x0, #8]
	bfi	x22, x8, #32, #32
	ldp	w19, w8, [x22]
	bfi	x19, x8, #32, #32
	tst	x19, #0x6
	b.ne	.LBB259_4
// %bb.1:                               // %"$3"
	tbz	w19, #3, .LBB259_3
// %bb.2:                               // %"$6"
	ldp	w19, w8, [x19]
	bfi	x19, x8, #32, #32
	b	.LBB259_4
.LBB259_3:                              // %"$5"
	mov	x0, x19
	bl	evList
	mov	x19, x0
.LBB259_4:                              // %"$2"
	adrp	x8, env
	add	x8, x8, :lo12:env
	ldr	x9, [x8]
	mov	x10, sp
	sub	x23, x10, #16                   // =16
	mov	sp, x23
	adrp	x20, SymTab+216
	add	x20, x20, :lo12:SymTab+216
	lsr	x11, x19, #32
	stp	w19, w11, [x10, #-16]
	lsr	x11, x9, #32
	adrp	x24, SymTab+8
	add	x24, x24, :lo12:SymTab+8
	mov	x21, x23
	stp	w9, w11, [x10, #-8]
	b	.LBB259_7
.LBB259_5:                              // %"$14"
                                        //   in Loop: Header=BB259_7 Depth=1
	mov	x0, x21
	bl	evList
	mov	x21, x0
.LBB259_6:                              // %"$11"
                                        //   in Loop: Header=BB259_7 Depth=1
	mov	x0, x19
	mov	x1, x21
	bl	compare
	cmp	x0, #0                          // =0
	mov	x8, x23
	mov	x19, x21
	b.le	.LBB259_11
.LBB259_7:                              // %"$7"
                                        // =>This Inner Loop Header: Depth=1
	lsr	x9, x21, #32
	stp	w21, w9, [x8]
	ldp	w22, w8, [x22, #8]
	bfi	x22, x8, #32, #32
	tst	x22, #0xf
	b.ne	.LBB259_12
// %bb.8:                               // %"$8"
                                        //   in Loop: Header=BB259_7 Depth=1
	ldp	w21, w8, [x22]
	bfi	x21, x8, #32, #32
	tst	x21, #0x6
	b.ne	.LBB259_6
// %bb.9:                               // %"$12"
                                        //   in Loop: Header=BB259_7 Depth=1
	tbz	w21, #3, .LBB259_5
// %bb.10:                              // %"$15"
                                        //   in Loop: Header=BB259_7 Depth=1
	ldp	w21, w8, [x21]
	bfi	x21, x8, #32, #32
	b	.LBB259_6
.LBB259_11:
	mov	x20, x24
.LBB259_12:                             // %"$9"
	ldp	w9, w8, [x23, #8]
	bfi	x9, x8, #32, #32
	adrp	x8, env
	str	x9, [x8, :lo12:env]
	mov	x0, x20
	mov	sp, x29
	ldp	x20, x19, [sp, #48]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #32]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #64             // 16-byte Folded Reload
	ret
.Lfunc_end259:
	.size	_gt, .Lfunc_end259-_gt
	.cfi_endproc
                                        // -- End function
	.globl	_ge                             // -- Begin function _ge
	.p2align	4
	.type	_ge,@function
_ge:                                    // @_ge
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-64]!           // 16-byte Folded Spill
	stp	x24, x23, [sp, #16]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #32]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #48]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 64
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w30, -56
	.cfi_offset w29, -64
	ldp	w22, w8, [x0, #8]
	bfi	x22, x8, #32, #32
	ldp	w19, w8, [x22]
	bfi	x19, x8, #32, #32
	tst	x19, #0x6
	b.ne	.LBB260_4
// %bb.1:                               // %"$3"
	tbz	w19, #3, .LBB260_3
// %bb.2:                               // %"$6"
	ldp	w19, w8, [x19]
	bfi	x19, x8, #32, #32
	b	.LBB260_4
.LBB260_3:                              // %"$5"
	mov	x0, x19
	bl	evList
	mov	x19, x0
.LBB260_4:                              // %"$2"
	adrp	x8, env
	add	x8, x8, :lo12:env
	ldr	x9, [x8]
	mov	x10, sp
	sub	x23, x10, #16                   // =16
	mov	sp, x23
	adrp	x20, SymTab+216
	add	x20, x20, :lo12:SymTab+216
	lsr	x11, x19, #32
	stp	w19, w11, [x10, #-16]
	lsr	x11, x9, #32
	adrp	x24, SymTab+8
	add	x24, x24, :lo12:SymTab+8
	mov	x21, x23
	stp	w9, w11, [x10, #-8]
	b	.LBB260_7
.LBB260_5:                              // %"$14"
                                        //   in Loop: Header=BB260_7 Depth=1
	mov	x0, x21
	bl	evList
	mov	x21, x0
.LBB260_6:                              // %"$11"
                                        //   in Loop: Header=BB260_7 Depth=1
	mov	x0, x19
	mov	x1, x21
	bl	compare
	mov	x8, x23
	mov	x19, x21
	tbnz	x0, #63, .LBB260_11
.LBB260_7:                              // %"$7"
                                        // =>This Inner Loop Header: Depth=1
	lsr	x9, x21, #32
	stp	w21, w9, [x8]
	ldp	w22, w8, [x22, #8]
	bfi	x22, x8, #32, #32
	tst	x22, #0xf
	b.ne	.LBB260_12
// %bb.8:                               // %"$8"
                                        //   in Loop: Header=BB260_7 Depth=1
	ldp	w21, w8, [x22]
	bfi	x21, x8, #32, #32
	tst	x21, #0x6
	b.ne	.LBB260_6
// %bb.9:                               // %"$12"
                                        //   in Loop: Header=BB260_7 Depth=1
	tbz	w21, #3, .LBB260_5
// %bb.10:                              // %"$15"
                                        //   in Loop: Header=BB260_7 Depth=1
	ldp	w21, w8, [x21]
	bfi	x21, x8, #32, #32
	b	.LBB260_6
.LBB260_11:
	mov	x20, x24
.LBB260_12:                             // %"$9"
	ldp	w9, w8, [x23, #8]
	bfi	x9, x8, #32, #32
	adrp	x8, env
	str	x9, [x8, :lo12:env]
	mov	x0, x20
	mov	sp, x29
	ldp	x20, x19, [sp, #48]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #32]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #64             // 16-byte Folded Reload
	ret
.Lfunc_end260:
	.size	_ge, .Lfunc_end260-_ge
	.cfi_endproc
                                        // -- End function
	.globl	_max                            // -- Begin function _max
	.p2align	4
	.type	_max,@function
_max:                                   // @_max
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-48]!           // 16-byte Folded Spill
	stp	x22, x21, [sp, #16]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #32]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 48
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w30, -40
	.cfi_offset w29, -48
	ldp	w21, w8, [x0, #8]
	bfi	x21, x8, #32, #32
	ldp	w19, w8, [x21]
	bfi	x19, x8, #32, #32
	tst	x19, #0x6
	b.ne	.LBB261_4
// %bb.1:                               // %"$3"
	tbz	w19, #3, .LBB261_3
// %bb.2:                               // %"$6"
	ldp	w19, w8, [x19]
	bfi	x19, x8, #32, #32
	b	.LBB261_4
.LBB261_3:                              // %"$5"
	mov	x0, x19
	bl	evList
	mov	x19, x0
.LBB261_4:                              // %"$2"
	adrp	x8, env
	add	x8, x8, :lo12:env
	ldr	x9, [x8]
	mov	x10, sp
	sub	x22, x10, #16                   // =16
	mov	sp, x22
	lsr	x11, x19, #32
	lsr	x12, x9, #32
	stp	w19, w11, [x10, #-16]
	mov	x20, x22
	stp	w9, w12, [x10, #-8]
.LBB261_5:                              // %"$7.sink.split"
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB261_8 Depth 2
	lsr	x9, x20, #32
	stp	w20, w9, [x8]
	b	.LBB261_8
.LBB261_6:                              // %"$13"
                                        //   in Loop: Header=BB261_8 Depth=2
	mov	x0, x20
	bl	evList
	mov	x20, x0
.LBB261_7:                              // %"$10"
                                        //   in Loop: Header=BB261_8 Depth=2
	mov	x0, x20
	mov	x1, x19
	bl	compare
	cmp	x0, #0                          // =0
	b.gt	.LBB261_12
.LBB261_8:                              // %"$7"
                                        //   Parent Loop BB261_5 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	w21, w8, [x21, #8]
	bfi	x21, x8, #32, #32
	tst	x21, #0xf
	b.ne	.LBB261_13
// %bb.9:                               // %"$8"
                                        //   in Loop: Header=BB261_8 Depth=2
	ldp	w20, w8, [x21]
	bfi	x20, x8, #32, #32
	tst	x20, #0x6
	b.ne	.LBB261_7
// %bb.10:                              // %"$11"
                                        //   in Loop: Header=BB261_8 Depth=2
	tbz	w20, #3, .LBB261_6
// %bb.11:                              // %"$14"
                                        //   in Loop: Header=BB261_8 Depth=2
	ldp	w20, w8, [x20]
	bfi	x20, x8, #32, #32
	b	.LBB261_7
.LBB261_12:                             //   in Loop: Header=BB261_5 Depth=1
	mov	x8, x22
	mov	x19, x20
	b	.LBB261_5
.LBB261_13:                             // %"$9"
	ldp	w9, w8, [x22, #8]
	bfi	x9, x8, #32, #32
	adrp	x8, env
	str	x9, [x8, :lo12:env]
	mov	x0, x19
	mov	sp, x29
	ldp	x20, x19, [sp, #32]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #48             // 16-byte Folded Reload
	ret
.Lfunc_end261:
	.size	_max, .Lfunc_end261-_max
	.cfi_endproc
                                        // -- End function
	.globl	_min                            // -- Begin function _min
	.p2align	4
	.type	_min,@function
_min:                                   // @_min
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-48]!           // 16-byte Folded Spill
	stp	x22, x21, [sp, #16]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #32]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 48
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w30, -40
	.cfi_offset w29, -48
	ldp	w21, w8, [x0, #8]
	bfi	x21, x8, #32, #32
	ldp	w19, w8, [x21]
	bfi	x19, x8, #32, #32
	tst	x19, #0x6
	b.ne	.LBB262_4
// %bb.1:                               // %"$3"
	tbz	w19, #3, .LBB262_3
// %bb.2:                               // %"$6"
	ldp	w19, w8, [x19]
	bfi	x19, x8, #32, #32
	b	.LBB262_4
.LBB262_3:                              // %"$5"
	mov	x0, x19
	bl	evList
	mov	x19, x0
.LBB262_4:                              // %"$2"
	adrp	x8, env
	add	x8, x8, :lo12:env
	ldr	x9, [x8]
	mov	x10, sp
	sub	x22, x10, #16                   // =16
	mov	sp, x22
	lsr	x11, x19, #32
	lsr	x12, x9, #32
	stp	w19, w11, [x10, #-16]
	mov	x20, x22
	stp	w9, w12, [x10, #-8]
.LBB262_5:                              // %"$7.sink.split"
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB262_8 Depth 2
	lsr	x9, x20, #32
	stp	w20, w9, [x8]
	b	.LBB262_8
.LBB262_6:                              // %"$13"
                                        //   in Loop: Header=BB262_8 Depth=2
	mov	x0, x20
	bl	evList
	mov	x20, x0
.LBB262_7:                              // %"$10"
                                        //   in Loop: Header=BB262_8 Depth=2
	mov	x0, x20
	mov	x1, x19
	bl	compare
	tbnz	x0, #63, .LBB262_12
.LBB262_8:                              // %"$7"
                                        //   Parent Loop BB262_5 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	w21, w8, [x21, #8]
	bfi	x21, x8, #32, #32
	tst	x21, #0xf
	b.ne	.LBB262_13
// %bb.9:                               // %"$8"
                                        //   in Loop: Header=BB262_8 Depth=2
	ldp	w20, w8, [x21]
	bfi	x20, x8, #32, #32
	tst	x20, #0x6
	b.ne	.LBB262_7
// %bb.10:                              // %"$11"
                                        //   in Loop: Header=BB262_8 Depth=2
	tbz	w20, #3, .LBB262_6
// %bb.11:                              // %"$14"
                                        //   in Loop: Header=BB262_8 Depth=2
	ldp	w20, w8, [x20]
	bfi	x20, x8, #32, #32
	b	.LBB262_7
.LBB262_12:                             //   in Loop: Header=BB262_5 Depth=1
	mov	x8, x22
	mov	x19, x20
	b	.LBB262_5
.LBB262_13:                             // %"$9"
	ldp	w9, w8, [x22, #8]
	bfi	x9, x8, #32, #32
	adrp	x8, env
	str	x9, [x8, :lo12:env]
	mov	x0, x19
	mov	sp, x29
	ldp	x20, x19, [sp, #32]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #48             // 16-byte Folded Reload
	ret
.Lfunc_end262:
	.size	_min, .Lfunc_end262-_min
	.cfi_endproc
                                        // -- End function
	.globl	_atom                           // -- Begin function _atom
	.p2align	4
	.type	_atom,@function
_atom:                                  // @_atom
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w0, w8, [x9]
	bfi	x0, x8, #32, #32
	tst	x0, #0x6
	b.ne	.LBB263_4
// %bb.1:                               // %"$3"
	tbz	w0, #3, .LBB263_3
// %bb.2:                               // %"$6"
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB263_4
.LBB263_3:                              // %"$5"
	bl	evList
.LBB263_4:                              // %"$2"
	adrp	x8, SymTab+8
	add	x8, x8, :lo12:SymTab+8
	add	x9, x8, #208                    // =208
	tst	x0, #0xf
	csel	x0, x9, x8, ne
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end263:
	.size	_atom, .Lfunc_end263-_atom
	.cfi_endproc
                                        // -- End function
	.globl	_pair                           // -- Begin function _pair
	.p2align	4
	.type	_pair,@function
_pair:                                  // @_pair
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w0, w8, [x9]
	bfi	x0, x8, #32, #32
	tst	x0, #0x6
	b.ne	.LBB264_4
// %bb.1:                               // %"$3"
	tbz	w0, #3, .LBB264_3
// %bb.2:                               // %"$6"
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB264_4
.LBB264_3:                              // %"$5"
	bl	evList
.LBB264_4:                              // %"$2"
	adrp	x8, SymTab+8
	add	x8, x8, :lo12:SymTab+8
	tst	x0, #0xf
	csel	x0, x0, x8, eq
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end264:
	.size	_pair, .Lfunc_end264-_pair
	.cfi_endproc
                                        // -- End function
	.globl	_circQ                          // -- Begin function _circQ
	.p2align	4
	.type	_circQ,@function
_circQ:                                 // @_circQ
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w0, w8, [x9]
	bfi	x0, x8, #32, #32
	tst	x0, #0x6
	b.ne	.LBB265_4
// %bb.1:                               // %"$3"
	tbz	w0, #3, .LBB265_3
// %bb.2:                               // %"$6"
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB265_4
.LBB265_3:                              // %"$5"
	bl	evList
.LBB265_4:                              // %"$2"
	bl	circ
	adrp	x8, SymTab+8
	add	x8, x8, :lo12:SymTab+8
	cmp	x0, #0                          // =0
	csel	x0, x0, x8, ne
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end265:
	.size	_circQ, .Lfunc_end265-_circQ
	.cfi_endproc
                                        // -- End function
	.globl	_lstQ                           // -- Begin function _lstQ
	.p2align	4
	.type	_lstQ,@function
_lstQ:                                  // @_lstQ
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w0, w8, [x9]
	bfi	x0, x8, #32, #32
	tst	x0, #0x6
	b.ne	.LBB266_4
// %bb.1:                               // %"$4"
	tbz	w0, #3, .LBB266_3
// %bb.2:                               // %"$7"
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB266_4
.LBB266_3:                              // %"$6"
	bl	evList
.LBB266_4:                              // %"$3"
	adrp	x8, SymTab+8
	add	x8, x8, :lo12:SymTab+8
	and	x9, x0, #0xf
	cmp	x0, x8
	ccmp	x9, #0, #4, ne
	add	x9, x8, #208                    // =208
	csel	x0, x9, x8, eq
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end266:
	.size	_lstQ, .Lfunc_end266-_lstQ
	.cfi_endproc
                                        // -- End function
	.globl	_numQ                           // -- Begin function _numQ
	.p2align	4
	.type	_numQ,@function
_numQ:                                  // @_numQ
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w0, w8, [x9]
	bfi	x0, x8, #32, #32
	tst	x0, #0x6
	b.ne	.LBB267_4
// %bb.1:                               // %"$3"
	tbz	w0, #3, .LBB267_3
// %bb.2:                               // %"$6"
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB267_4
.LBB267_3:                              // %"$5"
	bl	evList
.LBB267_4:                              // %"$2"
	adrp	x8, SymTab+8
	add	x8, x8, :lo12:SymTab+8
	tst	x0, #0x6
	csel	x0, x0, x8, ne
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end267:
	.size	_numQ, .Lfunc_end267-_numQ
	.cfi_endproc
                                        // -- End function
	.globl	_symQ                           // -- Begin function _symQ
	.p2align	4
	.type	_symQ,@function
_symQ:                                  // @_symQ
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w0, w8, [x9]
	bfi	x0, x8, #32, #32
	tst	x0, #0x6
	b.ne	.LBB268_4
// %bb.1:                               // %"$3"
	tbz	w0, #3, .LBB268_3
// %bb.2:                               // %"$6"
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB268_4
.LBB268_3:                              // %"$5"
	bl	evList
.LBB268_4:                              // %"$2"
	eor	w8, w0, #0x8
	adrp	x9, SymTab+8
	add	x9, x9, :lo12:SymTab+8
	add	x10, x9, #208                   // =208
	tst	x8, #0xe
	csel	x0, x10, x9, eq
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end268:
	.size	_symQ, .Lfunc_end268-_symQ
	.cfi_endproc
                                        // -- End function
	.globl	_flgQ                           // -- Begin function _flgQ
	.p2align	4
	.type	_flgQ,@function
_flgQ:                                  // @_flgQ
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w0, w8, [x9]
	bfi	x0, x8, #32, #32
	tst	x0, #0x6
	b.ne	.LBB269_4
// %bb.1:                               // %"$4"
	tbz	w0, #3, .LBB269_3
// %bb.2:                               // %"$7"
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB269_4
.LBB269_3:                              // %"$6"
	bl	evList
.LBB269_4:                              // %"$3"
	adrp	x8, SymTab+8
	add	x8, x8, :lo12:SymTab+8
	add	x9, x8, #208                    // =208
	cmp	x0, x8
	ccmp	x0, x9, #4, ne
	csel	x0, x9, x8, eq
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end269:
	.size	_flgQ, .Lfunc_end269-_flgQ
	.cfi_endproc
                                        // -- End function
	.globl	_member                         // -- Begin function _member
	.p2align	4
	.type	_member,@function
_member:                                // @_member
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-64]!           // 16-byte Folded Spill
	stp	x24, x23, [sp, #16]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #32]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #48]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 64
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w30, -56
	.cfi_offset w29, -64
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w19, w8, [x9]
	bfi	x19, x8, #32, #32
	ldp	w20, w8, [x9, #8]
	bfi	x20, x8, #32, #32
	tst	x19, #0x6
	b.ne	.LBB270_4
// %bb.1:                               // %"$3"
	tbz	w19, #3, .LBB270_3
// %bb.2:                               // %"$6"
	ldp	w19, w8, [x19]
	bfi	x19, x8, #32, #32
	b	.LBB270_4
.LBB270_3:                              // %"$5"
	mov	x0, x19
	bl	evList
	mov	x19, x0
.LBB270_4:                              // %"$2"
	adrp	x22, env
	ldr	x8, [x22, :lo12:env]
	mov	x9, sp
	sub	x23, x9, #16                    // =16
	mov	sp, x23
	lsr	x10, x19, #32
	stp	w19, w10, [x9, #-16]
	lsr	x10, x8, #32
	stp	w8, w10, [x9, #-8]
	str	x23, [x22, :lo12:env]
	ldp	w20, w8, [x20]
	bfi	x20, x8, #32, #32
	tst	x20, #0x6
	b.ne	.LBB270_8
// %bb.5:                               // %"$8"
	tbz	w20, #3, .LBB270_7
// %bb.6:                               // %"$11"
	ldp	w20, w8, [x20]
	bfi	x20, x8, #32, #32
	b	.LBB270_8
.LBB270_7:                              // %"$10"
	mov	x0, x20
	bl	evList
	mov	x20, x0
.LBB270_8:                              // %"$7"
	mov	x21, x20
	adrp	x24, SymTab+8
	add	x24, x24, :lo12:SymTab+8
.LBB270_9:                              // %"$12"
                                        // =>This Inner Loop Header: Depth=1
	tst	x21, #0xf
	b.ne	.LBB270_13
// %bb.10:                              // %"$13"
                                        //   in Loop: Header=BB270_9 Depth=1
	ldp	w1, w8, [x21]
	bfi	x1, x8, #32, #32
	mov	x0, x19
	bl	equal
	tbnz	w0, #0, .LBB270_14
// %bb.11:                              // %"$19"
                                        //   in Loop: Header=BB270_9 Depth=1
	ldp	w21, w8, [x21, #8]
	bfi	x21, x8, #32, #32
	cmp	x20, x21
	b.ne	.LBB270_9
// %bb.12:
	mov	x21, x24
	b	.LBB270_14
.LBB270_13:                             // %"$15"
	mov	x0, x19
	mov	x1, x21
	bl	equal
	adrp	x8, SymTab+8
	add	x8, x8, :lo12:SymTab+8
	tst	w0, #0x1
	csel	x21, x21, x8, ne
.LBB270_14:                             // %"$14"
	ldp	w9, w8, [x23, #8]
	bfi	x9, x8, #32, #32
	str	x9, [x22, :lo12:env]
	mov	x0, x21
	mov	sp, x29
	ldp	x20, x19, [sp, #48]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #32]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #64             // 16-byte Folded Reload
	ret
.Lfunc_end270:
	.size	_member, .Lfunc_end270-_member
	.cfi_endproc
                                        // -- End function
	.globl	_memq                           // -- Begin function _memq
	.p2align	4
	.type	_memq,@function
_memq:                                  // @_memq
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-48]!           // 16-byte Folded Spill
	stp	x22, x21, [sp, #16]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #32]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 48
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w30, -40
	.cfi_offset w29, -48
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w19, w8, [x9]
	bfi	x19, x8, #32, #32
	ldp	w22, w8, [x9, #8]
	bfi	x22, x8, #32, #32
	tst	x19, #0x6
	b.ne	.LBB271_4
// %bb.1:                               // %"$3"
	tbz	w19, #3, .LBB271_3
// %bb.2:                               // %"$6"
	ldp	w19, w8, [x19]
	bfi	x19, x8, #32, #32
	b	.LBB271_4
.LBB271_3:                              // %"$5"
	mov	x0, x19
	bl	evList
	mov	x19, x0
.LBB271_4:                              // %"$2"
	adrp	x20, env
	ldr	x8, [x20, :lo12:env]
	mov	x9, sp
	sub	x21, x9, #16                    // =16
	mov	sp, x21
	lsr	x10, x19, #32
	stp	w19, w10, [x9, #-16]
	lsr	x10, x8, #32
	stp	w8, w10, [x9, #-8]
	str	x21, [x20, :lo12:env]
	ldp	w0, w8, [x22]
	bfi	x0, x8, #32, #32
	tst	x0, #0x6
	b.ne	.LBB271_8
// %bb.5:                               // %"$8"
	tbz	w0, #3, .LBB271_7
// %bb.6:                               // %"$11"
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB271_8
.LBB271_7:                              // %"$10"
	bl	evList
.LBB271_8:                              // %"$7"
	mov	x8, x0
	adrp	x9, SymTab+8
	add	x9, x9, :lo12:SymTab+8
.LBB271_9:                              // %"$12"
                                        // =>This Inner Loop Header: Depth=1
	tst	x8, #0xf
	b.ne	.LBB271_13
// %bb.10:                              // %"$13"
                                        //   in Loop: Header=BB271_9 Depth=1
	ldp	w11, w10, [x8]
	bfi	x11, x10, #32, #32
	cmp	x19, x11
	b.eq	.LBB271_14
// %bb.11:                              // %"$19"
                                        //   in Loop: Header=BB271_9 Depth=1
	ldp	w8, w10, [x8, #8]
	bfi	x8, x10, #32, #32
	cmp	x0, x8
	b.ne	.LBB271_9
// %bb.12:
	mov	x8, x9
	b	.LBB271_14
.LBB271_13:                             // %"$15"
	cmp	x19, x8
	adrp	x9, SymTab+8
	add	x9, x9, :lo12:SymTab+8
	csel	x8, x8, x9, eq
.LBB271_14:                             // %"$14"
	ldp	w10, w9, [x21, #8]
	bfi	x10, x9, #32, #32
	str	x10, [x20, :lo12:env]
	mov	x0, x8
	mov	sp, x29
	ldp	x20, x19, [sp, #32]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #48             // 16-byte Folded Reload
	ret
.Lfunc_end271:
	.size	_memq, .Lfunc_end271-_memq
	.cfi_endproc
                                        // -- End function
	.globl	_mmeq                           // -- Begin function _mmeq
	.p2align	4
	.type	_mmeq,@function
_mmeq:                                  // @_mmeq
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-48]!           // 16-byte Folded Spill
	stp	x22, x21, [sp, #16]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #32]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 48
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w30, -40
	.cfi_offset w29, -48
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w19, w8, [x9]
	bfi	x19, x8, #32, #32
	ldp	w22, w8, [x9, #8]
	bfi	x22, x8, #32, #32
	tst	x19, #0x6
	b.ne	.LBB272_4
// %bb.1:                               // %"$3"
	tbz	w19, #3, .LBB272_3
// %bb.2:                               // %"$6"
	ldp	w19, w8, [x19]
	bfi	x19, x8, #32, #32
	b	.LBB272_4
.LBB272_3:                              // %"$5"
	mov	x0, x19
	bl	evList
	mov	x19, x0
.LBB272_4:                              // %"$2"
	adrp	x20, env
	ldr	x8, [x20, :lo12:env]
	mov	x9, sp
	sub	x21, x9, #16                    // =16
	mov	sp, x21
	lsr	x10, x19, #32
	stp	w19, w10, [x9, #-16]
	lsr	x10, x8, #32
	stp	w8, w10, [x9, #-8]
	str	x21, [x20, :lo12:env]
	ldp	w0, w8, [x22]
	bfi	x0, x8, #32, #32
	tst	x0, #0x6
	b.ne	.LBB272_8
// %bb.5:                               // %"$8"
	tbz	w0, #3, .LBB272_7
// %bb.6:                               // %"$11"
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB272_8
.LBB272_7:                              // %"$10"
	bl	evList
.LBB272_8:                              // %"$12"
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB272_10 Depth 2
	tst	x19, #0xf
	b.ne	.LBB272_14
// %bb.9:                               // %"$13"
                                        //   in Loop: Header=BB272_8 Depth=1
	ldp	w9, w8, [x19]
	bfi	x9, x8, #32, #32
	ldp	w19, w8, [x19, #8]
	bfi	x19, x8, #32, #32
	mov	x8, x0
.LBB272_10:                             // %"$15"
                                        //   Parent Loop BB272_8 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	tst	x8, #0xf
	b.ne	.LBB272_13
// %bb.11:                              // %"$16"
                                        //   in Loop: Header=BB272_10 Depth=2
	ldp	w11, w10, [x8]
	bfi	x11, x10, #32, #32
	cmp	x9, x11
	b.eq	.LBB272_15
// %bb.12:                              // %"$19"
                                        //   in Loop: Header=BB272_10 Depth=2
	ldp	w8, w10, [x8, #8]
	bfi	x8, x10, #32, #32
	cmp	x0, x8
	b.ne	.LBB272_10
	b	.LBB272_14
.LBB272_13:                             // %"$17"
                                        //   in Loop: Header=BB272_8 Depth=1
	cmp	x9, x8
	b.ne	.LBB272_8
.LBB272_14:                             // %"$20"
	ldp	w9, w8, [x21, #8]
	bfi	x9, x8, #32, #32
	str	x9, [x20, :lo12:env]
	adrp	x0, SymTab+8
	add	x0, x0, :lo12:SymTab+8
	b	.LBB272_16
.LBB272_15:                             // %"$18"
	ldp	w10, w9, [x21, #8]
	bfi	x10, x9, #32, #32
	str	x10, [x20, :lo12:env]
	mov	x0, x8
.LBB272_16:                             // %"$18"
	mov	sp, x29
	ldp	x20, x19, [sp, #32]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #48             // 16-byte Folded Reload
	ret
.Lfunc_end272:
	.size	_mmeq, .Lfunc_end272-_mmeq
	.cfi_endproc
                                        // -- End function
	.globl	_sect                           // -- Begin function _sect
	.p2align	4
	.type	_sect,@function
_sect:                                  // @_sect
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-96]!           // 16-byte Folded Spill
	str	x27, [sp, #16]                  // 8-byte Folded Spill
	stp	x26, x25, [sp, #32]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #48]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #64]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #80]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w19, w8, [x9]
	bfi	x19, x8, #32, #32
	ldp	w20, w8, [x9, #8]
	bfi	x20, x8, #32, #32
	tst	x19, #0x6
	b.ne	.LBB273_4
// %bb.1:                               // %"$3"
	tbz	w19, #3, .LBB273_3
// %bb.2:                               // %"$6"
	ldp	w19, w8, [x19]
	bfi	x19, x8, #32, #32
	b	.LBB273_4
.LBB273_3:                              // %"$5"
	mov	x0, x19
	bl	evList
	mov	x19, x0
.LBB273_4:                              // %"$2"
	adrp	x23, env
	ldr	x8, [x23, :lo12:env]
	mov	x9, sp
	sub	x24, x9, #16                    // =16
	mov	sp, x24
	lsr	x10, x19, #32
	stp	w19, w10, [x9, #-16]
	lsr	x10, x8, #32
	stp	w8, w10, [x9, #-8]
	str	x24, [x23, :lo12:env]
	ldp	w20, w8, [x20]
	bfi	x20, x8, #32, #32
	tst	x20, #0x6
	b.ne	.LBB273_8
// %bb.5:                               // %"$8"
	tbz	w20, #3, .LBB273_7
// %bb.6:                               // %"$11"
	ldp	w20, w8, [x20]
	bfi	x20, x8, #32, #32
	b	.LBB273_8
.LBB273_7:                              // %"$10"
	mov	x0, x20
	bl	evList
	mov	x20, x0
.LBB273_8:                              // %"$7"
	ldr	x8, [x23, :lo12:env]
	mov	x9, sp
	sub	x10, x9, #16                    // =16
	mov	sp, x10
	lsr	x11, x20, #32
	lsr	x12, x8, #32
	stp	w20, w11, [x9, #-16]
	stp	w8, w12, [x9, #-8]
	str	x10, [x23, :lo12:env]
	mov	x8, sp
	sub	x25, x8, #16                    // =16
	mov	sp, x25
	mov	x26, xzr
	adrp	x21, SymTab+8
	add	x21, x21, :lo12:SymTab+8
	lsr	x9, x21, #32
	stp	w21, w9, [x8, #-16]
	ldr	x9, [x23, :lo12:env]
	lsr	x10, x9, #32
	stp	w9, w10, [x8, #-8]
	str	x25, [x23, :lo12:env]
	b	.LBB273_11
.LBB273_9:                              // %"$24"
                                        //   in Loop: Header=BB273_11 Depth=1
	mov	x8, x25
.LBB273_10:                             // %"$25"
                                        //   in Loop: Header=BB273_11 Depth=1
	lsr	x9, x0, #32
	stp	w0, w9, [x8]
	mov	x26, x0
.LBB273_11:                             // %"$12"
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB273_13 Depth 2
	tst	x19, #0xf
	b.ne	.LBB273_17
// %bb.12:                              // %"$13"
                                        //   in Loop: Header=BB273_11 Depth=1
	ldp	w22, w8, [x19]
	bfi	x22, x8, #32, #32
	ldp	w19, w8, [x19, #8]
	bfi	x19, x8, #32, #32
	mov	x27, x20
	tst	x27, #0xf
	b.ne	.LBB273_11
.LBB273_13:                             // %"$16"
                                        //   Parent Loop BB273_11 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	w1, w8, [x27]
	bfi	x1, x8, #32, #32
	mov	x0, x22
	bl	equal
	tbnz	w0, #0, .LBB273_15
// %bb.14:                              // %"$19"
                                        //   in Loop: Header=BB273_13 Depth=2
	ldp	w27, w8, [x27, #8]
	bfi	x27, x8, #32, #32
	tst	x27, #0xf
	b.eq	.LBB273_13
	b	.LBB273_11
.LBB273_15:                             // %"$21"
                                        //   in Loop: Header=BB273_11 Depth=1
	mov	x0, x22
	mov	x1, x21
	bl	cons
	cbz	x26, .LBB273_9
// %bb.16:                              // %"$23"
                                        //   in Loop: Header=BB273_11 Depth=1
	add	x8, x26, #8                     // =8
	b	.LBB273_10
.LBB273_17:                             // %"$14"
	ldp	w0, w8, [x25]
	bfi	x0, x8, #32, #32
	ldp	w9, w8, [x24, #8]
	bfi	x9, x8, #32, #32
	str	x9, [x23, :lo12:env]
	mov	sp, x29
	ldp	x20, x19, [sp, #80]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #64]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #48]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #32]             // 16-byte Folded Reload
	ldr	x27, [sp, #16]                  // 8-byte Folded Reload
	ldp	x29, x30, [sp], #96             // 16-byte Folded Reload
	ret
.Lfunc_end273:
	.size	_sect, .Lfunc_end273-_sect
	.cfi_endproc
                                        // -- End function
	.globl	_diff                           // -- Begin function _diff
	.p2align	4
	.type	_diff,@function
_diff:                                  // @_diff
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-96]!           // 16-byte Folded Spill
	str	x27, [sp, #16]                  // 8-byte Folded Spill
	stp	x26, x25, [sp, #32]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #48]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #64]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #80]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w19, w8, [x9]
	bfi	x19, x8, #32, #32
	ldp	w20, w8, [x9, #8]
	bfi	x20, x8, #32, #32
	tst	x19, #0x6
	b.ne	.LBB274_4
// %bb.1:                               // %"$3"
	tbz	w19, #3, .LBB274_3
// %bb.2:                               // %"$6"
	ldp	w19, w8, [x19]
	bfi	x19, x8, #32, #32
	b	.LBB274_4
.LBB274_3:                              // %"$5"
	mov	x0, x19
	bl	evList
	mov	x19, x0
.LBB274_4:                              // %"$2"
	adrp	x23, env
	ldr	x8, [x23, :lo12:env]
	mov	x9, sp
	sub	x24, x9, #16                    // =16
	mov	sp, x24
	lsr	x10, x19, #32
	stp	w19, w10, [x9, #-16]
	lsr	x10, x8, #32
	stp	w8, w10, [x9, #-8]
	str	x24, [x23, :lo12:env]
	ldp	w20, w8, [x20]
	bfi	x20, x8, #32, #32
	tst	x20, #0x6
	b.ne	.LBB274_8
// %bb.5:                               // %"$8"
	tbz	w20, #3, .LBB274_7
// %bb.6:                               // %"$11"
	ldp	w20, w8, [x20]
	bfi	x20, x8, #32, #32
	b	.LBB274_8
.LBB274_7:                              // %"$10"
	mov	x0, x20
	bl	evList
	mov	x20, x0
.LBB274_8:                              // %"$7"
	ldr	x8, [x23, :lo12:env]
	mov	x9, sp
	sub	x10, x9, #16                    // =16
	mov	sp, x10
	lsr	x11, x20, #32
	lsr	x12, x8, #32
	stp	w20, w11, [x9, #-16]
	stp	w8, w12, [x9, #-8]
	str	x10, [x23, :lo12:env]
	mov	x8, sp
	sub	x25, x8, #16                    // =16
	mov	sp, x25
	mov	x26, xzr
	adrp	x21, SymTab+8
	add	x21, x21, :lo12:SymTab+8
	lsr	x9, x21, #32
	stp	w21, w9, [x8, #-16]
	ldr	x9, [x23, :lo12:env]
	lsr	x10, x9, #32
	stp	w9, w10, [x8, #-8]
	str	x25, [x23, :lo12:env]
	b	.LBB274_10
.LBB274_9:                              // %"$21.critedge"
                                        //   in Loop: Header=BB274_10 Depth=1
	mov	x0, x22
	mov	x1, x21
	bl	cons
	add	x8, x26, #8                     // =8
	cmp	x26, #0                         // =0
	csel	x8, x25, x8, eq
	lsr	x9, x0, #32
	stp	w0, w9, [x8]
	mov	x26, x0
.LBB274_10:                             // %"$12"
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB274_12 Depth 2
	tst	x19, #0xf
	b.ne	.LBB274_14
// %bb.11:                              // %"$13"
                                        //   in Loop: Header=BB274_10 Depth=1
	ldp	w22, w8, [x19]
	bfi	x22, x8, #32, #32
	ldp	w19, w8, [x19, #8]
	bfi	x19, x8, #32, #32
	mov	x27, x20
	tst	x27, #0xf
	b.ne	.LBB274_9
.LBB274_12:                             // %"$16"
                                        //   Parent Loop BB274_10 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	w1, w8, [x27]
	bfi	x1, x8, #32, #32
	mov	x0, x22
	bl	equal
	tbnz	w0, #0, .LBB274_10
// %bb.13:                              // %"$19"
                                        //   in Loop: Header=BB274_12 Depth=2
	ldp	w27, w8, [x27, #8]
	bfi	x27, x8, #32, #32
	tst	x27, #0xf
	b.eq	.LBB274_12
	b	.LBB274_9
.LBB274_14:                             // %"$14"
	ldp	w0, w8, [x25]
	bfi	x0, x8, #32, #32
	ldp	w9, w8, [x24, #8]
	bfi	x9, x8, #32, #32
	str	x9, [x23, :lo12:env]
	mov	sp, x29
	ldp	x20, x19, [sp, #80]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #64]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #48]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #32]             // 16-byte Folded Reload
	ldr	x27, [sp, #16]                  // 8-byte Folded Reload
	ldp	x29, x30, [sp], #96             // 16-byte Folded Reload
	ret
.Lfunc_end274:
	.size	_diff, .Lfunc_end274-_diff
	.cfi_endproc
                                        // -- End function
	.globl	_index                          // -- Begin function _index
	.p2align	4
	.type	_index,@function
_index:                                 // @_index
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-80]!           // 16-byte Folded Spill
	str	x25, [sp, #16]                  // 8-byte Folded Spill
	stp	x24, x23, [sp, #32]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #48]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #64]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 80
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -64
	.cfi_offset w30, -72
	.cfi_offset w29, -80
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w19, w8, [x9]
	bfi	x19, x8, #32, #32
	ldp	w20, w8, [x9, #8]
	bfi	x20, x8, #32, #32
	tst	x19, #0x6
	b.ne	.LBB275_4
// %bb.1:                               // %"$3"
	tbz	w19, #3, .LBB275_3
// %bb.2:                               // %"$6"
	ldp	w19, w8, [x19]
	bfi	x19, x8, #32, #32
	b	.LBB275_4
.LBB275_3:                              // %"$5"
	mov	x0, x19
	bl	evList
	mov	x19, x0
.LBB275_4:                              // %"$2"
	adrp	x22, env
	ldr	x8, [x22, :lo12:env]
	mov	x9, sp
	sub	x23, x9, #16                    // =16
	mov	sp, x23
	lsr	x10, x19, #32
	stp	w19, w10, [x9, #-16]
	lsr	x10, x8, #32
	stp	w8, w10, [x9, #-8]
	str	x23, [x22, :lo12:env]
	ldp	w20, w8, [x20]
	bfi	x20, x8, #32, #32
	tst	x20, #0x6
	b.ne	.LBB275_8
// %bb.5:                               // %"$8"
	tbz	w20, #3, .LBB275_7
// %bb.6:                               // %"$11"
	ldp	w20, w8, [x20]
	bfi	x20, x8, #32, #32
	b	.LBB275_8
.LBB275_7:                              // %"$10"
	mov	x0, x20
	bl	evList
	mov	x20, x0
.LBB275_8:                              // %"$7"
	mov	w24, #1
	mov	x25, x20
	adrp	x21, SymTab+8
	add	x21, x21, :lo12:SymTab+8
.LBB275_9:                              // %"$12"
                                        // =>This Inner Loop Header: Depth=1
	tst	x25, #0xf
	b.ne	.LBB275_13
// %bb.10:                              // %"$13"
                                        //   in Loop: Header=BB275_9 Depth=1
	ldp	w1, w8, [x25]
	bfi	x1, x8, #32, #32
	mov	x0, x19
	bl	equal
	tbnz	w0, #0, .LBB275_12
// %bb.11:                              // %"$16"
                                        //   in Loop: Header=BB275_9 Depth=1
	ldp	w25, w8, [x25, #8]
	bfi	x25, x8, #32, #32
	add	x24, x24, #1                    // =1
	cmp	x20, x25
	b.ne	.LBB275_9
	b	.LBB275_13
.LBB275_12:                             // %"$17"
	mov	w21, #2
	bfi	x21, x24, #4, #60
.LBB275_13:                             // %"$14"
	ldp	w9, w8, [x23, #8]
	bfi	x9, x8, #32, #32
	str	x9, [x22, :lo12:env]
	mov	x0, x21
	mov	sp, x29
	ldp	x20, x19, [sp, #64]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #48]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #32]             // 16-byte Folded Reload
	ldr	x25, [sp, #16]                  // 8-byte Folded Reload
	ldp	x29, x30, [sp], #80             // 16-byte Folded Reload
	ret
.Lfunc_end275:
	.size	_index, .Lfunc_end275-_index
	.cfi_endproc
                                        // -- End function
	.globl	_offset                         // -- Begin function _offset
	.p2align	4
	.type	_offset,@function
_offset:                                // @_offset
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-64]!           // 16-byte Folded Spill
	stp	x24, x23, [sp, #16]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #32]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #48]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 64
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w30, -56
	.cfi_offset w29, -64
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w19, w8, [x9]
	bfi	x19, x8, #32, #32
	ldp	w20, w8, [x9, #8]
	bfi	x20, x8, #32, #32
	tst	x19, #0x6
	b.ne	.LBB276_4
// %bb.1:                               // %"$3"
	tbz	w19, #3, .LBB276_3
// %bb.2:                               // %"$6"
	ldp	w19, w8, [x19]
	bfi	x19, x8, #32, #32
	b	.LBB276_4
.LBB276_3:                              // %"$5"
	mov	x0, x19
	bl	evList
	mov	x19, x0
.LBB276_4:                              // %"$2"
	adrp	x22, env
	ldr	x8, [x22, :lo12:env]
	mov	x9, sp
	sub	x23, x9, #16                    // =16
	mov	sp, x23
	lsr	x10, x19, #32
	stp	w19, w10, [x9, #-16]
	lsr	x10, x8, #32
	stp	w8, w10, [x9, #-8]
	str	x23, [x22, :lo12:env]
	ldp	w20, w8, [x20]
	bfi	x20, x8, #32, #32
	tst	x20, #0x6
	b.ne	.LBB276_8
// %bb.5:                               // %"$8"
	tbz	w20, #3, .LBB276_7
// %bb.6:                               // %"$11"
	ldp	w20, w8, [x20]
	bfi	x20, x8, #32, #32
	b	.LBB276_8
.LBB276_7:                              // %"$10"
	mov	x0, x20
	bl	evList
	mov	x20, x0
.LBB276_8:                              // %"$12.preheader"
	mov	w24, #1
	adrp	x21, SymTab+8
	add	x21, x21, :lo12:SymTab+8
	tst	x20, #0xf
	b.ne	.LBB276_12
.LBB276_9:                              // %"$13"
                                        // =>This Inner Loop Header: Depth=1
	mov	x0, x19
	mov	x1, x20
	bl	equal
	tbnz	w0, #0, .LBB276_11
// %bb.10:                              // %"$16"
                                        //   in Loop: Header=BB276_9 Depth=1
	ldp	w20, w8, [x20, #8]
	bfi	x20, x8, #32, #32
	add	x24, x24, #1                    // =1
	tst	x20, #0xf
	b.eq	.LBB276_9
	b	.LBB276_12
.LBB276_11:                             // %"$17"
	mov	w21, #2
	bfi	x21, x24, #4, #60
.LBB276_12:                             // %"$14"
	ldp	w9, w8, [x23, #8]
	bfi	x9, x8, #32, #32
	str	x9, [x22, :lo12:env]
	mov	x0, x21
	mov	sp, x29
	ldp	x20, x19, [sp, #48]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #32]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #64             // 16-byte Folded Reload
	ret
.Lfunc_end276:
	.size	_offset, .Lfunc_end276-_offset
	.cfi_endproc
                                        // -- End function
	.globl	_prior                          // -- Begin function _prior
	.p2align	4
	.type	_prior,@function
_prior:                                 // @_prior
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-48]!           // 16-byte Folded Spill
	stp	x22, x21, [sp, #16]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #32]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 48
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w30, -40
	.cfi_offset w29, -48
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w19, w8, [x9]
	bfi	x19, x8, #32, #32
	ldp	w22, w8, [x9, #8]
	bfi	x22, x8, #32, #32
	tst	x19, #0x6
	b.ne	.LBB277_4
// %bb.1:                               // %"$3"
	tbz	w19, #3, .LBB277_3
// %bb.2:                               // %"$6"
	ldp	w19, w8, [x19]
	bfi	x19, x8, #32, #32
	b	.LBB277_4
.LBB277_3:                              // %"$5"
	mov	x0, x19
	bl	evList
	mov	x19, x0
.LBB277_4:                              // %"$2"
	adrp	x20, env
	ldr	x8, [x20, :lo12:env]
	mov	x9, sp
	sub	x21, x9, #16                    // =16
	mov	sp, x21
	lsr	x10, x19, #32
	stp	w19, w10, [x9, #-16]
	lsr	x10, x8, #32
	stp	w8, w10, [x9, #-8]
	str	x21, [x20, :lo12:env]
	ldp	w0, w8, [x22]
	bfi	x0, x8, #32, #32
	tst	x0, #0x6
	b.ne	.LBB277_7
// %bb.5:                               // %"$8"
	tbz	w0, #3, .LBB277_9
// %bb.6:                               // %"$11"
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
.LBB277_7:                              // %"$7"
	tst	x19, #0xf
	b.eq	.LBB277_10
.LBB277_8:
	mov	w8, wzr
	cbnz	w8, .LBB277_11
	b	.LBB277_14
.LBB277_9:                              // %"$10"
	bl	evList
	tst	x19, #0xf
	b.ne	.LBB277_8
.LBB277_10:                             // %"$13"
	cmp	x19, x0
	cset	w8, ne
	cbz	w8, .LBB277_14
.LBB277_11:                             // %"$16"
                                        // =>This Inner Loop Header: Depth=1
	tst	x0, #0xf
	b.ne	.LBB277_14
// %bb.12:                              // %"$17"
                                        //   in Loop: Header=BB277_11 Depth=1
	mov	x8, x0
	ldp	w0, w9, [x0, #8]
	bfi	x0, x9, #32, #32
	cmp	x0, x19
	b.ne	.LBB277_11
// %bb.13:                              // %"$19"
	ldp	w10, w9, [x21, #8]
	bfi	x10, x9, #32, #32
	str	x10, [x20, :lo12:env]
	mov	x0, x8
	b	.LBB277_15
.LBB277_14:                             // %"$15"
	ldp	w9, w8, [x21, #8]
	bfi	x9, x8, #32, #32
	str	x9, [x20, :lo12:env]
	adrp	x0, SymTab+8
	add	x0, x0, :lo12:SymTab+8
.LBB277_15:                             // %"$19"
	mov	sp, x29
	ldp	x20, x19, [sp, #32]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #48             // 16-byte Folded Reload
	ret
.Lfunc_end277:
	.size	_prior, .Lfunc_end277-_prior
	.cfi_endproc
                                        // -- End function
	.globl	_length                         // -- Begin function _length
	.p2align	4
	.type	_length,@function
_length:                                // @_length
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-32]!           // 16-byte Folded Spill
	stp	x20, x19, [sp, #16]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 32
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w30, -24
	.cfi_offset w29, -32
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w0, w8, [x9]
	bfi	x0, x8, #32, #32
	tst	x0, #0x6
	b.eq	.LBB278_3
// %bb.1:                               // %"$2"
	tst	x0, #0x6
	b.eq	.LBB278_6
.LBB278_2:                              // %"$9"
	mov	x1, #-2
	mov	w2, wzr
	mov	w3, wzr
	mov	x4, xzr
	bl	fmtNum
	mov	x19, x0
	b	.LBB278_21
.LBB278_3:                              // %"$3"
	tbz	w0, #3, .LBB278_5
// %bb.4:                               // %"$6"
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	tst	x0, #0x6
	b.ne	.LBB278_2
	b	.LBB278_6
.LBB278_5:                              // %"$5"
	bl	evList
	tst	x0, #0x6
	b.ne	.LBB278_2
.LBB278_6:                              // %"$8"
	tst	x0, #0xf
	b.eq	.LBB278_12
// %bb.7:                               // %"$10"
	adrp	x8, SymTab+8
	add	x8, x8, :lo12:SymTab+8
	cmp	x0, x8
	b.eq	.LBB278_9
// %bb.8:                               // %"$27"
	ldp	w8, w9, [x0, #-8]
	bfi	x8, x9, #32, #32
	tbz	w8, #3, .LBB278_10
.LBB278_9:
	mov	w19, #2
	b	.LBB278_21
.LBB278_10:                             // %"$31"
                                        // =>This Inner Loop Header: Depth=1
	tst	x8, #0x6
	b.ne	.LBB278_22
// %bb.11:                              // %"$32"
                                        //   in Loop: Header=BB278_10 Depth=1
	ldp	w8, w9, [x8, #8]
	bfi	x8, x9, #32, #32
	b	.LBB278_10
.LBB278_12:                             // %"$12.preheader"
	mov	w19, #18
	mov	x8, x0
.LBB278_13:                             // %"$12"
                                        // =>This Inner Loop Header: Depth=1
	ldr	w9, [x8]
	orr	w9, w9, #0x1
	str	w9, [x8]
	ldp	w8, w9, [x8, #8]
	bfi	x8, x9, #32, #32
	tst	x8, #0xf
	b.ne	.LBB278_16
// %bb.14:                              // %"$13"
                                        //   in Loop: Header=BB278_13 Depth=1
	ldrb	w9, [x8]
	tbnz	w9, #0, .LBB278_18
// %bb.15:                              // %"$19"
                                        //   in Loop: Header=BB278_13 Depth=1
	add	x19, x19, #16                   // =16
	b	.LBB278_13
.LBB278_16:                             // %"$16"
                                        // =>This Inner Loop Header: Depth=1
	ldr	w9, [x0]
	and	w9, w9, #0xfffffffe
	str	w9, [x0]
	ldp	w0, w9, [x0, #8]
	bfi	x0, x9, #32, #32
	cmp	x8, x0
	b.ne	.LBB278_16
	b	.LBB278_21
.LBB278_17:                             // %"$22"
                                        //   in Loop: Header=BB278_18 Depth=1
	ldr	w9, [x0]
	and	w9, w9, #0xfffffffe
	str	w9, [x0]
	ldp	w0, w9, [x0, #8]
	bfi	x0, x9, #32, #32
.LBB278_18:                             // %"$21"
                                        // =>This Inner Loop Header: Depth=1
	cmp	x8, x0
	b.ne	.LBB278_17
// %bb.19:
	adrp	x19, SymTab+216
	add	x19, x19, :lo12:SymTab+216
.LBB278_20:                             // %"$24"
                                        // =>This Inner Loop Header: Depth=1
	ldr	w9, [x0]
	and	w9, w9, #0xfffffffe
	str	w9, [x0]
	ldp	w0, w9, [x0, #8]
	bfi	x0, x9, #32, #32
	cmp	x8, x0
	b.ne	.LBB278_20
.LBB278_21:                             // %"$7"
	mov	x0, x19
	mov	sp, x29
	ldp	x20, x19, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #32             // 16-byte Folded Reload
	ret
.LBB278_22:                             // %"$33"
	mov	x9, sp
	sub	x20, x9, #16                    // =16
	mov	sp, x20
	stp	wzr, wzr, [x9, #-16]
	lsr	x10, x8, #32
	mov	w19, #2
	stp	w8, w10, [x9, #-8]
.LBB278_23:                             // %"$34"
                                        // =>This Inner Loop Header: Depth=1
	mov	x0, x20
	bl	symChar
	cbz	w0, .LBB278_21
// %bb.24:                              // %"$35"
                                        //   in Loop: Header=BB278_23 Depth=1
	add	x19, x19, #16                   // =16
	b	.LBB278_23
.Lfunc_end278:
	.size	_length, .Lfunc_end278-_length
	.cfi_endproc
                                        // -- End function
	.globl	_size                           // -- Begin function _size
	.p2align	4
	.type	_size,@function
_size:                                  // @_size
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-48]!                // 8-byte Folded Spill
	stp	x22, x21, [sp, #16]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #32]             // 16-byte Folded Spill
	.cfi_def_cfa_offset 48
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w30, -48
	mov	x20, x0
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w19, w8, [x9]
	bfi	x19, x8, #32, #32
	tst	x19, #0x6
	b.ne	.LBB279_3
// %bb.1:                               // %"$3"
	tbz	w19, #3, .LBB279_6
// %bb.2:                               // %"$6"
	ldp	w19, w8, [x19]
	bfi	x19, x8, #32, #32
.LBB279_3:                              // %"$2"
	tbz	w19, #1, .LBB279_7
.LBB279_4:                              // %"$9"
	lsr	x8, x19, #3
	mov	w0, #18
	lsr	x8, x8, #8
	cbz	x8, .LBB279_29
.LBB279_5:                              // %"$11"
                                        // =>This Inner Loop Header: Depth=1
	add	x0, x0, #16                     // =16
	lsr	x8, x8, #8
	cbnz	x8, .LBB279_5
	b	.LBB279_29
.LBB279_6:                              // %"$5"
	mov	x0, x19
	bl	evList
	mov	x19, x0
	tbnz	w19, #1, .LBB279_4
.LBB279_7:                              // %"$8"
	tbz	w19, #2, .LBB279_11
// %bb.8:                               // %"$14"
	and	x8, x19, #0xfffffffffffffff7
	mov	w0, #130
.LBB279_9:                              // %"$15"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w9, w10, [x8, #4]
	bfi	x9, x10, #32, #32
	tbnz	w9, #1, .LBB279_14
// %bb.10:                              // %"$16"
                                        //   in Loop: Header=BB279_9 Depth=1
	add	x0, x0, #128                    // =128
	mov	x8, x9
	b	.LBB279_9
.LBB279_11:                             // %"$13"
	tst	x19, #0xf
	b.eq	.LBB279_16
// %bb.12:                              // %"$23"
	adrp	x8, SymTab+8
	add	x8, x8, :lo12:SymTab+8
	cmp	x19, x8
	b.ne	.LBB279_17
// %bb.13:
	mov	w0, #2
	b	.LBB279_29
.LBB279_14:                             // %"$17"
	ldp	w8, w10, [x8, #-4]
	bfi	x8, x10, #32, #32
	lsr	x9, x9, #4
	cmn	x8, x8
	add	x8, x9, x9
	cinc	x8, x8, hs
	cbz	x8, .LBB279_29
.LBB279_15:                             // %"$20"
                                        // =>This Inner Loop Header: Depth=1
	add	x0, x0, #16                     // =16
	lsr	x8, x8, #8
	cbnz	x8, .LBB279_15
	b	.LBB279_29
.LBB279_16:                             // %"$24"
	mov	x0, x19
	bl	size
	mov	x8, x0
	mov	w0, #2
	bfi	x0, x8, #4, #60
	b	.LBB279_29
.LBB279_17:                             // %"$25"
	ldp	w8, w9, [x19, #-8]
	bfi	x8, x9, #32, #32
	tbz	w8, #3, .LBB279_19
// %bb.18:                              // %"$28"
	mov	x0, x20
	mov	x1, x19
	bl	dbFetch
	ldp	w0, w8, [x19]
	bfi	x0, x8, #32, #32
	bl	binSize
	add	x21, x0, #7                     // =7
	ldp	w9, w8, [x19, #-8]
	bfi	x9, x8, #32, #32
	and	x22, x9, #0xfffffffffffffff7
	b	.LBB279_23
.LBB279_19:                             // %"$35"
                                        // =>This Inner Loop Header: Depth=1
	tst	x8, #0x6
	b.ne	.LBB279_26
// %bb.20:                              // %"$36"
                                        //   in Loop: Header=BB279_19 Depth=1
	ldp	w8, w9, [x8, #8]
	bfi	x8, x9, #32, #32
	b	.LBB279_19
.LBB279_21:                             // %"$33"
                                        //   in Loop: Header=BB279_23 Depth=1
	ldp	w0, w8, [x19]
	bfi	x0, x8, #32, #32
	bl	binSize
	mov	x20, x0
	ldp	w0, w8, [x19, #8]
	bfi	x0, x8, #32, #32
	bl	binSize
.LBB279_22:                             // %"$34"
                                        //   in Loop: Header=BB279_23 Depth=1
	add	x8, x20, x0
	add	x21, x21, x8
.LBB279_23:                             // %"$29"
                                        // =>This Inner Loop Header: Depth=1
	tst	x22, #0xf
	b.ne	.LBB279_28
// %bb.24:                              // %"$30"
                                        //   in Loop: Header=BB279_23 Depth=1
	ldp	w19, w8, [x22]
	bfi	x19, x8, #32, #32
	ldp	w22, w8, [x22, #8]
	bfi	x22, x8, #32, #32
	tst	x19, #0xf
	b.eq	.LBB279_21
// %bb.25:                              // %"$32"
                                        //   in Loop: Header=BB279_23 Depth=1
	mov	x0, x19
	bl	binSize
	mov	x20, x0
	mov	w0, #2
	b	.LBB279_22
.LBB279_26:                             // %"$37"
	cmp	x8, #2                          // =2
	b.ne	.LBB279_30
// %bb.27:
	mov	x0, x8
	b	.LBB279_29
.LBB279_28:                             // %"$31"
	mov	w0, #2
	bfi	x0, x21, #4, #60
.LBB279_29:                             // %"$7"
	ldp	x20, x19, [sp, #32]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #16]             // 16-byte Folded Reload
	ldr	x30, [sp], #48                  // 8-byte Folded Reload
	ret
.LBB279_30:                             // %"$38"
	tbz	w8, #1, .LBB279_33
// %bb.31:                              // %"$41"
	lsr	x8, x8, #4
	mov	w0, #18
	lsr	x8, x8, #8
	cbz	x8, .LBB279_29
.LBB279_32:                             // %"$43"
                                        // =>This Inner Loop Header: Depth=1
	add	x0, x0, #16                     // =16
	lsr	x8, x8, #8
	cbnz	x8, .LBB279_32
	b	.LBB279_29
.LBB279_33:                             // %"$45.preheader"
	mov	w0, #130
.LBB279_34:                             // %"$45"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w8, w9, [x8, #4]
	bfi	x8, x9, #32, #32
	tbnz	w8, #1, .LBB279_36
// %bb.35:                              // %"$46"
                                        //   in Loop: Header=BB279_34 Depth=1
	add	x0, x0, #128                    // =128
	b	.LBB279_34
.LBB279_36:                             // %"$47"
	lsr	x8, x8, #4
	cbz	x8, .LBB279_29
.LBB279_37:                             // %"$50"
                                        // =>This Inner Loop Header: Depth=1
	add	x0, x0, #16                     // =16
	lsr	x8, x8, #8
	cbnz	x8, .LBB279_37
	b	.LBB279_29
.Lfunc_end279:
	.size	_size, .Lfunc_end279-_size
	.cfi_endproc
                                        // -- End function
	.globl	_bytes                          // -- Begin function _bytes
	.p2align	4
	.type	_bytes,@function
_bytes:                                 // @_bytes
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w0, w8, [x9]
	bfi	x0, x8, #32, #32
	tst	x0, #0x6
	b.ne	.LBB280_4
// %bb.1:                               // %"$3"
	tbz	w0, #3, .LBB280_3
// %bb.2:                               // %"$6"
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB280_4
.LBB280_3:                              // %"$5"
	bl	evList
.LBB280_4:                              // %"$2"
	bl	binSize
	mov	w8, #2
	bfi	x8, x0, #4, #60
	mov	x0, x8
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end280:
	.size	_bytes, .Lfunc_end280-_bytes
	.cfi_endproc
                                        // -- End function
	.globl	_assoc                          // -- Begin function _assoc
	.p2align	4
	.type	_assoc,@function
_assoc:                                 // @_assoc
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-64]!           // 16-byte Folded Spill
	stp	x24, x23, [sp, #16]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #32]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #48]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 64
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w30, -56
	.cfi_offset w29, -64
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w19, w8, [x9]
	bfi	x19, x8, #32, #32
	ldp	w20, w8, [x9, #8]
	bfi	x20, x8, #32, #32
	tst	x19, #0x6
	b.ne	.LBB281_4
// %bb.1:                               // %"$3"
	tbz	w19, #3, .LBB281_3
// %bb.2:                               // %"$6"
	ldp	w19, w8, [x19]
	bfi	x19, x8, #32, #32
	b	.LBB281_4
.LBB281_3:                              // %"$5"
	mov	x0, x19
	bl	evList
	mov	x19, x0
.LBB281_4:                              // %"$2"
	adrp	x22, env
	ldr	x8, [x22, :lo12:env]
	mov	x9, sp
	sub	x23, x9, #16                    // =16
	mov	sp, x23
	lsr	x10, x19, #32
	stp	w19, w10, [x9, #-16]
	lsr	x10, x8, #32
	stp	w8, w10, [x9, #-8]
	str	x23, [x22, :lo12:env]
	ldp	w20, w8, [x20]
	bfi	x20, x8, #32, #32
	tst	x20, #0x6
	b.ne	.LBB281_8
// %bb.5:                               // %"$8"
	tbz	w20, #3, .LBB281_7
// %bb.6:                               // %"$11"
	ldp	w20, w8, [x20]
	bfi	x20, x8, #32, #32
	b	.LBB281_8
.LBB281_7:                              // %"$10"
	mov	x0, x20
	bl	evList
	mov	x20, x0
.LBB281_8:                              // %"$12.preheader"
	adrp	x24, SymTab+8
	add	x24, x24, :lo12:SymTab+8
	tst	x20, #0xf
	b.ne	.LBB281_13
.LBB281_9:                              // %"$13"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w21, w8, [x20]
	bfi	x21, x8, #32, #32
	tst	x21, #0xf
	b.eq	.LBB281_11
// %bb.10:                              //   in Loop: Header=BB281_9 Depth=1
	mov	w0, wzr
	tbz	w0, #0, .LBB281_12
	b	.LBB281_14
.LBB281_11:                             // %"$17"
                                        //   in Loop: Header=BB281_9 Depth=1
	ldp	w1, w8, [x21]
	bfi	x1, x8, #32, #32
	mov	x0, x19
	bl	equal
	tbnz	w0, #0, .LBB281_14
.LBB281_12:                             // %"$18"
                                        //   in Loop: Header=BB281_9 Depth=1
	ldp	w20, w8, [x20, #8]
	bfi	x20, x8, #32, #32
	tst	x20, #0xf
	b.eq	.LBB281_9
.LBB281_13:
	mov	x21, x24
.LBB281_14:                             // %"$14"
	ldp	w9, w8, [x23, #8]
	bfi	x9, x8, #32, #32
	str	x9, [x22, :lo12:env]
	mov	x0, x21
	mov	sp, x29
	ldp	x20, x19, [sp, #48]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #32]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #64             // 16-byte Folded Reload
	ret
.Lfunc_end281:
	.size	_assoc, .Lfunc_end281-_assoc
	.cfi_endproc
                                        // -- End function
	.globl	_rassoc                         // -- Begin function _rassoc
	.p2align	4
	.type	_rassoc,@function
_rassoc:                                // @_rassoc
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-64]!           // 16-byte Folded Spill
	stp	x24, x23, [sp, #16]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #32]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #48]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 64
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w30, -56
	.cfi_offset w29, -64
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w19, w8, [x9]
	bfi	x19, x8, #32, #32
	ldp	w20, w8, [x9, #8]
	bfi	x20, x8, #32, #32
	tst	x19, #0x6
	b.ne	.LBB282_4
// %bb.1:                               // %"$3"
	tbz	w19, #3, .LBB282_3
// %bb.2:                               // %"$6"
	ldp	w19, w8, [x19]
	bfi	x19, x8, #32, #32
	b	.LBB282_4
.LBB282_3:                              // %"$5"
	mov	x0, x19
	bl	evList
	mov	x19, x0
.LBB282_4:                              // %"$2"
	adrp	x22, env
	ldr	x8, [x22, :lo12:env]
	mov	x9, sp
	sub	x23, x9, #16                    // =16
	mov	sp, x23
	lsr	x10, x19, #32
	stp	w19, w10, [x9, #-16]
	lsr	x10, x8, #32
	stp	w8, w10, [x9, #-8]
	str	x23, [x22, :lo12:env]
	ldp	w20, w8, [x20]
	bfi	x20, x8, #32, #32
	tst	x20, #0x6
	b.ne	.LBB282_8
// %bb.5:                               // %"$8"
	tbz	w20, #3, .LBB282_7
// %bb.6:                               // %"$11"
	ldp	w20, w8, [x20]
	bfi	x20, x8, #32, #32
	b	.LBB282_8
.LBB282_7:                              // %"$10"
	mov	x0, x20
	bl	evList
	mov	x20, x0
.LBB282_8:                              // %"$12.preheader"
	adrp	x24, SymTab+8
	add	x24, x24, :lo12:SymTab+8
	tst	x20, #0xf
	b.ne	.LBB282_13
.LBB282_9:                              // %"$13"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w21, w8, [x20]
	bfi	x21, x8, #32, #32
	tst	x21, #0xf
	b.eq	.LBB282_11
// %bb.10:                              //   in Loop: Header=BB282_9 Depth=1
	mov	w0, wzr
	tbz	w0, #0, .LBB282_12
	b	.LBB282_14
.LBB282_11:                             // %"$17"
                                        //   in Loop: Header=BB282_9 Depth=1
	ldp	w1, w8, [x21, #8]
	bfi	x1, x8, #32, #32
	mov	x0, x19
	bl	equal
	tbnz	w0, #0, .LBB282_14
.LBB282_12:                             // %"$18"
                                        //   in Loop: Header=BB282_9 Depth=1
	ldp	w20, w8, [x20, #8]
	bfi	x20, x8, #32, #32
	tst	x20, #0xf
	b.eq	.LBB282_9
.LBB282_13:
	mov	x21, x24
.LBB282_14:                             // %"$14"
	ldp	w9, w8, [x23, #8]
	bfi	x9, x8, #32, #32
	str	x9, [x22, :lo12:env]
	mov	x0, x21
	mov	sp, x29
	ldp	x20, x19, [sp, #48]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #32]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #64             // 16-byte Folded Reload
	ret
.Lfunc_end282:
	.size	_rassoc, .Lfunc_end282-_rassoc
	.cfi_endproc
                                        // -- End function
	.globl	_asoq                           // -- Begin function _asoq
	.p2align	4
	.type	_asoq,@function
_asoq:                                  // @_asoq
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-48]!           // 16-byte Folded Spill
	stp	x22, x21, [sp, #16]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #32]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 48
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w30, -40
	.cfi_offset w29, -48
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w19, w8, [x9]
	bfi	x19, x8, #32, #32
	ldp	w22, w8, [x9, #8]
	bfi	x22, x8, #32, #32
	tst	x19, #0x6
	b.ne	.LBB283_4
// %bb.1:                               // %"$3"
	tbz	w19, #3, .LBB283_3
// %bb.2:                               // %"$6"
	ldp	w19, w8, [x19]
	bfi	x19, x8, #32, #32
	b	.LBB283_4
.LBB283_3:                              // %"$5"
	mov	x0, x19
	bl	evList
	mov	x19, x0
.LBB283_4:                              // %"$2"
	adrp	x20, env
	ldr	x8, [x20, :lo12:env]
	mov	x9, sp
	sub	x21, x9, #16                    // =16
	mov	sp, x21
	lsr	x10, x19, #32
	stp	w19, w10, [x9, #-16]
	lsr	x10, x8, #32
	stp	w8, w10, [x9, #-8]
	str	x21, [x20, :lo12:env]
	ldp	w0, w8, [x22]
	bfi	x0, x8, #32, #32
	tst	x0, #0x6
	b.ne	.LBB283_8
// %bb.5:                               // %"$8"
	tbz	w0, #3, .LBB283_7
// %bb.6:                               // %"$11"
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB283_8
.LBB283_7:                              // %"$10"
	bl	evList
.LBB283_8:                              // %"$12.preheader"
	adrp	x9, SymTab+8
	add	x9, x9, :lo12:SymTab+8
	tst	x0, #0xf
	b.ne	.LBB283_13
.LBB283_9:                              // %"$13"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w8, w10, [x0]
	bfi	x8, x10, #32, #32
	tst	x8, #0xf
	b.eq	.LBB283_11
// %bb.10:                              //   in Loop: Header=BB283_9 Depth=1
	mov	w10, wzr
	tbz	w10, #0, .LBB283_12
	b	.LBB283_14
.LBB283_11:                             // %"$17"
                                        //   in Loop: Header=BB283_9 Depth=1
	ldp	w11, w10, [x8]
	bfi	x11, x10, #32, #32
	cmp	x19, x11
	cset	w10, eq
	tbnz	w10, #0, .LBB283_14
.LBB283_12:                             // %"$18"
                                        //   in Loop: Header=BB283_9 Depth=1
	ldp	w0, w8, [x0, #8]
	bfi	x0, x8, #32, #32
	tst	x0, #0xf
	b.eq	.LBB283_9
.LBB283_13:
	mov	x8, x9
.LBB283_14:                             // %"$14"
	ldp	w10, w9, [x21, #8]
	bfi	x10, x9, #32, #32
	str	x10, [x20, :lo12:env]
	mov	x0, x8
	mov	sp, x29
	ldp	x20, x19, [sp, #32]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #48             // 16-byte Folded Reload
	ret
.Lfunc_end283:
	.size	_asoq, .Lfunc_end283-_asoq
	.cfi_endproc
                                        // -- End function
	.globl	_rank                           // -- Begin function _rank
	.p2align	4
	.type	_rank,@function
_rank:                                  // @_rank
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-64]!           // 16-byte Folded Spill
	stp	x24, x23, [sp, #16]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #32]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #48]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 64
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w30, -56
	.cfi_offset w29, -64
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w19, w8, [x9]
	bfi	x19, x8, #32, #32
	ldp	w23, w8, [x9, #8]
	bfi	x23, x8, #32, #32
	tst	x19, #0x6
	b.ne	.LBB284_4
// %bb.1:                               // %"$3"
	tbz	w19, #3, .LBB284_3
// %bb.2:                               // %"$6"
	ldp	w19, w8, [x19]
	bfi	x19, x8, #32, #32
	b	.LBB284_4
.LBB284_3:                              // %"$5"
	mov	x0, x19
	bl	evList
	mov	x19, x0
.LBB284_4:                              // %"$2"
	adrp	x21, env
	ldr	x8, [x21, :lo12:env]
	mov	x9, sp
	sub	x22, x9, #16                    // =16
	mov	sp, x22
	lsr	x10, x19, #32
	stp	w19, w10, [x9, #-16]
	lsr	x10, x8, #32
	stp	w8, w10, [x9, #-8]
	str	x22, [x21, :lo12:env]
	ldp	w20, w8, [x23]
	bfi	x20, x8, #32, #32
	ldp	w23, w8, [x23, #8]
	bfi	x23, x8, #32, #32
	tst	x20, #0x6
	b.ne	.LBB284_8
// %bb.5:                               // %"$8"
	tbz	w20, #3, .LBB284_7
// %bb.6:                               // %"$11"
	ldp	w20, w8, [x20]
	bfi	x20, x8, #32, #32
	b	.LBB284_8
.LBB284_7:                              // %"$10"
	mov	x0, x20
	bl	evList
	mov	x20, x0
.LBB284_8:                              // %"$7"
	ldr	x8, [x21, :lo12:env]
	mov	x9, sp
	sub	x10, x9, #16                    // =16
	mov	sp, x10
	lsr	x11, x20, #32
	stp	w20, w11, [x9, #-16]
	lsr	x11, x8, #32
	stp	w8, w11, [x9, #-8]
	str	x10, [x21, :lo12:env]
	ldp	w0, w8, [x23]
	bfi	x0, x8, #32, #32
	tst	x0, #0x6
	b.ne	.LBB284_12
// %bb.9:                               // %"$13"
	tbz	w0, #3, .LBB284_11
// %bb.10:                              // %"$16"
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB284_12
.LBB284_11:                             // %"$15"
	bl	evList
.LBB284_12:                             // %"$12"
	adrp	x8, SymTab+8
	add	x8, x8, :lo12:SymTab+8
	adrp	x24, SymTab+8
	add	x24, x24, :lo12:SymTab+8
	cmp	x0, x8
	b.ne	.LBB284_15
.LBB284_13:                             // %"$20"
                                        // =>This Inner Loop Header: Depth=1
	mov	x23, x24
	mov	x24, x20
	ldp	w9, w8, [x20]
	bfi	x9, x8, #32, #32
	ldp	w0, w8, [x9]
	bfi	x0, x8, #32, #32
	mov	x1, x19
	bl	compare
	cmp	x0, #0                          // =0
	b.gt	.LBB284_17
// %bb.14:                              // %"$21"
                                        //   in Loop: Header=BB284_13 Depth=1
	ldp	w20, w8, [x24, #8]
	bfi	x20, x8, #32, #32
	tst	x20, #0xf
	mov	x23, x24
	b.eq	.LBB284_13
	b	.LBB284_17
.LBB284_15:                             // %"$24"
                                        // =>This Inner Loop Header: Depth=1
	mov	x23, x24
	mov	x24, x20
	ldp	w9, w8, [x20]
	bfi	x9, x8, #32, #32
	ldp	w0, w8, [x9]
	bfi	x0, x8, #32, #32
	mov	x1, x19
	bl	compare
	tbnz	x0, #63, .LBB284_17
// %bb.16:                              // %"$25"
                                        //   in Loop: Header=BB284_15 Depth=1
	ldp	w20, w8, [x24, #8]
	bfi	x20, x8, #32, #32
	tst	x20, #0xf
	mov	x23, x24
	b.eq	.LBB284_15
.LBB284_17:                             // %"$19"
	ldp	w0, w8, [x23]
	bfi	x0, x8, #32, #32
	ldp	w9, w8, [x22, #8]
	bfi	x9, x8, #32, #32
	str	x9, [x21, :lo12:env]
	mov	sp, x29
	ldp	x20, x19, [sp, #48]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #32]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #64             // 16-byte Folded Reload
	ret
.Lfunc_end284:
	.size	_rank, .Lfunc_end284-_rank
	.cfi_endproc
                                        // -- End function
	.globl	_match                          // -- Begin function _match
	.p2align	4
	.type	_match,@function
_match:                                 // @_match
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-48]!           // 16-byte Folded Spill
	stp	x22, x21, [sp, #16]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #32]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 48
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w30, -40
	.cfi_offset w29, -48
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w19, w8, [x9]
	bfi	x19, x8, #32, #32
	ldp	w22, w8, [x9, #8]
	bfi	x22, x8, #32, #32
	tst	x19, #0x6
	b.ne	.LBB285_4
// %bb.1:                               // %"$3"
	tbz	w19, #3, .LBB285_3
// %bb.2:                               // %"$6"
	ldp	w19, w8, [x19]
	bfi	x19, x8, #32, #32
	b	.LBB285_4
.LBB285_3:                              // %"$5"
	mov	x0, x19
	bl	evList
	mov	x19, x0
.LBB285_4:                              // %"$2"
	adrp	x20, env
	ldr	x8, [x20, :lo12:env]
	mov	x9, sp
	sub	x21, x9, #16                    // =16
	mov	sp, x21
	lsr	x10, x19, #32
	stp	w19, w10, [x9, #-16]
	lsr	x10, x8, #32
	stp	w8, w10, [x9, #-8]
	str	x21, [x20, :lo12:env]
	ldp	w1, w8, [x22]
	bfi	x1, x8, #32, #32
	tst	x1, #0x6
	b.ne	.LBB285_8
// %bb.5:                               // %"$8"
	tbz	w1, #3, .LBB285_7
// %bb.6:                               // %"$11"
	ldp	w1, w8, [x1]
	bfi	x1, x8, #32, #32
	b	.LBB285_8
.LBB285_7:                              // %"$10"
	mov	x0, x1
	bl	evList
	mov	x1, x0
.LBB285_8:                              // %"$7"
	ldr	x8, [x20, :lo12:env]
	mov	x9, sp
	sub	x10, x9, #16                    // =16
	mov	sp, x10
	lsr	x11, x1, #32
	lsr	x12, x8, #32
	stp	w1, w11, [x9, #-16]
	stp	w8, w12, [x9, #-8]
	str	x10, [x20, :lo12:env]
	mov	x0, x19
	bl	match
	tbz	w0, #0, .LBB285_10
// %bb.9:
	adrp	x0, SymTab+216
	add	x0, x0, :lo12:SymTab+216
	b	.LBB285_11
.LBB285_10:                             // %"$13"
	adrp	x0, SymTab+8
	add	x0, x0, :lo12:SymTab+8
.LBB285_11:                             // %"$14"
	ldp	w9, w8, [x21, #8]
	bfi	x9, x8, #32, #32
	str	x9, [x20, :lo12:env]
	mov	sp, x29
	ldp	x20, x19, [sp, #32]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #48             // 16-byte Folded Reload
	ret
.Lfunc_end285:
	.size	_match, .Lfunc_end285-_match
	.cfi_endproc
                                        // -- End function
	.globl	_fill                           // -- Begin function _fill
	.p2align	4
	.type	_fill,@function
_fill:                                  // @_fill
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-48]!           // 16-byte Folded Spill
	stp	x22, x21, [sp, #16]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #32]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 48
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w30, -40
	.cfi_offset w29, -48
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w19, w8, [x9]
	bfi	x19, x8, #32, #32
	ldp	w22, w8, [x9, #8]
	bfi	x22, x8, #32, #32
	tst	x19, #0x6
	b.ne	.LBB286_4
// %bb.1:                               // %"$3"
	tbz	w19, #3, .LBB286_3
// %bb.2:                               // %"$6"
	ldp	w19, w8, [x19]
	bfi	x19, x8, #32, #32
	b	.LBB286_4
.LBB286_3:                              // %"$5"
	mov	x0, x19
	bl	evList
	mov	x19, x0
.LBB286_4:                              // %"$2"
	adrp	x20, env
	ldr	x8, [x20, :lo12:env]
	mov	x9, sp
	sub	x21, x9, #16                    // =16
	mov	sp, x21
	lsr	x10, x19, #32
	stp	w19, w10, [x9, #-16]
	lsr	x10, x8, #32
	stp	w8, w10, [x9, #-8]
	str	x21, [x20, :lo12:env]
	ldp	w1, w8, [x22]
	bfi	x1, x8, #32, #32
	tst	x1, #0x6
	b.ne	.LBB286_8
// %bb.5:                               // %"$8"
	tbz	w1, #3, .LBB286_7
// %bb.6:                               // %"$11"
	ldp	w1, w8, [x1]
	bfi	x1, x8, #32, #32
	b	.LBB286_8
.LBB286_7:                              // %"$10"
	mov	x0, x1
	bl	evList
	mov	x1, x0
.LBB286_8:                              // %"$7"
	ldr	x8, [x20, :lo12:env]
	mov	x9, sp
	sub	x10, x9, #16                    // =16
	mov	sp, x10
	lsr	x11, x1, #32
	lsr	x12, x8, #32
	stp	w1, w11, [x9, #-16]
	stp	w8, w12, [x9, #-8]
	str	x10, [x20, :lo12:env]
	mov	x0, x19
	bl	fill
	cmp	x0, #0                          // =0
	csel	x0, x0, x19, ne
	ldp	w9, w8, [x21, #8]
	bfi	x9, x8, #32, #32
	str	x9, [x20, :lo12:env]
	mov	sp, x29
	ldp	x20, x19, [sp, #32]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #48             // 16-byte Folded Reload
	ret
.Lfunc_end286:
	.size	_fill, .Lfunc_end286-_fill
	.cfi_endproc
                                        // -- End function
	.globl	_prove                          // -- Begin function _prove
	.p2align	4
	.type	_prove,@function
_prove:                                 // @_prove
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-96]!           // 16-byte Folded Spill
	stp	x28, x27, [sp, #16]             // 16-byte Folded Spill
	stp	x26, x25, [sp, #32]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #48]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #64]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #80]             // 16-byte Folded Spill
	mov	x29, sp
	sub	sp, sp, #64                     // =64
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	ldp	w19, w8, [x0, #8]
	bfi	x19, x8, #32, #32
	ldp	w20, w8, [x19]
	bfi	x20, x8, #32, #32
	tst	x20, #0x6
	b.ne	.LBB287_4
// %bb.1:                               // %"$3"
	tbz	w20, #3, .LBB287_3
// %bb.2:                               // %"$6"
	ldp	w20, w8, [x20]
	bfi	x20, x8, #32, #32
	b	.LBB287_4
.LBB287_3:                              // %"$5"
	mov	x0, x20
	bl	evList
	mov	x20, x0
.LBB287_4:                              // %"$2"
	tst	x20, #0xf
	adrp	x26, SymTab+8
	add	x26, x26, :lo12:SymTab+8
	b.ne	.LBB287_79
// %bb.5:                               // %"$8"
	adrp	x21, env
	ldr	x8, [x21, :lo12:env]
	mov	x9, sp
	sub	x11, x9, #16                    // =16
	mov	sp, x11
	lsr	x10, x20, #32
	stp	w20, w10, [x9, #-16]
	lsr	x10, x8, #32
	stp	w8, w10, [x9, #-8]
	stur	x11, [x29, #-32]                // 8-byte Folded Spill
	str	x11, [x21, :lo12:env]
	ldp	w9, w8, [x19, #8]
	bfi	x9, x8, #32, #32
	ldp	w25, w8, [x9]
	bfi	x25, x8, #32, #32
	tst	x25, #0x6
	b.ne	.LBB287_8
// %bb.6:                               // %"$11"
	tbz	w25, #3, .LBB287_10
// %bb.7:                               // %"$14"
	ldp	w25, w8, [x25]
	bfi	x25, x8, #32, #32
.LBB287_8:                              // %"$10"
	cmp	x25, x26
	b.ne	.LBB287_11
.LBB287_9:
	mov	x25, xzr
	b	.LBB287_12
.LBB287_10:                             // %"$13"
	mov	x0, x25
	bl	evList
	mov	x25, x0
	cmp	x25, x26
	b.eq	.LBB287_9
.LBB287_11:                             // %"$16"
	ldr	x8, [x21, :lo12:env]
	mov	x9, sp
	sub	x10, x9, #16                    // =16
	mov	sp, x10
	lsr	x11, x25, #32
	lsr	x12, x8, #32
	stp	w25, w11, [x9, #-16]
	stp	w8, w12, [x9, #-8]
	str	x10, [x21, :lo12:env]
.LBB287_12:                             // %"$17"
	ldp	w9, w8, [x20]
	bfi	x9, x8, #32, #32
	ldp	w10, w8, [x9]
	bfi	x10, x8, #32, #32
	ldp	w9, w8, [x9, #8]
	stp	w9, w8, [x20]
	ldp	w22, w8, [x10]
	bfi	x22, x8, #32, #32
	ldp	w9, w8, [x10, #8]
	bfi	x9, x8, #32, #32
	ldp	w8, w10, [x9]
	ldp	w9, w11, [x9, #8]
	bfi	x9, x11, #32, #32
	mov	x11, sp
	sub	x23, x11, #16                   // =16
	mov	sp, x23
	stp	w8, w10, [x11, #-16]
	ldr	x8, [x21, :lo12:env]
	lsr	x10, x8, #32
	stp	w8, w10, [x11, #-8]
	str	x23, [x21, :lo12:env]
	ldp	w8, w10, [x9]
	ldp	w9, w11, [x9, #8]
	bfi	x9, x11, #32, #32
	mov	x11, sp
	mov	x13, x21
	sub	x21, x11, #16                   // =16
	mov	sp, x21
	stp	w8, w10, [x11, #-16]
	ldr	x8, [x13, :lo12:env]
	lsr	x10, x8, #32
	stp	w8, w10, [x11, #-8]
	str	x21, [x13, :lo12:env]
	ldp	w8, w10, [x9]
	ldp	w9, w11, [x9, #8]
	bfi	x9, x11, #32, #32
	mov	x11, sp
	sub	x19, x11, #16                   // =16
	mov	sp, x19
	stp	w8, w10, [x11, #-16]
	ldr	x8, [x13, :lo12:env]
	lsr	x10, x8, #32
	stp	w8, w10, [x11, #-8]
	str	x19, [x13, :lo12:env]
	ldp	w8, w10, [x9]
	ldp	w9, w11, [x9, #8]
	mov	x12, sp
	sub	x28, x12, #16                   // =16
	mov	sp, x28
	stp	w8, w10, [x12, #-16]
	ldr	x8, [x13, :lo12:env]
	lsr	x10, x8, #32
	stp	w8, w10, [x12, #-8]
	str	x28, [x13, :lo12:env]
	mov	x8, sp
	sub	x12, x8, #16                    // =16
	mov	sp, x12
	stp	w9, w11, [x8, #-16]
	ldr	x9, [x13, :lo12:env]
	lsr	x10, x9, #32
	stp	w9, w10, [x8, #-8]
	str	x12, [x13, :lo12:env]
	mov	x8, sp
	sub	x27, x8, #16                    // =16
	mov	sp, x27
	lsr	x9, x26, #32
	stur	x9, [x29, #-16]                 // 8-byte Folded Spill
	stp	w26, w9, [x8, #-16]
	ldr	x9, [x13, :lo12:env]
	lsr	x10, x9, #32
	stp	w9, w10, [x8, #-8]
	str	x27, [x13, :lo12:env]
	ldr	x14, [x26, #368]
	mov	x8, sp
	sub	x9, x8, #16                     // =16
	mov	sp, x9
	lsr	x10, x14, #32
	lsr	x11, x27, #32
	stp	w14, w10, [x8, #-16]
	stp	w27, w11, [x8, #-8]
	adrp	x8, ($Penv)
	ldr	x10, [x8, :lo12:($Penv)]
	stp	x10, x14, [x29, #-48]           // 16-byte Folded Spill
	adrp	x10, ($Pnl)
	ldr	x11, [x10, :lo12:($Pnl)]
	stur	x11, [x29, #-56]                // 8-byte Folded Spill
	str	x9, [x13, :lo12:env]
	stur	x12, [x29, #-8]                 // 8-byte Folded Spill
	str	x12, [x8, :lo12:($Penv)]
	str	x23, [x10, :lo12:($Pnl)]
	stur	x25, [x29, #-24]                // 8-byte Folded Spill
	b	.LBB287_14
.LBB287_13:                             // %"$47"
                                        //   in Loop: Header=BB287_14 Depth=1
	ldp	w8, w9, [x28]
	ldr	w10, [x28]
	bfi	x8, x9, #32, #32
	ldp	w9, w8, [x8]
	stp	w9, w8, [x19]
	ldr	w8, [x28, #4]
	bfi	x10, x8, #32, #32
	ldp	w9, w8, [x10, #8]
	stp	w9, w8, [x28]
	ldp	w9, w8, [x23]
	bfi	x9, x8, #32, #32
	ldp	w9, w8, [x9, #8]
	stp	w9, w8, [x23]
.LBB287_14:                             // %"$18"
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB287_39 Depth 2
                                        //     Child Loop BB287_33 Depth 2
                                        //     Child Loop BB287_57 Depth 2
                                        //     Child Loop BB287_20 Depth 2
                                        //     Child Loop BB287_27 Depth 2
                                        //     Child Loop BB287_46 Depth 2
	ldrb	w8, [x19]
	tst	w8, #0xf
	b.eq	.LBB287_16
// %bb.15:                              // %"$20"
                                        //   in Loop: Header=BB287_14 Depth=1
	ldrb	w8, [x28]
	tst	w8, #0xf
	cset	w8, eq
	cbnz	w8, .LBB287_17
	b	.LBB287_69
.LBB287_16:                             //   in Loop: Header=BB287_14 Depth=1
	mov	w8, #1
	cbz	w8, .LBB287_69
.LBB287_17:                             // %"$21"
                                        //   in Loop: Header=BB287_14 Depth=1
	ldrb	w8, [x21]
	tst	w8, #0xf
	b.eq	.LBB287_24
// %bb.18:                              // %"$24"
                                        //   in Loop: Header=BB287_14 Depth=1
	ldp	w24, w8, [x19]
	bfi	x24, x8, #32, #32
	tst	x24, #0xf
	b.ne	.LBB287_13
// %bb.19:                              // %"$46"
                                        //   in Loop: Header=BB287_14 Depth=1
	ldp	w8, w9, [x24]
	bfi	x8, x9, #32, #32
	adrp	x9, SymTab+216
	add	x9, x9, :lo12:SymTab+216
	cmp	x8, x9
	b.ne	.LBB287_31
.LBB287_20:                             // %"$50"
                                        //   Parent Loop BB287_14 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	w8, w9, [x20]
	bfi	x8, x9, #32, #32
	tst	x8, #0xf
	b.eq	.LBB287_22
// %bb.21:                              //   in Loop: Header=BB287_20 Depth=2
	mov	w8, wzr
	cbnz	w8, .LBB287_23
	b	.LBB287_36
.LBB287_22:                             // %"$52"
                                        //   in Loop: Header=BB287_20 Depth=2
	ldp	w8, w9, [x8]
	bfi	x8, x9, #32, #32
	ldp	w8, w9, [x8]
	bfi	x8, x9, #32, #32
	ldp	w10, w9, [x23]
	bfi	x10, x9, #32, #32
	ldp	w10, w9, [x10]
	bfi	x10, x9, #32, #32
	cmp	x8, x10
	cset	w8, hs
	cbz	w8, .LBB287_36
.LBB287_23:                             // %"$53"
                                        //   in Loop: Header=BB287_20 Depth=2
	ldp	w9, w8, [x20]
	bfi	x9, x8, #32, #32
	ldp	w9, w8, [x9, #8]
	stp	w9, w8, [x20]
	b	.LBB287_20
.LBB287_24:                             // %"$25"
                                        //   in Loop: Header=BB287_14 Depth=1
	ldp	w9, w8, [x19]
	ldp	w11, w10, [x21]
	bfi	x9, x8, #32, #32
	bfi	x11, x10, #32, #32
	ldur	x10, [x29, #-8]                 // 8-byte Folded Reload
	ldp	w8, w10, [x10]
	stp	w8, w10, [x27]
	ldp	w10, w8, [x23]
	bfi	x10, x8, #32, #32
	ldp	w0, w8, [x10]
	bfi	x0, x8, #32, #32
	ldp	w9, w8, [x9]
	bfi	x9, x8, #32, #32
	ldp	w1, w8, [x9, #8]
	bfi	x1, x8, #32, #32
	ldp	w9, w8, [x11]
	bfi	x9, x8, #32, #32
	ldp	w3, w8, [x9]
	bfi	x3, x8, #32, #32
	mov	x2, x22
	bl	unify
	tbz	w0, #0, .LBB287_29
// %bb.25:                              // %"$27"
                                        //   in Loop: Header=BB287_14 Depth=1
	cbz	x25, .LBB287_49
// %bb.26:                              // %"$31"
                                        //   in Loop: Header=BB287_14 Depth=1
	ldp	w9, w8, [x19]
	bfi	x9, x8, #32, #32
	ldp	w24, w8, [x9]
	bfi	x24, x8, #32, #32
	ldp	w8, w9, [x24]
	bfi	x8, x9, #32, #32
	mov	x9, x25
	tst	x9, #0xf
	b.ne	.LBB287_49
.LBB287_27:                             // %"$34"
                                        //   Parent Loop BB287_14 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	w11, w10, [x9]
	bfi	x11, x10, #32, #32
	cmp	x8, x11
	b.eq	.LBB287_45
// %bb.28:                              // %"$37"
                                        //   in Loop: Header=BB287_27 Depth=2
	ldp	w9, w10, [x9, #8]
	bfi	x9, x10, #32, #32
	tst	x9, #0xf
	b.eq	.LBB287_27
	b	.LBB287_49
.LBB287_29:                             // %"$26"
                                        //   in Loop: Header=BB287_14 Depth=1
	ldp	w9, w8, [x21]
	bfi	x9, x8, #32, #32
	ldp	w9, w8, [x9, #8]
	stp	w9, w8, [x21]
	tst	x9, #0xf
	b.eq	.LBB287_14
.LBB287_30:                             // %"$29"
                                        //   in Loop: Header=BB287_14 Depth=1
	ldp	w9, w8, [x20]
	bfi	x9, x8, #32, #32
	ldp	w10, w8, [x9]
	ldp	w9, w11, [x9, #8]
	bfi	x10, x8, #32, #32
	stp	w9, w11, [x20]
	ldp	w9, w8, [x10, #8]
	bfi	x9, x8, #32, #32
	ldp	w11, w8, [x9, #8]
	ldp	w12, w9, [x9]
	bfi	x11, x8, #32, #32
	ldp	w22, w8, [x10]
	stp	w12, w9, [x23]
	ldp	w10, w9, [x11, #8]
	ldp	w12, w11, [x11]
	bfi	x10, x9, #32, #32
	stp	w12, w11, [x21]
	ldp	w11, w9, [x10, #8]
	ldp	w12, w10, [x10]
	bfi	x11, x9, #32, #32
	stp	w12, w10, [x19]
	ldp	w9, w10, [x11]
	ldp	w11, w12, [x11, #8]
	stp	w9, w10, [x28]
	bfi	x22, x8, #32, #32
	ldur	x8, [x29, #-8]                  // 8-byte Folded Reload
	stp	w11, w12, [x8]
	b	.LBB287_14
.LBB287_31:                             // %"$48"
                                        //   in Loop: Header=BB287_14 Depth=1
	ldp	w8, w9, [x8]
	bfi	x8, x9, #32, #32
	tbz	w8, #1, .LBB287_37
// %bb.32:                              // %"$56"
                                        //   in Loop: Header=BB287_14 Depth=1
	ldp	w9, w8, [x24]
	bfi	x9, x8, #32, #32
	ldp	w25, w8, [x9, #8]
	bfi	x25, x8, #32, #32
.LBB287_33:                             // %"$57"
                                        //   Parent Loop BB287_14 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	w0, w8, [x25]
	bfi	x0, x8, #32, #32
	ldp	w25, w8, [x25, #8]
	bfi	x25, x8, #32, #32
	tst	x25, #0xf
	b.ne	.LBB287_42
// %bb.34:                              // %"$58"
                                        //   in Loop: Header=BB287_33 Depth=2
	tst	x0, #0xf
	b.ne	.LBB287_33
// %bb.35:                              // %"$67"
                                        //   in Loop: Header=BB287_33 Depth=2
	bl	evList
	b	.LBB287_33
.LBB287_36:                             // %"$54"
                                        //   in Loop: Header=BB287_14 Depth=1
	ldp	w8, w9, [x24, #8]
	stp	w8, w9, [x19]
	b	.LBB287_14
.LBB287_37:                             // %"$55"
                                        //   in Loop: Header=BB287_14 Depth=1
	adrp	x9, SymTab+632
	add	x9, x9, :lo12:SymTab+632
	cmp	x8, x9
	b.ne	.LBB287_52
// %bb.38:                              // %"$72"
                                        //   in Loop: Header=BB287_14 Depth=1
	ldp	w9, w8, [x24]
	bfi	x9, x8, #32, #32
	ldp	w9, w8, [x9, #8]
	bfi	x9, x8, #32, #32
	ldp	w25, w8, [x9, #8]
	bfi	x25, x8, #32, #32
.LBB287_39:                             // %"$74"
                                        //   Parent Loop BB287_14 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	w0, w8, [x25]
	bfi	x0, x8, #32, #32
	ldp	w25, w8, [x25, #8]
	bfi	x25, x8, #32, #32
	tst	x25, #0xf
	b.ne	.LBB287_53
// %bb.40:                              // %"$75"
                                        //   in Loop: Header=BB287_39 Depth=2
	tst	x0, #0xf
	b.ne	.LBB287_39
// %bb.41:                              // %"$84"
                                        //   in Loop: Header=BB287_39 Depth=2
	bl	evList
	b	.LBB287_39
.LBB287_42:                             // %"$60"
                                        //   in Loop: Header=BB287_14 Depth=1
	tst	x0, #0x6
	b.ne	.LBB287_56
// %bb.43:                              // %"$62"
                                        //   in Loop: Header=BB287_14 Depth=1
	tbz	w0, #3, .LBB287_55
// %bb.44:                              // %"$65"
                                        //   in Loop: Header=BB287_14 Depth=1
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB287_56
.LBB287_45:                             // %"$39"
                                        //   in Loop: Header=BB287_14 Depth=1
	ldp	w0, w8, [x24]
	bfi	x0, x8, #32, #32
	adrp	x1, SymTab+216
	add	x1, x1, :lo12:SymTab+216
	bl	get
	mov	x25, x0
	mov	w26, #1
.LBB287_46:                             // %"$41"
                                        //   Parent Loop BB287_14 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	w9, w8, [x21]
	bfi	x9, x8, #32, #32
	ldp	w0, w8, [x9]
	bfi	x0, x8, #32, #32
	ldp	w1, w8, [x25]
	bfi	x1, x8, #32, #32
	bl	equal
	tbnz	w0, #0, .LBB287_48
// %bb.47:                              // %"$42"
                                        //   in Loop: Header=BB287_46 Depth=2
	ldp	w25, w8, [x25, #8]
	bfi	x25, x8, #32, #32
	add	x26, x26, #1                    // =1
	b	.LBB287_46
.LBB287_48:                             // %"$43"
                                        //   in Loop: Header=BB287_14 Depth=1
	mov	x0, x26
	bl	outWord
	bl	space
	mov	x0, x24
	bl	uniFill
	bl	print
	bl	newline
	adrp	x26, SymTab+8
	add	x26, x26, :lo12:SymTab+8
	ldur	x25, [x29, #-24]                // 8-byte Folded Reload
.LBB287_49:                             // %"$32"
                                        //   in Loop: Header=BB287_14 Depth=1
	ldp	w9, w8, [x21]
	bfi	x9, x8, #32, #32
	ldp	w24, w8, [x9, #8]
	bfi	x24, x8, #32, #32
	tst	x24, #0xf
	b.ne	.LBB287_51
// %bb.50:                              // %"$44"
                                        //   in Loop: Header=BB287_14 Depth=1
	ldp	w25, w8, [x23]
	ldp	w26, w9, [x19]
	bfi	x25, x8, #32, #32
	bfi	x26, x9, #32, #32
	ldp	w0, w8, [x28]
	bfi	x0, x8, #32, #32
	ldp	w1, w8, [x27]
	bfi	x1, x8, #32, #32
	bl	cons
	mov	x1, x0
	mov	x0, x26
	adrp	x26, SymTab+8
	add	x26, x26, :lo12:SymTab+8
	bl	cons
	mov	x1, x0
	mov	x0, x24
	bl	cons
	mov	x1, x0
	mov	x0, x25
	ldur	x25, [x29, #-24]                // 8-byte Folded Reload
	bl	cons
	mov	x1, x0
	mov	x0, x22
	bl	cons
	ldp	w1, w8, [x20]
	bfi	x1, x8, #32, #32
	bl	cons
	lsr	x8, x0, #32
	stp	w0, w8, [x20]
.LBB287_51:                             // %"$45"
                                        //   in Loop: Header=BB287_14 Depth=1
	ldp	w1, w8, [x23]
	bfi	x1, x8, #32, #32
	mov	x0, x22
	bl	cons
	lsr	x8, x0, #32
	stp	w0, w8, [x23]
	ldp	w9, w8, [x19]
	bfi	x9, x8, #32, #32
	ldp	w0, w8, [x9, #8]
	bfi	x0, x8, #32, #32
	ldp	w1, w8, [x28]
	bfi	x1, x8, #32, #32
	bl	cons
	ldp	w9, w8, [x21]
	bfi	x9, x8, #32, #32
	lsr	x8, x0, #32
	stp	w0, w8, [x28]
	ldp	w9, w8, [x9]
	bfi	x9, x8, #32, #32
	ldp	w9, w8, [x9, #8]
	stp	w9, w8, [x19]
	ldur	x8, [x29, #-16]                 // 8-byte Folded Reload
	stp	w26, w8, [x21]
	add	x22, x22, #16                   // =16
	b	.LBB287_14
.LBB287_52:                             // %"$71"
                                        //   in Loop: Header=BB287_14 Depth=1
	ldp	w9, w8, [x24]
	bfi	x9, x8, #32, #32
	ldp	w0, w8, [x9]
	bfi	x0, x8, #32, #32
	adrp	x1, SymTab+216
	add	x1, x1, :lo12:SymTab+216
	bl	get
	lsr	x8, x0, #32
	stp	w0, w8, [x21]
	tst	x0, #0xf
	b.eq	.LBB287_14
	b	.LBB287_30
.LBB287_53:                             // %"$77"
                                        //   in Loop: Header=BB287_14 Depth=1
	tst	x0, #0x6
	b.eq	.LBB287_60
// %bb.54:                              //   in Loop: Header=BB287_14 Depth=1
	ldur	x25, [x29, #-24]                // 8-byte Folded Reload
	b	.LBB287_63
.LBB287_55:                             // %"$64"
                                        //   in Loop: Header=BB287_14 Depth=1
	bl	evList
.LBB287_56:                             // %"$59"
                                        //   in Loop: Header=BB287_14 Depth=1
	ldur	x25, [x29, #-24]                // 8-byte Folded Reload
	lsr	x8, x0, #32
	stp	w0, w8, [x27]
	ldp	w9, w8, [x24]
	bfi	x9, x8, #32, #32
	ldp	w9, w8, [x9]
	bfi	x9, x8, #32, #32
	lsr	x8, x9, #4
	sub	x8, x8, #1                      // =1
	mov	x9, x23
.LBB287_57:                             // %"$68"
                                        //   Parent Loop BB287_14 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	w9, w10, [x9]
	bfi	x9, x10, #32, #32
	subs	x8, x8, #1                      // =1
	b.lt	.LBB287_59
// %bb.58:                              // %"$69"
                                        //   in Loop: Header=BB287_57 Depth=2
	add	x9, x9, #8                      // =8
	b	.LBB287_57
.LBB287_59:                             // %"$70"
                                        //   in Loop: Header=BB287_14 Depth=1
	ldp	w0, w8, [x9]
	bfi	x0, x8, #32, #32
	ldp	w1, w8, [x23]
	bfi	x1, x8, #32, #32
	bl	cons
	lsr	x8, x0, #32
	stp	w0, w8, [x23]
	ldp	w0, w8, [x24, #8]
	bfi	x0, x8, #32, #32
	ldp	w1, w8, [x28]
	bfi	x1, x8, #32, #32
	bl	cons
	lsr	x8, x0, #32
	stp	w0, w8, [x28]
	ldp	w9, w8, [x27]
	stp	w9, w8, [x19]
	b	.LBB287_14
.LBB287_60:                             // %"$79"
                                        //   in Loop: Header=BB287_14 Depth=1
	ldur	x25, [x29, #-24]                // 8-byte Folded Reload
	tbz	w0, #3, .LBB287_62
// %bb.61:                              // %"$82"
                                        //   in Loop: Header=BB287_14 Depth=1
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB287_63
.LBB287_62:                             // %"$81"
                                        //   in Loop: Header=BB287_14 Depth=1
	bl	evList
.LBB287_63:                             // %"$76"
                                        //   in Loop: Header=BB287_14 Depth=1
	lsr	x8, x0, #32
	stp	w0, w8, [x27]
	cmp	x0, x26
	b.ne	.LBB287_66
// %bb.64:                              //   in Loop: Header=BB287_14 Depth=1
	mov	w0, wzr
	tbz	w0, #0, .LBB287_67
.LBB287_65:                             // %"$86"
                                        //   in Loop: Header=BB287_14 Depth=1
	ldp	w8, w9, [x24, #8]
	bfi	x8, x9, #32, #32
	mov	x9, x19
	b	.LBB287_68
.LBB287_66:                             // %"$85"
                                        //   in Loop: Header=BB287_14 Depth=1
	ldp	w9, w8, [x23]
	bfi	x9, x8, #32, #32
	ldp	w0, w8, [x9]
	bfi	x0, x8, #32, #32
	ldp	w9, w8, [x24]
	bfi	x9, x8, #32, #32
	ldp	w9, w8, [x9, #8]
	bfi	x9, x8, #32, #32
	ldp	w1, w8, [x9]
	bfi	x1, x8, #32, #32
	ldp	w3, w8, [x27]
	bfi	x3, x8, #32, #32
	mov	x2, x0
	bl	unify
	tbnz	w0, #0, .LBB287_65
.LBB287_67:                             // %"$87"
                                        //   in Loop: Header=BB287_14 Depth=1
	ldp	w9, w8, [x20]
	bfi	x9, x8, #32, #32
	ldp	w10, w8, [x9]
	bfi	x10, x8, #32, #32
	ldp	w9, w8, [x9, #8]
	stp	w9, w8, [x20]
	ldp	w22, w8, [x10]
	bfi	x22, x8, #32, #32
	ldp	w9, w8, [x10, #8]
	bfi	x9, x8, #32, #32
	ldp	w8, w10, [x9]
	ldp	w9, w11, [x9, #8]
	bfi	x9, x11, #32, #32
	stp	w8, w10, [x23]
	ldp	w8, w10, [x9]
	ldp	w9, w11, [x9, #8]
	bfi	x9, x11, #32, #32
	stp	w8, w10, [x21]
	ldp	w8, w10, [x9]
	ldp	w9, w11, [x9, #8]
	bfi	x9, x11, #32, #32
	stp	w8, w10, [x19]
	ldp	w10, w11, [x9]
	ldp	w8, w12, [x9, #8]
	bfi	x8, x12, #32, #32
	stp	w10, w11, [x28]
	ldur	x9, [x29, #-8]                  // 8-byte Folded Reload
.LBB287_68:                             // %"$88"
                                        //   in Loop: Header=BB287_14 Depth=1
	lsr	x10, x8, #32
	stp	w8, w10, [x9]
	b	.LBB287_14
.LBB287_69:                             // %"$22"
	ldp	x9, x8, [x29, #-16]             // 16-byte Folded Reload
	stp	w26, w9, [x27]
	adrp	x21, env
	b	.LBB287_71
.LBB287_70:                             // %"$95"
                                        //   in Loop: Header=BB287_71 Depth=1
	add	x8, x20, #8                     // =8
.LBB287_71:                             // %"$91"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w20, w9, [x8]
	bfi	x20, x9, #32, #32
	ldrb	w8, [x20, #8]
	tst	w8, #0xf
	b.ne	.LBB287_74
// %bb.72:                              // %"$92"
                                        //   in Loop: Header=BB287_71 Depth=1
	ldp	w9, w8, [x20]
	bfi	x9, x8, #32, #32
	ldp	w8, w10, [x9]
	bfi	x8, x10, #32, #32
	ldp	w10, w9, [x8]
	bfi	x10, x9, #32, #32
	cmp	x10, #2                         // =2
	b.ne	.LBB287_70
// %bb.73:                              // %"$94"
                                        //   in Loop: Header=BB287_71 Depth=1
	ldp	w19, w9, [x8, #8]
	bfi	x19, x9, #32, #32
	mov	w0, #2
	mov	x1, x19
	bl	lookup
	mov	x1, x0
	mov	x0, x19
	bl	cons
	ldp	w1, w8, [x27]
	bfi	x1, x8, #32, #32
	bl	cons
	lsr	x8, x0, #32
	stp	w0, w8, [x27]
	b	.LBB287_70
.LBB287_74:                             // %"$93"
	adrp	x8, ($Pnl)
	ldur	x9, [x29, #-56]                 // 8-byte Folded Reload
	str	x9, [x8, :lo12:($Pnl)]
	adrp	x8, ($Penv)
	ldur	x9, [x29, #-48]                 // 8-byte Folded Reload
	str	x9, [x8, :lo12:($Penv)]
	adrp	x8, SymTab+376
	ldur	x9, [x29, #-40]                 // 8-byte Folded Reload
	str	x9, [x8, :lo12:SymTab+376]
	ldp	w26, w8, [x27]
	bfi	x26, x8, #32, #32
	tst	x26, #0xf
	b.eq	.LBB287_78
// %bb.75:                              // %"$97"
	ldur	x8, [x29, #-8]                  // 8-byte Folded Reload
	ldrb	w8, [x8]
	tst	w8, #0xf
	b.eq	.LBB287_77
// %bb.76:                              // %"$99"
	adrp	x26, SymTab+8
	add	x26, x26, :lo12:SymTab+8
	b	.LBB287_78
.LBB287_77:
	adrp	x26, SymTab+216
	add	x26, x26, :lo12:SymTab+216
.LBB287_78:                             // %"$96"
	ldur	x9, [x29, #-32]                 // 8-byte Folded Reload
	ldp	w9, w8, [x9, #8]
	bfi	x9, x8, #32, #32
	str	x9, [x21, :lo12:env]
.LBB287_79:                             // %"$9"
	mov	x0, x26
	mov	sp, x29
	ldp	x20, x19, [sp, #80]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #64]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #48]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #32]             // 16-byte Folded Reload
	ldp	x28, x27, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #96             // 16-byte Folded Reload
	ret
.Lfunc_end287:
	.size	_prove, .Lfunc_end287-_prove
	.cfi_endproc
                                        // -- End function
	.globl	_arrow                          // -- Begin function _arrow
	.p2align	4
	.type	_arrow,@function
_arrow:                                 // @_arrow
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	ldp	w8, w9, [x0, #8]
	bfi	x8, x9, #32, #32
	adrp	x9, ($Pnl)
	ldr	x9, [x9, :lo12:($Pnl)]
	ldp	w9, w10, [x9]
	bfi	x9, x10, #32, #32
	ldp	w11, w10, [x8, #8]
	bfi	x11, x10, #32, #32
	ldp	w10, w12, [x11]
	bfi	x10, x12, #32, #32
	tbz	w10, #1, .LBB288_3
// %bb.1:                               // %"$2"
	lsr	x10, x10, #4
	sub	x10, x10, #1                    // =1
	subs	x10, x10, #1                    // =1
	b.lt	.LBB288_3
.LBB288_2:                              // %"$5"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w9, w11, [x9, #8]
	bfi	x9, x11, #32, #32
	subs	x10, x10, #1                    // =1
	b.ge	.LBB288_2
.LBB288_3:                              // %"$3"
	ldp	w0, w10, [x9]
	bfi	x0, x10, #32, #32
	ldp	w1, w9, [x8]
	bfi	x1, x9, #32, #32
	bl	lookup
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end288:
	.size	_arrow, .Lfunc_end288-_arrow
	.cfi_endproc
                                        // -- End function
	.globl	_unify                          // -- Begin function _unify
	.p2align	4
	.type	_unify,@function
_unify:                                 // @_unify
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-32]!           // 16-byte Folded Spill
	stp	x20, x19, [sp, #16]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 32
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w30, -24
	.cfi_offset w29, -32
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w1, w8, [x9]
	bfi	x1, x8, #32, #32
	tst	x1, #0x6
	b.ne	.LBB289_4
// %bb.1:                               // %"$3"
	tbz	w1, #3, .LBB289_3
// %bb.2:                               // %"$6"
	ldp	w1, w8, [x1]
	bfi	x1, x8, #32, #32
	b	.LBB289_4
.LBB289_3:                              // %"$5"
	mov	x0, x1
	bl	evList
	mov	x1, x0
.LBB289_4:                              // %"$2"
	adrp	x19, env
	ldr	x8, [x19, :lo12:env]
	mov	x9, sp
	sub	x20, x9, #16                    // =16
	mov	sp, x20
	lsr	x10, x1, #32
	stp	w1, w10, [x9, #-16]
	lsr	x10, x8, #32
	stp	w8, w10, [x9, #-8]
	str	x20, [x19, :lo12:env]
	adrp	x8, ($Pnl)
	ldr	x8, [x8, :lo12:($Pnl)]
	ldp	w8, w9, [x8]
	bfi	x8, x9, #32, #32
	ldp	w10, w9, [x8, #8]
	bfi	x10, x9, #32, #32
	ldp	w0, w9, [x10]
	bfi	x0, x9, #32, #32
	ldp	w2, w9, [x8]
	bfi	x2, x9, #32, #32
	mov	x3, x1
	bl	unify
	tbz	w0, #0, .LBB289_6
// %bb.5:                               // %"$7"
	adrp	x8, ($Penv)
	ldr	x8, [x8, :lo12:($Penv)]
	ldp	w0, w9, [x8]
	bfi	x0, x9, #32, #32
	b	.LBB289_7
.LBB289_6:
	adrp	x0, SymTab+8
	add	x0, x0, :lo12:SymTab+8
.LBB289_7:                              // %"$9"
	ldp	w9, w8, [x20, #8]
	bfi	x9, x8, #32, #32
	str	x9, [x19, :lo12:env]
	mov	sp, x29
	ldp	x20, x19, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #32             // 16-byte Folded Reload
	ret
.Lfunc_end289:
	.size	_unify, .Lfunc_end289-_unify
	.cfi_endproc
                                        // -- End function
	.globl	_group                          // -- Begin function _group
	.p2align	4
	.type	_group,@function
_group:                                 // @_group
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-96]!           // 16-byte Folded Spill
	str	x27, [sp, #16]                  // 8-byte Folded Spill
	stp	x26, x25, [sp, #32]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #48]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #64]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #80]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w19, w8, [x9]
	bfi	x19, x8, #32, #32
	tst	x19, #0x6
	b.ne	.LBB290_4
// %bb.1:                               // %"$3"
	tbz	w19, #3, .LBB290_3
// %bb.2:                               // %"$6"
	ldp	w19, w8, [x19]
	bfi	x19, x8, #32, #32
	b	.LBB290_4
.LBB290_3:                              // %"$5"
	mov	x0, x19
	bl	evList
	mov	x19, x0
.LBB290_4:                              // %"$2"
	adrp	x24, env
	ldr	x8, [x24, :lo12:env]
	mov	x9, sp
	sub	x25, x9, #16                    // =16
	mov	sp, x25
	lsr	x10, x19, #32
	lsr	x11, x8, #32
	stp	w19, w10, [x9, #-16]
	stp	w8, w11, [x9, #-8]
	tst	x19, #0xf
	str	x25, [x24, :lo12:env]
	b.eq	.LBB290_6
// %bb.5:
	adrp	x20, SymTab+8
	add	x20, x20, :lo12:SymTab+8
	b	.LBB290_15
.LBB290_6:                              // %"$8"
	ldp	w9, w8, [x19]
	bfi	x9, x8, #32, #32
	ldp	w0, w8, [x9, #8]
	bfi	x0, x8, #32, #32
	adrp	x21, SymTab+8
	add	x21, x21, :lo12:SymTab+8
	mov	x1, x21
	bl	cons
	ldp	w9, w8, [x19]
	bfi	x9, x8, #32, #32
	ldp	w20, w8, [x9]
	bfi	x20, x8, #32, #32
	mov	x1, x0
	bl	cons
	mov	x1, x0
	mov	x0, x20
	bl	cons
	mov	x1, x21
	bl	cons
	mov	x20, x0
	ldr	x8, [x24, :lo12:env]
	mov	x9, sp
	sub	x10, x9, #16                    // =16
	mov	sp, x10
	lsr	x11, x0, #32
	lsr	x12, x8, #32
	stp	w20, w11, [x9, #-16]
	stp	w8, w12, [x9, #-8]
	str	x10, [x24, :lo12:env]
	b	.LBB290_8
.LBB290_7:                              // %"$16"
                                        //   in Loop: Header=BB290_8 Depth=1
	ldp	w9, w8, [x27, #8]
	bfi	x9, x8, #32, #32
	ldp	w10, w8, [x9]
	bfi	x10, x8, #32, #32
	lsr	x8, x23, #32
	stp	w23, w8, [x10, #8]
	stp	w23, w8, [x9]
.LBB290_8:                              // %"$10"
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB290_10 Depth 2
	ldp	w19, w8, [x19, #8]
	bfi	x19, x8, #32, #32
	tst	x19, #0xf
	b.ne	.LBB290_13
// %bb.9:                               // %"$11"
                                        //   in Loop: Header=BB290_8 Depth=1
	ldp	w9, w8, [x19]
	bfi	x9, x8, #32, #32
	ldp	w22, w8, [x9]
	bfi	x22, x8, #32, #32
	ldp	w0, w8, [x9, #8]
	bfi	x0, x8, #32, #32
	mov	x1, x21
	bl	cons
	mov	x23, x0
	mov	x8, x20
.LBB290_10:                             // %"$13"
                                        //   Parent Loop BB290_8 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	mov	x26, x8
	ldr	w8, [x8, #4]
	ldr	w27, [x26]
	bfi	x27, x8, #32, #32
	ldp	w1, w8, [x27]
	bfi	x1, x8, #32, #32
	mov	x0, x22
	bl	equal
	tbnz	w0, #0, .LBB290_7
// %bb.11:                              // %"$14"
                                        //   in Loop: Header=BB290_10 Depth=2
	ldp	w8, w9, [x26, #8]
	bfi	x8, x9, #32, #32
	tst	x8, #0xf
	b.eq	.LBB290_10
// %bb.12:                              // %"$18"
                                        //   in Loop: Header=BB290_8 Depth=1
	mov	x0, x23
	mov	x1, x23
	bl	cons
	mov	x1, x0
	mov	x0, x22
	bl	cons
	mov	x1, x21
	bl	cons
	lsr	x8, x0, #32
	stp	w0, w8, [x26, #8]
	b	.LBB290_8
.LBB290_13:
	mov	x8, x20
.LBB290_14:                             // %"$19"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w10, w9, [x8]
	bfi	x10, x9, #32, #32
	ldr	w9, [x10, #8]!
	ldr	w11, [x10, #4]
	bfi	x9, x11, #32, #32
	ldp	w9, w11, [x9, #8]
	stp	w9, w11, [x10]
	ldp	w8, w9, [x8, #8]
	bfi	x8, x9, #32, #32
	tst	x8, #0xf
	b.eq	.LBB290_14
.LBB290_15:                             // %"$9"
	ldp	w9, w8, [x25, #8]
	bfi	x9, x8, #32, #32
	str	x9, [x24, :lo12:env]
	mov	x0, x20
	mov	sp, x29
	ldp	x20, x19, [sp, #80]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #64]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #48]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #32]             // 16-byte Folded Reload
	ldr	x27, [sp, #16]                  // 8-byte Folded Reload
	ldp	x29, x30, [sp], #96             // 16-byte Folded Reload
	ret
.Lfunc_end290:
	.size	_group, .Lfunc_end290-_group
	.cfi_endproc
                                        // -- End function
	.globl	_sort                           // -- Begin function _sort
	.p2align	4
	.type	_sort,@function
_sort:                                  // @_sort
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-96]!           // 16-byte Folded Spill
	stp	x28, x27, [sp, #16]             // 16-byte Folded Spill
	stp	x26, x25, [sp, #32]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #48]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #64]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #80]             // 16-byte Folded Spill
	mov	x29, sp
	sub	sp, sp, #32                     // =32
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w26, w8, [x9]
	bfi	x26, x8, #32, #32
	ldp	w20, w21, [x9, #8]
	tst	x26, #0x6
	b.ne	.LBB291_3
// %bb.1:                               // %"$3"
	tbz	w26, #3, .LBB291_5
// %bb.2:                               // %"$6"
	ldp	w26, w8, [x26]
	bfi	x26, x8, #32, #32
.LBB291_3:                              // %"$2"
	tst	x26, #0xf
	b.eq	.LBB291_6
.LBB291_4:                              // %"$7"
	mov	x0, x26
	mov	sp, x29
	ldp	x20, x19, [sp, #80]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #64]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #48]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #32]             // 16-byte Folded Reload
	ldp	x28, x27, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #96             // 16-byte Folded Reload
	ret
.LBB291_5:                              // %"$5"
	mov	x0, x26
	bl	evList
	mov	x26, x0
	tst	x26, #0xf
	b.ne	.LBB291_4
.LBB291_6:                              // %"$8"
	bfi	x20, x21, #32, #32
	tst	x20, #0xf
	adrp	x21, SymTab+8
	add	x21, x21, :lo12:SymTab+8
	b.eq	.LBB291_39
// %bb.7:                               // %"$12.preheader"
	lsr	x22, x21, #32
	mov	x19, x21
	b	.LBB291_9
.LBB291_8:                              // %"$22"
                                        //   in Loop: Header=BB291_9 Depth=1
	tst	x21, #0xf
	ldur	x26, [x29, #-8]                 // 8-byte Folded Reload
	b.ne	.LBB291_4
.LBB291_9:                              // %"$12"
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB291_16 Depth 2
	tst	x21, #0xf
	b.eq	.LBB291_12
// %bb.10:                              //   in Loop: Header=BB291_9 Depth=1
	mov	w8, wzr
	cbz	w8, .LBB291_13
.LBB291_11:                             // %"$15"
                                        //   in Loop: Header=BB291_9 Depth=1
	ldp	w23, w8, [x21, #8]
	bfi	x23, x8, #32, #32
	mov	x24, x26
	mov	x26, x21
	b	.LBB291_14
.LBB291_12:                             // %"$14"
                                        //   in Loop: Header=BB291_9 Depth=1
	ldp	w0, w8, [x26]
	bfi	x0, x8, #32, #32
	ldp	w1, w8, [x21]
	bfi	x1, x8, #32, #32
	bl	compare
	lsr	x8, x0, #63
	eor	w8, w8, #0x1
	cbnz	w8, .LBB291_11
.LBB291_13:                             // %"$16"
                                        //   in Loop: Header=BB291_9 Depth=1
	ldp	w24, w8, [x26, #8]
	bfi	x24, x8, #32, #32
	mov	x23, x21
.LBB291_14:                             // %"$17"
                                        //   in Loop: Header=BB291_9 Depth=1
	mov	x21, x19
	mov	x25, xzr
	mov	x9, x26
	str	w21, [x26, #8]!
	ldp	w20, w8, [x9]
	bfi	x20, x8, #32, #32
	stur	x9, [x29, #-8]                  // 8-byte Folded Spill
	str	w22, [x9, #12]
	b	.LBB291_16
.LBB291_15:                             // %"$46"
                                        //   in Loop: Header=BB291_16 Depth=2
	mov	x26, x24
	str	w19, [x26, #8]!
	str	w22, [x24, #12]
	ldp	w20, w8, [x24]
	mov	x21, x0
	bfi	x20, x8, #32, #32
	mov	x24, x28
	mov	x23, x27
.LBB291_16:                             // %"$18"
                                        //   Parent Loop BB291_9 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	tst	x24, #0xf
	b.eq	.LBB291_18
// %bb.17:                              // %"$20"
                                        //   in Loop: Header=BB291_16 Depth=2
	tst	x23, #0xf
	cset	w8, eq
	cbnz	w8, .LBB291_19
	b	.LBB291_8
.LBB291_18:                             //   in Loop: Header=BB291_16 Depth=2
	mov	w8, #1
	cbz	w8, .LBB291_8
.LBB291_19:                             // %"$21"
                                        //   in Loop: Header=BB291_16 Depth=2
	tst	x23, #0xf
	b.eq	.LBB291_22
// %bb.20:                              // %"$25"
                                        //   in Loop: Header=BB291_16 Depth=2
	ldp	w28, w8, [x24, #8]
	bfi	x28, x8, #32, #32
	ldp	w0, w8, [x24]
	bfi	x0, x8, #32, #32
	mov	x1, x20
	bl	compare
	tbnz	x0, #63, .LBB291_25
// %bb.21:                              //   in Loop: Header=BB291_16 Depth=2
	mov	x27, x23
	b	.LBB291_34
.LBB291_22:                             // %"$24"
                                        //   in Loop: Header=BB291_16 Depth=2
	tst	x24, #0xf
	b.eq	.LBB291_27
// %bb.23:                              // %"$29"
                                        //   in Loop: Header=BB291_16 Depth=2
	ldp	w27, w8, [x23, #8]
	bfi	x27, x8, #32, #32
	ldp	w0, w8, [x23]
	bfi	x0, x8, #32, #32
	mov	x1, x20
	bl	compare
	mov	x28, x24
	tbz	x0, #63, .LBB291_33
// %bb.24:                              // %"$30"
                                        //   in Loop: Header=BB291_16 Depth=2
	mov	x24, x23
	b	.LBB291_26
.LBB291_25:                             // %"$26"
                                        //   in Loop: Header=BB291_16 Depth=2
	mov	x27, x23
.LBB291_26:                             // %"$23"
                                        //   in Loop: Header=BB291_16 Depth=2
	mov	x8, x25
	mov	x25, x26
	mov	x0, x24
	cbnz	x8, .LBB291_35
	b	.LBB291_15
.LBB291_27:                             // %"$28"
                                        //   in Loop: Header=BB291_16 Depth=2
	ldp	w0, w8, [x24]
	bfi	x0, x8, #32, #32
	mov	x1, x20
	bl	compare
	tbnz	x0, #63, .LBB291_31
// %bb.28:                              // %"$32"
                                        //   in Loop: Header=BB291_16 Depth=2
	ldp	w0, w8, [x23]
	bfi	x0, x8, #32, #32
	mov	x1, x20
	bl	compare
	tbnz	x0, #63, .LBB291_30
// %bb.29:                              // %"$40"
                                        //   in Loop: Header=BB291_16 Depth=2
	ldp	w0, w8, [x24]
	bfi	x0, x8, #32, #32
	ldp	w1, w8, [x23]
	bfi	x1, x8, #32, #32
	bl	compare
	tbz	x0, #63, .LBB291_32
.LBB291_30:                             // %"$41"
                                        //   in Loop: Header=BB291_16 Depth=2
	ldp	w28, w8, [x24, #8]
	bfi	x28, x8, #32, #32
	mov	x27, x23
	b	.LBB291_34
.LBB291_31:                             // %"$33"
                                        //   in Loop: Header=BB291_16 Depth=2
	ldp	w0, w8, [x23]
	bfi	x0, x8, #32, #32
	mov	x1, x20
	bl	compare
	tbnz	x0, #63, .LBB291_36
.LBB291_32:                             // %"$42"
                                        //   in Loop: Header=BB291_16 Depth=2
	ldp	w27, w8, [x23, #8]
	mov	x28, x24
	bfi	x27, x8, #32, #32
.LBB291_33:                             // %"$23"
                                        //   in Loop: Header=BB291_16 Depth=2
	mov	x24, x23
.LBB291_34:                             // %"$23"
                                        //   in Loop: Header=BB291_16 Depth=2
	mov	x8, x26
	mov	x0, x24
	cbz	x8, .LBB291_15
.LBB291_35:                             // %"$44"
                                        //   in Loop: Header=BB291_16 Depth=2
	lsr	x9, x24, #32
	stp	w24, w9, [x8]
	mov	x0, x21
	b	.LBB291_15
.LBB291_36:                             // %"$35"
                                        //   in Loop: Header=BB291_16 Depth=2
	ldp	w0, w8, [x24]
	bfi	x0, x8, #32, #32
	ldp	w1, w8, [x23]
	bfi	x1, x8, #32, #32
	bl	compare
	tbnz	x0, #63, .LBB291_38
// %bb.37:                              // %"$38"
                                        //   in Loop: Header=BB291_16 Depth=2
	ldp	w27, w8, [x23, #8]
	mov	x28, x24
	mov	x24, x23
	bfi	x27, x8, #32, #32
	b	.LBB291_26
.LBB291_38:                             // %"$37"
                                        //   in Loop: Header=BB291_16 Depth=2
	ldp	w28, w8, [x24, #8]
	mov	x27, x23
	bfi	x28, x8, #32, #32
	b	.LBB291_26
.LBB291_39:                             // %"$10"
	mov	x8, sp
	sub	x11, x8, #16                    // =16
	mov	sp, x11
	lsr	x9, x26, #32
	stp	w26, w9, [x8, #-16]
	adrp	x12, env
	ldr	x9, [x12, :lo12:env]
	lsr	x10, x9, #32
	stp	w9, w10, [x8, #-8]
	stur	x11, [x29, #-24]                // 8-byte Folded Spill
	str	x11, [x12, :lo12:env]
	mov	x8, sp
	sub	x22, x8, #16                    // =16
	mov	sp, x22
	lsr	x13, x21, #32
	stp	w21, w13, [x8, #-16]
	ldr	x9, [x12, :lo12:env]
	lsr	x10, x9, #32
	stp	w9, w10, [x8, #-8]
	str	x22, [x12, :lo12:env]
	mov	x8, sp
	sub	x25, x8, #16                    // =16
	mov	sp, x25
	mov	w9, #10
	stp	w9, wzr, [x8, #-16]
	ldr	x10, [x12, :lo12:env]
	lsr	x11, x10, #32
	stp	w10, w11, [x8, #-8]
	str	x25, [x12, :lo12:env]
	mov	x8, sp
	sub	x26, x8, #16                    // =16
	mov	sp, x26
	stp	w9, wzr, [x8, #-16]
	ldr	x9, [x12, :lo12:env]
	lsr	x10, x9, #32
	stp	w9, w10, [x8, #-8]
	str	x26, [x12, :lo12:env]
	mov	x8, sp
	sub	x27, x8, #32                    // =32
	mov	sp, x27
	stur	x13, [x29, #-8]                 // 8-byte Folded Spill
	stp	w21, w13, [x8, #-24]
	mov	w9, #2
	stp	w9, wzr, [x8, #-16]
	mov	x8, sp
	sub	x28, x8, #32                    // =32
	mov	sp, x28
	lsr	x10, x27, #32
	stp	w27, w10, [x8, #-24]
	stp	w9, wzr, [x8, #-16]
	ldp	w0, w8, [x20]
	bfi	x0, x8, #32, #32
	tst	x0, #0x6
	b.ne	.LBB291_43
// %bb.40:                              // %"$51"
	tbz	w0, #3, .LBB291_42
// %bb.41:                              // %"$54"
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB291_43
.LBB291_42:                             // %"$53"
	bl	evList
.LBB291_43:                             // %"$50"
	mov	x8, sp
	sub	x19, x8, #48                    // =48
	mov	sp, x19
	lsr	x9, x28, #32
	mov	w10, #2
	stp	w28, w9, [x8, #-40]
	stp	w10, wzr, [x8, #-32]
	mov	x9, x19
	str	w0, [x9, #24]!
	lsr	x10, x0, #32
	stur	w10, [x8, #-20]
	add	x10, x27, #24                   // =24
	lsr	x11, x10, #32
	stp	w10, w11, [x27]
	add	x10, x28, #24                   // =24
	lsr	x11, x10, #32
	stp	w10, w11, [x28]
	adrp	x12, env
	ldr	x10, [x12, :lo12:env]
	lsr	x11, x10, #32
	stp	w10, w11, [x8, #-16]
	str	x9, [x12, :lo12:env]
	lsr	x10, x9, #32
	stp	w9, w10, [x8, #-48]
	stur	x22, [x29, #-16]                // 8-byte Folded Spill
	b	.LBB291_45
.LBB291_44:                             // %"$68"
                                        //   in Loop: Header=BB291_45 Depth=1
	ldur	x22, [x29, #-16]                // 8-byte Folded Reload
	ldrb	w8, [x22]
	tst	w8, #0xf
	b.ne	.LBB291_74
.LBB291_45:                             // %"$55"
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB291_52 Depth 2
	ldur	x9, [x29, #-24]                 // 8-byte Folded Reload
	ldp	w8, w9, [x9]
	stp	w8, w9, [x25]
	ldp	w8, w9, [x22]
	stp	w8, w9, [x26]
	tst	w8, #0xf
	b.eq	.LBB291_48
// %bb.46:                              //   in Loop: Header=BB291_45 Depth=1
	mov	w8, wzr
	cbz	w8, .LBB291_49
.LBB291_47:                             // %"$61"
                                        //   in Loop: Header=BB291_45 Depth=1
	ldp	w22, w8, [x26]
	bfi	x22, x8, #32, #32
	ldp	w8, w9, [x22, #8]
	bfi	x8, x9, #32, #32
	mov	x9, x26
	b	.LBB291_50
.LBB291_48:                             // %"$57"
                                        //   in Loop: Header=BB291_45 Depth=1
	ldp	w9, w8, [x25]
	ldp	w11, w10, [x26]
	bfi	x9, x8, #32, #32
	bfi	x11, x10, #32, #32
	ldp	w8, w9, [x9]
	ldp	w10, w11, [x11]
	stp	w8, w9, [x28, #24]
	stp	w10, w11, [x27, #24]
	mov	x0, x19
	bl	evList
	cmp	x0, x21
	cset	w8, eq
	cbnz	w8, .LBB291_47
.LBB291_49:                             // %"$62"
                                        //   in Loop: Header=BB291_45 Depth=1
	ldp	w22, w8, [x25]
	bfi	x22, x8, #32, #32
	ldp	w8, w9, [x22, #8]
	bfi	x8, x9, #32, #32
	mov	x9, x25
.LBB291_50:                             // %"$63"
                                        //   in Loop: Header=BB291_45 Depth=1
	mov	x20, xzr
	lsr	x10, x8, #32
	stp	w8, w10, [x9]
	ldp	w24, w8, [x22]
	lsr	x9, x22, #32
	ldur	x10, [x29, #-24]                // 8-byte Folded Reload
	stp	w22, w9, [x10]
	ldp	x9, x10, [x29, #-16]            // 16-byte Folded Reload
	stp	w21, w10, [x9]
	str	w21, [x22, #8]!
	bfi	x24, x8, #32, #32
	str	w10, [x22, #4]
	b	.LBB291_52
.LBB291_51:                             // %"$113"
                                        //   in Loop: Header=BB291_52 Depth=2
	lsr	x8, x23, #32
	stp	w23, w8, [x22]
	mov	x22, x23
	str	w21, [x22, #8]!
	ldur	x8, [x29, #-8]                  // 8-byte Folded Reload
	str	w8, [x23, #12]
	ldp	w24, w8, [x23]
	bfi	x24, x8, #32, #32
.LBB291_52:                             // %"$64"
                                        //   Parent Loop BB291_45 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldrb	w8, [x25]
	tst	w8, #0xf
	b.eq	.LBB291_54
// %bb.53:                              // %"$66"
                                        //   in Loop: Header=BB291_52 Depth=2
	ldrb	w8, [x26]
	tst	w8, #0xf
	cset	w8, eq
	cbnz	w8, .LBB291_55
	b	.LBB291_44
.LBB291_54:                             //   in Loop: Header=BB291_52 Depth=2
	mov	w8, #1
	cbz	w8, .LBB291_44
.LBB291_55:                             // %"$67"
                                        //   in Loop: Header=BB291_52 Depth=2
	ldrb	w8, [x26]
	tst	w8, #0xf
	b.eq	.LBB291_57
// %bb.56:                              // %"$71"
                                        //   in Loop: Header=BB291_52 Depth=2
	ldp	w23, w8, [x25]
	bfi	x23, x8, #32, #32
	ldp	w9, w8, [x23, #8]
	stp	w9, w8, [x25]
	b	.LBB291_59
.LBB291_57:                             // %"$70"
                                        //   in Loop: Header=BB291_52 Depth=2
	ldrb	w8, [x25]
	tst	w8, #0xf
	b.eq	.LBB291_62
// %bb.58:                              // %"$78"
                                        //   in Loop: Header=BB291_52 Depth=2
	ldp	w23, w8, [x26]
	bfi	x23, x8, #32, #32
	ldp	w9, w8, [x23, #8]
	stp	w9, w8, [x26]
.LBB291_59:                             // %"$69"
                                        //   in Loop: Header=BB291_52 Depth=2
	ldp	w8, w9, [x23]
	stp	w8, w9, [x28, #24]
	lsr	x8, x24, #32
	stp	w24, w8, [x27, #24]
	mov	x0, x19
	bl	evList
	cmp	x0, x21
	csetm	x8, ne
	tst	x8, #0x8000000000000000
	csel	x8, x22, x20, eq
	csel	x20, x20, x22, eq
	mov	x22, x8
.LBB291_60:                             // %"$69"
                                        //   in Loop: Header=BB291_52 Depth=2
	cbnz	x22, .LBB291_51
// %bb.61:                              // %"$112"
                                        //   in Loop: Header=BB291_52 Depth=2
	ldur	x22, [x29, #-16]                // 8-byte Folded Reload
	b	.LBB291_51
.LBB291_62:                             // %"$77"
                                        //   in Loop: Header=BB291_52 Depth=2
	ldp	w9, w8, [x25]
	bfi	x9, x8, #32, #32
	ldp	w8, w9, [x9]
	stp	w8, w9, [x28, #24]
	mov	x23, x21
	lsr	x21, x24, #32
	stp	w24, w21, [x27, #24]
	mov	x0, x19
	bl	evList
	cmp	x0, x23
	csetm	x8, ne
	tbnz	x8, #63, .LBB291_67
// %bb.63:                              // %"$87"
                                        //   in Loop: Header=BB291_52 Depth=2
	ldp	w9, w8, [x26]
	bfi	x9, x8, #32, #32
	ldp	w8, w9, [x9]
	stp	w8, w9, [x28, #24]
	stp	w24, w21, [x27, #24]
	mov	x0, x19
	bl	evList
	cmp	x0, x23
	csetm	x8, ne
	mov	x21, x23
	tbnz	x8, #63, .LBB291_66
// %bb.64:                              // %"$104"
                                        //   in Loop: Header=BB291_52 Depth=2
	ldp	w9, w8, [x25]
	ldp	w11, w10, [x26]
	bfi	x9, x8, #32, #32
	bfi	x11, x10, #32, #32
	ldp	w8, w9, [x9]
	ldp	w10, w11, [x11]
	stp	w8, w9, [x28, #24]
	stp	w10, w11, [x27, #24]
	mov	x0, x19
	bl	evList
	cmp	x0, x21
	csetm	x8, ne
	tbnz	x8, #63, .LBB291_66
// %bb.65:                              // %"$109"
                                        //   in Loop: Header=BB291_52 Depth=2
	ldp	w23, w8, [x26]
	bfi	x23, x8, #32, #32
	ldp	w9, w8, [x23, #8]
	stp	w9, w8, [x26]
	b	.LBB291_60
.LBB291_66:                             // %"$105"
                                        //   in Loop: Header=BB291_52 Depth=2
	ldp	w23, w8, [x25]
	bfi	x23, x8, #32, #32
	ldp	w9, w8, [x23, #8]
	stp	w9, w8, [x25]
	b	.LBB291_60
.LBB291_67:                             // %"$88"
                                        //   in Loop: Header=BB291_52 Depth=2
	ldp	w9, w8, [x26]
	bfi	x9, x8, #32, #32
	ldp	w8, w9, [x9]
	stp	w8, w9, [x28, #24]
	stp	w24, w21, [x27, #24]
	mov	x0, x19
	bl	evList
	cmp	x0, x23
	csetm	x8, ne
	mov	x21, x23
	tbnz	x8, #63, .LBB291_69
// %bb.68:                              // %"$92"
                                        //   in Loop: Header=BB291_52 Depth=2
	ldp	w23, w8, [x26]
	bfi	x23, x8, #32, #32
	ldp	w8, w9, [x23, #8]
	bfi	x8, x9, #32, #32
	mov	x9, x26
	mov	x0, x22
	b	.LBB291_73
.LBB291_69:                             // %"$93"
                                        //   in Loop: Header=BB291_52 Depth=2
	ldp	w9, w8, [x25]
	ldp	w11, w10, [x26]
	bfi	x9, x8, #32, #32
	bfi	x11, x10, #32, #32
	ldp	w8, w9, [x9]
	ldp	w10, w11, [x11]
	stp	w8, w9, [x28, #24]
	stp	w10, w11, [x27, #24]
	mov	x0, x19
	bl	evList
	cmp	x0, x21
	csetm	x8, ne
	tbnz	x8, #63, .LBB291_71
// %bb.70:                              // %"$99"
                                        //   in Loop: Header=BB291_52 Depth=2
	ldp	w23, w8, [x26]
	bfi	x23, x8, #32, #32
	ldp	w8, w10, [x23, #8]
	mov	x9, x26
	b	.LBB291_72
.LBB291_71:                             // %"$98"
                                        //   in Loop: Header=BB291_52 Depth=2
	ldp	w23, w8, [x25]
	bfi	x23, x8, #32, #32
	ldp	w8, w10, [x23, #8]
	mov	x9, x25
.LBB291_72:                             // %"$94"
                                        //   in Loop: Header=BB291_52 Depth=2
	bfi	x8, x10, #32, #32
	mov	x0, x20
	mov	x20, x22
.LBB291_73:                             // %"$94"
                                        //   in Loop: Header=BB291_52 Depth=2
	lsr	x10, x8, #32
	stp	w8, w10, [x9]
	mov	x22, x0
	b	.LBB291_60
.LBB291_74:                             // %"$116"
	ldur	x9, [x29, #-24]                 // 8-byte Folded Reload
	ldp	w26, w8, [x9]
	bfi	x26, x8, #32, #32
	ldp	w9, w8, [x9, #8]
	bfi	x9, x8, #32, #32
	adrp	x8, env
	str	x9, [x8, :lo12:env]
	b	.LBB291_4
.Lfunc_end291:
	.size	_sort, .Lfunc_end291-_sort
	.cfi_endproc
                                        // -- End function
	.globl	_alarm                          // -- Begin function _alarm
	.p2align	4
	.type	_alarm,@function
_alarm:                                 // @_alarm
	.cfi_startproc
// %bb.0:                               // %"$1"
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w0, w8, [x9, #8]
	bfi	x0, x8, #32, #32
	adrp	x8, gcData+16
	str	x0, [x8, :lo12:gcData+16]
	ret
.Lfunc_end292:
	.size	_alarm, .Lfunc_end292-_alarm
	.cfi_endproc
                                        // -- End function
	.globl	_protect                        // -- Begin function _protect
	.p2align	4
	.type	_protect,@function
_protect:                               // @_protect
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-32]!                // 8-byte Folded Spill
	stp	x20, x19, [sp, #16]             // 16-byte Folded Spill
	.cfi_def_cfa_offset 32
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w30, -32
	ldp	w20, w8, [x0, #8]
	bfi	x20, x8, #32, #32
	adrp	x19, env+136
	ldr	w8, [x19, :lo12:env+136]
	add	w8, w8, #1                      // =1
	str	w8, [x19, :lo12:env+136]
.LBB293_1:                              // %"$2"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w0, w8, [x20]
	bfi	x0, x8, #32, #32
	ldp	w20, w8, [x20, #8]
	bfi	x20, x8, #32, #32
	tst	x20, #0xf
	b.ne	.LBB293_4
// %bb.2:                               // %"$3"
                                        //   in Loop: Header=BB293_1 Depth=1
	tst	x0, #0xf
	b.ne	.LBB293_1
// %bb.3:                               // %"$12"
                                        //   in Loop: Header=BB293_1 Depth=1
	bl	evList
	b	.LBB293_1
.LBB293_4:                              // %"$5"
	tst	x0, #0x6
	b.ne	.LBB293_8
// %bb.5:                               // %"$7"
	tbz	w0, #3, .LBB293_7
// %bb.6:                               // %"$10"
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB293_8
.LBB293_7:                              // %"$9"
	bl	evList
.LBB293_8:                              // %"$4"
	ldr	w8, [x19, :lo12:env+136]
	sub	w8, w8, #1                      // =1
	str	w8, [x19, :lo12:env+136]
	ldp	x20, x19, [sp, #16]             // 16-byte Folded Reload
	ldr	x30, [sp], #32                  // 8-byte Folded Reload
	ret
.Lfunc_end293:
	.size	_protect, .Lfunc_end293-_protect
	.cfi_endproc
                                        // -- End function
	.globl	_heap                           // -- Begin function _heap
	.p2align	4
	.type	_heap,@function
_heap:                                  // @_heap
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w0, w8, [x9]
	bfi	x0, x8, #32, #32
	tst	x0, #0x6
	b.ne	.LBB294_4
// %bb.1:                               // %"$3"
	tbz	w0, #3, .LBB294_3
// %bb.2:                               // %"$6"
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB294_4
.LBB294_3:                              // %"$5"
	bl	evList
.LBB294_4:                              // %"$2"
	adrp	x8, SymTab+8
	add	x8, x8, :lo12:SymTab+8
	cmp	x0, x8
	b.ne	.LBB294_8
// %bb.5:                               // %"$7"
	adrp	x8, ($Heaps)
	ldr	x9, [x8, :lo12:($Heaps)]
	mov	w8, #1
.LBB294_6:                              // %"$10"
                                        // =>This Inner Loop Header: Depth=1
	add	x9, x9, #256, lsl #12           // =1048576
	ldp	w9, w10, [x9]
	bfi	x9, x10, #32, #32
	cbz	x9, .LBB294_12
// %bb.7:                               // %"$11"
                                        //   in Loop: Header=BB294_6 Depth=1
	add	x8, x8, #1                      // =1
	b	.LBB294_6
.LBB294_8:                              // %"$13.preheader"
	mov	x8, xzr
	adrp	x9, ($Avail)
	add	x9, x9, :lo12:($Avail)
.LBB294_9:                              // %"$13"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w9, w10, [x9]
	bfi	x9, x10, #32, #32
	cbz	x9, .LBB294_11
// %bb.10:                              // %"$14"
                                        //   in Loop: Header=BB294_9 Depth=1
	add	x8, x8, #1                      // =1
	b	.LBB294_9
.LBB294_11:                             // %"$15"
	lsr	x8, x8, #16
.LBB294_12:                             // %"$9"
	mov	w0, #2
	bfi	x0, x8, #4, #60
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end294:
	.size	_heap, .Lfunc_end294-_heap
	.cfi_endproc
                                        // -- End function
	.globl	_stack                          // -- Begin function _stack
	.p2align	4
	.type	_stack,@function
_stack:                                 // @_stack
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x30, x19, [sp, #-16]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w19, -8
	.cfi_offset w30, -16
	ldp	w1, w8, [x0, #8]
	bfi	x1, x8, #32, #32
	adrp	x8, env+40
	ldr	x19, [x8, :lo12:env+40]
	tst	x1, #0xf
	b.eq	.LBB295_2
// %bb.1:
	mov	w8, #1
	cbnz	w8, .LBB295_4
	b	.LBB295_10
.LBB295_2:                              // %"$3"
	cbz	x19, .LBB295_9
// %bb.3:                               // %"$5"
	ldr	x8, [x19, #16]
	cmp	x8, #0                          // =0
	cset	w8, ne
	cbz	w8, .LBB295_10
.LBB295_4:                              // %"$6"
	adrp	x8, ($StkSize)
	ldr	x8, [x8, :lo12:($StkSize)]
	lsr	x8, x8, #6
	and	x8, x8, #0x3fffffffffffff0
	orr	x1, x8, #0x2
	b	.LBB295_6
.LBB295_5:                              // %"$13"
                                        //   in Loop: Header=BB295_6 Depth=1
	ldr	x19, [x19, #16]
.LBB295_6:                              // %"$9"
                                        // =>This Inner Loop Header: Depth=1
	cbz	x19, .LBB295_13
// %bb.7:                               // %"$10"
                                        //   in Loop: Header=BB295_6 Depth=1
	ldp	w0, w8, [x19]
	bfi	x0, x8, #32, #32
	cbz	x0, .LBB295_5
// %bb.8:                               // %"$12"
                                        //   in Loop: Header=BB295_6 Depth=1
	bl	cons
	mov	x1, x0
	b	.LBB295_5
.LBB295_9:
	mov	w8, wzr
	cbnz	w8, .LBB295_4
.LBB295_10:                             // %"$7"
	bl	evCnt
	adrp	x10, ($StkSize)
	ldr	x8, [x10, :lo12:($StkSize)]
	lsl	x9, x0, #10
	str	x9, [x10, :lo12:($StkSize)]
	cbz	x19, .LBB295_12
// %bb.11:                              // %"$14"
	ldr	x10, [x19, #40]
	sub	x8, x8, x9
	add	x8, x10, x8
	str	x8, [x19, #40]
.LBB295_12:                             // %"$15"
	mov	w1, #2
	bfi	x1, x0, #4, #60
.LBB295_13:                             // %"$8"
	mov	x0, x1
	ldp	x30, x19, [sp], #16             // 16-byte Folded Reload
	ret
.Lfunc_end295:
	.size	_stack, .Lfunc_end295-_stack
	.cfi_endproc
                                        // -- End function
	.globl	_byte                           // -- Begin function _byte
	.p2align	4
	.type	_byte,@function
_byte:                                  // @_byte
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x30, x21, [sp, #-32]!           // 16-byte Folded Spill
	stp	x20, x19, [sp, #16]             // 16-byte Folded Spill
	.cfi_def_cfa_offset 32
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w30, -32
	mov	x19, x0
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w1, w8, [x9]
	bfi	x1, x8, #32, #32
	ldp	w21, w20, [x9, #8]
	tst	x1, #0x6
	b.ne	.LBB296_4
// %bb.1:                               // %"$3"
	tbz	w1, #3, .LBB296_3
// %bb.2:                               // %"$6"
	ldp	w1, w8, [x1]
	bfi	x1, x8, #32, #32
	b	.LBB296_4
.LBB296_3:                              // %"$5"
	mov	x0, x1
	bl	evList
	mov	x1, x0
.LBB296_4:                              // %"$2"
	tst	x1, #0x6
	b.eq	.LBB296_16
// %bb.5:                               // %"$8"
	bfi	x21, x20, #32, #32
	tbz	w1, #1, .LBB296_10
// %bb.6:                               // %"$9"
	lsr	x20, x1, #4
	tst	x21, #0xf
	b.ne	.LBB296_11
.LBB296_7:                              // %"$13"
	ldp	w1, w8, [x21]
	bfi	x1, x8, #32, #32
	tst	x1, #0x6
	b.ne	.LBB296_13
// %bb.8:                               // %"$16"
	tbz	w1, #3, .LBB296_12
// %bb.9:                               // %"$19"
	ldp	w1, w8, [x1]
	bfi	x1, x8, #32, #32
	b	.LBB296_13
.LBB296_10:                             // %"$10"
	ldp	w20, w8, [x1, #-4]
	bfi	x20, x8, #32, #32
	tst	x21, #0xf
	b.eq	.LBB296_7
.LBB296_11:                             // %"$12"
	ldrb	w8, [x20]
	mov	w1, #2
	bfi	x1, x8, #4, #8
	b	.LBB296_15
.LBB296_12:                             // %"$18"
	mov	x0, x1
	bl	evList
	mov	x1, x0
.LBB296_13:                             // %"$15"
	tbz	w1, #1, .LBB296_17
// %bb.14:                              // %"$21"
	lsr	x8, x1, #4
	neg	w9, w8
	tst	x1, #0x8
	csel	x8, x9, x8, ne
	strb	w8, [x20]
.LBB296_15:                             // %"$14"
	mov	x0, x1
	ldp	x20, x19, [sp, #16]             // 16-byte Folded Reload
	ldp	x30, x21, [sp], #32             // 16-byte Folded Reload
	ret
.LBB296_16:                             // %"$7"
	mov	x0, x19
	bl	numErr
.LBB296_17:                             // %"$20"
	mov	x0, x19
	bl	cntErr
.Lfunc_end296:
	.size	_byte, .Lfunc_end296-_byte
	.cfi_endproc
                                        // -- End function
	.globl	_ptr32                          // -- Begin function _ptr32
	.p2align	4
	.type	_ptr32,@function
_ptr32:                                 // @_ptr32
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x30, x21, [sp, #-32]!           // 16-byte Folded Spill
	stp	x20, x19, [sp, #16]             // 16-byte Folded Spill
	.cfi_def_cfa_offset 32
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w30, -32
	mov	x19, x0
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w1, w8, [x9]
	bfi	x1, x8, #32, #32
	ldp	w21, w20, [x9, #8]
	tst	x1, #0x6
	b.ne	.LBB297_4
// %bb.1:                               // %"$3"
	tbz	w1, #3, .LBB297_3
// %bb.2:                               // %"$6"
	ldp	w1, w8, [x1]
	bfi	x1, x8, #32, #32
	b	.LBB297_4
.LBB297_3:                              // %"$5"
	mov	x0, x1
	bl	evList
	mov	x1, x0
.LBB297_4:                              // %"$2"
	tst	x1, #0x6
	b.eq	.LBB297_16
// %bb.5:                               // %"$8"
	bfi	x21, x20, #32, #32
	tbz	w1, #1, .LBB297_10
// %bb.6:                               // %"$9"
	lsr	x20, x1, #4
	tst	x21, #0xf
	b.ne	.LBB297_11
.LBB297_7:                              // %"$13"
	ldp	w1, w8, [x21]
	bfi	x1, x8, #32, #32
	tst	x1, #0x6
	b.ne	.LBB297_13
// %bb.8:                               // %"$16"
	tbz	w1, #3, .LBB297_12
// %bb.9:                               // %"$19"
	ldp	w1, w8, [x1]
	bfi	x1, x8, #32, #32
	b	.LBB297_13
.LBB297_10:                             // %"$10"
	ldp	w20, w8, [x1, #-4]
	bfi	x20, x8, #32, #32
	tst	x21, #0xf
	b.eq	.LBB297_7
.LBB297_11:                             // %"$12"
	ldr	w8, [x20]
	mov	w1, #2
	bfi	x1, x8, #4, #32
	b	.LBB297_15
.LBB297_12:                             // %"$18"
	mov	x0, x1
	bl	evList
	mov	x1, x0
.LBB297_13:                             // %"$15"
	tbz	w1, #1, .LBB297_17
// %bb.14:                              // %"$21"
	lsr	x8, x1, #4
	neg	w9, w8
	tst	x1, #0x8
	csel	x8, x9, x8, ne
	str	w8, [x20]
.LBB297_15:                             // %"$14"
	mov	x0, x1
	ldp	x20, x19, [sp, #16]             // 16-byte Folded Reload
	ldp	x30, x21, [sp], #32             // 16-byte Folded Reload
	ret
.LBB297_16:                             // %"$7"
	mov	x0, x19
	bl	numErr
.LBB297_17:                             // %"$20"
	mov	x0, x19
	bl	cntErr
.Lfunc_end297:
	.size	_ptr32, .Lfunc_end297-_ptr32
	.cfi_endproc
                                        // -- End function
	.globl	_ptr64                          // -- Begin function _ptr64
	.p2align	4
	.type	_ptr64,@function
_ptr64:                                 // @_ptr64
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x30, x21, [sp, #-32]!           // 16-byte Folded Spill
	stp	x20, x19, [sp, #16]             // 16-byte Folded Spill
	.cfi_def_cfa_offset 32
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w30, -32
	mov	x19, x0
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w1, w8, [x9]
	bfi	x1, x8, #32, #32
	ldp	w21, w20, [x9, #8]
	tst	x1, #0x6
	b.ne	.LBB298_4
// %bb.1:                               // %"$3"
	tbz	w1, #3, .LBB298_3
// %bb.2:                               // %"$6"
	ldp	w1, w8, [x1]
	bfi	x1, x8, #32, #32
	b	.LBB298_4
.LBB298_3:                              // %"$5"
	mov	x0, x1
	bl	evList
	mov	x1, x0
.LBB298_4:                              // %"$2"
	tst	x1, #0x6
	b.eq	.LBB298_16
// %bb.5:                               // %"$8"
	bfi	x21, x20, #32, #32
	tbz	w1, #1, .LBB298_10
// %bb.6:                               // %"$9"
	lsr	x20, x1, #4
	tst	x21, #0xf
	b.ne	.LBB298_11
.LBB298_7:                              // %"$13"
	ldp	w1, w8, [x21]
	bfi	x1, x8, #32, #32
	tst	x1, #0x6
	b.ne	.LBB298_13
// %bb.8:                               // %"$16"
	tbz	w1, #3, .LBB298_12
// %bb.9:                               // %"$19"
	ldp	w1, w8, [x1]
	bfi	x1, x8, #32, #32
	b	.LBB298_13
.LBB298_10:                             // %"$10"
	ldp	w20, w8, [x1, #-4]
	bfi	x20, x8, #32, #32
	tst	x21, #0xf
	b.eq	.LBB298_7
.LBB298_11:                             // %"$12"
	ldp	w9, w8, [x20]
	bfi	x9, x8, #32, #32
	mov	w1, #2
	bfi	x1, x9, #4, #60
	b	.LBB298_15
.LBB298_12:                             // %"$18"
	mov	x0, x1
	bl	evList
	mov	x1, x0
.LBB298_13:                             // %"$15"
	tbz	w1, #1, .LBB298_17
// %bb.14:                              // %"$21"
	lsr	x8, x1, #4
	tst	x1, #0x8
	cneg	x8, x8, ne
	lsr	x9, x8, #32
	stp	w8, w9, [x20]
.LBB298_15:                             // %"$14"
	mov	x0, x1
	ldp	x20, x19, [sp, #16]             // 16-byte Folded Reload
	ldp	x30, x21, [sp], #32             // 16-byte Folded Reload
	ret
.LBB298_16:                             // %"$7"
	mov	x0, x19
	bl	numErr
.LBB298_17:                             // %"$20"
	mov	x0, x19
	bl	cntErr
.Lfunc_end298:
	.size	_ptr64, .Lfunc_end298-_ptr64
	.cfi_endproc
                                        // -- End function
	.globl	_usec                           // -- Begin function _usec
	.p2align	4
	.type	_usec,@function
_usec:                                  // @_usec
	.cfi_startproc
// %bb.0:                               // %"$1"
	//APP
	mrs	x8, CNTVCT_EL0
	//NO_APP
	adrp	x9, ($USec)
	ldr	x9, [x9, :lo12:($USec)]
	sub	x8, x8, x9
	mov	w0, #2
	bfi	x0, x8, #4, #60
	ret
.Lfunc_end299:
	.size	_usec, .Lfunc_end299-_usec
	.cfi_endproc
                                        // -- End function
	.globl	_struct                         // -- Begin function _struct
	.p2align	4
	.type	_struct,@function
_struct:                                // @_struct
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-64]!           // 16-byte Folded Spill
	stp	x24, x23, [sp, #16]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #32]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #48]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 64
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w30, -56
	.cfi_offset w29, -64
	mov	x19, x0
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w1, w8, [x9]
	bfi	x1, x8, #32, #32
	ldp	w22, w20, [x9, #8]
	tst	x1, #0x6
	b.ne	.LBB300_4
// %bb.1:                               // %"$3"
	tbz	w1, #3, .LBB300_3
// %bb.2:                               // %"$6"
	ldp	w1, w8, [x1]
	bfi	x1, x8, #32, #32
	b	.LBB300_4
.LBB300_3:                              // %"$5"
	mov	x0, x1
	bl	evList
	mov	x1, x0
.LBB300_4:                              // %"$2"
	tst	x1, #0x6
	b.eq	.LBB300_25
// %bb.5:                               // %"$8"
	bfi	x22, x20, #32, #32
	tbz	w1, #1, .LBB300_7
// %bb.6:                               // %"$9"
	lsr	x20, x1, #4
	b	.LBB300_8
.LBB300_7:                              // %"$10"
	ldp	w20, w8, [x1, #-4]
	bfi	x20, x8, #32, #32
.LBB300_8:                              // %"$11"
	ldp	w19, w8, [x22]
	bfi	x19, x8, #32, #32
	tst	x19, #0x6
	b.ne	.LBB300_12
// %bb.9:                               // %"$13"
	tbz	w19, #3, .LBB300_11
// %bb.10:                              // %"$16"
	ldp	w19, w8, [x19]
	bfi	x19, x8, #32, #32
	b	.LBB300_12
.LBB300_11:                             // %"$15"
	mov	x0, x19
	bl	evList
	mov	x19, x0
.LBB300_12:                             // %"$12"
	adrp	x23, env
	ldr	x8, [x23, :lo12:env]
	mov	x9, sp
	sub	x24, x9, #16                    // =16
	mov	sp, x24
	lsr	x10, x19, #32
	lsr	x11, x8, #32
	stp	w19, w10, [x9, #-16]
	stp	w8, w11, [x9, #-8]
	mov	x21, x20
	str	x24, [x23, :lo12:env]
	b	.LBB300_15
.LBB300_13:                             // %"$23"
                                        //   in Loop: Header=BB300_15 Depth=1
	bl	evList
.LBB300_14:                             // %"$20"
                                        //   in Loop: Header=BB300_15 Depth=1
	mov	x1, x21
	bl	natBuf
	add	x21, x21, x0
.LBB300_15:                             // %"$17"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w22, w8, [x22, #8]
	bfi	x22, x8, #32, #32
	tst	x22, #0xf
	b.ne	.LBB300_19
// %bb.16:                              // %"$18"
                                        //   in Loop: Header=BB300_15 Depth=1
	ldp	w0, w8, [x22]
	bfi	x0, x8, #32, #32
	tst	x0, #0x6
	b.ne	.LBB300_14
// %bb.17:                              // %"$21"
                                        //   in Loop: Header=BB300_15 Depth=1
	tbz	w0, #3, .LBB300_13
// %bb.18:                              // %"$24"
                                        //   in Loop: Header=BB300_15 Depth=1
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB300_14
.LBB300_19:                             // %"$19"
	adrp	x8, SymTab+8
	add	x8, x8, :lo12:SymTab+8
	cmp	x19, x8
	b.eq	.LBB300_24
// %bb.20:                              // %"$26"
	adrp	x8, SymTab+264
	add	x8, x8, :lo12:SymTab+264
	cmp	x19, x8
	b.ne	.LBB300_22
// %bb.21:                              // %"$29"
	mov	x0, x20
	bl	mkStr
	b	.LBB300_23
.LBB300_22:                             // %"$28"
	mov	x8, sp
	sub	x1, x8, #16                     // =16
	mov	sp, x1
	lsr	x9, x20, #32
	stp	w20, w9, [x8, #-16]
	mov	x0, x19
	bl	natRetBuf
.LBB300_23:                             // %"$25"
	mov	x19, x0
.LBB300_24:                             // %"$25"
	ldp	w9, w8, [x24, #8]
	bfi	x9, x8, #32, #32
	str	x9, [x23, :lo12:env]
	mov	x0, x19
	mov	sp, x29
	ldp	x20, x19, [sp, #48]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #32]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #64             // 16-byte Folded Reload
	ret
.LBB300_25:                             // %"$7"
	mov	x0, x19
	bl	numErr
.Lfunc_end300:
	.size	_struct, .Lfunc_end300-_struct
	.cfi_endproc
                                        // -- End function
	.globl	_lisp                           // -- Begin function _lisp
	.p2align	4
	.type	_lisp,@function
_lisp:                                  // @_lisp
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-48]!                // 8-byte Folded Spill
	stp	x22, x21, [sp, #16]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #32]             // 16-byte Folded Spill
	.cfi_def_cfa_offset 48
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w30, -48
	mov	x20, x0
	ldp	w19, w8, [x0, #8]
	bfi	x19, x8, #32, #32
	mov	x0, x19
	bl	evSym
	adrp	x21, gcData+32
	add	x21, x21, :lo12:gcData+32
	adrp	x22, cbFuns
	add	x22, x22, :lo12:cbFuns
	adrp	x8, gcData+408
	add	x8, x8, :lo12:gcData+408
.LBB301_1:                              // %"$2"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w10, w9, [x21]
	bfi	x10, x9, #32, #32
	cmp	x0, x10
	b.eq	.LBB301_8
// %bb.2:                               // %"$3"
                                        //   in Loop: Header=BB301_1 Depth=1
	add	x21, x21, #16                   // =16
	add	x22, x22, #8                    // =8
	cmp	x21, x8
	b.ls	.LBB301_1
// %bb.3:                               // %"$6"
	adrp	x21, gcData+32
	add	x21, x21, :lo12:gcData+32
	adrp	x22, cbFuns
	add	x22, x22, :lo12:cbFuns
	adrp	x9, SymTab+8
	add	x9, x9, :lo12:SymTab+8
.LBB301_4:                              // %"$7"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w11, w10, [x21, #8]
	bfi	x11, x10, #32, #32
	cmp	x11, x9
	b.eq	.LBB301_7
// %bb.5:                               // %"$8"
                                        //   in Loop: Header=BB301_4 Depth=1
	add	x21, x21, #16                   // =16
	add	x22, x22, #8                    // =8
	cmp	x21, x8
	b.ls	.LBB301_4
// %bb.6:                               // %"$10"
	adrp	x2, .L$197
	add	x2, x2, :lo12:.L$197
	mov	x0, x20
	mov	x1, xzr
	mov	x3, xzr
	bl	err
.LBB301_7:                              // %"$9"
	lsr	x8, x0, #32
	stp	w0, w8, [x21]
.LBB301_8:                              // %"$4"
	ldp	w9, w8, [x19, #8]
	bfi	x9, x8, #32, #32
	ldp	w0, w8, [x9]
	bfi	x0, x8, #32, #32
	tst	x0, #0x6
	b.ne	.LBB301_12
// %bb.9:                               // %"$13"
	tbz	w0, #3, .LBB301_11
// %bb.10:                              // %"$16"
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB301_12
.LBB301_11:                             // %"$15"
	bl	evList
.LBB301_12:                             // %"$12"
	lsr	x8, x0, #32
	stp	w0, w8, [x21, #8]
	ldr	x8, [x22]
	tst	x8, #0xf000000000000000
	b.eq	.LBB301_14
// %bb.13:                              // %"$17"
	mov	x0, x8
	bl	boxNum
	b	.LBB301_15
.LBB301_14:                             // %"$18"
	mov	w0, #2
	bfi	x0, x8, #4, #60
.LBB301_15:                             // %"$19"
	ldp	x20, x19, [sp, #32]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #16]             // 16-byte Folded Reload
	ldr	x30, [sp], #48                  // 8-byte Folded Reload
	ret
.Lfunc_end301:
	.size	_lisp, .Lfunc_end301-_lisp
	.cfi_endproc
                                        // -- End function
	.globl	_adr                            // -- Begin function _adr
	.p2align	4
	.type	_adr,@function
_adr:                                   // @_adr
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w0, w8, [x9]
	bfi	x0, x8, #32, #32
	tst	x0, #0x6
	b.ne	.LBB302_3
// %bb.1:                               // %"$4"
	tbz	w0, #3, .LBB302_5
// %bb.2:                               // %"$7"
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
.LBB302_3:                              // %"$3"
	tbz	w0, #1, .LBB302_6
.LBB302_4:                              // %"$9"
	lsr	x8, x0, #4
	b	.LBB302_11
.LBB302_5:                              // %"$6"
	bl	evList
	tbnz	w0, #1, .LBB302_4
.LBB302_6:                              // %"$8"
	tbz	w0, #2, .LBB302_8
// %bb.7:                               // %"$11"
	ldp	w8, w9, [x0, #-4]
	bfi	x8, x9, #32, #32
	b	.LBB302_11
.LBB302_8:                              // %"$10"
	tst	x0, #0xf000000000000000
	b.eq	.LBB302_10
// %bb.9:                               // %"$12"
	bl	boxNum
	mov	x8, x0
	b	.LBB302_11
.LBB302_10:                             // %"$13"
	mov	w8, #2
	bfi	x8, x0, #4, #60
.LBB302_11:                             // %"$2"
	mov	x0, x8
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end302:
	.size	_adr, .Lfunc_end302-_adr
	.cfi_endproc
                                        // -- End function
	.globl	_kern                           // -- Begin function _kern
	.p2align	4
	.type	_kern,@function
_kern:                                  // @_kern
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	bl	loadKern
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end303:
	.size	_kern, .Lfunc_end303-_kern
	.cfi_endproc
                                        // -- End function
	.globl	_wfi                            // -- Begin function _wfi
	.p2align	4
	.type	_wfi,@function
_wfi:                                   // @_wfi
	.cfi_startproc
// %bb.0:                               // %"$1"
	//APP
	wfi
	//NO_APP
	adrp	x0, SymTab+8
	add	x0, x0, :lo12:SymTab+8
	ret
.Lfunc_end304:
	.size	_wfi, .Lfunc_end304-_wfi
	.cfi_endproc
                                        // -- End function
	.globl	_wfe                            // -- Begin function _wfe
	.p2align	4
	.type	_wfe,@function
_wfe:                                   // @_wfe
	.cfi_startproc
// %bb.0:                               // %"$1"
	//APP
	wfe
	//NO_APP
	adrp	x0, SymTab+8
	add	x0, x0, :lo12:SymTab+8
	ret
.Lfunc_end305:
	.size	_wfe, .Lfunc_end305-_wfe
	.cfi_endproc
                                        // -- End function
	.globl	_daif                           // -- Begin function _daif
	.p2align	4
	.type	_daif,@function
_daif:                                  // @_daif
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w0, w8, [x9]
	bfi	x0, x8, #32, #32
	tst	x0, #0x6
	b.ne	.LBB306_4
// %bb.1:                               // %"$3"
	tbz	w0, #3, .LBB306_3
// %bb.2:                               // %"$6"
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB306_4
.LBB306_3:                              // %"$5"
	bl	evList
.LBB306_4:                              // %"$2"
	adrp	x8, SymTab+8
	add	x8, x8, :lo12:SymTab+8
	cmp	x0, x8
	b.ne	.LBB306_6
// %bb.5:                               // %"$7"
	//APP
	msr	DAIFSet, #2
	//NO_APP
	adrp	x0, SymTab+8
	add	x0, x0, :lo12:SymTab+8
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.LBB306_6:                              // %"$8"
	//APP
	msr	DAIFClr, #2
	//NO_APP
	adrp	x0, SymTab+216
	add	x0, x0, :lo12:SymTab+216
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end306:
	.size	_daif, .Lfunc_end306-_daif
	.cfi_endproc
                                        // -- End function
	.globl	"_cnt-frq"                      // -- Begin function _cnt-frq
	.p2align	4
	.type	"_cnt-frq",@function
"_cnt-frq":                             // @_cnt-frq
	.cfi_startproc
// %bb.0:                               // %"$1"
	//APP
	mrs	x8, CNTFRQ_EL0
	//NO_APP
	mov	w0, #2
	bfi	x0, x8, #4, #60
	ret
.Lfunc_end307:
	.size	"_cnt-frq", .Lfunc_end307-"_cnt-frq"
	.cfi_endproc
                                        // -- End function
	.globl	"_cntv-ctl"                     // -- Begin function _cntv-ctl
	.p2align	4
	.type	"_cntv-ctl",@function
"_cntv-ctl":                            // @_cntv-ctl
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	ldp	w1, w8, [x0, #8]
	bfi	x1, x8, #32, #32
	tst	x1, #0xf
	b.eq	.LBB308_2
// %bb.1:                               // %"$2"
	//APP
	mrs	x0, CNTV_CTL_EL0
	//NO_APP
	b	.LBB308_3
.LBB308_2:                              // %"$3"
	bl	evCnt
	//APP
	msr	CNTV_CTL_EL0, x0
	//NO_APP
.LBB308_3:                              // %"$4"
	mov	w8, #2
	bfi	x8, x0, #4, #60
	mov	x0, x8
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end308:
	.size	"_cntv-ctl", .Lfunc_end308-"_cntv-ctl"
	.cfi_endproc
                                        // -- End function
	.globl	"_cntv-cval"                    // -- Begin function _cntv-cval
	.p2align	4
	.type	"_cntv-cval",@function
"_cntv-cval":                           // @_cntv-cval
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	ldp	w1, w8, [x0, #8]
	bfi	x1, x8, #32, #32
	tst	x1, #0xf
	b.eq	.LBB309_2
// %bb.1:                               // %"$2"
	//APP
	mrs	x0, CNTV_CVAL_EL0
	//NO_APP
	b	.LBB309_3
.LBB309_2:                              // %"$3"
	bl	evCnt
	//APP
	msr	CNTV_CVAL_EL0, x0
	//NO_APP
.LBB309_3:                              // %"$4"
	mov	w8, #2
	bfi	x8, x0, #4, #60
	mov	x0, x8
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end309:
	.size	"_cntv-cval", .Lfunc_end309-"_cntv-cval"
	.cfi_endproc
                                        // -- End function
	.globl	"_cntv-tval"                    // -- Begin function _cntv-tval
	.p2align	4
	.type	"_cntv-tval",@function
"_cntv-tval":                           // @_cntv-tval
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	ldp	w1, w8, [x0, #8]
	bfi	x1, x8, #32, #32
	tst	x1, #0xf
	b.eq	.LBB310_2
// %bb.1:                               // %"$2"
	//APP
	mrs	x0, CNTV_TVAL_EL0
	//NO_APP
	b	.LBB310_3
.LBB310_2:                              // %"$3"
	bl	evCnt
	//APP
	msr	CNTV_TVAL_EL0, x0
	//NO_APP
.LBB310_3:                              // %"$4"
	mov	w8, #2
	bfi	x8, x0, #4, #60
	mov	x0, x8
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end310:
	.size	"_cntv-tval", .Lfunc_end310-"_cntv-tval"
	.cfi_endproc
                                        // -- End function
	.globl	_cntvct                         // -- Begin function _cntvct
	.p2align	4
	.type	_cntvct,@function
_cntvct:                                // @_cntvct
	.cfi_startproc
// %bb.0:                               // %"$1"
	//APP
	mrs	x8, CNTVCT_EL0
	//NO_APP
	mov	w0, #2
	bfi	x0, x8, #4, #60
	ret
.Lfunc_end311:
	.size	_cntvct, .Lfunc_end311-_cntvct
	.cfi_endproc
                                        // -- End function
	.globl	"_cntp-ctl"                     // -- Begin function _cntp-ctl
	.p2align	4
	.type	"_cntp-ctl",@function
"_cntp-ctl":                            // @_cntp-ctl
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	ldp	w1, w8, [x0, #8]
	bfi	x1, x8, #32, #32
	tst	x1, #0xf
	b.eq	.LBB312_2
// %bb.1:                               // %"$2"
	//APP
	mrs	x0, CNTP_CTL_EL0
	//NO_APP
	b	.LBB312_3
.LBB312_2:                              // %"$3"
	bl	evCnt
	//APP
	msr	CNTP_CTL_EL0, x0
	//NO_APP
.LBB312_3:                              // %"$4"
	mov	w8, #2
	bfi	x8, x0, #4, #60
	mov	x0, x8
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end312:
	.size	"_cntp-ctl", .Lfunc_end312-"_cntp-ctl"
	.cfi_endproc
                                        // -- End function
	.globl	"_cntp-cval"                    // -- Begin function _cntp-cval
	.p2align	4
	.type	"_cntp-cval",@function
"_cntp-cval":                           // @_cntp-cval
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	ldp	w1, w8, [x0, #8]
	bfi	x1, x8, #32, #32
	tst	x1, #0xf
	b.eq	.LBB313_2
// %bb.1:                               // %"$2"
	//APP
	mrs	x0, CNTP_CVAL_EL0
	//NO_APP
	b	.LBB313_3
.LBB313_2:                              // %"$3"
	bl	evCnt
	//APP
	msr	CNTP_CVAL_EL0, x0
	//NO_APP
.LBB313_3:                              // %"$4"
	mov	w8, #2
	bfi	x8, x0, #4, #60
	mov	x0, x8
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end313:
	.size	"_cntp-cval", .Lfunc_end313-"_cntp-cval"
	.cfi_endproc
                                        // -- End function
	.globl	"_cntp-tval"                    // -- Begin function _cntp-tval
	.p2align	4
	.type	"_cntp-tval",@function
"_cntp-tval":                           // @_cntp-tval
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	ldp	w1, w8, [x0, #8]
	bfi	x1, x8, #32, #32
	tst	x1, #0xf
	b.eq	.LBB314_2
// %bb.1:                               // %"$2"
	//APP
	mrs	x0, CNTP_TVAL_EL0
	//NO_APP
	b	.LBB314_3
.LBB314_2:                              // %"$3"
	bl	evCnt
	//APP
	msr	CNTP_TVAL_EL0, x0
	//NO_APP
.LBB314_3:                              // %"$4"
	mov	w8, #2
	bfi	x8, x0, #4, #60
	mov	x0, x8
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end314:
	.size	"_cntp-tval", .Lfunc_end314-"_cntp-tval"
	.cfi_endproc
                                        // -- End function
	.globl	_cntpct                         // -- Begin function _cntpct
	.p2align	4
	.type	_cntpct,@function
_cntpct:                                // @_cntpct
	.cfi_startproc
// %bb.0:                               // %"$1"
	//APP
	mrs	x8, CNTPCT_EL0
	//NO_APP
	mov	w0, #2
	bfi	x0, x8, #4, #60
	ret
.Lfunc_end315:
	.size	_cntpct, .Lfunc_end315-_cntpct
	.cfi_endproc
                                        // -- End function
	.globl	_version                        // -- Begin function _version
	.p2align	4
	.type	_version,@function
_version:                               // @_version
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x30, x21, [sp, #-32]!           // 16-byte Folded Spill
	stp	x20, x19, [sp, #16]             // 16-byte Folded Spill
	.cfi_def_cfa_offset 32
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w30, -32
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w0, w8, [x9]
	bfi	x0, x8, #32, #32
	tst	x0, #0x6
	b.ne	.LBB316_4
// %bb.1:                               // %"$3"
	tbz	w0, #3, .LBB316_3
// %bb.2:                               // %"$6"
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB316_4
.LBB316_3:                              // %"$5"
	bl	evList
.LBB316_4:                              // %"$2"
	adrp	x8, SymTab+8
	add	x8, x8, :lo12:SymTab+8
	cmp	x0, x8
	adrp	x21, ($Version)
	add	x21, x21, :lo12:($Version)
	b.ne	.LBB316_6
// %bb.5:                               // %"$7"
	ldr	x8, [x21]
	lsr	x0, x8, #4
	bl	outWord
	adrp	x19, ($Put)
	ldr	x8, [x19, :lo12:($Put)]
	mov	w0, #46
	blr	x8
	ldr	x8, [x21, #8]
	lsr	x0, x8, #4
	bl	outWord
	ldr	x8, [x19, :lo12:($Put)]
	mov	w0, #46
	blr	x8
	ldr	x8, [x21, #16]
	lsr	x0, x8, #4
	bl	outWord
	bl	newline
.LBB316_6:                              // %"$8"
	ldp	x19, x20, [x21]
	ldr	x0, [x21, #16]
	adrp	x1, SymTab+8
	add	x1, x1, :lo12:SymTab+8
	bl	cons
	mov	x1, x0
	mov	x0, x20
	bl	cons
	mov	x1, x0
	mov	x0, x19
	bl	cons
	ldp	x20, x19, [sp, #16]             // 16-byte Folded Reload
	ldp	x30, x21, [sp], #32             // 16-byte Folded Reload
	ret
.Lfunc_end316:
	.size	_version, .Lfunc_end316-_version
	.cfi_endproc
                                        // -- End function
	.globl	evList                          // -- Begin function evList
	.p2align	4
	.type	evList,@function
evList:                                 // @evList
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-64]!           // 16-byte Folded Spill
	stp	x24, x23, [sp, #16]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #32]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #48]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 64
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w30, -56
	.cfi_offset w29, -64
	mov	x19, x0
	ldp	w20, w8, [x0]
	bfi	x20, x8, #32, #32
	tst	x20, #0x6
	b.ne	.LBB317_25
// %bb.1:                               // %"$3"
	tbz	w20, #3, .LBB317_10
// %bb.2:                               // %"$7.preheader"
	adrp	x22, ($Signal)
.LBB317_3:                              // %"$7"
                                        // =>This Inner Loop Header: Depth=1
	mov	x21, x20
	ldr	w8, [x22, :lo12:($Signal)]
	cbz	w8, .LBB317_5
// %bb.4:                               // %"$8"
                                        //   in Loop: Header=BB317_3 Depth=1
	mov	x0, x19
	bl	sighandler
.LBB317_5:                              // %"$9"
                                        //   in Loop: Header=BB317_3 Depth=1
	ldp	w20, w8, [x21]
	bfi	x20, x8, #32, #32
	tst	x20, #0x6
	b.ne	.LBB317_19
// %bb.6:                               // %"$10"
                                        //   in Loop: Header=BB317_3 Depth=1
	tst	x20, #0xf
	b.eq	.LBB317_22
// %bb.7:                               // %"$13"
                                        //   in Loop: Header=BB317_3 Depth=1
	ldp	w9, w8, [x20]
	bfi	x9, x8, #32, #32
	cmp	x20, x9
	b.ne	.LBB317_3
// %bb.8:                               // %"$16"
	mov	x0, x21
	bl	sharedLib
	tbz	w0, #0, .LBB317_27
// %bb.9:                               // %"$17"
	ldp	w9, w8, [x21]
	bfi	x9, x8, #32, #32
	and	x8, x9, #0xfffffffffffffffd
	b	.LBB317_20
.LBB317_10:                             // %"$5"
	mov	x8, sp
	adrp	x9, ($StkLimit)
	ldr	x9, [x9, :lo12:($StkLimit)]
	cmp	x9, x8
	b.hi	.LBB317_26
// %bb.11:                              // %"$21"
	mov	x0, x20
	bl	evList
	adrp	x22, env
	ldr	x8, [x22, :lo12:env]
	mov	x9, sp
	sub	x23, x9, #16                    // =16
	mov	sp, x23
	lsr	x10, x0, #32
	lsr	x11, x8, #32
	stp	w0, w10, [x9, #-16]
	stp	w8, w11, [x9, #-8]
	adrp	x24, ($Signal)
	str	x23, [x22, :lo12:env]
.LBB317_12:                             // %"$22"
                                        // =>This Inner Loop Header: Depth=1
	mov	x21, x0
	ldr	w8, [x24, :lo12:($Signal)]
	cbz	w8, .LBB317_14
// %bb.13:                              // %"$23"
                                        //   in Loop: Header=BB317_12 Depth=1
	mov	x0, x19
	bl	sighandler
.LBB317_14:                             // %"$24"
                                        //   in Loop: Header=BB317_12 Depth=1
	tst	x21, #0x6
	b.ne	.LBB317_21
// %bb.15:                              // %"$25"
                                        //   in Loop: Header=BB317_12 Depth=1
	tst	x21, #0xf
	b.eq	.LBB317_23
// %bb.16:                              // %"$28"
                                        //   in Loop: Header=BB317_12 Depth=1
	ldp	w0, w8, [x21]
	bfi	x0, x8, #32, #32
	ldp	w9, w8, [x0]
	bfi	x9, x8, #32, #32
	cmp	x0, x9
	mov	x20, x21
	b.ne	.LBB317_12
// %bb.17:                              // %"$31"
	mov	x0, x21
	bl	sharedLib
	tbz	w0, #0, .LBB317_27
// %bb.18:                              // %"$32"
	ldp	w9, w8, [x21]
	bfi	x9, x8, #32, #32
	and	x8, x9, #0xfffffffffffffffd
	mov	x0, x19
	mov	x1, x21
	blr	x8
	b	.LBB317_24
.LBB317_19:                             // %"$12"
	and	x8, x20, #0xfffffffffffffffd
.LBB317_20:                             // %"$2"
	mov	x0, x19
	mov	x1, x21
	blr	x8
	mov	x19, x0
	b	.LBB317_25
.LBB317_21:                             // %"$27"
	and	x8, x21, #0xfffffffffffffffd
	mov	x0, x19
	mov	x1, x20
	blr	x8
	b	.LBB317_24
.LBB317_22:                             // %"$14"
	mov	x0, x20
	mov	x1, x19
	bl	evExpr
	mov	x19, x0
	b	.LBB317_25
.LBB317_23:                             // %"$29"
	mov	x0, x21
	mov	x1, x19
	bl	evExpr
.LBB317_24:                             // %"$26"
	mov	x19, x0
	ldp	w9, w8, [x23, #8]
	bfi	x9, x8, #32, #32
	str	x9, [x22, :lo12:env]
.LBB317_25:                             // %"$2"
	mov	x0, x19
	mov	sp, x29
	ldp	x20, x19, [sp, #48]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #32]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #64             // 16-byte Folded Reload
	ret
.LBB317_26:                             // %"$20"
	mov	x0, x19
	bl	stkErr
.LBB317_27:                             // %"$18"
	mov	x0, x21
	mov	x1, x19
	bl	undefined
.Lfunc_end317:
	.size	evList, .Lfunc_end317-evList
	.cfi_endproc
                                        // -- End function
	.globl	outWord                         // -- Begin function outWord
	.p2align	4
	.type	outWord,@function
outWord:                                // @outWord
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-32]!                // 8-byte Folded Spill
	stp	x20, x19, [sp, #16]             // 16-byte Folded Spill
	.cfi_def_cfa_offset 32
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w30, -32
	mov	x19, x0
	cmp	x0, #10                         // =10
	b.lo	.LBB318_2
// %bb.1:                               // %"$2"
	mov	x8, #-3689348814741910324
	movk	x8, #52429
	umulh	x8, x19, x8
	lsr	x20, x8, #3
	mov	x0, x20
	bl	outWord
	mov	w8, #10
	msub	x19, x20, x8, x19
.LBB318_2:                              // %"$3"
	add	w0, w19, #48                    // =48
	adrp	x8, ($Put)
	ldr	x8, [x8, :lo12:($Put)]
	blr	x8
	ldp	x20, x19, [sp, #16]             // 16-byte Folded Reload
	ldr	x30, [sp], #32                  // 8-byte Folded Reload
	ret
.Lfunc_end318:
	.size	outWord, .Lfunc_end318-outWord
	.cfi_endproc
                                        // -- End function
	.globl	newline                         // -- Begin function newline
	.p2align	4
	.type	newline,@function
newline:                                // @newline
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	adrp	x8, ($Put)
	ldr	x8, [x8, :lo12:($Put)]
	mov	w0, #10
	blr	x8
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end319:
	.size	newline, .Lfunc_end319-newline
	.cfi_endproc
                                        // -- End function
	.globl	cons                            // -- Begin function cons
	.p2align	4
	.type	cons,@function
cons:                                   // @cons
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-80]!           // 16-byte Folded Spill
	str	x25, [sp, #16]                  // 8-byte Folded Spill
	stp	x24, x23, [sp, #32]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #48]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #64]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 80
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -64
	.cfi_offset w30, -72
	.cfi_offset w29, -80
	mov	x19, x1
	mov	x20, x0
	adrp	x22, ($Avail)
	ldr	x0, [x22, :lo12:($Avail)]
	lsr	x23, x20, #32
	lsr	x21, x1, #32
	cbnz	x0, .LBB320_2
// %bb.1:                               // %"$2"
	adrp	x24, env
	ldr	x8, [x24, :lo12:env]
	mov	x9, sp
	sub	x10, x9, #16                    // =16
	mov	sp, x10
	stp	w20, w23, [x9, #-16]
	mov	x25, x10
	str	w8, [x25, #8]!
	lsr	x8, x8, #32
	str	w8, [x25, #4]
	mov	x8, sp
	sub	x9, x8, #16                     // =16
	mov	sp, x9
	stp	w19, w21, [x8, #-16]
	lsr	x11, x10, #32
	stp	w10, w11, [x8, #-8]
	str	x9, [x24, :lo12:env]
	bl	gc
	ldp	w9, w8, [x25]
	bfi	x9, x8, #32, #32
	str	x9, [x24, :lo12:env]
	ldr	x0, [x22, :lo12:($Avail)]
.LBB320_2:                              // %"$3"
	ldp	w9, w8, [x0]
	bfi	x9, x8, #32, #32
	str	x9, [x22, :lo12:($Avail)]
	stp	w20, w23, [x0]
	stp	w19, w21, [x0, #8]
	mov	sp, x29
	ldp	x20, x19, [sp, #64]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #48]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #32]             // 16-byte Folded Reload
	ldr	x25, [sp, #16]                  // 8-byte Folded Reload
	ldp	x29, x30, [sp], #80             // 16-byte Folded Reload
	ret
.Lfunc_end320:
	.size	cons, .Lfunc_end320-cons
	.cfi_endproc
                                        // -- End function
	.globl	gc                              // -- Begin function gc
	.p2align	4
	.type	gc,@function
gc:                                     // @gc
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x30, x25, [sp, #-64]!           // 16-byte Folded Spill
	stp	x24, x23, [sp, #16]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #32]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #48]             // 16-byte Folded Spill
	.cfi_def_cfa_offset 64
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w30, -64
	adrp	x20, SymTab+8
	add	x20, x20, :lo12:SymTab+8
	mov	w8, #10
	str	x8, [x20, #160]
	ldr	x8, [x20]
	orr	x8, x8, #0x1
	str	x8, [x20]
	add	x8, x20, #32                    // =32
	adrp	x9, SymTab+5928
	add	x9, x9, :lo12:SymTab+5928
.LBB321_1:                              // %"$2"
                                        // =>This Inner Loop Header: Depth=1
	ldr	w10, [x8]
	orr	w10, w10, #0x1
	str	w10, [x8]
	cmp	x9, x8
	b.eq	.LBB321_3
// %bb.2:                               // %"$3"
                                        //   in Loop: Header=BB321_1 Depth=1
	add	x8, x8, #16                     // =16
	b	.LBB321_1
.LBB321_3:                              // %"$4"
	adrp	x19, ($Heaps)
	ldr	x8, [x19, :lo12:($Heaps)]
	mov	w9, #65536
.LBB321_4:                              // %"$6"
                                        // =>This Inner Loop Header: Depth=1
	ldr	w10, [x8, #8]!
	orr	w10, w10, #0x1
	str	w10, [x8], #8
	subs	x9, x9, #1                      // =1
	b.ne	.LBB321_4
// %bb.5:                               // %"$8"
                                        //   in Loop: Header=BB321_4 Depth=1
	ldp	w8, w9, [x8]
	bfi	x8, x9, #32, #32
	mov	w9, #65536
	cbnz	x8, .LBB321_4
// %bb.6:                               // %"$10"
	adrp	x21, gcData
	add	x21, x21, :lo12:gcData
	adrp	x22, gcData+408
	add	x22, x22, :lo12:gcData+408
.LBB321_7:                              // %"$11"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w0, w8, [x21]
	bfi	x0, x8, #32, #32
	bl	mark
	cmp	x22, x21
	b.eq	.LBB321_9
// %bb.8:                               // %"$12"
                                        //   in Loop: Header=BB321_7 Depth=1
	add	x21, x21, #8                    // =8
	b	.LBB321_7
.LBB321_9:                              // %"$13"
	adrp	x21, env
	add	x21, x21, :lo12:env
	ldr	x0, [x21, #88]
	bl	mark
.LBB321_10:                             // %"$14"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w21, w8, [x21]
	bfi	x21, x8, #32, #32
	cbz	x21, .LBB321_12
// %bb.11:                              // %"$15"
                                        //   in Loop: Header=BB321_10 Depth=1
	ldp	w0, w8, [x21], #8
	bfi	x0, x8, #32, #32
	bl	mark
	b	.LBB321_10
.LBB321_12:                             // %"$16"
	adrp	x8, env+8
	add	x8, x8, :lo12:env+8
.LBB321_13:                             // %"$17"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w21, w9, [x8]
	bfi	x21, x9, #32, #32
	cbz	x21, .LBB321_15
// %bb.14:                              // %"$18"
                                        //   in Loop: Header=BB321_13 Depth=1
	ldp	w0, w8, [x21]
	bfi	x0, x8, #32, #32
	bl	mark
	ldp	w0, w8, [x21, #8]
	bfi	x0, x8, #32, #32
	bl	mark
	add	x8, x21, #16                    // =16
	b	.LBB321_13
.LBB321_15:                             // %"$20.preheader"
	adrp	x21, env+24
	add	x21, x21, :lo12:env+24
	b	.LBB321_17
.LBB321_16:                             // %"$24"
                                        //   in Loop: Header=BB321_17 Depth=1
	ldp	w0, w8, [x21, #16]
	bfi	x0, x8, #32, #32
	bl	mark
	ldp	w0, w8, [x21, #112]
	bfi	x0, x8, #32, #32
	bl	mark
.LBB321_17:                             // %"$20"
                                        // =>This Inner Loop Header: Depth=1
	ldr	x21, [x21]
	cbz	x21, .LBB321_20
// %bb.18:                              // %"$21"
                                        //   in Loop: Header=BB321_17 Depth=1
	ldp	w9, w8, [x21, #8]
	bfi	x9, x8, #32, #32
	cbz	x9, .LBB321_16
// %bb.19:                              // %"$23"
                                        //   in Loop: Header=BB321_17 Depth=1
	ldp	w0, w8, [x21, #8]
	bfi	x0, x8, #32, #32
	bl	mark
	b	.LBB321_16
.LBB321_20:                             // %"$25.preheader"
	adrp	x8, env+40
	add	x8, x8, :lo12:env+40
	b	.LBB321_22
.LBB321_21:                             // %"$31"
                                        //   in Loop: Header=BB321_22 Depth=1
	add	x8, x21, #16                    // =16
.LBB321_22:                             // %"$25"
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB321_27 Depth 2
                                        //     Child Loop BB321_30 Depth 2
                                        //     Child Loop BB321_34 Depth 2
	ldr	x21, [x8]
	cbz	x21, .LBB321_37
// %bb.23:                              // %"$26"
                                        //   in Loop: Header=BB321_22 Depth=1
	ldp	w9, w8, [x21]
	bfi	x9, x8, #32, #32
	cbz	x9, .LBB321_25
// %bb.24:                              // %"$29"
                                        //   in Loop: Header=BB321_22 Depth=1
	ldp	w9, w8, [x21, #48]
	bfi	x9, x8, #32, #32
	cmp	x9, #0                          // =0
	cset	w8, ne
	cbz	w8, .LBB321_21
	b	.LBB321_26
.LBB321_25:                             //   in Loop: Header=BB321_22 Depth=1
	mov	w8, wzr
	cbz	w8, .LBB321_21
.LBB321_26:                             // %"$30"
                                        //   in Loop: Header=BB321_22 Depth=1
	ldp	w0, w8, [x21]
	bfi	x0, x8, #32, #32
	bl	mark
	ldp	w0, w8, [x21, #32]
	bfi	x0, x8, #32, #32
	bl	mark
	ldp	w0, w8, [x21, #48]
	bfi	x0, x8, #32, #32
	bl	mark
	add	x22, x21, #112                  // =112
	ldp	w0, w8, [x21, #200]
	bfi	x0, x8, #32, #32
	bl	mark
.LBB321_27:                             // %"$32"
                                        //   Parent Loop BB321_22 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	w22, w8, [x22]
	bfi	x22, x8, #32, #32
	cbz	x22, .LBB321_29
// %bb.28:                              // %"$33"
                                        //   in Loop: Header=BB321_27 Depth=2
	ldp	w0, w8, [x22], #8
	bfi	x0, x8, #32, #32
	bl	mark
	b	.LBB321_27
.LBB321_29:                             // %"$34"
                                        //   in Loop: Header=BB321_22 Depth=1
	add	x8, x21, #120                   // =120
.LBB321_30:                             // %"$35"
                                        //   Parent Loop BB321_22 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	w22, w9, [x8]
	bfi	x22, x9, #32, #32
	cbz	x22, .LBB321_32
// %bb.31:                              // %"$36"
                                        //   in Loop: Header=BB321_30 Depth=2
	ldp	w0, w8, [x22]
	bfi	x0, x8, #32, #32
	bl	mark
	ldp	w0, w8, [x22, #8]
	bfi	x0, x8, #32, #32
	bl	mark
	add	x8, x22, #16                    // =16
	b	.LBB321_30
.LBB321_32:                             // %"$37"
                                        //   in Loop: Header=BB321_22 Depth=1
	add	x22, x21, #136                  // =136
	b	.LBB321_34
.LBB321_33:                             // %"$42"
                                        //   in Loop: Header=BB321_34 Depth=2
	ldp	w0, w8, [x22, #16]
	bfi	x0, x8, #32, #32
	bl	mark
	ldp	w0, w8, [x22, #112]
	bfi	x0, x8, #32, #32
	bl	mark
.LBB321_34:                             // %"$38"
                                        //   Parent Loop BB321_22 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	x22, [x22]
	cbz	x22, .LBB321_21
// %bb.35:                              // %"$39"
                                        //   in Loop: Header=BB321_34 Depth=2
	ldp	w9, w8, [x22, #8]
	bfi	x9, x8, #32, #32
	cbz	x9, .LBB321_33
// %bb.36:                              // %"$41"
                                        //   in Loop: Header=BB321_34 Depth=2
	ldp	w0, w8, [x22, #8]
	bfi	x0, x8, #32, #32
	bl	mark
	b	.LBB321_33
.LBB321_37:                             // %"$27"
	mov	x24, xzr
	adrp	x21, ($Extern)
	ldr	x23, [x21, :lo12:($Extern)]
	mov	x22, #-10
.LBB321_38:                             // %"$44"
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB321_39 Depth 2
                                        //       Child Loop BB321_49 Depth 3
                                        //       Child Loop BB321_45 Depth 3
	mov	x9, x23
	ldr	w8, [x9, #8]!
	ldr	w10, [x9, #4]
	bfi	x8, x10, #32, #32
	and	x8, x8, #0xfffffffffffffffe
	str	w8, [x9]
	mov	x10, x8
	ldr	w11, [x10, #8]!
	ldr	w9, [x10, #4]
	bfi	x11, x9, #32, #32
	and	x9, x11, #0xfffffffffffffffe
	str	w9, [x10]
	tst	x11, #0xe
	b.eq	.LBB321_51
.LBB321_39:                             // %"$47"
                                        //   Parent Loop BB321_38 Depth=1
                                        // =>  This Loop Header: Depth=2
                                        //       Child Loop BB321_49 Depth 3
                                        //       Child Loop BB321_45 Depth 3
	ldp	w0, w8, [x23]
	bfi	x0, x8, #32, #32
	ldrb	w8, [x0]
	tbz	w8, #0, .LBB321_43
// %bb.40:                              // %"$48"
                                        //   in Loop: Header=BB321_39 Depth=2
	ldp	w8, w9, [x0, #-8]
	bfi	x8, x9, #32, #32
	tst	x8, #0x6
	b.eq	.LBB321_48
.LBB321_41:                             // %"$51"
                                        //   in Loop: Header=BB321_39 Depth=2
	cmn	x8, x8
	b.lo	.LBB321_43
// %bb.42:                              // %"$55"
                                        //   in Loop: Header=BB321_39 Depth=2
	bl	mark
.LBB321_43:                             // %"$49"
                                        //   in Loop: Header=BB321_39 Depth=2
	ldp	w8, w9, [x23, #8]
	bfi	x8, x9, #32, #32
	ldp	w9, w10, [x8]
	bfi	x9, x10, #32, #32
	tst	x9, #0xf
	b.eq	.LBB321_52
// %bb.44:                              //   in Loop: Header=BB321_39 Depth=2
	mov	x8, x24
	cbz	x8, .LBB321_53
.LBB321_45:                             // %"$62"
                                        //   Parent Loop BB321_38 Depth=1
                                        //     Parent Loop BB321_39 Depth=2
                                        // =>    This Inner Loop Header: Depth=3
	tbz	w8, #3, .LBB321_47
// %bb.46:                              // %"$63"
                                        //   in Loop: Header=BB321_45 Depth=3
	and	x9, x8, #0xfffffffffffffff7
	ldp	w10, w8, [x9, #8]
	bfi	x10, x8, #32, #32
	ldp	w8, w11, [x10]
	bfi	x8, x11, #32, #32
	lsr	x11, x23, #32
	stp	w23, w11, [x10]
	mov	x23, x9
	cbnz	x8, .LBB321_45
	b	.LBB321_53
.LBB321_47:                             // %"$65"
                                        //   in Loop: Header=BB321_39 Depth=2
	ldp	w10, w9, [x8, #8]
	bfi	x10, x9, #32, #32
	ldr	w24, [x10, #8]!
	ldr	w9, [x10, #4]
	bfi	x24, x9, #32, #32
	lsr	x9, x23, #32
	stp	w23, w9, [x10]
	mov	x23, x8
	b	.LBB321_39
.LBB321_48:                             // %"$50"
                                        //   in Loop: Header=BB321_39 Depth=2
	and	x8, x8, x22
.LBB321_49:                             // %"$52"
                                        //   Parent Loop BB321_38 Depth=1
                                        //     Parent Loop BB321_39 Depth=2
                                        // =>    This Inner Loop Header: Depth=3
	ldp	w8, w9, [x8, #8]
	bfi	x8, x9, #32, #32
	tst	x8, #0x6
	b.ne	.LBB321_41
// %bb.50:                              // %"$53"
                                        //   in Loop: Header=BB321_49 Depth=3
	and	x8, x8, #0xfffffffffffffffe
	b	.LBB321_49
.LBB321_51:                             // %"$45"
                                        //   in Loop: Header=BB321_38 Depth=1
	lsr	x10, x24, #32
	stp	w24, w10, [x8, #8]
	mov	x24, x23
	mov	x23, x9
	b	.LBB321_38
.LBB321_52:                             // %"$59"
                                        //   in Loop: Header=BB321_38 Depth=1
	lsr	x10, x24, #32
	stp	w24, w10, [x8]
	orr	x24, x23, #0x8
	mov	x23, x9
	b	.LBB321_38
.LBB321_53:                             // %"$-1"
	adrp	x8, SymTab+168
	adrp	x9, SymTab+168
	add	x9, x9, :lo12:SymTab+168
	ldrb	w10, [x9, #176]!
	str	x9, [x8, :lo12:SymTab+168]
	tbz	w10, #0, .LBB321_55
// %bb.54:                              // %"$67"
	mov	w8, #26
	stp	x8, x20, [x20, #328]
.LBB321_55:                             // %"$68"
	mov	x10, xzr
	ldr	x9, [x21, :lo12:($Extern)]
	adrp	x8, ($ExtCnt)
.LBB321_56:                             // %"$70"
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB321_57 Depth 2
                                        //       Child Loop BB321_67 Depth 3
                                        //       Child Loop BB321_71 Depth 3
	ldp	w11, w12, [x9, #8]
	bfi	x11, x12, #32, #32
	ldp	w12, w13, [x11, #8]
	bfi	x12, x13, #32, #32
	tst	x12, #0xf
	b.eq	.LBB321_74
.LBB321_57:                             // %"$73"
                                        //   Parent Loop BB321_56 Depth=1
                                        // =>  This Loop Header: Depth=2
                                        //       Child Loop BB321_67 Depth 3
                                        //       Child Loop BB321_71 Depth 3
	ldp	w12, w11, [x9]
	bfi	x12, x11, #32, #32
	ldrb	w11, [x12]
	tbz	w11, #0, .LBB321_69
// %bb.58:                              // %"$74"
                                        //   in Loop: Header=BB321_57 Depth=2
	ldr	x11, [x8, :lo12:($ExtCnt)]
	sub	x11, x11, #1                    // =1
	str	x11, [x8, :lo12:($ExtCnt)]
	ldp	w11, w12, [x9, #8]
	bfi	x11, x12, #32, #32
	tst	x11, #0xf
	b.eq	.LBB321_60
// %bb.59:                              //   in Loop: Header=BB321_57 Depth=2
	mov	x12, x11
	mov	x11, x9
	b	.LBB321_62
.LBB321_60:                             // %"$77"
                                        //   in Loop: Header=BB321_57 Depth=2
	ldrb	w12, [x11]
	tst	w12, #0xf
	b.eq	.LBB321_63
// %bb.61:                              // %"$78"
                                        //   in Loop: Header=BB321_57 Depth=2
	orr	w12, w11, #0x1
	lsr	x13, x11, #32
	stp	w12, w13, [x9, #8]
	ldp	w12, w9, [x11, #8]
	bfi	x12, x9, #32, #32
.LBB321_62:                             // %"$-4.sink.split"
                                        //   in Loop: Header=BB321_57 Depth=2
	orr	w9, w12, #0x1
	lsr	x13, x12, #32
	stp	w9, w13, [x11, #8]
	mov	x9, x12
	b	.LBB321_70
.LBB321_63:                             // %"$79"
                                        //   in Loop: Header=BB321_57 Depth=2
	ldrb	w12, [x11, #8]
	tst	w12, #0xf
	b.ne	.LBB321_76
// %bb.64:                              // %"$81"
                                        //   in Loop: Header=BB321_57 Depth=2
	ldp	w12, w13, [x11, #8]
	bfi	x12, x13, #32, #32
	ldp	w11, w13, [x12, #8]
	bfi	x11, x13, #32, #32
	ldrb	w13, [x11]
	tst	w13, #0xf
	b.eq	.LBB321_66
// %bb.65:                              // %"$82"
                                        //   in Loop: Header=BB321_57 Depth=2
	ldp	w13, w12, [x12]
	stp	w13, w12, [x9]
	ldp	w13, w12, [x9, #8]
	bfi	x13, x12, #32, #32
	ldp	w12, w11, [x11, #8]
	stp	w12, w11, [x13, #8]
	b	.LBB321_69
.LBB321_66:                             // %"$83"
                                        //   in Loop: Header=BB321_57 Depth=2
	ldp	w14, w13, [x11]
	bfi	x14, x13, #32, #32
.LBB321_67:                             // %"$84"
                                        //   Parent Loop BB321_56 Depth=1
                                        //     Parent Loop BB321_57 Depth=2
                                        // =>    This Inner Loop Header: Depth=3
	mov	x11, x14
	mov	x13, x12
	ldp	w14, w12, [x14, #8]
	bfi	x14, x12, #32, #32
	ldp	w14, w12, [x14]
	bfi	x14, x12, #32, #32
	tst	x14, #0xf
	mov	x12, x11
	b.eq	.LBB321_67
// %bb.68:                              // %"$87"
                                        //   in Loop: Header=BB321_57 Depth=2
	ldp	w12, w14, [x11]
	stp	w12, w14, [x9]
	ldp	w13, w12, [x13, #8]
	bfi	x13, x12, #32, #32
	ldp	w11, w12, [x11, #8]
	bfi	x11, x12, #32, #32
	ldp	w12, w11, [x11, #8]
	stp	w12, w11, [x13]
.LBB321_69:                             // %"$-3"
                                        //   in Loop: Header=BB321_57 Depth=2
	ldp	w11, w12, [x9, #8]
	bfi	x11, x12, #32, #32
	ldp	w12, w13, [x11]
	bfi	x12, x13, #32, #32
	tst	x12, #0xf
	b.eq	.LBB321_75
.LBB321_70:                             // %"$91.preheader"
                                        //   in Loop: Header=BB321_57 Depth=2
	mov	x11, x9
	mov	x9, x10
	cbz	x9, .LBB321_77
.LBB321_71:                             // %"$93"
                                        //   Parent Loop BB321_56 Depth=1
                                        //     Parent Loop BB321_57 Depth=2
                                        // =>    This Inner Loop Header: Depth=3
	tbz	w9, #3, .LBB321_73
// %bb.72:                              // %"$94"
                                        //   in Loop: Header=BB321_71 Depth=3
	and	x10, x9, #0xfffffffffffffff7
	ldp	w12, w9, [x10, #8]
	bfi	x12, x9, #32, #32
	ldp	w9, w13, [x12]
	bfi	x9, x13, #32, #32
	str	w11, [x12]
	lsr	x11, x11, #32
	str	w11, [x12, #4]
	mov	x11, x10
	cbnz	x9, .LBB321_71
	b	.LBB321_77
.LBB321_73:                             // %"$96"
                                        //   in Loop: Header=BB321_57 Depth=2
	ldp	w12, w10, [x9, #8]
	bfi	x12, x10, #32, #32
	ldr	w10, [x12, #8]!
	ldr	w13, [x12, #4]
	bfi	x10, x13, #32, #32
	str	w11, [x12]
	lsr	x11, x11, #32
	str	w11, [x12, #4]
	b	.LBB321_57
.LBB321_74:                             // %"$71"
                                        //   in Loop: Header=BB321_56 Depth=1
	lsr	x13, x10, #32
	stp	w10, w13, [x11, #8]
	mov	x10, x9
	mov	x9, x12
	b	.LBB321_56
.LBB321_75:                             // %"$90"
                                        //   in Loop: Header=BB321_56 Depth=1
	lsr	x13, x10, #32
	stp	w10, w13, [x11]
	orr	x10, x9, #0x8
	mov	x9, x12
	b	.LBB321_56
.LBB321_76:                             // %"$80"
                                        //   in Loop: Header=BB321_56 Depth=1
	orr	w12, w11, #0x1
	lsr	x13, x11, #32
	stp	w12, w13, [x9, #8]
	ldp	w9, w12, [x11]
	ldr	w13, [x11, #8]!
	bfi	x9, x12, #32, #32
	orr	w12, w13, #0x1
	str	w12, [x11]
	b	.LBB321_56
.LBB321_77:                             // %"$-5"
	str	x11, [x21, :lo12:($Extern)]
	ldr	x21, [x19, :lo12:($Heaps)]
	adrp	x8, ($GcCount)
	ldr	x19, [x8, :lo12:($GcCount)]
	cbz	x19, .LBB321_86
// %bb.78:                              // %"$112.preheader"
	mov	x8, xzr
	mov	w9, #1048560
	b	.LBB321_80
.LBB321_79:                             // %"$117"
                                        //   in Loop: Header=BB321_80 Depth=1
	add	x10, x21, #256, lsl #12         // =1048576
	ldp	w21, w11, [x10]
	bfi	x21, x11, #32, #32
	cbz	x21, .LBB321_84
.LBB321_80:                             // %"$112"
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB321_82 Depth 2
	add	x10, x21, x9
	ldrb	w11, [x10, #8]
	tbz	w11, #0, .LBB321_82
.LBB321_81:                             // %"$114"
                                        //   in Loop: Header=BB321_80 Depth=1
	lsr	x11, x8, #32
	stp	w8, w11, [x10]
	sub	x19, x19, #1                    // =1
	mov	x8, x10
.LBB321_82:                             // %"$115"
                                        //   Parent Loop BB321_80 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	cmp	x10, x21
	b.eq	.LBB321_79
// %bb.83:                              // %"$116"
                                        //   in Loop: Header=BB321_82 Depth=2
	sub	x10, x10, #16                   // =16
	ldrb	w11, [x10, #8]
	tbnz	w11, #0, .LBB321_81
	b	.LBB321_82
.LBB321_84:                             // %"$119"
	adrp	x9, ($Avail)
	str	x8, [x9, :lo12:($Avail)]
	tbnz	x19, #63, .LBB321_95
.LBB321_85:                             // %"$121"
                                        // =>This Inner Loop Header: Depth=1
	bl	heapAlloc
	sub	x19, x19, #16, lsl #12          // =65536
	tbz	x19, #63, .LBB321_85
	b	.LBB321_95
.LBB321_86:                             // %"$98"
	mov	x23, xzr
	adrp	x19, ($Heaps)
	add	x19, x19, :lo12:($Heaps)
	mov	w22, #1048560
	adrp	x20, .L$130
	add	x20, x20, :lo12:.L$130
	b	.LBB321_88
.LBB321_87:                             // %"$108"
                                        //   in Loop: Header=BB321_88 Depth=1
	add	x8, x21, #256, lsl #12          // =1048576
	ldp	w25, w24, [x8]
	mov	x21, x25
	bfi	x21, x24, #32, #32
	bl	newline
	mov	x0, x20
	bl	outString
	mov	x0, x19
	bl	outWord
	bl	newline
	stp	w25, w24, [x19]
	cbz	x21, .LBB321_94
.LBB321_88:                             // %"$101"
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB321_90 Depth 2
	add	x9, x21, x22
	mov	x8, x23
	mov	w10, #65536
	ldrb	w11, [x9, #8]
	tbz	w11, #0, .LBB321_90
.LBB321_89:                             // %"$103"
                                        //   in Loop: Header=BB321_88 Depth=1
	lsr	x11, x8, #32
	stp	w8, w11, [x9]
	sub	x10, x10, #1                    // =1
	mov	x8, x9
.LBB321_90:                             // %"$104"
                                        //   Parent Loop BB321_88 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	cmp	x9, x21
	b.eq	.LBB321_92
// %bb.91:                              // %"$105"
                                        //   in Loop: Header=BB321_90 Depth=2
	sub	x9, x9, #16                     // =16
	ldrb	w11, [x9, #8]
	tbnz	w11, #0, .LBB321_89
	b	.LBB321_90
.LBB321_92:                             // %"$106"
                                        //   in Loop: Header=BB321_88 Depth=1
	cbz	x10, .LBB321_87
// %bb.93:                              // %"$107"
                                        //   in Loop: Header=BB321_88 Depth=1
	add	x19, x21, #256, lsl #12         // =1048576
	ldp	w21, w9, [x19]
	bfi	x21, x9, #32, #32
	mov	x23, x8
	cbnz	x21, .LBB321_88
.LBB321_94:                             // %"$111"
	adrp	x8, ($Avail)
	str	x23, [x8, :lo12:($Avail)]
.LBB321_95:                             // %"$100"
	ldp	x20, x19, [sp, #48]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #32]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #16]             // 16-byte Folded Reload
	ldp	x30, x25, [sp], #64             // 16-byte Folded Reload
	ret
.Lfunc_end321:
	.size	gc, .Lfunc_end321-gc
	.cfi_endproc
                                        // -- End function
	.globl	mark                            // -- Begin function mark
	.p2align	4
	.type	mark,@function
mark:                                   // @mark
	.cfi_startproc
// %bb.0:                               // %"$1"
	mov	x8, xzr
.LBB322_1:                              // %"$3"
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB322_9 Depth 2
                                        //     Child Loop BB322_3 Depth 2
	mov	x9, x0
	tbnz	w9, #1, .LBB322_3
// %bb.2:                               // %"$4"
                                        //   in Loop: Header=BB322_1 Depth=1
	and	x10, x9, #0xfffffffffffffff0
	ldp	w12, w11, [x10, #8]
	bfi	x12, x11, #32, #32
	tbnz	w12, #0, .LBB322_7
.LBB322_3:                              // %"$13"
                                        //   Parent Loop BB322_1 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ands	x10, x8, #0xfffffffffffffff0
	b.eq	.LBB322_12
// %bb.4:                               // %"$15"
                                        //   in Loop: Header=BB322_3 Depth=2
	ldp	w11, w12, [x10]
	bfi	x11, x12, #32, #32
	lsr	x12, x9, #32
	tbnz	w11, #0, .LBB322_6
// %bb.5:                               // %"$16"
                                        //   in Loop: Header=BB322_3 Depth=2
	ldr	w11, [x10, #8]!
	ldr	w13, [x10, #4]
	bfi	x11, x13, #32, #32
	stp	w9, w12, [x10]
	mov	x9, x8
	mov	x8, x11
	b	.LBB322_3
.LBB322_6:                              // %"$18"
                                        //   in Loop: Header=BB322_1 Depth=1
	stp	w9, w12, [x10]
	ldr	w0, [x10, #8]!
	ldr	w9, [x10, #4]
	bfi	x0, x9, #32, #32
	lsr	x13, x11, #32
	and	w9, w11, #0xfffffffe
	stp	w9, w13, [x10]
	b	.LBB322_1
.LBB322_7:                              // %"$6"
                                        //   in Loop: Header=BB322_1 Depth=1
	and	x11, x12, #0xfffffffffffffffe
	lsr	x12, x12, #32
	stp	w11, w12, [x10, #8]
	tbz	w9, #2, .LBB322_11
// %bb.8:                               // %"$9"
                                        //   in Loop: Header=BB322_1 Depth=1
	tbnz	w11, #1, .LBB322_3
.LBB322_9:                              // %"$10"
                                        //   Parent Loop BB322_1 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	w10, w12, [x11, #4]
	bfi	x10, x12, #32, #32
	tbz	w10, #0, .LBB322_3
// %bb.10:                              // %"$12"
                                        //   in Loop: Header=BB322_9 Depth=2
	and	x12, x10, #0xfffffffffffffffe
	lsr	x10, x10, #32
	stp	w12, w10, [x11, #4]
	mov	x11, x12
	tbz	w11, #1, .LBB322_9
	b	.LBB322_3
.LBB322_11:                             // %"$7"
                                        //   in Loop: Header=BB322_1 Depth=1
	ldp	w0, w11, [x10]
	bfi	x0, x11, #32, #32
	lsr	x11, x8, #32
	orr	w8, w8, #0x1
	stp	w8, w11, [x10]
	mov	x8, x9
	b	.LBB322_1
.LBB322_12:                             // %"$14"
	ret
.Lfunc_end322:
	.size	mark, .Lfunc_end322-mark
	.cfi_endproc
                                        // -- End function
	.globl	outString                       // -- Begin function outString
	.p2align	4
	.type	outString,@function
outString:                              // @outString
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-32]!                // 8-byte Folded Spill
	stp	x20, x19, [sp, #16]             // 16-byte Folded Spill
	.cfi_def_cfa_offset 32
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w30, -32
	mov	x19, x0
	adrp	x20, ($Put)
	ldrb	w0, [x19]
	cbz	w0, .LBB323_2
.LBB323_1:                              // %"$3"
                                        // =>This Inner Loop Header: Depth=1
	ldr	x8, [x20, :lo12:($Put)]
	blr	x8
	add	x19, x19, #1                    // =1
	ldrb	w0, [x19]
	cbnz	w0, .LBB323_1
.LBB323_2:                              // %"$4"
	ldp	x20, x19, [sp, #16]             // 16-byte Folded Reload
	ldr	x30, [sp], #32                  // 8-byte Folded Reload
	ret
.Lfunc_end323:
	.size	outString, .Lfunc_end323-outString
	.cfi_endproc
                                        // -- End function
	.globl	heapAlloc                       // -- Begin function heapAlloc
	.p2align	4
	.type	heapAlloc,@function
heapAlloc:                              // @heapAlloc
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	mov	x0, xzr
	mov	w1, #8
	movk	w1, #16, lsl #16
	bl	alloc
	adrp	x10, ($Heaps)
	mov	w11, #1048560
	add	x12, x0, #256, lsl #12          // =1048576
	ldr	x13, [x10, :lo12:($Heaps)]
	adrp	x8, ($Avail)
	ldr	x9, [x8, :lo12:($Avail)]
	lsr	x14, x13, #32
	stp	w13, w14, [x12]
	str	x0, [x10, :lo12:($Heaps)]
	add	x11, x0, x11
	mov	x10, #-1048576
.LBB324_1:                              // %"$2"
                                        // =>This Inner Loop Header: Depth=1
	mov	x12, x9
	mov	x9, x11
	lsr	x11, x12, #32
	stp	w12, w11, [x9]
	sub	x11, x9, #16                    // =16
	adds	x10, x10, #16                   // =16
	b.ne	.LBB324_1
// %bb.2:                               // %"$4"
	str	x9, [x8, :lo12:($Avail)]
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end324:
	.size	heapAlloc, .Lfunc_end324-heapAlloc
	.cfi_endproc
                                        // -- End function
	.globl	alloc                           // -- Begin function alloc
	.p2align	4
	.type	alloc,@function
alloc:                                  // @alloc
	.cfi_startproc
// %bb.0:                               // %"$1"
	adrp	x8, ($Limit)
	ldr	x0, [x8, :lo12:($Limit)]
	add	x9, x0, x1, lsl #3
	str	x9, [x8, :lo12:($Limit)]
	ret
.Lfunc_end325:
	.size	alloc, .Lfunc_end325-alloc
	.cfi_endproc
                                        // -- End function
	.globl	sighandler                      // -- Begin function sighandler
	.p2align	4
	.type	sighandler,@function
sighandler:                             // @sighandler
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x30, x19, [sp, #-16]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w19, -8
	.cfi_offset w30, -16
	adrp	x0, .L$103
	add	x0, x0, :lo12:.L$103
	bl	outString
	adrp	x19, env+136
	ldr	w8, [x19, :lo12:env+136]
	cbz	w8, .LBB326_2
// %bb.1:                               // %"$3"
	ldp	x30, x19, [sp], #16             // 16-byte Folded Reload
	ret
.LBB326_2:                              // %"$2"
	mov	w8, #1
	str	w8, [x19, :lo12:env+136]
	adrp	x8, ($Signal)
	ldr	w9, [x8, :lo12:($Signal)]
	sub	w9, w9, #1                      // =1
	str	w9, [x8, :lo12:($Signal)]
	adrp	x8, gcData+16
	ldr	x0, [x8, :lo12:gcData+16]
	bl	execAt
	str	wzr, [x19, :lo12:env+136]
	ldp	x30, x19, [sp], #16             // 16-byte Folded Reload
	ret
.Lfunc_end326:
	.size	sighandler, .Lfunc_end326-sighandler
	.cfi_endproc
                                        // -- End function
	.globl	evExpr                          // -- Begin function evExpr
	.p2align	4
	.type	evExpr,@function
evExpr:                                 // @evExpr
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-96]!           // 16-byte Folded Spill
	str	x27, [sp, #16]                  // 8-byte Folded Spill
	stp	x26, x25, [sp, #32]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #48]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #64]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #80]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	mov	x19, x0
	mov	x9, sp
	adrp	x10, ($StkLimit)
	ldr	x10, [x10, :lo12:($StkLimit)]
	cmp	x10, x9
	b.hi	.LBB327_83
// %bb.1:                               // %"$3"
	mov	x8, x1
	ldp	w24, w9, [x1, #8]
	ldp	w20, w10, [x19]
	bfi	x24, x9, #32, #32
	bfi	x20, x10, #32, #32
	adrp	x22, SymTab+376
	add	x22, x22, :lo12:SymTab+376
	ldr	x9, [x22]
	adrp	x21, env+8
	ldr	x10, [x21, :lo12:env+8]
	mov	x11, sp
	sub	x23, x11, #32                   // =32
	mov	sp, x23
	lsr	x12, x9, #32
	lsr	x13, x22, #32
	stp	w9, w12, [x11, #-32]
	stp	w22, w13, [x11, #-24]
	lsr	x12, x10, #32
	adrp	x25, SymTab+8
	add	x25, x25, :lo12:SymTab+8
	sub	x9, x11, #8                     // =8
	stp	w10, w12, [x11, #-16]
.LBB327_2:                              // %"$4.sink.split"
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB327_3 Depth 2
                                        //       Child Loop BB327_9 Depth 3
	lsr	x10, x8, #32
	stp	w8, w10, [x9]
	str	x23, [x21, :lo12:env+8]
.LBB327_3:                              // %"$4"
                                        //   Parent Loop BB327_2 Depth=1
                                        // =>  This Loop Header: Depth=2
                                        //       Child Loop BB327_9 Depth 3
	tst	x20, #0xf
	b.ne	.LBB327_23
// %bb.4:                               // %"$5"
                                        //   in Loop: Header=BB327_3 Depth=2
	ldp	w0, w8, [x24]
	bfi	x0, x8, #32, #32
	ldp	w24, w8, [x24, #8]
	bfi	x24, x8, #32, #32
	tst	x0, #0x6
	b.ne	.LBB327_8
// %bb.5:                               // %"$8"
                                        //   in Loop: Header=BB327_3 Depth=2
	tbz	w0, #3, .LBB327_7
// %bb.6:                               // %"$11"
                                        //   in Loop: Header=BB327_3 Depth=2
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB327_8
.LBB327_7:                              // %"$10"
                                        //   in Loop: Header=BB327_3 Depth=2
	bl	evList
.LBB327_8:                              // %"$7"
                                        //   in Loop: Header=BB327_3 Depth=2
	ldp	w1, w8, [x20]
	bfi	x1, x8, #32, #32
	ldp	w20, w8, [x20, #8]
	bfi	x20, x8, #32, #32
	tst	x1, #0xf
	b.ne	.LBB327_19
.LBB327_9:                              // %"$21"
                                        //   Parent Loop BB327_2 Depth=1
                                        //     Parent Loop BB327_3 Depth=2
                                        // =>    This Inner Loop Header: Depth=3
	tst	x0, #0xf
	b.eq	.LBB327_11
// %bb.10:                              //   in Loop: Header=BB327_9 Depth=3
	mov	x10, x25
	b	.LBB327_12
.LBB327_11:                             // %"$22"
                                        //   in Loop: Header=BB327_9 Depth=3
	ldp	w10, w8, [x0]
	bfi	x10, x8, #32, #32
	ldp	w0, w8, [x0, #8]
	bfi	x0, x8, #32, #32
.LBB327_12:                             // %"$24"
                                        //   in Loop: Header=BB327_9 Depth=3
	ldp	w8, w9, [x1]
	bfi	x8, x9, #32, #32
	tst	x8, #0x6
	b.ne	.LBB327_79
// %bb.13:                              // %"$26"
                                        //   in Loop: Header=BB327_9 Depth=3
	add	x9, x25, #208                   // =208
	cmp	x9, x8
	ccmp	x8, x25, #0, hs
	b.hs	.LBB327_80
// %bb.14:                              // %"$30"
                                        //   in Loop: Header=BB327_9 Depth=3
	ldp	w1, w9, [x1, #8]
	bfi	x1, x9, #32, #32
	mov	x11, sp
	sub	x9, x11, #32                    // =32
	mov	sp, x9
	lsr	x12, x10, #32
	lsr	x13, x8, #32
	stp	w10, w12, [x11, #-32]
	stp	w8, w13, [x11, #-24]
	lsr	x8, x23, #32
	stp	w23, w8, [x11, #-16]
	tst	x1, #0xf
	mov	x23, x9
	str	x9, [x21, :lo12:env+8]
	b.eq	.LBB327_9
// %bb.15:                              // %"$32"
                                        //   in Loop: Header=BB327_3 Depth=2
	cmp	x1, x25
	mov	x23, x9
	b.eq	.LBB327_3
// %bb.16:                              // %"$33"
                                        //   in Loop: Header=BB327_2 Depth=1
	tst	x1, #0x6
	b.ne	.LBB327_81
// %bb.17:                              // %"$36"
                                        //   in Loop: Header=BB327_2 Depth=1
	add	x8, x25, #208                   // =208
	cmp	x8, x1
	ccmp	x1, x25, #0, hs
	b.hs	.LBB327_82
// %bb.18:                              // %"$40"
                                        //   in Loop: Header=BB327_2 Depth=1
	sub	x10, sp, #32                    // =32
	mov	sp, x10
	mov	x23, x9
	b	.LBB327_22
.LBB327_19:                             // %"$12"
                                        //   in Loop: Header=BB327_2 Depth=1
	tst	x1, #0x6
	b.ne	.LBB327_81
// %bb.20:                              // %"$16"
                                        //   in Loop: Header=BB327_2 Depth=1
	add	x8, x25, #208                   // =208
	cmp	x8, x1
	ccmp	x1, x25, #0, hs
	b.hs	.LBB327_82
// %bb.21:                              // %"$20"
                                        //   in Loop: Header=BB327_2 Depth=1
	sub	x10, sp, #32                    // =32
	mov	sp, x10
.LBB327_22:                             // %"$14.sink.split"
                                        //   in Loop: Header=BB327_2 Depth=1
	lsr	x8, x0, #32
	lsr	x11, x1, #32
	add	x9, x10, #16                    // =16
	stp	w0, w8, [x10]
	mov	x8, x23
	mov	x23, x10
	stp	w1, w11, [x10, #8]
	b	.LBB327_2
.LBB327_23:                             // %"$6"
	cmp	x20, x22
	b.ne	.LBB327_28
// %bb.24:                              // %"$41"
	tst	x24, #0xf
	b.eq	.LBB327_48
// %bb.25:                              // %"$45"
	adrp	x8, env+96
	ldr	x20, [x8, :lo12:env+96]
	str	x25, [x8, :lo12:env+96]
.LBB327_26:                             // %"$74"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w9, w8, [x23, #8]
	bfi	x9, x8, #32, #32
	ldp	w8, w10, [x9]
	ldp	w12, w11, [x23]
	stp	w12, w11, [x9]
	stp	w8, w10, [x23]
	cmp	x22, x9
	b.eq	.LBB327_41
// %bb.27:                              // %"$75"
                                        //   in Loop: Header=BB327_26 Depth=1
	ldp	w23, w8, [x23, #16]
	bfi	x23, x8, #32, #32
	b	.LBB327_26
.LBB327_28:                             // %"$42"
	cmp	x20, x25
	b.eq	.LBB327_33
// %bb.29:                              // %"$88"
	tst	x20, #0x6
	b.ne	.LBB327_84
// %bb.30:                              // %"$91"
	add	x8, x25, #208                   // =208
	cmp	x8, x20
	ccmp	x20, x25, #0, hs
	b.hs	.LBB327_85
// %bb.31:                              // %"$95"
	ldp	w8, w9, [x20]
	mov	x10, sp
	sub	x11, x10, #32                   // =32
	mov	sp, x11
	stp	w8, w9, [x10, #-32]
	lsr	x8, x20, #32
	stp	w20, w8, [x10, #-24]
	lsr	x8, x23, #32
	stp	w23, w8, [x10, #-16]
	str	x11, [x21, :lo12:env+8]
	lsr	x8, x24, #32
	stp	w24, w8, [x20]
	b	.LBB327_33
.LBB327_32:                             // %"$97"
                                        //   in Loop: Header=BB327_33 Depth=1
	ldp	w23, w8, [x23, #16]
	bfi	x23, x8, #32, #32
.LBB327_33:                             // %"$96"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w9, w8, [x23, #8]
	bfi	x9, x8, #32, #32
	ldp	w8, w10, [x9]
	ldp	w12, w11, [x23]
	stp	w12, w11, [x9]
	stp	w8, w10, [x23]
	cmp	x22, x9
	b.ne	.LBB327_32
// %bb.34:                              // %"$98"
	ldp	w19, w8, [x19, #8]
	bfi	x19, x8, #32, #32
.LBB327_35:                             // %"$99"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w0, w8, [x19]
	bfi	x0, x8, #32, #32
	ldp	w19, w8, [x19, #8]
	bfi	x19, x8, #32, #32
	tst	x19, #0xf
	b.ne	.LBB327_38
// %bb.36:                              // %"$100"
                                        //   in Loop: Header=BB327_35 Depth=1
	tst	x0, #0xf
	b.ne	.LBB327_35
// %bb.37:                              // %"$109"
                                        //   in Loop: Header=BB327_35 Depth=1
	bl	evList
	b	.LBB327_35
.LBB327_38:                             // %"$102"
	tst	x0, #0x6
	b.ne	.LBB327_75
// %bb.39:                              // %"$104"
	tbz	w0, #3, .LBB327_51
// %bb.40:                              // %"$107"
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB327_75
.LBB327_41:                             // %"$76"
	ldp	w19, w8, [x19, #8]
	bfi	x19, x8, #32, #32
.LBB327_42:                             // %"$77"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w0, w8, [x19]
	bfi	x0, x8, #32, #32
	ldp	w19, w8, [x19, #8]
	bfi	x19, x8, #32, #32
	tst	x19, #0xf
	b.ne	.LBB327_45
// %bb.43:                              // %"$78"
                                        //   in Loop: Header=BB327_42 Depth=1
	tst	x0, #0xf
	b.ne	.LBB327_42
// %bb.44:                              // %"$87"
                                        //   in Loop: Header=BB327_42 Depth=1
	bl	evList
	b	.LBB327_42
.LBB327_45:                             // %"$80"
	tst	x0, #0x6
	b.ne	.LBB327_53
// %bb.46:                              // %"$82"
	tbz	w0, #3, .LBB327_52
// %bb.47:                              // %"$85"
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB327_53
.LBB327_48:                             // %"$44"
	ldp	w0, w8, [x24]
	bfi	x0, x8, #32, #32
	tst	x0, #0x6
	b.ne	.LBB327_55
// %bb.49:                              // %"$48"
	tbz	w0, #3, .LBB327_54
// %bb.50:                              // %"$51"
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB327_55
.LBB327_51:                             // %"$106"
	bl	evList
	b	.LBB327_75
.LBB327_52:                             // %"$84"
	bl	evList
.LBB327_53:                             // %"$46"
	adrp	x8, env+96
	add	x8, x8, :lo12:env+96
	b	.LBB327_74
.LBB327_54:                             // %"$50"
	bl	evList
.LBB327_55:                             // %"$47"
	mov	x8, sp
	sub	x20, x8, #32                    // =32
	mov	sp, x20
	sub	x8, x8, #24                     // =24
	adrp	x27, env
	mov	x26, x20
	b	.LBB327_58
.LBB327_56:                             // %"$58"
                                        //   in Loop: Header=BB327_58 Depth=1
	mov	x0, x8
	bl	evList
	mov	x8, x0
.LBB327_57:                             // %"$55"
                                        //   in Loop: Header=BB327_58 Depth=1
	mov	x9, sp
	sub	x0, x9, #32                     // =32
	mov	sp, x0
	lsr	x10, x8, #32
	stp	w8, w10, [x9, #-24]
	mov	x8, x26
	mov	x26, x0
.LBB327_58:                             // %"$52"
                                        // =>This Inner Loop Header: Depth=1
	lsr	x9, x0, #32
	stp	w0, w9, [x8]
	add	x8, x26, #8                     // =8
	ldr	x9, [x27, :lo12:env]
	lsr	x10, x9, #32
	stp	w9, w10, [x26, #16]
	str	x8, [x27, :lo12:env]
	ldp	w24, w8, [x24, #8]
	bfi	x24, x8, #32, #32
	tst	x24, #0xf
	b.ne	.LBB327_62
// %bb.59:                              // %"$53"
                                        //   in Loop: Header=BB327_58 Depth=1
	ldp	w8, w9, [x24]
	bfi	x8, x9, #32, #32
	tst	x8, #0x6
	b.ne	.LBB327_57
// %bb.60:                              // %"$56"
                                        //   in Loop: Header=BB327_58 Depth=1
	tbz	w8, #3, .LBB327_56
// %bb.61:                              // %"$59"
                                        //   in Loop: Header=BB327_58 Depth=1
	ldp	w8, w9, [x8]
	bfi	x8, x9, #32, #32
	b	.LBB327_57
.LBB327_62:                             // %"$54"
	adrp	x8, env+96
	ldr	x24, [x8, :lo12:env+96]
	lsr	x9, x25, #32
	stp	w25, w9, [x26]
	str	x20, [x8, :lo12:env+96]
.LBB327_63:                             // %"$60"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w9, w8, [x23, #8]
	bfi	x9, x8, #32, #32
	ldp	w8, w10, [x9]
	ldp	w12, w11, [x23]
	stp	w12, w11, [x9]
	stp	w8, w10, [x23]
	cmp	x22, x9
	b.eq	.LBB327_65
// %bb.64:                              // %"$61"
                                        //   in Loop: Header=BB327_63 Depth=1
	ldp	w23, w8, [x23, #16]
	bfi	x23, x8, #32, #32
	b	.LBB327_63
.LBB327_65:                             // %"$62"
	ldp	w19, w8, [x19, #8]
	bfi	x19, x8, #32, #32
.LBB327_66:                             // %"$63"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w0, w8, [x19]
	bfi	x0, x8, #32, #32
	ldp	w19, w8, [x19, #8]
	bfi	x19, x8, #32, #32
	tst	x19, #0xf
	b.ne	.LBB327_69
// %bb.67:                              // %"$64"
                                        //   in Loop: Header=BB327_66 Depth=1
	tst	x0, #0xf
	b.ne	.LBB327_66
// %bb.68:                              // %"$73"
                                        //   in Loop: Header=BB327_66 Depth=1
	bl	evList
	b	.LBB327_66
.LBB327_69:                             // %"$66"
	tst	x0, #0x6
	b.ne	.LBB327_73
// %bb.70:                              // %"$68"
	tbz	w0, #3, .LBB327_72
// %bb.71:                              // %"$71"
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB327_73
.LBB327_72:                             // %"$70"
	bl	evList
.LBB327_73:                             // %"$65"
	adrp	x8, env
	add	x8, x8, :lo12:env
	str	x24, [x8, #96]
	ldp	w20, w9, [x20, #16]
	bfi	x20, x9, #32, #32
.LBB327_74:                             // %"$46"
	lsr	x9, x20, #32
	stp	w20, w9, [x8]
.LBB327_75:                             // %"$43"
	adrp	x8, env+8
	add	x8, x8, :lo12:env+8
.LBB327_76:                             // %"$110"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w8, w9, [x8]
	bfi	x8, x9, #32, #32
	ldp	w10, w9, [x8, #8]
	bfi	x10, x9, #32, #32
	ldp	w9, w11, [x8]
	stp	w9, w11, [x10]
	cmp	x22, x10
	b.eq	.LBB327_78
// %bb.77:                              // %"$111"
                                        //   in Loop: Header=BB327_76 Depth=1
	add	x8, x8, #16                     // =16
	b	.LBB327_76
.LBB327_78:                             // %"$112"
	ldp	w8, w9, [x8, #16]
	bfi	x8, x9, #32, #32
	str	x8, [x21, :lo12:env+8]
	mov	sp, x29
	ldp	x20, x19, [sp, #80]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #64]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #48]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #32]             // 16-byte Folded Reload
	ldr	x27, [sp, #16]                  // 8-byte Folded Reload
	ldp	x29, x30, [sp], #96             // 16-byte Folded Reload
	ret
.LBB327_79:                             // %"$25"
	mov	x0, x19
	mov	x1, x8
	bl	varErr
.LBB327_80:                             // %"$29"
	mov	x0, x19
	mov	x1, x8
	bl	protErr
.LBB327_81:                             // %"$15"
	mov	x0, x19
	bl	varErr
.LBB327_82:                             // %"$19"
	mov	x0, x19
	bl	protErr
.LBB327_83:                             // %"$2"
	mov	x0, x19
	bl	stkErr
.LBB327_84:                             // %"$90"
	mov	x0, x19
	mov	x1, x20
	bl	varErr
.LBB327_85:                             // %"$94"
	mov	x0, x19
	mov	x1, x20
	bl	protErr
.Lfunc_end327:
	.size	evExpr, .Lfunc_end327-evExpr
	.cfi_endproc
                                        // -- End function
	.globl	sharedLib                       // -- Begin function sharedLib
	.p2align	4
	.type	sharedLib,@function
sharedLib:                              // @sharedLib
	.cfi_startproc
// %bb.0:                               // %"$1"
	mov	w0, wzr
	ret
.Lfunc_end328:
	.size	sharedLib, .Lfunc_end328-sharedLib
	.cfi_endproc
                                        // -- End function
	.globl	undefined                       // -- Begin function undefined
	.p2align	4
	.type	undefined,@function
undefined:                              // @undefined
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	mov	x8, x0
	adrp	x2, .L$132
	add	x2, x2, :lo12:.L$132
	mov	x0, x1
	mov	x1, x8
	mov	x3, xzr
	bl	err
.Lfunc_end329:
	.size	undefined, .Lfunc_end329-undefined
	.cfi_endproc
                                        // -- End function
	.globl	stkErr                          // -- Begin function stkErr
	.p2align	4
	.type	stkErr,@function
stkErr:                                 // @stkErr
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	adrp	x8, ($StkLimit)
	str	xzr, [x8, :lo12:($StkLimit)]
	adrp	x2, .L$110
	add	x2, x2, :lo12:.L$110
	mov	x1, xzr
	mov	x3, xzr
	bl	err
.Lfunc_end330:
	.size	stkErr, .Lfunc_end330-stkErr
	.cfi_endproc
                                        // -- End function
	.globl	err                             // -- Begin function err
	.p2align	4
	.type	err,@function
err:                                    // @err
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-80]!           // 16-byte Folded Spill
	stp	x26, x25, [sp, #16]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #32]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #48]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #64]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 80
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w30, -72
	.cfi_offset w29, -80
	mov	x19, x2
	mov	x20, x1
	mov	x21, x0
	adrp	x24, SymTab+8
	add	x24, x24, :lo12:SymTab+8
	cmp	x0, #0                          // =0
	csel	x8, x0, x24, ne
	str	x8, [x24, #624]
	cbz	x1, .LBB331_2
// %bb.1:                               // %"$5"
	mov	x8, sp
	sub	x9, x8, #16                     // =16
	mov	sp, x9
	lsr	x10, x20, #32
	stp	w20, w10, [x8, #-16]
	adrp	x10, env
	ldr	x11, [x10, :lo12:env]
	lsr	x12, x11, #32
	stp	w11, w12, [x8, #-8]
	str	x9, [x10, :lo12:env]
.LBB331_2:                              // %"$6"
	mov	x8, sp
	sub	x22, x8, #240                   // =240
	mov	sp, x22
	ldrb	w9, [x19]
	sturb	w9, [x8, #-240]
	cbz	w9, .LBB331_12
// %bb.3:                               // %"$7"
	mov	x0, x22
	bl	mkStr
	adrp	x25, SymTab+664
	str	x0, [x25, :lo12:SymTab+664]
	adrp	x23, env+24
	add	x23, x23, :lo12:env+24
.LBB331_4:                              // %"$9"
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB331_7 Depth 2
	ldr	x23, [x23]
	cbz	x23, .LBB331_12
// %bb.5:                               // %"$10"
                                        //   in Loop: Header=BB331_4 Depth=1
	ldp	w26, w8, [x23, #8]
	bfi	x26, x8, #32, #32
	cbz	x26, .LBB331_4
// %bb.6:                               // %"$14"
                                        //   in Loop: Header=BB331_4 Depth=1
	tst	x26, #0xf
	b.ne	.LBB331_4
.LBB331_7:                              // %"$15"
                                        //   Parent Loop BB331_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	w0, w8, [x26]
	bfi	x0, x8, #32, #32
	ldr	x1, [x25, :lo12:SymTab+664]
	bl	subStr
	tbnz	w0, #0, .LBB331_9
// %bb.8:                               // %"$18"
                                        //   in Loop: Header=BB331_7 Depth=2
	ldp	w26, w8, [x26, #8]
	bfi	x26, x8, #32, #32
	tst	x26, #0xf
	b.eq	.LBB331_7
	b	.LBB331_4
.LBB331_9:                              // %"$17"
	mov	x0, x23
	bl	unwind
	ldp	w8, w9, [x26]
	bfi	x8, x9, #32, #32
	cmp	x8, x24
	b.ne	.LBB331_11
// %bb.10:                              // %"$19"
	ldr	x8, [x25, :lo12:SymTab+664]
.LBB331_11:                             // %"$21"
	adrp	x9, ($Ret)
	str	x8, [x9, :lo12:($Ret)]
	add	x0, x23, #176                   // =176
	mov	w1, #1
	bl	longjmp
.LBB331_12:                             // %"$8"
	adrp	x8, ($ExtN)
	str	wzr, [x8, :lo12:($ExtN)]
	adrp	x8, ($Chr)
	str	wzr, [x8, :lo12:($Chr)]
	adrp	x8, env+16
	str	xzr, [x8, :lo12:env+16]
	cbnz	x21, .LBB331_15
// %bb.13:                              // %"$23"
	cbnz	x20, .LBB331_16
.LBB331_14:                             // %"$25"
	ldrb	w8, [x22]
	cbnz	w8, .LBB331_17
	b	.LBB331_20
.LBB331_15:                             // %"$22"
	adrp	x0, .L$104
	add	x0, x0, :lo12:.L$104
	bl	outString
	mov	x0, x21
	bl	print
	bl	newline
	cbz	x20, .LBB331_14
.LBB331_16:                             // %"$24"
	mov	x0, x20
	bl	print
	adrp	x0, .L$105
	add	x0, x0, :lo12:.L$105
	bl	outString
	ldrb	w8, [x22]
	cbz	w8, .LBB331_20
.LBB331_17:                             // %"$26"
	mov	x0, x19
	bl	outString
	bl	newline
	ldr	x8, [x24, #640]
	cmp	x8, x24
	cset	w8, eq
	adrp	x19, ($Jam)
	ldrb	w9, [x19, :lo12:($Jam)]
	orr	w8, w8, w9
	tbnz	w8, #0, .LBB331_19
// %bb.18:                              // %"$30"
	mov	w8, #1
	strb	w8, [x19, :lo12:($Jam)]
	adrp	x8, SymTab+648
	ldr	x0, [x8, :lo12:SymTab+648]
	bl	execAt
	strb	wzr, [x19, :lo12:($Jam)]
.LBB331_19:                             // %"$31"
	adrp	x8, ($Get)
	adrp	x9, _getStdin
	add	x9, x9, :lo12:_getStdin
	str	x9, [x8, :lo12:($Get)]
	adrp	x1, .L$106
	add	x1, x1, :lo12:.L$106
	adrp	x2, SymTab+8
	add	x2, x2, :lo12:SymTab+8
	mov	x0, xzr
	bl	repl2
.LBB331_20:                             // %"$27"
	adrp	x0, .L$107
	add	x0, x0, :lo12:.L$107
	bl	outString
	mov	x0, xzr
	bl	unwind
	adrp	x0, .L$108
	add	x0, x0, :lo12:.L$108
	bl	outString
	adrp	x8, env
	add	x8, x8, :lo12:env
	str	xzr, [x8]
	str	wzr, [x8, #136]
	str	x24, [x8, #96]
	stp	xzr, xzr, [x8, #120]
	str	wzr, [x8, #144]
	adrp	x0, .L$109
	add	x0, x0, :lo12:.L$109
	bl	outString
	adrp	x0, ($QuitRst)
	add	x0, x0, :lo12:($QuitRst)
	mov	w1, #1
	bl	longjmp
.Lfunc_end331:
	.size	err, .Lfunc_end331-err
	.cfi_endproc
                                        // -- End function
	.globl	mkStr                           // -- Begin function mkStr
	.p2align	4
	.type	mkStr,@function
mkStr:                                  // @mkStr
	.cfi_startproc
// %bb.0:                               // %"$1"
	cbz	x0, .LBB332_4
// %bb.1:                               // %"$2"
	stp	x29, x30, [sp, #-48]!           // 16-byte Folded Spill
	str	x21, [sp, #16]                  // 8-byte Folded Spill
	stp	x20, x19, [sp, #32]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 48
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -32
	.cfi_offset w30, -40
	.cfi_offset w29, -48
	mov	x20, x0
	mov	x8, sp
	sub	x19, x8, #32                    // =32
	mov	sp, x19
	mov	w9, #4
	stp	w9, wzr, [x8, #-32]
	stur	wzr, [x8, #-12]
	mov	w9, #2
	mov	x10, x19
	str	w9, [x10, #16]!
	adrp	x21, env
	ldr	x9, [x21, :lo12:env]
	lsr	x11, x9, #32
	stp	w9, w11, [x8, #-8]
	str	x10, [x21, :lo12:env]
	ldrb	w0, [x20]
	cbz	w0, .LBB332_3
.LBB332_2:                              // %"$6"
                                        // =>This Inner Loop Header: Depth=1
	mov	x1, x19
	bl	byteSym
	add	x20, x20, #1                    // =1
	ldrb	w0, [x20]
	cbnz	w0, .LBB332_2
.LBB332_3:                              // %"$7"
	ldp	w0, w8, [x19, #16]
	bfi	x0, x8, #32, #32
	bl	consStr
	ldp	w9, w8, [x19, #24]
	bfi	x9, x8, #32, #32
	str	x9, [x21, :lo12:env]
	mov	sp, x29
	ldp	x20, x19, [sp, #32]             // 16-byte Folded Reload
	ldr	x21, [sp, #16]                  // 8-byte Folded Reload
	ldp	x29, x30, [sp], #48             // 16-byte Folded Reload
	ret
.LBB332_4:
	adrp	x0, SymTab+8
	add	x0, x0, :lo12:SymTab+8
	ret
.Lfunc_end332:
	.size	mkStr, .Lfunc_end332-mkStr
	.cfi_endproc
                                        // -- End function
	.globl	subStr                          // -- Begin function subStr
	.p2align	4
	.type	subStr,@function
subStr:                                 // @subStr
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-64]!           // 16-byte Folded Spill
	stp	x24, x23, [sp, #16]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #32]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #48]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 64
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w30, -56
	.cfi_offset w29, -64
	adrp	x8, SymTab+8
	add	x8, x8, :lo12:SymTab+8
	cmp	x0, x8
	b.eq	.LBB333_2
// %bb.1:                               // %"$3"
	mov	x20, x1
	mov	x1, x0
	mov	x0, xzr
	bl	xName
	cmp	x0, #2                          // =2
	b.ne	.LBB333_4
.LBB333_2:
	mov	w0, #1
.LBB333_3:                              // %"$2"
	mov	sp, x29
	ldp	x20, x19, [sp, #48]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #32]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #64             // 16-byte Folded Reload
	ret
.LBB333_4:                              // %"$4"
	mov	x19, x0
	mov	x0, xzr
	mov	x1, x20
	bl	xName
	mov	x21, x0
	mov	x8, sp
	sub	x20, x8, #16                    // =16
	mov	sp, x20
	stp	wzr, wzr, [x8, #-16]
.LBB333_5:                              // %"$5"
                                        // =>This Inner Loop Header: Depth=1
	lsr	x8, x21, #32
	stp	w21, w8, [x20, #8]
	mov	x0, x20
	bl	symByte
	tst	w0, #0xff
	b.eq	.LBB333_8
// %bb.6:                               // %"$6"
                                        //   in Loop: Header=BB333_5 Depth=1
	mov	w1, w0
	ldp	w22, w24, [x20]
	ldp	w21, w23, [x20, #8]
	mov	x0, x19
	mov	x2, x20
	bl	preStr
	tbnz	w0, #0, .LBB333_2
// %bb.7:                               // %"$9"
                                        //   in Loop: Header=BB333_5 Depth=1
	bfi	x22, x24, #32, #32
	bfi	x21, x23, #32, #32
	lsr	x8, x22, #32
	stp	w22, w8, [x20]
	b	.LBB333_5
.LBB333_8:
	mov	w0, wzr
	b	.LBB333_3
.Lfunc_end333:
	.size	subStr, .Lfunc_end333-subStr
	.cfi_endproc
                                        // -- End function
	.globl	unwind                          // -- Begin function unwind
	.p2align	4
	.type	unwind,@function
unwind:                                 // @unwind
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x30, x27, [sp, #-80]!           // 16-byte Folded Spill
	stp	x26, x25, [sp, #16]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #32]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #48]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #64]             // 16-byte Folded Spill
	.cfi_def_cfa_offset 80
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w30, -80
	mov	x19, x0
	adrp	x20, env+32
	add	x20, x20, :lo12:env+32
	ldp	x0, x8, [x20]
	cmp	x0, #0                          // =0
	ccmp	x0, x8, #4, ne
	b.eq	.LBB334_2
// %bb.1:                               // %"$4"
	bl	stop
	ldr	x8, [x20, #8]
	str	x8, [x20]
.LBB334_2:                              // %"$3"
	adrp	x8, env+8
	add	x8, x8, :lo12:env+8
	ldr	x26, [x8, #16]
	adrp	x24, env+72
	adrp	x23, env+64
	ldr	x25, [x8]
	adrp	x22, env+56
	adrp	x21, env+48
	adrp	x27, env+24
	adrp	x20, env
	add	x20, x20, :lo12:env
	cbz	x26, .LBB334_23
.LBB334_3:                              // %"$9"
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB334_8 Depth 2
                                        //     Child Loop BB334_10 Depth 2
                                        //     Child Loop BB334_12 Depth 2
                                        //     Child Loop BB334_15 Depth 2
	cbz	x25, .LBB334_5
.LBB334_4:                              // %"$11"
                                        //   in Loop: Header=BB334_3 Depth=1
	ldp	w9, w8, [x26, #32]
	bfi	x9, x8, #32, #32
	cmp	x25, x9
	cset	w8, ne
	tbnz	w8, #0, .LBB334_6
	b	.LBB334_8
.LBB334_5:                              //   in Loop: Header=BB334_3 Depth=1
	mov	w8, wzr
	tbz	w8, #0, .LBB334_8
.LBB334_6:                              // %"$12"
                                        //   in Loop: Header=BB334_3 Depth=1
	ldp	w9, w8, [x25, #8]
	bfi	x9, x8, #32, #32
	ldp	w8, w10, [x25]
	stp	w8, w10, [x9]
	ldp	w25, w8, [x25, #16]
	bfi	x25, x8, #32, #32
	cbnz	x25, .LBB334_4
	b	.LBB334_5
.LBB334_7:                              // %"$15"
                                        //   in Loop: Header=BB334_8 Depth=2
	bl	popCtlFiles
.LBB334_8:                              // %"$14"
                                        //   Parent Loop BB334_3 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	x8, [x24, :lo12:env+72]
	ldr	x9, [x26, #96]
	cmp	x8, x9
	b.ne	.LBB334_7
	b	.LBB334_10
.LBB334_9:                              // %"$18"
                                        //   in Loop: Header=BB334_10 Depth=2
	bl	popErrFiles
.LBB334_10:                             // %"$17"
                                        //   Parent Loop BB334_3 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	x8, [x23, :lo12:env+64]
	ldr	x9, [x26, #88]
	cmp	x8, x9
	b.ne	.LBB334_9
// %bb.11:                              // %"$19"
                                        //   in Loop: Header=BB334_3 Depth=1
	ldr	x8, [x22, :lo12:env+56]
	ldr	x9, [x26, #80]
	cmp	x8, x9
	b.eq	.LBB334_14
.LBB334_12:                             // %"$22"
                                        //   Parent Loop BB334_3 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	bl	popOutFiles
	ldr	x8, [x22, :lo12:env+56]
	ldr	x9, [x26, #80]
	cmp	x8, x9
	b.ne	.LBB334_12
// %bb.13:                              // %"$24"
                                        //   in Loop: Header=BB334_3 Depth=1
	bl	tosOutFile
.LBB334_14:                             // %"$21"
                                        //   in Loop: Header=BB334_3 Depth=1
	ldr	x8, [x21, :lo12:env+48]
	ldr	x9, [x26, #72]
	cmp	x8, x9
	b.eq	.LBB334_17
.LBB334_15:                             // %"$27"
                                        //   Parent Loop BB334_3 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	bl	popInFiles
	ldr	x8, [x21, :lo12:env+48]
	ldr	x9, [x26, #72]
	cmp	x8, x9
	b.ne	.LBB334_15
// %bb.16:                              // %"$29"
                                        //   in Loop: Header=BB334_3 Depth=1
	bl	tosInFile
.LBB334_17:                             // %"$26"
                                        //   in Loop: Header=BB334_3 Depth=1
	add	x1, x26, #24                    // =24
	mov	x0, x20
	mov	w2, #152
	bl	memcpy2
	ldp	w0, w8, [x26, #16]
	bfi	x0, x8, #32, #32
	tst	x0, #0x6
	b.ne	.LBB334_20
// %bb.18:                              // %"$31"
                                        //   in Loop: Header=BB334_3 Depth=1
	tbnz	w0, #3, .LBB334_20
// %bb.19:                              // %"$33"
                                        //   in Loop: Header=BB334_3 Depth=1
	bl	evList
.LBB334_20:                             // %"$30"
                                        //   in Loop: Header=BB334_3 Depth=1
	ldr	x8, [x26]
	str	x8, [x27, :lo12:env+24]
	cmp	x26, x19
	b.eq	.LBB334_34
// %bb.21:                              // %"$36"
                                        //   in Loop: Header=BB334_3 Depth=1
	ldr	x26, [x26]
	cbnz	x26, .LBB334_3
	b	.LBB334_23
.LBB334_22:                             // %"$38"
                                        //   in Loop: Header=BB334_23 Depth=1
	ldp	w9, w8, [x25, #8]
	bfi	x9, x8, #32, #32
	ldp	w8, w10, [x25]
	stp	w8, w10, [x9]
	ldp	w25, w8, [x25, #16]
	bfi	x25, x8, #32, #32
.LBB334_23:                             // %"$37"
                                        // =>This Inner Loop Header: Depth=1
	cbnz	x25, .LBB334_22
// %bb.24:                              // %"$39"
	adrp	x8, env+8
	str	xzr, [x8, :lo12:env+8]
	ldr	x8, [x24, :lo12:env+72]
	cbz	x8, .LBB334_27
.LBB334_25:                             // %"$41"
                                        // =>This Inner Loop Header: Depth=1
	bl	popCtlFiles
	ldr	x8, [x24, :lo12:env+72]
	cbnz	x8, .LBB334_25
	b	.LBB334_27
.LBB334_26:                             // %"$44"
                                        //   in Loop: Header=BB334_27 Depth=1
	bl	popErrFiles
.LBB334_27:                             // %"$43"
                                        // =>This Inner Loop Header: Depth=1
	ldr	x8, [x23, :lo12:env+64]
	cbnz	x8, .LBB334_26
// %bb.28:                              // %"$45"
	ldr	x8, [x22, :lo12:env+56]
	adrp	x19, ($Stdout)
	ldr	x9, [x19, :lo12:($Stdout)]
	cmp	x8, x9
	b.eq	.LBB334_31
.LBB334_29:                             // %"$48"
                                        // =>This Inner Loop Header: Depth=1
	bl	popOutFiles
	ldr	x8, [x22, :lo12:env+56]
	ldr	x9, [x19, :lo12:($Stdout)]
	cmp	x8, x9
	b.ne	.LBB334_29
// %bb.30:                              // %"$50"
	bl	tosOutFile
.LBB334_31:                             // %"$47"
	ldr	x8, [x21, :lo12:env+48]
	adrp	x19, ($Stdin)
	ldr	x9, [x19, :lo12:($Stdin)]
	cmp	x8, x9
	b.eq	.LBB334_34
.LBB334_32:                             // %"$53"
                                        // =>This Inner Loop Header: Depth=1
	bl	popInFiles
	ldr	x8, [x21, :lo12:env+48]
	ldr	x9, [x19, :lo12:($Stdin)]
	cmp	x8, x9
	b.ne	.LBB334_32
// %bb.33:                              // %"$55"
	bl	tosInFile
.LBB334_34:                             // %"$35"
	ldp	x20, x19, [sp, #64]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #48]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #32]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #16]             // 16-byte Folded Reload
	ldp	x30, x27, [sp], #80             // 16-byte Folded Reload
	ret
.Lfunc_end334:
	.size	unwind, .Lfunc_end334-unwind
	.cfi_endproc
                                        // -- End function
	.globl	print                           // -- Begin function print
	.p2align	4
	.type	print,@function
print:                                  // @print
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-64]!           // 16-byte Folded Spill
	str	x23, [sp, #16]                  // 8-byte Folded Spill
	stp	x22, x21, [sp, #32]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #48]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 64
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -48
	.cfi_offset w30, -56
	.cfi_offset w29, -64
	mov	x19, x0
	adrp	x8, ($Signal)
	ldr	w8, [x8, :lo12:($Signal)]
	cbz	w8, .LBB335_2
// %bb.1:                               // %"$2"
	mov	x0, xzr
	bl	sighandler
.LBB335_2:                              // %"$3"
	tbz	w19, #1, .LBB335_4
// %bb.3:                               // %"$6"
	mov	x0, x19
	bl	outNum
	b	.LBB335_43
.LBB335_4:                              // %"$5"
	tbz	w19, #2, .LBB335_6
// %bb.5:                               // %"$8"
	mov	x0, x19
	mov	x1, #-1
	mov	w2, wzr
	mov	w3, wzr
	mov	x4, xzr
	bl	fmtNum
	b	.LBB335_43
.LBB335_6:                              // %"$7"
	tbz	w19, #3, .LBB335_13
// %bb.7:                               // %"$10"
	ldp	w20, w8, [x19, #-8]
	bfi	x20, x8, #32, #32
	tbz	w20, #3, .LBB335_11
// %bb.8:                               // %"$13"
	adrp	x19, ($Put)
	ldr	x8, [x19, :lo12:($Put)]
	mov	w0, #123
	blr	x8
	and	x0, x20, #0xfffffffffffffff7
	tst	x0, #0x6
	b.ne	.LBB335_10
.LBB335_9:                              // %"$15"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w0, w8, [x0, #8]
	bfi	x0, x8, #32, #32
	tst	x0, #0x6
	b.eq	.LBB335_9
.LBB335_10:                             // %"$16"
	bl	prExt
	ldr	x8, [x19, :lo12:($Put)]
	mov	w0, #125
	b	.LBB335_42
.LBB335_11:                             // %"$17"
                                        // =>This Inner Loop Header: Depth=1
	tst	x20, #0x6
	b.ne	.LBB335_23
// %bb.12:                              // %"$18"
                                        //   in Loop: Header=BB335_11 Depth=1
	ldp	w20, w8, [x20, #8]
	bfi	x20, x8, #32, #32
	b	.LBB335_11
.LBB335_13:                             // %"$9"
	ldp	w9, w8, [x19]
	bfi	x9, x8, #32, #32
	adrp	x8, SymTab+200
	add	x8, x8, :lo12:SymTab+200
	cmp	x9, x8
	b.ne	.LBB335_25
// %bb.14:                              // %"$49"
	ldp	w9, w8, [x19, #8]
	bfi	x9, x8, #32, #32
	cmp	x19, x9
	cset	w8, ne
	cbnz	w8, .LBB335_26
.LBB335_15:                             // %"$50"
	mov	x8, sp
	adrp	x9, ($StkLimit)
	ldr	x9, [x9, :lo12:($StkLimit)]
	cmp	x9, x8
	b.hi	.LBB335_58
// %bb.16:                              // %"$53"
	adrp	x21, ($Put)
	ldr	x8, [x21, :lo12:($Put)]
	mov	w0, #40
	blr	x8
	mov	x0, x19
	bl	circ
	cbz	x0, .LBB335_30
// %bb.17:                              // %"$55"
	mov	x20, x0
	mov	x22, x19
.LBB335_18:                             // %"$62"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w0, w8, [x22]
	bfi	x0, x8, #32, #32
	bl	print
	bl	space
	ldp	w22, w8, [x22, #8]
	bfi	x22, x8, #32, #32
	cmp	x20, x22
	b.ne	.LBB335_18
// %bb.19:                              // %"$64"
	ldr	x8, [x21, :lo12:($Put)]
	mov	w0, #46
	blr	x8
	cmp	x20, x19
	b.eq	.LBB335_41
// %bb.20:                              // %"$65"
	bl	space
	ldr	x8, [x21, :lo12:($Put)]
	mov	w0, #40
	blr	x8
.LBB335_21:                             // %"$67"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w0, w8, [x22]
	bfi	x0, x8, #32, #32
	bl	print
	bl	space
	ldp	w22, w8, [x22, #8]
	bfi	x22, x8, #32, #32
	cmp	x20, x22
	b.ne	.LBB335_21
// %bb.22:                              // %"$69"
	ldr	x8, [x21, :lo12:($Put)]
	mov	w0, #46
	blr	x8
	ldr	x8, [x21, :lo12:($Put)]
	mov	w0, #41
	blr	x8
	b	.LBB335_41
.LBB335_23:                             // %"$19"
	cmp	x20, #2                         // =2
	b.ne	.LBB335_27
// %bb.24:                              // %"$21"
	adrp	x8, ($Put)
	ldr	x8, [x8, :lo12:($Put)]
	mov	w0, #36
	blr	x8
	lsr	x0, x19, #4
	bl	outOct
	b	.LBB335_43
.LBB335_25:
	mov	w8, wzr
	cbz	w8, .LBB335_15
.LBB335_26:                             // %"$51"
	adrp	x8, ($Put)
	ldr	x8, [x8, :lo12:($Put)]
	mov	w0, #39
	blr	x8
	ldp	w0, w8, [x19, #8]
	bfi	x0, x8, #32, #32
	bl	print
	b	.LBB335_43
.LBB335_27:                             // %"$20"
	adrp	x1, SymTab+112
	add	x1, x1, :lo12:SymTab+112
	mov	x0, x20
	bl	isIntern
	cmp	x19, x0
	b.ne	.LBB335_34
// %bb.28:                              // %"$23"
	adrp	x0, .L$156
	add	x0, x0, :lo12:.L$156
	bl	outString
.LBB335_29:                             // %"$47"
	mov	x0, x20
	bl	printName
	b	.LBB335_43
.LBB335_30:                             // %"$57.preheader"
	adrp	x20, SymTab+8
	add	x20, x20, :lo12:SymTab+8
.LBB335_31:                             // %"$57"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w0, w8, [x19]
	bfi	x0, x8, #32, #32
	bl	print
	ldp	w19, w8, [x19, #8]
	bfi	x19, x8, #32, #32
	cmp	x19, x20
	b.eq	.LBB335_41
// %bb.32:                              // %"$58"
                                        //   in Loop: Header=BB335_31 Depth=1
	tst	x19, #0xf
	b.ne	.LBB335_40
// %bb.33:                              // %"$60"
                                        //   in Loop: Header=BB335_31 Depth=1
	bl	space
	b	.LBB335_31
.LBB335_34:                             // %"$22"
	mov	w22, wzr
	adrp	x8, env+88
	add	x8, x8, :lo12:env+88
	b	.LBB335_36
.LBB335_35:                             // %"$43"
                                        //   in Loop: Header=BB335_36 Depth=1
	add	x8, x23, #8                     // =8
.LBB335_36:                             // %"$25"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w23, w9, [x8]
	bfi	x23, x9, #32, #32
	tst	x23, #0xf
	b.ne	.LBB335_44
// %bb.37:                              // %"$26"
                                        //   in Loop: Header=BB335_36 Depth=1
	ldp	w21, w8, [x23]
	bfi	x21, x8, #32, #32
	ldp	w9, w8, [x21]
	bfi	x9, x8, #32, #32
	ldp	w1, w8, [x9, #8]
	bfi	x1, x8, #32, #32
	mov	x0, x20
	bl	isIntern
	cbz	x0, .LBB335_35
// %bb.38:                              // %"$42"
                                        //   in Loop: Header=BB335_36 Depth=1
	cmp	x0, x19
	b.eq	.LBB335_56
// %bb.39:                              //   in Loop: Header=BB335_36 Depth=1
	mov	w22, #1
	b	.LBB335_35
.LBB335_40:                             // %"$61"
	adrp	x0, .L$157
	add	x0, x0, :lo12:.L$157
	bl	outString
	mov	x0, x19
	bl	print
.LBB335_41:                             // %"$56"
	ldr	x8, [x21, :lo12:($Put)]
	mov	w0, #41
.LBB335_42:                             // %"$4"
	blr	x8
.LBB335_43:                             // %"$4"
	mov	sp, x29
	ldp	x20, x19, [sp, #48]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #32]             // 16-byte Folded Reload
	ldr	x23, [sp, #16]                  // 8-byte Folded Reload
	ldp	x29, x30, [sp], #64             // 16-byte Folded Reload
	ret
.LBB335_44:                             // %"$28"
	adrp	x21, ($Put)
	ldr	x8, [x21, :lo12:($Put)]
	mov	w0, #34
	blr	x8
	mov	x8, sp
	sub	x19, x8, #16                    // =16
	mov	sp, x19
	stp	wzr, wzr, [x8, #-16]
	lsr	x9, x20, #32
	stp	w20, w9, [x8, #-8]
	mov	x0, x19
	bl	symByte
	mov	w20, w0
	b	.LBB335_47
.LBB335_45:                             // %"$35"
                                        //   in Loop: Header=BB335_47 Depth=1
	ldr	x8, [x21, :lo12:($Put)]
	mov	w0, #92
	blr	x8
.LBB335_46:                             // %"$30"
                                        //   in Loop: Header=BB335_47 Depth=1
	ldr	x8, [x21, :lo12:($Put)]
	mov	w0, w20
	blr	x8
	mov	x0, x19
	bl	symByte
	mov	w20, w0
	tst	w0, #0xff
	b.eq	.LBB335_55
.LBB335_47:                             // %"$29"
                                        // =>This Inner Loop Header: Depth=1
	and	w8, w20, #0xff
	cmp	w8, #92                         // =92
	b.eq	.LBB335_49
// %bb.48:                              // %"$32"
                                        //   in Loop: Header=BB335_47 Depth=1
	cmp	w8, #94                         // =94
	b.ne	.LBB335_50
.LBB335_49:                             //   in Loop: Header=BB335_47 Depth=1
	mov	w8, #1
	cbnz	w8, .LBB335_45
	b	.LBB335_51
.LBB335_50:                             // %"$33"
                                        //   in Loop: Header=BB335_47 Depth=1
	and	w8, w20, #0xff
	cmp	w8, #34                         // =34
	cset	w8, eq
	cbnz	w8, .LBB335_45
.LBB335_51:                             // %"$34"
                                        //   in Loop: Header=BB335_47 Depth=1
	and	w8, w20, #0xff
	cmp	w8, #127                        // =127
	b.ne	.LBB335_53
// %bb.52:                              // %"$37"
                                        //   in Loop: Header=BB335_47 Depth=1
	ldr	x8, [x21, :lo12:($Put)]
	mov	w0, #94
	blr	x8
	mov	w20, #63
	b	.LBB335_46
.LBB335_53:                             // %"$36"
                                        //   in Loop: Header=BB335_47 Depth=1
	cmp	w8, #31                         // =31
	b.hi	.LBB335_46
// %bb.54:                              // %"$39"
                                        //   in Loop: Header=BB335_47 Depth=1
	ldr	x8, [x21, :lo12:($Put)]
	mov	w0, #94
	blr	x8
	orr	w20, w20, #0x40
	b	.LBB335_46
.LBB335_55:                             // %"$41"
	ldr	x8, [x21, :lo12:($Put)]
	mov	w0, #34
	b	.LBB335_42
.LBB335_56:                             // %"$45"
	tbz	w22, #0, .LBB335_29
// %bb.57:                              // %"$46"
	mov	x0, x21
	bl	printSym
	adrp	x8, ($Put)
	ldr	x8, [x8, :lo12:($Put)]
	mov	w0, #126
	blr	x8
	b	.LBB335_29
.LBB335_58:                             // %"$52"
	mov	x0, xzr
	bl	stkErr
.Lfunc_end335:
	.size	print, .Lfunc_end335-print
	.cfi_endproc
                                        // -- End function
	.globl	execAt                          // -- Begin function execAt
	.p2align	4
	.type	execAt,@function
execAt:                                 // @execAt
	.cfi_startproc
// %bb.0:                               // %"$1"
	sub	sp, sp, #64                     // =64
	stp	x22, x21, [sp, #32]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #48]             // 16-byte Folded Spill
	.cfi_def_cfa_offset 64
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w30, -48
	mov	x19, x0
	adrp	x21, SymTab+376
	adrp	x22, env
	ldr	x20, [x21, :lo12:SymTab+376]
	ldr	x8, [x22, :lo12:env]
	str	x20, [sp]
	stp	x8, x30, [sp, #8]               // 8-byte Folded Spill
	mov	x8, sp
	str	x8, [x22, :lo12:env]
	b	.LBB336_2
.LBB336_1:                              // %"$4"
                                        //   in Loop: Header=BB336_2 Depth=1
	tst	x19, #0xf
	b.ne	.LBB336_4
.LBB336_2:                              // %"$2"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w0, w8, [x19]
	bfi	x0, x8, #32, #32
	ldp	w19, w8, [x19, #8]
	bfi	x19, x8, #32, #32
	tst	x0, #0xf
	b.ne	.LBB336_1
// %bb.3:                               // %"$3"
                                        //   in Loop: Header=BB336_2 Depth=1
	bl	evList
	b	.LBB336_1
.LBB336_4:                              // %"$6"
	str	x20, [x21, :lo12:SymTab+376]
	ldp	x8, x30, [sp, #8]               // 8-byte Folded Reload
	str	x8, [x22, :lo12:env]
	mov	x0, x20
	ldp	x20, x19, [sp, #48]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #32]             // 16-byte Folded Reload
	add	sp, sp, #64                     // =64
	ret
.Lfunc_end336:
	.size	execAt, .Lfunc_end336-execAt
	.cfi_endproc
                                        // -- End function
	.globl	_getStdin                       // -- Begin function _getStdin
	.p2align	4
	.type	_getStdin,@function
_getStdin:                              // @_getStdin
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x30, x19, [sp, #-16]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w19, -8
	.cfi_offset w30, -16
	mov	w8, #20544
	movk	w8, #65057, lsl #16
.LBB337_1:                              // %"$2"
                                        // =>This Inner Loop Header: Depth=1
	ldrb	w9, [x8, #20]
	tbz	w9, #0, .LBB337_1
// %bb.2:                               // %"$4"
	ldr	w19, [x8]
	adrp	x8, ($Put)
	ldr	x8, [x8, :lo12:($Put)]
	mov	w0, w19
	blr	x8
	adrp	x8, ($Chr)
	str	w19, [x8, :lo12:($Chr)]
	mov	w0, w19
	ldp	x30, x19, [sp], #16             // 16-byte Folded Reload
	ret
.Lfunc_end337:
	.size	_getStdin, .Lfunc_end337-_getStdin
	.cfi_endproc
                                        // -- End function
	.globl	repl2                           // -- Begin function repl2
	.p2align	4
	.type	repl2,@function
repl2:                                  // @repl2
	.cfi_startproc
// %bb.0:                               // %"$1"
	sub	sp, sp, #240                    // =240
	stp	x29, x30, [sp, #144]            // 16-byte Folded Spill
	stp	x28, x27, [sp, #160]            // 16-byte Folded Spill
	stp	x26, x25, [sp, #176]            // 16-byte Folded Spill
	stp	x24, x23, [sp, #192]            // 16-byte Folded Spill
	stp	x22, x21, [sp, #208]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #224]            // 16-byte Folded Spill
	.cfi_def_cfa_offset 240
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	mov	x19, x1
	adrp	x23, env
	add	x23, x23, :lo12:env
	ldr	x9, [x23, #88]
	ldr	x8, [x23]
	str	x9, [sp, #24]                   // 8-byte Folded Spill
	stp	x9, x8, [sp, #128]
	adrp	x26, SymTab+8
	add	x26, x26, :lo12:SymTab+8
	add	x8, sp, #128                    // =128
	ldp	x9, x10, [x26, #104]
	stp	x10, x9, [sp, #8]               // 16-byte Folded Spill
	stp	x9, x8, [sp, #112]
	add	x8, sp, #112                    // =112
	stp	x10, x8, [sp, #96]
	adrp	x28, gcData
	add	x28, x28, :lo12:gcData
	add	x8, sp, #96                     // =96
	ldp	x9, x24, [x28]
	str	x9, [sp]                        // 8-byte Folded Spill
	stp	x9, x8, [sp, #80]
	add	x8, sp, #80                     // =80
	stp	x24, x8, [sp, #64]
	add	x8, sp, #64                     // =64
	str	x8, [x23]
	mov	w9, #10
	stp	x9, x8, [sp, #48]
	add	x8, sp, #48                     // =48
	str	x8, [x23]
	stp	x9, x8, [sp, #32]
	add	x8, sp, #32                     // =32
	str	x8, [x23]
	stp	x26, x26, [x26, #104]
	adrp	x25, ($Chr)
	adrp	x27, SymTab+376
	add	x27, x27, :lo12:SymTab+376
	stp	x26, x26, [x28]
	adrp	x20, .L$158
	add	x20, x20, :lo12:.L$158
	adrp	x29, SymTab+376
	mov	x22, x26
	b	.LBB338_3
.LBB338_1:                              // %"$8"
                                        //   in Loop: Header=BB338_3 Depth=1
	mov	x0, x21
	bl	evList
	mov	x21, x0
.LBB338_2:                              // %"$5"
                                        //   in Loop: Header=BB338_3 Depth=1
	ldr	x8, [x27, #16]
	str	x8, [x27, #32]
	str	x22, [x27, #16]
	str	x21, [x27]
	mov	x0, x20
	bl	outString
	mov	x0, x21
	bl	print
	bl	newline
	mov	x22, x21
.LBB338_3:                              // %"$2"
                                        // =>This Inner Loop Header: Depth=1
	mov	x0, x19
	bl	outString
	mov	w0, #13
	bl	read1
	str	wzr, [x25, :lo12:($Chr)]
	cmp	x0, x26
	b.eq	.LBB338_7
// %bb.4:                               // %"$3"
                                        //   in Loop: Header=BB338_3 Depth=1
	mov	x21, x0
	str	x0, [sp, #48]
	ldr	x22, [x29, :lo12:SymTab+376]
	str	x22, [sp, #32]
	tst	x0, #0x6
	b.ne	.LBB338_2
// %bb.5:                               // %"$6"
                                        //   in Loop: Header=BB338_3 Depth=1
	tbz	w21, #3, .LBB338_1
// %bb.6:                               // %"$9"
                                        //   in Loop: Header=BB338_3 Depth=1
	ldp	w21, w8, [x21]
	bfi	x21, x8, #32, #32
	b	.LBB338_2
.LBB338_7:                              // %"$4"
	ldr	x8, [sp]                        // 8-byte Folded Reload
	stp	x8, x24, [x28]
	adrp	x8, SymTab+112
	add	x8, x8, :lo12:SymTab+112
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	ldr	x9, [sp, #16]                   // 8-byte Folded Reload
	stp	x9, x10, [x8]
	ldr	x8, [sp, #24]                   // 8-byte Folded Reload
	str	x8, [x23, #88]
	ldr	x8, [sp, #136]
	str	x8, [x23]
	mov	x0, x22
	ldp	x20, x19, [sp, #224]            // 16-byte Folded Reload
	ldp	x22, x21, [sp, #208]            // 16-byte Folded Reload
	ldp	x24, x23, [sp, #192]            // 16-byte Folded Reload
	ldp	x26, x25, [sp, #176]            // 16-byte Folded Reload
	ldp	x28, x27, [sp, #160]            // 16-byte Folded Reload
	ldp	x29, x30, [sp, #144]            // 16-byte Folded Reload
	add	sp, sp, #240                    // =240
	ret
.Lfunc_end338:
	.size	repl2, .Lfunc_end338-repl2
	.cfi_endproc
                                        // -- End function
	.globl	read1                           // -- Begin function read1
	.p2align	4
	.type	read1,@function
read1:                                  // @read1
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-32]!                // 8-byte Folded Spill
	stp	x20, x19, [sp, #16]             // 16-byte Folded Spill
	.cfi_def_cfa_offset 32
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w30, -32
	mov	w19, w0
	adrp	x20, ($Chr)
	ldr	w8, [x20, :lo12:($Chr)]
	cbnz	w8, .LBB339_2
// %bb.1:                               // %"$2"
	adrp	x8, ($Get)
	ldr	x8, [x8, :lo12:($Get)]
	blr	x8
.LBB339_2:                              // %"$3"
	ldr	w8, [x20, :lo12:($Chr)]
	cmp	w19, w8
	b.ne	.LBB339_4
// %bb.3:
	adrp	x0, SymTab+8
	add	x0, x0, :lo12:SymTab+8
	b	.LBB339_5
.LBB339_4:                              // %"$5"
	mov	w0, #1
	bl	read0
.LBB339_5:                              // %"$6"
	ldp	x20, x19, [sp, #16]             // 16-byte Folded Reload
	ldr	x30, [sp], #32                  // 8-byte Folded Reload
	ret
.Lfunc_end339:
	.size	read1, .Lfunc_end339-read1
	.cfi_endproc
                                        // -- End function
	.globl	read0                           // -- Begin function read0
	.p2align	4
	.type	read0,@function
read0:                                  // @read0
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-64]!           // 16-byte Folded Spill
	str	x23, [sp, #16]                  // 8-byte Folded Spill
	stp	x22, x21, [sp, #32]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #48]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 64
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -48
	.cfi_offset w30, -56
	.cfi_offset w29, -64
	mov	w20, w0
	bl	skip
	tbnz	w0, #31, .LBB340_4
// %bb.1:                               // %"$3"
	cmp	w0, #40                         // =40
	b.ne	.LBB340_6
// %bb.2:                               // %"$8"
	bl	rdList
	mov	x19, x0
	tbz	w20, #0, .LBB340_38
// %bb.3:                               // %"$10"
	adrp	x8, ($Chr)
	ldr	w8, [x8, :lo12:($Chr)]
	cmp	w8, #93                         // =93
	b.eq	.LBB340_8
	b	.LBB340_38
.LBB340_4:                              // %"$4"
	tbz	w20, #0, .LBB340_31
.LBB340_5:
	adrp	x19, SymTab+8
	add	x19, x19, :lo12:SymTab+8
	b	.LBB340_38
.LBB340_6:                              // %"$7"
	cmp	w0, #91                         // =91
	b.ne	.LBB340_9
// %bb.7:                               // %"$13"
	bl	rdList
	mov	x19, x0
	adrp	x8, ($Chr)
	ldr	w8, [x8, :lo12:($Chr)]
	cmp	w8, #93                         // =93
	b.ne	.LBB340_52
.LBB340_8:                              // %"$11"
	adrp	x8, ($Get)
	ldr	x8, [x8, :lo12:($Get)]
	blr	x8
	b	.LBB340_38
.LBB340_9:                              // %"$12"
	cmp	w0, #39                         // =39
	b.ne	.LBB340_12
// %bb.10:                              // %"$17"
	adrp	x8, ($Get)
	ldr	x8, [x8, :lo12:($Get)]
	blr	x8
	and	w0, w20, #0x1
	bl	read0
	mov	x1, x0
	adrp	x0, SymTab+200
	add	x0, x0, :lo12:SymTab+200
	bl	cons
.LBB340_11:                             // %"$2"
	mov	x19, x0
	b	.LBB340_38
.LBB340_12:                             // %"$16"
	cmp	w0, #44                         // =44
	b.ne	.LBB340_16
// %bb.13:                              // %"$19"
	adrp	x8, ($Get)
	ldr	x8, [x8, :lo12:($Get)]
	blr	x8
	and	w0, w20, #0x1
	bl	read0
	mov	x19, x0
	adrp	x8, SymTab+216
	add	x8, x8, :lo12:SymTab+216
	ldr	x9, [x8, #464]
	cmp	x9, x8
	b.eq	.LBB340_38
// %bb.14:                              // %"$21"
	adrp	x20, env
	ldr	x8, [x20, :lo12:env]
	mov	x9, sp
	sub	x21, x9, #16                    // =16
	mov	sp, x21
	lsr	x10, x19, #32
	lsr	x11, x8, #32
	stp	w19, w10, [x9, #-16]
	stp	w8, w11, [x9, #-8]
	str	x21, [x20, :lo12:env]
	adrp	x0, SymTab+680
	add	x0, x0, :lo12:SymTab+680
	mov	x1, x19
	bl	idxPut
	tst	x0, #0xf
	b.ne	.LBB340_37
// %bb.15:                              // %"$23"
	ldp	w19, w8, [x0]
	b	.LBB340_20
.LBB340_16:                             // %"$18"
	cmp	w0, #96                         // =96
	b.ne	.LBB340_21
// %bb.17:                              // %"$27"
	adrp	x8, ($Get)
	ldr	x8, [x8, :lo12:($Get)]
	blr	x8
	and	w0, w20, #0x1
	bl	read0
	mov	x19, x0
	adrp	x20, env
	ldr	x8, [x20, :lo12:env]
	mov	x9, sp
	sub	x21, x9, #16                    // =16
	mov	sp, x21
	lsr	x10, x0, #32
	lsr	x11, x8, #32
	stp	w19, w10, [x9, #-16]
	stp	w8, w11, [x9, #-8]
	tst	x0, #0x6
	str	x21, [x20, :lo12:env]
	b.ne	.LBB340_37
// %bb.18:                              // %"$29"
	tbz	w19, #3, .LBB340_36
// %bb.19:                              // %"$32"
	ldp	w19, w8, [x19]
.LBB340_20:                             // %"$25"
	bfi	x19, x8, #32, #32
	b	.LBB340_37
.LBB340_21:                             // %"$26"
	cmp	w0, #34                         // =34
	b.ne	.LBB340_24
// %bb.22:                              // %"$34"
	adrp	x20, ($Get)
	ldr	x8, [x20, :lo12:($Get)]
	blr	x8
	cmp	w0, #34                         // =34
	b.ne	.LBB340_27
// %bb.23:                              // %"$35"
	ldr	x8, [x20, :lo12:($Get)]
	blr	x8
	b	.LBB340_5
.LBB340_24:                             // %"$33"
	cmp	w0, #123                        // =123
	b.ne	.LBB340_32
// %bb.25:                              // %"$46"
	adrp	x21, ($Get)
	ldr	x8, [x21, :lo12:($Get)]
	blr	x8
	cmp	w0, #125                        // =125
	b.ne	.LBB340_39
// %bb.26:                              // %"$47"
	adrp	x1, SymTab+8
	add	x1, x1, :lo12:SymTab+8
	mov	w0, #2
	bl	consSym
	b	.LBB340_46
.LBB340_27:                             // %"$36"
	bl	testEsc
	tbz	w0, #0, .LBB340_31
// %bb.28:                              // %"$39"
	mov	x8, sp
	sub	x19, x8, #32                    // =32
	mov	sp, x19
	mov	w9, #4
	stp	w9, wzr, [x8, #-32]
	mov	w9, #2
	mov	x22, x19
	str	w9, [x22, #16]!
	stur	wzr, [x8, #-12]
	adrp	x21, env
	ldr	x9, [x21, :lo12:env]
	lsr	x10, x9, #32
	stp	w9, w10, [x8, #-8]
	str	x22, [x21, :lo12:env]
	adrp	x23, ($Chr)
.LBB340_29:                             // %"$40"
                                        // =>This Inner Loop Header: Depth=1
	ldr	w0, [x23, :lo12:($Chr)]
	mov	x1, x19
	bl	charSym
	ldr	x8, [x20, :lo12:($Get)]
	blr	x8
	cmp	w0, #34                         // =34
	b.eq	.LBB340_35
// %bb.30:                              // %"$41"
                                        //   in Loop: Header=BB340_29 Depth=1
	bl	testEsc
	tbnz	w0, #0, .LBB340_29
.LBB340_31:                             // %"$5"
	bl	eofErr
.LBB340_32:                             // %"$45"
	cmp	w0, #41                         // =41
	b.eq	.LBB340_34
// %bb.33:                              // %"$63"
	cmp	w0, #93                         // =93
	b.ne	.LBB340_47
.LBB340_34:
	mov	w8, #1
	b	.LBB340_48
.LBB340_35:                             // %"$42"
	ldr	x8, [x20, :lo12:($Get)]
	blr	x8
	ldp	w2, w8, [x22]
	bfi	x2, x8, #32, #32
	adrp	x3, gcData
	add	x3, x3, :lo12:gcData
	adrp	x4, SymTab+8
	add	x4, x4, :lo12:SymTab+8
	mov	x0, xzr
	mov	x1, xzr
	mov	w5, wzr
	bl	intern
	mov	x19, x0
	ldp	w9, w8, [x22, #8]
	bfi	x9, x8, #32, #32
	str	x9, [x21, :lo12:env]
	b	.LBB340_38
.LBB340_36:                             // %"$31"
	mov	x0, x19
	bl	evList
	mov	x19, x0
.LBB340_37:                             // %"$25"
	ldp	w9, w8, [x21, #8]
	bfi	x9, x8, #32, #32
	str	x9, [x20, :lo12:env]
.LBB340_38:                             // %"$2"
	mov	x0, x19
	mov	sp, x29
	ldp	x20, x19, [sp, #48]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #32]             // 16-byte Folded Reload
	ldr	x23, [sp, #16]                  // 8-byte Folded Reload
	ldp	x29, x30, [sp], #64             // 16-byte Folded Reload
	ret
.LBB340_39:                             // %"$50.preheader"
	mov	w19, wzr
	cmp	w0, #63                         // =63
	b.le	.LBB340_42
.LBB340_40:                             // %"$51"
                                        // =>This Inner Loop Header: Depth=1
	cmp	w0, #80                         // =80
	b.ge	.LBB340_53
// %bb.41:                              // %"$54"
                                        //   in Loop: Header=BB340_40 Depth=1
	sub	w8, w0, #64                     // =64
	orr	w19, w8, w19, lsl #4
	ldr	x8, [x21, :lo12:($Get)]
	blr	x8
	cmp	w0, #63                         // =63
	b.gt	.LBB340_40
.LBB340_42:                             // %"$55.preheader"
	mov	x20, xzr
.LBB340_43:                             // %"$55"
                                        // =>This Inner Loop Header: Depth=1
	cmp	w0, #56                         // =56
	cset	w9, lt
	subs	w8, w0, #48                     // =48
	csel	w9, wzr, w9, lt
	tbz	w9, #0, .LBB340_53
// %bb.44:                              // %"$59"
                                        //   in Loop: Header=BB340_43 Depth=1
	sxtw	x8, w8
	orr	x20, x8, x20, lsl #3
	ldr	x8, [x21, :lo12:($Get)]
	blr	x8
	cmp	w0, #125                        // =125
	b.ne	.LBB340_43
// %bb.45:                              // %"$61"
	mov	w0, w19
	mov	x1, x20
	bl	extNm
	bl	extern
.LBB340_46:                             // %"$49"
	mov	x19, x0
	ldr	x8, [x21, :lo12:($Get)]
	blr	x8
	b	.LBB340_38
.LBB340_47:                             // %"$64"
	cmp	w0, #126                        // =126
	cset	w8, eq
.LBB340_48:                             // %"$62"
	cbnz	w8, .LBB340_53
// %bb.49:                              // %"$65"
	cmp	w0, #92                         // =92
	adrp	x20, ($Get)
	b.ne	.LBB340_51
// %bb.50:                              // %"$67"
	ldr	x8, [x20, :lo12:($Get)]
	blr	x8
.LBB340_51:                             // %"$68"
	adrp	x8, ($Chr)
	ldr	w19, [x8, :lo12:($Chr)]
	ldr	x8, [x20, :lo12:($Get)]
	blr	x8
	mov	w0, w19
	bl	rdAtom
	b	.LBB340_11
.LBB340_52:                             // %"$14"
	adrp	x2, .L$155
	add	x2, x2, :lo12:.L$155
	mov	x0, xzr
	mov	x1, x19
	mov	x3, xzr
	bl	err
.LBB340_53:                             // %"$53"
	bl	badInput
.Lfunc_end340:
	.size	read0, .Lfunc_end340-read0
	.cfi_endproc
                                        // -- End function
	.globl	skip                            // -- Begin function skip
	.p2align	4
	.type	skip,@function
skip:                                   // @skip
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-32]!                // 8-byte Folded Spill
	stp	x20, x19, [sp, #16]             // 16-byte Folded Spill
	.cfi_def_cfa_offset 32
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w30, -32
	adrp	x19, ($Chr)
	adrp	x20, ($Get)
	ldr	w0, [x19, :lo12:($Chr)]
	tbnz	w0, #31, .LBB341_5
.LBB341_1:                              // %"$5"
                                        // =>This Inner Loop Header: Depth=1
	cmp	w0, #32                         // =32
	b.gt	.LBB341_3
// %bb.2:                               // %"$6"
                                        //   in Loop: Header=BB341_1 Depth=1
	ldr	x8, [x20, :lo12:($Get)]
	blr	x8
	tbz	w0, #31, .LBB341_1
	b	.LBB341_5
.LBB341_3:                              // %"$7"
                                        //   in Loop: Header=BB341_1 Depth=1
	cmp	w0, #35                         // =35
	b.ne	.LBB341_5
// %bb.4:                               // %"$11"
                                        //   in Loop: Header=BB341_1 Depth=1
	bl	comment
	ldr	w0, [x19, :lo12:($Chr)]
	tbz	w0, #31, .LBB341_1
.LBB341_5:                              // %"$3"
	ldp	x20, x19, [sp, #16]             // 16-byte Folded Reload
	ldr	x30, [sp], #32                  // 8-byte Folded Reload
	ret
.Lfunc_end341:
	.size	skip, .Lfunc_end341-skip
	.cfi_endproc
                                        // -- End function
	.globl	eofErr                          // -- Begin function eofErr
	.p2align	4
	.type	eofErr,@function
eofErr:                                 // @eofErr
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	adrp	x2, .L$137
	add	x2, x2, :lo12:.L$137
	mov	x0, xzr
	mov	x1, xzr
	mov	x3, xzr
	bl	err
.Lfunc_end342:
	.size	eofErr, .Lfunc_end342-eofErr
	.cfi_endproc
                                        // -- End function
	.globl	rdList                          // -- Begin function rdList
	.p2align	4
	.type	rdList,@function
rdList:                                 // @rdList
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-48]!           // 16-byte Folded Spill
	stp	x22, x21, [sp, #16]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #32]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 48
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w30, -40
	.cfi_offset w29, -48
	mov	x8, sp
	adrp	x9, ($StkLimit)
	ldr	x9, [x9, :lo12:($StkLimit)]
	cmp	x9, x8
	b.hi	.LBB343_18
// %bb.1:                               // %"$3"
	adrp	x21, ($Get)
	ldr	x8, [x21, :lo12:($Get)]
	blr	x8
	adrp	x20, env
	b	.LBB343_4
.LBB343_2:                              // %"$15"
                                        //   in Loop: Header=BB343_4 Depth=1
	mov	x0, x19
	bl	evList
	mov	x19, x0
.LBB343_3:                              // %"$12"
                                        //   in Loop: Header=BB343_4 Depth=1
	ldp	w9, w8, [x22, #8]
	bfi	x9, x8, #32, #32
	str	x9, [x20, :lo12:env]
	tst	x19, #0xf
	b.eq	.LBB343_12
.LBB343_4:                              // %"$4"
                                        // =>This Inner Loop Header: Depth=1
	bl	skip
	cmp	w0, #126                        // =126
	b.ne	.LBB343_8
// %bb.5:                               // %"$10"
                                        //   in Loop: Header=BB343_4 Depth=1
	ldr	x8, [x21, :lo12:($Get)]
	blr	x8
	mov	w0, wzr
	bl	read0
	mov	x19, x0
	ldr	x8, [x20, :lo12:env]
	mov	x9, sp
	sub	x22, x9, #16                    // =16
	mov	sp, x22
	lsr	x10, x0, #32
	lsr	x11, x8, #32
	stp	w19, w10, [x9, #-16]
	stp	w8, w11, [x9, #-8]
	tst	x0, #0x6
	str	x22, [x20, :lo12:env]
	b.ne	.LBB343_3
// %bb.6:                               // %"$13"
                                        //   in Loop: Header=BB343_4 Depth=1
	tbz	w19, #3, .LBB343_2
// %bb.7:                               // %"$16"
                                        //   in Loop: Header=BB343_4 Depth=1
	ldp	w19, w8, [x19]
	bfi	x19, x8, #32, #32
	b	.LBB343_3
.LBB343_8:                              // %"$4"
	cmp	w0, #93                         // =93
	b.eq	.LBB343_11
// %bb.9:                               // %"$4"
	cmp	w0, #41                         // =41
	b.ne	.LBB343_15
// %bb.10:                              // %"$7"
	ldr	x8, [x21, :lo12:($Get)]
	blr	x8
.LBB343_11:                             // %"$6.loopexit"
	adrp	x19, SymTab+8
	add	x19, x19, :lo12:SymTab+8
	b	.LBB343_17
.LBB343_12:                             // %"$18"
	ldr	x8, [x20, :lo12:env]
	mov	x9, sp
	sub	x21, x9, #16                    // =16
	mov	sp, x21
	lsr	x10, x19, #32
	lsr	x11, x8, #32
	stp	w19, w10, [x9, #-16]
	stp	w8, w11, [x9, #-8]
	mov	x8, x19
	str	x21, [x20, :lo12:env]
.LBB343_13:                             // %"$19"
                                        // =>This Inner Loop Header: Depth=1
	mov	x1, x8
	ldp	w8, w9, [x8, #8]
	bfi	x8, x9, #32, #32
	tst	x8, #0xf
	b.eq	.LBB343_13
// %bb.14:                              // %"$21"
	mov	x0, x19
	bl	rdl
	ldp	w9, w8, [x21, #8]
	b	.LBB343_16
.LBB343_15:                             // %"$11"
	mov	w0, wzr
	bl	read0
	adrp	x1, SymTab+8
	add	x1, x1, :lo12:SymTab+8
	bl	cons
	mov	x19, x0
	ldr	x8, [x20, :lo12:env]
	mov	x9, sp
	sub	x10, x9, #16                    // =16
	mov	sp, x10
	lsr	x11, x0, #32
	mov	x21, x10
	stp	w19, w11, [x9, #-16]
	str	w8, [x21, #8]!
	lsr	x8, x8, #32
	str	w8, [x21, #4]
	str	x10, [x20, :lo12:env]
	mov	x1, x0
	bl	rdl
	ldp	w9, w8, [x21]
.LBB343_16:                             // %"$6"
	bfi	x9, x8, #32, #32
	str	x9, [x20, :lo12:env]
.LBB343_17:                             // %"$6"
	mov	x0, x19
	mov	sp, x29
	ldp	x20, x19, [sp, #32]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #48             // 16-byte Folded Reload
	ret
.LBB343_18:                             // %"$2"
	mov	x0, xzr
	bl	stkErr
.Lfunc_end343:
	.size	rdList, .Lfunc_end343-rdList
	.cfi_endproc
                                        // -- End function
	.globl	idxPut                          // -- Begin function idxPut
	.p2align	4
	.type	idxPut,@function
idxPut:                                 // @idxPut
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x30, x21, [sp, #-32]!           // 16-byte Folded Spill
	stp	x20, x19, [sp, #16]             // 16-byte Folded Spill
	.cfi_def_cfa_offset 32
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w30, -32
	mov	x20, x1
	ldp	w19, w8, [x0]
	bfi	x19, x8, #32, #32
	tst	x19, #0xf
	b.eq	.LBB344_9
// %bb.1:                               // %"$3"
	mov	x21, x0
.LBB344_2:                              // %"$4"
	adrp	x19, SymTab+8
	add	x19, x19, :lo12:SymTab+8
	mov	x0, x20
	mov	x1, x19
	bl	cons
	lsr	x8, x0, #32
	stp	w0, w8, [x21]
.LBB344_3:                              // %"$4"
	mov	x0, x19
	ldp	x20, x19, [sp, #16]             // 16-byte Folded Reload
	ldp	x30, x21, [sp], #32             // 16-byte Folded Reload
	ret
.LBB344_4:                              // %"$6"
                                        //   in Loop: Header=BB344_9 Depth=1
	ldp	w21, w8, [x19, #8]
	bfi	x21, x8, #32, #32
	tst	x21, #0xf
	tbnz	x0, #63, .LBB344_7
// %bb.5:                               // %"$10"
                                        //   in Loop: Header=BB344_9 Depth=1
	b.ne	.LBB344_10
// %bb.6:                               // %"$16"
                                        //   in Loop: Header=BB344_9 Depth=1
	ldp	w19, w8, [x21]
	bfi	x19, x8, #32, #32
	tst	x19, #0xf
	b.eq	.LBB344_9
	b	.LBB344_2
.LBB344_7:                              // %"$11"
                                        //   in Loop: Header=BB344_9 Depth=1
	b.ne	.LBB344_11
// %bb.8:                               // %"$12"
                                        //   in Loop: Header=BB344_9 Depth=1
	ldp	w19, w8, [x21, #8]
	bfi	x19, x8, #32, #32
	tst	x19, #0xf
	b.ne	.LBB344_13
.LBB344_9:                              // %"$5"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w0, w8, [x19]
	bfi	x0, x8, #32, #32
	mov	x1, x20
	bl	compare
	cbnz	x0, .LBB344_4
	b	.LBB344_3
.LBB344_10:                             // %"$17"
	adrp	x21, SymTab+8
	add	x21, x21, :lo12:SymTab+8
	mov	x0, x20
	mov	x1, x21
	bl	cons
	mov	x1, x21
	b	.LBB344_12
.LBB344_11:                             // %"$13"
	adrp	x21, SymTab+8
	add	x21, x21, :lo12:SymTab+8
	mov	x0, x20
	mov	x1, x21
	bl	cons
	mov	x1, x0
	mov	x0, x21
.LBB344_12:                             // %"$4"
	bl	cons
	lsr	x8, x0, #32
	stp	w0, w8, [x19, #8]
	mov	x19, x21
	b	.LBB344_3
.LBB344_13:                             // %"$15"
	adrp	x19, SymTab+8
	add	x19, x19, :lo12:SymTab+8
	mov	x0, x20
	mov	x1, x19
	bl	cons
	lsr	x8, x0, #32
	stp	w0, w8, [x21, #8]
	b	.LBB344_3
.Lfunc_end344:
	.size	idxPut, .Lfunc_end344-idxPut
	.cfi_endproc
                                        // -- End function
	.globl	testEsc                         // -- Begin function testEsc
	.p2align	4
	.type	testEsc,@function
testEsc:                                // @testEsc
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-48]!                // 8-byte Folded Spill
	stp	x22, x21, [sp, #16]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #32]             // 16-byte Folded Spill
	.cfi_def_cfa_offset 48
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w30, -48
	adrp	x20, ($Get)
.LBB345_1:                              // %"$2"
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB345_6 Depth 2
	tbnz	w0, #31, .LBB345_8
// %bb.2:                               // %"$3"
                                        //   in Loop: Header=BB345_1 Depth=1
	cmp	w0, #94                         // =94
	b.eq	.LBB345_9
// %bb.3:                               // %"$6"
                                        //   in Loop: Header=BB345_1 Depth=1
	cmp	w0, #92                         // =92
	b.ne	.LBB345_11
// %bb.4:                               // %"$13"
                                        //   in Loop: Header=BB345_1 Depth=1
	ldr	x8, [x20, :lo12:($Get)]
	blr	x8
	cmp	w0, #10                         // =10
	b.eq	.LBB345_6
	b	.LBB345_14
.LBB345_5:                              //   in Loop: Header=BB345_6 Depth=2
	mov	w8, wzr
	tbnz	wzr, #0, .LBB345_1
.LBB345_6:                              // %"$34"
                                        //   Parent Loop BB345_1 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	x8, [x20, :lo12:($Get)]
	blr	x8
	cmp	w0, #32                         // =32
	b.eq	.LBB345_5
// %bb.7:                               // %"$36"
                                        //   in Loop: Header=BB345_6 Depth=2
	cmp	w0, #9                          // =9
	cset	w8, ne
	tbz	w8, #0, .LBB345_6
	b	.LBB345_1
.LBB345_8:
	mov	w0, wzr
	b	.LBB345_13
.LBB345_9:                              // %"$7"
	ldr	x8, [x20, :lo12:($Get)]
	blr	x8
	cmp	w0, #64                         // =64
	b.eq	.LBB345_30
// %bb.10:                              // %"$9"
	mov	w8, #127
	cmp	w0, #63                         // =63
	and	w9, w0, #0x1f
	csel	w19, w8, w9, eq
	b	.LBB345_12
.LBB345_11:                             // %"$14"
	bl	getChar
	mov	w19, w0
.LBB345_12:                             // %"$4.sink.split"
	adrp	x8, ($Chr)
	str	w19, [x8, :lo12:($Chr)]
	mov	w0, #1
.LBB345_13:                             // %"$4"
	ldp	x20, x19, [sp, #32]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #16]             // 16-byte Folded Reload
	ldr	x30, [sp], #48                  // 8-byte Folded Reload
	ret
.LBB345_14:                             // %"$16"
	sub	w8, w0, #98                     // =98
	ror	w8, w8, #1
	cmp	w8, #9                          // =9
	b.hi	.LBB345_19
// %bb.15:                              // %"$16"
	mov	w19, #98
	adrp	x9, .LJTI345_0
	add	x9, x9, :lo12:.LJTI345_0
	adr	x10, .LBB345_12
	ldrb	w11, [x9, x8]
	add	x10, x10, x11, lsl #2
	br	x10
.LBB345_16:                             // %"$20"
	mov	w19, #10
	b	.LBB345_12
.LBB345_17:                             // %"$21"
	mov	w19, #13
	b	.LBB345_12
.LBB345_18:                             // %"$22"
	mov	w19, #9
	b	.LBB345_12
.LBB345_19:                             // %"$17"
	subs	w8, w0, #48                     // =48
	b.lt	.LBB345_21
// %bb.20:                              // %"$24"
	cmp	w0, #58                         // =58
	cset	w9, lt
	b	.LBB345_22
.LBB345_21:
	mov	w9, wzr
.LBB345_22:                             // %"$23"
	mov	w19, w0
	cbz	w9, .LBB345_12
// %bb.23:                              // %"$25"
	adrp	x21, ($Chr)
	mov	w22, #10
	mov	w19, w8
.LBB345_24:                             // %"$27"
                                        // =>This Inner Loop Header: Depth=1
	ldr	x8, [x20, :lo12:($Get)]
	blr	x8
	cmp	w0, #92                         // =92
	b.eq	.LBB345_12
// %bb.25:                              // %"$28"
                                        //   in Loop: Header=BB345_24 Depth=1
	ldr	w8, [x21, :lo12:($Chr)]
	cmp	w8, #48                         // =48
	b.lt	.LBB345_27
// %bb.26:                              // %"$31"
                                        //   in Loop: Header=BB345_24 Depth=1
	ldr	w8, [x21, :lo12:($Chr)]
	cmp	w8, #58                         // =58
	cset	w8, lt
	b	.LBB345_28
.LBB345_27:                             //   in Loop: Header=BB345_24 Depth=1
	mov	w8, wzr
.LBB345_28:                             // %"$30"
                                        //   in Loop: Header=BB345_24 Depth=1
	tbz	w8, #0, .LBB345_30
// %bb.29:                              // %"$33"
                                        //   in Loop: Header=BB345_24 Depth=1
	ldr	w8, [x21, :lo12:($Chr)]
	madd	w8, w19, w22, w8
	sub	w19, w8, #48                    // =48
	b	.LBB345_24
.LBB345_30:                             // %"$8"
	bl	badInput
.Lfunc_end345:
	.size	testEsc, .Lfunc_end345-testEsc
	.cfi_endproc
	.section	.rodata,"a",@progbits
.LJTI345_0:
	.byte	(.LBB345_12-.LBB345_12)>>2
	.byte	(.LBB345_19-.LBB345_12)>>2
	.byte	(.LBB345_19-.LBB345_12)>>2
	.byte	(.LBB345_19-.LBB345_12)>>2
	.byte	(.LBB345_19-.LBB345_12)>>2
	.byte	(.LBB345_19-.LBB345_12)>>2
	.byte	(.LBB345_16-.LBB345_12)>>2
	.byte	(.LBB345_19-.LBB345_12)>>2
	.byte	(.LBB345_17-.LBB345_12)>>2
	.byte	(.LBB345_18-.LBB345_12)>>2
                                        // -- End function
	.text
	.globl	charSym                         // -- Begin function charSym
	.p2align	4
	.type	charSym,@function
charSym:                                // @charSym
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-32]!                // 8-byte Folded Spill
	stp	x20, x19, [sp, #16]             // 16-byte Folded Spill
	.cfi_def_cfa_offset 32
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w30, -32
	mov	x19, x1
	mov	w20, w0
	cmp	w0, #127                        // =127
	b.gt	.LBB346_2
// %bb.1:                               // %"$4"
	mov	w0, w20
	b	.LBB346_11
.LBB346_2:                              // %"$3"
	cmp	w20, #272, lsl #12              // =1114112
	b.ne	.LBB346_4
// %bb.3:
	mov	w0, #255
	b	.LBB346_11
.LBB346_4:                              // %"$5"
	cmp	w20, #2048                      // =2048
	b.ge	.LBB346_6
// %bb.5:
	mov	w8, #192
	mov	w9, #31
	b	.LBB346_10
.LBB346_6:                              // %"$8"
	cmp	w20, #16, lsl #12               // =65536
	b.ge	.LBB346_8
// %bb.7:
	mov	w8, #224
	mov	w9, #15
	b	.LBB346_9
.LBB346_8:                              // %"$10"
	mov	w0, #240
	bfxil	w0, w20, #18, #3
	mov	x1, x19
	bl	byteSym
	mov	w8, #128
	mov	w9, #63
.LBB346_9:                              // %"$7.sink.split"
	and	w9, w9, w20, lsr #12
	orr	w0, w8, w9
	mov	x1, x19
	bl	byteSym
	mov	w8, #128
	mov	w9, #63
.LBB346_10:                             // %"$7"
	and	w9, w9, w20, lsr #6
	orr	w0, w8, w9
	mov	x1, x19
	bl	byteSym
	mov	w0, #128
	bfxil	w0, w20, #0, #6
.LBB346_11:                             // %"$2"
	mov	x1, x19
	bl	byteSym
	ldp	x20, x19, [sp, #16]             // 16-byte Folded Reload
	ldr	x30, [sp], #32                  // 8-byte Folded Reload
	ret
.Lfunc_end346:
	.size	charSym, .Lfunc_end346-charSym
	.cfi_endproc
                                        // -- End function
	.globl	intern                          // -- Begin function intern
	.p2align	4
	.type	intern,@function
intern:                                 // @intern
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-80]!                // 8-byte Folded Spill
	stp	x26, x25, [sp, #16]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #32]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #48]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #64]             // 16-byte Folded Spill
	.cfi_def_cfa_offset 80
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w30, -80
	mov	w23, w5
	mov	x22, x4
	mov	x25, x3
	mov	x21, x2
	mov	x20, x1
	mov	x19, x0
	tbz	w21, #1, .LBB347_15
// %bb.1:                               // %"$2"
	ldp	w26, w8, [x25]
	bfi	x26, x8, #32, #32
	tst	x26, #0xf
	b.eq	.LBB347_11
.LBB347_2:                              // %"$6"
	mov	x0, x21
	mov	x1, x22
	bl	isLstIntern
	mov	x24, x0
	cbnz	x0, .LBB347_41
// %bb.3:                               // %"$50"
	cbnz	x19, .LBB347_5
// %bb.4:                               // %"$47"
	mov	x0, x21
	mov	x1, x20
	bl	consSym
	mov	x19, x0
.LBB347_5:                              // %"$48"
	adrp	x1, SymTab+8
	add	x1, x1, :lo12:SymTab+8
	mov	x0, x19
	bl	cons
	lsr	x8, x0, #32
	stp	w0, w8, [x25]
	b	.LBB347_40
.LBB347_6:                              // %"$12"
                                        //   in Loop: Header=BB347_11 Depth=1
	ldp	w25, w9, [x26, #8]
	bfi	x25, x9, #32, #32
	cmp	x21, x8
	b.ls	.LBB347_9
// %bb.7:                               // %"$20"
                                        //   in Loop: Header=BB347_11 Depth=1
	tst	x25, #0xf
	b.ne	.LBB347_35
// %bb.8:                               // %"$21"
                                        //   in Loop: Header=BB347_11 Depth=1
	ldp	w26, w8, [x25, #8]
	bfi	x26, x8, #32, #32
	tst	x26, #0xf
	b.eq	.LBB347_11
	b	.LBB347_16
.LBB347_9:                              // %"$19"
                                        //   in Loop: Header=BB347_11 Depth=1
	tst	x25, #0xf
	b.ne	.LBB347_31
// %bb.10:                              // %"$35"
                                        //   in Loop: Header=BB347_11 Depth=1
	ldp	w26, w8, [x25]
	bfi	x26, x8, #32, #32
	tst	x26, #0xf
	b.ne	.LBB347_2
.LBB347_11:                             // %"$8"
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB347_12 Depth 2
	ldp	w24, w8, [x26]
	bfi	x24, x8, #32, #32
	sub	x8, x24, #8                     // =8
.LBB347_12:                             // %"$9"
                                        //   Parent Loop BB347_11 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	w8, w9, [x8]
	bfi	x8, x9, #32, #32
	tst	x8, #0x6
	b.ne	.LBB347_14
// %bb.13:                              // %"$10"
                                        //   in Loop: Header=BB347_12 Depth=2
	add	x8, x8, #8                      // =8
	b	.LBB347_12
.LBB347_14:                             // %"$11"
                                        //   in Loop: Header=BB347_11 Depth=1
	cmp	x21, x8
	b.ne	.LBB347_6
	b	.LBB347_29
.LBB347_15:                             // %"$3"
	ldp	w26, w8, [x25, #8]
	bfi	x26, x8, #32, #32
	tst	x26, #0xf
	b.eq	.LBB347_25
.LBB347_16:                             // %"$55"
	mov	x0, x21
	mov	x1, x22
	bl	isLstIntern
	mov	x24, x0
	cbnz	x0, .LBB347_41
// %bb.17:                              // %"$99"
	cbnz	x19, .LBB347_19
// %bb.18:                              // %"$101"
	mov	x0, x21
	mov	x1, x20
	bl	consSym
	mov	x19, x0
.LBB347_19:                             // %"$102"
	adrp	x1, SymTab+8
	add	x1, x1, :lo12:SymTab+8
	mov	x0, x19
	bl	cons
	lsr	x8, x0, #32
	stp	w0, w8, [x25, #8]
	b	.LBB347_40
.LBB347_20:                             // %"$61"
                                        //   in Loop: Header=BB347_25 Depth=1
	ldp	w25, w8, [x26, #8]
	bfi	x25, x8, #32, #32
	tst	x25, #0xf
	tbnz	x0, #63, .LBB347_23
// %bb.21:                              // %"$68"
                                        //   in Loop: Header=BB347_25 Depth=1
	b.ne	.LBB347_31
// %bb.22:                              // %"$84"
                                        //   in Loop: Header=BB347_25 Depth=1
	ldp	w26, w8, [x25]
	bfi	x26, x8, #32, #32
	tst	x26, #0xf
	b.eq	.LBB347_25
	b	.LBB347_2
.LBB347_23:                             // %"$69"
                                        //   in Loop: Header=BB347_25 Depth=1
	b.ne	.LBB347_35
// %bb.24:                              // %"$70"
                                        //   in Loop: Header=BB347_25 Depth=1
	ldp	w26, w8, [x25, #8]
	bfi	x26, x8, #32, #32
	tst	x26, #0xf
	b.ne	.LBB347_16
.LBB347_25:                             // %"$57"
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB347_26 Depth 2
	ldp	w24, w8, [x26]
	bfi	x24, x8, #32, #32
	sub	x8, x24, #8                     // =8
.LBB347_26:                             // %"$58"
                                        //   Parent Loop BB347_25 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	w0, w9, [x8]
	bfi	x0, x9, #32, #32
	tst	x0, #0x6
	b.ne	.LBB347_28
// %bb.27:                              // %"$59"
                                        //   in Loop: Header=BB347_26 Depth=2
	add	x8, x0, #8                      // =8
	b	.LBB347_26
.LBB347_28:                             // %"$60"
                                        //   in Loop: Header=BB347_25 Depth=1
	mov	x1, x21
	bl	cmpLong
	cbnz	x0, .LBB347_20
.LBB347_29:                             // %"$63"
	tbz	w23, #0, .LBB347_41
// %bb.30:                              // %"$15"
	lsr	x8, x19, #32
	stp	w19, w8, [x26]
	b	.LBB347_40
.LBB347_31:                             // %"$85"
	mov	x0, x21
	mov	x1, x22
	bl	isLstIntern
	mov	x24, x0
	cbnz	x0, .LBB347_41
// %bb.32:                              // %"$87"
	cbnz	x19, .LBB347_34
// %bb.33:                              // %"$40"
	mov	x0, x21
	mov	x1, x20
	bl	consSym
	mov	x19, x0
.LBB347_34:                             // %"$41"
	adrp	x20, SymTab+8
	add	x20, x20, :lo12:SymTab+8
	mov	x0, x19
	mov	x1, x20
	bl	cons
	mov	x1, x20
	b	.LBB347_39
.LBB347_35:                             // %"$22"
	mov	x0, x21
	mov	x1, x22
	bl	isLstIntern
	mov	x24, x0
	cbnz	x0, .LBB347_41
// %bb.36:                              // %"$24"
	cbnz	x19, .LBB347_38
// %bb.37:                              // %"$26"
	mov	x0, x21
	mov	x1, x20
	bl	consSym
	mov	x19, x0
.LBB347_38:                             // %"$27"
	adrp	x20, SymTab+8
	add	x20, x20, :lo12:SymTab+8
	mov	x0, x19
	mov	x1, x20
	bl	cons
	mov	x1, x0
	mov	x0, x20
.LBB347_39:                             // %"$4"
	bl	cons
	lsr	x8, x0, #32
	stp	w0, w8, [x26, #8]
.LBB347_40:                             // %"$4"
	mov	x24, x19
.LBB347_41:                             // %"$4"
	mov	x0, x24
	ldp	x20, x19, [sp, #64]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #48]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #32]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #16]             // 16-byte Folded Reload
	ldr	x30, [sp], #80                  // 8-byte Folded Reload
	ret
.Lfunc_end347:
	.size	intern, .Lfunc_end347-intern
	.cfi_endproc
                                        // -- End function
	.globl	consSym                         // -- Begin function consSym
	.p2align	4
	.type	consSym,@function
consSym:                                // @consSym
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-64]!           // 16-byte Folded Spill
	stp	x24, x23, [sp, #16]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #32]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #48]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 64
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w30, -56
	.cfi_offset w29, -64
	mov	x19, x1
	mov	x20, x0
	adrp	x22, ($Avail)
	ldr	x8, [x22, :lo12:($Avail)]
	lsr	x21, x0, #32
	cbnz	x8, .LBB348_5
// %bb.1:                               // %"$2"
	adrp	x23, env
	cbz	x19, .LBB348_3
// %bb.2:                               // %"$4"
	ldr	x9, [x23, :lo12:env]
	mov	x10, sp
	sub	x8, x10, #16                    // =16
	mov	sp, x8
	stp	w20, w21, [x10, #-16]
	lsr	x11, x9, #32
	stp	w9, w11, [x10, #-8]
	sub	x9, sp, #16                     // =16
	mov	sp, x9
	mov	x10, x19
	mov	x24, x8
	b	.LBB348_4
.LBB348_3:                              // %"$5"
	ldr	x8, [x23, :lo12:env]
	sub	x9, sp, #16                     // =16
	mov	sp, x9
	mov	x10, x20
	mov	x24, x9
.LBB348_4:                              // %"$6"
	lsr	x11, x10, #32
	lsr	x12, x8, #32
	stp	w10, w11, [x9]
	stp	w8, w12, [x9, #8]
	str	x9, [x23, :lo12:env]
	bl	gc
	ldp	w9, w8, [x24, #8]
	bfi	x9, x8, #32, #32
	str	x9, [x23, :lo12:env]
	ldr	x8, [x22, :lo12:($Avail)]
.LBB348_5:                              // %"$3"
	ldp	w10, w9, [x8]
	bfi	x10, x9, #32, #32
	str	x10, [x22, :lo12:($Avail)]
	orr	x0, x8, #0x8
	cmp	x19, #0                         // =0
	stp	w20, w21, [x8]
	csel	x8, x19, x0, ne
	lsr	x9, x8, #32
	stp	w8, w9, [x0]
	mov	sp, x29
	ldp	x20, x19, [sp, #48]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #32]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #64             // 16-byte Folded Reload
	ret
.Lfunc_end348:
	.size	consSym, .Lfunc_end348-consSym
	.cfi_endproc
                                        // -- End function
	.globl	badInput                        // -- Begin function badInput
	.p2align	4
	.type	badInput,@function
badInput:                               // @badInput
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	adrp	x8, ($Chr)
	ldr	w8, [x8, :lo12:($Chr)]
	strb	w8, [sp, #12]
	strb	wzr, [sp, #13]
	adrp	x2, .L$138
	add	x2, x2, :lo12:.L$138
	add	x3, sp, #12                     // =12
	mov	x0, xzr
	mov	x1, xzr
	bl	err
.Lfunc_end349:
	.size	badInput, .Lfunc_end349-badInput
	.cfi_endproc
                                        // -- End function
	.globl	extNm                           // -- Begin function extNm
	.p2align	4
	.type	extNm,@function
extNm:                                  // @extNm
	.cfi_startproc
// %bb.0:                               // %"$1"
	and	w8, w0, #0xff
	ubfx	x9, x1, #20, #12
	lsr	w10, w0, #8
	lsl	x11, x1, #16
	and	x11, x11, #0xfff000000000000
	orr	x10, x11, x10, lsl #40
	orr	x9, x10, x9, lsl #28
	bfi	x9, x8, #20, #8
	bfxil	x9, x1, #0, #20
	mov	w0, #2
	bfi	x0, x9, #4, #60
	ret
.Lfunc_end350:
	.size	extNm, .Lfunc_end350-extNm
	.cfi_endproc
                                        // -- End function
	.globl	extern                          // -- Begin function extern
	.p2align	4
	.type	extern,@function
extern:                                 // @extern
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x30, x25, [sp, #-64]!           // 16-byte Folded Spill
	stp	x24, x23, [sp, #16]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #32]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #48]             // 16-byte Folded Spill
	.cfi_def_cfa_offset 64
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w30, -64
	mov	x19, x0
	mov	x22, #-9
	movk	x22, #16383, lsl #48
	bl	need3
	mov	x24, xzr
	adrp	x23, ($Extern)
	ldr	x25, [x23, :lo12:($Extern)]
.LBB351_1:                              // %"$2"
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB351_2 Depth 2
	add	x24, x24, #1                    // =1
	ldp	w20, w8, [x25]
	bfi	x20, x8, #32, #32
	ldp	w9, w8, [x20, #-8]
	bfi	x9, x8, #32, #32
	and	x8, x9, #0xfffffffffffffff7
	tst	x8, #0x6
	b.ne	.LBB351_3
.LBB351_2:                              // %"$4"
                                        //   Parent Loop BB351_1 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	w8, w9, [x8, #8]
	bfi	x8, x9, #32, #32
	tst	x8, #0x6
	b.eq	.LBB351_2
.LBB351_3:                              // %"$5"
                                        //   in Loop: Header=BB351_1 Depth=1
	and	x8, x8, x22
	cmp	x8, x19
	b.eq	.LBB351_14
// %bb.4:                               // %"$6"
                                        //   in Loop: Header=BB351_1 Depth=1
	ldp	w21, w9, [x25, #8]
	bfi	x21, x9, #32, #32
	cmp	x19, x8
	b.ls	.LBB351_7
// %bb.5:                               // %"$10"
                                        //   in Loop: Header=BB351_1 Depth=1
	tst	x21, #0xf
	b.ne	.LBB351_10
// %bb.6:                               // %"$11"
                                        //   in Loop: Header=BB351_1 Depth=1
	ldp	w25, w8, [x21, #8]
	bfi	x25, x8, #32, #32
	tst	x25, #0xf
	b.eq	.LBB351_1
	b	.LBB351_11
.LBB351_7:                              // %"$9"
                                        //   in Loop: Header=BB351_1 Depth=1
	tst	x21, #0xf
	b.ne	.LBB351_12
// %bb.8:                               // %"$15"
                                        //   in Loop: Header=BB351_1 Depth=1
	ldp	w25, w8, [x21]
	bfi	x25, x8, #32, #32
	tst	x25, #0xf
	b.eq	.LBB351_1
// %bb.9:                               // %"$18"
	mov	x0, x19
	bl	consExt
	mov	x20, x0
	adrp	x1, SymTab+8
	add	x1, x1, :lo12:SymTab+8
	bl	cons
	lsr	x8, x0, #32
	stp	w0, w8, [x21]
	b	.LBB351_14
.LBB351_10:                             // %"$12"
	mov	x0, x19
	bl	consExt
	mov	x20, x0
	adrp	x21, SymTab+8
	add	x21, x21, :lo12:SymTab+8
	mov	x1, x21
	bl	cons
	mov	x1, x0
	mov	x0, x21
	b	.LBB351_13
.LBB351_11:                             // %"$14"
	mov	x0, x19
	bl	consExt
	mov	x20, x0
	adrp	x1, SymTab+8
	add	x1, x1, :lo12:SymTab+8
	bl	cons
	lsr	x8, x0, #32
	stp	w0, w8, [x21, #8]
	b	.LBB351_14
.LBB351_12:                             // %"$16"
	mov	x0, x19
	bl	consExt
	mov	x20, x0
	adrp	x21, SymTab+8
	add	x21, x21, :lo12:SymTab+8
	mov	x1, x21
	bl	cons
	mov	x1, x21
.LBB351_13:                             // %"$7"
	bl	cons
	lsr	x8, x0, #32
	stp	w0, w8, [x25, #8]
.LBB351_14:                             // %"$7"
	lsr	x9, x24, #1
	mov	w8, #1
	lsl	x8, x8, x9
	adrp	x10, ($ExtCnt)
	ldr	x10, [x10, :lo12:($ExtCnt)]
	cmp	x8, x10
	b.ls	.LBB351_25
// %bb.15:                              // %"$19"
	ldr	x8, [x23, :lo12:($Extern)]
	adrp	x10, ($ExtSkip)
	ldr	x11, [x10, :lo12:($ExtSkip)]
	add	x11, x11, #1                    // =1
	cmp	x11, x9
	b.ls	.LBB351_26
// %bb.16:                              // %"$21"
	str	xzr, [x10, :lo12:($ExtSkip)]
.LBB351_17:                             // %"$33"
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB351_18 Depth 2
	ldp	w10, w9, [x8]
	bfi	x10, x9, #32, #32
	ldp	w10, w9, [x10, #-8]
	bfi	x10, x9, #32, #32
	and	x9, x10, #0xfffffffffffffff7
	tst	x9, #0x6
	b.ne	.LBB351_19
.LBB351_18:                             // %"$35"
                                        //   Parent Loop BB351_17 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	w9, w10, [x9, #8]
	bfi	x9, x10, #32, #32
	tst	x9, #0x6
	b.eq	.LBB351_18
.LBB351_19:                             // %"$36"
                                        //   in Loop: Header=BB351_17 Depth=1
	and	x10, x9, x22
	cmp	x10, x19
	b.eq	.LBB351_25
// %bb.20:                              // %"$37"
                                        //   in Loop: Header=BB351_17 Depth=1
	ldp	w9, w11, [x8, #8]
	bfi	x9, x11, #32, #32
	cmp	x19, x10
	b.ls	.LBB351_23
// %bb.21:                              // %"$39"
                                        //   in Loop: Header=BB351_17 Depth=1
	ldp	w10, w11, [x9, #8]
	bfi	x10, x11, #32, #32
	ldrb	w11, [x10, #8]
	tst	w11, #0xf
	b.ne	.LBB351_25
// %bb.22:                              // %"$42"
                                        //   in Loop: Header=BB351_17 Depth=1
	ldp	w11, w12, [x10]
	ldp	w14, w13, [x8]
	stp	w14, w13, [x10]
	stp	w11, w12, [x8]
	ldp	w10, w8, [x10, #8]
	bfi	x10, x8, #32, #32
	mov	x8, x10
	ldr	w11, [x8, #8]!
	ldr	w12, [x8, #4]
	ldp	w14, w13, [x10]
	stp	w14, w13, [x8]
	ldp	w13, w8, [x9]
	stp	w13, w8, [x10]
	mov	x8, x9
	ldr	w10, [x8, #8]!
	ldr	w13, [x8, #4]
	stp	w10, w13, [x9]
	stp	w11, w12, [x8]
	mov	x8, x11
	bfi	x8, x12, #32, #32
	b	.LBB351_17
.LBB351_23:                             // %"$40"
                                        //   in Loop: Header=BB351_17 Depth=1
	ldp	w10, w11, [x9]
	bfi	x10, x11, #32, #32
	ldrb	w11, [x10, #8]
	tst	w11, #0xf
	b.ne	.LBB351_25
// %bb.24:                              // %"$43"
                                        //   in Loop: Header=BB351_17 Depth=1
	ldp	w11, w12, [x10]
	ldp	w14, w13, [x8]
	stp	w14, w13, [x10]
	stp	w11, w12, [x8]
	ldp	w10, w8, [x10, #8]
	bfi	x10, x8, #32, #32
	ldp	w8, w11, [x10]
	mov	x12, x10
	ldr	w13, [x12, #8]!
	ldr	w14, [x12, #4]
	stp	w13, w14, [x10]
	mov	x10, x9
	ldr	w13, [x10, #8]!
	ldr	w14, [x10, #4]
	stp	w13, w14, [x12]
	ldp	w12, w13, [x9]
	stp	w12, w13, [x10]
	stp	w8, w11, [x9]
	bfi	x8, x11, #32, #32
	b	.LBB351_17
.LBB351_25:                             // %"$20"
	mov	x0, x20
	ldp	x20, x19, [sp, #48]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #32]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #16]             // 16-byte Folded Reload
	ldp	x30, x25, [sp], #64             // 16-byte Folded Reload
	ret
.LBB351_26:                             // %"$22"
	str	x11, [x10, :lo12:($ExtSkip)]
	b	.LBB351_28
.LBB351_27:                             // %"$27"
                                        //   in Loop: Header=BB351_28 Depth=1
	and	x10, x10, x22
	cmp	x19, x10
	add	x10, x8, #8                     // =8
	csel	x8, x8, x10, ls
	ldp	w8, w10, [x8]
	bfi	x8, x10, #32, #32
	subs	x9, x9, #1                      // =1
	b.eq	.LBB351_17
.LBB351_28:                             // %"$24"
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB351_29 Depth 2
	ldp	w11, w10, [x8]
	bfi	x11, x10, #32, #32
	ldp	w8, w10, [x8, #8]
	bfi	x8, x10, #32, #32
	ldp	w11, w10, [x11, #-8]
	bfi	x11, x10, #32, #32
	and	x10, x11, #0xfffffffffffffff7
	tst	x10, #0x6
	b.ne	.LBB351_27
.LBB351_29:                             // %"$26"
                                        //   Parent Loop BB351_28 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	w10, w11, [x10, #8]
	bfi	x10, x11, #32, #32
	tst	x10, #0x6
	b.eq	.LBB351_29
	b	.LBB351_27
.Lfunc_end351:
	.size	extern, .Lfunc_end351-extern
	.cfi_endproc
                                        // -- End function
	.globl	rdAtom                          // -- Begin function rdAtom
	.p2align	4
	.type	rdAtom,@function
rdAtom:                                 // @rdAtom
	.cfi_startproc
// %bb.0:                               // %"$1"
	sub	sp, sp, #144                    // =144
	stp	x29, x30, [sp, #48]             // 16-byte Folded Spill
	stp	x28, x27, [sp, #64]             // 16-byte Folded Spill
	stp	x26, x25, [sp, #80]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #96]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #112]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #128]            // 16-byte Folded Spill
	.cfi_def_cfa_offset 144
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	mov	w19, w0
	mov	w8, #4
	mov	w9, #2
	adrp	x10, ($Chr)
	adrp	x21, env
	add	x21, x21, :lo12:env
	add	x11, sp, #32                    // =32
	ldr	x12, [x21]
	str	x11, [x21]
	ldr	x22, [x21, #88]
	stp	x22, x12, [sp, #32]
	ldr	w20, [x10, :lo12:($Chr)]
	cmp	w20, #126                       // =126
	cset	w10, eq
	cmp	w0, #37                         // =37
	csel	w10, wzr, w10, ne
	str	x8, [sp]
	str	x9, [sp, #16]
	adrp	x23, env+88
	adrp	x24, ($Get)
	cbz	w10, .LBB352_3
// %bb.1:                               // %"$4"
	ldp	w8, w9, [x22, #8]
	bfi	x8, x9, #32, #32
	adrp	x9, SymTab+8
	add	x9, x9, :lo12:SymTab+8
	cmp	x8, x9
	b.eq	.LBB352_27
// %bb.2:                               // %"$7"
	str	x8, [x23, :lo12:env+88]
	ldr	x8, [x24, :lo12:($Get)]
	blr	x8
	mov	w19, w0
	ldr	x8, [x24, :lo12:($Get)]
	blr	x8
	mov	w20, w0
.LBB352_3:                              // %"$5"
	mov	x8, sp
	adrp	x9, env
	ldr	x10, [x9, :lo12:env]
	str	x10, [sp, #24]
	add	x8, x8, #16                     // =16
	str	x8, [x9, :lo12:env]
	mov	x1, sp
	mov	w0, w19
	bl	charSym
	adrp	x26, SymTab+40
	add	x26, x26, :lo12:SymTab+40
	adrp	x27, ($Cell)
	adrp	x25, ($Cell)
	add	x25, x25, :lo12:($Cell)
	mov	w28, #4
	mov	w29, #2
	adrp	x19, ($Delim)
	add	x19, x19, :lo12:($Delim)
	b	.LBB352_6
.LBB352_4:                              // %"$20"
                                        //   in Loop: Header=BB352_6 Depth=1
	mov	x1, sp
	mov	w0, w20
	bl	charSym
.LBB352_5:                              // %"$13"
                                        //   in Loop: Header=BB352_6 Depth=1
	ldr	x8, [x24, :lo12:($Get)]
	blr	x8
	mov	w20, w0
.LBB352_6:                              // %"$8"
                                        // =>This Inner Loop Header: Depth=1
	tbnz	w20, #31, .LBB352_14
// %bb.7:                               // %"$9"
                                        //   in Loop: Header=BB352_6 Depth=1
	cmp	w20, #126                       // =126
	b.ne	.LBB352_11
// %bb.8:                               // %"$11"
                                        //   in Loop: Header=BB352_6 Depth=1
	ldr	x0, [sp, #16]
	bl	requestSym
	mov	x1, x0
	ldp	w8, w9, [x0]
	bfi	x8, x9, #32, #32
	tst	x8, #0xf
	b.ne	.LBB352_28
// %bb.9:                               // %"$15"
                                        //   in Loop: Header=BB352_6 Depth=1
	ldp	w8, w9, [x8]
	bfi	x8, x9, #32, #32
	cmp	x26, x8
	b.ne	.LBB352_28
// %bb.10:                              // %"$17"
                                        //   in Loop: Header=BB352_6 Depth=1
	str	x25, [x23, :lo12:env+88]
	str	x1, [x27, :lo12:($Cell)]
	str	x28, [sp]
	str	x29, [sp, #16]
	b	.LBB352_5
.LBB352_11:                             // %"$12"
                                        //   in Loop: Header=BB352_6 Depth=1
	mov	x0, x19
	mov	w1, w20
	bl	strchr2
	cbnz	x0, .LBB352_14
// %bb.12:                              // %"$18"
                                        //   in Loop: Header=BB352_6 Depth=1
	cmp	w20, #92                        // =92
	b.ne	.LBB352_4
// %bb.13:                              // %"$19"
                                        //   in Loop: Header=BB352_6 Depth=1
	ldr	x8, [x24, :lo12:($Get)]
	blr	x8
	mov	w20, w0
	b	.LBB352_4
.LBB352_14:                             // %"$10"
	ldr	x19, [sp, #16]
	cmp	x19, #2                         // =2
	b.eq	.LBB352_26
// %bb.15:                              // %"$22"
	ldr	x20, [x23, :lo12:env+88]
	cmp	x20, x25
	b.ne	.LBB352_18
// %bb.16:                              // %"$25"
	ldp	w9, w8, [x20]
	bfi	x9, x8, #32, #32
	ldp	w9, w8, [x9]
	bfi	x9, x8, #32, #32
	ldp	w3, w8, [x9, #8]
	bfi	x3, x8, #32, #32
	adrp	x1, SymTab+8
	add	x1, x1, :lo12:SymTab+8
	mov	x0, xzr
	mov	x2, x19
	mov	x4, x1
	mov	w5, wzr
.LBB352_17:                             // %"$21"
	bl	intern
	b	.LBB352_23
.LBB352_18:                             // %"$24"
	adrp	x8, SymTab+488
	ldr	x8, [x8, :lo12:SymTab+488]
	lsr	x1, x8, #4
	mov	x0, x19
	mov	w2, #46
	mov	w3, wzr
	bl	symToNum
	cbnz	x0, .LBB352_23
// %bb.19:                              // %"$26"
	mov	x0, x19
	bl	anonymous
	cbnz	x0, .LBB352_23
// %bb.20:                              // %"$28"
	ldp	w9, w8, [x20]
	bfi	x9, x8, #32, #32
	adrp	x8, SymTab+152
	add	x8, x8, :lo12:SymTab+152
	cmp	x9, x8
	b.ne	.LBB352_24
// %bb.21:                              // %"$31"
	ldp	w9, w8, [x20, #8]
	adrp	x10, SymTab+8
	add	x10, x10, :lo12:SymTab+8
	bfi	x9, x8, #32, #32
	cmp	x9, x10
	cset	w8, eq
	cbnz	w8, .LBB352_25
.LBB352_22:                             // %"$32"
	mov	x0, x19
	bl	requestSym
.LBB352_23:                             // %"$21"
	str	x22, [x21, #88]
	ldr	x8, [sp, #40]
	str	x8, [x21]
	ldp	x20, x19, [sp, #128]            // 16-byte Folded Reload
	ldp	x22, x21, [sp, #112]            // 16-byte Folded Reload
	ldp	x24, x23, [sp, #96]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #80]             // 16-byte Folded Reload
	ldp	x28, x27, [sp, #64]             // 16-byte Folded Reload
	ldp	x29, x30, [sp, #48]             // 16-byte Folded Reload
	add	sp, sp, #144                    // =144
	ret
.LBB352_24:
	mov	w8, wzr
	cbz	w8, .LBB352_22
.LBB352_25:                             // %"$33"
	adrp	x20, SymTab+8
	add	x20, x20, :lo12:SymTab+8
	mov	x0, x19
	mov	x1, x20
	bl	consSym
	add	x3, x20, #104                   // =104
	mov	x1, xzr
	mov	x2, x19
	mov	x4, x20
	mov	w5, #1
	b	.LBB352_17
.LBB352_26:                             // %"$23"
	bl	badInput
.LBB352_27:                             // %"$6"
	adrp	x1, SymTab+952
	add	x1, x1, :lo12:SymTab+952
.LBB352_28:                             // %"$16"
	mov	x0, xzr
	bl	symNspErr
.Lfunc_end352:
	.size	rdAtom, .Lfunc_end352-rdAtom
	.cfi_endproc
                                        // -- End function
	.globl	symNspErr                       // -- Begin function symNspErr
	.p2align	4
	.type	symNspErr,@function
symNspErr:                              // @symNspErr
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	adrp	x2, .L$125
	add	x2, x2, :lo12:.L$125
	mov	x3, xzr
	bl	err
.Lfunc_end353:
	.size	symNspErr, .Lfunc_end353-symNspErr
	.cfi_endproc
                                        // -- End function
	.globl	requestSym                      // -- Begin function requestSym
	.p2align	4
	.type	requestSym,@function
requestSym:                             // @requestSym
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x30, x19, [sp, #-16]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w19, -8
	.cfi_offset w30, -16
	mov	x19, x0
	adrp	x1, SymTab+112
	add	x1, x1, :lo12:SymTab+112
	bl	isIntern
	cbz	x0, .LBB354_2
// %bb.1:                               // %"$4"
	ldp	x30, x19, [sp], #16             // 16-byte Folded Reload
	ret
.LBB354_2:                              // %"$3"
	adrp	x8, env+88
	ldr	x8, [x8, :lo12:env+88]
	ldp	w10, w9, [x8]
	bfi	x10, x9, #32, #32
	ldp	w10, w9, [x10]
	bfi	x10, x9, #32, #32
	ldp	w3, w9, [x10, #8]
	bfi	x3, x9, #32, #32
	ldp	w4, w9, [x8, #8]
	bfi	x4, x9, #32, #32
	adrp	x1, SymTab+8
	add	x1, x1, :lo12:SymTab+8
	mov	x2, x19
	mov	w5, wzr
	bl	intern
	ldp	x30, x19, [sp], #16             // 16-byte Folded Reload
	ret
.Lfunc_end354:
	.size	requestSym, .Lfunc_end354-requestSym
	.cfi_endproc
                                        // -- End function
	.globl	strchr2                         // -- Begin function strchr2
	.p2align	4
	.type	strchr2,@function
strchr2:                                // @strchr2
	.cfi_startproc
// %bb.0:                               // %"$1"
	ldrb	w8, [x0]
	cbz	w8, .LBB355_3
.LBB355_1:                              // %"$3"
                                        // =>This Inner Loop Header: Depth=1
	cmp	w8, w1, uxtb
	b.eq	.LBB355_4
// %bb.2:                               // %"$5"
                                        //   in Loop: Header=BB355_1 Depth=1
	add	x0, x0, #1                      // =1
	ldrb	w8, [x0]
	cbnz	w8, .LBB355_1
.LBB355_3:                              // %"$4"
	mov	x0, xzr
.LBB355_4:                              // %"$6"
	ret
.Lfunc_end355:
	.size	strchr2, .Lfunc_end355-strchr2
	.cfi_endproc
                                        // -- End function
	.globl	symToNum                        // -- Begin function symToNum
	.p2align	4
	.type	symToNum,@function
symToNum:                               // @symToNum
	.cfi_startproc
// %bb.0:                               // %"$1"
	sub	sp, sp, #96                     // =96
	stp	x30, x25, [sp, #32]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #48]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #64]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #80]             // 16-byte Folded Spill
	.cfi_def_cfa_offset 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w30, -64
	mov	w20, w3
	mov	w21, w2
	mov	x19, x1
	stp	xzr, x0, [sp, #16]
	mov	w8, #2
	str	x8, [sp]
.LBB356_1:                              // %"$2"
                                        // =>This Inner Loop Header: Depth=1
	add	x0, sp, #16                     // =16
	bl	symByte
	and	w8, w0, #0xff
	cmp	w8, #32                         // =32
	b.hi	.LBB356_3
// %bb.2:                               // %"$3"
                                        //   in Loop: Header=BB356_1 Depth=1
	tst	w0, #0xff
	b.ne	.LBB356_1
	b	.LBB356_27
.LBB356_3:                              // %"$4"
	cmp	w8, #43                         // =43
	b.ne	.LBB356_5
// %bb.4:
	mov	w22, wzr
	b	.LBB356_7
.LBB356_5:                              // %"$8"
	and	w8, w0, #0xff
	cmp	w8, #45                         // =45
	b.ne	.LBB356_8
// %bb.6:
	mov	w22, #1
.LBB356_7:                              // %"$-1"
	add	x0, sp, #16                     // =16
	bl	symByte
	tst	w0, #0xff
	b.ne	.LBB356_9
	b	.LBB356_27
.LBB356_8:
	mov	w22, wzr
.LBB356_9:                              // %"$7"
	sub	w9, w0, #48                     // =48
	and	w8, w9, #0xff
	cmp	w8, #10                         // =10
	b.hs	.LBB356_27
// %bb.10:                              // %"$15"
	mov	w8, wzr
	adrp	x23, env
	ldr	x10, [x23, :lo12:env]
	mov	x11, sp
	str	x11, [x23, :lo12:env]
	and	x9, x9, #0xff
	mov	w11, #2
	bfi	x11, x9, #4, #8
	stp	x11, x10, [sp]
	b	.LBB356_12
.LBB356_11:                             // %"$34"
                                        //   in Loop: Header=BB356_12 Depth=1
	mov	w8, #1
	tbnz	w24, #0, .LBB356_26
.LBB356_12:                             // %"$16"
                                        // =>This Inner Loop Header: Depth=1
	mov	w24, w8
	add	x0, sp, #16                     // =16
	bl	symByte
	tst	w0, #0xff
	b.eq	.LBB356_29
// %bb.13:                              // %"$17"
                                        //   in Loop: Header=BB356_12 Depth=1
	tbz	w24, #0, .LBB356_15
// %bb.14:                              // %"$20"
                                        //   in Loop: Header=BB356_12 Depth=1
	cmp	x19, #0                         // =0
	cset	w8, eq
	cbz	w8, .LBB356_16
	b	.LBB356_21
.LBB356_15:                             //   in Loop: Header=BB356_12 Depth=1
	mov	w8, wzr
	cbnz	w8, .LBB356_21
.LBB356_16:                             // %"$21"
                                        //   in Loop: Header=BB356_12 Depth=1
	and	w8, w0, #0xff
	cmp	w8, w21, uxtb
	b.eq	.LBB356_11
// %bb.17:                              // %"$33"
                                        //   in Loop: Header=BB356_12 Depth=1
	cmp	w8, w20, uxtb
	mov	w8, w24
	b.eq	.LBB356_12
// %bb.18:                              // %"$38"
                                        //   in Loop: Header=BB356_12 Depth=1
	sub	w25, w0, #48                    // =48
	and	w8, w25, #0xff
	cmp	w8, #10                         // =10
	b.hs	.LBB356_26
// %bb.19:                              // %"$40"
                                        //   in Loop: Header=BB356_12 Depth=1
	ldr	x0, [sp]
	bl	tenfold
	and	x8, x25, #0xff
	mov	w1, #2
	bfi	x1, x8, #4, #8
	bl	addu
	str	x0, [sp]
	mov	w8, w24
	tbz	w24, #0, .LBB356_12
// %bb.20:                              // %"$41"
                                        //   in Loop: Header=BB356_12 Depth=1
	sub	x19, x19, #1                    // =1
	mov	w8, w24
	b	.LBB356_12
.LBB356_21:                             // %"$22"
	sub	w8, w0, #48                     // =48
	and	w8, w8, #0xff
	cmp	w8, #10                         // =10
	b.hs	.LBB356_26
// %bb.22:                              // %"$24"
	cmp	w8, #5                          // =5
	b.lo	.LBB356_24
// %bb.23:                              // %"$25"
	ldr	x0, [sp]
	mov	w1, #18
	bl	addu
	str	x0, [sp]
.LBB356_24:                             // %"$27"
                                        // =>This Inner Loop Header: Depth=1
	add	x0, sp, #16                     // =16
	bl	symByte
	tst	w0, #0xff
	b.eq	.LBB356_29
// %bb.25:                              // %"$28"
                                        //   in Loop: Header=BB356_24 Depth=1
	sub	w8, w0, #48                     // =48
	and	w8, w8, #0xff
	cmp	w8, #10                         // =10
	b.lo	.LBB356_24
.LBB356_26:                             // %"$23"
	ldr	x8, [sp, #8]
	str	x8, [x23, :lo12:env]
.LBB356_27:                             // %"$5"
	mov	x0, xzr
.LBB356_28:                             // %"$5"
	ldp	x20, x19, [sp, #80]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #64]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #48]             // 16-byte Folded Reload
	ldp	x30, x25, [sp, #32]             // 16-byte Folded Reload
	add	sp, sp, #96                     // =96
	ret
.LBB356_29:                             // %"$18"
	tbz	w24, #0, .LBB356_32
// %bb.30:                              // %"$45.preheader"
	sub	x19, x19, #1                    // =1
	tbnz	x19, #63, .LBB356_32
.LBB356_31:                             // %"$46"
                                        // =>This Inner Loop Header: Depth=1
	ldr	x0, [sp]
	bl	tenfold
	str	x0, [sp]
	sub	x19, x19, #1                    // =1
	tbz	x19, #63, .LBB356_31
.LBB356_32:                             // %"$44"
	ldp	x8, x9, [sp]
	eor	x10, x8, #0x8
	cmp	x8, #2                          // =2
	csel	x10, x8, x10, eq
	cmp	w22, #0                         // =0
	csel	x0, x8, x10, eq
	str	x9, [x23, :lo12:env]
	b	.LBB356_28
.Lfunc_end356:
	.size	symToNum, .Lfunc_end356-symToNum
	.cfi_endproc
                                        // -- End function
	.globl	anonymous                       // -- Begin function anonymous
	.p2align	4
	.type	anonymous,@function
anonymous:                              // @anonymous
	.cfi_startproc
// %bb.0:                               // %"$1"
	sub	sp, sp, #32                     // =32
	stp	x30, x19, [sp, #16]             // 16-byte Folded Spill
	.cfi_def_cfa_offset 32
	.cfi_offset w19, -8
	.cfi_offset w30, -16
	stp	xzr, x0, [sp]
	mov	x0, sp
	bl	symByte
	and	w8, w0, #0xff
	cmp	w8, #36                         // =36
	b.ne	.LBB357_6
// %bb.1:                               // %"$3"
	mov	x0, sp
	bl	symByte
	sub	w8, w0, #48                     // =48
	and	w9, w8, #0xff
	cmp	w9, #7                          // =7
	b.hi	.LBB357_6
// %bb.2:                               // %"$5"
	and	x19, x8, #0xff
.LBB357_3:                              // %"$6"
                                        // =>This Inner Loop Header: Depth=1
	mov	x0, sp
	bl	symByte
	tst	w0, #0xff
	b.eq	.LBB357_8
// %bb.4:                               // %"$7"
                                        //   in Loop: Header=BB357_3 Depth=1
	sub	w8, w0, #48                     // =48
	and	w9, w8, #0xff
	cmp	w9, #7                          // =7
	b.hi	.LBB357_6
// %bb.5:                               // %"$10"
                                        //   in Loop: Header=BB357_3 Depth=1
	and	x8, x8, #0xff
	orr	x19, x8, x19, lsl #3
	b	.LBB357_3
.LBB357_6:
	mov	x0, xzr
.LBB357_7:                              // %"$8"
	ldp	x30, x19, [sp, #16]             // 16-byte Folded Reload
	add	sp, sp, #32                     // =32
	ret
.LBB357_8:                              // %"$9"
	mov	w0, #8
	bfi	x0, x19, #4, #60
	b	.LBB357_7
.Lfunc_end357:
	.size	anonymous, .Lfunc_end357-anonymous
	.cfi_endproc
                                        // -- End function
	.globl	symByte                         // -- Begin function symByte
	.p2align	4
	.type	symByte,@function
symByte:                                // @symByte
	.cfi_startproc
// %bb.0:                               // %"$1"
	ldp	w8, w9, [x0]
	bfi	x8, x9, #32, #32
	cbnz	x8, .LBB358_7
// %bb.1:                               // %"$2"
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	cmp	x9, #2                          // =2
	b.ne	.LBB358_3
// %bb.2:                               // %"$6"
	mov	w0, wzr
	ret
.LBB358_3:                              // %"$5"
	tbz	w9, #1, .LBB358_5
// %bb.4:                               // %"$8"
	lsr	x8, x9, #4
	mov	w9, #2
	b	.LBB358_6
.LBB358_5:                              // %"$7"
	ldp	w8, w10, [x9, #-4]
	stp	w8, w10, [x0]
	bfi	x8, x10, #32, #32
	ldp	w9, w10, [x9, #4]
	bfi	x9, x10, #32, #32
.LBB358_6:                              // %"$4"
	lsr	x10, x9, #32
	stp	w9, w10, [x0, #8]
.LBB358_7:                              // %"$3"
	lsr	x9, x8, #8
	lsr	x10, x8, #40
	stp	w9, w10, [x0]
	mov	w0, w8
	ret
.Lfunc_end358:
	.size	symByte, .Lfunc_end358-symByte
	.cfi_endproc
                                        // -- End function
	.globl	addu                            // -- Begin function addu
	.p2align	4
	.type	addu,@function
addu:                                   // @addu
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-80]!           // 16-byte Folded Spill
	str	x25, [sp, #16]                  // 8-byte Folded Spill
	stp	x24, x23, [sp, #32]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #48]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #64]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 80
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -64
	.cfi_offset w30, -72
	.cfi_offset w29, -80
	mov	x20, x1
	mov	x21, x0
	tbz	w21, #1, .LBB359_4
// %bb.1:                               // %"$4"
	tbz	w20, #1, .LBB359_6
// %bb.2:                               // %"$5"
	lsr	x8, x21, #4
	add	x0, x8, x20, lsr #4
	tbz	x0, #60, .LBB359_30
// %bb.3:                               // %"$8"
	bl	boxNum
	b	.LBB359_17
.LBB359_4:                              // %"$3"
	tbz	w20, #1, .LBB359_12
// %bb.5:
	mov	x8, x21
	b	.LBB359_7
.LBB359_6:
	mov	x8, x20
	mov	x20, x21
.LBB359_7:                              // %"$-1"
	ldp	w21, w9, [x8, #4]
	ldp	w8, w10, [x8, #-4]
	bfi	x21, x9, #32, #32
	bfi	x8, x10, #32, #32
	adds	x0, x8, x20, lsr #4
	b.lo	.LBB359_16
// %bb.8:                               // %"$14"
	mov	x1, x21
	bl	consNum
	mov	x19, x0
	adrp	x22, env
	add	x22, x22, :lo12:env
	ldr	x9, [x22]
	mov	x10, sp
	sub	x20, x10, #16                   // =16
	mov	sp, x20
	lsr	x8, x0, #32
	lsr	x11, x9, #32
	mov	x0, x20
	stp	w19, w8, [x10, #-16]
	mov	x8, x19
	stp	w9, w11, [x10, #-8]
.LBB359_9:                              // %"$16"
                                        // =>This Inner Loop Header: Depth=1
	lsr	x9, x0, #32
	stp	w0, w9, [x22]
	tbnz	w21, #1, .LBB359_18
// %bb.10:                              // %"$17"
                                        //   in Loop: Header=BB359_9 Depth=1
	ldp	w10, w9, [x21, #-4]
	bfi	x10, x9, #32, #32
	ldp	w21, w9, [x21, #4]
	bfi	x21, x9, #32, #32
	add	x22, x8, #4                     // =4
	adds	x0, x10, #1                     // =1
	b.lo	.LBB359_23
// %bb.11:                              // %"$23"
                                        //   in Loop: Header=BB359_9 Depth=1
	mov	x1, x21
	bl	consNum
	mov	x8, x0
	b	.LBB359_9
.LBB359_12:                             // %"$11"
	ldp	w9, w8, [x21, #-4]
	bfi	x9, x8, #32, #32
	ldp	w10, w8, [x20, #-4]
	bfi	x10, x8, #32, #32
	adds	x0, x9, x10
	cset	w24, hs
	bl	boxNum
	mov	x19, x0
	adrp	x22, env
	add	x22, x22, :lo12:env
	ldr	x8, [x22]
	mov	x9, sp
	sub	x23, x9, #16                    // =16
	mov	sp, x23
	lsr	x10, x0, #32
	lsr	x11, x8, #32
	mov	x0, x23
	stp	w19, w10, [x9, #-16]
	mov	x25, x19
	stp	w8, w11, [x9, #-8]
.LBB359_13:                             // %"$25"
                                        // =>This Inner Loop Header: Depth=1
	lsr	x8, x0, #32
	stp	w0, w8, [x22]
	ldp	w21, w8, [x21, #4]
	bfi	x21, x8, #32, #32
	ldp	w20, w8, [x20, #4]
	bfi	x20, x8, #32, #32
	tbnz	w21, #1, .LBB359_20
// %bb.14:                              // %"$26"
                                        //   in Loop: Header=BB359_13 Depth=1
	tbnz	w20, #1, .LBB359_25
// %bb.15:                              // %"$35"
                                        //   in Loop: Header=BB359_13 Depth=1
	ldp	w9, w8, [x21, #-4]
	bfi	x9, x8, #32, #32
	ldp	w10, w8, [x20, #-4]
	bfi	x10, x8, #32, #32
	adds	x8, x9, x10
	cset	w9, hs
	and	x10, x24, #0x1
	adds	x0, x8, x10
	cset	w8, hs
	orr	w24, w9, w8
	add	x22, x25, #4                    // =4
	bl	boxNum
	mov	x25, x0
	b	.LBB359_13
.LBB359_16:                             // %"$13"
	mov	x1, x21
	bl	consNum
.LBB359_17:                             // %"$2"
	mov	x19, x0
	b	.LBB359_36
.LBB359_18:                             // %"$19"
	adds	x0, x21, #16                    // =16
	add	x22, x8, #4                     // =4
	b.lo	.LBB359_24
// %bb.19:                              // %"$21"
	mov	x8, #1152921504606846976
	bfxil	x8, x0, #4, #60
	mov	x0, x8
	bl	boxNum
	b	.LBB359_24
.LBB359_20:                             // %"$28"
	mov	x22, x20
	tbz	w20, #1, .LBB359_26
// %bb.21:                              // %"$29"
	add	x25, x25, #4                    // =4
	lsr	x8, x21, #4
	add	x8, x8, x20, lsr #4
	and	x9, x24, #0x1
	add	x8, x8, x9
	tst	x8, #0x3000000000000000
	b.ne	.LBB359_32
.LBB359_22:                             // %"$33"
	mov	w0, #2
	bfi	x0, x8, #4, #60
	b	.LBB359_33
.LBB359_23:                             // %"$24"
	mov	x1, x21
	bl	consNum
.LBB359_24:                             // %"$18"
	lsr	x8, x0, #32
	stp	w0, w8, [x22]
	ldp	w9, w8, [x20, #8]
	b	.LBB359_35
.LBB359_25:
	mov	x22, x21
	mov	x21, x20
.LBB359_26:                             // %"$-2"
	ldp	w9, w8, [x22, #-4]
	bfi	x9, x8, #32, #32
	adds	x8, x9, x21, lsr #4
	cset	w9, hs
	and	x10, x24, #0x1
	adds	x0, x8, x10
	cset	w8, hs
	orr	w20, w9, w8
.LBB359_27:                             // %"$37"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w22, w8, [x22, #4]
	bfi	x22, x8, #32, #32
	mov	x1, x22
	bl	consNum
	mov	x8, x0
	lsr	x9, x0, #32
	stp	w8, w9, [x25, #4]
	tbz	w20, #0, .LBB359_34
// %bb.28:                              // %"$38"
                                        //   in Loop: Header=BB359_27 Depth=1
	tbnz	w22, #1, .LBB359_31
// %bb.29:                              // %"$40"
                                        //   in Loop: Header=BB359_27 Depth=1
	ldp	w10, w9, [x22, #-4]
	bfi	x10, x9, #32, #32
	adds	x0, x10, #1                     // =1
	cset	w20, hs
	mov	x25, x8
	b	.LBB359_27
.LBB359_30:                             // %"$9"
	mov	w19, #2
	bfi	x19, x0, #4, #60
	b	.LBB359_36
.LBB359_31:                             // %"$41"
	add	x25, x8, #4                     // =4
	and	x8, x20, #0x1
	add	x8, x8, x22, lsr #4
	tbz	x8, #60, .LBB359_22
.LBB359_32:                             // %"$32"
	mov	x0, x8
	bl	boxNum
.LBB359_33:                             // %"$27.sink.split"
	lsr	x8, x0, #32
	stp	w0, w8, [x25]
.LBB359_34:                             // %"$27"
	ldp	w9, w8, [x23, #8]
.LBB359_35:                             // %"$2"
	bfi	x9, x8, #32, #32
	adrp	x8, env
	str	x9, [x8, :lo12:env]
.LBB359_36:                             // %"$2"
	mov	x0, x19
	mov	sp, x29
	ldp	x20, x19, [sp, #64]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #48]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #32]             // 16-byte Folded Reload
	ldr	x25, [sp, #16]                  // 8-byte Folded Reload
	ldp	x29, x30, [sp], #80             // 16-byte Folded Reload
	ret
.Lfunc_end359:
	.size	addu, .Lfunc_end359-addu
	.cfi_endproc
                                        // -- End function
	.globl	tenfold                         // -- Begin function tenfold
	.p2align	4
	.type	tenfold,@function
tenfold:                                // @tenfold
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-32]!                // 8-byte Folded Spill
	stp	x20, x19, [sp, #16]             // 16-byte Folded Spill
	.cfi_def_cfa_offset 32
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w30, -32
	mov	x19, x0
	tbz	w19, #1, .LBB360_3
// %bb.1:                               // %"$2"
	lsr	x8, x19, #4
	add	x8, x8, x8, lsl #2
	lsl	x0, x8, #1
	tst	x0, #0xf000000000000000
	b.eq	.LBB360_8
// %bb.2:                               // %"$5"
	bl	boxNum
	mov	x19, x0
	b	.LBB360_11
.LBB360_3:                              // %"$3"
	ldp	w10, w8, [x19, #-4]
	bfi	x10, x8, #32, #32
	mov	w9, #10
	umulh	x8, x10, x9
	add	x10, x10, x10, lsl #2
	lsl	x11, x10, #1
	mov	x20, x19
.LBB360_4:                              // %"$8"
                                        // =>This Inner Loop Header: Depth=1
	lsr	x10, x11, #32
	stp	w11, w10, [x20, #-4]
	ldp	w10, w11, [x20, #4]
	bfi	x10, x11, #32, #32
	tbnz	w10, #1, .LBB360_6
// %bb.5:                               // %"$9"
                                        //   in Loop: Header=BB360_4 Depth=1
	ldp	w12, w11, [x10, #-4]
	bfi	x12, x11, #32, #32
	umulh	x13, x12, x9
	add	x11, x12, x12, lsl #2
	adds	x11, x8, x11, lsl #1
	cinc	x8, x13, hs
	mov	x20, x10
	b	.LBB360_4
.LBB360_6:                              // %"$11"
	lsr	x9, x10, #4
	mov	w10, #10
	madd	x8, x9, x10, x8
	tst	x8, #0xf000000000000000
	b.eq	.LBB360_9
// %bb.7:                               // %"$12"
	mov	x0, x8
	bl	boxNum
	b	.LBB360_10
.LBB360_8:                              // %"$6"
	mov	w19, #2
	bfi	x19, x0, #4, #60
	b	.LBB360_11
.LBB360_9:                              // %"$13"
	mov	w0, #2
	bfi	x0, x8, #4, #60
.LBB360_10:                             // %"$14"
	lsr	x8, x0, #32
	stp	w0, w8, [x20, #4]
.LBB360_11:                             // %"$4"
	mov	x0, x19
	ldp	x20, x19, [sp, #16]             // 16-byte Folded Reload
	ldr	x30, [sp], #32                  // 8-byte Folded Reload
	ret
.Lfunc_end360:
	.size	tenfold, .Lfunc_end360-tenfold
	.cfi_endproc
                                        // -- End function
	.globl	boxNum                          // -- Begin function boxNum
	.p2align	4
	.type	boxNum,@function
boxNum:                                 // @boxNum
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-32]!                // 8-byte Folded Spill
	stp	x20, x19, [sp, #16]             // 16-byte Folded Spill
	.cfi_def_cfa_offset 32
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w30, -32
	mov	x19, x0
	adrp	x20, ($Avail)
	ldr	x8, [x20, :lo12:($Avail)]
	cbnz	x8, .LBB361_2
// %bb.1:                               // %"$2"
	bl	gc
	ldr	x8, [x20, :lo12:($Avail)]
.LBB361_2:                              // %"$3"
	mov	x0, x8
	ldr	w9, [x0, #4]!
	ldr	w10, [x8]
	bfi	x10, x9, #32, #32
	str	x10, [x20, :lo12:($Avail)]
	lsr	x9, x19, #32
	str	w9, [x0]
	str	w19, [x8]
	mov	w9, #2
	stp	w9, wzr, [x8, #8]
	ldp	x20, x19, [sp, #16]             // 16-byte Folded Reload
	ldr	x30, [sp], #32                  // 8-byte Folded Reload
	ret
.Lfunc_end361:
	.size	boxNum, .Lfunc_end361-boxNum
	.cfi_endproc
                                        // -- End function
	.globl	consNum                         // -- Begin function consNum
	.p2align	4
	.type	consNum,@function
consNum:                                // @consNum
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-64]!           // 16-byte Folded Spill
	stp	x24, x23, [sp, #16]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #32]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #48]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 64
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w30, -56
	.cfi_offset w29, -64
	mov	x19, x1
	mov	x20, x0
	adrp	x22, ($Avail)
	ldr	x8, [x22, :lo12:($Avail)]
	lsr	x21, x1, #32
	cbnz	x8, .LBB362_2
// %bb.1:                               // %"$2"
	adrp	x23, env
	ldr	x8, [x23, :lo12:env]
	mov	x9, sp
	sub	x10, x9, #16                    // =16
	mov	sp, x10
	stp	w19, w21, [x9, #-16]
	mov	x24, x10
	str	w8, [x24, #8]!
	lsr	x8, x8, #32
	str	w8, [x24, #4]
	str	x10, [x23, :lo12:env]
	bl	gc
	ldp	w9, w8, [x24]
	bfi	x9, x8, #32, #32
	str	x9, [x23, :lo12:env]
	ldr	x8, [x22, :lo12:($Avail)]
.LBB362_2:                              // %"$3"
	mov	x0, x8
	ldr	w9, [x0, #4]!
	ldr	w10, [x8]
	bfi	x10, x9, #32, #32
	str	x10, [x22, :lo12:($Avail)]
	lsr	x9, x20, #32
	str	w9, [x0]
	str	w20, [x8]
	stp	w19, w21, [x8, #8]
	mov	sp, x29
	ldp	x20, x19, [sp, #48]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #32]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #64             // 16-byte Folded Reload
	ret
.Lfunc_end362:
	.size	consNum, .Lfunc_end362-consNum
	.cfi_endproc
                                        // -- End function
	.globl	isIntern                        // -- Begin function isIntern
	.p2align	4
	.type	isIntern,@function
isIntern:                               // @isIntern
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x30, x21, [sp, #-32]!           // 16-byte Folded Spill
	stp	x20, x19, [sp, #16]             // 16-byte Folded Spill
	.cfi_def_cfa_offset 32
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w30, -32
	mov	x19, x0
	tbnz	w19, #1, .LBB363_11
// %bb.1:                               // %"$3"
	add	x8, x1, #8                      // =8
	b	.LBB363_3
.LBB363_2:                              // %"$27"
                                        //   in Loop: Header=BB363_3 Depth=1
	ldp	w8, w9, [x21, #8]
	bfi	x8, x9, #32, #32
.LBB363_3:                              // %"$17"
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB363_5 Depth 2
	ldp	w21, w9, [x8]
	bfi	x21, x9, #32, #32
	tst	x21, #0xf
	b.ne	.LBB363_18
// %bb.4:                               // %"$18"
                                        //   in Loop: Header=BB363_3 Depth=1
	ldp	w20, w8, [x21]
	bfi	x20, x8, #32, #32
	sub	x8, x20, #8                     // =8
.LBB363_5:                              // %"$21"
                                        //   Parent Loop BB363_3 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	w0, w9, [x8]
	bfi	x0, x9, #32, #32
	tst	x0, #0x6
	b.ne	.LBB363_7
// %bb.6:                               // %"$22"
                                        //   in Loop: Header=BB363_5 Depth=2
	add	x8, x0, #8                      // =8
	b	.LBB363_5
.LBB363_7:                              // %"$23"
                                        //   in Loop: Header=BB363_3 Depth=1
	mov	x1, x19
	bl	cmpLong
	cbz	x0, .LBB363_19
// %bb.8:                               // %"$24"
                                        //   in Loop: Header=BB363_3 Depth=1
	tbz	x0, #63, .LBB363_2
// %bb.9:                               // %"$26"
                                        //   in Loop: Header=BB363_3 Depth=1
	ldp	w9, w8, [x21, #8]
	bfi	x9, x8, #32, #32
	add	x8, x9, #8                      // =8
	b	.LBB363_3
.LBB363_10:                             // %"$15"
                                        //   in Loop: Header=BB363_11 Depth=1
	ldp	w1, w9, [x8, #8]
	bfi	x1, x9, #32, #32
.LBB363_11:                             // %"$5"
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB363_13 Depth 2
	ldp	w8, w9, [x1]
	bfi	x8, x9, #32, #32
	tst	x8, #0xf
	b.ne	.LBB363_18
// %bb.12:                              // %"$6"
                                        //   in Loop: Header=BB363_11 Depth=1
	ldp	w20, w9, [x8]
	bfi	x20, x9, #32, #32
	sub	x9, x20, #8                     // =8
.LBB363_13:                             // %"$9"
                                        //   Parent Loop BB363_11 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	w9, w10, [x9]
	bfi	x9, x10, #32, #32
	tst	x9, #0x6
	b.ne	.LBB363_15
// %bb.14:                              // %"$10"
                                        //   in Loop: Header=BB363_13 Depth=2
	add	x9, x9, #8                      // =8
	b	.LBB363_13
.LBB363_15:                             // %"$11"
                                        //   in Loop: Header=BB363_11 Depth=1
	cmp	x19, x9
	b.eq	.LBB363_19
// %bb.16:                              // %"$12"
                                        //   in Loop: Header=BB363_11 Depth=1
	b.ls	.LBB363_10
// %bb.17:                              // %"$14"
                                        //   in Loop: Header=BB363_11 Depth=1
	ldp	w8, w9, [x8, #8]
	bfi	x8, x9, #32, #32
	add	x1, x8, #8                      // =8
	b	.LBB363_11
.LBB363_18:
	mov	x20, xzr
.LBB363_19:                             // %"$4"
	mov	x0, x20
	ldp	x20, x19, [sp, #16]             // 16-byte Folded Reload
	ldp	x30, x21, [sp], #32             // 16-byte Folded Reload
	ret
.Lfunc_end363:
	.size	isIntern, .Lfunc_end363-isIntern
	.cfi_endproc
                                        // -- End function
	.globl	cmpLong                         // -- Begin function cmpLong
	.p2align	4
	.type	cmpLong,@function
cmpLong:                                // @cmpLong
	.cfi_startproc
// %bb.0:                               // %"$1"
	mov	x8, x0
	mov	w0, #1
.LBB364_1:                              // %"$2"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w10, w9, [x8, #-4]
	bfi	x10, x9, #32, #32
	ldp	w11, w9, [x1, #-4]
	bfi	x11, x9, #32, #32
	subs	x10, x10, x11
	cset	w9, lo
	cbnz	x10, .LBB364_5
// %bb.2:                               // %"$3"
                                        //   in Loop: Header=BB364_1 Depth=1
	ldp	w8, w9, [x8, #4]
	bfi	x8, x9, #32, #32
	ldp	w1, w9, [x1, #4]
	bfi	x1, x9, #32, #32
	tbnz	w8, #1, .LBB364_6
// %bb.3:                               // %"$9"
                                        //   in Loop: Header=BB364_1 Depth=1
	tbz	w1, #1, .LBB364_1
// %bb.4:                               // %"$4"
	ret
.LBB364_5:                              // %"$5"
	tbz	w9, #0, .LBB364_11
	b	.LBB364_10
.LBB364_6:                              // %"$10"
	tbnz	w1, #2, .LBB364_10
// %bb.7:                               // %"$12"
	cmp	x1, x8
	b.ne	.LBB364_9
// %bb.8:
	mov	x0, xzr
	ret
.LBB364_9:                              // %"$14"
	b.ls	.LBB364_11
.LBB364_10:
	mov	x0, #-1
	ret
.LBB364_11:                             // %"$7"
	mov	w0, #1
	ret
.Lfunc_end364:
	.size	cmpLong, .Lfunc_end364-cmpLong
	.cfi_endproc
                                        // -- End function
	.globl	need3                           // -- Begin function need3
	.p2align	4
	.type	need3,@function
need3:                                  // @need3
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	adrp	x8, ($Avail)
	ldr	x8, [x8, :lo12:($Avail)]
	cbz	x8, .LBB365_3
// %bb.1:                               // %"$3"
	ldp	w8, w9, [x8]
	bfi	x8, x9, #32, #32
	cbz	x8, .LBB365_3
// %bb.2:                               // %"$4"
	ldp	w8, w9, [x8]
	bfi	x8, x9, #32, #32
	cmp	x8, #0                          // =0
	cset	w8, ne
.LBB365_3:                              // %"$2"
	tbnz	w8, #0, .LBB365_5
// %bb.4:                               // %"$5"
	bl	gc
.LBB365_5:                              // %"$6"
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end365:
	.size	need3, .Lfunc_end365-need3
	.cfi_endproc
                                        // -- End function
	.globl	consExt                         // -- Begin function consExt
	.p2align	4
	.type	consExt,@function
consExt:                                // @consExt
	.cfi_startproc
// %bb.0:                               // %"$1"
	adrp	x8, ($ExtCnt)
	adrp	x1, SymTab+8
	add	x1, x1, :lo12:SymTab+8
	ldr	x9, [x8, :lo12:($ExtCnt)]
	add	x9, x9, #1                      // =1
	str	x9, [x8, :lo12:($ExtCnt)]
	orr	x0, x0, #0x8
	b	consSym
.Lfunc_end366:
	.size	consExt, .Lfunc_end366-consExt
	.cfi_endproc
                                        // -- End function
	.globl	isLstIntern                     // -- Begin function isLstIntern
	.p2align	4
	.type	isLstIntern,@function
isLstIntern:                            // @isLstIntern
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-32]!                // 8-byte Folded Spill
	stp	x20, x19, [sp, #16]             // 16-byte Folded Spill
	.cfi_def_cfa_offset 32
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w30, -32
	mov	x19, x1
	mov	x20, x0
	tst	x19, #0xf
	b.ne	.LBB367_3
.LBB367_1:                              // %"$3"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w9, w8, [x19]
	bfi	x9, x8, #32, #32
	ldp	w9, w8, [x9]
	bfi	x9, x8, #32, #32
	ldp	w1, w8, [x9, #8]
	bfi	x1, x8, #32, #32
	mov	x0, x20
	bl	isIntern
	cbnz	x0, .LBB367_4
// %bb.2:                               // %"$6"
                                        //   in Loop: Header=BB367_1 Depth=1
	ldp	w19, w8, [x19, #8]
	bfi	x19, x8, #32, #32
	tst	x19, #0xf
	b.eq	.LBB367_1
.LBB367_3:
	mov	x0, xzr
.LBB367_4:                              // %"$4"
	ldp	x20, x19, [sp, #16]             // 16-byte Folded Reload
	ldr	x30, [sp], #32                  // 8-byte Folded Reload
	ret
.Lfunc_end367:
	.size	isLstIntern, .Lfunc_end367-isLstIntern
	.cfi_endproc
                                        // -- End function
	.globl	byteSym                         // -- Begin function byteSym
	.p2align	4
	.type	byteSym,@function
byteSym:                                // @byteSym
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-32]!                // 8-byte Folded Spill
	stp	x20, x19, [sp, #16]             // 16-byte Folded Spill
	.cfi_def_cfa_offset 32
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w30, -32
	mov	x19, x1
                                        // kill: def $w0 killed $w0 def $x0
	ldp	w8, w9, [x1]
	bfi	x8, x9, #32, #32
	ldp	w9, w10, [x1, #16]
	bfi	x9, x10, #32, #32
	tbz	w9, #1, .LBB368_3
// %bb.1:                               // %"$2"
	cmp	x8, #59                         // =59
	b.hi	.LBB368_5
// %bb.2:                               // %"$5"
	and	x10, x0, #0xff
	lsl	x10, x10, x8
	orr	x9, x9, x10
	lsr	x10, x9, #32
	stp	w9, w10, [x19, #16]
	add	x8, x8, #8                      // =8
	b	.LBB368_7
.LBB368_3:                              // %"$3"
	ldp	w20, w9, [x19, #8]
	bfi	x20, x9, #32, #32
	ldp	w9, w10, [x20, #4]
	bfi	x9, x10, #32, #32
	cmp	x8, #59                         // =59
	b.hi	.LBB368_6
// %bb.4:                               // %"$8"
	and	x10, x0, #0xff
	lsl	x10, x10, x8
	orr	x9, x9, x10
	lsr	x10, x9, #32
	stp	w9, w10, [x20, #4]
	add	x8, x8, #8                      // =8
	b	.LBB368_7
.LBB368_5:                              // %"$6"
	lsr	x8, x9, #4
	orr	x0, x8, x0, lsl #56
	bl	boxNum
	lsr	x9, x0, #32
	stp	w0, w9, [x19, #8]
	mov	w8, #4
	stp	w0, w9, [x19, #16]
	b	.LBB368_7
.LBB368_6:                              // %"$9"
	lsr	x8, x9, #4
	orr	x0, x8, x0, lsl #56
	bl	boxNum
	lsr	x9, x0, #32
	stp	w0, w9, [x20, #4]
	mov	w8, #4
	stp	w0, w9, [x19, #8]
.LBB368_7:                              // %"$4"
	lsr	x9, x8, #32
	stp	w8, w9, [x19]
	ldp	x20, x19, [sp, #16]             // 16-byte Folded Reload
	ldr	x30, [sp], #32                  // 8-byte Folded Reload
	ret
.Lfunc_end368:
	.size	byteSym, .Lfunc_end368-byteSym
	.cfi_endproc
                                        // -- End function
	.globl	getChar                         // -- Begin function getChar
	.p2align	4
	.type	getChar,@function
getChar:                                // @getChar
	.cfi_startproc
// %bb.0:                               // %"$1"
	cmp	w0, #128                        // =128
	b.lt	.LBB369_10
// %bb.1:                               // %"$3"
	cmp	w0, #255                        // =255
	b.ne	.LBB369_3
// %bb.2:
	mov	w0, #1114112
	ret
.LBB369_3:                              // %"$5"
	stp	x30, x21, [sp, #-32]!           // 16-byte Folded Spill
	stp	x20, x19, [sp, #16]             // 16-byte Folded Spill
	.cfi_def_cfa_offset 32
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w30, -32
	adrp	x19, ($Get)
	tbz	w0, #5, .LBB369_6
// %bb.4:                               // %"$8"
	tbz	w0, #4, .LBB369_7
// %bb.5:                               // %"$11"
	and	w21, w0, #0x7
	ldr	x8, [x19, :lo12:($Get)]
	blr	x8
	and	w20, w0, #0x3f
	bfi	w20, w21, #6, #3
	b	.LBB369_8
.LBB369_6:                              // %"$7"
	and	w21, w0, #0x1f
	b	.LBB369_9
.LBB369_7:                              // %"$10"
	and	w20, w0, #0xf
.LBB369_8:                              // %"$12"
	ldr	x8, [x19, :lo12:($Get)]
	blr	x8
	and	w21, w0, #0x3f
	bfi	w21, w20, #6, #9
.LBB369_9:                              // %"$9"
	ldr	x8, [x19, :lo12:($Get)]
	blr	x8
	and	w0, w0, #0x3f
	bfi	w0, w21, #6, #15
	ldp	x20, x19, [sp, #16]             // 16-byte Folded Reload
	ldp	x30, x21, [sp], #32             // 16-byte Folded Reload
.LBB369_10:                             // %"$2"
	ret
.Lfunc_end369:
	.size	getChar, .Lfunc_end369-getChar
	.cfi_endproc
                                        // -- End function
	.globl	compare                         // -- Begin function compare
	.p2align	4
	.type	compare,@function
compare:                                // @compare
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-64]!                // 8-byte Folded Spill
	stp	x24, x23, [sp, #16]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #32]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #48]             // 16-byte Folded Spill
	.cfi_def_cfa_offset 64
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w30, -64
	cmp	x0, x1
	b.ne	.LBB370_2
.LBB370_1:                              // %"$72"
	mov	x0, xzr
	b	.LBB370_9
.LBB370_2:                              // %"$3"
	mov	x20, x0
	adrp	x8, SymTab+8
	add	x8, x8, :lo12:SymTab+8
	cmp	x0, x8
	b.ne	.LBB370_4
.LBB370_3:
	mov	x0, #-1
	b	.LBB370_9
.LBB370_4:                              // %"$5"
	adrp	x22, SymTab+216
	add	x22, x22, :lo12:SymTab+216
	cmp	x20, x22
	b.ne	.LBB370_6
.LBB370_5:
	mov	w0, #1
	b	.LBB370_9
.LBB370_6:                              // %"$7"
	mov	x19, x1
	tst	x20, #0x6
	b.eq	.LBB370_10
// %bb.7:                               // %"$10"
	tst	x19, #0x6
	b.eq	.LBB370_13
// %bb.8:                               // %"$13"
	mov	x0, x20
	mov	x1, x19
	bl	cmpNum
.LBB370_9:                              // %"$73"
	ldp	x20, x19, [sp, #48]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #32]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #16]             // 16-byte Folded Reload
	ldr	x30, [sp], #64                  // 8-byte Folded Reload
	ret
.LBB370_10:                             // %"$9"
	tbz	w20, #3, .LBB370_14
// %bb.11:                              // %"$17"
	tst	x19, #0x6
	b.eq	.LBB370_16
// %bb.12:
	mov	w8, #1
	b	.LBB370_17
.LBB370_13:                             // %"$12"
	cmp	x19, x8
	b.ne	.LBB370_3
	b	.LBB370_5
.LBB370_14:                             // %"$16"
	tst	x19, #0xf
	b.eq	.LBB370_20
// %bb.15:                              // %"$79"
	cmp	x19, x22
	b.eq	.LBB370_3
	b	.LBB370_5
.LBB370_16:                             // %"$20"
	cmp	x19, x8
	cset	w8, eq
.LBB370_17:                             // %"$19"
	tbnz	w8, #0, .LBB370_5
// %bb.18:                              // %"$21"
	tst	x19, #0xf
	b.eq	.LBB370_31
// %bb.19:                              // %"$24"
	cmp	x19, x22
	cset	w8, eq
	b	.LBB370_32
.LBB370_20:                             // %"$78"
	mov	x8, sp
	adrp	x9, ($StkLimit)
	ldr	x9, [x9, :lo12:($StkLimit)]
	cmp	x9, x8
	b.hi	.LBB370_62
// %bb.21:
	adrp	x24, ($Signal)
	mov	x21, x20
	mov	x23, x19
.LBB370_22:                             // %"$85"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w0, w8, [x21]
	bfi	x0, x8, #32, #32
	ldp	w1, w8, [x23]
	bfi	x1, x8, #32, #32
	bl	compare
	cbnz	x0, .LBB370_9
// %bb.23:                              // %"$86"
                                        //   in Loop: Header=BB370_22 Depth=1
	ldp	w21, w8, [x21, #8]
	bfi	x21, x8, #32, #32
	tst	x21, #0xf
	b.ne	.LBB370_58
// %bb.24:                              // %"$89"
                                        //   in Loop: Header=BB370_22 Depth=1
	ldp	w23, w8, [x23, #8]
	bfi	x23, x8, #32, #32
	tst	x23, #0xf
	b.ne	.LBB370_59
// %bb.25:                              // %"$91"
                                        //   in Loop: Header=BB370_22 Depth=1
	cmp	x21, x20
	b.ne	.LBB370_27
// %bb.26:                              // %"$97"
                                        //   in Loop: Header=BB370_22 Depth=1
	cmp	x23, x19
	cset	w8, eq
	b	.LBB370_28
.LBB370_27:                             //   in Loop: Header=BB370_22 Depth=1
	mov	w8, wzr
.LBB370_28:                             // %"$96"
                                        //   in Loop: Header=BB370_22 Depth=1
	tbnz	w8, #0, .LBB370_1
// %bb.29:                              // %"$98"
                                        //   in Loop: Header=BB370_22 Depth=1
	ldr	w8, [x24, :lo12:($Signal)]
	cbz	w8, .LBB370_22
// %bb.30:                              // %"$100"
                                        //   in Loop: Header=BB370_22 Depth=1
	mov	x0, xzr
	bl	sighandler
	b	.LBB370_22
.LBB370_31:
	mov	w8, #1
.LBB370_32:                             // %"$23"
	tbnz	w8, #0, .LBB370_3
// %bb.33:                              // %"$25"
	ldp	w9, w8, [x20, #-8]
	bfi	x9, x8, #32, #32
	and	x8, x9, #0xfffffffffffffff7
	tst	x8, #0x6
	b.ne	.LBB370_35
.LBB370_34:                             // %"$28"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w8, w9, [x8, #8]
	bfi	x8, x9, #32, #32
	tst	x8, #0x6
	b.eq	.LBB370_34
.LBB370_35:                             // %"$29"
	ldp	w10, w9, [x19, #-8]
	bfi	x10, x9, #32, #32
	and	x9, x10, #0xfffffffffffffff7
	tst	x9, #0x6
	b.ne	.LBB370_37
.LBB370_36:                             // %"$31"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w9, w10, [x9, #8]
	bfi	x9, x10, #32, #32
	tst	x9, #0x6
	b.eq	.LBB370_36
.LBB370_37:                             // %"$32"
	cmp	x8, #2                          // =2
	b.ne	.LBB370_41
// %bb.38:                              // %"$35"
	cmp	x9, #2                          // =2
	b.ne	.LBB370_3
// %bb.39:                              // %"$37"
	cmp	x20, x19
	b.ne	.LBB370_1
// %bb.40:                              // %"$39"
	b.hi	.LBB370_3
	b	.LBB370_5
.LBB370_41:                             // %"$34"
	cmp	x9, #2                          // =2
	b.eq	.LBB370_5
.LBB370_42:                             // %"$45"
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB370_44 Depth 2
                                        //     Child Loop BB370_49 Depth 2
                                        //     Child Loop BB370_52 Depth 2
	tbz	w8, #1, .LBB370_46
// %bb.43:                              // %"$49"
                                        //   in Loop: Header=BB370_42 Depth=1
	tst	x8, #0x6
	b.ne	.LBB370_45
.LBB370_44:                             // %"$50"
                                        //   Parent Loop BB370_42 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	w8, w10, [x8, #8]
	bfi	x8, x10, #32, #32
	tst	x8, #0x6
	b.eq	.LBB370_44
.LBB370_45:                             // %"$51"
                                        //   in Loop: Header=BB370_42 Depth=1
	ubfx	x10, x8, #4, #58
	mov	x8, xzr
	b	.LBB370_47
.LBB370_46:                             // %"$47"
                                        //   in Loop: Header=BB370_42 Depth=1
	ldp	w10, w11, [x8, #-4]
	bfi	x10, x11, #32, #32
	ldp	w8, w11, [x8, #4]
	bfi	x8, x11, #32, #32
.LBB370_47:                             // %"$48"
                                        //   in Loop: Header=BB370_42 Depth=1
	tbz	w9, #1, .LBB370_51
// %bb.48:                              // %"$55"
                                        //   in Loop: Header=BB370_42 Depth=1
	tst	x9, #0x6
	b.ne	.LBB370_50
.LBB370_49:                             // %"$56"
                                        //   Parent Loop BB370_42 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	w9, w11, [x9, #8]
	bfi	x9, x11, #32, #32
	tst	x9, #0x6
	b.eq	.LBB370_49
.LBB370_50:                             // %"$57"
                                        //   in Loop: Header=BB370_42 Depth=1
	ubfx	x11, x9, #4, #58
	mov	x9, xzr
	b	.LBB370_52
.LBB370_51:                             // %"$53"
                                        //   in Loop: Header=BB370_42 Depth=1
	ldp	w11, w12, [x9, #-4]
	bfi	x11, x12, #32, #32
	ldp	w9, w12, [x9, #4]
	bfi	x9, x12, #32, #32
.LBB370_52:                             // %"$58"
                                        //   Parent Loop BB370_42 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	and	x12, x10, #0xff
	subs	x12, x12, w11, uxtb
	b.ne	.LBB370_60
// %bb.53:                              // %"$60"
                                        //   in Loop: Header=BB370_52 Depth=2
	lsr	x10, x10, #8
	cbz	x10, .LBB370_55
// %bb.54:                              // %"$64"
                                        //   in Loop: Header=BB370_52 Depth=2
	lsr	x11, x11, #8
	cbnz	x11, .LBB370_52
	b	.LBB370_5
.LBB370_55:                             // %"$66"
                                        //   in Loop: Header=BB370_42 Depth=1
	lsr	x10, x11, #8
	cbnz	x10, .LBB370_3
// %bb.56:                              // %"$68"
                                        //   in Loop: Header=BB370_42 Depth=1
	cbz	x8, .LBB370_61
// %bb.57:                              // %"$70"
                                        //   in Loop: Header=BB370_42 Depth=1
	cbnz	x9, .LBB370_42
	b	.LBB370_5
.LBB370_58:                             // %"$90"
	ldp	w1, w8, [x23, #8]
	bfi	x1, x8, #32, #32
	mov	x0, x21
	bl	compare
	b	.LBB370_9
.LBB370_59:                             // %"$92"
	cmp	x23, x22
	b.eq	.LBB370_3
	b	.LBB370_5
.LBB370_60:                             // %"$59"
	mov	w8, #1
	cmp	x12, #0                         // =0
	mov	x9, #-1
	csel	x0, x8, x9, gt
	b	.LBB370_9
.LBB370_61:                             // %"$69"
	cbnz	x9, .LBB370_3
	b	.LBB370_1
.LBB370_62:                             // %"$83"
	mov	x0, xzr
	bl	stkErr
.Lfunc_end370:
	.size	compare, .Lfunc_end370-compare
	.cfi_endproc
                                        // -- End function
	.globl	cmpNum                          // -- Begin function cmpNum
	.p2align	4
	.type	cmpNum,@function
cmpNum:                                 // @cmpNum
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	tbz	w0, #3, .LBB371_3
// %bb.1:                               // %"$3"
	tbz	w1, #3, .LBB371_6
// %bb.2:                               // %"$9"
	and	x8, x1, #0xfffffffffffffff7
	and	x1, x0, #0xfffffffffffffff7
	mov	x0, x8
	b	.LBB371_5
.LBB371_3:                              // %"$2"
	tbz	w1, #3, .LBB371_5
// %bb.4:
	mov	w0, #1
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.LBB371_5:                              // %"$4"
	bl	cmpu
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.LBB371_6:
	mov	x0, #-1
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end371:
	.size	cmpNum, .Lfunc_end371-cmpNum
	.cfi_endproc
                                        // -- End function
	.globl	cmpu                            // -- Begin function cmpu
	.p2align	4
	.type	cmpu,@function
cmpu:                                   // @cmpu
	.cfi_startproc
// %bb.0:                               // %"$1"
	mov	x8, x0
	tbz	w8, #1, .LBB372_3
// %bb.1:                               // %"$2"
	mov	w9, #1
	cmp	x1, x8
	cset	w10, hi
	tst	w1, #0x4
	csel	w9, w9, w10, ne
	tbz	w9, #0, .LBB372_9
// %bb.2:
	mov	x0, #-1
	ret
.LBB372_3:                              // %"$3"
	tbnz	w1, #1, .LBB372_11
// %bb.4:                               // %"$15.preheader"
	mov	x10, xzr
	mov	x9, xzr
	mov	w0, #1
.LBB372_5:                              // %"$15"
                                        // =>This Inner Loop Header: Depth=1
	mov	x11, x1
	mov	x12, x8
	ldp	w8, w13, [x8, #4]
	bfi	x8, x13, #32, #32
	ldp	w1, w13, [x1, #4]
	bfi	x1, x13, #32, #32
	cmp	x8, x1
	b.eq	.LBB372_12
// %bb.6:                               // %"$16"
                                        //   in Loop: Header=BB372_5 Depth=1
	tbnz	w8, #1, .LBB372_17
// %bb.7:                               // %"$27"
                                        //   in Loop: Header=BB372_5 Depth=1
	tbnz	w1, #1, .LBB372_25
// %bb.8:                               // %"$36"
                                        //   in Loop: Header=BB372_5 Depth=1
	lsr	x13, x10, #32
	lsr	x14, x9, #32
	stp	w10, w13, [x12, #4]
	mov	x10, x12
	stp	w9, w14, [x11, #4]
	mov	x9, x11
	b	.LBB372_5
.LBB372_9:                              // %"$8"
	cmp	x1, x8
	b.ne	.LBB372_11
// %bb.10:
	mov	x0, xzr
	ret
.LBB372_11:                             // %"$10"
	mov	w0, #1
	b	.LBB372_26
.LBB372_12:                             // %"$19.preheader"
	mov	w0, #1
.LBB372_13:                             // %"$19"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w8, w13, [x12, #-4]
	bfi	x8, x13, #32, #32
	ldp	w13, w14, [x11, #-4]
	bfi	x13, x14, #32, #32
	cmp	x13, x8
	b.hi	.LBB372_21
// %bb.14:                              // %"$20"
                                        //   in Loop: Header=BB372_13 Depth=1
	cmp	x8, x13
	b.hi	.LBB372_25
// %bb.15:                              // %"$23"
                                        //   in Loop: Header=BB372_13 Depth=1
	cbz	x10, .LBB372_22
// %bb.16:                              // %"$25"
                                        //   in Loop: Header=BB372_13 Depth=1
	mov	x8, x10
	ldr	w13, [x8, #4]!
	ldr	w14, [x8, #4]
	bfi	x13, x14, #32, #32
	str	w12, [x8]
	lsr	x12, x12, #32
	str	w12, [x8, #4]
	mov	x8, x9
	ldr	w14, [x8, #4]!
	ldr	w12, [x8, #4]
	bfi	x14, x12, #32, #32
	lsr	x15, x11, #32
	stp	w11, w15, [x8]
	mov	x12, x10
	mov	x11, x9
	mov	x10, x13
	mov	x9, x14
	b	.LBB372_13
.LBB372_17:                             // %"$28"
	mov	w13, #1
	cmp	x1, x8
	cset	w14, hi
	tst	w1, #0x4
	csel	w13, w13, w14, ne
	tbz	w13, #0, .LBB372_19
// %bb.18:
	mov	x0, #-1
	b	.LBB372_25
.LBB372_19:                             // %"$32"
	cmp	x1, x8
	b.ne	.LBB372_23
// %bb.20:
	mov	x0, xzr
	b	.LBB372_25
.LBB372_21:
	mov	x0, #-1
	b	.LBB372_25
.LBB372_22:
	mov	x0, xzr
	b	.LBB372_25
.LBB372_23:                             // %"$34"
	mov	w0, #1
	b	.LBB372_25
.LBB372_24:                             // %"$39"
                                        //   in Loop: Header=BB372_25 Depth=1
	mov	x8, x10
	ldr	w13, [x8, #4]!
	ldr	w14, [x8, #4]
	bfi	x13, x14, #32, #32
	str	w12, [x8]
	lsr	x12, x12, #32
	str	w12, [x8, #4]
	mov	x8, x9
	ldr	w14, [x8, #4]!
	ldr	w12, [x8, #4]
	bfi	x14, x12, #32, #32
	lsr	x15, x11, #32
	stp	w11, w15, [x8]
	mov	x12, x10
	mov	x11, x9
	mov	x10, x13
	mov	x9, x14
.LBB372_25:                             // %"$38"
                                        // =>This Inner Loop Header: Depth=1
	cbnz	x10, .LBB372_24
.LBB372_26:                             // %"$4"
	ret
.Lfunc_end372:
	.size	cmpu, .Lfunc_end372-cmpu
	.cfi_endproc
                                        // -- End function
	.globl	rdl                             // -- Begin function rdl
	.p2align	4
	.type	rdl,@function
rdl:                                    // @rdl
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x30, x23, [sp, #-48]!           // 16-byte Folded Spill
	stp	x22, x21, [sp, #16]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #32]             // 16-byte Folded Spill
	.cfi_def_cfa_offset 48
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w30, -48
	mov	x20, x1
	mov	x19, x0
	adrp	x23, ($Get)
	adrp	x21, ($Delim)
	add	x21, x21, :lo12:($Delim)
	adrp	x22, SymTab+8
	add	x22, x22, :lo12:SymTab+8
	b	.LBB373_3
.LBB373_1:                              // %"$22"
                                        //   in Loop: Header=BB373_3 Depth=1
	mov	w0, wzr
	bl	read0
.LBB373_2:                              // %"$7.sink.split"
                                        //   in Loop: Header=BB373_3 Depth=1
	mov	x1, x22
	bl	cons
	lsr	x8, x0, #32
	stp	w0, w8, [x20, #8]
	mov	x20, x0
.LBB373_3:                              // %"$2"
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB373_14 Depth 2
	bl	skip
	cmp	w0, #41                         // =41
	b.eq	.LBB373_21
// %bb.4:                               // %"$3"
                                        //   in Loop: Header=BB373_3 Depth=1
	cmp	w0, #93                         // =93
	b.eq	.LBB373_22
// %bb.5:                               // %"$6"
                                        //   in Loop: Header=BB373_3 Depth=1
	cmp	w0, #46                         // =46
	b.ne	.LBB373_8
// %bb.6:                               // %"$9"
                                        //   in Loop: Header=BB373_3 Depth=1
	ldr	x8, [x23, :lo12:($Get)]
	blr	x8
	mov	w1, w0
	mov	x0, x21
	bl	strchr2
	cbnz	x0, .LBB373_16
// %bb.7:                               // %"$10"
                                        //   in Loop: Header=BB373_3 Depth=1
	mov	w0, #46
	bl	rdAtom
	b	.LBB373_2
.LBB373_8:                              // %"$8"
                                        //   in Loop: Header=BB373_3 Depth=1
	cmp	w0, #126                        // =126
	b.ne	.LBB373_1
// %bb.9:                               // %"$23"
                                        //   in Loop: Header=BB373_3 Depth=1
	ldr	x8, [x23, :lo12:($Get)]
	blr	x8
	mov	w0, wzr
	bl	read0
	lsr	x8, x0, #32
	stp	w0, w8, [x20, #8]
	tst	x0, #0x6
	b.ne	.LBB373_13
// %bb.10:                              // %"$25"
                                        //   in Loop: Header=BB373_3 Depth=1
	tbz	w0, #3, .LBB373_12
// %bb.11:                              // %"$28"
                                        //   in Loop: Header=BB373_3 Depth=1
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB373_13
.LBB373_12:                             // %"$27"
                                        //   in Loop: Header=BB373_3 Depth=1
	bl	evList
.LBB373_13:                             // %"$24"
                                        //   in Loop: Header=BB373_3 Depth=1
	lsr	x8, x0, #32
	stp	w0, w8, [x20, #8]
.LBB373_14:                             // %"$29"
                                        //   Parent Loop BB373_3 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldrb	w8, [x20, #8]
	tst	w8, #0xf
	b.ne	.LBB373_3
// %bb.15:                              // %"$30"
                                        //   in Loop: Header=BB373_14 Depth=2
	ldp	w20, w8, [x20, #8]
	bfi	x20, x8, #32, #32
	b	.LBB373_14
.LBB373_16:                             // %"$11"
	bl	skip
	cmp	w0, #41                         // =41
	b.ne	.LBB373_18
// %bb.17:
	mov	w8, #1
	tbz	w8, #0, .LBB373_19
	b	.LBB373_20
.LBB373_18:                             // %"$13"
	cmp	w0, #93                         // =93
	cset	w8, eq
	tbnz	w8, #0, .LBB373_20
.LBB373_19:                             // %"$15"
	mov	w0, wzr
	bl	read0
	mov	x19, x0
.LBB373_20:                             // %"$16"
	lsr	x8, x19, #32
	stp	w19, w8, [x20, #8]
	bl	skip
	cmp	w0, #41                         // =41
	b.ne	.LBB373_23
.LBB373_21:                             // %"$5"
	ldr	x8, [x23, :lo12:($Get)]
	blr	x8
.LBB373_22:                             // %"$4"
	ldp	x20, x19, [sp, #32]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #16]             // 16-byte Folded Reload
	ldp	x30, x23, [sp], #48             // 16-byte Folded Reload
	ret
.LBB373_23:                             // %"$18"
	adrp	x8, ($Chr)
	ldr	w8, [x8, :lo12:($Chr)]
	cmp	w8, #93                         // =93
	b.eq	.LBB373_22
// %bb.24:                              // %"$21"
	adrp	x2, .L$154
	add	x2, x2, :lo12:.L$154
	mov	x0, xzr
	mov	x1, x19
	mov	x3, xzr
	bl	err
.Lfunc_end373:
	.size	rdl, .Lfunc_end373-rdl
	.cfi_endproc
                                        // -- End function
	.globl	comment                         // -- Begin function comment
	.p2align	4
	.type	comment,@function
comment:                                // @comment
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-32]!                // 8-byte Folded Spill
	stp	x20, x19, [sp, #16]             // 16-byte Folded Spill
	.cfi_def_cfa_offset 32
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w30, -32
	adrp	x19, ($Get)
	ldr	x8, [x19, :lo12:($Get)]
	blr	x8
	cmp	w0, #123                        // =123
	b.ne	.LBB374_2
// %bb.1:                               // %"$5.preheader"
	mov	x20, xzr
	b	.LBB374_6
.LBB374_2:                              // %"$17"
                                        // =>This Inner Loop Header: Depth=1
	cmp	w0, #10                         // =10
	b.eq	.LBB374_15
// %bb.3:                               // %"$18"
                                        //   in Loop: Header=BB374_2 Depth=1
	tbnz	w0, #31, .LBB374_15
// %bb.4:                               // %"$20"
                                        //   in Loop: Header=BB374_2 Depth=1
	ldr	x8, [x19, :lo12:($Get)]
	blr	x8
	b	.LBB374_2
.LBB374_5:                              // %"$10"
                                        //   in Loop: Header=BB374_6 Depth=1
	add	x20, x20, #1                    // =1
.LBB374_6:                              // %"$5"
                                        // =>This Inner Loop Header: Depth=1
	ldr	x8, [x19, :lo12:($Get)]
	blr	x8
	tbnz	w0, #31, .LBB374_15
// %bb.7:                               // %"$6"
                                        //   in Loop: Header=BB374_6 Depth=1
	cmp	w0, #35                         // =35
	b.ne	.LBB374_9
// %bb.8:                               // %"$9"
                                        //   in Loop: Header=BB374_6 Depth=1
	ldr	x8, [x19, :lo12:($Get)]
	blr	x8
	cmp	w0, #123                        // =123
	cset	w8, eq
	cbnz	w8, .LBB374_5
	b	.LBB374_10
.LBB374_9:                              //   in Loop: Header=BB374_6 Depth=1
	mov	w8, wzr
	cbnz	w8, .LBB374_5
.LBB374_10:                             // %"$11"
                                        //   in Loop: Header=BB374_6 Depth=1
	cmp	w0, #125                        // =125
	b.ne	.LBB374_13
// %bb.11:                              // %"$14"
                                        //   in Loop: Header=BB374_6 Depth=1
	ldr	x8, [x19, :lo12:($Get)]
	blr	x8
	cmp	w0, #35                         // =35
	b.ne	.LBB374_14
// %bb.12:                              // %"$15"
                                        //   in Loop: Header=BB374_6 Depth=1
	sub	x20, x20, #1                    // =1
	lsr	x8, x20, #63
	tbz	w8, #0, .LBB374_6
	b	.LBB374_15
.LBB374_13:                             //   in Loop: Header=BB374_6 Depth=1
	mov	w8, wzr
	tbz	w8, #0, .LBB374_6
	b	.LBB374_15
.LBB374_14:                             //   in Loop: Header=BB374_6 Depth=1
	mov	w8, wzr
	tbz	w8, #0, .LBB374_6
.LBB374_15:                             // %"$4"
	ldr	x8, [x19, :lo12:($Get)]
	blr	x8
	ldp	x20, x19, [sp, #16]             // 16-byte Folded Reload
	ldr	x30, [sp], #32                  // 8-byte Folded Reload
	ret
.Lfunc_end374:
	.size	comment, .Lfunc_end374-comment
	.cfi_endproc
                                        // -- End function
	.globl	outNum                          // -- Begin function outNum
	.p2align	4
	.type	outNum,@function
outNum:                                 // @outNum
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x30, x19, [sp, #-16]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w19, -8
	.cfi_offset w30, -16
	mov	x19, x0
	tbz	w19, #3, .LBB375_2
// %bb.1:                               // %"$2"
	adrp	x8, ($Put)
	ldr	x8, [x8, :lo12:($Put)]
	mov	w0, #45
	blr	x8
.LBB375_2:                              // %"$3"
	lsr	x0, x19, #4
	bl	outWord
	ldp	x30, x19, [sp], #16             // 16-byte Folded Reload
	ret
.Lfunc_end375:
	.size	outNum, .Lfunc_end375-outNum
	.cfi_endproc
                                        // -- End function
	.globl	fmtNum                          // -- Begin function fmtNum
	.p2align	4
	.type	fmtNum,@function
fmtNum:                                 // @fmtNum
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-96]!           // 16-byte Folded Spill
	stp	x28, x27, [sp, #16]             // 16-byte Folded Spill
	stp	x26, x25, [sp, #32]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #48]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #64]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #80]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	mov	x19, x4
	mov	w20, w3
	mov	w21, w2
	mov	x22, x1
	and	x8, x0, #0xfffffffffffffff7
	mov	w10, #36
	mov	x9, x8
	tbnz	w9, #1, .LBB376_2
.LBB376_1:                              // %"$3"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w9, w11, [x9, #4]
	bfi	x9, x11, #32, #32
	add	x10, x10, #20                   // =20
	tbz	w9, #1, .LBB376_1
.LBB376_2:                              // %"$4"
	mov	x9, #2808348672
	movk	x9, #46771, lsl #32
	movk	x9, #3552, lsl #48
	mov	x11, #58255
	movk	x11, #36408, lsl #16
	movk	x11, #14563, lsl #32
	movk	x11, #58254, lsl #48
	umulh	x10, x10, x11
	lsr	x10, x10, #1
	and	x10, x10, #0x7ffffffffffffff8
	add	x10, x10, #15                   // =15
	and	x10, x10, #0xfffffffffffffff0
	mov	x11, sp
	sub	x23, x11, x10
	mov	sp, x23
	mov	x11, sp
	sub	x10, x11, x10
	mov	sp, x10
	stp	wzr, wzr, [x23]
	mov	w11, #1
	mov	x24, x23
	mov	x12, x10
	stp	w11, wzr, [x10]
	tbz	w8, #2, .LBB376_4
	b	.LBB376_5
.LBB376_3:                              // %"$31"
	ldp	w8, w13, [x8, #4]
	bfi	x8, x13, #32, #32
	tbnz	w8, #2, .LBB376_5
.LBB376_4:
	mov	x13, x8
	mov	w14, #16
	b	.LBB376_7
.LBB376_5:                              // %"$6"
	ldp	w13, w14, [x8, #-4]
	bfi	x13, x14, #32, #32
	mov	w14, #1
	b	.LBB376_7
.LBB376_6:                              // %"$28"
                                        //   in Loop: Header=BB376_7 Depth=1
	lsl	x14, x14, #1
	cbz	x14, .LBB376_18
.LBB376_7:                              // %"$8"
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB376_9 Depth 2
                                        //     Child Loop BB376_15 Depth 2
	tst	x13, x14
	b.eq	.LBB376_14
// %bb.8:                               // %"$11.preheader"
                                        //   in Loop: Header=BB376_7 Depth=1
	mov	x17, xzr
	mov	x15, x23
	mov	x16, x10
.LBB376_9:                              // %"$11"
                                        //   Parent Loop BB376_7 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	w1, w18, [x15]
	bfi	x1, x18, #32, #32
	ldp	w2, w18, [x16], #8
	bfi	x2, x18, #32, #32
	add	x18, x1, x2
	add	x17, x18, x17
	sub	x18, x17, x9
	cmp	x9, x17
	csel	x18, x17, x18, hi
	csel	x17, xzr, x11, hi
	str	w18, [x15]
	lsr	x18, x18, #32
	str	w18, [x15, #4]
	cmp	x16, x12
	b.hi	.LBB376_12
// %bb.10:                              // %"$15"
                                        //   in Loop: Header=BB376_9 Depth=2
	add	x15, x15, #8                    // =8
	cmp	x15, x24
	b.ls	.LBB376_9
// %bb.11:                              // %"$17"
                                        //   in Loop: Header=BB376_9 Depth=2
	add	x24, x24, #8                    // =8
	stp	wzr, wzr, [x15]
	b	.LBB376_9
.LBB376_12:                             // %"$16"
                                        //   in Loop: Header=BB376_7 Depth=1
	cbz	x17, .LBB376_14
// %bb.13:                              // %"$19"
                                        //   in Loop: Header=BB376_7 Depth=1
	str	w11, [x24, #8]!
	str	wzr, [x24, #4]
.LBB376_14:                             // %"$21.preheader"
                                        //   in Loop: Header=BB376_7 Depth=1
	mov	x16, xzr
	mov	x15, x10
.LBB376_15:                             // %"$21"
                                        //   Parent Loop BB376_7 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	w18, w17, [x15]
	bfi	x18, x17, #32, #32
	add	x17, x18, x18
	add	x16, x17, x16
	sub	x17, x16, x9
	cmp	x9, x16
	csel	x17, x16, x17, hi
	csel	x16, xzr, x11, hi
	str	w17, [x15]
	lsr	x17, x17, #32
	str	w17, [x15, #4]
	add	x15, x15, #8                    // =8
	cmp	x15, x12
	b.ls	.LBB376_15
// %bb.16:                              // %"$26"
                                        //   in Loop: Header=BB376_7 Depth=1
	cbz	x16, .LBB376_6
// %bb.17:                              // %"$27"
                                        //   in Loop: Header=BB376_7 Depth=1
	add	x12, x12, #8                    // =8
	stp	w11, wzr, [x15]
	b	.LBB376_6
.LBB376_18:                             // %"$30"
	tbz	w8, #1, .LBB376_3
// %bb.19:                              // %"$32"
	tbnz	x22, #63, .LBB376_25
// %bb.20:                              // %"$35"
	tbz	w0, #3, .LBB376_22
// %bb.21:                              // %"$36"
	mov	w0, #45
	mov	x1, x19
	bl	byteSym
.LBB376_22:                             // %"$37"
	sub	x8, x24, x23
	lsr	x8, x8, #3
	add	x8, x8, x8, lsl #3
	lsl	x8, x8, #1
	ldp	w9, w10, [x24]
	bfi	x9, x10, #32, #32
	mov	x10, #-3689348814741910324
	movk	x10, #52429
.LBB376_23:                             // %"$38"
                                        // =>This Inner Loop Header: Depth=1
	umulh	x9, x9, x10
	lsr	x9, x9, #3
	cbz	x9, .LBB376_29
// %bb.24:                              // %"$39"
                                        //   in Loop: Header=BB376_23 Depth=1
	add	x8, x8, #1                      // =1
	b	.LBB376_23
.LBB376_25:                             // %"$34"
	cmn	x22, #1                         // =1
	b.eq	.LBB376_41
// %bb.26:                              // %"$60"
	sub	x8, x24, x23
	lsr	x8, x8, #3
	add	x8, x8, x8, lsl #3
	lsl	x8, x8, #1
	ldp	w9, w10, [x24]
	bfi	x9, x10, #32, #32
	mov	x10, #-3689348814741910324
	movk	x10, #52429
.LBB376_27:                             // %"$70"
                                        // =>This Inner Loop Header: Depth=1
	mov	x11, x8
	add	x8, x8, #1                      // =1
	umulh	x9, x9, x10
	lsr	x9, x9, #3
	cbnz	x9, .LBB376_27
// %bb.28:                              // %"$72"
	add	x8, x8, #1                      // =1
	tst	w0, #0x8
	csinc	x8, x8, x11, ne
	mov	w0, #2
	bfi	x0, x8, #4, #60
	b	.LBB376_49
.LBB376_29:                             // %"$40"
	subs	x22, x8, x22
	b.mi	.LBB376_50
.LBB376_30:                             // %"$42"
	ldp	w0, w8, [x24]
	bfi	x0, x8, #32, #32
	mov	x1, x22
	mov	w2, w21
	mov	w3, w20
	mov	x4, x19
	bl	fmtWord
	mov	x22, x0
	mov	x25, #-3689348814741910324
	movk	x25, #52429
	b	.LBB376_32
.LBB376_31:                             // %"$59"
                                        //   in Loop: Header=BB376_32 Depth=1
	add	w0, w28, #48                    // =48
	mov	x1, x19
	bl	byteSym
.LBB376_32:                             // %"$46"
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB376_36 Depth 2
	sub	x24, x24, #8                    // =8
	cmp	x24, x23
	b.lo	.LBB376_48
// %bb.33:                              // %"$47"
                                        //   in Loop: Header=BB376_32 Depth=1
	ldp	w28, w8, [x24]
	bfi	x28, x8, #32, #32
	mov	x26, #1569325056
	movk	x26, #17784, lsl #32
	movk	x26, #355, lsl #48
	b	.LBB376_36
.LBB376_34:                             // %"$50.sink.split"
                                        //   in Loop: Header=BB376_36 Depth=2
	mov	x1, x19
	bl	byteSym
.LBB376_35:                             // %"$50"
                                        //   in Loop: Header=BB376_36 Depth=2
	sub	x22, x22, #1                    // =1
	udiv	x27, x28, x26
	add	w0, w27, #48                    // =48
	mov	x1, x19
	bl	byteSym
	msub	x28, x27, x26, x28
	umulh	x8, x26, x25
	lsr	x26, x8, #3
	cmp	x26, #1                         // =1
	b.eq	.LBB376_31
.LBB376_36:                             // %"$49"
                                        //   Parent Loop BB376_32 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	mov	w0, w21
	cbz	x22, .LBB376_34
// %bb.37:                              // %"$51"
                                        //   in Loop: Header=BB376_36 Depth=2
	tst	w20, #0xff
	b.eq	.LBB376_40
// %bb.38:                              // %"$54"
                                        //   in Loop: Header=BB376_36 Depth=2
	cmp	x22, #1                         // =1
	b.lt	.LBB376_40
// %bb.39:                              // %"$55"
                                        //   in Loop: Header=BB376_36 Depth=2
	mov	x8, #-6148914691236517206
	movk	x8, #43691
	mul	x8, x22, x8
	mov	x9, #6148914691236517205
	movk	x9, #21846
	cmp	x8, x9
	cset	w8, lo
	mov	w0, w20
	cbnz	w8, .LBB376_34
	b	.LBB376_35
.LBB376_40:                             //   in Loop: Header=BB376_36 Depth=2
	mov	w8, wzr
	mov	w0, w20
	cbz	w8, .LBB376_35
	b	.LBB376_34
.LBB376_41:                             // %"$61"
	adrp	x19, ($Put)
	tbz	w0, #3, .LBB376_43
// %bb.42:                              // %"$62"
	ldr	x8, [x19, :lo12:($Put)]
	mov	w0, #45
	blr	x8
.LBB376_43:                             // %"$63"
	ldp	w0, w8, [x24]
	bfi	x0, x8, #32, #32
	bl	outWord
	mov	x20, #-3689348814741910324
	movk	x20, #52429
.LBB376_44:                             // %"$64"
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB376_46 Depth 2
	sub	x24, x24, #8                    // =8
	cmp	x24, x23
	b.lo	.LBB376_48
// %bb.45:                              // %"$65"
                                        //   in Loop: Header=BB376_44 Depth=1
	ldp	w21, w8, [x24]
	bfi	x21, x8, #32, #32
	mov	x22, #1569325056
	movk	x22, #17784, lsl #32
	movk	x22, #355, lsl #48
.LBB376_46:                             // %"$67"
                                        //   Parent Loop BB376_44 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	udiv	x25, x21, x22
	add	w0, w25, #48                    // =48
	ldr	x8, [x19, :lo12:($Put)]
	blr	x8
	msub	x21, x25, x22, x21
	umulh	x8, x22, x20
	lsr	x22, x8, #3
	cmp	x22, #1                         // =1
	b.ne	.LBB376_46
// %bb.47:                              // %"$69"
                                        //   in Loop: Header=BB376_44 Depth=1
	add	w0, w21, #48                    // =48
	ldr	x8, [x19, :lo12:($Put)]
	blr	x8
	b	.LBB376_44
.LBB376_48:
	mov	x0, xzr
.LBB376_49:                             // %"$33"
	mov	sp, x29
	ldp	x20, x19, [sp, #80]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #64]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #48]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #32]             // 16-byte Folded Reload
	ldp	x28, x27, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #96             // 16-byte Folded Reload
	ret
.LBB376_50:                             // %"$41"
	mov	w0, #48
	mov	x1, x19
	bl	byteSym
	mov	w0, w21
.LBB376_51:                             // %"$43"
                                        // =>This Inner Loop Header: Depth=1
	mov	x1, x19
	bl	byteSym
	cmn	x22, #1                         // =1
	b.eq	.LBB376_30
// %bb.52:                              // %"$44"
                                        //   in Loop: Header=BB376_51 Depth=1
	add	x22, x22, #1                    // =1
	mov	w0, #48
	b	.LBB376_51
.Lfunc_end376:
	.size	fmtNum, .Lfunc_end376-fmtNum
	.cfi_endproc
                                        // -- End function
	.globl	prExt                           // -- Begin function prExt
	.p2align	4
	.type	prExt,@function
prExt:                                  // @prExt
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x30, x19, [sp, #-16]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w19, -8
	.cfi_offset w30, -16
	mov	x19, x0
	bl	objFile
	cbz	w0, .LBB377_2
// %bb.1:                               // %"$2"
	bl	outAo
.LBB377_2:                              // %"$3"
	mov	x0, x19
	bl	objId
	bl	outOct
	ldp	x30, x19, [sp], #16             // 16-byte Folded Reload
	ret
.Lfunc_end377:
	.size	prExt, .Lfunc_end377-prExt
	.cfi_endproc
                                        // -- End function
	.globl	outOct                          // -- Begin function outOct
	.p2align	4
	.type	outOct,@function
outOct:                                 // @outOct
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x30, x19, [sp, #-16]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w19, -8
	.cfi_offset w30, -16
	mov	x19, x0
	cmp	x0, #8                          // =8
	b.lo	.LBB378_2
// %bb.1:                               // %"$2"
	lsr	x0, x19, #3
	bl	outOct
	and	x19, x19, #0x7
.LBB378_2:                              // %"$3"
	add	w0, w19, #48                    // =48
	adrp	x8, ($Put)
	ldr	x8, [x8, :lo12:($Put)]
	blr	x8
	ldp	x30, x19, [sp], #16             // 16-byte Folded Reload
	ret
.Lfunc_end378:
	.size	outOct, .Lfunc_end378-outOct
	.cfi_endproc
                                        // -- End function
	.globl	printSym                        // -- Begin function printSym
	.p2align	4
	.type	printSym,@function
printSym:                               // @printSym
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	sub	x8, x0, #8                      // =8
.LBB379_1:                              // %"$2"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w0, w9, [x8]
	bfi	x0, x9, #32, #32
	tst	x0, #0x6
	b.ne	.LBB379_3
// %bb.2:                               // %"$3"
                                        //   in Loop: Header=BB379_1 Depth=1
	add	x8, x0, #8                      // =8
	b	.LBB379_1
.LBB379_3:                              // %"$4"
	bl	printName
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end379:
	.size	printSym, .Lfunc_end379-printSym
	.cfi_endproc
                                        // -- End function
	.globl	printName                       // -- Begin function printName
	.p2align	4
	.type	printName,@function
printName:                              // @printName
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-48]!           // 16-byte Folded Spill
	stp	x22, x21, [sp, #16]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #32]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 48
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w30, -40
	.cfi_offset w29, -48
	cmp	x0, #738                        // =738
	b.ne	.LBB380_3
// %bb.1:                               // %"$3"
	adrp	x19, ($Put)
	ldr	x8, [x19, :lo12:($Put)]
	mov	w0, #92
	blr	x8
	ldr	x8, [x19, :lo12:($Put)]
	mov	w0, #46
	blr	x8
.LBB380_2:                              // %"$4"
	mov	sp, x29
	ldp	x20, x19, [sp, #32]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #48             // 16-byte Folded Reload
	ret
.LBB380_3:                              // %"$2"
	mov	x8, sp
	sub	x19, x8, #16                    // =16
	mov	sp, x19
	stp	wzr, wzr, [x8, #-16]
	lsr	x9, x0, #32
	stp	w0, w9, [x8, #-8]
	mov	x0, x19
	bl	symByte
	mov	w20, w0
	and	w8, w0, #0xff
	cmp	w8, #35                         // =35
	adrp	x22, ($Put)
	b.ne	.LBB380_5
// %bb.4:                               // %"$5"
	ldr	x8, [x22, :lo12:($Put)]
	mov	w0, #92
	blr	x8
.LBB380_5:                              // %"$7.preheader"
	adrp	x21, ($Delim)
	add	x21, x21, :lo12:($Delim)
	b	.LBB380_7
.LBB380_6:                              // %"$11"
                                        //   in Loop: Header=BB380_7 Depth=1
	ldr	x8, [x22, :lo12:($Put)]
	mov	w0, w20
	blr	x8
	mov	x0, x19
	bl	symByte
	mov	w20, w0
	tst	w0, #0xff
	b.eq	.LBB380_2
.LBB380_7:                              // %"$7"
                                        // =>This Inner Loop Header: Depth=1
	and	w1, w20, #0xff
	cmp	w1, #92                         // =92
	b.ne	.LBB380_9
// %bb.8:                               //   in Loop: Header=BB380_7 Depth=1
	mov	w8, #1
	cbz	w8, .LBB380_6
	b	.LBB380_10
.LBB380_9:                              // %"$9"
                                        //   in Loop: Header=BB380_7 Depth=1
	mov	x0, x21
	bl	strchr2
	cmp	x0, #0                          // =0
	cset	w8, ne
	cbz	w8, .LBB380_6
.LBB380_10:                             // %"$10"
                                        //   in Loop: Header=BB380_7 Depth=1
	ldr	x8, [x22, :lo12:($Put)]
	mov	w0, #92
	blr	x8
	b	.LBB380_6
.Lfunc_end380:
	.size	printName, .Lfunc_end380-printName
	.cfi_endproc
                                        // -- End function
	.globl	circ                            // -- Begin function circ
	.p2align	4
	.type	circ,@function
circ:                                   // @circ
	.cfi_startproc
// %bb.0:                               // %"$1"
	tst	x0, #0xf
	b.eq	.LBB381_2
// %bb.1:
	mov	x0, xzr
	ret
.LBB381_2:                              // %"$5.preheader"
	mov	x8, x0
.LBB381_3:                              // %"$5"
                                        // =>This Inner Loop Header: Depth=1
	ldr	w9, [x8]
	orr	w9, w9, #0x1
	str	w9, [x8]
	ldp	w8, w9, [x8, #8]
	bfi	x8, x9, #32, #32
	tst	x8, #0xf
	b.ne	.LBB381_5
// %bb.4:                               // %"$6"
                                        //   in Loop: Header=BB381_3 Depth=1
	ldrb	w9, [x8]
	tbz	w9, #0, .LBB381_3
	b	.LBB381_8
.LBB381_5:                              // %"$9"
                                        // =>This Inner Loop Header: Depth=1
	ldr	w8, [x0]
	and	w8, w8, #0xfffffffe
	str	w8, [x0]
	ldp	w0, w8, [x0, #8]
	bfi	x0, x8, #32, #32
	tst	x0, #0xf
	b.eq	.LBB381_5
// %bb.6:
	mov	x0, xzr
	ret
.LBB381_7:                              // %"$15"
                                        //   in Loop: Header=BB381_8 Depth=1
	ldr	w9, [x0]
	and	w9, w9, #0xfffffffe
	str	w9, [x0]
	ldp	w0, w9, [x0, #8]
	bfi	x0, x9, #32, #32
.LBB381_8:                              // %"$14"
                                        // =>This Inner Loop Header: Depth=1
	cmp	x0, x8
	b.ne	.LBB381_7
.LBB381_9:                              // %"$17"
                                        // =>This Inner Loop Header: Depth=1
	ldr	w9, [x0]
	and	w9, w9, #0xfffffffe
	str	w9, [x0]
	ldp	w0, w9, [x0, #8]
	bfi	x0, x9, #32, #32
	cmp	x8, x0
	b.ne	.LBB381_9
// %bb.10:                              // %"$4"
	mov	x0, x8
	ret
.Lfunc_end381:
	.size	circ, .Lfunc_end381-circ
	.cfi_endproc
                                        // -- End function
	.globl	space                           // -- Begin function space
	.p2align	4
	.type	space,@function
space:                                  // @space
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	adrp	x8, ($Put)
	ldr	x8, [x8, :lo12:($Put)]
	mov	w0, #32
	blr	x8
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end382:
	.size	space, .Lfunc_end382-space
	.cfi_endproc
                                        // -- End function
	.globl	objFile                         // -- Begin function objFile
	.p2align	4
	.type	objFile,@function
objFile:                                // @objFile
	.cfi_startproc
// %bb.0:                               // %"$1"
	lsr	x8, x0, #24
	ubfx	x9, x0, #24, #8
	ubfx	x8, x8, #12, #20
	and	w8, w8, #0xff00
	orr	w0, w9, w8
	ret
.Lfunc_end383:
	.size	objFile, .Lfunc_end383-objFile
	.cfi_endproc
                                        // -- End function
	.globl	outAo                           // -- Begin function outAo
	.p2align	4
	.type	outAo,@function
outAo:                                  // @outAo
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x30, x19, [sp, #-16]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w19, -8
	.cfi_offset w30, -16
	mov	w19, w0
	cmp	w0, #16                         // =16
	b.lt	.LBB384_2
// %bb.1:                               // %"$2"
	lsr	w0, w19, #4
	bl	outAo
	and	w19, w19, #0xf
.LBB384_2:                              // %"$3"
	add	w0, w19, #64                    // =64
	adrp	x8, ($Put)
	ldr	x8, [x8, :lo12:($Put)]
	blr	x8
	ldp	x30, x19, [sp], #16             // 16-byte Folded Reload
	ret
.Lfunc_end384:
	.size	outAo, .Lfunc_end384-outAo
	.cfi_endproc
                                        // -- End function
	.globl	objId                           // -- Begin function objId
	.p2align	4
	.type	objId,@function
objId:                                  // @objId
	.cfi_startproc
// %bb.0:                               // %"$1"
	lsr	x8, x0, #12
	and	x8, x8, #0xfff00000
	bfxil	x8, x0, #4, #20
	lsr	x9, x0, #20
	and	x9, x9, #0x3ff00000000
	orr	x0, x8, x9
	ret
.Lfunc_end385:
	.size	objId, .Lfunc_end385-objId
	.cfi_endproc
                                        // -- End function
	.globl	fmtWord                         // -- Begin function fmtWord
	.p2align	4
	.type	fmtWord,@function
fmtWord:                                // @fmtWord
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x30, x23, [sp, #-48]!           // 16-byte Folded Spill
	stp	x22, x21, [sp, #16]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #32]             // 16-byte Folded Spill
	.cfi_def_cfa_offset 48
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w30, -48
	mov	x19, x4
	mov	x20, x0
	mov	x22, x1
	cmp	x0, #10                         // =10
	b.lo	.LBB386_6
// %bb.1:                               // %"$2"
	mov	w21, w3
	mov	w23, w2
	mov	x8, #-3689348814741910324
	movk	x8, #52429
	umulh	x8, x20, x8
	lsr	x0, x8, #3
	mov	x1, x22
	mov	x4, x19
	bl	fmtWord
	mov	x22, x0
	cbz	x0, .LBB386_4
// %bb.2:                               // %"$5"
	tst	w21, #0xff
	b.eq	.LBB386_7
// %bb.3:                               // %"$8"
	mov	x8, #-6148914691236517206
	movk	x8, #43691
	mul	x8, x22, x8
	mov	x9, #6148914691236517205
	movk	x9, #21846
	cmp	x8, x9
	cset	w8, lo
	cmp	x22, #1                         // =1
	csel	w8, wzr, w8, lt
	mov	w23, w21
	cbz	w8, .LBB386_5
.LBB386_4:                              // %"$4.sink.split"
	mov	w0, w23
	mov	x1, x19
	bl	byteSym
.LBB386_5:                              // %"$4"
	sub	x22, x22, #1                    // =1
	mov	x8, #-3689348814741910324
	movk	x8, #52429
	umulh	x8, x20, x8
	lsr	x8, x8, #3
	mov	w9, #10
	msub	x20, x8, x9, x20
.LBB386_6:                              // %"$3"
	add	w0, w20, #48                    // =48
	mov	x1, x19
	bl	byteSym
	mov	x0, x22
	ldp	x20, x19, [sp, #32]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #16]             // 16-byte Folded Reload
	ldp	x30, x23, [sp], #48             // 16-byte Folded Reload
	ret
.LBB386_7:
	mov	w8, wzr
	mov	w23, w21
	cbnz	w8, .LBB386_4
	b	.LBB386_5
.Lfunc_end386:
	.size	fmtWord, .Lfunc_end386-fmtWord
	.cfi_endproc
                                        // -- End function
	.globl	stop                            // -- Begin function stop
	.p2align	4
	.type	stop,@function
stop:                                   // @stop
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	wzr, wzr, [x0]
.LBB387_1:                              // %"$2"
                                        // =>This Inner Loop Header: Depth=1
	mov	x8, x0
	ldr	x0, [x0, #16]
	cbnz	x0, .LBB387_1
	b	.LBB387_3
.LBB387_2:                              // %"$6"
                                        //   in Loop: Header=BB387_3 Depth=1
	ldr	x8, [x8, #8]
	str	xzr, [x8, #16]
.LBB387_3:                              // %"$5"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w10, w9, [x8]
	bfi	x10, x9, #32, #32
	cbz	x10, .LBB387_2
// %bb.4:                               // %"$7"
	ret
.Lfunc_end387:
	.size	stop, .Lfunc_end387-stop
	.cfi_endproc
                                        // -- End function
	.globl	popCtlFiles                     // -- Begin function popCtlFiles
	.p2align	4
	.type	popCtlFiles,@function
popCtlFiles:                            // @popCtlFiles
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-32]!                // 8-byte Folded Spill
	stp	x20, x19, [sp, #16]             // 16-byte Folded Spill
	.cfi_def_cfa_offset 32
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w30, -32
	adrp	x19, env+72
	ldr	x20, [x19, :lo12:env+72]
	ldr	w8, [x20, #8]
	tbnz	w8, #31, .LBB388_2
// %bb.1:                               // %"$2"
	bl	close
	b	.LBB388_3
.LBB388_2:                              // %"$3"
	mov	x0, xzr
	bl	currFd
	bl	unLock
.LBB388_3:                              // %"$4"
	ldr	x8, [x20]
	str	x8, [x19, :lo12:env+72]
	ldp	x20, x19, [sp, #16]             // 16-byte Folded Reload
	ldr	x30, [sp], #32                  // 8-byte Folded Reload
	ret
.Lfunc_end388:
	.size	popCtlFiles, .Lfunc_end388-popCtlFiles
	.cfi_endproc
                                        // -- End function
	.globl	popErrFiles                     // -- Begin function popErrFiles
	.p2align	4
	.type	popErrFiles,@function
popErrFiles:                            // @popErrFiles
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-32]!                // 8-byte Folded Spill
	stp	x20, x19, [sp, #16]             // 16-byte Folded Spill
	.cfi_def_cfa_offset 32
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w30, -32
	adrp	x19, env+64
	ldr	x20, [x19, :lo12:env+64]
	bl	dup2
	bl	close
	ldr	x8, [x20]
	str	x8, [x19, :lo12:env+64]
	ldp	x20, x19, [sp, #16]             // 16-byte Folded Reload
	ldr	x30, [sp], #32                  // 8-byte Folded Reload
	ret
.Lfunc_end389:
	.size	popErrFiles, .Lfunc_end389-popErrFiles
	.cfi_endproc
                                        // -- End function
	.globl	popOutFiles                     // -- Begin function popOutFiles
	.p2align	4
	.type	popOutFiles,@function
popOutFiles:                            // @popOutFiles
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x30, x21, [sp, #-32]!           // 16-byte Folded Spill
	stp	x20, x19, [sp, #16]             // 16-byte Folded Spill
	.cfi_def_cfa_offset 32
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w30, -32
	adrp	x8, ($OutFile)
	ldr	x0, [x8, :lo12:($OutFile)]
	bl	flush
	adrp	x19, env+56
	ldr	x20, [x19, :lo12:env+56]
	ldr	x21, [x20, #8]
	ldr	w8, [x21]
	tbnz	w8, #31, .LBB390_4
// %bb.1:                               // %"$2"
	ldr	w8, [x20, #24]
	cbz	w8, .LBB390_4
// %bb.2:                               // %"$4"
	bl	close
	ldr	w0, [x21]
	bl	closeOutFile
	ldr	w0, [x20, #24]
	cmp	w0, #2                          // =2
	b.lt	.LBB390_4
// %bb.3:                               // %"$6"
	bl	waitFile
.LBB390_4:                              // %"$3"
	ldr	x8, [x20]
	str	x8, [x19, :lo12:env+56]
	ldp	x20, x19, [sp, #16]             // 16-byte Folded Reload
	ldp	x30, x21, [sp], #32             // 16-byte Folded Reload
	ret
.Lfunc_end390:
	.size	popOutFiles, .Lfunc_end390-popOutFiles
	.cfi_endproc
                                        // -- End function
	.globl	tosOutFile                      // -- Begin function tosOutFile
	.p2align	4
	.type	tosOutFile,@function
tosOutFile:                             // @tosOutFile
	.cfi_startproc
// %bb.0:                               // %"$1"
	adrp	x8, env+56
	ldr	x8, [x8, :lo12:env+56]
	ldr	x9, [x8, #8]
	adrp	x10, ($OutFile)
	str	x9, [x10, :lo12:($OutFile)]
	adrp	x9, ($Put)
	ldr	x8, [x8, #16]
	str	x8, [x9, :lo12:($Put)]
	ret
.Lfunc_end391:
	.size	tosOutFile, .Lfunc_end391-tosOutFile
	.cfi_endproc
                                        // -- End function
	.globl	popInFiles                      // -- Begin function popInFiles
	.p2align	4
	.type	popInFiles,@function
popInFiles:                             // @popInFiles
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x30, x21, [sp, #-32]!           // 16-byte Folded Spill
	stp	x20, x19, [sp, #16]             // 16-byte Folded Spill
	.cfi_def_cfa_offset 32
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w30, -32
	adrp	x19, env+48
	ldr	x20, [x19, :lo12:env+48]
	ldr	x21, [x20, #8]
	ldr	w8, [x21, #8]
	tbnz	w8, #31, .LBB392_5
// %bb.1:                               // %"$2"
	ldr	w8, [x20, #24]
	cbz	w8, .LBB392_4
// %bb.2:                               // %"$5"
	bl	close
	ldr	w0, [x21, #8]
	bl	closeInFile
	ldr	w0, [x20, #24]
	cmp	w0, #2                          // =2
	b.lt	.LBB392_5
// %bb.3:                               // %"$7"
	bl	waitFile
	b	.LBB392_5
.LBB392_4:                              // %"$4"
	adrp	x8, ($Chr)
	ldr	w8, [x8, :lo12:($Chr)]
	str	w8, [x21, #12]
.LBB392_5:                              // %"$3"
	ldr	x8, [x20]
	str	x8, [x19, :lo12:env+48]
	ldp	x20, x19, [sp, #16]             // 16-byte Folded Reload
	ldp	x30, x21, [sp], #32             // 16-byte Folded Reload
	ret
.Lfunc_end392:
	.size	popInFiles, .Lfunc_end392-popInFiles
	.cfi_endproc
                                        // -- End function
	.globl	tosInFile                       // -- Begin function tosInFile
	.p2align	4
	.type	tosInFile,@function
tosInFile:                              // @tosInFile
	.cfi_startproc
// %bb.0:                               // %"$1"
	adrp	x8, env+48
	ldr	x8, [x8, :lo12:env+48]
	ldr	x9, [x8, #8]
	adrp	x10, ($InFile)
	str	x9, [x10, :lo12:($InFile)]
	ldr	w9, [x9, #12]
	adrp	x10, ($Chr)
	str	w9, [x10, :lo12:($Chr)]
	adrp	x9, ($Get)
	ldr	x8, [x8, #16]
	str	x8, [x9, :lo12:($Get)]
	ret
.Lfunc_end393:
	.size	tosInFile, .Lfunc_end393-tosInFile
	.cfi_endproc
                                        // -- End function
	.globl	memcpy2                         // -- Begin function memcpy2
	.p2align	4
	.type	memcpy2,@function
memcpy2:                                // @memcpy2
	.cfi_startproc
// %bb.0:                               // %"$1"
	mov	x8, xzr
	cmp	x2, x8
	b.eq	.LBB394_2
.LBB394_1:                              // %"$3"
                                        // =>This Inner Loop Header: Depth=1
	ldrb	w9, [x1, x8]
	strb	w9, [x0, x8]
	add	x8, x8, #1                      // =1
	cmp	x2, x8
	b.ne	.LBB394_1
.LBB394_2:                              // %"$4"
	ret
.Lfunc_end394:
	.size	memcpy2, .Lfunc_end394-memcpy2
	.cfi_endproc
                                        // -- End function
	.globl	close                           // -- Begin function close
	.p2align	4
	.type	close,@function
close:                                  // @close
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	adrp	x0, .L$42
	add	x0, x0, :lo12:.L$42
	bl	"pr-libc"
	mov	w0, wzr
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end395:
	.size	close, .Lfunc_end395-close
	.cfi_endproc
                                        // -- End function
	.globl	closeInFile                     // -- Begin function closeInFile
	.p2align	4
	.type	closeInFile,@function
closeInFile:                            // @closeInFile
	.cfi_startproc
// %bb.0:                               // %"$1"
	ret
.Lfunc_end396:
	.size	closeInFile, .Lfunc_end396-closeInFile
	.cfi_endproc
                                        // -- End function
	.globl	waitFile                        // -- Begin function waitFile
	.p2align	4
	.type	waitFile,@function
waitFile:                               // @waitFile
	.cfi_startproc
// %bb.0:                               // %"$1"
	sub	sp, sp, #32                     // =32
	stp	x30, x19, [sp, #16]             // 16-byte Folded Spill
	.cfi_def_cfa_offset 32
	.cfi_offset w19, -8
	.cfi_offset w30, -16
	adrp	x19, ($Signal)
.LBB397_1:                              // %"$2"
                                        // =>This Inner Loop Header: Depth=1
	bl	waitpid
	tbz	w0, #31, .LBB397_5
// %bb.2:                               // %"$3"
                                        //   in Loop: Header=BB397_1 Depth=1
	bl	gErrno
	cmp	w0, #2                          // =2
	b.ne	.LBB397_6
// %bb.3:                               // %"$6"
                                        //   in Loop: Header=BB397_1 Depth=1
	ldr	w8, [x19, :lo12:($Signal)]
	cbz	w8, .LBB397_1
// %bb.4:                               // %"$7"
                                        //   in Loop: Header=BB397_1 Depth=1
	mov	x0, xzr
	bl	sighandler
	b	.LBB397_1
.LBB397_5:                              // %"$4"
	ldrsw	x8, [sp, #12]
	mov	w9, #2
	bfi	x9, x8, #4, #60
	adrp	x8, SymTab+392
	str	x9, [x8, :lo12:SymTab+392]
	ldp	x30, x19, [sp, #16]             // 16-byte Folded Reload
	add	sp, sp, #32                     // =32
	ret
.LBB397_6:                              // %"$5"
	bl	closeErr
.Lfunc_end397:
	.size	waitFile, .Lfunc_end397-waitFile
	.cfi_endproc
                                        // -- End function
	.globl	waitpid                         // -- Begin function waitpid
	.p2align	4
	.type	waitpid,@function
waitpid:                                // @waitpid
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	adrp	x0, .L$45
	add	x0, x0, :lo12:.L$45
	bl	"pr-libc"
	mov	w0, wzr
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end398:
	.size	waitpid, .Lfunc_end398-waitpid
	.cfi_endproc
                                        // -- End function
	.globl	gErrno                          // -- Begin function gErrno
	.p2align	4
	.type	gErrno,@function
gErrno:                                 // @gErrno
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	adrp	x0, .L$85
	add	x0, x0, :lo12:.L$85
	bl	"pr-libc"
	mov	w0, wzr
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end399:
	.size	gErrno, .Lfunc_end399-gErrno
	.cfi_endproc
                                        // -- End function
	.globl	closeErr                        // -- Begin function closeErr
	.p2align	4
	.type	closeErr,@function
closeErr:                               // @closeErr
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	bl	strErrno
	mov	x3, x0
	adrp	x2, .L$134
	add	x2, x2, :lo12:.L$134
	mov	x0, xzr
	mov	x1, xzr
	bl	err
.Lfunc_end400:
	.size	closeErr, .Lfunc_end400-closeErr
	.cfi_endproc
                                        // -- End function
	.globl	strErrno                        // -- Begin function strErrno
	.p2align	4
	.type	strErrno,@function
strErrno:                               // @strErrno
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	adrp	x0, .L$54
	add	x0, x0, :lo12:.L$54
	bl	"pr-libc"
	mov	x0, xzr
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end401:
	.size	strErrno, .Lfunc_end401-strErrno
	.cfi_endproc
                                        // -- End function
	.globl	"pr-libc"                       // -- Begin function pr-libc
	.p2align	4
	.type	"pr-libc",@function
"pr-libc":                              // @pr-libc
	.cfi_startproc
// %bb.0:                               // %"$1"
	ret
.Lfunc_end402:
	.size	"pr-libc", .Lfunc_end402-"pr-libc"
	.cfi_endproc
                                        // -- End function
	.globl	flush                           // -- Begin function flush
	.p2align	4
	.type	flush,@function
flush:                                  // @flush
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	adrp	x0, .L$145
	add	x0, x0, :lo12:.L$145
	bl	outString
	mov	w0, wzr
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end403:
	.size	flush, .Lfunc_end403-flush
	.cfi_endproc
                                        // -- End function
	.globl	closeOutFile                    // -- Begin function closeOutFile
	.p2align	4
	.type	closeOutFile,@function
closeOutFile:                           // @closeOutFile
	.cfi_startproc
// %bb.0:                               // %"$1"
	ret
.Lfunc_end404:
	.size	closeOutFile, .Lfunc_end404-closeOutFile
	.cfi_endproc
                                        // -- End function
	.globl	dup2                            // -- Begin function dup2
	.p2align	4
	.type	dup2,@function
dup2:                                   // @dup2
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	adrp	x0, .L$41
	add	x0, x0, :lo12:.L$41
	bl	"pr-libc"
	mov	w0, wzr
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end405:
	.size	dup2, .Lfunc_end405-dup2
	.cfi_endproc
                                        // -- End function
	.globl	currFd                          // -- Begin function currFd
	.p2align	4
	.type	currFd,@function
currFd:                                 // @currFd
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	adrp	x9, env+48
	add	x9, x9, :lo12:env+48
	ldp	x8, x9, [x9]
	orr	x10, x8, x9
	cbz	x10, .LBB406_7
// %bb.1:                               // %"$5"
	cbz	x9, .LBB406_4
// %bb.2:                               // %"$7"
	cbz	x8, .LBB406_5
// %bb.3:                               // %"$9"
	mov	x10, sp
	cmp	x9, x8
	cset	w11, hi
	cmp	x8, x9
	cset	w12, hi
	cmp	x8, x10
	csel	w10, w11, w12, hi
	cmp	w10, #1                         // =1
	b.ne	.LBB406_5
.LBB406_4:                              // %"$8"
	ldr	x8, [x8, #8]
	add	x8, x8, #8                      // =8
	b	.LBB406_6
.LBB406_5:                              // %"$15"
	ldr	x8, [x9, #8]
.LBB406_6:                              // %"$2"
	ldr	w0, [x8]
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.LBB406_7:                              // %"$6"
	adrp	x2, .L$148
	add	x2, x2, :lo12:.L$148
	mov	x0, xzr
	mov	x1, xzr
	mov	x3, xzr
	bl	err
.Lfunc_end406:
	.size	currFd, .Lfunc_end406-currFd
	.cfi_endproc
                                        // -- End function
	.globl	unLock                          // -- Begin function unLock
	.p2align	4
	.type	unLock,@function
unLock:                                 // @unLock
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	adrp	x0, .L$99
	add	x0, x0, :lo12:.L$99
	bl	"pr-libc"
	mov	w0, wzr
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end407:
	.size	unLock, .Lfunc_end407-unLock
	.cfi_endproc
                                        // -- End function
	.globl	xName                           // -- Begin function xName
	.p2align	4
	.type	xName,@function
xName:                                  // @xName
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	adrp	x9, SymTab+8
	add	x9, x9, :lo12:SymTab+8
	cmp	x1, x9
	b.ne	.LBB408_3
// %bb.1:
	mov	w0, #2
.LBB408_2:                              // %"$2"
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.LBB408_3:                              // %"$3"
	mov	x8, x0
	ldp	w0, w9, [x1, #-8]
	bfi	x0, x9, #32, #32
	tbnz	w0, #3, .LBB408_6
// %bb.4:                               // %"$7"
	tst	x0, #0x6
	b.ne	.LBB408_2
.LBB408_5:                              // %"$8"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w0, w8, [x0, #8]
	bfi	x0, x8, #32, #32
	tst	x0, #0x6
	b.eq	.LBB408_5
	b	.LBB408_2
.LBB408_6:                              // %"$6"
	mov	x0, x8
	bl	nameErr
.Lfunc_end408:
	.size	xName, .Lfunc_end408-xName
	.cfi_endproc
                                        // -- End function
	.globl	preStr                          // -- Begin function preStr
	.p2align	4
	.type	preStr,@function
preStr:                                 // @preStr
	.cfi_startproc
// %bb.0:                               // %"$1"
	sub	sp, sp, #48                     // =48
	stp	x30, x21, [sp, #16]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #32]             // 16-byte Folded Spill
	.cfi_def_cfa_offset 48
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w30, -32
	mov	x19, x2
	mov	w20, w1
	stp	xzr, x0, [sp]
	mov	x0, sp
	bl	symByte
	mov	w21, w0
.LBB409_1:                              // %"$2"
                                        // =>This Inner Loop Header: Depth=1
	and	w8, w20, #0xff
	cmp	w8, w21, uxtb
	b.ne	.LBB409_4
// %bb.2:                               // %"$3"
                                        //   in Loop: Header=BB409_1 Depth=1
	mov	x0, sp
	bl	symByte
	tst	w0, #0xff
	b.eq	.LBB409_5
// %bb.3:                               // %"$6"
                                        //   in Loop: Header=BB409_1 Depth=1
	mov	w21, w0
	mov	x0, x19
	bl	symByte
	mov	w20, w0
	tst	w0, #0xff
	b.ne	.LBB409_1
.LBB409_4:
	mov	w0, wzr
	b	.LBB409_6
.LBB409_5:
	mov	w0, #1
.LBB409_6:                              // %"$4"
	ldp	x20, x19, [sp, #32]             // 16-byte Folded Reload
	ldp	x30, x21, [sp, #16]             // 16-byte Folded Reload
	add	sp, sp, #48                     // =48
	ret
.Lfunc_end409:
	.size	preStr, .Lfunc_end409-preStr
	.cfi_endproc
                                        // -- End function
	.globl	nameErr                         // -- Begin function nameErr
	.p2align	4
	.type	nameErr,@function
nameErr:                                // @nameErr
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	adrp	x2, .L$116
	add	x2, x2, :lo12:.L$116
	mov	x3, xzr
	bl	err
.Lfunc_end410:
	.size	nameErr, .Lfunc_end410-nameErr
	.cfi_endproc
                                        // -- End function
	.globl	consStr                         // -- Begin function consStr
	.p2align	4
	.type	consStr,@function
consStr:                                // @consStr
	.cfi_startproc
// %bb.0:                               // %"$1"
	cmp	x0, #2                          // =2
	b.ne	.LBB411_2
// %bb.1:                               // %"$4"
	adrp	x0, SymTab+8
	add	x0, x0, :lo12:SymTab+8
	ret
.LBB411_2:                              // %"$3"
	mov	x1, xzr
	b	consSym
.Lfunc_end411:
	.size	consStr, .Lfunc_end411-consStr
	.cfi_endproc
                                        // -- End function
	.globl	varErr                          // -- Begin function varErr
	.p2align	4
	.type	varErr,@function
varErr:                                 // @varErr
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	adrp	x2, .L$120
	add	x2, x2, :lo12:.L$120
	mov	x3, xzr
	bl	err
.Lfunc_end412:
	.size	varErr, .Lfunc_end412-varErr
	.cfi_endproc
                                        // -- End function
	.globl	protErr                         // -- Begin function protErr
	.p2align	4
	.type	protErr,@function
protErr:                                // @protErr
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	adrp	x2, .L$122
	add	x2, x2, :lo12:.L$122
	mov	x3, xzr
	bl	err
.Lfunc_end413:
	.size	protErr, .Lfunc_end413-protErr
	.cfi_endproc
                                        // -- End function
	.globl	evCnt                           // -- Begin function evCnt
	.p2align	4
	.type	evCnt,@function
evCnt:                                  // @evCnt
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x30, x19, [sp, #-16]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w19, -8
	.cfi_offset w30, -16
	mov	x19, x0
	ldp	w1, w8, [x1]
	bfi	x1, x8, #32, #32
	tst	x1, #0x6
	b.ne	.LBB414_4
// %bb.1:                               // %"$3"
	tbz	w1, #3, .LBB414_3
// %bb.2:                               // %"$6"
	ldp	w1, w8, [x1]
	bfi	x1, x8, #32, #32
	b	.LBB414_4
.LBB414_3:                              // %"$5"
	mov	x0, x1
	bl	evList
	mov	x1, x0
.LBB414_4:                              // %"$2"
	mov	x0, x19
	bl	xCnt
	ldp	x30, x19, [sp], #16             // 16-byte Folded Reload
	ret
.Lfunc_end414:
	.size	evCnt, .Lfunc_end414-evCnt
	.cfi_endproc
                                        // -- End function
	.globl	xCnt                            // -- Begin function xCnt
	.p2align	4
	.type	xCnt,@function
xCnt:                                   // @xCnt
	.cfi_startproc
// %bb.0:                               // %"$1"
	tbz	w1, #1, .LBB415_2
// %bb.1:                               // %"$3"
	lsr	x8, x1, #4
	tst	x1, #0x8
	cneg	x0, x8, ne
	ret
.LBB415_2:                              // %"$2"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	bl	cntErr
.Lfunc_end415:
	.size	xCnt, .Lfunc_end415-xCnt
	.cfi_endproc
                                        // -- End function
	.globl	cntErr                          // -- Begin function cntErr
	.p2align	4
	.type	cntErr,@function
cntErr:                                 // @cntErr
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	adrp	x2, .L$112
	add	x2, x2, :lo12:.L$112
	mov	x3, xzr
	bl	err
.Lfunc_end416:
	.size	cntErr, .Lfunc_end416-cntErr
	.cfi_endproc
                                        // -- End function
	.globl	loadKern                        // -- Begin function loadKern
	.p2align	4
	.type	loadKern,@function
loadKern:                               // @loadKern
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-96]!           // 16-byte Folded Spill
	stp	x28, x27, [sp, #16]             // 16-byte Folded Spill
	stp	x26, x25, [sp, #32]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #48]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #64]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #80]             // 16-byte Folded Spill
	mov	x29, sp
	sub	sp, sp, #128                    // =128
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	adrp	x20, env
	add	x20, x20, :lo12:env
	adrp	x23, SymTab+8
	add	x23, x23, :lo12:SymTab+8
	ldr	x19, [x20, #88]
	ldr	x8, [x20]
	stp	x19, x8, [x29, #-16]
	sub	x8, x29, #16                    // =16
	ldp	x9, x10, [x23, #104]
	stp	x10, x9, [x29, #-128]           // 16-byte Folded Spill
	stp	x9, x8, [x29, #-32]
	sub	x8, x29, #32                    // =32
	stp	x10, x8, [x29, #-48]
	adrp	x24, gcData
	add	x24, x24, :lo12:gcData
	sub	x8, x29, #48                    // =48
	ldp	x25, x26, [x24]
	stp	x25, x8, [x29, #-64]
	sub	x8, x29, #64                    // =64
	stp	x26, x8, [x29, #-80]
	sub	x8, x29, #80                    // =80
	str	x8, [x20]
	mov	w9, #10
	stp	x9, x8, [x29, #-96]
	sub	x8, x29, #96                    // =96
	str	x8, [x20]
	stp	x9, x8, [x29, #-112]
	sub	x8, x29, #112                   // =112
	str	x8, [x20]
	stp	x23, x23, [x23, #104]
	str	x23, [x24, #8]
	ldr	x8, [x23, #736]
	sub	x8, x8, #8                      // =8
	str	x23, [x24]
.LBB417_1:                              // %"$2"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w8, w9, [x8]
	bfi	x8, x9, #32, #32
	tst	x8, #0x6
	b.ne	.LBB417_3
// %bb.2:                               // %"$3"
                                        //   in Loop: Header=BB417_1 Depth=1
	add	x8, x8, #8                      // =8
	b	.LBB417_1
.LBB417_3:                              // %"$4"
	adrp	x9, ($Chr)
	ldr	w28, [x9, :lo12:($Chr)]
	adrp	x21, ($Get)
	ldr	x22, [x21, :lo12:($Get)]
	adrp	x9, getParse
	add	x9, x9, :lo12:getParse
	ldr	x27, [x20, #80]
	str	x9, [x21, :lo12:($Get)]
	ldr	x9, [x20]
	mov	x10, sp
	sub	x11, x10, #16                   // =16
	mov	sp, x11
	lsr	x12, x8, #32
	lsr	x13, x9, #32
	stp	w8, w12, [x10, #-16]
	stp	w9, w13, [x10, #-8]
	str	x11, [x20]
	mov	x9, sp
	sub	x10, x9, #32                    // =32
	mov	sp, x10
	stp	wzr, wzr, [x9, #-32]
	stp	w8, w12, [x9, #-24]
	mov	w8, #23818
	stp	w8, wzr, [x9, #-16]
	str	x10, [x20, #80]
.LBB417_4:                              // %"$5"
                                        // =>This Inner Loop Header: Depth=1
	mov	w0, wzr
	bl	read1
	cmp	x0, x23
	b.eq	.LBB417_8
// %bb.5:                               // %"$6"
                                        //   in Loop: Header=BB417_4 Depth=1
	stur	x0, [x29, #-96]
	tst	x0, #0x6
	b.ne	.LBB417_4
// %bb.6:                               // %"$9"
                                        //   in Loop: Header=BB417_4 Depth=1
	tbnz	w0, #3, .LBB417_4
// %bb.7:                               // %"$11"
                                        //   in Loop: Header=BB417_4 Depth=1
	bl	evList
	b	.LBB417_4
.LBB417_8:                              // %"$7"
	str	x22, [x21, :lo12:($Get)]
	adrp	x8, ($Chr)
	str	w28, [x8, :lo12:($Chr)]
	stp	x25, x26, [x24]
	adrp	x8, SymTab+112
	add	x8, x8, :lo12:SymTab+112
	ldur	x10, [x29, #-128]               // 8-byte Folded Reload
	ldur	x9, [x29, #-120]                // 8-byte Folded Reload
	stp	x9, x10, [x8]
	stp	x27, x19, [x20, #80]
	ldur	x8, [x29, #-8]
	str	x8, [x20]
	mov	x0, x19
	mov	sp, x29
	ldp	x20, x19, [sp, #80]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #64]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #48]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #32]             // 16-byte Folded Reload
	ldp	x28, x27, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #96             // 16-byte Folded Reload
	ret
.Lfunc_end417:
	.size	loadKern, .Lfunc_end417-loadKern
	.cfi_endproc
                                        // -- End function
	.globl	getParse                        // -- Begin function getParse
	.p2align	4
	.type	getParse,@function
getParse:                               // @getParse
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x30, x19, [sp, #-16]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w19, -8
	.cfi_offset w30, -16
	adrp	x8, env+80
	ldr	x19, [x8, :lo12:env+80]
	mov	x0, x19
	bl	symByte
	ands	w0, w0, #0xff
	b.ne	.LBB418_2
// %bb.1:                               // %"$3"
	ldr	w8, [x19, #16]!
	ldr	w9, [x19, #4]
	and	w10, w8, #0xff
	bfi	x8, x9, #32, #32
	lsr	x11, x8, #8
	ubfx	x9, x9, #8, #24
	stp	w11, w9, [x19]
	cmp	x8, #0                          // =0
	csinv	w0, w10, wzr, ne
.LBB418_2:                              // %"$4"
	adrp	x8, ($Chr)
	str	w0, [x8, :lo12:($Chr)]
	ldp	x30, x19, [sp], #16             // 16-byte Folded Reload
	ret
.Lfunc_end418:
	.size	getParse, .Lfunc_end418-getParse
	.cfi_endproc
                                        // -- End function
	.globl	evSym                           // -- Begin function evSym
	.p2align	4
	.type	evSym,@function
evSym:                                  // @evSym
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	tst	x0, #0x6
	b.ne	.LBB419_4
// %bb.1:                               // %"$3"
	tbz	w0, #3, .LBB419_3
// %bb.2:                               // %"$6"
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB419_4
.LBB419_3:                              // %"$5"
	bl	evList
.LBB419_4:                              // %"$2"
	bl	xSym
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end419:
	.size	evSym, .Lfunc_end419-evSym
	.cfi_endproc
                                        // -- End function
	.globl	_cb1                            // -- Begin function _cb1
	.p2align	4
	.type	_cb1,@function
_cb1:                                   // @_cb1
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	mov	x5, x4
	mov	x4, x3
	mov	x3, x2
	mov	x2, x1
	mov	x1, x0
	adrp	x8, gcData+40
	ldr	x0, [x8, :lo12:gcData+40]
	bl	cbl
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end420:
	.size	_cb1, .Lfunc_end420-_cb1
	.cfi_endproc
                                        // -- End function
	.globl	_cb2                            // -- Begin function _cb2
	.p2align	4
	.type	_cb2,@function
_cb2:                                   // @_cb2
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	mov	x5, x4
	mov	x4, x3
	mov	x3, x2
	mov	x2, x1
	mov	x1, x0
	adrp	x8, gcData+56
	ldr	x0, [x8, :lo12:gcData+56]
	bl	cbl
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end421:
	.size	_cb2, .Lfunc_end421-_cb2
	.cfi_endproc
                                        // -- End function
	.globl	_cb3                            // -- Begin function _cb3
	.p2align	4
	.type	_cb3,@function
_cb3:                                   // @_cb3
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	mov	x5, x4
	mov	x4, x3
	mov	x3, x2
	mov	x2, x1
	mov	x1, x0
	adrp	x8, gcData+72
	ldr	x0, [x8, :lo12:gcData+72]
	bl	cbl
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end422:
	.size	_cb3, .Lfunc_end422-_cb3
	.cfi_endproc
                                        // -- End function
	.globl	_cb4                            // -- Begin function _cb4
	.p2align	4
	.type	_cb4,@function
_cb4:                                   // @_cb4
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	mov	x5, x4
	mov	x4, x3
	mov	x3, x2
	mov	x2, x1
	mov	x1, x0
	adrp	x8, gcData+88
	ldr	x0, [x8, :lo12:gcData+88]
	bl	cbl
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end423:
	.size	_cb4, .Lfunc_end423-_cb4
	.cfi_endproc
                                        // -- End function
	.globl	_cb5                            // -- Begin function _cb5
	.p2align	4
	.type	_cb5,@function
_cb5:                                   // @_cb5
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	mov	x5, x4
	mov	x4, x3
	mov	x3, x2
	mov	x2, x1
	mov	x1, x0
	adrp	x8, gcData+104
	ldr	x0, [x8, :lo12:gcData+104]
	bl	cbl
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end424:
	.size	_cb5, .Lfunc_end424-_cb5
	.cfi_endproc
                                        // -- End function
	.globl	_cb6                            // -- Begin function _cb6
	.p2align	4
	.type	_cb6,@function
_cb6:                                   // @_cb6
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	mov	x5, x4
	mov	x4, x3
	mov	x3, x2
	mov	x2, x1
	mov	x1, x0
	adrp	x8, gcData+120
	ldr	x0, [x8, :lo12:gcData+120]
	bl	cbl
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end425:
	.size	_cb6, .Lfunc_end425-_cb6
	.cfi_endproc
                                        // -- End function
	.globl	_cb7                            // -- Begin function _cb7
	.p2align	4
	.type	_cb7,@function
_cb7:                                   // @_cb7
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	mov	x5, x4
	mov	x4, x3
	mov	x3, x2
	mov	x2, x1
	mov	x1, x0
	adrp	x8, gcData+136
	ldr	x0, [x8, :lo12:gcData+136]
	bl	cbl
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end426:
	.size	_cb7, .Lfunc_end426-_cb7
	.cfi_endproc
                                        // -- End function
	.globl	_cb8                            // -- Begin function _cb8
	.p2align	4
	.type	_cb8,@function
_cb8:                                   // @_cb8
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	mov	x5, x4
	mov	x4, x3
	mov	x3, x2
	mov	x2, x1
	mov	x1, x0
	adrp	x8, gcData+152
	ldr	x0, [x8, :lo12:gcData+152]
	bl	cbl
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end427:
	.size	_cb8, .Lfunc_end427-_cb8
	.cfi_endproc
                                        // -- End function
	.globl	_cb9                            // -- Begin function _cb9
	.p2align	4
	.type	_cb9,@function
_cb9:                                   // @_cb9
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	mov	x5, x4
	mov	x4, x3
	mov	x3, x2
	mov	x2, x1
	mov	x1, x0
	adrp	x8, gcData+168
	ldr	x0, [x8, :lo12:gcData+168]
	bl	cbl
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end428:
	.size	_cb9, .Lfunc_end428-_cb9
	.cfi_endproc
                                        // -- End function
	.globl	_cb10                           // -- Begin function _cb10
	.p2align	4
	.type	_cb10,@function
_cb10:                                  // @_cb10
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	mov	x5, x4
	mov	x4, x3
	mov	x3, x2
	mov	x2, x1
	mov	x1, x0
	adrp	x8, gcData+184
	ldr	x0, [x8, :lo12:gcData+184]
	bl	cbl
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end429:
	.size	_cb10, .Lfunc_end429-_cb10
	.cfi_endproc
                                        // -- End function
	.globl	_cb11                           // -- Begin function _cb11
	.p2align	4
	.type	_cb11,@function
_cb11:                                  // @_cb11
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	mov	x5, x4
	mov	x4, x3
	mov	x3, x2
	mov	x2, x1
	mov	x1, x0
	adrp	x8, gcData+200
	ldr	x0, [x8, :lo12:gcData+200]
	bl	cbl
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end430:
	.size	_cb11, .Lfunc_end430-_cb11
	.cfi_endproc
                                        // -- End function
	.globl	_cb12                           // -- Begin function _cb12
	.p2align	4
	.type	_cb12,@function
_cb12:                                  // @_cb12
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	mov	x5, x4
	mov	x4, x3
	mov	x3, x2
	mov	x2, x1
	mov	x1, x0
	adrp	x8, gcData+216
	ldr	x0, [x8, :lo12:gcData+216]
	bl	cbl
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end431:
	.size	_cb12, .Lfunc_end431-_cb12
	.cfi_endproc
                                        // -- End function
	.globl	_cb13                           // -- Begin function _cb13
	.p2align	4
	.type	_cb13,@function
_cb13:                                  // @_cb13
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	mov	x5, x4
	mov	x4, x3
	mov	x3, x2
	mov	x2, x1
	mov	x1, x0
	adrp	x8, gcData+232
	ldr	x0, [x8, :lo12:gcData+232]
	bl	cbl
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end432:
	.size	_cb13, .Lfunc_end432-_cb13
	.cfi_endproc
                                        // -- End function
	.globl	_cb14                           // -- Begin function _cb14
	.p2align	4
	.type	_cb14,@function
_cb14:                                  // @_cb14
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	mov	x5, x4
	mov	x4, x3
	mov	x3, x2
	mov	x2, x1
	mov	x1, x0
	adrp	x8, gcData+248
	ldr	x0, [x8, :lo12:gcData+248]
	bl	cbl
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end433:
	.size	_cb14, .Lfunc_end433-_cb14
	.cfi_endproc
                                        // -- End function
	.globl	_cb15                           // -- Begin function _cb15
	.p2align	4
	.type	_cb15,@function
_cb15:                                  // @_cb15
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	mov	x5, x4
	mov	x4, x3
	mov	x3, x2
	mov	x2, x1
	mov	x1, x0
	adrp	x8, gcData+264
	ldr	x0, [x8, :lo12:gcData+264]
	bl	cbl
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end434:
	.size	_cb15, .Lfunc_end434-_cb15
	.cfi_endproc
                                        // -- End function
	.globl	_cb16                           // -- Begin function _cb16
	.p2align	4
	.type	_cb16,@function
_cb16:                                  // @_cb16
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	mov	x5, x4
	mov	x4, x3
	mov	x3, x2
	mov	x2, x1
	mov	x1, x0
	adrp	x8, gcData+280
	ldr	x0, [x8, :lo12:gcData+280]
	bl	cbl
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end435:
	.size	_cb16, .Lfunc_end435-_cb16
	.cfi_endproc
                                        // -- End function
	.globl	_cb17                           // -- Begin function _cb17
	.p2align	4
	.type	_cb17,@function
_cb17:                                  // @_cb17
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	mov	x5, x4
	mov	x4, x3
	mov	x3, x2
	mov	x2, x1
	mov	x1, x0
	adrp	x8, gcData+296
	ldr	x0, [x8, :lo12:gcData+296]
	bl	cbl
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end436:
	.size	_cb17, .Lfunc_end436-_cb17
	.cfi_endproc
                                        // -- End function
	.globl	_cb18                           // -- Begin function _cb18
	.p2align	4
	.type	_cb18,@function
_cb18:                                  // @_cb18
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	mov	x5, x4
	mov	x4, x3
	mov	x3, x2
	mov	x2, x1
	mov	x1, x0
	adrp	x8, gcData+312
	ldr	x0, [x8, :lo12:gcData+312]
	bl	cbl
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end437:
	.size	_cb18, .Lfunc_end437-_cb18
	.cfi_endproc
                                        // -- End function
	.globl	_cb19                           // -- Begin function _cb19
	.p2align	4
	.type	_cb19,@function
_cb19:                                  // @_cb19
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	mov	x5, x4
	mov	x4, x3
	mov	x3, x2
	mov	x2, x1
	mov	x1, x0
	adrp	x8, gcData+328
	ldr	x0, [x8, :lo12:gcData+328]
	bl	cbl
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end438:
	.size	_cb19, .Lfunc_end438-_cb19
	.cfi_endproc
                                        // -- End function
	.globl	_cb20                           // -- Begin function _cb20
	.p2align	4
	.type	_cb20,@function
_cb20:                                  // @_cb20
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	mov	x5, x4
	mov	x4, x3
	mov	x3, x2
	mov	x2, x1
	mov	x1, x0
	adrp	x8, gcData+344
	ldr	x0, [x8, :lo12:gcData+344]
	bl	cbl
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end439:
	.size	_cb20, .Lfunc_end439-_cb20
	.cfi_endproc
                                        // -- End function
	.globl	_cb21                           // -- Begin function _cb21
	.p2align	4
	.type	_cb21,@function
_cb21:                                  // @_cb21
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	mov	x5, x4
	mov	x4, x3
	mov	x3, x2
	mov	x2, x1
	mov	x1, x0
	adrp	x8, gcData+360
	ldr	x0, [x8, :lo12:gcData+360]
	bl	cbl
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end440:
	.size	_cb21, .Lfunc_end440-_cb21
	.cfi_endproc
                                        // -- End function
	.globl	_cb22                           // -- Begin function _cb22
	.p2align	4
	.type	_cb22,@function
_cb22:                                  // @_cb22
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	mov	x5, x4
	mov	x4, x3
	mov	x3, x2
	mov	x2, x1
	mov	x1, x0
	adrp	x8, gcData+376
	ldr	x0, [x8, :lo12:gcData+376]
	bl	cbl
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end441:
	.size	_cb22, .Lfunc_end441-_cb22
	.cfi_endproc
                                        // -- End function
	.globl	_cb23                           // -- Begin function _cb23
	.p2align	4
	.type	_cb23,@function
_cb23:                                  // @_cb23
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	mov	x5, x4
	mov	x4, x3
	mov	x3, x2
	mov	x2, x1
	mov	x1, x0
	adrp	x8, gcData+392
	ldr	x0, [x8, :lo12:gcData+392]
	bl	cbl
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end442:
	.size	_cb23, .Lfunc_end442-_cb23
	.cfi_endproc
                                        // -- End function
	.globl	_cb24                           // -- Begin function _cb24
	.p2align	4
	.type	_cb24,@function
_cb24:                                  // @_cb24
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	mov	x5, x4
	mov	x4, x3
	mov	x3, x2
	mov	x2, x1
	mov	x1, x0
	adrp	x8, gcData+408
	ldr	x0, [x8, :lo12:gcData+408]
	bl	cbl
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end443:
	.size	_cb24, .Lfunc_end443-_cb24
	.cfi_endproc
                                        // -- End function
	.globl	cbl                             // -- Begin function cbl
	.p2align	4
	.type	cbl,@function
cbl:                                    // @cbl
	.cfi_startproc
// %bb.0:                               // %"$1"
	sub	sp, sp, #240                    // =240
	stp	x30, x23, [sp, #192]            // 16-byte Folded Spill
	stp	x22, x21, [sp, #208]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #224]            // 16-byte Folded Spill
	.cfi_def_cfa_offset 240
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w30, -48
	mov	x19, x5
	mov	x20, x4
	mov	x21, x3
	mov	x22, x2
	mov	w23, #2
	add	x8, sp, #160                    // =160
	add	x8, x8, #24                     // =24
	stp	x23, x0, [sp, #176]
	str	x8, [sp, #160]
	mov	x0, x1
	bl	box
	stp	x23, x0, [sp, #144]
	add	x8, sp, #128                    // =128
	add	x9, x8, #24                     // =24
	str	x8, [sp, #168]
	str	x9, [sp, #128]
	mov	x0, x22
	bl	box
	stp	x23, x0, [sp, #112]
	add	x8, sp, #96                     // =96
	add	x9, x8, #24                     // =24
	str	x8, [sp, #136]
	str	x9, [sp, #96]
	mov	x0, x21
	bl	box
	stp	x23, x0, [sp, #80]
	add	x8, sp, #64                     // =64
	add	x9, x8, #24                     // =24
	str	x8, [sp, #104]
	str	x9, [sp, #64]
	mov	x0, x20
	bl	box
	stp	x23, x0, [sp, #48]
	add	x8, sp, #32                     // =32
	add	x9, x8, #24                     // =24
	str	x8, [sp, #72]
	str	x9, [sp, #32]
	mov	x0, x19
	bl	box
	mov	x8, sp
	add	x9, x8, #24                     // =24
	stp	x23, x0, [sp, #16]
	adrp	x10, SymTab+8
	add	x10, x10, :lo12:SymTab+8
	str	x8, [sp, #40]
	stp	x9, x10, [sp]
	add	x0, sp, #160                    // =160
	bl	evList
	mov	x1, x0
	mov	x0, xzr
	bl	xCnt
	ldp	x20, x19, [sp, #224]            // 16-byte Folded Reload
	ldp	x22, x21, [sp, #208]            // 16-byte Folded Reload
	ldp	x30, x23, [sp, #192]            // 16-byte Folded Reload
	add	sp, sp, #240                    // =240
	ret
.Lfunc_end444:
	.size	cbl, .Lfunc_end444-cbl
	.cfi_endproc
                                        // -- End function
	.globl	box                             // -- Begin function box
	.p2align	4
	.type	box,@function
box:                                    // @box
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	mov	x8, x0
	tbnz	x0, #63, .LBB445_3
// %bb.1:                               // %"$2"
	tst	x8, #0xf000000000000000
	b.eq	.LBB445_5
// %bb.2:                               // %"$5"
	mov	x0, x8
	bl	boxNum
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.LBB445_3:                              // %"$3"
	neg	x8, x8
	tst	x8, #0xf000000000000000
	b.eq	.LBB445_6
// %bb.4:                               // %"$8"
	mov	x0, x8
	bl	boxNum
	b	.LBB445_7
.LBB445_5:                              // %"$6"
	mov	w0, #2
	bfi	x0, x8, #4, #60
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.LBB445_6:                              // %"$9"
	mov	w0, #2
	bfi	x0, x8, #4, #60
.LBB445_7:                              // %"$10"
	orr	x0, x0, #0x8
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end445:
	.size	box, .Lfunc_end445-box
	.cfi_endproc
                                        // -- End function
	.globl	xSym                            // -- Begin function xSym
	.p2align	4
	.type	xSym,@function
xSym:                                   // @xSym
	.cfi_startproc
// %bb.0:                               // %"$1"
	eor	w8, w0, #0x8
	tst	x8, #0xe
	b.eq	.LBB446_2
// %bb.1:                               // %"$3"
	stp	x29, x30, [sp, #-48]!           // 16-byte Folded Spill
	str	x21, [sp, #16]                  // 8-byte Folded Spill
	stp	x20, x19, [sp, #32]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 48
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -32
	.cfi_offset w30, -40
	.cfi_offset w29, -48
	mov	x8, sp
	sub	x1, x8, #32                     // =32
	mov	sp, x1
	mov	w9, #4
	stp	w9, wzr, [x8, #-32]
	mov	w8, #2
	mov	x19, x1
	str	w8, [x19, #16]!
	str	wzr, [x19, #4]
	adrp	x20, env
	ldr	x8, [x20, :lo12:env]
	mov	x21, x1
	str	w8, [x21, #24]!
	lsr	x8, x8, #32
	str	w8, [x21, #4]
	str	x19, [x20, :lo12:env]
	bl	pack
	ldp	w0, w8, [x19]
	bfi	x0, x8, #32, #32
	bl	consStr
	ldp	w9, w8, [x21]
	bfi	x9, x8, #32, #32
	str	x9, [x20, :lo12:env]
	mov	sp, x29
	ldp	x20, x19, [sp, #32]             // 16-byte Folded Reload
	ldr	x21, [sp, #16]                  // 8-byte Folded Reload
	ldp	x29, x30, [sp], #48             // 16-byte Folded Reload
.LBB446_2:                              // %"$4"
	ret
.Lfunc_end446:
	.size	xSym, .Lfunc_end446-xSym
	.cfi_endproc
                                        // -- End function
	.globl	pack                            // -- Begin function pack
	.p2align	4
	.type	pack,@function
pack:                                   // @pack
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-48]!           // 16-byte Folded Spill
	str	x21, [sp, #16]                  // 8-byte Folded Spill
	stp	x20, x19, [sp, #32]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 48
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -32
	.cfi_offset w30, -40
	.cfi_offset w29, -48
	mov	x19, x1
	mov	x20, x0
	tst	x0, #0xf
	b.ne	.LBB447_3
// %bb.1:                               // %"$2"
	mov	x8, sp
	adrp	x9, ($StkLimit)
	ldr	x9, [x9, :lo12:($StkLimit)]
	cmp	x9, x8
	b.hi	.LBB447_16
.LBB447_2:                              // %"$6"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w0, w8, [x20]
	bfi	x0, x8, #32, #32
	ldp	w20, w8, [x20, #8]
	bfi	x20, x8, #32, #32
	mov	x1, x19
	bl	pack
	tst	x20, #0xf
	b.eq	.LBB447_2
.LBB447_3:                              // %"$3"
	adrp	x8, SymTab+8
	add	x8, x8, :lo12:SymTab+8
	cmp	x20, x8
	b.eq	.LBB447_10
// %bb.4:                               // %"$10"
	tst	x20, #0x6
	b.eq	.LBB447_6
// %bb.5:                               // %"$12"
	mov	x0, x20
	mov	x1, xzr
	mov	w2, wzr
	mov	w3, wzr
	mov	x4, x19
	bl	fmtNum
	b	.LBB447_10
.LBB447_6:                              // %"$11"
	ldp	w21, w8, [x20, #-8]
	bfi	x21, x8, #32, #32
	tbz	w21, #3, .LBB447_11
// %bb.7:                               // %"$14"
	mov	w0, #123
	mov	x1, x19
	bl	byteSym
	and	x8, x21, #0xfffffffffffffff7
	tst	x8, #0x6
	b.ne	.LBB447_9
.LBB447_8:                              // %"$16"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w8, w9, [x8, #8]
	bfi	x8, x9, #32, #32
	tst	x8, #0x6
	b.eq	.LBB447_8
.LBB447_9:                              // %"$17"
	and	x0, x8, #0xfffffffffffffff7
	mov	x1, x19
	bl	packExtNm
	mov	w0, #125
	mov	x1, x19
	bl	byteSym
.LBB447_10:                             // %"$9"
	mov	sp, x29
	ldp	x20, x19, [sp, #32]             // 16-byte Folded Reload
	ldr	x21, [sp, #16]                  // 8-byte Folded Reload
	ldp	x29, x30, [sp], #48             // 16-byte Folded Reload
	ret
.LBB447_11:                             // %"$18"
                                        // =>This Inner Loop Header: Depth=1
	tst	x21, #0x6
	b.ne	.LBB447_13
// %bb.12:                              // %"$19"
                                        //   in Loop: Header=BB447_11 Depth=1
	ldp	w21, w8, [x21, #8]
	bfi	x21, x8, #32, #32
	b	.LBB447_11
.LBB447_13:                             // %"$20"
	mov	x8, sp
	sub	x20, x8, #16                    // =16
	mov	sp, x20
	stp	wzr, wzr, [x8, #-16]
	lsr	x9, x21, #32
	stp	w21, w9, [x8, #-8]
.LBB447_14:                             // %"$21"
                                        // =>This Inner Loop Header: Depth=1
	mov	x0, x20
	bl	symByte
	tst	w0, #0xff
	b.eq	.LBB447_10
// %bb.15:                              // %"$22"
                                        //   in Loop: Header=BB447_14 Depth=1
	mov	x1, x19
	bl	byteSym
	b	.LBB447_14
.LBB447_16:                             // %"$4"
	mov	x0, xzr
	bl	stkErr
.Lfunc_end447:
	.size	pack, .Lfunc_end447-pack
	.cfi_endproc
                                        // -- End function
	.globl	packExtNm                       // -- Begin function packExtNm
	.p2align	4
	.type	packExtNm,@function
packExtNm:                              // @packExtNm
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-32]!                // 8-byte Folded Spill
	stp	x20, x19, [sp, #16]             // 16-byte Folded Spill
	.cfi_def_cfa_offset 32
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w30, -32
	mov	x19, x1
	mov	x20, x0
	bl	objFile
	cbz	w0, .LBB448_2
// %bb.1:                               // %"$2"
	mov	x1, x19
	bl	packAO
.LBB448_2:                              // %"$3"
	mov	x0, x20
	bl	objId
	mov	x1, x19
	bl	packOct
	ldp	x20, x19, [sp, #16]             // 16-byte Folded Reload
	ldr	x30, [sp], #32                  // 8-byte Folded Reload
	ret
.Lfunc_end448:
	.size	packExtNm, .Lfunc_end448-packExtNm
	.cfi_endproc
                                        // -- End function
	.globl	packAO                          // -- Begin function packAO
	.p2align	4
	.type	packAO,@function
packAO:                                 // @packAO
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-32]!                // 8-byte Folded Spill
	stp	x20, x19, [sp, #16]             // 16-byte Folded Spill
	.cfi_def_cfa_offset 32
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w30, -32
	mov	x19, x1
	mov	w20, w0
	cmp	w0, #16                         // =16
	b.lt	.LBB449_2
// %bb.1:                               // %"$2"
	lsr	w0, w20, #4
	mov	x1, x19
	bl	packAO
.LBB449_2:                              // %"$3"
	mov	w0, #64
	bfxil	w0, w20, #0, #4
	mov	x1, x19
	bl	byteSym
	ldp	x20, x19, [sp, #16]             // 16-byte Folded Reload
	ldr	x30, [sp], #32                  // 8-byte Folded Reload
	ret
.Lfunc_end449:
	.size	packAO, .Lfunc_end449-packAO
	.cfi_endproc
                                        // -- End function
	.globl	packOct                         // -- Begin function packOct
	.p2align	4
	.type	packOct,@function
packOct:                                // @packOct
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-32]!                // 8-byte Folded Spill
	stp	x20, x19, [sp, #16]             // 16-byte Folded Spill
	.cfi_def_cfa_offset 32
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w30, -32
	mov	x19, x1
	mov	x20, x0
	cmp	x0, #8                          // =8
	b.lo	.LBB450_2
// %bb.1:                               // %"$2"
	lsr	x0, x20, #3
	mov	x1, x19
	bl	packOct
.LBB450_2:                              // %"$3"
	mov	w0, #48
	bfxil	w0, w20, #0, #3
	mov	x1, x19
	bl	byteSym
	ldp	x20, x19, [sp, #16]             // 16-byte Folded Reload
	ldr	x30, [sp], #32                  // 8-byte Folded Reload
	ret
.Lfunc_end450:
	.size	packOct, .Lfunc_end450-packOct
	.cfi_endproc
                                        // -- End function
	.globl	numErr                          // -- Begin function numErr
	.p2align	4
	.type	numErr,@function
numErr:                                 // @numErr
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	adrp	x2, .L$113
	add	x2, x2, :lo12:.L$113
	mov	x3, xzr
	bl	err
.Lfunc_end451:
	.size	numErr, .Lfunc_end451-numErr
	.cfi_endproc
                                        // -- End function
	.globl	natBuf                          // -- Begin function natBuf
	.p2align	4
	.type	natBuf,@function
natBuf:                                 // @natBuf
	.cfi_startproc
// %bb.0:                               // %"$1"
	adrp	x0, SymTab+8
	add	x0, x0, :lo12:SymTab+8
	ret
.Lfunc_end452:
	.size	natBuf, .Lfunc_end452-natBuf
	.cfi_endproc
                                        // -- End function
	.globl	natRetBuf                       // -- Begin function natRetBuf
	.p2align	4
	.type	natRetBuf,@function
natRetBuf:                              // @natRetBuf
	.cfi_startproc
// %bb.0:                               // %"$1"
	adrp	x0, SymTab+8
	add	x0, x0, :lo12:SymTab+8
	ret
.Lfunc_end453:
	.size	natRetBuf, .Lfunc_end453-natRetBuf
	.cfi_endproc
                                        // -- End function
	.globl	equal                           // -- Begin function equal
	.p2align	4
	.type	equal,@function
equal:                                  // @equal
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-48]!                // 8-byte Folded Spill
	stp	x22, x21, [sp, #16]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #32]             // 16-byte Folded Spill
	.cfi_def_cfa_offset 48
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w30, -48
	cmp	x0, x1
	b.ne	.LBB454_2
.LBB454_1:
	mov	w0, #1
	and	w0, w0, #0x1
	b	.LBB454_4
.LBB454_2:                              // %"$3"
	mov	x19, x0
	tbz	w19, #1, .LBB454_5
.LBB454_3:
	mov	w0, wzr
	and	w0, wzr, #0x1
.LBB454_4:                              // %"$14"
	ldp	x20, x19, [sp, #32]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #16]             // 16-byte Folded Reload
	ldr	x30, [sp], #48                  // 8-byte Folded Reload
	ret
.LBB454_5:                              // %"$5"
	mov	x20, x1
	tbz	w19, #2, .LBB454_14
// %bb.6:                               // %"$8"
	tbnz	w20, #1, .LBB454_3
// %bb.7:                               // %"$10"
	tbz	w19, #3, .LBB454_10
// %bb.8:                               // %"$12"
	tbz	w20, #3, .LBB454_42
// %bb.9:                               // %"$15"
	and	x19, x19, #0xfffffffffffffff7
	and	x20, x20, #0xfffffffffffffff7
.LBB454_10:                             // %"$16"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w9, w8, [x19, #-4]
	bfi	x9, x8, #32, #32
	ldp	w10, w8, [x20, #-4]
	bfi	x10, x8, #32, #32
	cmp	x9, x10
	b.ne	.LBB454_3
// %bb.11:                              // %"$17"
                                        //   in Loop: Header=BB454_10 Depth=1
	ldp	w19, w8, [x19, #4]
	bfi	x19, x8, #32, #32
	ldp	w20, w8, [x20, #4]
	bfi	x20, x8, #32, #32
	cmp	x19, x20
	b.eq	.LBB454_1
// %bb.12:                              // %"$20"
                                        //   in Loop: Header=BB454_10 Depth=1
	mov	w0, wzr
	tbnz	w19, #1, .LBB454_54
// %bb.13:                              // %"$22"
                                        //   in Loop: Header=BB454_10 Depth=1
	tbz	w20, #1, .LBB454_10
	b	.LBB454_54
.LBB454_14:                             // %"$7"
	tbz	w19, #3, .LBB454_32
// %bb.15:                              // %"$27"
	tst	x20, #0x6
	b.ne	.LBB454_3
// %bb.16:                              // %"$29"
	tst	x20, #0xf
	b.eq	.LBB454_3
// %bb.17:                              // %"$31"
	ldp	w8, w9, [x19, #-8]
	bfi	x8, x9, #32, #32
	tbnz	w8, #3, .LBB454_3
// %bb.18:                              // %"$35"
	tst	x8, #0x6
	b.ne	.LBB454_20
.LBB454_19:                             // %"$36"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w8, w9, [x8, #8]
	bfi	x8, x9, #32, #32
	tst	x8, #0x6
	b.eq	.LBB454_19
.LBB454_20:                             // %"$37"
	cmp	x8, #2                          // =2
	b.eq	.LBB454_3
// %bb.21:                              // %"$38"
	ldp	w9, w10, [x20, #-8]
	bfi	x9, x10, #32, #32
	tbnz	w9, #3, .LBB454_3
// %bb.22:                              // %"$42"
	tst	x9, #0x6
	b.ne	.LBB454_24
.LBB454_23:                             // %"$43"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w9, w10, [x9, #8]
	bfi	x9, x10, #32, #32
	tst	x9, #0x6
	b.eq	.LBB454_23
.LBB454_24:                             // %"$44"
	cmp	x9, #2                          // =2
	b.eq	.LBB454_3
// %bb.25:                              // %"$45"
	cmp	x8, x9
	b.eq	.LBB454_1
// %bb.26:                              // %"$47"
	tbnz	w8, #1, .LBB454_3
// %bb.27:                              // %"$49"
	tbnz	w9, #1, .LBB454_3
.LBB454_28:                             // %"$53"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w11, w10, [x8, #-4]
	bfi	x11, x10, #32, #32
	ldp	w12, w10, [x9, #-4]
	bfi	x12, x10, #32, #32
	cmp	x11, x12
	b.ne	.LBB454_3
// %bb.29:                              // %"$54"
                                        //   in Loop: Header=BB454_28 Depth=1
	ldp	w8, w10, [x8, #4]
	bfi	x8, x10, #32, #32
	ldp	w9, w10, [x9, #4]
	bfi	x9, x10, #32, #32
	cmp	x8, x9
	b.eq	.LBB454_1
// %bb.30:                              // %"$57"
                                        //   in Loop: Header=BB454_28 Depth=1
	mov	w0, wzr
	tbnz	w8, #1, .LBB454_54
// %bb.31:                              // %"$59"
                                        //   in Loop: Header=BB454_28 Depth=1
	tbz	w9, #1, .LBB454_28
	b	.LBB454_54
.LBB454_32:                             // %"$26"
	tst	x20, #0xf
	b.ne	.LBB454_3
// %bb.33:                              // %"$63"
	mov	x8, sp
	adrp	x9, ($StkLimit)
	ldr	x9, [x9, :lo12:($StkLimit)]
	cmp	x9, x8
	b.hi	.LBB454_51
// %bb.34:
	mov	x21, x19
	mov	x22, x20
.LBB454_35:                             // %"$67"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w0, w8, [x21]
	bfi	x0, x8, #32, #32
	ldp	w9, w8, [x22]
	bfi	x9, x8, #32, #32
	and	x1, x9, #0xfffffffffffffffe
	bl	equal
	tbz	w0, #0, .LBB454_43
// %bb.36:                              // %"$68"
                                        //   in Loop: Header=BB454_35 Depth=1
	ldrb	w8, [x21, #8]
	tst	w8, #0xf
	b.ne	.LBB454_44
// %bb.37:                              // %"$71"
                                        //   in Loop: Header=BB454_35 Depth=1
	ldrb	w8, [x22, #8]
	tst	w8, #0xf
	b.ne	.LBB454_43
// %bb.38:                              // %"$73"
                                        //   in Loop: Header=BB454_35 Depth=1
	ldr	w8, [x21]
	orr	w8, w8, #0x1
	str	w8, [x21]
	ldp	w21, w8, [x21, #8]
	bfi	x21, x8, #32, #32
	ldp	w22, w8, [x22, #8]
	bfi	x22, x8, #32, #32
	ldrb	w8, [x21]
	tbz	w8, #0, .LBB454_35
	b	.LBB454_40
.LBB454_39:                             // %"$90"
                                        //   in Loop: Header=BB454_40 Depth=1
	ldr	w8, [x19]
	and	w8, w8, #0xfffffffe
	str	w8, [x19]
	ldp	w19, w8, [x19, #8]
	bfi	x19, x8, #32, #32
	ldp	w20, w8, [x20, #8]
	bfi	x20, x8, #32, #32
.LBB454_40:                             // %"$77"
                                        // =>This Inner Loop Header: Depth=1
	cmp	x19, x21
	b.eq	.LBB454_45
// %bb.41:                              // %"$78"
                                        //   in Loop: Header=BB454_40 Depth=1
	cmp	x20, x22
	b.ne	.LBB454_39
	b	.LBB454_49
.LBB454_42:                             // %"$14"
	mov	w0, wzr
	b	.LBB454_4
.LBB454_43:
	mov	w0, wzr
	b	.LBB454_53
.LBB454_44:                             // %"$72"
	ldp	w0, w8, [x21, #8]
	bfi	x0, x8, #32, #32
	ldp	w1, w8, [x22, #8]
	bfi	x1, x8, #32, #32
	bl	equal
	b	.LBB454_53
.LBB454_45:                             // %"$80"
	cmp	x20, x22
	b.ne	.LBB454_49
.LBB454_46:                             // %"$84"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w19, w8, [x19, #8]
	bfi	x19, x8, #32, #32
	ldp	w20, w8, [x20, #8]
	bfi	x20, x8, #32, #32
	cmp	x20, x22
	b.eq	.LBB454_50
// %bb.47:                              // %"$85"
                                        //   in Loop: Header=BB454_46 Depth=1
	cmp	x19, x21
	b.ne	.LBB454_46
// %bb.48:
	mov	w0, #1
	b	.LBB454_52
.LBB454_49:
	mov	w0, wzr
	b	.LBB454_52
.LBB454_50:                             // %"$87"
	cmp	x19, x21
	cset	w0, eq
	b	.LBB454_52
.LBB454_51:                             // %"$65"
	mov	x0, xzr
	bl	stkErr
.LBB454_52:                             // %"$79"
	ldr	w8, [x19]
	and	w8, w8, #0xfffffffe
	str	w8, [x19]
	ldp	w19, w8, [x19, #8]
	bfi	x19, x8, #32, #32
.LBB454_53:                             // %"$92"
	cmp	x19, x21
	b.ne	.LBB454_52
.LBB454_54:                             // %"$2"
	and	w0, w0, #0x1
	b	.LBB454_4
.Lfunc_end454:
	.size	equal, .Lfunc_end454-equal
	.cfi_endproc
                                        // -- End function
	.globl	unify                           // -- Begin function unify
	.p2align	4
	.type	unify,@function
unify:                                  // @unify
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x30, x25, [sp, #-64]!           // 16-byte Folded Spill
	stp	x24, x23, [sp, #16]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #32]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #48]             // 16-byte Folded Spill
	.cfi_def_cfa_offset 64
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w30, -64
	mov	x21, x3
	mov	x19, x2
	mov	x22, x1
	mov	x20, x0
	adrp	x8, ($Penv)
	ldr	x23, [x8, :lo12:($Penv)]
.LBB455_1:                              // %"$-1"
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB455_7 Depth 2
	eor	w8, w22, #0x8
	tst	x8, #0xe
	b.eq	.LBB455_3
// %bb.2:                               //   in Loop: Header=BB455_1 Depth=1
	mov	w8, wzr
	tbnz	w8, #0, .LBB455_4
	b	.LBB455_12
.LBB455_3:                              // %"$3"
                                        //   in Loop: Header=BB455_1 Depth=1
	mov	x0, x22
	bl	firstByte
	and	w8, w0, #0xff
	cmp	w8, #64                         // =64
	cset	w8, eq
	tbz	w8, #0, .LBB455_12
.LBB455_4:                              // %"$4"
                                        //   in Loop: Header=BB455_1 Depth=1
	mov	x8, x23
	b	.LBB455_7
.LBB455_5:                              //   in Loop: Header=BB455_7 Depth=2
	mov	w10, wzr
	cbnz	w10, .LBB455_10
.LBB455_6:                              // %"$12"
                                        //   in Loop: Header=BB455_7 Depth=2
	add	x8, x8, #8                      // =8
.LBB455_7:                              // %"$6"
                                        //   Parent Loop BB455_1 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	w8, w9, [x8]
	bfi	x8, x9, #32, #32
	ldp	w9, w10, [x8]
	bfi	x9, x10, #32, #32
	tst	x9, #0xf
	b.ne	.LBB455_12
// %bb.8:                               // %"$7"
                                        //   in Loop: Header=BB455_7 Depth=2
	ldp	w10, w11, [x9]
	bfi	x10, x11, #32, #32
	ldp	w12, w11, [x10]
	bfi	x12, x11, #32, #32
	cmp	x20, x12
	b.ne	.LBB455_5
// %bb.9:                               // %"$10"
                                        //   in Loop: Header=BB455_7 Depth=2
	ldp	w10, w11, [x10, #8]
	bfi	x10, x11, #32, #32
	cmp	x22, x10
	cset	w10, eq
	cbz	w10, .LBB455_6
.LBB455_10:                             // %"$11"
                                        //   in Loop: Header=BB455_1 Depth=1
	ldp	w9, w8, [x9, #8]
	bfi	x9, x8, #32, #32
	ldp	w20, w8, [x9]
	bfi	x20, x8, #32, #32
	ldp	w22, w8, [x9, #8]
	bfi	x22, x8, #32, #32
	b	.LBB455_1
.LBB455_11:                             // %"$22"
                                        //   in Loop: Header=BB455_12 Depth=1
	ldp	w9, w8, [x9, #8]
	bfi	x9, x8, #32, #32
	ldp	w19, w8, [x9]
	bfi	x19, x8, #32, #32
	ldp	w21, w8, [x9, #8]
	bfi	x21, x8, #32, #32
.LBB455_12:                             // %"$-2"
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB455_18 Depth 2
	eor	w8, w21, #0x8
	tst	x8, #0xe
	b.eq	.LBB455_14
// %bb.13:                              //   in Loop: Header=BB455_12 Depth=1
	mov	w8, wzr
	cbnz	w8, .LBB455_15
	b	.LBB455_21
.LBB455_14:                             // %"$14"
                                        //   in Loop: Header=BB455_12 Depth=1
	mov	x0, x21
	bl	firstByte
	and	w8, w0, #0xff
	cmp	w8, #64                         // =64
	cset	w8, eq
	cbz	w8, .LBB455_21
.LBB455_15:                             // %"$15"
                                        //   in Loop: Header=BB455_12 Depth=1
	mov	x8, x23
	b	.LBB455_18
.LBB455_16:                             //   in Loop: Header=BB455_18 Depth=2
	mov	w10, wzr
	cbnz	w10, .LBB455_11
.LBB455_17:                             // %"$23"
                                        //   in Loop: Header=BB455_18 Depth=2
	add	x8, x8, #8                      // =8
.LBB455_18:                             // %"$17"
                                        //   Parent Loop BB455_12 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	w8, w9, [x8]
	bfi	x8, x9, #32, #32
	ldp	w9, w10, [x8]
	bfi	x9, x10, #32, #32
	tst	x9, #0xf
	b.ne	.LBB455_21
// %bb.19:                              // %"$18"
                                        //   in Loop: Header=BB455_18 Depth=2
	ldp	w10, w11, [x9]
	bfi	x10, x11, #32, #32
	ldp	w12, w11, [x10]
	bfi	x12, x11, #32, #32
	cmp	x19, x12
	b.ne	.LBB455_16
// %bb.20:                              // %"$21"
                                        //   in Loop: Header=BB455_18 Depth=2
	ldp	w10, w11, [x10, #8]
	bfi	x10, x11, #32, #32
	cmp	x21, x10
	cset	w10, eq
	cbz	w10, .LBB455_17
	b	.LBB455_11
.LBB455_21:                             // %"$16"
	cmp	x20, x19
	b.ne	.LBB455_23
// %bb.22:                              // %"$26"
	mov	x0, x22
	mov	x1, x21
	bl	equal
	tbnz	w0, #0, .LBB455_34
	b	.LBB455_24
.LBB455_23:
	mov	w0, wzr
	tbnz	w0, #0, .LBB455_34
.LBB455_24:                             // %"$27"
	eor	w8, w22, #0x8
	tst	x8, #0xe
	b.eq	.LBB455_28
// %bb.25:
	mov	w8, wzr
	cbz	w8, .LBB455_29
.LBB455_26:                             // %"$32"
	adrp	x8, SymTab+376
	add	x8, x8, :lo12:SymTab+376
	cmp	x22, x8
	b.eq	.LBB455_34
// %bb.27:                              // %"$33"
	mov	x0, x20
	mov	x1, x22
	mov	x2, x19
	mov	x3, x21
	b	.LBB455_33
.LBB455_28:                             // %"$30"
	mov	x0, x22
	bl	firstByte
	and	w8, w0, #0xff
	cmp	w8, #64                         // =64
	cset	w8, eq
	cbnz	w8, .LBB455_26
.LBB455_29:                             // %"$31"
	eor	w8, w21, #0x8
	tst	x8, #0xe
	b.eq	.LBB455_36
// %bb.30:
	mov	w8, wzr
	cbz	w8, .LBB455_37
.LBB455_31:                             // %"$38"
	adrp	x8, SymTab+376
	add	x8, x8, :lo12:SymTab+376
	cmp	x21, x8
	b.eq	.LBB455_34
// %bb.32:                              // %"$39"
	mov	x0, x19
	mov	x1, x21
	mov	x2, x20
	mov	x3, x22
.LBB455_33:                             // %"$24"
	bl	cons3
	ldp	w1, w8, [x23]
	bfi	x1, x8, #32, #32
	bl	cons
	lsr	x8, x0, #32
	stp	w0, w8, [x23]
.LBB455_34:                             // %"$24"
	mov	w0, #1
.LBB455_35:                             // %"$24"
	and	w0, w0, #0x1
	ldp	x20, x19, [sp, #48]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #32]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #16]             // 16-byte Folded Reload
	ldp	x30, x25, [sp], #64             // 16-byte Folded Reload
	ret
.LBB455_36:                             // %"$36"
	mov	x0, x21
	bl	firstByte
	and	w8, w0, #0xff
	cmp	w8, #64                         // =64
	cset	w8, eq
	cbnz	w8, .LBB455_31
.LBB455_37:                             // %"$37"
	tst	x22, #0xf
	b.eq	.LBB455_40
// %bb.38:
	mov	w8, #1
	cbz	w8, .LBB455_41
.LBB455_39:                             // %"$44"
	mov	x0, x22
	mov	x1, x21
	bl	equal
	b	.LBB455_35
.LBB455_40:                             // %"$42"
	tst	x21, #0xf
	cset	w8, ne
	cbnz	w8, .LBB455_39
.LBB455_41:                             // %"$43"
	mov	x8, sp
	adrp	x9, ($StkLimit)
	ldr	x9, [x9, :lo12:($StkLimit)]
	cmp	x9, x8
	b.hi	.LBB455_46
// %bb.42:                              // %"$46"
	ldp	w1, w8, [x22]
	bfi	x1, x8, #32, #32
	ldp	w3, w8, [x21]
	bfi	x3, x8, #32, #32
	ldp	w24, w25, [x23]
	mov	x0, x20
	mov	x2, x19
	bl	unify
	tbz	w0, #0, .LBB455_44
// %bb.43:                              // %"$49"
	ldp	w1, w8, [x22, #8]
	bfi	x1, x8, #32, #32
	ldp	w3, w8, [x21, #8]
	bfi	x3, x8, #32, #32
	mov	x0, x20
	mov	x2, x19
	bl	unify
	tbnz	w0, #0, .LBB455_34
	b	.LBB455_45
.LBB455_44:
	mov	w0, wzr
	tbnz	w0, #0, .LBB455_34
.LBB455_45:                             // %"$50"
	mov	w0, wzr
	bfi	x24, x25, #32, #32
	lsr	x8, x24, #32
	stp	w24, w8, [x23]
	b	.LBB455_35
.LBB455_46:                             // %"$45"
	mov	x0, xzr
	bl	stkErr
.Lfunc_end455:
	.size	unify, .Lfunc_end455-unify
	.cfi_endproc
                                        // -- End function
	.globl	firstByte                       // -- Begin function firstByte
	.p2align	4
	.type	firstByte,@function
firstByte:                              // @firstByte
	.cfi_startproc
// %bb.0:                               // %"$1"
	adrp	x8, SymTab+8
	add	x8, x8, :lo12:SymTab+8
	cmp	x0, x8
	b.eq	.LBB456_2
// %bb.1:                               // %"$3"
	ldp	w8, w9, [x0, #-8]
	bfi	x8, x9, #32, #32
	tbz	w8, #3, .LBB456_3
.LBB456_2:
	mov	x0, xzr
                                        // kill: def $w0 killed $w0 killed $x0
	ret
.LBB456_3:                              // %"$7"
                                        // =>This Inner Loop Header: Depth=1
	tst	x8, #0x6
	b.ne	.LBB456_5
// %bb.4:                               // %"$8"
                                        //   in Loop: Header=BB456_3 Depth=1
	ldp	w8, w9, [x8, #8]
	bfi	x8, x9, #32, #32
	b	.LBB456_3
.LBB456_5:                              // %"$9"
	tbz	w8, #1, .LBB456_7
// %bb.6:                               // %"$11"
	lsr	x0, x8, #4
                                        // kill: def $w0 killed $w0 killed $x0
	ret
.LBB456_7:                              // %"$10"
	ldp	w0, w9, [x8, #-4]
	bfi	x0, x9, #32, #32
                                        // kill: def $w0 killed $w0 killed $x0
	ret
.Lfunc_end456:
	.size	firstByte, .Lfunc_end456-firstByte
	.cfi_endproc
                                        // -- End function
	.globl	cons3                           // -- Begin function cons3
	.p2align	4
	.type	cons3,@function
cons3:                                  // @cons3
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-96]!           // 16-byte Folded Spill
	stp	x28, x27, [sp, #16]             // 16-byte Folded Spill
	stp	x26, x25, [sp, #32]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #48]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #64]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #80]             // 16-byte Folded Spill
	mov	x29, sp
	sub	sp, sp, #16                     // =16
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	mov	x19, x3
	mov	x20, x2
	mov	x21, x1
	mov	x22, x0
	adrp	x12, ($Avail)
	ldr	x8, [x12, :lo12:($Avail)]
	cbz	x8, .LBB457_4
// %bb.1:                               // %"$2"
	ldp	w9, w10, [x8]
	bfi	x9, x10, #32, #32
	cbz	x9, .LBB457_4
// %bb.2:                               // %"$4"
	ldp	w0, w10, [x9]
	bfi	x0, x10, #32, #32
	cbz	x0, .LBB457_4
// %bb.3:                               // %"$6"
	ldp	w11, w10, [x0]
	bfi	x11, x10, #32, #32
	str	x11, [x12, :lo12:($Avail)]
	lsr	x10, x22, #32
	lsr	x11, x21, #32
	stp	w22, w10, [x8]
	lsr	x10, x20, #32
	lsr	x12, x19, #32
	stp	w21, w11, [x8, #8]
	stp	w20, w10, [x9]
	stp	w19, w12, [x9, #8]
	lsr	x10, x8, #32
	stp	w8, w10, [x0]
	lsr	x8, x9, #32
	b	.LBB457_5
.LBB457_4:                              // %"$3"
	adrp	x25, env
	ldr	x8, [x25, :lo12:env]
	mov	x9, sp
	sub	x10, x9, #16                    // =16
	mov	sp, x10
	lsr	x11, x22, #32
	stur	x11, [x29, #-8]                 // 8-byte Folded Spill
	mov	x28, x10
	stp	w22, w11, [x9, #-16]
	str	w8, [x28, #8]!
	lsr	x8, x8, #32
	str	w8, [x28, #4]
	mov	x8, sp
	sub	x9, x8, #16                     // =16
	mov	sp, x9
	lsr	x26, x21, #32
	lsr	x11, x10, #32
	stp	w21, w26, [x8, #-16]
	stp	w10, w11, [x8, #-8]
	str	x9, [x25, :lo12:env]
	mov	x8, sp
	sub	x10, x8, #16                    // =16
	mov	sp, x10
	lsr	x27, x20, #32
	mov	x23, x10
	stp	w20, w27, [x8, #-16]
	str	w9, [x23, #8]!
	lsr	x8, x9, #32
	str	w8, [x23, #4]
	mov	x8, sp
	sub	x9, x8, #16                     // =16
	mov	sp, x9
	lsr	x24, x19, #32
	lsr	x11, x10, #32
	stp	w19, w24, [x8, #-16]
	stp	w10, w11, [x8, #-8]
	str	x9, [x25, :lo12:env]
	bl	gc
	ldp	w9, w8, [x23]
	ldp	w11, w10, [x28]
	adrp	x14, ($Avail)
	ldr	x12, [x14, :lo12:($Avail)]
	bfi	x9, x8, #32, #32
	bfi	x11, x10, #32, #32
	str	x9, [x25, :lo12:env]
	str	x11, [x25, :lo12:env]
	ldp	w9, w8, [x12]
	mov	x10, x9
	bfi	x10, x8, #32, #32
	ldp	w0, w11, [x10]
	bfi	x0, x11, #32, #32
	ldp	w13, w11, [x0]
	bfi	x13, x11, #32, #32
	str	x13, [x14, :lo12:($Avail)]
	ldur	x11, [x29, #-8]                 // 8-byte Folded Reload
	stp	w22, w11, [x12]
	stp	w21, w26, [x12, #8]
	stp	w20, w27, [x10]
	stp	w19, w24, [x10, #8]
	lsr	x10, x12, #32
	stp	w12, w10, [x0]
.LBB457_5:                              // %"$6"
	stp	w9, w8, [x0, #8]
	mov	sp, x29
	ldp	x20, x19, [sp, #80]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #64]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #48]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #32]             // 16-byte Folded Reload
	ldp	x28, x27, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #96             // 16-byte Folded Reload
	ret
.Lfunc_end457:
	.size	cons3, .Lfunc_end457-cons3
	.cfi_endproc
                                        // -- End function
	.globl	lookup                          // -- Begin function lookup
	.p2align	4
	.type	lookup,@function
lookup:                                 // @lookup
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x30, x19, [sp, #-16]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w19, -8
	.cfi_offset w30, -16
	bl	lup
	mov	x19, x0
	eor	w8, w19, #0x8
	tst	x8, #0xe
	b.eq	.LBB458_2
// %bb.1:
	mov	w8, wzr
	b	.LBB458_3
.LBB458_2:                              // %"$3"
	mov	x0, x19
	bl	firstByte
	and	w8, w0, #0xff
	cmp	w8, #64                         // =64
	cset	w8, eq
.LBB458_3:                              // %"$2"
	adrp	x9, SymTab+8
	add	x9, x9, :lo12:SymTab+8
	tst	w8, #0x1
	csel	x0, x9, x19, ne
	ldp	x30, x19, [sp], #16             // 16-byte Folded Reload
	ret
.Lfunc_end458:
	.size	lookup, .Lfunc_end458-lookup
	.cfi_endproc
                                        // -- End function
	.globl	lup                             // -- Begin function lup
	.p2align	4
	.type	lup,@function
lup:                                    // @lup
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-64]!           // 16-byte Folded Spill
	str	x23, [sp, #16]                  // 8-byte Folded Spill
	stp	x22, x21, [sp, #32]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #48]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 64
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -48
	.cfi_offset w30, -56
	.cfi_offset w29, -64
	mov	x8, sp
	adrp	x9, ($StkLimit)
	ldr	x9, [x9, :lo12:($StkLimit)]
	cmp	x9, x8
	b.hi	.LBB459_15
// %bb.1:                               // %"$3"
	mov	x19, x1
	mov	x20, x0
	adrp	x8, ($Penv)
	ldr	x21, [x8, :lo12:($Penv)]
.LBB459_2:                              // %"$-1"
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB459_6 Depth 2
	eor	w8, w19, #0x8
	tst	x8, #0xe
	b.eq	.LBB459_4
// %bb.3:                               //   in Loop: Header=BB459_2 Depth=1
	mov	w8, wzr
	cbnz	w8, .LBB459_5
	b	.LBB459_12
.LBB459_4:                              // %"$5"
                                        //   in Loop: Header=BB459_2 Depth=1
	mov	x0, x19
	bl	firstByte
	and	w8, w0, #0xff
	cmp	w8, #64                         // =64
	cset	w8, eq
	cbz	w8, .LBB459_12
.LBB459_5:                              // %"$6"
                                        //   in Loop: Header=BB459_2 Depth=1
	mov	x8, x21
.LBB459_6:                              // %"$8"
                                        //   Parent Loop BB459_2 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	w8, w9, [x8]
	bfi	x8, x9, #32, #32
	ldp	w9, w10, [x8]
	bfi	x9, x10, #32, #32
	tst	x9, #0xf
	b.ne	.LBB459_12
// %bb.7:                               // %"$9"
                                        //   in Loop: Header=BB459_6 Depth=2
	ldp	w10, w11, [x9]
	bfi	x10, x11, #32, #32
	ldp	w12, w11, [x10]
	bfi	x12, x11, #32, #32
	cmp	x20, x12
	b.ne	.LBB459_9
// %bb.8:                               // %"$12"
                                        //   in Loop: Header=BB459_6 Depth=2
	ldp	w10, w11, [x10, #8]
	bfi	x10, x11, #32, #32
	cmp	x19, x10
	cset	w10, eq
	cbz	w10, .LBB459_10
	b	.LBB459_11
.LBB459_9:                              //   in Loop: Header=BB459_6 Depth=2
	mov	w10, wzr
	cbnz	w10, .LBB459_11
.LBB459_10:                             // %"$14"
                                        //   in Loop: Header=BB459_6 Depth=2
	add	x8, x8, #8                      // =8
	b	.LBB459_6
.LBB459_11:                             // %"$13"
                                        //   in Loop: Header=BB459_2 Depth=1
	ldp	w9, w8, [x9, #8]
	bfi	x9, x8, #32, #32
	ldp	w20, w8, [x9]
	bfi	x20, x8, #32, #32
	ldp	w19, w8, [x9, #8]
	bfi	x19, x8, #32, #32
	b	.LBB459_2
.LBB459_12:                             // %"$7"
	tst	x19, #0xf
	b.ne	.LBB459_14
// %bb.13:                              // %"$16"
	ldp	w1, w8, [x19]
	bfi	x1, x8, #32, #32
	mov	x0, x20
	bl	lup
	mov	x21, x0
	adrp	x22, env
	ldr	x8, [x22, :lo12:env]
	mov	x9, sp
	sub	x10, x9, #16                    // =16
	mov	sp, x10
	lsr	x11, x0, #32
	stp	w21, w11, [x9, #-16]
	mov	x23, x10
	str	w8, [x23, #8]!
	lsr	x8, x8, #32
	str	w8, [x23, #4]
	str	x10, [x22, :lo12:env]
	ldp	w1, w8, [x19, #8]
	bfi	x1, x8, #32, #32
	mov	x0, x20
	bl	lup
	mov	x1, x0
	mov	x0, x21
	bl	cons
	mov	x19, x0
	ldp	w9, w8, [x23]
	bfi	x9, x8, #32, #32
	str	x9, [x22, :lo12:env]
.LBB459_14:                             // %"$17"
	mov	x0, x19
	mov	sp, x29
	ldp	x20, x19, [sp, #48]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #32]             // 16-byte Folded Reload
	ldr	x23, [sp, #16]                  // 8-byte Folded Reload
	ldp	x29, x30, [sp], #64             // 16-byte Folded Reload
	ret
.LBB459_15:                             // %"$2"
	mov	x0, xzr
	bl	stkErr
.Lfunc_end459:
	.size	lup, .Lfunc_end459-lup
	.cfi_endproc
                                        // -- End function
	.globl	get                             // -- Begin function get
	.p2align	4
	.type	get,@function
get:                                    // @get
	.cfi_startproc
// %bb.0:                               // %"$1"
	cmp	x1, #2                          // =2
	b.ne	.LBB460_2
// %bb.1:                               // %"$2"
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	ret
.LBB460_2:                              // %"$3"
	ldp	w9, w8, [x0, #-8]
	bfi	x9, x8, #32, #32
	tst	x9, #0x6
	b.eq	.LBB460_4
.LBB460_3:
	adrp	x0, SymTab+8
	add	x0, x0, :lo12:SymTab+8
	ret
.LBB460_4:                              // %"$5"
	and	x8, x9, #0xfffffffffffffff7
	ldp	w10, w11, [x8]
	bfi	x10, x11, #32, #32
	tst	x10, #0xf
	b.eq	.LBB460_6
// %bb.5:                               // %"$7"
	cmp	x1, x10
	b.ne	.LBB460_8
	b	.LBB460_17
.LBB460_6:                              // %"$8"
	ldp	w12, w11, [x10, #8]
	bfi	x12, x11, #32, #32
	cmp	x1, x12
	b.ne	.LBB460_8
	b	.LBB460_20
.LBB460_7:                              // %"$18"
                                        //   in Loop: Header=BB460_8 Depth=1
	ldp	w13, w12, [x10, #8]
	bfi	x13, x12, #32, #32
	cmp	x1, x13
	b.eq	.LBB460_13
.LBB460_8:                              // %"$14"
                                        // =>This Inner Loop Header: Depth=1
	mov	x11, x8
	ldp	w8, w10, [x8, #8]
	bfi	x8, x10, #32, #32
	tst	x8, #0xf
	b.ne	.LBB460_3
// %bb.9:                               // %"$15"
                                        //   in Loop: Header=BB460_8 Depth=1
	ldp	w10, w12, [x8]
	bfi	x10, x12, #32, #32
	tst	x10, #0xf
	b.eq	.LBB460_7
// %bb.10:                              // %"$17"
                                        //   in Loop: Header=BB460_8 Depth=1
	cmp	x1, x10
	b.ne	.LBB460_8
// %bb.11:                              // %"$20"
	ldp	w10, w12, [x8, #8]
	stp	w10, w12, [x11, #8]
	tbz	w9, #3, .LBB460_15
// %bb.12:                              // %"$23"
	and	x10, x9, #0xfffffffffffffff7
	lsr	x9, x9, #32
	stp	w10, w9, [x8, #8]
	orr	x8, x8, #0x8
	b	.LBB460_16
.LBB460_13:                             // %"$25"
	ldp	w12, w13, [x8, #8]
	stp	w12, w13, [x11, #8]
	tbz	w9, #3, .LBB460_18
// %bb.14:                              // %"$28"
	and	x11, x9, #0xfffffffffffffff7
	lsr	x9, x9, #32
	stp	w11, w9, [x8, #8]
	orr	x8, x8, #0x8
	b	.LBB460_19
.LBB460_15:                             // %"$22"
	lsr	x10, x9, #32
	stp	w9, w10, [x8, #8]
.LBB460_16:                             // %"$24"
	lsr	x9, x8, #32
	stp	w8, w9, [x0, #-8]
.LBB460_17:                             // %"$10"
	adrp	x0, SymTab+216
	add	x0, x0, :lo12:SymTab+216
	ret
.LBB460_18:                             // %"$27"
	lsr	x11, x9, #32
	stp	w9, w11, [x8, #8]
.LBB460_19:                             // %"$29"
	lsr	x9, x8, #32
	stp	w8, w9, [x0, #-8]
.LBB460_20:                             // %"$12"
	ldp	w0, w8, [x10]
	bfi	x0, x8, #32, #32
	ret
.Lfunc_end460:
	.size	get, .Lfunc_end460-get
	.cfi_endproc
                                        // -- End function
	.globl	uniFill                         // -- Begin function uniFill
	.p2align	4
	.type	uniFill,@function
uniFill:                                // @uniFill
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-48]!           // 16-byte Folded Spill
	stp	x22, x21, [sp, #16]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #32]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 48
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w30, -40
	.cfi_offset w29, -48
	mov	x19, x0
	tst	x0, #0x6
	b.ne	.LBB461_5
// %bb.1:                               // %"$3"
	tbz	w19, #3, .LBB461_3
// %bb.2:                               // %"$6"
	adrp	x8, ($Pnl)
	ldr	x8, [x8, :lo12:($Pnl)]
	ldp	w8, w9, [x8]
	bfi	x8, x9, #32, #32
	ldp	w0, w9, [x8]
	bfi	x0, x9, #32, #32
	mov	x1, x19
	bl	lup
	mov	x19, x0
	b	.LBB461_5
.LBB461_3:                              // %"$5"
	mov	x8, sp
	adrp	x9, ($StkLimit)
	ldr	x9, [x9, :lo12:($StkLimit)]
	cmp	x9, x8
	b.hi	.LBB461_6
// %bb.4:                               // %"$8"
	ldp	w0, w8, [x19]
	bfi	x0, x8, #32, #32
	bl	uniFill
	mov	x20, x0
	adrp	x21, env
	ldr	x8, [x21, :lo12:env]
	mov	x9, sp
	sub	x10, x9, #16                    // =16
	mov	sp, x10
	lsr	x11, x0, #32
	stp	w20, w11, [x9, #-16]
	mov	x22, x10
	str	w8, [x22, #8]!
	lsr	x8, x8, #32
	str	w8, [x22, #4]
	str	x10, [x21, :lo12:env]
	ldp	w0, w8, [x19, #8]
	bfi	x0, x8, #32, #32
	bl	uniFill
	mov	x1, x0
	mov	x0, x20
	bl	cons
	mov	x19, x0
	ldp	w9, w8, [x22]
	bfi	x9, x8, #32, #32
	str	x9, [x21, :lo12:env]
.LBB461_5:                              // %"$2"
	mov	x0, x19
	mov	sp, x29
	ldp	x20, x19, [sp, #32]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #48             // 16-byte Folded Reload
	ret
.LBB461_6:                              // %"$7"
	mov	x0, xzr
	bl	stkErr
.Lfunc_end461:
	.size	uniFill, .Lfunc_end461-uniFill
	.cfi_endproc
                                        // -- End function
	.globl	fill                            // -- Begin function fill
	.p2align	4
	.type	fill,@function
fill:                                   // @fill
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-64]!           // 16-byte Folded Spill
	stp	x24, x23, [sp, #16]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #32]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #48]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 64
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w30, -56
	.cfi_offset w29, -64
	tst	x0, #0x6
	b.eq	.LBB462_3
.LBB462_1:
	mov	x19, xzr
.LBB462_2:                              // %"$2"
	mov	x0, x19
	mov	sp, x29
	ldp	x20, x19, [sp, #48]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #32]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #64             // 16-byte Folded Reload
	ret
.LBB462_3:                              // %"$3"
	mov	x20, x1
	tbz	w0, #3, .LBB462_8
// %bb.4:                               // %"$6"
	ldp	w19, w8, [x0]
	bfi	x19, x8, #32, #32
	cmp	x0, x19
	b.eq	.LBB462_1
// %bb.5:                               // %"$8"
	adrp	x8, SymTab+8
	add	x8, x8, :lo12:SymTab+8
	cmp	x20, x8
	b.ne	.LBB462_17
// %bb.6:                               // %"$11"
	adrp	x8, SymTab+376
	add	x8, x8, :lo12:SymTab+376
	cmp	x0, x8
	b.eq	.LBB462_1
// %bb.7:                               // %"$13"
	bl	firstByte
	and	w8, w0, #0xff
	cmp	w8, #64                         // =64
	b.ne	.LBB462_1
	b	.LBB462_2
.LBB462_8:                              // %"$5"
	mov	x8, sp
	adrp	x9, ($StkLimit)
	ldr	x9, [x9, :lo12:($StkLimit)]
	cmp	x9, x8
	b.hi	.LBB462_36
// %bb.9:                               // %"$28"
	ldp	w22, w8, [x0]
	bfi	x22, x8, #32, #32
	ldp	w21, w8, [x0, #8]
	bfi	x21, x8, #32, #32
	adrp	x8, SymTab+632
	add	x8, x8, :lo12:SymTab+632
	cmp	x22, x8
	b.ne	.LBB462_13
// %bb.10:                              // %"$29"
	ldp	w19, w8, [x21]
	bfi	x19, x8, #32, #32
	ldp	w21, w8, [x21, #8]
	bfi	x21, x8, #32, #32
	tst	x19, #0x6
	b.ne	.LBB462_25
// %bb.11:                              // %"$33"
	tbz	w19, #3, .LBB462_24
// %bb.12:                              // %"$36"
	ldp	w19, w8, [x19]
	bfi	x19, x8, #32, #32
	b	.LBB462_25
.LBB462_13:                             // %"$30"
	mov	x0, x22
	mov	x1, x20
	bl	fill
	cbz	x0, .LBB462_22
// %bb.14:                              // %"$51"
	mov	x19, x0
	adrp	x22, env
	ldr	x8, [x22, :lo12:env]
	mov	x9, sp
	sub	x23, x9, #16                    // =16
	mov	sp, x23
	lsr	x10, x0, #32
	lsr	x11, x8, #32
	stp	w19, w10, [x9, #-16]
	stp	w8, w11, [x9, #-8]
	str	x23, [x22, :lo12:env]
	mov	x0, x21
	mov	x1, x20
	bl	fill
	mov	x1, x0
	cbnz	x0, .LBB462_16
// %bb.15:                              // %"$53"
	mov	x1, x21
.LBB462_16:                             // %"$54"
	mov	x0, x19
	bl	cons
	mov	x19, x0
	b	.LBB462_33
.LBB462_17:                             // %"$10"
	cmp	x0, x20
	b.ne	.LBB462_19
.LBB462_18:
	mov	w8, #1
	b	.LBB462_35
.LBB462_19:                             // %"$19"
                                        // =>This Inner Loop Header: Depth=1
	tst	x20, #0xf
	b.ne	.LBB462_34
// %bb.20:                              // %"$20"
                                        //   in Loop: Header=BB462_19 Depth=1
	ldp	w9, w8, [x20]
	bfi	x9, x8, #32, #32
	cmp	x0, x9
	b.eq	.LBB462_18
// %bb.21:                              // %"$23"
                                        //   in Loop: Header=BB462_19 Depth=1
	ldp	w20, w8, [x20, #8]
	bfi	x20, x8, #32, #32
	b	.LBB462_19
.LBB462_22:                             // %"$50"
	mov	x0, x21
	mov	x1, x20
	bl	fill
	cbz	x0, .LBB462_1
// %bb.23:                              // %"$56"
	mov	x1, x0
	mov	x0, x22
	bl	cons
	mov	x19, x0
	b	.LBB462_2
.LBB462_24:                             // %"$35"
	mov	x0, x19
	bl	evList
	mov	x19, x0
.LBB462_25:                             // %"$32"
	tst	x19, #0xf
	b.eq	.LBB462_28
// %bb.26:                              // %"$37"
	mov	x0, x21
	mov	x1, x20
	bl	fill
	mov	x19, x0
	cbnz	x0, .LBB462_2
// %bb.27:                              // %"$41"
	mov	x19, x21
	b	.LBB462_2
.LBB462_28:                             // %"$38"
	adrp	x22, env
	ldr	x8, [x22, :lo12:env]
	mov	x9, sp
	sub	x23, x9, #16                    // =16
	mov	sp, x23
	lsr	x10, x19, #32
	lsr	x11, x8, #32
	stp	w19, w10, [x9, #-16]
	stp	w8, w11, [x9, #-8]
	mov	x8, x19
	str	x23, [x22, :lo12:env]
.LBB462_29:                             // %"$43"
                                        // =>This Inner Loop Header: Depth=1
	mov	x24, x8
	ldp	w8, w9, [x8, #8]
	bfi	x8, x9, #32, #32
	tst	x8, #0xf
	b.eq	.LBB462_29
// %bb.30:                              // %"$45"
	mov	x0, x21
	mov	x1, x20
	bl	fill
	cbnz	x0, .LBB462_32
// %bb.31:                              // %"$47"
	mov	x0, x21
.LBB462_32:                             // %"$48"
	lsr	x8, x0, #32
	stp	w0, w8, [x24, #8]
.LBB462_33:                             // %"$2"
	ldp	w9, w8, [x23, #8]
	bfi	x9, x8, #32, #32
	str	x9, [x22, :lo12:env]
	b	.LBB462_2
.LBB462_34:
	mov	w8, wzr
.LBB462_35:                             // %"$17"
	tst	w8, #0x1
	csel	x19, x19, xzr, ne
	b	.LBB462_2
.LBB462_36:                             // %"$27"
	mov	x0, xzr
	bl	stkErr
.Lfunc_end462:
	.size	fill, .Lfunc_end462-fill
	.cfi_endproc
                                        // -- End function
	.globl	match                           // -- Begin function match
	.p2align	4
	.type	match,@function
match:                                  // @match
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-48]!                // 8-byte Folded Spill
	stp	x22, x21, [sp, #16]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #32]             // 16-byte Folded Spill
	.cfi_def_cfa_offset 48
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w30, -48
	mov	x19, x1
	mov	x20, x0
	adrp	x22, ($StkLimit)
	tst	x20, #0xf
	b.eq	.LBB463_6
.LBB463_1:                              // %"$5"
	tst	x20, #0x6
	b.eq	.LBB463_22
// %bb.2:
	mov	w8, #1
	cbz	w8, .LBB463_23
.LBB463_3:                              // %"$8"
	mov	x0, x20
	mov	x1, x19
	bl	equal
	b	.LBB463_25
.LBB463_4:                              // %"$28"
                                        //   in Loop: Header=BB463_6 Depth=1
	ldp	w1, w8, [x19]
	bfi	x1, x8, #32, #32
	mov	x0, x21
	bl	match
	eor	w8, w0, #0x1
	tbnz	w8, #0, .LBB463_18
.LBB463_5:                              // %"$29"
                                        //   in Loop: Header=BB463_6 Depth=1
	ldp	w20, w8, [x20, #8]
	bfi	x20, x8, #32, #32
	ldp	w19, w8, [x19, #8]
	bfi	x19, x8, #32, #32
	tst	x20, #0xf
	b.ne	.LBB463_1
.LBB463_6:                              // %"$3"
                                        // =>This Inner Loop Header: Depth=1
	mov	x8, sp
	ldr	x9, [x22, :lo12:($StkLimit)]
	cmp	x9, x8
	b.hi	.LBB463_26
// %bb.7:                               // %"$12"
                                        //   in Loop: Header=BB463_6 Depth=1
	ldp	w21, w8, [x20]
	eor	w9, w21, #0x8
	bfi	x21, x8, #32, #32
	tst	x9, #0xe
	b.eq	.LBB463_9
// %bb.8:                               //   in Loop: Header=BB463_6 Depth=1
	mov	w8, wzr
	cbnz	w8, .LBB463_10
	b	.LBB463_14
.LBB463_9:                              // %"$14"
                                        //   in Loop: Header=BB463_6 Depth=1
	mov	x0, x21
	bl	firstByte
	and	w8, w0, #0xff
	cmp	w8, #64                         // =64
	cset	w8, eq
	cbz	w8, .LBB463_14
.LBB463_10:                             // %"$15"
                                        //   in Loop: Header=BB463_6 Depth=1
	tst	x19, #0xf
	b.ne	.LBB463_16
// %bb.11:                              // %"$17"
                                        //   in Loop: Header=BB463_6 Depth=1
	ldp	w0, w8, [x20, #8]
	bfi	x0, x8, #32, #32
	ldp	w1, w8, [x19, #8]
	bfi	x1, x8, #32, #32
	bl	match
	tbnz	w0, #0, .LBB463_19
// %bb.12:                              // %"$21"
                                        //   in Loop: Header=BB463_6 Depth=1
	ldp	w0, w8, [x20, #8]
	bfi	x0, x8, #32, #32
	mov	x1, x19
	bl	match
	tbnz	w0, #0, .LBB463_17
// %bb.13:                              // %"$23"
                                        //   in Loop: Header=BB463_6 Depth=1
	ldp	w1, w8, [x19, #8]
	bfi	x1, x8, #32, #32
	mov	x0, x20
	bl	match
	tbnz	w0, #0, .LBB463_20
.LBB463_14:                             // %"$16"
                                        //   in Loop: Header=BB463_6 Depth=1
	tst	x19, #0xf
	b.eq	.LBB463_4
// %bb.15:                              //   in Loop: Header=BB463_6 Depth=1
	mov	w8, #1
	tbz	w8, #0, .LBB463_5
	b	.LBB463_18
.LBB463_16:                             // %"$18"
	ldp	w0, w8, [x20, #8]
	bfi	x0, x8, #32, #32
	mov	x1, x19
	bl	equal
	tbz	w0, #0, .LBB463_18
.LBB463_17:                             // %"$20"
	adrp	x8, SymTab+8
	add	x8, x8, :lo12:SymTab+8
	lsr	x9, x8, #32
	stp	w8, w9, [x21]
	b	.LBB463_24
.LBB463_18:
	mov	w0, wzr
	b	.LBB463_25
.LBB463_19:                             // %"$22"
	ldp	w0, w8, [x19]
	bfi	x0, x8, #32, #32
	adrp	x1, SymTab+8
	add	x1, x1, :lo12:SymTab+8
	b	.LBB463_21
.LBB463_20:                             // %"$26"
	ldp	w0, w8, [x19]
	bfi	x0, x8, #32, #32
	ldp	w1, w8, [x21]
	bfi	x1, x8, #32, #32
.LBB463_21:                             // %"$4"
	bl	cons
	lsr	x8, x0, #32
	stp	w0, w8, [x21]
	b	.LBB463_24
.LBB463_22:                             // %"$7"
	mov	x0, x20
	bl	firstByte
	and	w8, w0, #0xff
	cmp	w8, #64                         // =64
	cset	w8, ne
	cbnz	w8, .LBB463_3
.LBB463_23:                             // %"$9"
	lsr	x8, x19, #32
	stp	w19, w8, [x20]
.LBB463_24:                             // %"$4"
	mov	w0, #1
.LBB463_25:                             // %"$4"
	and	w0, w0, #0x1
	ldp	x20, x19, [sp, #32]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #16]             // 16-byte Folded Reload
	ldr	x30, [sp], #48                  // 8-byte Folded Reload
	ret
.LBB463_26:                             // %"$11"
	mov	x0, xzr
	bl	stkErr
.Lfunc_end463:
	.size	match, .Lfunc_end463-match
	.cfi_endproc
                                        // -- End function
	.globl	binSize                         // -- Begin function binSize
	.p2align	4
	.type	binSize,@function
binSize:                                // @binSize
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-48]!                // 8-byte Folded Spill
	stp	x22, x21, [sp, #16]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #32]             // 16-byte Folded Spill
	.cfi_def_cfa_offset 48
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w30, -48
	mov	x20, x0
	tbz	w20, #1, .LBB464_4
// %bb.1:                               // %"$4"
	lsr	x8, x20, #3
.LBB464_2:                              // %"$5.preheader"
	mov	w19, #2
	lsr	x8, x8, #8
	cbz	x8, .LBB464_17
.LBB464_3:                              // %"$6"
                                        // =>This Inner Loop Header: Depth=1
	add	x19, x19, #1                    // =1
	lsr	x8, x8, #8
	cbnz	x8, .LBB464_3
	b	.LBB464_17
.LBB464_4:                              // %"$3"
	tbz	w20, #2, .LBB464_8
// %bb.5:                               // %"$9"
	and	x9, x20, #0xfffffffffffffff7
	mov	w8, #9
.LBB464_6:                              // %"$10"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w10, w11, [x9, #4]
	bfi	x10, x11, #32, #32
	tbnz	w10, #1, .LBB464_14
// %bb.7:                               // %"$11"
                                        //   in Loop: Header=BB464_6 Depth=1
	add	x8, x8, #8                      // =8
	mov	x9, x10
	b	.LBB464_6
.LBB464_8:                              // %"$8"
	tbz	w20, #3, .LBB464_18
// %bb.9:                               // %"$22"
	adrp	x8, SymTab+8
	add	x8, x8, :lo12:SymTab+8
	cmp	x20, x8
	b.eq	.LBB464_13
// %bb.10:                              // %"$24"
	ldp	w9, w8, [x20, #-8]
	bfi	x9, x8, #32, #32
	and	x9, x9, #0xfffffffffffffff7
	tst	x9, #0x6
	b.ne	.LBB464_12
.LBB464_11:                             // %"$27"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w9, w8, [x9, #8]
	bfi	x9, x8, #32, #32
	tst	x9, #0x6
	b.eq	.LBB464_11
.LBB464_12:                             // %"$28"
	cmp	x9, #2                          // =2
	b.ne	.LBB464_24
.LBB464_13:
	mov	w19, #1
	b	.LBB464_17
.LBB464_14:                             // %"$12"
	ldp	w9, w11, [x9, #-4]
	bfi	x9, x11, #32, #32
	lsr	x10, x10, #4
	cmn	x9, x9
	add	x9, x10, x10
	cinc	x9, x9, hs
	cbz	x9, .LBB464_16
.LBB464_15:                             // %"$15"
                                        // =>This Inner Loop Header: Depth=1
	add	x8, x8, #1                      // =1
	lsr	x9, x9, #8
	cbnz	x9, .LBB464_15
.LBB464_16:                             // %"$14"
	sub	x9, x8, #64                     // =64
	mov	x10, #-9187201950435737472
	movk	x10, #32897
	umulh	x9, x9, x10
	add	x9, x8, x9, lsr #7
	cmp	x8, #64                         // =64
	csinc	x19, x8, x9, lo
.LBB464_17:                             // %"$2"
	mov	x0, x19
	ldp	x20, x19, [sp, #32]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #16]             // 16-byte Folded Reload
	ldr	x30, [sp], #48                  // 8-byte Folded Reload
	ret
.LBB464_18:                             // %"$21"
	mov	w19, #2
	mov	x21, x20
	adrp	x22, SymTab+8
	add	x22, x22, :lo12:SymTab+8
.LBB464_19:                             // %"$36"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w0, w8, [x21]
	bfi	x0, x8, #32, #32
	ldp	w21, w8, [x21, #8]
	bfi	x21, x8, #32, #32
	bl	binSize
	add	x19, x19, x0
	cmp	x21, x22
	b.eq	.LBB464_17
// %bb.20:                              // %"$37"
                                        //   in Loop: Header=BB464_19 Depth=1
	cmp	x20, x21
	b.eq	.LBB464_23
// %bb.21:                              // %"$40"
                                        //   in Loop: Header=BB464_19 Depth=1
	tst	x21, #0xf
	b.eq	.LBB464_19
// %bb.22:                              // %"$43"
	mov	x0, x21
	bl	binSize
	add	x19, x19, x0
	b	.LBB464_17
.LBB464_23:                             // %"$41"
	add	x19, x19, #1                    // =1
	b	.LBB464_17
.LBB464_24:                             // %"$29"
	tbz	w9, #1, .LBB464_26
// %bb.25:                              // %"$32"
	ubfx	x8, x9, #4, #58
	b	.LBB464_2
.LBB464_26:                             // %"$33.preheader"
	mov	w8, #9
.LBB464_27:                             // %"$33"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w9, w10, [x9, #4]
	bfi	x9, x10, #32, #32
	tbnz	w9, #1, .LBB464_29
// %bb.28:                              // %"$34"
                                        //   in Loop: Header=BB464_27 Depth=1
	add	x8, x8, #8                      // =8
	b	.LBB464_27
.LBB464_29:                             // %"$35"
	lsr	x9, x9, #4
	cbnz	x9, .LBB464_15
	b	.LBB464_16
.Lfunc_end464:
	.size	binSize, .Lfunc_end464-binSize
	.cfi_endproc
                                        // -- End function
	.globl	size                            // -- Begin function size
	.p2align	4
	.type	size,@function
size:                                   // @size
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x30, x23, [sp, #-48]!           // 16-byte Folded Spill
	stp	x22, x21, [sp, #16]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #32]             // 16-byte Folded Spill
	.cfi_def_cfa_offset 48
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w30, -48
	mov	x19, x0
	ldp	w21, w8, [x0]
	mov	w20, #1
	bfi	x21, x8, #32, #32
	adrp	x23, ($StkLimit)
	mov	x22, x0
	tst	x21, #0xf
	b.ne	.LBB465_3
.LBB465_1:                              // %"$3"
	mov	x8, sp
	ldr	x9, [x23, :lo12:($StkLimit)]
	cmp	x9, x8
	b.hi	.LBB465_11
// %bb.2:                               // %"$6"
	mov	x0, x21
	bl	size
	add	x20, x20, x0
.LBB465_3:                              // %"$4"
                                        // =>This Inner Loop Header: Depth=1
	orr	w8, w21, #0x1
	lsr	x9, x21, #32
	stp	w8, w9, [x22]
	ldp	w22, w8, [x22, #8]
	bfi	x22, x8, #32, #32
	tst	x22, #0xf
	b.ne	.LBB465_6
// %bb.4:                               // %"$7"
                                        //   in Loop: Header=BB465_3 Depth=1
	ldp	w21, w8, [x22]
	bfi	x21, x8, #32, #32
	tbnz	w21, #0, .LBB465_8
// %bb.5:                               // %"$13"
                                        //   in Loop: Header=BB465_3 Depth=1
	add	x20, x20, #1                    // =1
	tst	x21, #0xf
	b.ne	.LBB465_3
	b	.LBB465_1
.LBB465_6:                              // %"$10"
                                        // =>This Inner Loop Header: Depth=1
	ldr	w8, [x19]
	and	w8, w8, #0xfffffffe
	str	w8, [x19]
	ldp	w19, w8, [x19, #8]
	bfi	x19, x8, #32, #32
	cmp	x22, x19
	b.ne	.LBB465_6
	b	.LBB465_10
.LBB465_7:                              // %"$16"
                                        //   in Loop: Header=BB465_8 Depth=1
	ldr	w8, [x19]
	and	w8, w8, #0xfffffffe
	str	w8, [x19]
	ldp	w19, w8, [x19, #8]
	bfi	x19, x8, #32, #32
.LBB465_8:                              // %"$15"
                                        // =>This Inner Loop Header: Depth=1
	cmp	x22, x19
	b.ne	.LBB465_7
.LBB465_9:                              // %"$18"
                                        // =>This Inner Loop Header: Depth=1
	ldr	w8, [x19]
	and	w8, w8, #0xfffffffe
	str	w8, [x19]
	ldp	w19, w8, [x19, #8]
	bfi	x19, x8, #32, #32
	cmp	x22, x19
	b.ne	.LBB465_9
.LBB465_10:                             // %"$8"
	mov	x0, x20
	ldp	x20, x19, [sp, #32]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #16]             // 16-byte Folded Reload
	ldp	x30, x23, [sp], #48             // 16-byte Folded Reload
	ret
.LBB465_11:                             // %"$5"
	mov	x0, xzr
	bl	stkErr
.Lfunc_end465:
	.size	size, .Lfunc_end465-size
	.cfi_endproc
                                        // -- End function
	.globl	dbFetch                         // -- Begin function dbFetch
	.p2align	4
	.type	dbFetch,@function
dbFetch:                                // @dbFetch
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	ldp	w9, w8, [x1, #-8]
	bfi	x9, x8, #32, #32
	adds	x8, x9, x9
	cset	w10, hs
	adds	x11, x8, x8
	cset	w12, lo
	cmp	w10, #0                         // =0
	csel	x8, x8, x11, ne
	csel	w10, wzr, w12, ne
	tst	x9, #0x6
	csel	x8, x9, x8, eq
	csel	w9, wzr, w10, eq
	cbz	w9, .LBB466_2
// %bb.1:                               // %"$5"
	mov	x2, #4611686018427387904
	bfxil	x2, x8, #2, #62
	lsr	x8, x8, #2
	lsr	x9, x2, #32
	stp	w8, w9, [x1, #-8]
	bl	db
.LBB466_2:                              // %"$6"
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end466:
	.size	dbFetch, .Lfunc_end466-dbFetch
	.cfi_endproc
                                        // -- End function
	.globl	db                              // -- Begin function db
	.p2align	4
	.type	db,@function
db:                                     // @db
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-48]!           // 16-byte Folded Spill
	stp	x22, x21, [sp, #16]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #32]             // 16-byte Folded Spill
	mov	x29, sp
	sub	sp, sp, #16                     // =16
	.cfi_def_cfa w29, 48
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w30, -40
	.cfi_offset w29, -48
	mov	x20, x2
	mov	x19, x1
	mov	x21, x0
	adrp	x22, env
	ldr	x8, [x22, :lo12:env]
	stp	x1, x8, [x29, #-16]
	sub	x8, x29, #16                    // =16
	str	x8, [x22, :lo12:env]
	mov	x0, x2
	bl	objFile
	adrp	x8, ($DBs)
	ldr	w8, [x8, :lo12:($DBs)]
	cmp	w0, w8
	b.lt	.LBB467_7
// %bb.1:                               // %"$2"
	adrp	x8, SymTab+472
	ldr	x8, [x8, :lo12:SymTab+472]
	tst	x8, #0xf
	b.eq	.LBB467_17
// %bb.2:
	mov	w9, #1
	tbnz	w9, #0, .LBB467_18
.LBB467_3:                              // %"$10"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w9, w10, [x8, #8]
	bfi	x9, x10, #32, #32
	tst	x9, #0xf
	b.eq	.LBB467_5
// %bb.4:                               //   in Loop: Header=BB467_3 Depth=1
	mov	w9, wzr
	cbnz	w9, .LBB467_6
	b	.LBB467_11
.LBB467_5:                              // %"$12"
                                        //   in Loop: Header=BB467_3 Depth=1
	ldp	w9, w10, [x9]
	bfi	x9, x10, #32, #32
	ldp	w9, w10, [x9]
	bfi	x9, x10, #32, #32
	lsr	x9, x9, #4
	cmp	w0, w9
	cset	w9, ge
	cbz	w9, .LBB467_11
.LBB467_6:                              // %"$13"
                                        //   in Loop: Header=BB467_3 Depth=1
	ldp	w8, w9, [x8, #8]
	bfi	x8, x9, #32, #32
	b	.LBB467_3
.LBB467_7:                              // %"$3"
	adrp	x8, ($DbFiles)
	ldr	x8, [x8, :lo12:($DbFiles)]
	mov	w9, #42
	mul	w9, w0, w9
	add	x8, x8, w9, sxtw
	adrp	x9, ($DbFile)
	str	x8, [x9, :lo12:($DbFile)]
	bl	rdLockDb
	mov	x0, x20
	bl	objId
	lsl	x0, x0, #6
	bl	rdBlock
	ldrb	w8, [x0]
	and	w8, w8, #0x3f
	cmp	w8, #1                          // =1
	b.ne	.LBB467_23
// %bb.8:                               // %"$22"
	adrp	x8, ($GetBin)
	adrp	x9, getBlock
	add	x9, x9, :lo12:getBlock
	str	x9, [x8, :lo12:($GetBin)]
	adrp	x8, ($Extn)
	str	wzr, [x8, :lo12:($Extn)]
	bl	binRead
	lsr	x8, x0, #32
	stp	w0, w8, [x19]
	bl	binRead
	adrp	x21, SymTab+8
	add	x21, x21, :lo12:SymTab+8
	cmp	x0, x21
	b.ne	.LBB467_13
// %bb.9:                               // %"$23"
	lsr	x8, x20, #32
	stp	w20, w8, [x19, #-8]
.LBB467_10:                             // %"$25"
	mov	w0, #1
	bl	unLockDb
	b	.LBB467_22
.LBB467_11:                             // %"$14"
	mov	x9, sp
	sub	x10, x9, #32                    // =32
	mov	sp, x10
	adrp	x11, SymTab+8
	add	x11, x11, :lo12:SymTab+8
	lsr	x12, x11, #32
	stp	w11, w12, [x9, #-24]
	mov	w11, #2
	stp	w11, wzr, [x9, #-16]
	lsr	x12, x19, #32
	mov	x13, x10
	str	w19, [x13, #24]!
	stur	w12, [x9, #-4]
	ldp	w8, w12, [x8]
	bfi	x8, x12, #32, #32
	ldp	w12, w8, [x8, #8]
	mov	x14, sp
	sub	x0, x14, #32                    // =32
	mov	sp, x0
	lsr	x15, x10, #32
	stp	w10, w15, [x14, #-24]
	stp	w11, wzr, [x14, #-16]
	stur	w8, [x14, #-4]
	mov	x8, x0
	str	w12, [x8, #24]!
	lsr	x10, x13, #32
	stp	w13, w10, [x9, #-32]
	lsr	x9, x8, #32
	stp	w8, w9, [x14, #-32]
	bl	evList
	ldp	w9, w10, [x0]
	ldp	w8, w11, [x0, #8]
	bfi	x8, x11, #32, #32
	stp	w9, w10, [x19]
	tst	x8, #0xf
	b.eq	.LBB467_19
// %bb.12:                              // %"$15"
	lsr	x8, x20, #32
	stp	w20, w8, [x19, #-8]
	b	.LBB467_22
.LBB467_13:                             // %"$24"
	mov	x1, x20
	bl	cons
	mov	x20, x0
	orr	w8, w20, #0x8
	lsr	x9, x0, #32
	stp	w8, w9, [x19, #-8]
	bl	binRead
	adrp	x19, SymTab+216
	add	x19, x19, :lo12:SymTab+216
	cmp	x0, x19
	b.eq	.LBB467_15
.LBB467_14:                             // %"$26"
	ldp	w1, w8, [x20]
	bfi	x1, x8, #32, #32
	bl	cons
	lsr	x8, x0, #32
	stp	w0, w8, [x20]
.LBB467_15:                             // %"$28"
                                        // =>This Inner Loop Header: Depth=1
	bl	binRead
	cmp	x0, x21
	b.eq	.LBB467_10
// %bb.16:                              // %"$29"
                                        //   in Loop: Header=BB467_15 Depth=1
	ldr	w1, [x20, #8]!
	ldr	w8, [x20, #4]
	bfi	x1, x8, #32, #32
	bl	cons
	lsr	x8, x0, #32
	stp	w0, w8, [x20]
	mov	x20, x0
	bl	binRead
	cmp	x0, x19
	b.ne	.LBB467_14
	b	.LBB467_15
.LBB467_17:                             // %"$6"
	ldp	w10, w9, [x8]
	bfi	x10, x9, #32, #32
	ldp	w10, w9, [x10]
	bfi	x10, x9, #32, #32
	lsr	x9, x10, #4
	add	w0, w0, #1                      // =1
	cmp	w9, w0
	cset	w9, gt
	tbz	w9, #0, .LBB467_3
.LBB467_18:                             // %"$7"
	mov	x0, x21
	bl	dbfErr
.LBB467_19:                             // %"$16"
	orr	w9, w8, #0x8
	lsr	x10, x8, #32
	stp	w9, w10, [x19, #-8]
.LBB467_20:                             // %"$18"
                                        // =>This Inner Loop Header: Depth=1
	mov	x9, x8
	ldp	w8, w10, [x8, #8]
	bfi	x8, x10, #32, #32
	tst	x8, #0xf
	b.eq	.LBB467_20
// %bb.21:                              // %"$20"
	lsr	x8, x20, #32
	stp	w20, w8, [x9, #8]
.LBB467_22:                             // %"$4"
	ldur	x8, [x29, #-8]
	str	x8, [x22, :lo12:env]
	mov	sp, x29
	ldp	x20, x19, [sp, #32]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #48             // 16-byte Folded Reload
	ret
.LBB467_23:                             // %"$21"
	adrp	x2, .L$175
	add	x2, x2, :lo12:.L$175
	mov	x0, x21
	mov	x1, x19
	mov	x3, xzr
	bl	err
.Lfunc_end467:
	.size	db, .Lfunc_end467-db
	.cfi_endproc
                                        // -- End function
	.globl	dbfErr                          // -- Begin function dbfErr
	.p2align	4
	.type	dbfErr,@function
dbfErr:                                 // @dbfErr
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	adrp	x2, .L$163
	add	x2, x2, :lo12:.L$163
	mov	x1, xzr
	mov	x3, xzr
	bl	err
.Lfunc_end468:
	.size	dbfErr, .Lfunc_end468-dbfErr
	.cfi_endproc
                                        // -- End function
	.globl	rdLockDb                        // -- Begin function rdLockDb
	.p2align	4
	.type	rdLockDb,@function
rdLockDb:                               // @rdLockDb
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	adrp	x8, SymTab+216
	add	x8, x8, :lo12:SymTab+216
	ldr	x9, [x8, #144]
	cmp	x9, x8
	b.eq	.LBB469_2
// %bb.1:                               // %"$2"
	adrp	x8, ($DbFiles)
	ldr	x8, [x8, :lo12:($DbFiles)]
	ldr	w0, [x8]
	mov	w1, #1
	bl	rdLockWait
.LBB469_2:                              // %"$3"
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end469:
	.size	rdLockDb, .Lfunc_end469-rdLockDb
	.cfi_endproc
                                        // -- End function
	.globl	rdBlock                         // -- Begin function rdBlock
	.p2align	4
	.type	rdBlock,@function
rdBlock:                                // @rdBlock
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-32]!                // 8-byte Folded Spill
	stp	x20, x19, [sp, #16]             // 16-byte Folded Spill
	.cfi_def_cfa_offset 32
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w30, -32
	adrp	x8, ($DbFile)
	ldr	x20, [x8, :lo12:($DbFile)]
	adrp	x8, ($DbBlock)
	ldr	x19, [x8, :lo12:($DbBlock)]
	adrp	x8, ($BlkIndex)
	str	x0, [x8, :lo12:($BlkIndex)]
	ldp	w8, w2, [x20, #8]
                                        // kill: def $w8 killed $w8 def $x8
	sxtw	x8, w8
	lsl	x0, x0, x8
	mov	x1, x19
	bl	blkPeek
	mov	x0, x19
	bl	getAdr
	adrp	x8, ($BlkLink)
	adrp	x9, ($BlkEnd)
	add	x10, x19, #6                    // =6
	and	x11, x0, #0xffffffffffffffc0
	str	x11, [x8, :lo12:($BlkLink)]
	ldrsw	x8, [x20, #12]
	add	x8, x19, x8
	str	x8, [x9, :lo12:($BlkEnd)]
	adrp	x8, ($BlkPtr)
	str	x10, [x8, :lo12:($BlkPtr)]
	mov	x0, x19
	ldp	x20, x19, [sp, #16]             // 16-byte Folded Reload
	ldr	x30, [sp], #32                  // 8-byte Folded Reload
	ret
.Lfunc_end470:
	.size	rdBlock, .Lfunc_end470-rdBlock
	.cfi_endproc
                                        // -- End function
	.globl	getBlock                        // -- Begin function getBlock
	.p2align	4
	.type	getBlock,@function
getBlock:                               // @getBlock
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x30, x19, [sp, #-16]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w19, -8
	.cfi_offset w30, -16
	adrp	x19, ($BlkPtr)
	ldr	x8, [x19, :lo12:($BlkPtr)]
	adrp	x9, ($BlkEnd)
	ldr	x9, [x9, :lo12:($BlkEnd)]
	cmp	x8, x9
	b.ne	.LBB471_3
// %bb.1:                               // %"$2"
	adrp	x8, ($BlkLink)
	ldr	x0, [x8, :lo12:($BlkLink)]
	cbz	x0, .LBB471_4
// %bb.2:                               // %"$5"
	bl	rdBlock
	add	x8, x0, #6                      // =6
.LBB471_3:                              // %"$3"
	add	x9, x8, #1                      // =1
	str	x9, [x19, :lo12:($BlkPtr)]
	ldrb	w0, [x8]
	ldp	x30, x19, [sp], #16             // 16-byte Folded Reload
	ret
.LBB471_4:                              // %"$4"
	mov	w0, #-1
	ldp	x30, x19, [sp], #16             // 16-byte Folded Reload
	ret
.Lfunc_end471:
	.size	getBlock, .Lfunc_end471-getBlock
	.cfi_endproc
                                        // -- End function
	.globl	binRead                         // -- Begin function binRead
	.p2align	4
	.type	binRead,@function
binRead:                                // @binRead
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-64]!           // 16-byte Folded Spill
	stp	x24, x23, [sp, #16]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #32]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #48]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 64
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w30, -56
	.cfi_offset w29, -64
	adrp	x23, ($GetBin)
	ldr	x8, [x23, :lo12:($GetBin)]
	blr	x8
                                        // kill: def $w0 killed $w0 def $x0
	cmp	w0, #3                          // =3
	b.hi	.LBB472_8
// %bb.1:                               // %"$1"
	adrp	x19, SymTab+8
	add	x19, x19, :lo12:SymTab+8
	mov	w8, w0
	adrp	x9, .LJTI472_0
	add	x9, x9, :lo12:.LJTI472_0
	adr	x10, .LBB472_2
	ldrb	w11, [x9, x8]
	add	x10, x10, x11, lsl #2
	br	x10
.LBB472_2:                              // %"$5"
	bl	binRead
	cbz	x0, .LBB472_23
// %bb.3:                               // %"$9"
	adrp	x20, SymTab+8
	add	x20, x20, :lo12:SymTab+8
	mov	x1, x20
	bl	cons
	mov	x19, x0
	adrp	x21, env
	ldr	x8, [x21, :lo12:env]
	mov	x9, sp
	sub	x22, x9, #16                    // =16
	mov	sp, x22
	lsr	x10, x0, #32
	lsr	x11, x8, #32
	stp	w19, w10, [x9, #-16]
	stp	w8, w11, [x9, #-8]
	mov	x23, x0
	str	x22, [x21, :lo12:env]
	bl	binRead
	cbz	x0, .LBB472_7
.LBB472_4:                              // %"$12"
                                        // =>This Inner Loop Header: Depth=1
	cmp	x0, #3                          // =3
	b.eq	.LBB472_40
// %bb.5:                               // %"$15"
                                        //   in Loop: Header=BB472_4 Depth=1
	cmp	x0, #10                         // =10
	b.eq	.LBB472_35
// %bb.6:                               // %"$17"
                                        //   in Loop: Header=BB472_4 Depth=1
	mov	x1, x20
	bl	cons
	lsr	x8, x0, #32
	stp	w0, w8, [x23, #8]
	mov	x23, x0
	bl	binRead
	cbnz	x0, .LBB472_4
.LBB472_7:                              // %"$28"
	mov	x19, x0
	b	.LBB472_40
.LBB472_8:                              // %"$2"
	tbnz	w0, #31, .LBB472_23
// %bb.9:                               // %"$26"
	and	w24, w0, #0x3
	lsr	w20, w0, #2
	mov	x8, sp
	sub	x19, x8, #32                    // =32
	mov	sp, x19
	stur	wzr, [x8, #-12]
	mov	w9, #2
	mov	x22, x19
	str	w9, [x22, #16]!
	adrp	x21, env
	ldr	x9, [x21, :lo12:env]
	lsr	x10, x9, #32
	stp	w9, w10, [x8, #-8]
	str	x22, [x21, :lo12:env]
	cbz	w24, .LBB472_24
// %bb.10:                              // %"$29"
	mov	w8, #4
	stp	w8, wzr, [x19]
	cmp	w20, #63                        // =63
	b.ne	.LBB472_16
.LBB472_11:                             // %"$56"
                                        // =>This Inner Loop Header: Depth=1
	ldr	x8, [x23, :lo12:($GetBin)]
	blr	x8
	tbnz	w0, #31, .LBB472_34
// %bb.12:                              // %"$58"
                                        //   in Loop: Header=BB472_11 Depth=1
	mov	x1, x19
	bl	byteSym
	subs	w20, w20, #1                    // =1
	b.ne	.LBB472_11
// %bb.13:                              // %"$60"
                                        //   in Loop: Header=BB472_11 Depth=1
	ldr	x8, [x23, :lo12:($GetBin)]
	blr	x8
	tbnz	w0, #31, .LBB472_34
// %bb.14:                              // %"$62"
                                        //   in Loop: Header=BB472_11 Depth=1
	mov	w20, w0
	cmp	w0, #255                        // =255
	b.eq	.LBB472_11
// %bb.15:                              // %"$64"
	cbz	w20, .LBB472_18
.LBB472_16:                             // %"$67"
                                        // =>This Inner Loop Header: Depth=1
	ldr	x8, [x23, :lo12:($GetBin)]
	blr	x8
	tbnz	w0, #31, .LBB472_34
// %bb.17:                              // %"$69"
                                        //   in Loop: Header=BB472_16 Depth=1
	mov	x1, x19
	bl	byteSym
	subs	w20, w20, #1                    // =1
	b.ne	.LBB472_16
.LBB472_18:                             // %"$-3"
	ldp	w19, w8, [x22]
	bfi	x19, x8, #32, #32
	cmp	w24, #1                         // =1
	b.eq	.LBB472_43
// %bb.19:                              // %"$-3"
	cmp	w24, #2                         // =2
	b.ne	.LBB472_44
// %bb.20:                              // %"$74"
	mov	x0, x19
	bl	consStr
	b	.LBB472_7
.LBB472_21:                             // %"$6"
	mov	w19, #10
	b	.LBB472_41
.LBB472_22:                             // %"$7"
	sxtw	x19, w0
	b	.LBB472_41
.LBB472_23:
	mov	x19, xzr
	b	.LBB472_41
.LBB472_24:                             // %"$30"
	mov	w8, #3
	stp	w8, wzr, [x19]
	cmp	w20, #63                        // =63
	b.ne	.LBB472_30
.LBB472_25:                             // %"$34"
                                        // =>This Inner Loop Header: Depth=1
	ldr	x8, [x23, :lo12:($GetBin)]
	blr	x8
	tbnz	w0, #31, .LBB472_34
// %bb.26:                              // %"$36"
                                        //   in Loop: Header=BB472_25 Depth=1
	mov	x1, x19
	bl	byteNum
	subs	w20, w20, #1                    // =1
	b.ne	.LBB472_25
// %bb.27:                              // %"$38"
                                        //   in Loop: Header=BB472_25 Depth=1
	ldr	x8, [x23, :lo12:($GetBin)]
	blr	x8
	tbnz	w0, #31, .LBB472_34
// %bb.28:                              // %"$40"
                                        //   in Loop: Header=BB472_25 Depth=1
	mov	w20, w0
	cmp	w0, #255                        // =255
	b.eq	.LBB472_25
// %bb.29:                              // %"$42"
	cbz	w20, .LBB472_32
.LBB472_30:                             // %"$45"
                                        // =>This Inner Loop Header: Depth=1
	ldr	x8, [x23, :lo12:($GetBin)]
	blr	x8
	tbnz	w0, #31, .LBB472_34
// %bb.31:                              // %"$47"
                                        //   in Loop: Header=BB472_30 Depth=1
	mov	x1, x19
	bl	byteNum
	subs	w20, w20, #1                    // =1
	b.ne	.LBB472_30
.LBB472_32:                             // %"$-2"
	ldp	w19, w8, [x22]
	bfi	x19, x8, #32, #32
	tbnz	w19, #1, .LBB472_40
// %bb.33:                              // %"$51"
	ldur	w8, [x19, #-4]
	and	x20, x8, #0x1
	mov	x0, x19
	bl	half
	orr	x19, x0, x20, lsl #3
	b	.LBB472_40
.LBB472_34:                             // %"$-1"
	ldp	w9, w8, [x22, #8]
	bfi	x9, x8, #32, #32
	str	x9, [x21, :lo12:env]
	mov	x0, xzr
	b	.LBB472_42
.LBB472_35:                             // %"$18"
	bl	binRead
	cbz	x0, .LBB472_39
// %bb.36:                              // %"$20"
	cmp	x0, #3                          // =3
	mov	x8, x19
	b.eq	.LBB472_38
// %bb.37:                              // %"$23"
	mov	x8, x0
.LBB472_38:                             // %"$24"
	lsr	x9, x8, #32
	stp	w8, w9, [x23, #8]
	b	.LBB472_40
.LBB472_39:
	mov	x19, xzr
.LBB472_40:                             // %"$28"
	ldp	w9, w8, [x22, #8]
	bfi	x9, x8, #32, #32
	str	x9, [x21, :lo12:env]
.LBB472_41:                             // %"$3"
	mov	x0, x19
.LBB472_42:                             // %"$3"
	mov	sp, x29
	ldp	x20, x19, [sp, #48]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #32]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #64             // 16-byte Folded Reload
	ret
.LBB472_43:                             // %"$75"
	mov	x0, x19
	bl	requestSym
	b	.LBB472_7
.LBB472_44:                             // %"$72"
	adrp	x8, ($Extn)
	ldr	w20, [x8, :lo12:($Extn)]
	cbz	w20, .LBB472_46
// %bb.45:                              // %"$76"
	mov	x0, x19
	bl	objFile
	add	w8, w0, w20
	and	x8, x8, #0xffff
	lsl	x9, x8, #24
	mov	x10, #-4486007441326081
	movk	x10, #255, lsl #16
	and	x10, x19, x10
	orr	x8, x9, x8, lsl #36
	and	x8, x8, #0xfffff000ffffffff
	orr	x19, x10, x8
.LBB472_46:                             // %"$77"
	mov	x0, x19
	bl	extern
	b	.LBB472_7
.Lfunc_end472:
	.size	binRead, .Lfunc_end472-binRead
	.cfi_endproc
	.section	.rodata,"a",@progbits
.LJTI472_0:
	.byte	(.LBB472_41-.LBB472_2)>>2
	.byte	(.LBB472_2-.LBB472_2)>>2
	.byte	(.LBB472_21-.LBB472_2)>>2
	.byte	(.LBB472_22-.LBB472_2)>>2
                                        // -- End function
	.text
	.globl	unLockDb                        // -- Begin function unLockDb
	.p2align	4
	.type	unLockDb,@function
unLockDb:                               // @unLockDb
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-32]!                // 8-byte Folded Spill
	stp	x20, x19, [sp, #16]             // 16-byte Folded Spill
	.cfi_def_cfa_offset 32
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w30, -32
	adrp	x8, SymTab+216
	add	x8, x8, :lo12:SymTab+216
	ldr	x9, [x8, #144]
	cmp	x9, x8
	b.eq	.LBB473_8
// %bb.1:                               // %"$2"
	cbnz	x0, .LBB473_7
// %bb.2:                               // %"$4"
	adrp	x8, ($DbFiles)
	ldr	x8, [x8, :lo12:($DbFiles)]
	adrp	x9, ($DBs)
	ldr	w19, [x9, :lo12:($DBs)]
.LBB473_3:                              // %"$6"
                                        // =>This Inner Loop Header: Depth=1
	subs	w19, w19, #1                    // =1
	b.eq	.LBB473_6
// %bb.4:                               // %"$7"
                                        //   in Loop: Header=BB473_3 Depth=1
	add	x20, x8, #42                    // =42
	ldrb	w8, [x8, #82]
	cmp	w8, #1                          // =1
	mov	x8, x20
	b.ne	.LBB473_3
// %bb.5:                               // %"$9"
                                        //   in Loop: Header=BB473_3 Depth=1
	bl	unLock
	strb	wzr, [x20, #40]
	mov	x8, x20
	b	.LBB473_3
.LBB473_6:                              // %"$8"
	adrp	x8, SymTab+360
	mov	w9, #2
	str	x9, [x8, :lo12:SymTab+360]
.LBB473_7:                              // %"$5"
	bl	unLock
.LBB473_8:                              // %"$3"
	ldp	x20, x19, [sp, #16]             // 16-byte Folded Reload
	ldr	x30, [sp], #32                  // 8-byte Folded Reload
	ret
.Lfunc_end473:
	.size	unLockDb, .Lfunc_end473-unLockDb
	.cfi_endproc
                                        // -- End function
	.globl	byteNum                         // -- Begin function byteNum
	.p2align	4
	.type	byteNum,@function
byteNum:                                // @byteNum
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-32]!                // 8-byte Folded Spill
	stp	x20, x19, [sp, #16]             // 16-byte Folded Spill
	.cfi_def_cfa_offset 32
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w30, -32
	mov	x19, x1
                                        // kill: def $w0 killed $w0 def $x0
	ldp	w8, w9, [x1]
	bfi	x8, x9, #32, #32
	ldp	w9, w10, [x1, #16]
	bfi	x9, x10, #32, #32
	tbz	w9, #1, .LBB474_4
// %bb.1:                               // %"$2"
	cmp	x8, #59                         // =59
	b.eq	.LBB474_7
// %bb.2:                               // %"$2"
	cmp	x8, #67                         // =67
	b.ne	.LBB474_10
// %bb.3:                               // %"$7"
	lsr	x8, x9, #3
	and	x9, x0, #0xff
	mov	w1, #2
	bfi	x1, x9, #4, #8
	mov	x0, x8
	bl	consNum
	lsr	x9, x0, #32
	stp	w0, w9, [x19, #8]
	mov	w8, #12
	b	.LBB474_9
.LBB474_4:                              // %"$3"
	ldp	w20, w9, [x19, #8]
	bfi	x20, x9, #32, #32
	ldp	w9, w10, [x20, #4]
	bfi	x9, x10, #32, #32
	cmp	x8, #60                         // =60
	b.eq	.LBB474_11
// %bb.5:                               // %"$3"
	cmp	x8, #68                         // =68
	b.ne	.LBB474_14
// %bb.6:                               // %"$14"
	lsr	x8, x9, #4
	and	x9, x0, #0xff
	mov	w1, #2
	bfi	x1, x9, #4, #8
	mov	x0, x8
	bl	consNum
	lsr	x9, x0, #32
	stp	w0, w9, [x20, #4]
	mov	w8, #12
	b	.LBB474_16
.LBB474_7:                              // %"$9"
	and	w10, w0, #0xff
	cmp	w10, #32                        // =32
	b.lo	.LBB474_10
// %bb.8:                               // %"$11"
	lsr	x8, x9, #3
	orr	x0, x8, x0, lsl #56
	bl	boxNum
	lsr	x9, x0, #32
	stp	w0, w9, [x19, #8]
	mov	w8, #4
.LBB474_9:                              // %"$4"
	stp	w0, w9, [x19, #16]
	b	.LBB474_17
.LBB474_10:                             // %"$10"
	and	x10, x0, #0xff
	lsl	x10, x10, x8
	orr	x9, x9, x10
	lsr	x10, x9, #32
	stp	w9, w10, [x19, #16]
	b	.LBB474_13
.LBB474_11:                             // %"$16"
	and	w10, w0, #0xff
	cmp	w10, #15                        // =15
	cset	w10, hi
	cbnz	w10, .LBB474_15
.LBB474_12:                             // %"$17"
	and	x10, x0, #0xff
	lsl	x10, x10, x8
	orr	x9, x9, x10
	lsr	x10, x9, #32
	stp	w9, w10, [x20, #4]
.LBB474_13:                             // %"$4"
	add	x8, x8, #8                      // =8
	b	.LBB474_17
.LBB474_14:
	mov	w10, wzr
	cbz	w10, .LBB474_12
.LBB474_15:                             // %"$18"
	lsr	x8, x9, #4
	orr	x0, x8, x0, lsl #56
	bl	boxNum
	lsr	x9, x0, #32
	stp	w0, w9, [x20, #4]
	mov	w8, #4
.LBB474_16:                             // %"$4"
	stp	w0, w9, [x19, #8]
.LBB474_17:                             // %"$4"
	lsr	x9, x8, #32
	stp	w8, w9, [x19]
	ldp	x20, x19, [sp, #16]             // 16-byte Folded Reload
	ldr	x30, [sp], #32                  // 8-byte Folded Reload
	ret
.Lfunc_end474:
	.size	byteNum, .Lfunc_end474-byteNum
	.cfi_endproc
                                        // -- End function
	.globl	half                            // -- Begin function half
	.p2align	4
	.type	half,@function
half:                                   // @half
	.cfi_startproc
// %bb.0:                               // %"$1"
	tbz	w0, #1, .LBB475_2
// %bb.1:                               // %"$2"
	lsr	x8, x0, #1
	orr	x8, x8, #0x2
	mov	x9, #-10
	movk	x9, #32767, lsl #48
	and	x0, x8, x9
	ret
.LBB475_2:                              // %"$3"
	ldp	w8, w9, [x0, #-4]
	bfi	x8, x9, #32, #32
	lsr	x8, x8, #1
	ldp	w10, w9, [x0, #4]
	bfi	x10, x9, #32, #32
	tbz	w10, #2, .LBB475_7
// %bb.3:                               // %"$8.preheader"
	mov	x9, x0
.LBB475_4:                              // %"$8"
                                        // =>This Inner Loop Header: Depth=1
	mov	x11, x9
	mov	x9, x10
	ldp	w10, w12, [x10, #4]
	bfi	x10, x12, #32, #32
	ldp	w13, w12, [x9, #-4]
	bfi	x13, x12, #32, #32
	orr	x12, x8, x13, lsl #63
	stur	w8, [x11, #-4]
	lsr	x8, x12, #32
	str	w8, [x11]
	lsr	x8, x13, #1
	tbz	w10, #1, .LBB475_4
// %bb.5:                               // %"$10"
	lsr	x12, x10, #4
	bfi	x8, x12, #63, #1
	lsr	x12, x10, #5
	mov	w10, #1
	tst	x8, #0xf000000000000000
	cset	w13, ne
	cmp	x12, #0                         // =0
	csel	w10, w10, w13, ne
	tbz	w10, #0, .LBB475_9
// %bb.6:                               // %"$14"
	stur	w8, [x9, #-4]
	lsr	x8, x8, #32
	str	w8, [x9], #4
	mov	w10, #2
	bfi	x10, x12, #4, #59
	b	.LBB475_10
.LBB475_7:                              // %"$6"
	lsr	x9, x10, #4
	bfi	x8, x9, #63, #1
	lsr	x11, x10, #5
	mov	w9, #1
	tst	x8, #0xf000000000000000
	cset	w10, ne
	cmp	x11, #0                         // =0
	csel	w9, w9, w10, ne
	tbz	w9, #0, .LBB475_11
// %bb.8:                               // %"$19"
	stur	w8, [x0, #-4]
	lsr	x8, x8, #32
	str	w8, [x0]
	add	x9, x0, #4                      // =4
	mov	w10, #2
	bfi	x10, x11, #4, #59
	b	.LBB475_10
.LBB475_9:                              // %"$13"
	add	x9, x11, #4                     // =4
	mov	w10, #2
	bfi	x10, x8, #4, #60
.LBB475_10:                             // %"$7"
	lsr	x8, x10, #32
	stp	w10, w8, [x9]
	ret
.LBB475_11:                             // %"$18"
	mov	w0, #2
	bfi	x0, x8, #4, #60
	ret
.Lfunc_end475:
	.size	half, .Lfunc_end475-half
	.cfi_endproc
                                        // -- End function
	.globl	blkPeek                         // -- Begin function blkPeek
	.p2align	4
	.type	blkPeek,@function
blkPeek:                                // @blkPeek
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x30, x19, [sp, #-16]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w19, -8
	.cfi_offset w30, -16
                                        // kill: def $w2 killed $w2 def $x2
	sxtw	x19, w2
	bl	pread
	cmp	x19, x0
	b.ne	.LBB476_2
// %bb.1:                               // %"$3"
	ldp	x30, x19, [sp], #16             // 16-byte Folded Reload
	ret
.LBB476_2:                              // %"$2"
	bl	dbRdErr
.Lfunc_end476:
	.size	blkPeek, .Lfunc_end476-blkPeek
	.cfi_endproc
                                        // -- End function
	.globl	getAdr                          // -- Begin function getAdr
	.p2align	4
	.type	getAdr,@function
getAdr:                                 // @getAdr
	.cfi_startproc
// %bb.0:                               // %"$1"
	ldrb	w8, [x0, #5]
	ldrb	w9, [x0, #4]
	bfi	w9, w8, #8, #8
	ldrb	w8, [x0, #3]
	ldrb	w10, [x0, #2]
	ldrb	w11, [x0, #1]
	lsl	x8, x8, #24
	bfi	x8, x9, #32, #16
	bfi	x8, x10, #16, #8
	bfi	x8, x11, #8, #8
	ldrb	w9, [x0]
	orr	x0, x8, x9
	ret
.Lfunc_end477:
	.size	getAdr, .Lfunc_end477-getAdr
	.cfi_endproc
                                        // -- End function
	.globl	pread                           // -- Begin function pread
	.p2align	4
	.type	pread,@function
pread:                                  // @pread
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	adrp	x0, .L$19
	add	x0, x0, :lo12:.L$19
	bl	"pr-libc"
	mov	x0, xzr
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end478:
	.size	pread, .Lfunc_end478-pread
	.cfi_endproc
                                        // -- End function
	.globl	dbRdErr                         // -- Begin function dbRdErr
	.p2align	4
	.type	dbRdErr,@function
dbRdErr:                                // @dbRdErr
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	bl	strErrno
	mov	x3, x0
	adrp	x2, .L$164
	add	x2, x2, :lo12:.L$164
	mov	x0, xzr
	mov	x1, xzr
	bl	err
.Lfunc_end479:
	.size	dbRdErr, .Lfunc_end479-dbRdErr
	.cfi_endproc
                                        // -- End function
	.globl	rdLockWait                      // -- Begin function rdLockWait
	.p2align	4
	.type	rdLockWait,@function
rdLockWait:                             // @rdLockWait
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
.LBB480_1:                              // %"$2"
                                        // =>This Inner Loop Header: Depth=1
	bl	rdLock
	tbz	w0, #31, .LBB480_4
// %bb.2:                               // %"$3"
                                        //   in Loop: Header=BB480_1 Depth=1
	bl	gErrno
	cmp	w0, #2                          // =2
	b.eq	.LBB480_1
// %bb.3:                               // %"$5"
	bl	lockErr
.LBB480_4:                              // %"$4"
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end480:
	.size	rdLockWait, .Lfunc_end480-rdLockWait
	.cfi_endproc
                                        // -- End function
	.globl	rdLock                          // -- Begin function rdLock
	.p2align	4
	.type	rdLock,@function
rdLock:                                 // @rdLock
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	adrp	x0, .L$97
	add	x0, x0, :lo12:.L$97
	bl	"pr-libc"
	mov	w0, wzr
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end481:
	.size	rdLock, .Lfunc_end481-rdLock
	.cfi_endproc
                                        // -- End function
	.globl	lockErr                         // -- Begin function lockErr
	.p2align	4
	.type	lockErr,@function
lockErr:                                // @lockErr
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	bl	strErrno
	mov	x3, x0
	adrp	x2, .L$123
	add	x2, x2, :lo12:.L$123
	mov	x0, xzr
	mov	x1, xzr
	bl	err
.Lfunc_end482:
	.size	lockErr, .Lfunc_end482-lockErr
	.cfi_endproc
                                        // -- End function
	.globl	symChar                         // -- Begin function symChar
	.p2align	4
	.type	symChar,@function
symChar:                                // @symChar
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x30, x21, [sp, #-32]!           // 16-byte Folded Spill
	stp	x20, x19, [sp, #16]             // 16-byte Folded Spill
	.cfi_def_cfa_offset 32
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w30, -32
	mov	x19, x0
	bl	symByte
	and	w0, w0, #0xff
	cmp	w0, #128                        // =128
	b.lt	.LBB483_10
// %bb.1:                               // %"$3"
	cmp	w0, #255                        // =255
	b.ne	.LBB483_3
// %bb.2:
	mov	w0, #1114112
	b	.LBB483_10
.LBB483_3:                              // %"$5"
	tbz	w0, #5, .LBB483_6
// %bb.4:                               // %"$8"
	tbz	w0, #4, .LBB483_7
// %bb.5:                               // %"$11"
	and	w21, w0, #0x7
	mov	x0, x19
	bl	symByte
	and	w20, w0, #0x3f
	bfi	w20, w21, #6, #3
	b	.LBB483_8
.LBB483_6:                              // %"$7"
	and	w21, w0, #0x1f
	b	.LBB483_9
.LBB483_7:                              // %"$10"
	and	w20, w0, #0xf
.LBB483_8:                              // %"$12"
	mov	x0, x19
	bl	symByte
	and	w21, w0, #0x3f
	bfi	w21, w20, #6, #9
.LBB483_9:                              // %"$9"
	mov	x0, x19
	bl	symByte
	and	w0, w0, #0x3f
	bfi	w0, w21, #6, #15
.LBB483_10:                             // %"$2"
	ldp	x20, x19, [sp, #16]             // 16-byte Folded Reload
	ldp	x30, x21, [sp], #32             // 16-byte Folded Reload
	ret
.Lfunc_end483:
	.size	symChar, .Lfunc_end483-symChar
	.cfi_endproc
                                        // -- End function
	.globl	isBlank                         // -- Begin function isBlank
	.p2align	4
	.type	isBlank,@function
isBlank:                                // @isBlank
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-32]!           // 16-byte Folded Spill
	str	x19, [sp, #16]                  // 8-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 32
	.cfi_offset w19, -16
	.cfi_offset w30, -24
	.cfi_offset w29, -32
	adrp	x8, SymTab+8
	add	x8, x8, :lo12:SymTab+8
	cmp	x0, x8
	b.ne	.LBB484_2
.LBB484_1:
	mov	w0, #1
	b	.LBB484_10
.LBB484_2:                              // %"$3"
	eor	w8, w0, #0x8
	tst	x8, #0xe
	b.ne	.LBB484_9
// %bb.3:                               // %"$5"
	ldp	w8, w9, [x0, #-8]
	bfi	x8, x9, #32, #32
	tbnz	w8, #3, .LBB484_9
	b	.LBB484_5
.LBB484_4:                              // %"$8"
                                        //   in Loop: Header=BB484_5 Depth=1
	ldp	w8, w9, [x8, #8]
	bfi	x8, x9, #32, #32
.LBB484_5:                              // %"$7"
                                        // =>This Inner Loop Header: Depth=1
	tst	x8, #0x6
	b.eq	.LBB484_4
// %bb.6:                               // %"$9"
	mov	x9, sp
	sub	x19, x9, #16                    // =16
	mov	sp, x19
	stp	wzr, wzr, [x9, #-16]
	lsr	x10, x8, #32
	stp	w8, w10, [x9, #-8]
.LBB484_7:                              // %"$10"
                                        // =>This Inner Loop Header: Depth=1
	mov	x0, x19
	bl	symByte
	tst	w0, #0xff
	b.eq	.LBB484_1
// %bb.8:                               // %"$11"
                                        //   in Loop: Header=BB484_7 Depth=1
	and	w8, w0, #0xff
	cmp	w8, #33                         // =33
	b.lo	.LBB484_7
.LBB484_9:
	mov	w0, wzr
.LBB484_10:                             // %"$2"
	mov	sp, x29
	ldr	x19, [sp, #16]                  // 8-byte Folded Reload
	ldp	x29, x30, [sp], #32             // 16-byte Folded Reload
	ret
.Lfunc_end484:
	.size	isBlank, .Lfunc_end484-isBlank
	.cfi_endproc
                                        // -- End function
	.globl	trim                            // -- Begin function trim
	.p2align	4
	.type	trim,@function
trim:                                   // @trim
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-32]!                // 8-byte Folded Spill
	stp	x20, x19, [sp, #16]             // 16-byte Folded Spill
	.cfi_def_cfa_offset 32
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w30, -32
	mov	x19, x0
	tst	x0, #0xf
	b.ne	.LBB485_6
// %bb.1:                               // %"$3"
	mov	x8, sp
	adrp	x9, ($StkLimit)
	ldr	x9, [x9, :lo12:($StkLimit)]
	cmp	x9, x8
	b.hi	.LBB485_7
// %bb.2:                               // %"$6"
	ldp	w0, w8, [x19, #8]
	bfi	x0, x8, #32, #32
	bl	trim
	mov	x20, x0
	adrp	x8, SymTab+8
	add	x8, x8, :lo12:SymTab+8
	cmp	x0, x8
	b.ne	.LBB485_5
// %bb.3:                               // %"$8"
	ldp	w0, w8, [x19]
	bfi	x0, x8, #32, #32
	bl	isBlank
	tbz	w0, #0, .LBB485_5
// %bb.4:
	adrp	x19, SymTab+8
	add	x19, x19, :lo12:SymTab+8
	b	.LBB485_6
.LBB485_5:                              // %"$10"
	ldp	w0, w8, [x19]
	bfi	x0, x8, #32, #32
	mov	x1, x20
	bl	cons
	mov	x19, x0
.LBB485_6:                              // %"$4"
	mov	x0, x19
	ldp	x20, x19, [sp, #16]             // 16-byte Folded Reload
	ldr	x30, [sp], #32                  // 8-byte Folded Reload
	ret
.LBB485_7:                              // %"$5"
	mov	x0, xzr
	bl	stkErr
.Lfunc_end485:
	.size	trim, .Lfunc_end485-trim
	.cfi_endproc
                                        // -- End function
	.globl	makeErr                         // -- Begin function makeErr
	.p2align	4
	.type	makeErr,@function
makeErr:                                // @makeErr
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	adrp	x2, .L$194
	add	x2, x2, :lo12:.L$194
	mov	x1, xzr
	mov	x3, xzr
	bl	err
.Lfunc_end486:
	.size	makeErr, .Lfunc_end486-makeErr
	.cfi_endproc
                                        // -- End function
	.globl	argErr                          // -- Begin function argErr
	.p2align	4
	.type	argErr,@function
argErr:                                 // @argErr
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	adrp	x2, .L$111
	add	x2, x2, :lo12:.L$111
	mov	x3, xzr
	bl	err
.Lfunc_end487:
	.size	argErr, .Lfunc_end487-argErr
	.cfi_endproc
                                        // -- End function
	.globl	adds                            // -- Begin function adds
	.p2align	4
	.type	adds,@function
adds:                                   // @adds
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	tbz	w0, #3, .LBB488_3
// %bb.1:                               // %"$3"
	and	x0, x0, #0xfffffffffffffff7
	tbz	w1, #3, .LBB488_5
// %bb.2:                               // %"$9"
	and	x1, x1, #0xfffffffffffffff7
	bl	addu
	b	.LBB488_6
.LBB488_3:                              // %"$2"
	tbz	w1, #3, .LBB488_7
// %bb.4:                               // %"$6"
	and	x1, x1, #0xfffffffffffffff7
	bl	subu
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.LBB488_5:                              // %"$8"
	bl	subu
.LBB488_6:                              // %"$10"
	eor	x8, x0, #0x8
	cmp	x0, #2                          // =2
	csel	x0, x0, x8, eq
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.LBB488_7:                              // %"$5"
	bl	addu
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end488:
	.size	adds, .Lfunc_end488-adds
	.cfi_endproc
                                        // -- End function
	.globl	subs                            // -- Begin function subs
	.p2align	4
	.type	subs,@function
subs:                                   // @subs
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	tbz	w0, #3, .LBB489_3
// %bb.1:                               // %"$3"
	and	x0, x0, #0xfffffffffffffff7
	tbz	w1, #3, .LBB489_5
// %bb.2:                               // %"$9"
	and	x1, x1, #0xfffffffffffffff7
	bl	subu
	b	.LBB489_6
.LBB489_3:                              // %"$2"
	tbz	w1, #3, .LBB489_7
// %bb.4:                               // %"$6"
	and	x1, x1, #0xfffffffffffffff7
	bl	addu
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.LBB489_5:                              // %"$8"
	bl	addu
.LBB489_6:                              // %"$10"
	eor	x8, x0, #0x8
	cmp	x0, #2                          // =2
	csel	x0, x0, x8, eq
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.LBB489_7:                              // %"$5"
	bl	subu
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end489:
	.size	subs, .Lfunc_end489-subs
	.cfi_endproc
                                        // -- End function
	.globl	subu                            // -- Begin function subu
	.p2align	4
	.type	subu,@function
subu:                                   // @subu
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-80]!           // 16-byte Folded Spill
	str	x25, [sp, #16]                  // 8-byte Folded Spill
	stp	x24, x23, [sp, #32]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #48]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #64]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 80
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -64
	.cfi_offset w30, -72
	.cfi_offset w29, -80
	mov	x21, x1
	mov	x20, x0
	tbz	w20, #1, .LBB490_3
// %bb.1:                               // %"$4"
	tbz	w21, #1, .LBB490_5
// %bb.2:                               // %"$5"
	and	x8, x21, #0xfffffffffffffffd
	subs	x8, x20, x8
	eor	x9, x8, #0xfffffffffffffff0
	add	x9, x9, #24                     // =24
	csel	x0, x8, x9, hs
	b	.LBB490_27
.LBB490_3:                              // %"$3"
	tbz	w21, #1, .LBB490_6
// %bb.4:                               // %"$15"
	mov	x0, x20
	mov	x1, x21
	bl	sub1
	b	.LBB490_27
.LBB490_5:                              // %"$6"
	mov	x0, x21
	mov	x1, x20
	bl	sub1
	eor	x8, x0, #0x8
	cmp	x0, #2                          // =2
	csel	x0, x0, x8, eq
	b	.LBB490_27
.LBB490_6:                              // %"$14"
	ldp	w9, w8, [x20, #-4]
	bfi	x9, x8, #32, #32
	ldp	w10, w8, [x21, #-4]
	bfi	x10, x8, #32, #32
	subs	x0, x9, x10
	cset	w24, lo
	bl	boxNum
	mov	x19, x0
	adrp	x25, env
	add	x25, x25, :lo12:env
	ldr	x8, [x25]
	mov	x9, sp
	sub	x23, x9, #16                    // =16
	mov	sp, x23
	lsr	x10, x0, #32
	lsr	x11, x8, #32
	mov	x0, x23
	stp	w19, w10, [x9, #-16]
	mov	x22, x19
	stp	w8, w11, [x9, #-8]
.LBB490_7:                              // %"$16"
                                        // =>This Inner Loop Header: Depth=1
	lsr	x8, x0, #32
	stp	w0, w8, [x25]
	ldp	w20, w8, [x20, #4]
	bfi	x20, x8, #32, #32
	ldp	w21, w8, [x21, #4]
	bfi	x21, x8, #32, #32
	tbnz	w21, #1, .LBB490_10
// %bb.8:                               // %"$17"
                                        //   in Loop: Header=BB490_7 Depth=1
	tbnz	w20, #1, .LBB490_13
// %bb.9:                               // %"$25"
                                        //   in Loop: Header=BB490_7 Depth=1
	ldp	w9, w8, [x20, #-4]
	bfi	x9, x8, #32, #32
	ldp	w10, w8, [x21, #-4]
	bfi	x10, x8, #32, #32
	subs	x8, x9, x10
	cset	w9, lo
	and	x10, x24, #0x1
	subs	x0, x8, x10
	cset	w8, lo
	orr	w24, w9, w8
	add	x25, x22, #4                    // =4
	bl	boxNum
	mov	x22, x0
	b	.LBB490_7
.LBB490_10:                             // %"$19"
	lsr	x8, x21, #4
.LBB490_11:                             // %"$20"
                                        // =>This Inner Loop Header: Depth=1
	tbnz	w20, #1, .LBB490_16
// %bb.12:                              // %"$21"
                                        //   in Loop: Header=BB490_11 Depth=1
	ldp	w10, w9, [x20, #-4]
	and	x11, x24, #0x1
	bfi	x10, x9, #32, #32
	subs	x8, x10, x8
	cset	w9, lo
	subs	x0, x8, x11
	cset	w8, lo
	orr	w24, w9, w8
	ldp	w20, w8, [x20, #4]
	bfi	x20, x8, #32, #32
	mov	x1, x20
	bl	consNum
	mov	x8, xzr
	lsr	x9, x0, #32
	stp	w0, w9, [x22, #4]
	mov	x22, x0
	tbnz	w24, #0, .LBB490_11
	b	.LBB490_19
.LBB490_13:                             // %"$26"
	lsr	x8, x20, #4
.LBB490_14:                             // %"$27"
                                        // =>This Inner Loop Header: Depth=1
	mov	x20, x22
	ldp	w10, w9, [x21, #-4]
	bfi	x10, x9, #32, #32
	subs	x8, x8, x10
	cset	w9, lo
	and	x10, x24, #0x1
	subs	x0, x8, x10
	cset	w8, lo
	orr	w24, w9, w8
	bl	boxNum
	mov	x22, x0
	mov	x8, xzr
	lsr	x9, x0, #32
	stp	w22, w9, [x20, #4]
	ldp	w21, w9, [x21, #4]
	bfi	x21, x9, #32, #32
	tbz	w21, #1, .LBB490_14
// %bb.15:                              // %"$29"
	mov	x9, xzr
	lsr	x8, x21, #4
	b	.LBB490_17
.LBB490_16:                             // %"$22"
	lsr	x9, x20, #4
.LBB490_17:                             // %"$18"
	subs	x8, x9, x8
	cset	w10, lo
	and	x9, x24, #0x1
	subs	x9, x8, x9
	cset	w8, lo
	mov	w11, #2
	bfi	w11, w9, #4, #28
	lsr	x9, x9, #28
	stp	w11, w9, [x22, #4]
	mov	x9, x19
	tbnz	w10, #0, .LBB490_20
// %bb.18:                              // %"$18"
	mov	x9, x19
	cbnz	w8, .LBB490_20
.LBB490_19:                             // %"$23"
	mov	x0, x19
	bl	zapZero
	b	.LBB490_26
.LBB490_20:                             // %"$33"
                                        // =>This Inner Loop Header: Depth=1
	mov	x8, x9
	mov	x10, x9
	ldr	w11, [x10, #-4]!
	ldp	w12, w9, [x10, #4]
	bfi	x11, x12, #32, #32
	mvn	x11, x11
	str	w11, [x10]
	lsr	x11, x11, #32
	str	w11, [x10, #4]
	ldr	w10, [x10, #12]
	bfi	x9, x10, #32, #32
	tbz	w9, #1, .LBB490_20
// %bb.21:                              // %"$35"
	eor	x9, x9, #0xfffffffffffffff0
	lsr	x10, x9, #32
	stp	w9, w10, [x8, #4]
	mov	x9, x19
.LBB490_22:                             // %"$36"
                                        // =>This Inner Loop Header: Depth=1
	mov	x8, x9
	ldr	w10, [x9, #-4]!
	ldr	w11, [x9, #4]
	bfi	x10, x11, #32, #32
	adds	x10, x10, #1                    // =1
	str	w10, [x9]
	lsr	x10, x10, #32
	str	w10, [x9, #4]
	b.lo	.LBB490_25
// %bb.23:                              // %"$38"
                                        //   in Loop: Header=BB490_22 Depth=1
	ldp	w9, w10, [x8, #4]
	bfi	x9, x10, #32, #32
	tbz	w9, #1, .LBB490_22
// %bb.24:                              // %"$40"
	add	x9, x9, #16                     // =16
	lsr	x10, x9, #32
	stp	w9, w10, [x8, #4]
.LBB490_25:                             // %"$-9"
	mov	x0, x19
	bl	zapZero
	orr	x0, x0, #0x8
.LBB490_26:                             // %"$32"
	ldp	w9, w8, [x23, #8]
	bfi	x9, x8, #32, #32
	adrp	x8, env
	str	x9, [x8, :lo12:env]
.LBB490_27:                             // %"$2"
	mov	sp, x29
	ldp	x20, x19, [sp, #64]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #48]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #32]             // 16-byte Folded Reload
	ldr	x25, [sp, #16]                  // 8-byte Folded Reload
	ldp	x29, x30, [sp], #80             // 16-byte Folded Reload
	ret
.Lfunc_end490:
	.size	subu, .Lfunc_end490-subu
	.cfi_endproc
                                        // -- End function
	.globl	sub1                            // -- Begin function sub1
	.p2align	4
	.type	sub1,@function
sub1:                                   // @sub1
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-64]!           // 16-byte Folded Spill
	str	x23, [sp, #16]                  // 8-byte Folded Spill
	stp	x22, x21, [sp, #32]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #48]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 64
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -48
	.cfi_offset w30, -56
	.cfi_offset w29, -64
	mov	x8, x0
	ldp	w9, w10, [x0, #-4]
	ldr	w19, [x0, #4]
	bfi	x9, x10, #32, #32
	subs	x0, x9, x1, lsr #4
	ldr	w8, [x8, #8]
	bfi	x19, x8, #32, #32
	b.hs	.LBB491_6
// %bb.1:                               // %"$3"
	tbz	w19, #2, .LBB491_9
// %bb.2:                               // %"$11"
	bl	boxNum
	mov	x20, x0
	adrp	x21, env
	ldr	x8, [x21, :lo12:env]
	mov	x9, sp
	sub	x22, x9, #16                    // =16
	mov	sp, x22
	lsr	x10, x0, #32
	lsr	x11, x8, #32
	stp	w20, w10, [x9, #-16]
	stp	w8, w11, [x9, #-8]
	mov	x23, x0
	str	x22, [x21, :lo12:env]
.LBB491_3:                              // %"$16"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w9, w8, [x19, #-4]
	bfi	x9, x8, #32, #32
	subs	x0, x9, #1                      // =1
	ldp	w19, w8, [x19, #4]
	bfi	x19, x8, #32, #32
	b.hs	.LBB491_12
// %bb.4:                               // %"$17"
                                        //   in Loop: Header=BB491_3 Depth=1
	mov	x1, x19
	bl	consNum
	lsr	x8, x0, #32
	stp	w0, w8, [x23, #4]
	mov	x23, x0
	tbz	w19, #1, .LBB491_3
// %bb.5:                               // %"$21"
	add	x23, x0, #4                     // =4
	sub	x0, x19, #16                    // =16
	b	.LBB491_13
.LBB491_6:                              // %"$4"
	cmp	x19, #2                         // =2
	b.ne	.LBB491_11
// %bb.7:                               // %"$5"
	tst	x0, #0xf000000000000000
	b.eq	.LBB491_15
// %bb.8:                               // %"$8"
	bl	boxNum
	mov	x8, x0
	b	.LBB491_16
.LBB491_9:                              // %"$12"
	subs	x1, x19, #16                    // =16
	b.hs	.LBB491_14
// %bb.10:                              // %"$13"
	mov	w8, #10
	sub	x8, x8, x0, lsl #4
	b	.LBB491_16
.LBB491_11:                             // %"$6"
	mov	x1, x19
	bl	consNum
	mov	x8, x0
	b	.LBB491_16
.LBB491_12:                             // %"$19"
	add	x23, x23, #4                    // =4
	mov	x1, x19
	bl	consNum
.LBB491_13:                             // %"$18"
	lsr	x8, x0, #32
	stp	w0, w8, [x23]
	mov	x0, x20
	bl	zapZero
	mov	x8, x0
	ldp	w10, w9, [x22, #8]
	bfi	x10, x9, #32, #32
	str	x10, [x21, :lo12:env]
	b	.LBB491_16
.LBB491_14:                             // %"$14"
	bl	consNum
	bl	zapZero
	mov	x8, x0
	b	.LBB491_16
.LBB491_15:                             // %"$9"
	mov	w8, #2
	bfi	x8, x0, #4, #60
.LBB491_16:                             // %"$2"
	mov	x0, x8
	mov	sp, x29
	ldp	x20, x19, [sp, #48]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #32]             // 16-byte Folded Reload
	ldr	x23, [sp, #16]                  // 8-byte Folded Reload
	ldp	x29, x30, [sp], #64             // 16-byte Folded Reload
	ret
.Lfunc_end491:
	.size	sub1, .Lfunc_end491-sub1
	.cfi_endproc
                                        // -- End function
	.globl	zapZero                         // -- Begin function zapZero
	.p2align	4
	.type	zapZero,@function
zapZero:                                // @zapZero
	.cfi_startproc
// %bb.0:                               // %"$1"
	sub	sp, sp, #16                     // =16
	.cfi_def_cfa_offset 16
	add	x8, sp, #8                      // =8
	str	x0, [sp, #8]
	add	x9, sp, #8                      // =8
.LBB492_1:                              // %"$2"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w10, w11, [x0, #4]
	bfi	x10, x11, #32, #32
	tbnz	w10, #1, .LBB492_3
// %bb.2:                               // %"$3"
                                        //   in Loop: Header=BB492_1 Depth=1
	ldp	w11, w10, [x0, #-4]
	bfi	x11, x10, #32, #32
	cmp	x11, #0                         // =0
	csel	x8, x8, x9, eq
	ldr	w10, [x0, #4]!
	mov	x9, x0
	ldr	w11, [x0, #4]
	bfi	x10, x11, #32, #32
	mov	x0, x10
	b	.LBB492_1
.LBB492_3:                              // %"$4"
	cmp	x10, #2                         // =2
	b.ne	.LBB492_11
// %bb.4:                               // %"$7"
	ldp	w11, w10, [x0, #-4]
	bfi	x11, x10, #32, #32
	cbz	x11, .LBB492_7
// %bb.5:                               // %"$11"
	tst	x11, #0xf000000000000000
	b.ne	.LBB492_11
// %bb.6:                               // %"$12"
	mov	w10, #2
	bfi	x10, x11, #4, #60
	b	.LBB492_10
.LBB492_7:                              // %"$10"
	ldp	w10, w9, [x8]
	bfi	x10, x9, #32, #32
	ldp	w9, w11, [x10, #-4]
	bfi	x9, x11, #32, #32
	tst	x9, #0xf000000000000000
	b.eq	.LBB492_9
// %bb.8:                               // %"$15"
	ldp	w8, w9, [x8]
	bfi	x8, x9, #32, #32
	add	x9, x8, #4                      // =4
	mov	w10, #2
	b	.LBB492_10
.LBB492_9:                              // %"$14"
	mov	w10, #2
	bfi	x10, x9, #4, #60
	mov	x9, x8
.LBB492_10:                             // %"$9.sink.split"
	lsr	x8, x10, #32
	stp	w10, w8, [x9]
.LBB492_11:                             // %"$8"
	ldr	x0, [sp, #8]
	add	sp, sp, #16                     // =16
	ret
.Lfunc_end492:
	.size	zapZero, .Lfunc_end492-zapZero
	.cfi_endproc
                                        // -- End function
	.globl	pairErr                         // -- Begin function pairErr
	.p2align	4
	.type	pairErr,@function
pairErr:                                // @pairErr
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	adrp	x2, .L$118
	add	x2, x2, :lo12:.L$118
	mov	x3, xzr
	bl	err
.Lfunc_end493:
	.size	pairErr, .Lfunc_end493-pairErr
	.cfi_endproc
                                        // -- End function
	.globl	lstErr                          // -- Begin function lstErr
	.p2align	4
	.type	lstErr,@function
lstErr:                                 // @lstErr
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	adrp	x2, .L$119
	add	x2, x2, :lo12:.L$119
	mov	x3, xzr
	bl	err
.Lfunc_end494:
	.size	lstErr, .Lfunc_end494-lstErr
	.cfi_endproc
                                        // -- End function
	.globl	_putStdout                      // -- Begin function _putStdout
	.p2align	4
	.type	_putStdout,@function
_putStdout:                             // @_putStdout
	.cfi_startproc
// %bb.0:                               // %"$1"
	mov	w8, #20544
	movk	w8, #65057, lsl #16
.LBB495_1:                              // %"$2"
                                        // =>This Inner Loop Header: Depth=1
	ldrb	w9, [x8, #20]
	tbz	w9, #5, .LBB495_1
// %bb.2:                               // %"$4"
	and	w9, w0, #0xff
	str	w9, [x8]
	ret
.Lfunc_end495:
	.size	_putStdout, .Lfunc_end495-_putStdout
	.cfi_endproc
                                        // -- End function
	.globl	trace                           // -- Begin function trace
	.p2align	4
	.type	trace,@function
trace:                                  // @trace
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-32]!                // 8-byte Folded Spill
	stp	x20, x19, [sp, #16]             // 16-byte Folded Spill
	.cfi_def_cfa_offset 32
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w30, -32
	mov	x19, x1
	cmp	w0, #65                         // =65
	mov	w8, #64
	csel	w8, w0, w8, lt
	sub	w20, w8, #1                     // =1
	tbnz	w20, #31, .LBB496_2
.LBB496_1:                              // %"$5"
                                        // =>This Inner Loop Header: Depth=1
	bl	space
	sub	w20, w20, #1                    // =1
	tbz	w20, #31, .LBB496_1
.LBB496_2:                              // %"$6"
	tst	x19, #0xf
	b.ne	.LBB496_4
// %bb.3:                               // %"$8"
	ldp	w0, w8, [x19]
	bfi	x0, x8, #32, #32
	bl	print
	bl	space
	ldp	w0, w8, [x19, #8]
	bfi	x0, x8, #32, #32
	bl	print
	bl	space
	adrp	x8, SymTab+424
	ldr	x19, [x8, :lo12:SymTab+424]
.LBB496_4:                              // %"$9"
	mov	x0, x19
	bl	print
	ldp	x20, x19, [sp, #16]             // 16-byte Folded Reload
	ldr	x30, [sp], #32                  // 8-byte Folded Reload
	ret
.Lfunc_end496:
	.size	trace, .Lfunc_end496-trace
	.cfi_endproc
                                        // -- End function
	.globl	pushOutFile                     // -- Begin function pushOutFile
	.p2align	4
	.type	pushOutFile,@function
pushOutFile:                            // @pushOutFile
	.cfi_startproc
// %bb.0:                               // %"$1"
	adrp	x8, env+56
	ldr	x10, [x8, :lo12:env+56]
	str	x10, [x0]
	adrp	x9, ($Put)
	cbz	x10, .LBB497_2
// %bb.1:                               // %"$2"
	ldr	x11, [x9, :lo12:($Put)]
	str	x11, [x10, #16]
.LBB497_2:                              // %"$3"
	adrp	x10, ($OutFile)
	str	x1, [x10, :lo12:($OutFile)]
	adrp	x10, _putStdout
	add	x10, x10, :lo12:_putStdout
	str	x10, [x9, :lo12:($Put)]
	str	x1, [x0, #8]
	str	w2, [x0, #24]
	str	x0, [x8, :lo12:env+56]
	ret
.Lfunc_end497:
	.size	pushOutFile, .Lfunc_end497-pushOutFile
	.cfi_endproc
                                        // -- End function
	.globl	pushInFile                      // -- Begin function pushInFile
	.p2align	4
	.type	pushInFile,@function
pushInFile:                             // @pushInFile
	.cfi_startproc
// %bb.0:                               // %"$1"
	adrp	x9, ($InFile)
	ldr	x10, [x9, :lo12:($InFile)]
	adrp	x8, ($Chr)
	cbz	x10, .LBB498_2
// %bb.1:                               // %"$2"
	ldr	w11, [x8, :lo12:($Chr)]
	str	w11, [x10, #12]
.LBB498_2:                              // %"$3"
	adrp	x10, env+48
	ldr	x12, [x10, :lo12:env+48]
	str	x12, [x0]
	adrp	x11, ($Get)
	cbz	x12, .LBB498_4
// %bb.3:                               // %"$4"
	ldr	x13, [x11, :lo12:($Get)]
	str	x13, [x12, #16]
.LBB498_4:                              // %"$5"
	adrp	x12, _getStdin
	add	x12, x12, :lo12:_getStdin
	str	x12, [x11, :lo12:($Get)]
	str	x1, [x9, :lo12:($InFile)]
	str	x1, [x0, #8]
	ldr	w9, [x1, #12]
	str	w9, [x8, :lo12:($Chr)]
	str	w2, [x0, #24]
	str	x0, [x10, :lo12:env+48]
	ret
.Lfunc_end498:
	.size	pushInFile, .Lfunc_end498-pushInFile
	.cfi_endproc
                                        // -- End function
	.globl	brkLoad                         // -- Begin function brkLoad
	.p2align	4
	.type	brkLoad,@function
brkLoad:                                // @brkLoad
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-48]!           // 16-byte Folded Spill
	str	x21, [sp, #16]                  // 8-byte Folded Spill
	stp	x20, x19, [sp, #32]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 48
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -32
	.cfi_offset w30, -40
	.cfi_offset w29, -48
	mov	x19, x0
	bl	isatty
	cbz	w0, .LBB499_3
// %bb.1:                               // %"$3"
	bl	isatty
	cbz	w0, .LBB499_3
// %bb.2:                               // %"$4"
	adrp	x8, env+16
	ldr	x8, [x8, :lo12:env+16]
	cmp	x8, #0                          // =0
	cset	w8, eq
	cbnz	w8, .LBB499_4
	b	.LBB499_5
.LBB499_3:
	mov	w8, wzr
	cbz	w8, .LBB499_5
.LBB499_4:                              // %"$5"
	adrp	x21, env+8
	add	x21, x21, :lo12:env+8
	adrp	x20, SymTab+8
	add	x20, x20, :lo12:SymTab+8
	ldr	x8, [x21]
	add	x9, x20, #368                   // =368
	ldr	x10, [x20, #368]
	mov	x11, sp
	sub	x12, x11, #32                   // =32
	mov	sp, x12
	lsr	x13, x10, #32
	lsr	x14, x9, #32
	stp	w10, w13, [x11, #-32]
	stp	w9, w14, [x11, #-24]
	lsr	x9, x8, #32
	stp	w8, w9, [x11, #-16]
	add	x8, x20, #624                   // =624
	ldr	x9, [x20, #624]
	stp	wzr, wzr, [x11, #-8]
	mov	x10, sp
	sub	x11, x10, #32                   // =32
	mov	sp, x11
	lsr	x13, x9, #32
	stp	w9, w13, [x10, #-32]
	lsr	x9, x8, #32
	stp	w8, w9, [x10, #-24]
	lsr	x8, x12, #32
	stp	w12, w8, [x10, #-16]
	add	x8, x20, #512                   // =512
	ldr	x9, [x20, #512]
	str	x19, [x20, #624]
	mov	x10, sp
	sub	x12, x10, #32                   // =32
	mov	sp, x12
	lsr	x13, x9, #32
	lsr	x14, x8, #32
	stp	w9, w13, [x10, #-32]
	stp	w8, w14, [x10, #-24]
	lsr	x8, x11, #32
	stp	w11, w8, [x10, #-16]
	stp	x12, x12, [x21]
	str	x20, [x20, #512]
	sub	x0, sp, #32                     // =32
	mov	sp, x0
	adrp	x8, ($OutFiles)
	ldr	x8, [x8, :lo12:($OutFiles)]
	ldr	x1, [x8, #8]
	mov	w2, wzr
	bl	pushOutFile
	mov	x0, x19
	bl	print
	bl	newline
	adrp	x1, .L$190
	add	x1, x1, :lo12:.L$190
	mov	x0, xzr
	mov	x2, x20
	bl	repl
	bl	popOutFiles
	bl	tosOutFile
	ldr	x19, [x20, #624]
	ldr	x8, [x21]
	ldp	w10, w9, [x8]
	bfi	x10, x9, #32, #32
	str	x10, [x20, #512]
	ldp	w8, w9, [x8, #16]
	bfi	x8, x9, #32, #32
	ldp	w10, w9, [x8]
	bfi	x10, x9, #32, #32
	str	x10, [x20, #624]
	ldp	w8, w9, [x8, #16]
	bfi	x8, x9, #32, #32
	ldp	w10, w9, [x8]
	bfi	x10, x9, #32, #32
	str	x10, [x20, #368]
	ldp	w8, w9, [x8, #16]
	bfi	x8, x9, #32, #32
	stp	x8, xzr, [x21]
.LBB499_5:                              // %"$6"
	mov	x0, x19
	mov	sp, x29
	ldp	x20, x19, [sp, #32]             // 16-byte Folded Reload
	ldr	x21, [sp, #16]                  // 8-byte Folded Reload
	ldp	x29, x30, [sp], #48             // 16-byte Folded Reload
	ret
.Lfunc_end499:
	.size	brkLoad, .Lfunc_end499-brkLoad
	.cfi_endproc
                                        // -- End function
	.globl	isatty                          // -- Begin function isatty
	.p2align	4
	.type	isatty,@function
isatty:                                 // @isatty
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	adrp	x0, .L$15
	add	x0, x0, :lo12:.L$15
	bl	"pr-libc"
	mov	w0, wzr
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end500:
	.size	isatty, .Lfunc_end500-isatty
	.cfi_endproc
                                        // -- End function
	.globl	repl                            // -- Begin function repl
	.p2align	4
	.type	repl,@function
repl:                                   // @repl
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-96]!           // 16-byte Folded Spill
	stp	x28, x27, [sp, #16]             // 16-byte Folded Spill
	stp	x26, x25, [sp, #32]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #48]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #64]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #80]             // 16-byte Folded Spill
	mov	x29, sp
	sub	sp, sp, #64                     // =64
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	mov	x20, x2
	mov	x21, x0
	tst	x2, #0x6
	b.ne	.LBB501_38
// %bb.1:                               // %"$3"
	mov	x19, x1
	tbz	w20, #3, .LBB501_5
// %bb.2:                               // %"$5"
	mov	x0, x20
	bl	firstByte
	and	w8, w0, #0xff
	cmp	w8, #45                         // =45
	cset	w8, eq
	adrp	x22, env
	cbnz	w8, .LBB501_6
.LBB501_3:                              // %"$7"
	adrp	x28, SymTab+8
	add	x28, x28, :lo12:SymTab+8
	cmp	x20, x28
	b.ne	.LBB501_7
// %bb.4:                               // %"$10"
	adrp	x8, ($Repl)
	ldrb	w8, [x8, :lo12:($Repl)]
	eor	w8, w8, #0x1
	tbnz	w8, #0, .LBB501_8
	b	.LBB501_9
.LBB501_5:
	mov	w8, wzr
	adrp	x22, env
	cbz	w8, .LBB501_3
.LBB501_6:                              // %"$6"
	mov	x0, x21
	mov	x1, x20
	bl	xName
	mov	w1, #1
	mov	w2, #23818
	mov	x3, xzr
	bl	parse
	ldr	x8, [x22, :lo12:env]
	mov	x9, sp
	sub	x19, x9, #16                    // =16
	mov	sp, x19
	lsr	x10, x0, #32
	lsr	x11, x8, #32
	stp	w0, w10, [x9, #-16]
	stp	w8, w11, [x9, #-8]
	str	x19, [x22, :lo12:env]
	bl	evList
	mov	x23, x0
	b	.LBB501_37
.LBB501_7:
	mov	w8, wzr
	tbz	w8, #0, .LBB501_9
.LBB501_8:                              // %"$11"
	adrp	x8, ($Repl)
	mov	w9, #1
	strb	w9, [x8, :lo12:($Repl)]
	bl	iSignal
.LBB501_9:                              // %"$12"
	adrp	x8, env
	add	x8, x8, :lo12:env
	ldr	x13, [x8, #88]
	ldr	x9, [x8]
	mov	x10, sp
	sub	x12, x10, #16                   // =16
	mov	sp, x12
	lsr	x11, x13, #32
	stp	w13, w11, [x10, #-16]
	stp	x13, x12, [x29, #-24]           // 16-byte Folded Spill
	lsr	x11, x9, #32
	stp	w9, w11, [x10, #-8]
	ldr	x13, [x28, #104]
	str	x12, [x8]
	mov	x9, sp
	sub	x10, x9, #16                    // =16
	mov	sp, x10
	lsr	x11, x13, #32
	stp	w13, w11, [x9, #-16]
	stur	x13, [x29, #-32]                // 8-byte Folded Spill
	lsr	x11, x12, #32
	stp	w12, w11, [x9, #-8]
	ldr	x13, [x28, #112]
	str	x10, [x8]
	mov	x9, sp
	sub	x11, x9, #16                    // =16
	mov	sp, x11
	lsr	x12, x13, #32
	stp	w13, w12, [x9, #-16]
	stur	x13, [x29, #-40]                // 8-byte Folded Spill
	lsr	x12, x10, #32
	adrp	x14, gcData
	add	x14, x14, :lo12:gcData
	stp	w10, w12, [x9, #-8]
	ldr	x13, [x14]
	str	x11, [x8]
	mov	x9, sp
	sub	x10, x9, #16                    // =16
	mov	sp, x10
	lsr	x12, x13, #32
	stp	w13, w12, [x9, #-16]
	stur	x13, [x29, #-48]                // 8-byte Folded Spill
	lsr	x12, x11, #32
	stp	w11, w12, [x9, #-8]
	ldr	x15, [x14, #8]
	str	x10, [x8]
	mov	x9, sp
	sub	x11, x9, #16                    // =16
	mov	sp, x11
	lsr	x12, x15, #32
	lsr	x13, x10, #32
	stp	w15, w12, [x9, #-16]
	stur	x15, [x29, #-56]                // 8-byte Folded Spill
	stp	w10, w13, [x9, #-8]
	str	x11, [x8]
	mov	x9, sp
	sub	x26, x9, #16                    // =16
	mov	sp, x26
	mov	w10, #10
	stp	w10, wzr, [x9, #-16]
	ldr	x11, [x8]
	lsr	x12, x11, #32
	stp	w11, w12, [x9, #-8]
	str	x26, [x8]
	mov	x9, sp
	sub	x11, x9, #16                    // =16
	mov	sp, x11
	stp	w10, wzr, [x9, #-16]
	mov	w25, #1
	adrp	x21, ($LinePrmt)
	ldr	x10, [x8]
	stur	x11, [x29, #-8]                 // 8-byte Folded Spill
	str	x11, [x8]
	adrp	x20, ($ContPrmt)
	adrp	x22, ($Chr)
	adrp	x27, ($Get)
	lsr	x8, x10, #32
	stp	w10, w8, [x9, #-8]
	stp	x28, x28, [x28, #104]
	stp	x28, x28, [x14]
	mov	x23, x28
	b	.LBB501_12
.LBB501_10:                             // %"$36"
                                        //   in Loop: Header=BB501_12 Depth=1
	adrp	x8, SymTab+376
	ldr	x23, [x8, :lo12:SymTab+376]
	lsr	x8, x23, #32
	ldur	x9, [x29, #-8]                  // 8-byte Folded Reload
	stp	w23, w8, [x9]
	tst	x24, #0x6
	b.eq	.LBB501_32
.LBB501_11:                             // %"$43"
                                        //   in Loop: Header=BB501_12 Depth=1
	adrp	x9, SymTab+376
	add	x9, x9, :lo12:SymTab+376
	ldr	x8, [x9, #16]
	str	x8, [x9, #32]
	str	x23, [x9, #16]
	str	x24, [x9]
	adrp	x0, .L$161
	add	x0, x0, :lo12:.L$161
	bl	outString
	mov	x0, x24
	bl	print
	bl	newline
	mov	x23, x24
.LBB501_12:                             // %"$13"
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB501_14 Depth 2
                                        //     Child Loop BB501_19 Depth 2
	ldr	x0, [x28, #432]
	bl	runAt
	eor	w8, w0, #0x8
	tst	x8, #0xe
	cset	w8, ne
	cmp	x0, x28
	csel	w9, w25, w8, eq
	mov	x24, x19
	tbnz	w9, #0, .LBB501_17
// %bb.13:                              // %"$17"
                                        //   in Loop: Header=BB501_12 Depth=1
	sub	x8, x0, #8                      // =8
.LBB501_14:                             // %"$19"
                                        //   Parent Loop BB501_12 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	w24, w9, [x8]
	bfi	x24, x9, #32, #32
	tst	x24, #0x6
	b.ne	.LBB501_16
// %bb.15:                              // %"$20"
                                        //   in Loop: Header=BB501_14 Depth=2
	add	x8, x24, #8                     // =8
	b	.LBB501_14
.LBB501_16:                             // %"$21"
                                        //   in Loop: Header=BB501_12 Depth=1
	mov	x0, x24
	bl	bufSize
	mov	x25, x0
	mov	x0, x24
	adrp	x24, ($ReplPrmt)
	add	x24, x24, :lo12:($ReplPrmt)
	mov	x1, x24
	bl	bufString
	add	x8, x25, x24
	mov	w25, #1
	sub	x0, x8, #1                      // =1
	mov	x1, x19
	bl	cpyString
.LBB501_17:                             // %"$18"
                                        //   in Loop: Header=BB501_12 Depth=1
	str	x24, [x21, :lo12:($LinePrmt)]
	adrp	x0, .L$159
	add	x0, x0, :lo12:.L$159
	bl	outString
	adrp	x8, .L$160
	add	x8, x8, :lo12:.L$160
	str	x8, [x20, :lo12:($ContPrmt)]
	mov	w0, #10
	bl	read1
	mov	x24, x0
	str	xzr, [x20, :lo12:($ContPrmt)]
	str	xzr, [x21, :lo12:($LinePrmt)]
	b	.LBB501_19
.LBB501_18:                             // %"$27"
                                        //   in Loop: Header=BB501_19 Depth=2
	bl	comment
.LBB501_19:                             // %"$22"
                                        //   Parent Loop BB501_12 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	w8, [x22, :lo12:($Chr)]
	cmp	w8, #1                          // =1
	b.lt	.LBB501_25
// %bb.20:                              // %"$23"
                                        //   in Loop: Header=BB501_19 Depth=2
	ldr	w8, [x22, :lo12:($Chr)]
	cmp	w8, #10                         // =10
	b.eq	.LBB501_24
// %bb.21:                              // %"$25"
                                        //   in Loop: Header=BB501_19 Depth=2
	ldr	w8, [x22, :lo12:($Chr)]
	cmp	w8, #35                         // =35
	b.eq	.LBB501_18
// %bb.22:                              // %"$28"
                                        //   in Loop: Header=BB501_19 Depth=2
	ldr	w8, [x22, :lo12:($Chr)]
	cmp	w8, #32                         // =32
	b.gt	.LBB501_25
// %bb.23:                              // %"$30"
                                        //   in Loop: Header=BB501_19 Depth=2
	ldr	x8, [x27, :lo12:($Get)]
	blr	x8
	b	.LBB501_19
.LBB501_24:                             // %"$26"
                                        //   in Loop: Header=BB501_12 Depth=1
	str	wzr, [x22, :lo12:($Chr)]
.LBB501_25:                             // %"$24"
                                        //   in Loop: Header=BB501_12 Depth=1
	cmp	x24, x28
	b.eq	.LBB501_36
// %bb.26:                              // %"$31"
                                        //   in Loop: Header=BB501_12 Depth=1
	lsr	x8, x24, #32
	stp	w24, w8, [x26]
	ldr	w8, [x22, :lo12:($Chr)]
	cbz	w8, .LBB501_28
// %bb.27:                              //   in Loop: Header=BB501_12 Depth=1
	mov	w8, #1
	cbz	w8, .LBB501_10
	b	.LBB501_29
.LBB501_28:                             // %"$34"
                                        //   in Loop: Header=BB501_12 Depth=1
	cmp	x19, #0                         // =0
	cset	w8, eq
	cbz	w8, .LBB501_10
.LBB501_29:                             // %"$35"
                                        //   in Loop: Header=BB501_12 Depth=1
	tst	x24, #0x6
	mov	x23, x24
	b.ne	.LBB501_12
// %bb.30:                              // %"$39"
                                        //   in Loop: Header=BB501_12 Depth=1
	tbz	w24, #3, .LBB501_34
// %bb.31:                              // %"$42"
                                        //   in Loop: Header=BB501_12 Depth=1
	ldp	w23, w8, [x24]
	bfi	x23, x8, #32, #32
	b	.LBB501_12
.LBB501_32:                             // %"$44"
                                        //   in Loop: Header=BB501_12 Depth=1
	tbz	w24, #3, .LBB501_35
// %bb.33:                              // %"$47"
                                        //   in Loop: Header=BB501_12 Depth=1
	ldp	w24, w8, [x24]
	bfi	x24, x8, #32, #32
	b	.LBB501_11
.LBB501_34:                             // %"$41"
                                        //   in Loop: Header=BB501_12 Depth=1
	mov	x0, x24
	bl	evList
	mov	x23, x0
	b	.LBB501_12
.LBB501_35:                             // %"$46"
                                        //   in Loop: Header=BB501_12 Depth=1
	mov	x0, x24
	bl	evList
	mov	x24, x0
	b	.LBB501_11
.LBB501_36:                             // %"$32"
	adrp	x8, gcData
	add	x8, x8, :lo12:gcData
	ldur	x10, [x29, #-56]                // 8-byte Folded Reload
	ldur	x9, [x29, #-48]                 // 8-byte Folded Reload
	stp	x9, x10, [x8]
	adrp	x8, SymTab+112
	add	x8, x8, :lo12:SymTab+112
	ldur	x10, [x29, #-40]                // 8-byte Folded Reload
	ldur	x9, [x29, #-32]                 // 8-byte Folded Reload
	stp	x9, x10, [x8]
	adrp	x8, env+88
	ldp	x9, x19, [x29, #-24]            // 16-byte Folded Reload
	str	x9, [x8, :lo12:env+88]
	adrp	x22, env
.LBB501_37:                             // %"$8"
	ldp	w9, w8, [x19, #8]
	bfi	x9, x8, #32, #32
	str	x9, [x22, :lo12:env]
	mov	x0, x23
	mov	sp, x29
	ldp	x20, x19, [sp, #80]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #64]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #48]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #32]             // 16-byte Folded Reload
	ldp	x28, x27, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #96             // 16-byte Folded Reload
	ret
.LBB501_38:                             // %"$2"
	mov	x0, x21
	mov	x1, x20
	bl	argErr
.Lfunc_end501:
	.size	repl, .Lfunc_end501-repl
	.cfi_endproc
                                        // -- End function
	.globl	parse                           // -- Begin function parse
	.p2align	4
	.type	parse,@function
parse:                                  // @parse
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-96]!           // 16-byte Folded Spill
	stp	x28, x27, [sp, #16]             // 16-byte Folded Spill
	stp	x26, x25, [sp, #32]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #48]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #64]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #80]             // 16-byte Folded Spill
	mov	x29, sp
	sub	sp, sp, #48                     // =48
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	mov	x19, x3
	adrp	x22, ($Chr)
	ldr	w23, [x22, :lo12:($Chr)]
	str	wzr, [x22, :lo12:($Chr)]
	adrp	x25, ($Get)
	adrp	x24, env
	add	x24, x24, :lo12:env
	ldr	x26, [x25, :lo12:($Get)]
	adrp	x8, getParse
	add	x8, x8, :lo12:getParse
	str	x8, [x25, :lo12:($Get)]
	ldr	x8, [x24]
	sub	x9, x29, #16                    // =16
	str	x9, [x24]
	stp	xzr, x0, [x29, #-48]
	stp	x0, x8, [x29, #-16]
	ldr	x27, [x24, #80]
	stur	x2, [x29, #-32]
	sub	x8, x29, #48                    // =48
	str	x8, [x24, #80]
	tbz	w1, #0, .LBB502_2
// %bb.1:                               // %"$2"
	bl	getParse
.LBB502_2:                              // %"$3"
	cbz	x19, .LBB502_5
// %bb.3:                               // %"$5"
	cmp	x19, #1                         // =1
	b.ne	.LBB502_8
// %bb.4:                               // %"$8"
	mov	w0, #1
	bl	read0
	b	.LBB502_6
.LBB502_5:                              // %"$6"
	bl	rdList
.LBB502_6:                              // %"$4"
	mov	x20, x0
.LBB502_7:                              // %"$4"
	str	x27, [x24, #80]
	str	x26, [x25, :lo12:($Get)]
	str	w23, [x22, :lo12:($Chr)]
	ldur	x8, [x29, #-8]
	str	x8, [x24]
	mov	x0, x20
	mov	sp, x29
	ldp	x20, x19, [sp, #80]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #64]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #48]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #32]             // 16-byte Folded Reload
	ldp	x28, x27, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #96             // 16-byte Folded Reload
	ret
.LBB502_8:                              // %"$7"
	mov	x0, x19
	mov	w1, wzr
	bl	token
	cbz	x0, .LBB502_12
// %bb.9:                               // %"$9"
	adrp	x21, SymTab+8
	add	x21, x21, :lo12:SymTab+8
	mov	x1, x21
	bl	cons
	mov	x20, x0
	adrp	x8, env
	ldr	x9, [x8, :lo12:env]
	mov	x10, sp
	sub	x11, x10, #16                   // =16
	mov	sp, x11
	lsr	x12, x0, #32
	lsr	x13, x9, #32
	stp	w20, w12, [x10, #-16]
	stp	w9, w13, [x10, #-8]
	mov	x28, x0
	str	x11, [x8, :lo12:env]
.LBB502_10:                             // %"$11"
                                        // =>This Inner Loop Header: Depth=1
	mov	x0, x19
	mov	w1, wzr
	bl	token
	cbz	x0, .LBB502_7
// %bb.11:                              // %"$12"
                                        //   in Loop: Header=BB502_10 Depth=1
	mov	x1, x21
	bl	cons
	lsr	x8, x0, #32
	stp	w0, w8, [x28, #8]
	mov	x28, x0
	b	.LBB502_10
.LBB502_12:
	adrp	x20, SymTab+8
	add	x20, x20, :lo12:SymTab+8
	b	.LBB502_7
.Lfunc_end502:
	.size	parse, .Lfunc_end502-parse
	.cfi_endproc
                                        // -- End function
	.globl	sig                             // -- Begin function sig
	.p2align	4
	.type	sig,@function
sig:                                    // @sig
	.cfi_startproc
// %bb.0:                               // %"$1"
	mov	x8, xzr
	//APP
	msr	CNTV_CTL_EL0, x8
	//NO_APP
	adrp	x8, ($Signal)
	mov	w9, #1
	str	w9, [x8, :lo12:($Signal)]
	ret
.Lfunc_end503:
	.size	sig, .Lfunc_end503-sig
	.cfi_endproc
                                        // -- End function
	.globl	iSignal                         // -- Begin function iSignal
	.p2align	4
	.type	iSignal,@function
iSignal:                                // @iSignal
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	adrp	x0, .L$80
	add	x0, x0, :lo12:.L$80
	bl	"pr-libc"
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end504:
	.size	iSignal, .Lfunc_end504-iSignal
	.cfi_endproc
                                        // -- End function
	.globl	runAt                           // -- Begin function runAt
	.p2align	4
	.type	runAt,@function
runAt:                                  // @runAt
	.cfi_startproc
// %bb.0:                               // %"$1"
	sub	sp, sp, #64                     // =64
	stp	x22, x21, [sp, #32]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #48]             // 16-byte Folded Spill
	.cfi_def_cfa_offset 64
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w30, -48
	mov	x19, x0
	adrp	x20, SymTab+376
	adrp	x21, env
	ldr	x22, [x20, :lo12:SymTab+376]
	ldr	x8, [x21, :lo12:env]
	str	x22, [sp]
	stp	x8, x30, [sp, #8]               // 8-byte Folded Spill
	mov	x8, sp
	str	x8, [x21, :lo12:env]
.LBB505_1:                              // %"$2"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w0, w8, [x19]
	bfi	x0, x8, #32, #32
	ldp	w19, w8, [x19, #8]
	bfi	x19, x8, #32, #32
	tst	x19, #0xf
	b.ne	.LBB505_4
// %bb.2:                               // %"$3"
                                        //   in Loop: Header=BB505_1 Depth=1
	tst	x0, #0xf
	b.ne	.LBB505_1
// %bb.3:                               // %"$12"
                                        //   in Loop: Header=BB505_1 Depth=1
	bl	evList
	b	.LBB505_1
.LBB505_4:                              // %"$5"
	tst	x0, #0x6
	b.ne	.LBB505_8
// %bb.5:                               // %"$7"
	tbz	w0, #3, .LBB505_7
// %bb.6:                               // %"$10"
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB505_8
.LBB505_7:                              // %"$9"
	bl	evList
.LBB505_8:                              // %"$4"
	str	x22, [x20, :lo12:SymTab+376]
	ldp	x8, x30, [sp, #8]               // 8-byte Folded Reload
	str	x8, [x21, :lo12:env]
	ldp	x20, x19, [sp, #48]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #32]             // 16-byte Folded Reload
	add	sp, sp, #64                     // =64
	ret
.Lfunc_end505:
	.size	runAt, .Lfunc_end505-runAt
	.cfi_endproc
                                        // -- End function
	.globl	bufSize                         // -- Begin function bufSize
	.p2align	4
	.type	bufSize,@function
bufSize:                                // @bufSize
	.cfi_startproc
// %bb.0:                               // %"$1"
	mov	x8, x0
	mov	w0, #1
	tbz	w8, #2, .LBB506_2
.LBB506_1:                              // %"$3"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w8, w9, [x8, #4]
	bfi	x8, x9, #32, #32
	add	x0, x0, #8                      // =8
	tbnz	w8, #2, .LBB506_1
.LBB506_2:                              // %"$4"
	lsr	x8, x8, #4
	cbz	x8, .LBB506_4
.LBB506_3:                              // %"$6"
                                        // =>This Inner Loop Header: Depth=1
	lsr	x8, x8, #8
	add	x0, x0, #1                      // =1
	cbnz	x8, .LBB506_3
.LBB506_4:                              // %"$7"
	ret
.Lfunc_end506:
	.size	bufSize, .Lfunc_end506-bufSize
	.cfi_endproc
                                        // -- End function
	.globl	bufString                       // -- Begin function bufString
	.p2align	4
	.type	bufString,@function
bufString:                              // @bufString
	.cfi_startproc
// %bb.0:                               // %"$1"
	sub	sp, sp, #48                     // =48
	stp	x0, x30, [sp, #8]               // 8-byte Folded Spill
	stp	x20, x19, [sp, #32]             // 16-byte Folded Spill
	.cfi_def_cfa_offset 48
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w30, -32
	mov	x19, x1
	str	xzr, [sp]
	mov	x20, x1
.LBB507_1:                              // %"$2"
                                        // =>This Inner Loop Header: Depth=1
	mov	x0, sp
	bl	symByte
	tst	w0, #0xff
	strb	w0, [x20]
	b.eq	.LBB507_3
// %bb.2:                               // %"$3"
                                        //   in Loop: Header=BB507_1 Depth=1
	add	x20, x20, #1                    // =1
	b	.LBB507_1
.LBB507_3:                              // %"$4"
	mov	x0, x19
	ldp	x20, x19, [sp, #32]             // 16-byte Folded Reload
	ldr	x30, [sp, #16]                  // 8-byte Folded Reload
	add	sp, sp, #48                     // =48
	ret
.Lfunc_end507:
	.size	bufString, .Lfunc_end507-bufString
	.cfi_endproc
                                        // -- End function
	.globl	cpyString                       // -- Begin function cpyString
	.p2align	4
	.type	cpyString,@function
cpyString:                              // @cpyString
	.cfi_startproc
// %bb.0:                               // %"$1"
	ldrb	w8, [x1]
	cbz	w8, .LBB508_2
.LBB508_1:                              // %"$3"
                                        // =>This Inner Loop Header: Depth=1
	ldrb	w8, [x1], #1
	strb	w8, [x0], #1
	ldrb	w8, [x1]
	cbnz	w8, .LBB508_1
.LBB508_2:                              // %"$4"
	ret
.Lfunc_end508:
	.size	cpyString, .Lfunc_end508-cpyString
	.cfi_endproc
                                        // -- End function
	.globl	token                           // -- Begin function token
	.p2align	4
	.type	token,@function
token:                                  // @token
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-80]!           // 16-byte Folded Spill
	str	x25, [sp, #16]                  // 8-byte Folded Spill
	stp	x24, x23, [sp, #32]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #48]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #64]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 80
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -64
	.cfi_offset w30, -72
	.cfi_offset w29, -80
	mov	w19, w1
	mov	x20, x0
	adrp	x21, ($Chr)
	ldr	w8, [x21, :lo12:($Chr)]
	cbnz	w8, .LBB509_2
// %bb.1:                               // %"$2"
	adrp	x8, ($Get)
	ldr	x8, [x8, :lo12:($Get)]
	blr	x8
.LBB509_2:                              // %"$3"
	mov	w0, w19
	bl	skipc
	tbnz	w0, #31, .LBB509_6
// %bb.3:                               // %"$5"
	mov	w19, w0
	cmp	w0, #34                         // =34
	b.ne	.LBB509_7
// %bb.4:                               // %"$8"
	adrp	x22, ($Get)
	ldr	x8, [x22, :lo12:($Get)]
	blr	x8
	cmp	w0, #34                         // =34
	b.ne	.LBB509_13
// %bb.5:                               // %"$11"
	ldr	x8, [x22, :lo12:($Get)]
	blr	x8
	b	.LBB509_18
.LBB509_6:
	mov	x19, xzr
	b	.LBB509_42
.LBB509_7:                              // %"$7"
	cmp	w19, #57                        // =57
	b.gt	.LBB509_19
// %bb.8:                               // %"$20"
	cmp	w19, #47                        // =47
	cset	w8, gt
	cbnz	w8, .LBB509_20
.LBB509_9:                              // %"$21"
	mov	x0, xzr
	mov	x1, x20
	bl	xName
	mov	x20, x0
	bl	bufSize
	add	x8, x0, #15                     // =15
	and	x8, x8, #0xfffffffffffffff0
	mov	x9, sp
	sub	x1, x9, x8
	mov	sp, x1
	mov	x0, x20
	bl	bufString
	mov	x20, x0
	cmp	w19, #43                        // =43
	b.eq	.LBB509_11
// %bb.10:                              // %"$31"
	cmp	w19, #45                        // =45
	b.ne	.LBB509_25
.LBB509_11:
	mov	w8, #1
	cbz	w8, .LBB509_29
.LBB509_12:                             // %"$41"
	mov	w0, w19
	bl	getChar
	bl	mkChar
	mov	x19, x0
	adrp	x8, ($Get)
	ldr	x8, [x8, :lo12:($Get)]
	blr	x8
	b	.LBB509_42
.LBB509_13:                             // %"$10"
	bl	testEsc
	tbz	w0, #0, .LBB509_18
// %bb.14:                              // %"$12"
	ldr	w0, [x21, :lo12:($Chr)]
	bl	mkChar
	adrp	x20, SymTab+8
	add	x20, x20, :lo12:SymTab+8
	mov	x1, x20
	bl	cons
	mov	x19, x0
	adrp	x23, env
	ldr	x8, [x23, :lo12:env]
	mov	x9, sp
	sub	x24, x9, #16                    // =16
	mov	sp, x24
	lsr	x10, x0, #32
	lsr	x11, x8, #32
	stp	w19, w10, [x9, #-16]
	stp	w8, w11, [x9, #-8]
	mov	x25, x0
	str	x24, [x23, :lo12:env]
.LBB509_15:                             // %"$14"
                                        // =>This Inner Loop Header: Depth=1
	ldr	x8, [x22, :lo12:($Get)]
	blr	x8
	cmp	w0, #34                         // =34
	b.eq	.LBB509_23
// %bb.16:                              // %"$15"
                                        //   in Loop: Header=BB509_15 Depth=1
	bl	testEsc
	tbz	w0, #0, .LBB509_24
// %bb.17:                              // %"$18"
                                        //   in Loop: Header=BB509_15 Depth=1
	ldr	w0, [x21, :lo12:($Chr)]
	bl	mkChar
	mov	x1, x20
	bl	cons
	lsr	x8, x0, #32
	stp	w0, w8, [x25, #8]
	mov	x25, x0
	b	.LBB509_15
.LBB509_18:
	adrp	x19, SymTab+8
	add	x19, x19, :lo12:SymTab+8
	b	.LBB509_42
.LBB509_19:
	mov	w8, wzr
	cbz	w8, .LBB509_9
.LBB509_20:                             // %"$22"
	mov	x8, sp
	sub	x20, x8, #32                    // =32
	mov	sp, x20
	stur	wzr, [x8, #-12]
	adrp	x21, env
	ldr	x9, [x21, :lo12:env]
	mov	w10, #4
	mov	w11, #2
	mov	x12, x20
	stp	w10, wzr, [x8, #-32]
	str	w11, [x12, #16]!
	lsr	x10, x9, #32
	stp	w9, w10, [x8, #-8]
	str	x12, [x21, :lo12:env]
	adrp	x22, ($Get)
	mov	w23, #1
.LBB509_21:                             // %"$23"
                                        // =>This Inner Loop Header: Depth=1
	mov	w0, w19
	mov	x1, x20
	bl	byteSym
	ldr	x8, [x22, :lo12:($Get)]
	blr	x8
	mov	w19, w0
	cmp	w0, #57                         // =57
	cset	w8, gt
	cmp	w0, #48                         // =48
	csel	w8, w23, w8, lt
	cmp	w0, #46                         // =46
	csel	w8, wzr, w8, eq
	cbz	w8, .LBB509_21
// %bb.22:                              // %"$29"
	ldp	w0, w8, [x20, #16]
	bfi	x0, x8, #32, #32
	adrp	x8, SymTab+488
	ldr	x8, [x8, :lo12:SymTab+488]
	lsr	x1, x8, #4
	mov	w2, #46
	mov	w3, wzr
	bl	symToNum
	mov	x19, x0
	ldp	w9, w8, [x20, #24]
	bfi	x9, x8, #32, #32
	str	x9, [x21, :lo12:env]
	b	.LBB509_42
.LBB509_23:                             // %"$17"
	ldr	x8, [x22, :lo12:($Get)]
	blr	x8
.LBB509_24:                             // %"$16"
	ldp	w9, w8, [x24, #8]
	bfi	x9, x8, #32, #32
	str	x9, [x23, :lo12:env]
	b	.LBB509_42
.LBB509_25:                             // %"$32"
	cmp	w19, #92                        // =92
	b.eq	.LBB509_28
// %bb.26:                              // %"$34"
	cmp	w19, #123                       // =123
	cset	w8, lt
	cmp	w19, #96                        // =96
	cset	w9, gt
	and	w8, w8, w9
	tbnz	w8, #0, .LBB509_28
// %bb.27:                              // %"$37"
	cmp	w19, #91                        // =91
	cset	w8, lt
	cmp	w19, #64                        // =64
	cset	w9, gt
	and	w8, w8, w9
	tbz	w8, #0, .LBB509_43
.LBB509_28:
	mov	w8, #1
	eor	w8, w8, #0x1
	cbnz	w8, .LBB509_12
.LBB509_29:                             // %"$42"
	cmp	w19, #92                        // =92
	b.ne	.LBB509_31
// %bb.30:                              // %"$44"
	adrp	x8, ($Get)
	ldr	x8, [x8, :lo12:($Get)]
	blr	x8
.LBB509_31:                             // %"$45"
	mov	x8, sp
	sub	x21, x8, #32                    // =32
	mov	sp, x21
	stur	wzr, [x8, #-12]
	adrp	x22, env
	ldr	x9, [x22, :lo12:env]
	mov	w10, #4
	mov	w11, #2
	mov	x12, x21
	stp	w10, wzr, [x8, #-32]
	str	w11, [x12, #16]!
	lsr	x10, x9, #32
	stp	w9, w10, [x8, #-8]
	str	x12, [x22, :lo12:env]
	adrp	x23, ($Get)
	mov	w24, #1
.LBB509_32:                             // %"$46"
                                        // =>This Inner Loop Header: Depth=1
	mov	w0, w19
	mov	x1, x21
	bl	byteSym
	ldr	x8, [x23, :lo12:($Get)]
	blr	x8
	mov	w19, w0
	cmp	w0, #92                         // =92
	b.eq	.LBB509_35
// %bb.33:                              // %"$49"
                                        //   in Loop: Header=BB509_32 Depth=1
	cmp	w19, #123                       // =123
	cset	w8, lt
	cmp	w19, #96                        // =96
	cset	w9, gt
	and	w8, w8, w9
	tbnz	w8, #0, .LBB509_35
// %bb.34:                              // %"$52"
                                        //   in Loop: Header=BB509_32 Depth=1
	cmp	w19, #91                        // =91
	cset	w8, lt
	cmp	w19, #64                        // =64
	cset	w9, gt
	and	w8, w8, w9
	tbz	w8, #0, .LBB509_37
.LBB509_35:                             //   in Loop: Header=BB509_32 Depth=1
	mov	w8, #1
	cbz	w8, .LBB509_38
.LBB509_36:                             //   in Loop: Header=BB509_32 Depth=1
	mov	w8, wzr
	tbz	w8, #0, .LBB509_39
	b	.LBB509_41
.LBB509_37:                             // %"$55"
                                        //   in Loop: Header=BB509_32 Depth=1
	mov	x0, x20
	mov	w1, w19
	bl	strchr2
	cmp	x0, #0                          // =0
	cset	w8, ne
	cbnz	w8, .LBB509_36
.LBB509_38:                             // %"$56"
                                        //   in Loop: Header=BB509_32 Depth=1
	cmp	w19, #57                        // =57
	cset	w8, gt
	cmp	w19, #48                        // =48
	csel	w8, w24, w8, lt
	tbnz	w8, #0, .LBB509_41
.LBB509_39:                             // %"$59"
                                        //   in Loop: Header=BB509_32 Depth=1
	cmp	w19, #92                        // =92
	b.ne	.LBB509_32
// %bb.40:                              // %"$61"
                                        //   in Loop: Header=BB509_32 Depth=1
	ldr	x8, [x23, :lo12:($Get)]
	blr	x8
	b	.LBB509_32
.LBB509_41:                             // %"$60"
	ldp	w0, w8, [x21, #16]
	bfi	x0, x8, #32, #32
	bl	requestSym
	mov	x19, x0
	ldp	w9, w8, [x21, #24]
	bfi	x9, x8, #32, #32
	str	x9, [x22, :lo12:env]
.LBB509_42:                             // %"$4"
	mov	x0, x19
	mov	sp, x29
	ldp	x20, x19, [sp, #64]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #48]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #32]             // 16-byte Folded Reload
	ldr	x25, [sp, #16]                  // 8-byte Folded Reload
	ldp	x29, x30, [sp], #80             // 16-byte Folded Reload
	ret
.LBB509_43:                             // %"$40"
	mov	x0, x20
	mov	w1, w19
	bl	strchr2
	cmp	x0, #0                          // =0
	cset	w8, ne
	eor	w8, w8, #0x1
	cbz	w8, .LBB509_29
	b	.LBB509_12
.Lfunc_end509:
	.size	token, .Lfunc_end509-token
	.cfi_endproc
                                        // -- End function
	.globl	skipc                           // -- Begin function skipc
	.p2align	4
	.type	skipc,@function
skipc:                                  // @skipc
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-32]!                // 8-byte Folded Spill
	stp	x20, x19, [sp, #16]             // 16-byte Folded Spill
	.cfi_def_cfa_offset 32
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w30, -32
	mov	w19, w0
	adrp	x8, ($Chr)
	ldr	w0, [x8, :lo12:($Chr)]
	adrp	x20, ($Get)
	cmp	w0, #32                         // =32
	b.gt	.LBB510_3
.LBB510_1:                              // %"$4"
                                        // =>This Inner Loop Header: Depth=1
	ldr	x8, [x20, :lo12:($Get)]
	blr	x8
	tbnz	w0, #31, .LBB510_7
// %bb.2:                               // %"$3"
                                        //   in Loop: Header=BB510_1 Depth=1
	cmp	w0, #32                         // =32
	b.le	.LBB510_1
.LBB510_3:                              // %"$5"
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB510_4 Depth 2
	cmp	w0, w19
	b.ne	.LBB510_7
.LBB510_4:                              // %"$10"
                                        //   Parent Loop BB510_3 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	x8, [x20, :lo12:($Get)]
	blr	x8
	cmp	w0, #10                         // =10
	b.eq	.LBB510_6
// %bb.5:                               // %"$11"
                                        //   in Loop: Header=BB510_4 Depth=2
	tbz	w0, #31, .LBB510_4
	b	.LBB510_7
.LBB510_6:                              // %"$12"
                                        //   in Loop: Header=BB510_3 Depth=1
	ldr	x8, [x20, :lo12:($Get)]
	blr	x8
	cmp	w0, #32                         // =32
	b.le	.LBB510_1
	b	.LBB510_3
.LBB510_7:                              // %"$6"
	ldp	x20, x19, [sp, #16]             // 16-byte Folded Reload
	ldr	x30, [sp], #32                  // 8-byte Folded Reload
	ret
.Lfunc_end510:
	.size	skipc, .Lfunc_end510-skipc
	.cfi_endproc
                                        // -- End function
	.globl	mkChar                          // -- Begin function mkChar
	.p2align	4
	.type	mkChar,@function
mkChar:                                 // @mkChar
	.cfi_startproc
// %bb.0:                               // %"$1"
                                        // kill: def $w0 killed $w0 def $x0
	cmp	w0, #127                        // =127
	b.gt	.LBB511_2
// %bb.1:                               // %"$4"
	sxtw	x8, w0
	b	.LBB511_9
.LBB511_2:                              // %"$3"
	cmp	w0, #272, lsl #12               // =1114112
	b.ne	.LBB511_4
// %bb.3:
	mov	w8, #255
	b	.LBB511_9
.LBB511_4:                              // %"$5"
	cmp	w0, #2047                       // =2047
	b.gt	.LBB511_6
// %bb.5:                               // %"$8"
	ubfx	w8, w0, #6, #5
	and	w9, w0, #0x3f
	bfi	w8, w9, #8, #6
	mov	w9, #32960
	orr	w8, w8, w9
	b	.LBB511_9
.LBB511_6:                              // %"$7"
	cmp	w0, #16, lsl #12                // =65536
	b.ge	.LBB511_8
// %bb.7:                               // %"$10"
	ubfx	w8, w0, #12, #4
	ubfx	w9, w0, #6, #6
	bfi	w8, w9, #8, #6
	and	w9, w0, #0x3f
	bfi	w8, w9, #16, #6
	mov	w9, #32992
	movk	w9, #128, lsl #16
	orr	w8, w8, w9
	b	.LBB511_9
.LBB511_8:                              // %"$9"
	ubfx	w8, w0, #18, #3
	ubfx	w9, w0, #12, #6
	bfi	w8, w9, #8, #6
	ubfx	w9, w0, #6, #6
	bfi	w8, w9, #16, #6
	mov	w9, #33008
	movk	w9, #128, lsl #16
	orr	w8, w8, w9
	and	x9, x0, #0x3f
	bfi	x8, x9, #24, #6
	orr	x8, x8, #0x80000000
.LBB511_9:                              // %"$2"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	mov	w0, #2
	bfi	x0, x8, #4, #60
	bl	consStr
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end511:
	.size	mkChar, .Lfunc_end511-mkChar
	.cfi_endproc
                                        // -- End function
	.globl	reentErr                        // -- Begin function reentErr
	.p2align	4
	.type	reentErr,@function
reentErr:                               // @reentErr
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	adrp	x2, .L$185
	add	x2, x2, :lo12:.L$185
	mov	x3, xzr
	bl	err
.Lfunc_end512:
	.size	reentErr, .Lfunc_end512-reentErr
	.cfi_endproc
                                        // -- End function
	.globl	saveCoEnv                       // -- Begin function saveCoEnv
	.p2align	4
	.type	saveCoEnv,@function
saveCoEnv:                              // @saveCoEnv
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	adrp	x8, SymTab+376
	ldr	x8, [x8, :lo12:SymTab+376]
	lsr	x9, x8, #32
	stp	w8, w9, [x0, #48]
	adrp	x1, env
	add	x1, x1, :lo12:env
	ldr	x8, [x1, #56]
	adrp	x9, ($Put)
	ldr	x9, [x9, :lo12:($Put)]
	str	x9, [x8, #16]
	ldr	x8, [x1, #48]
	adrp	x9, ($Get)
	ldr	x9, [x9, :lo12:($Get)]
	str	x9, [x8, #16]
	ldr	x8, [x8, #8]
	adrp	x9, ($Chr)
	ldr	w9, [x9, :lo12:($Chr)]
	str	w9, [x8, #12]
	add	x0, x0, #112                    // =112
	mov	w2, #152
	bl	memcpy2
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end513:
	.size	saveCoEnv, .Lfunc_end513-saveCoEnv
	.cfi_endproc
                                        // -- End function
	.globl	loadCoEnv                       // -- Begin function loadCoEnv
	.p2align	4
	.type	loadCoEnv,@function
loadCoEnv:                              // @loadCoEnv
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x30, x19, [sp, #-16]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w19, -8
	.cfi_offset w30, -16
	mov	x19, x0
	adrp	x0, env
	add	x0, x0, :lo12:env
	str	x19, [x0, #32]
	ldr	x8, [x19, #40]
	add	x8, x8, #1, lsl #12             // =4096
	adrp	x9, ($StkLimit)
	str	x8, [x9, :lo12:($StkLimit)]
	add	x1, x19, #112                   // =112
	mov	w2, #152
	bl	memcpy2
	bl	tosInFile
	bl	tosOutFile
	ldr	w8, [x19, #48]!
	ldr	w9, [x19, #4]
	bfi	x8, x9, #32, #32
	adrp	x9, SymTab+376
	str	x8, [x9, :lo12:SymTab+376]
	stp	wzr, wzr, [x19]
	adrp	x8, ($Ret)
	ldr	x0, [x8, :lo12:($Ret)]
	ldp	x30, x19, [sp], #16             // 16-byte Folded Reload
	ret
.Lfunc_end514:
	.size	loadCoEnv, .Lfunc_end514-loadCoEnv
	.cfi_endproc
                                        // -- End function
	.globl	setDestruct                     // -- Begin function setDestruct
	.p2align	4
	.type	setDestruct,@function
setDestruct:                            // @setDestruct
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x30, x21, [sp, #-32]!           // 16-byte Folded Spill
	stp	x20, x19, [sp, #16]             // 16-byte Folded Spill
	.cfi_def_cfa_offset 32
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w30, -32
	mov	x20, x1
	mov	x19, x0
	adrp	x21, SymTab+8
	add	x21, x21, :lo12:SymTab+8
	b	.LBB515_3
.LBB515_1:                              // %"$6"
                                        //   in Loop: Header=BB515_3 Depth=1
	bl	setDestruct
.LBB515_2:                              // %"$7"
                                        //   in Loop: Header=BB515_3 Depth=1
	tst	x19, #0xf
	b.ne	.LBB515_6
.LBB515_3:                              // %"$2"
                                        // =>This Inner Loop Header: Depth=1
	tst	x20, #0xf
	csel	x8, x20, x21, eq
	ldp	w0, w9, [x19]
	bfi	x0, x9, #32, #32
	ldp	w19, w9, [x19, #8]
	bfi	x19, x9, #32, #32
	ldp	w1, w9, [x8]
	bfi	x1, x9, #32, #32
	ldp	w20, w9, [x8, #8]
	bfi	x20, x9, #32, #32
	tst	x0, #0xf
	b.eq	.LBB515_1
// %bb.4:                               // %"$5"
                                        //   in Loop: Header=BB515_3 Depth=1
	cmp	x0, x21
	b.eq	.LBB515_2
// %bb.5:                               // %"$8"
                                        //   in Loop: Header=BB515_3 Depth=1
	lsr	x8, x1, #32
	stp	w1, w8, [x0]
	b	.LBB515_2
.LBB515_6:                              // %"$12"
	cmp	x19, x21
	b.eq	.LBB515_8
// %bb.7:                               // %"$13"
	lsr	x8, x20, #32
	stp	w20, w8, [x19]
.LBB515_8:                              // %"$11"
	ldp	x20, x19, [sp, #16]             // 16-byte Folded Reload
	ldp	x30, x21, [sp], #32             // 16-byte Folded Reload
	ret
.Lfunc_end515:
	.size	setDestruct, .Lfunc_end515-setDestruct
	.cfi_endproc
                                        // -- End function
	.globl	loop1                           // -- Begin function loop1
	.p2align	4
	.type	loop1,@function
loop1:                                  // @loop1
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-48]!                // 8-byte Folded Spill
	stp	x22, x21, [sp, #16]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #32]             // 16-byte Folded Spill
	.cfi_def_cfa_offset 48
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w30, -48
	mov	x19, x0
	adrp	x20, SymTab+8
	add	x20, x20, :lo12:SymTab+8
	adrp	x21, SymTab+216
	add	x21, x21, :lo12:SymTab+216
	b	.LBB516_3
.LBB516_1:                              // %"$7"
                                        //   in Loop: Header=BB516_3 Depth=1
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
.LBB516_2:                              // %"$4"
                                        //   in Loop: Header=BB516_3 Depth=1
	ldp	w19, w8, [x19, #8]
	bfi	x19, x8, #32, #32
	tst	x19, #0xf
	b.ne	.LBB516_23
.LBB516_3:                              // %"$2"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w0, w8, [x19]
	bfi	x0, x8, #32, #32
	tst	x0, #0x6
	b.ne	.LBB516_2
// %bb.4:                               // %"$3"
                                        //   in Loop: Header=BB516_3 Depth=1
	tbnz	w0, #3, .LBB516_1
// %bb.5:                               // %"$6"
                                        //   in Loop: Header=BB516_3 Depth=1
	ldp	w9, w8, [x0]
	bfi	x9, x8, #32, #32
	cmp	x9, x20
	b.ne	.LBB516_9
// %bb.6:                               // %"$9"
                                        //   in Loop: Header=BB516_3 Depth=1
	ldp	w22, w8, [x0, #8]
	bfi	x22, x8, #32, #32
	ldp	w0, w8, [x22]
	bfi	x0, x8, #32, #32
	tst	x0, #0x6
	b.ne	.LBB516_16
// %bb.7:                               // %"$11"
                                        //   in Loop: Header=BB516_3 Depth=1
	tbz	w0, #3, .LBB516_15
// %bb.8:                               // %"$14"
                                        //   in Loop: Header=BB516_3 Depth=1
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB516_16
.LBB516_9:                              // %"$8"
                                        //   in Loop: Header=BB516_3 Depth=1
	ldp	w9, w8, [x0]
	bfi	x9, x8, #32, #32
	cmp	x9, x21
	b.ne	.LBB516_14
// %bb.10:                              // %"$30"
                                        //   in Loop: Header=BB516_3 Depth=1
	ldp	w22, w8, [x0, #8]
	bfi	x22, x8, #32, #32
	ldp	w0, w8, [x22]
	bfi	x0, x8, #32, #32
	tst	x0, #0x6
	b.ne	.LBB516_13
// %bb.11:                              // %"$32"
                                        //   in Loop: Header=BB516_3 Depth=1
	tbz	w0, #3, .LBB516_18
// %bb.12:                              // %"$35"
                                        //   in Loop: Header=BB516_3 Depth=1
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
.LBB516_13:                             // %"$31"
                                        //   in Loop: Header=BB516_3 Depth=1
	cmp	x0, x20
	b.eq	.LBB516_2
	b	.LBB516_19
.LBB516_14:                             // %"$29"
                                        //   in Loop: Header=BB516_3 Depth=1
	bl	evList
	b	.LBB516_2
.LBB516_15:                             // %"$13"
                                        //   in Loop: Header=BB516_3 Depth=1
	bl	evList
.LBB516_16:                             // %"$10"
                                        //   in Loop: Header=BB516_3 Depth=1
	cmp	x0, x20
	b.eq	.LBB516_25
// %bb.17:                              // %"$15"
                                        //   in Loop: Header=BB516_3 Depth=1
	str	x0, [x20, #368]
	mov	x0, x20
	b	.LBB516_2
.LBB516_18:                             // %"$34"
                                        //   in Loop: Header=BB516_3 Depth=1
	bl	evList
	cmp	x0, x20
	b.eq	.LBB516_2
.LBB516_19:                             // %"$37"
	adrp	x8, SymTab+376
	str	x0, [x8, :lo12:SymTab+376]
	ldp	w19, w8, [x22, #8]
	bfi	x19, x8, #32, #32
.LBB516_20:                             // %"$38"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w0, w8, [x19]
	bfi	x0, x8, #32, #32
	ldp	w19, w8, [x19, #8]
	bfi	x19, x8, #32, #32
	tst	x19, #0xf
	b.ne	.LBB516_32
// %bb.21:                              // %"$39"
                                        //   in Loop: Header=BB516_20 Depth=1
	tst	x0, #0xf
	b.ne	.LBB516_20
// %bb.22:                              // %"$48"
                                        //   in Loop: Header=BB516_20 Depth=1
	bl	evList
	b	.LBB516_20
.LBB516_23:                             // %"$50"
	orr	x0, x0, #0x1
.LBB516_24:                             // %"$16"
	ldp	x20, x19, [sp, #32]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #16]             // 16-byte Folded Reload
	ldr	x30, [sp], #48                  // 8-byte Folded Reload
	ret
.LBB516_25:                             // %"$17"
	ldp	w19, w8, [x22, #8]
	bfi	x19, x8, #32, #32
.LBB516_26:                             // %"$18"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w0, w8, [x19]
	bfi	x0, x8, #32, #32
	ldp	w19, w8, [x19, #8]
	bfi	x19, x8, #32, #32
	tst	x19, #0xf
	b.ne	.LBB516_29
// %bb.27:                              // %"$19"
                                        //   in Loop: Header=BB516_26 Depth=1
	tst	x0, #0xf
	b.ne	.LBB516_26
// %bb.28:                              // %"$28"
                                        //   in Loop: Header=BB516_26 Depth=1
	bl	evList
	b	.LBB516_26
.LBB516_29:                             // %"$21"
	tst	x0, #0x6
	b.ne	.LBB516_24
// %bb.30:                              // %"$23"
	tbz	w0, #3, .LBB516_34
.LBB516_31:                             // %"$26"
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB516_24
.LBB516_32:                             // %"$41"
	tst	x0, #0x6
	b.ne	.LBB516_24
// %bb.33:                              // %"$43"
	tbnz	w0, #3, .LBB516_31
.LBB516_34:                             // %"$25"
	bl	evList
	b	.LBB516_24
.Lfunc_end516:
	.size	loop1, .Lfunc_end516-loop1
	.cfi_endproc
                                        // -- End function
	.globl	loop2                           // -- Begin function loop2
	.p2align	4
	.type	loop2,@function
loop2:                                  // @loop2
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-64]!                // 8-byte Folded Spill
	stp	x24, x23, [sp, #16]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #32]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #48]             // 16-byte Folded Spill
	.cfi_def_cfa_offset 64
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w30, -64
	mov	x19, x0
	adrp	x21, SymTab+8
	add	x21, x21, :lo12:SymTab+8
	adrp	x20, SymTab+376
	mov	x23, x0
	adrp	x22, SymTab+216
	add	x22, x22, :lo12:SymTab+216
.LBB517_1:                              // %"$3"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w0, w8, [x23]
	bfi	x0, x8, #32, #32
	tst	x0, #0xf
	b.ne	.LBB517_14
// %bb.2:                               // %"$4"
                                        //   in Loop: Header=BB517_1 Depth=1
	ldp	w9, w8, [x0]
	bfi	x9, x8, #32, #32
	cmp	x9, x21
	b.ne	.LBB517_8
// %bb.3:                               // %"$8"
                                        //   in Loop: Header=BB517_1 Depth=1
	ldp	w24, w8, [x0, #8]
	bfi	x24, x8, #32, #32
	ldp	w0, w8, [x24]
	bfi	x0, x8, #32, #32
	tst	x0, #0x6
	b.ne	.LBB517_6
// %bb.4:                               // %"$10"
                                        //   in Loop: Header=BB517_1 Depth=1
	tbz	w0, #3, .LBB517_16
// %bb.5:                               // %"$13"
                                        //   in Loop: Header=BB517_1 Depth=1
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
.LBB517_6:                              // %"$9"
                                        //   in Loop: Header=BB517_1 Depth=1
	cmp	x0, x21
	b.eq	.LBB517_22
.LBB517_7:                              // %"$15"
                                        //   in Loop: Header=BB517_1 Depth=1
	str	x0, [x20, :lo12:SymTab+376]
	b	.LBB517_14
.LBB517_8:                              // %"$7"
                                        //   in Loop: Header=BB517_1 Depth=1
	ldp	w9, w8, [x0]
	bfi	x9, x8, #32, #32
	cmp	x9, x22
	b.ne	.LBB517_13
// %bb.9:                               // %"$28"
                                        //   in Loop: Header=BB517_1 Depth=1
	ldp	w24, w8, [x0, #8]
	bfi	x24, x8, #32, #32
	ldp	w0, w8, [x24]
	bfi	x0, x8, #32, #32
	tst	x0, #0x6
	b.ne	.LBB517_12
// %bb.10:                              // %"$30"
                                        //   in Loop: Header=BB517_1 Depth=1
	tbz	w0, #3, .LBB517_17
// %bb.11:                              // %"$33"
                                        //   in Loop: Header=BB517_1 Depth=1
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
.LBB517_12:                             // %"$29"
                                        //   in Loop: Header=BB517_1 Depth=1
	cmp	x0, x21
	b.eq	.LBB517_14
	b	.LBB517_18
.LBB517_13:                             // %"$27"
                                        //   in Loop: Header=BB517_1 Depth=1
	bl	evList
.LBB517_14:                             // %"$5"
                                        //   in Loop: Header=BB517_1 Depth=1
	ldp	w23, w8, [x23, #8]
	bfi	x23, x8, #32, #32
	tst	x23, #0xf
	b.eq	.LBB517_1
// %bb.15:                              // %"$48"
                                        //   in Loop: Header=BB517_1 Depth=1
	mov	x23, x19
	b	.LBB517_1
.LBB517_16:                             // %"$12"
                                        //   in Loop: Header=BB517_1 Depth=1
	bl	evList
	cmp	x0, x21
	b.ne	.LBB517_7
	b	.LBB517_22
.LBB517_17:                             // %"$32"
                                        //   in Loop: Header=BB517_1 Depth=1
	bl	evList
	cmp	x0, x21
	b.eq	.LBB517_14
.LBB517_18:                             // %"$34"
	str	x0, [x20, :lo12:SymTab+376]
	ldp	w19, w8, [x24, #8]
	bfi	x19, x8, #32, #32
.LBB517_19:                             // %"$36"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w0, w8, [x19]
	bfi	x0, x8, #32, #32
	ldp	w19, w8, [x19, #8]
	bfi	x19, x8, #32, #32
	tst	x19, #0xf
	b.ne	.LBB517_29
// %bb.20:                              // %"$37"
                                        //   in Loop: Header=BB517_19 Depth=1
	tst	x0, #0xf
	b.ne	.LBB517_19
// %bb.21:                              // %"$46"
                                        //   in Loop: Header=BB517_19 Depth=1
	bl	evList
	b	.LBB517_19
.LBB517_22:                             // %"$14"
	ldp	w19, w8, [x24, #8]
	bfi	x19, x8, #32, #32
.LBB517_23:                             // %"$16"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w0, w8, [x19]
	bfi	x0, x8, #32, #32
	ldp	w19, w8, [x19, #8]
	bfi	x19, x8, #32, #32
	tst	x19, #0xf
	b.ne	.LBB517_26
// %bb.24:                              // %"$17"
                                        //   in Loop: Header=BB517_23 Depth=1
	tst	x0, #0xf
	b.ne	.LBB517_23
// %bb.25:                              // %"$26"
                                        //   in Loop: Header=BB517_23 Depth=1
	bl	evList
	b	.LBB517_23
.LBB517_26:                             // %"$19"
	tst	x0, #0x6
	b.ne	.LBB517_32
// %bb.27:                              // %"$21"
	tbz	w0, #3, .LBB517_31
.LBB517_28:                             // %"$24"
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB517_32
.LBB517_29:                             // %"$39"
	tst	x0, #0x6
	b.ne	.LBB517_32
// %bb.30:                              // %"$41"
	tbnz	w0, #3, .LBB517_28
.LBB517_31:                             // %"$23"
	bl	evList
.LBB517_32:                             // %"$18"
	ldp	x20, x19, [sp, #48]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #32]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #16]             // 16-byte Folded Reload
	ldr	x30, [sp], #64                  // 8-byte Folded Reload
	ret
.Lfunc_end517:
	.size	loop2, .Lfunc_end517-loop2
	.cfi_endproc
                                        // -- End function
	.globl	extra                           // -- Begin function extra
	.p2align	4
	.type	extra,@function
extra:                                  // @extra
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-48]!                // 8-byte Folded Spill
	stp	x22, x21, [sp, #16]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #32]             // 16-byte Folded Spill
	.cfi_def_cfa_offset 48
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w30, -48
	mov	x19, x1
.LBB518_1:                              // %"$2"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w20, w8, [x0]
	bfi	x20, x8, #32, #32
	ldrb	w8, [x20]
	tst	w8, #0xf
	b.ne	.LBB518_3
// %bb.2:                               // %"$3"
                                        //   in Loop: Header=BB518_1 Depth=1
	add	x0, x20, #8                     // =8
	b	.LBB518_1
.LBB518_3:
	adrp	x21, env+104
	adrp	x22, ($StkLimit)
	tst	x20, #0xf
	b.ne	.LBB518_9
.LBB518_4:                              // %"$6"
                                        // =>This Inner Loop Header: Depth=1
	ldr	x8, [x21, :lo12:env+104]
	cmp	x20, x8
	b.eq	.LBB518_10
// %bb.5:                               // %"$9"
                                        //   in Loop: Header=BB518_4 Depth=1
	mov	x8, sp
	ldr	x9, [x22, :lo12:($StkLimit)]
	cmp	x9, x8
	b.hi	.LBB518_18
// %bb.6:                               // %"$18"
                                        //   in Loop: Header=BB518_4 Depth=1
	ldp	w0, w8, [x20]
	bfi	x0, x8, #32, #32
	mov	x1, x19
	bl	extra
	cmp	x0, #0                          // =0
	b.gt	.LBB518_17
// %bb.7:                               // %"$19"
                                        //   in Loop: Header=BB518_4 Depth=1
	cbz	x0, .LBB518_13
// %bb.8:                               // %"$21"
                                        //   in Loop: Header=BB518_4 Depth=1
	ldp	w20, w8, [x20, #8]
	bfi	x20, x8, #32, #32
	tst	x20, #0xf
	b.eq	.LBB518_4
.LBB518_9:
	mov	x0, #-1
	b	.LBB518_17
.LBB518_10:                             // %"$11.preheader"
	adrp	x21, ($Ret)
.LBB518_11:                             // %"$11"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w20, w8, [x20, #8]
	bfi	x20, x8, #32, #32
	tst	x20, #0xf
	b.ne	.LBB518_16
// %bb.12:                              // %"$12"
                                        //   in Loop: Header=BB518_11 Depth=1
	str	x20, [x21, :lo12:($Ret)]
	ldp	w0, w8, [x20]
	bfi	x0, x8, #32, #32
	mov	x1, x19
	bl	method
	cbz	x0, .LBB518_11
	b	.LBB518_17
.LBB518_13:                             // %"$23.preheader"
	adrp	x21, ($Ret)
.LBB518_14:                             // %"$23"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w20, w8, [x20, #8]
	bfi	x20, x8, #32, #32
	tst	x20, #0xf
	b.ne	.LBB518_16
// %bb.15:                              // %"$24"
                                        //   in Loop: Header=BB518_14 Depth=1
	str	x20, [x21, :lo12:($Ret)]
	ldp	w0, w8, [x20]
	bfi	x0, x8, #32, #32
	mov	x1, x19
	bl	method
	cbz	x0, .LBB518_14
	b	.LBB518_17
.LBB518_16:
	mov	x0, xzr
.LBB518_17:                             // %"$7"
	ldp	x20, x19, [sp, #32]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #16]             // 16-byte Folded Reload
	ldr	x30, [sp], #48                  // 8-byte Folded Reload
	ret
.LBB518_18:                             // %"$17"
	mov	x0, xzr
	bl	stkErr
.Lfunc_end518:
	.size	extra, .Lfunc_end518-extra
	.cfi_endproc
                                        // -- End function
	.globl	method                          // -- Begin function method
	.p2align	4
	.type	method,@function
method:                                 // @method
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x30, x21, [sp, #-32]!           // 16-byte Folded Spill
	stp	x20, x19, [sp, #16]             // 16-byte Folded Spill
	.cfi_def_cfa_offset 32
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w30, -32
	ldp	w20, w8, [x0]
	bfi	x20, x8, #32, #32
	tst	x20, #0xf
	b.eq	.LBB519_3
.LBB519_1:                              // %"$9"
	mov	x0, xzr
.LBB519_2:                              // %"$14"
	ldp	x20, x19, [sp, #16]             // 16-byte Folded Reload
	ldp	x30, x21, [sp], #32             // 16-byte Folded Reload
	ret
.LBB519_3:                              // %"$4.preheader"
	mov	x19, x1
.LBB519_4:                              // %"$4"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w8, w9, [x20]
	bfi	x8, x9, #32, #32
	tst	x8, #0xf
	b.ne	.LBB519_7
// %bb.5:                               // %"$5"
                                        //   in Loop: Header=BB519_4 Depth=1
	ldp	w10, w9, [x8]
	bfi	x10, x9, #32, #32
	cmp	x19, x10
	b.eq	.LBB519_11
// %bb.6:                               // %"$8"
                                        //   in Loop: Header=BB519_4 Depth=1
	ldp	w20, w8, [x20, #8]
	bfi	x20, x8, #32, #32
	tst	x20, #0xf
	b.eq	.LBB519_4
	b	.LBB519_1
.LBB519_7:                              // %"$6"
	mov	x8, sp
	adrp	x9, ($StkLimit)
	ldr	x9, [x9, :lo12:($StkLimit)]
	cmp	x9, x8
	b.hi	.LBB519_12
// %bb.8:
	adrp	x21, ($Ret)
.LBB519_9:                              // %"$13"
                                        // =>This Inner Loop Header: Depth=1
	str	x20, [x21, :lo12:($Ret)]
	ldp	w0, w8, [x20]
	bfi	x0, x8, #32, #32
	mov	x1, x19
	bl	method
	cbnz	x0, .LBB519_2
// %bb.10:                              // %"$15"
                                        //   in Loop: Header=BB519_9 Depth=1
	ldp	w20, w8, [x20, #8]
	bfi	x20, x8, #32, #32
	tst	x20, #0xf
	b.eq	.LBB519_9
	b	.LBB519_1
.LBB519_11:                             // %"$7"
	ldp	w0, w9, [x8, #8]
	bfi	x0, x9, #32, #32
	b	.LBB519_2
.LBB519_12:                             // %"$11"
	mov	x0, xzr
	bl	stkErr
.Lfunc_end519:
	.size	method, .Lfunc_end519-method
	.cfi_endproc
                                        // -- End function
	.globl	isLife                          // -- Begin function isLife
	.p2align	4
	.type	isLife,@function
isLife:                                 // @isLife
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-48]!           // 16-byte Folded Spill
	str	x21, [sp, #16]                  // 8-byte Folded Spill
	stp	x20, x19, [sp, #32]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 48
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -32
	.cfi_offset w30, -40
	.cfi_offset w29, -48
	ldp	w9, w8, [x0, #-8]
	bfi	x9, x8, #32, #32
	and	x19, x9, #0xfffffffffffffff7
	tst	x19, #0x6
	b.ne	.LBB520_2
.LBB520_1:                              // %"$3"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w19, w8, [x19, #8]
	bfi	x19, x8, #32, #32
	tst	x19, #0x6
	b.eq	.LBB520_1
.LBB520_2:                              // %"$4"
	mov	x0, x19
	bl	objFile
	mov	w20, w0
	mov	x0, x19
	bl	objId
	lsl	x21, x0, #6
	cbz	x21, .LBB520_10
// %bb.3:                               // %"$5"
	adrp	x8, ($DBs)
	ldr	w8, [x8, :lo12:($DBs)]
	cmp	w8, w20
	b.le	.LBB520_7
// %bb.4:                               // %"$9"
	adds	x8, x19, x19
	b.hs	.LBB520_6
// %bb.5:                               // %"$11"
	cmn	x8, x8
	b.lo	.LBB520_8
.LBB520_6:                              // %"$10"
	mov	w0, #1
	b	.LBB520_11
.LBB520_7:                              // %"$8"
	adrp	x8, SymTab+472
	ldrb	w8, [x8, :lo12:SymTab+472]
	tst	w8, #0xf
	cset	w0, eq
	b	.LBB520_11
.LBB520_8:                              // %"$13"
	adrp	x8, ($DbFiles)
	ldr	x8, [x8, :lo12:($DbFiles)]
	mov	w9, #42
	mul	w9, w20, w9
	add	x20, x8, w9, sxtw
	adrp	x8, ($DbFile)
	str	x20, [x8, :lo12:($DbFile)]
	sub	x19, sp, #16                    // =16
	mov	sp, x19
	mov	w0, #6
	mov	x1, x19
	mov	w2, #6
	bl	blkPeek
	mov	x0, x19
	bl	getAdr
	cmp	x0, x21
	b.ls	.LBB520_10
// %bb.9:                               // %"$14"
	ldrsw	x8, [x20, #8]
	lsl	x0, x21, x8
	mov	x1, x19
	mov	w2, #6
	bl	blkPeek
	ldrb	w8, [x19]
	and	w8, w8, #0x3f
	cmp	w8, #1                          // =1
	cset	w0, eq
	b	.LBB520_11
.LBB520_10:                             // %"$6"
	mov	w0, wzr
.LBB520_11:                             // %"$10"
	mov	sp, x29
	ldp	x20, x19, [sp, #32]             // 16-byte Folded Reload
	ldr	x21, [sp, #16]                  // 8-byte Folded Reload
	ldp	x29, x30, [sp], #48             // 16-byte Folded Reload
	ret
.Lfunc_end520:
	.size	isLife, .Lfunc_end520-isLife
	.cfi_endproc
                                        // -- End function
	.globl	evMethod                        // -- Begin function evMethod
	.p2align	4
	.type	evMethod,@function
evMethod:                               // @evMethod
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-96]!           // 16-byte Folded Spill
	stp	x28, x27, [sp, #16]             // 16-byte Folded Spill
	stp	x26, x25, [sp, #32]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #48]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #64]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #80]             // 16-byte Folded Spill
	mov	x29, sp
	sub	sp, sp, #80                     // =80
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	mov	x22, x4
	mov	x19, x3
	mov	x28, x2
	mov	x21, x1
	adrp	x24, env+8
	sub	x26, x29, #32                   // =32
	adrp	x25, SymTab+376
	add	x25, x25, :lo12:SymTab+376
	ldp	w23, w8, [x3]
	mov	x1, x25
	ldr	x9, [x1], #48
	ldr	x10, [x24, :lo12:env+8]
	str	x26, [x24, :lo12:env+8]
	stp	x9, x25, [x29, #-32]
	bfi	x23, x8, #32, #32
	stp	x10, x3, [x29, #-16]
	sub	x8, x29, #64                    // =64
	adrp	x27, SymTab+8
	add	x27, x27, :lo12:SymTab+8
.LBB521_1:                              // %"$2.sink.split"
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB521_2 Depth 2
                                        //       Child Loop BB521_8 Depth 3
	lsr	x9, x0, #32
	lsr	x10, x1, #32
	stp	w0, w9, [x8]
	stp	w1, w10, [x8, #8]
	lsr	x9, x26, #32
	stp	w26, w9, [x8, #16]
	mov	x26, x8
	str	x8, [x24, :lo12:env+8]
.LBB521_2:                              // %"$2"
                                        //   Parent Loop BB521_1 Depth=1
                                        // =>  This Loop Header: Depth=2
                                        //       Child Loop BB521_8 Depth 3
	tst	x23, #0xf
	b.ne	.LBB521_21
// %bb.3:                               // %"$3"
                                        //   in Loop: Header=BB521_2 Depth=2
	ldp	w0, w8, [x22]
	bfi	x0, x8, #32, #32
	ldp	w22, w8, [x22, #8]
	bfi	x22, x8, #32, #32
	tst	x0, #0x6
	b.ne	.LBB521_7
// %bb.4:                               // %"$6"
                                        //   in Loop: Header=BB521_2 Depth=2
	tbz	w0, #3, .LBB521_6
// %bb.5:                               // %"$9"
                                        //   in Loop: Header=BB521_2 Depth=2
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB521_7
.LBB521_6:                              // %"$8"
                                        //   in Loop: Header=BB521_2 Depth=2
	bl	evList
.LBB521_7:                              // %"$5"
                                        //   in Loop: Header=BB521_2 Depth=2
	ldp	w1, w8, [x23]
	bfi	x1, x8, #32, #32
	ldp	w23, w8, [x23, #8]
	bfi	x23, x8, #32, #32
	tst	x1, #0xf
	b.ne	.LBB521_18
.LBB521_8:                              // %"$19"
                                        //   Parent Loop BB521_1 Depth=1
                                        //     Parent Loop BB521_2 Depth=2
                                        // =>    This Inner Loop Header: Depth=3
	tst	x0, #0xf
	b.eq	.LBB521_10
// %bb.9:                               //   in Loop: Header=BB521_8 Depth=3
	mov	x10, x27
	b	.LBB521_11
.LBB521_10:                             // %"$20"
                                        //   in Loop: Header=BB521_8 Depth=3
	ldp	w10, w8, [x0]
	bfi	x10, x8, #32, #32
	ldp	w0, w8, [x0, #8]
	bfi	x0, x8, #32, #32
.LBB521_11:                             // %"$22"
                                        //   in Loop: Header=BB521_8 Depth=3
	ldp	w8, w9, [x1]
	bfi	x8, x9, #32, #32
	tst	x8, #0x6
	b.ne	.LBB521_77
// %bb.12:                              // %"$24"
                                        //   in Loop: Header=BB521_8 Depth=3
	add	x9, x27, #208                   // =208
	cmp	x9, x8
	ccmp	x8, x27, #0, hs
	b.hs	.LBB521_78
// %bb.13:                              // %"$28"
                                        //   in Loop: Header=BB521_8 Depth=3
	ldp	w1, w9, [x1, #8]
	bfi	x1, x9, #32, #32
	mov	x11, sp
	sub	x9, x11, #32                    // =32
	mov	sp, x9
	lsr	x12, x10, #32
	lsr	x13, x8, #32
	stp	w10, w12, [x11, #-32]
	stp	w8, w13, [x11, #-24]
	lsr	x8, x26, #32
	stp	w26, w8, [x11, #-16]
	tst	x1, #0xf
	mov	x26, x9
	str	x9, [x24, :lo12:env+8]
	b.eq	.LBB521_8
// %bb.14:                              // %"$30"
                                        //   in Loop: Header=BB521_2 Depth=2
	cmp	x1, x27
	mov	x26, x9
	b.eq	.LBB521_2
// %bb.15:                              // %"$31"
                                        //   in Loop: Header=BB521_1 Depth=1
	tst	x1, #0x6
	b.ne	.LBB521_79
// %bb.16:                              // %"$34"
                                        //   in Loop: Header=BB521_1 Depth=1
	add	x8, x27, #208                   // =208
	cmp	x8, x1
	ccmp	x1, x27, #0, hs
	b.hs	.LBB521_80
// %bb.17:                              // %"$38"
                                        //   in Loop: Header=BB521_1 Depth=1
	sub	x8, sp, #32                     // =32
	mov	sp, x8
	mov	x26, x9
	b	.LBB521_1
.LBB521_18:                             // %"$10"
                                        //   in Loop: Header=BB521_1 Depth=1
	tst	x1, #0x6
	b.ne	.LBB521_79
// %bb.19:                              // %"$14"
                                        //   in Loop: Header=BB521_1 Depth=1
	add	x8, x27, #208                   // =208
	cmp	x8, x1
	ccmp	x1, x27, #0, hs
	b.hs	.LBB521_80
// %bb.20:                              // %"$18"
                                        //   in Loop: Header=BB521_1 Depth=1
	sub	x8, sp, #32                     // =32
	mov	sp, x8
	b	.LBB521_1
.LBB521_21:                             // %"$4"
	cmp	x23, x25
	b.ne	.LBB521_26
// %bb.22:                              // %"$39"
	tst	x22, #0xf
	b.eq	.LBB521_46
// %bb.23:                              // %"$43"
	adrp	x8, env+96
	ldr	x22, [x8, :lo12:env+96]
	str	x27, [x8, :lo12:env+96]
.LBB521_24:                             // %"$72"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w9, w8, [x26, #8]
	bfi	x9, x8, #32, #32
	ldp	w8, w10, [x9]
	ldp	w12, w11, [x26]
	stp	w12, w11, [x9]
	stp	w8, w10, [x26]
	cmp	x25, x9
	b.eq	.LBB521_39
// %bb.25:                              // %"$73"
                                        //   in Loop: Header=BB521_24 Depth=1
	ldp	w26, w8, [x26, #16]
	bfi	x26, x8, #32, #32
	b	.LBB521_24
.LBB521_26:                             // %"$40"
	cmp	x23, x27
	b.eq	.LBB521_31
// %bb.27:                              // %"$86"
	tst	x23, #0x6
	b.ne	.LBB521_81
// %bb.28:                              // %"$89"
	add	x8, x27, #208                   // =208
	cmp	x8, x23
	ccmp	x23, x27, #0, hs
	b.hs	.LBB521_82
// %bb.29:                              // %"$93"
	ldp	w8, w9, [x23]
	mov	x10, sp
	sub	x11, x10, #32                   // =32
	mov	sp, x11
	stp	w8, w9, [x10, #-32]
	lsr	x8, x23, #32
	stp	w23, w8, [x10, #-24]
	lsr	x8, x26, #32
	stp	w26, w8, [x10, #-16]
	str	x11, [x24, :lo12:env+8]
	lsr	x8, x22, #32
	stp	w22, w8, [x23]
	b	.LBB521_31
.LBB521_30:                             // %"$95"
                                        //   in Loop: Header=BB521_31 Depth=1
	ldp	w26, w8, [x26, #16]
	bfi	x26, x8, #32, #32
.LBB521_31:                             // %"$94"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w9, w8, [x26, #8]
	bfi	x9, x8, #32, #32
	ldp	w8, w10, [x9]
	ldp	w12, w11, [x26]
	stp	w12, w11, [x9]
	stp	w8, w10, [x26]
	cmp	x25, x9
	b.ne	.LBB521_30
// %bb.32:                              // %"$96"
	adrp	x26, env+104
	add	x26, x26, :lo12:env+104
	ldp	x22, x20, [x26]
	stp	x21, x28, [x26]
	ldp	w19, w8, [x19, #8]
	bfi	x19, x8, #32, #32
.LBB521_33:                             // %"$97"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w0, w8, [x19]
	bfi	x0, x8, #32, #32
	ldp	w19, w8, [x19, #8]
	bfi	x19, x8, #32, #32
	tst	x19, #0xf
	b.ne	.LBB521_36
// %bb.34:                              // %"$98"
                                        //   in Loop: Header=BB521_33 Depth=1
	tst	x0, #0xf
	b.ne	.LBB521_33
// %bb.35:                              // %"$107"
                                        //   in Loop: Header=BB521_33 Depth=1
	bl	evList
	b	.LBB521_33
.LBB521_36:                             // %"$100"
	tst	x0, #0x6
	b.ne	.LBB521_52
// %bb.37:                              // %"$102"
	tbz	w0, #3, .LBB521_49
// %bb.38:                              // %"$105"
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB521_52
.LBB521_39:                             // %"$74"
	adrp	x8, env+104
	add	x8, x8, :lo12:env+104
	ldp	x20, x23, [x8]
	stp	x21, x28, [x8]
	ldp	w19, w8, [x19, #8]
	bfi	x19, x8, #32, #32
.LBB521_40:                             // %"$75"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w0, w8, [x19]
	bfi	x0, x8, #32, #32
	ldp	w19, w8, [x19, #8]
	bfi	x19, x8, #32, #32
	tst	x19, #0xf
	b.ne	.LBB521_43
// %bb.41:                              // %"$76"
                                        //   in Loop: Header=BB521_40 Depth=1
	tst	x0, #0xf
	b.ne	.LBB521_40
// %bb.42:                              // %"$85"
                                        //   in Loop: Header=BB521_40 Depth=1
	bl	evList
	b	.LBB521_40
.LBB521_43:                             // %"$78"
	tst	x0, #0x6
	b.ne	.LBB521_51
// %bb.44:                              // %"$80"
	tbz	w0, #3, .LBB521_50
// %bb.45:                              // %"$83"
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB521_51
.LBB521_46:                             // %"$42"
	ldp	w0, w8, [x22]
	bfi	x0, x8, #32, #32
	tst	x0, #0x6
	stur	x28, [x29, #-72]                // 8-byte Folded Spill
	b.ne	.LBB521_58
// %bb.47:                              // %"$46"
	tbz	w0, #3, .LBB521_57
// %bb.48:                              // %"$49"
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB521_58
.LBB521_49:                             // %"$104"
	bl	evList
	b	.LBB521_52
.LBB521_50:                             // %"$82"
	bl	evList
.LBB521_51:                             // %"$77"
	adrp	x26, env+96
	add	x26, x26, :lo12:env+96
	str	x23, [x26, #16]
.LBB521_52:                             // %"$99"
	str	x20, [x26, #8]
.LBB521_53:                             // %"$41"
	lsr	x8, x22, #32
	stp	w22, w8, [x26]
	adrp	x8, env+8
	add	x8, x8, :lo12:env+8
.LBB521_54:                             // %"$108"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w8, w9, [x8]
	bfi	x8, x9, #32, #32
	ldp	w10, w9, [x8, #8]
	bfi	x10, x9, #32, #32
	ldp	w9, w11, [x8]
	stp	w9, w11, [x10]
	cmp	x25, x10
	b.eq	.LBB521_56
// %bb.55:                              // %"$109"
                                        //   in Loop: Header=BB521_54 Depth=1
	add	x8, x8, #16                     // =16
	b	.LBB521_54
.LBB521_56:                             // %"$110"
	ldp	w8, w9, [x8, #16]
	bfi	x8, x9, #32, #32
	str	x8, [x24, :lo12:env+8]
	mov	sp, x29
	ldp	x20, x19, [sp, #80]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #64]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #48]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #32]             // 16-byte Folded Reload
	ldp	x28, x27, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #96             // 16-byte Folded Reload
	ret
.LBB521_57:                             // %"$48"
	bl	evList
.LBB521_58:                             // %"$45"
	mov	x8, sp
	sub	x23, x8, #32                    // =32
	mov	sp, x23
	sub	x8, x8, #24                     // =24
	adrp	x20, env
	mov	x28, x23
	b	.LBB521_61
.LBB521_59:                             // %"$56"
                                        //   in Loop: Header=BB521_61 Depth=1
	mov	x0, x8
	bl	evList
	mov	x8, x0
.LBB521_60:                             // %"$53"
                                        //   in Loop: Header=BB521_61 Depth=1
	mov	x9, sp
	sub	x0, x9, #32                     // =32
	mov	sp, x0
	lsr	x10, x8, #32
	stp	w8, w10, [x9, #-24]
	mov	x8, x28
	mov	x28, x0
.LBB521_61:                             // %"$50"
                                        // =>This Inner Loop Header: Depth=1
	lsr	x9, x0, #32
	stp	w0, w9, [x8]
	add	x8, x28, #8                     // =8
	ldr	x9, [x20, :lo12:env]
	lsr	x10, x9, #32
	stp	w9, w10, [x28, #16]
	str	x8, [x20, :lo12:env]
	ldp	w22, w8, [x22, #8]
	bfi	x22, x8, #32, #32
	tst	x22, #0xf
	b.ne	.LBB521_65
// %bb.62:                              // %"$51"
                                        //   in Loop: Header=BB521_61 Depth=1
	ldp	w8, w9, [x22]
	bfi	x8, x9, #32, #32
	tst	x8, #0x6
	b.ne	.LBB521_60
// %bb.63:                              // %"$54"
                                        //   in Loop: Header=BB521_61 Depth=1
	tbz	w8, #3, .LBB521_59
// %bb.64:                              // %"$57"
                                        //   in Loop: Header=BB521_61 Depth=1
	ldp	w8, w9, [x8]
	bfi	x8, x9, #32, #32
	b	.LBB521_60
.LBB521_65:                             // %"$52"
	adrp	x8, env+96
	ldr	x22, [x8, :lo12:env+96]
	lsr	x9, x27, #32
	stp	w27, w9, [x28]
	str	x23, [x8, :lo12:env+96]
	ldur	x13, [x29, #-72]                // 8-byte Folded Reload
.LBB521_66:                             // %"$58"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w9, w8, [x26, #8]
	bfi	x9, x8, #32, #32
	ldp	w8, w10, [x9]
	ldp	w12, w11, [x26]
	stp	w12, w11, [x9]
	stp	w8, w10, [x26]
	cmp	x25, x9
	b.eq	.LBB521_68
// %bb.67:                              // %"$59"
                                        //   in Loop: Header=BB521_66 Depth=1
	ldp	w26, w8, [x26, #16]
	bfi	x26, x8, #32, #32
	b	.LBB521_66
.LBB521_68:                             // %"$60"
	adrp	x8, env+104
	add	x8, x8, :lo12:env+104
	ldp	x20, x27, [x8]
	stp	x21, x13, [x8]
	ldp	w19, w8, [x19, #8]
	bfi	x19, x8, #32, #32
.LBB521_69:                             // %"$61"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w0, w8, [x19]
	bfi	x0, x8, #32, #32
	ldp	w19, w8, [x19, #8]
	bfi	x19, x8, #32, #32
	tst	x19, #0xf
	b.ne	.LBB521_72
// %bb.70:                              // %"$62"
                                        //   in Loop: Header=BB521_69 Depth=1
	tst	x0, #0xf
	b.ne	.LBB521_69
// %bb.71:                              // %"$71"
                                        //   in Loop: Header=BB521_69 Depth=1
	bl	evList
	b	.LBB521_69
.LBB521_72:                             // %"$64"
	tst	x0, #0x6
	b.ne	.LBB521_76
// %bb.73:                              // %"$66"
	tbz	w0, #3, .LBB521_75
// %bb.74:                              // %"$69"
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB521_76
.LBB521_75:                             // %"$68"
	bl	evList
.LBB521_76:                             // %"$63"
	adrp	x26, env
	add	x26, x26, :lo12:env
	stp	x20, x27, [x26, #104]
	str	x22, [x26, #96]
	ldp	w22, w8, [x23, #16]
	bfi	x22, x8, #32, #32
	b	.LBB521_53
.LBB521_77:                             // %"$23"
	mov	x0, x19
	mov	x1, x8
	bl	varErr
.LBB521_78:                             // %"$27"
	mov	x0, x19
	mov	x1, x8
	bl	protErr
.LBB521_79:                             // %"$13"
	mov	x0, x19
	bl	varErr
.LBB521_80:                             // %"$17"
	mov	x0, x19
	bl	protErr
.LBB521_81:                             // %"$88"
	mov	x0, x19
	mov	x1, x23
	bl	varErr
.LBB521_82:                             // %"$92"
	mov	x0, x19
	mov	x1, x23
	bl	protErr
.Lfunc_end521:
	.size	evMethod, .Lfunc_end521-evMethod
	.cfi_endproc
                                        // -- End function
	.globl	symErr                          // -- Begin function symErr
	.p2align	4
	.type	symErr,@function
symErr:                                 // @symErr
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	adrp	x2, .L$114
	add	x2, x2, :lo12:.L$114
	mov	x3, xzr
	bl	err
.Lfunc_end522:
	.size	symErr, .Lfunc_end522-symErr
	.cfi_endproc
                                        // -- End function
	.globl	isa                             // -- Begin function isa
	.p2align	4
	.type	isa,@function
isa:                                    // @isa
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x30, x21, [sp, #-32]!           // 16-byte Folded Spill
	stp	x20, x19, [sp, #16]             // 16-byte Folded Spill
	.cfi_def_cfa_offset 32
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w30, -32
	mov	x19, x0
	ldp	w20, w8, [x1]
	bfi	x20, x8, #32, #32
	mov	x21, x20
.LBB523_1:                              // %"$2"
                                        // =>This Inner Loop Header: Depth=1
	tst	x21, #0xf
	b.ne	.LBB523_4
// %bb.2:                               // %"$3"
                                        //   in Loop: Header=BB523_1 Depth=1
	ldrb	w8, [x21]
	tst	w8, #0xf
	b.ne	.LBB523_6
// %bb.3:                               // %"$6"
                                        //   in Loop: Header=BB523_1 Depth=1
	ldp	w21, w8, [x21, #8]
	bfi	x21, x8, #32, #32
	cmp	x20, x21
	b.ne	.LBB523_1
.LBB523_4:
	mov	w0, wzr
.LBB523_5:                              // %"$4"
	ldp	x20, x19, [sp, #16]             // 16-byte Folded Reload
	ldp	x30, x21, [sp], #32             // 16-byte Folded Reload
	ret
.LBB523_6:                              // %"$7"
	mov	x8, sp
	adrp	x9, ($StkLimit)
	ldr	x9, [x9, :lo12:($StkLimit)]
	cmp	x9, x8
	b.hi	.LBB523_13
.LBB523_7:                              // %"$10"
                                        // =>This Inner Loop Header: Depth=1
	ldr	w1, [x21]
	eor	w8, w1, #0x8
	tst	x8, #0xe
	b.ne	.LBB523_4
// %bb.8:                               // %"$11"
                                        //   in Loop: Header=BB523_7 Depth=1
	ldr	w8, [x21, #4]
	bfi	x1, x8, #32, #32
	cmp	x1, x19
	b.eq	.LBB523_12
// %bb.9:                               // %"$14"
                                        //   in Loop: Header=BB523_7 Depth=1
	mov	x0, x19
	bl	isa
	tbnz	w0, #0, .LBB523_12
// %bb.10:                              // %"$16"
                                        //   in Loop: Header=BB523_7 Depth=1
	ldp	w21, w8, [x21, #8]
	bfi	x21, x8, #32, #32
	tst	x21, #0xf
	b.ne	.LBB523_4
// %bb.11:                              // %"$18"
                                        //   in Loop: Header=BB523_7 Depth=1
	cmp	x20, x21
	b.ne	.LBB523_7
	b	.LBB523_4
.LBB523_12:
	mov	w0, #1
	b	.LBB523_5
.LBB523_13:                             // %"$8"
	mov	x0, xzr
	bl	stkErr
.Lfunc_end523:
	.size	isa, .Lfunc_end523-isa
	.cfi_endproc
                                        // -- End function
	.globl	newId                           // -- Begin function newId
	.p2align	4
	.type	newId,@function
newId:                                  // @newId
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x30, x21, [sp, #-32]!           // 16-byte Folded Spill
	stp	x20, x19, [sp, #16]             // 16-byte Folded Spill
	.cfi_def_cfa_offset 32
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w30, -32
	sub	w8, w1, #1                      // =1
	adrp	x9, ($DBs)
	ldr	w9, [x9, :lo12:($DBs)]
	cmp	w8, w9
	b.ge	.LBB524_6
// %bb.1:                               // %"$3"
	adrp	x9, ($DbFiles)
	mov	w10, #42
	adrp	x19, ($DbFile)
	adrp	x20, env+136
	ldr	x9, [x9, :lo12:($DbFiles)]
	mul	w8, w8, w10
	add	x8, x9, w8, sxtw
	str	x8, [x19, :lo12:($DbFile)]
	ldr	w8, [x20, :lo12:env+136]
	add	w8, w8, #1                      // =1
	str	w8, [x20, :lo12:env+136]
	bl	wrLockDb
	adrp	x21, ($DbJnl)
	ldr	x8, [x21, :lo12:($DbJnl)]
	cbz	x8, .LBB524_3
// %bb.2:                               // %"$4"
	bl	lockJnl
.LBB524_3:                              // %"$5"
	ldr	x8, [x19, :lo12:($DbFile)]
	ldr	w19, [x8, #4]
	bl	newBlock
	lsr	x1, x0, #6
	mov	w0, w19
	bl	extNm
	mov	x19, x0
	ldr	x8, [x21, :lo12:($DbJnl)]
	cbz	x8, .LBB524_5
// %bb.4:                               // %"$6"
	bl	unLockJnl
.LBB524_5:                              // %"$7"
	mov	w0, #1
	bl	unLockDb
	ldr	w8, [x20, :lo12:env+136]
	sub	w8, w8, #1                      // =1
	str	w8, [x20, :lo12:env+136]
	mov	x0, x19
	ldp	x20, x19, [sp, #16]             // 16-byte Folded Reload
	ldp	x30, x21, [sp], #32             // 16-byte Folded Reload
	ret
.LBB524_6:                              // %"$2"
	bl	dbfErr
.Lfunc_end524:
	.size	newId, .Lfunc_end524-newId
	.cfi_endproc
                                        // -- End function
	.globl	put                             // -- Begin function put
	.p2align	4
	.type	put,@function
put:                                    // @put
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-48]!                // 8-byte Folded Spill
	stp	x22, x21, [sp, #16]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #32]             // 16-byte Folded Spill
	.cfi_def_cfa_offset 48
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w30, -48
	mov	x19, x0
	ldp	w20, w8, [x0, #-8]
	bfi	x20, x8, #32, #32
	tst	x20, #0x6
	b.eq	.LBB525_6
.LBB525_1:                              // %"$3"
	adrp	x8, SymTab+8
	add	x8, x8, :lo12:SymTab+8
	cmp	x2, x8
	b.eq	.LBB525_12
// %bb.2:                               // %"$54"
	adrp	x8, SymTab+216
	add	x8, x8, :lo12:SymTab+216
	cmp	x2, x8
	b.eq	.LBB525_4
// %bb.3:                               // %"$57"
	mov	x0, x2
	bl	cons
	mov	x1, x0
.LBB525_4:                              // %"$58"
	tbz	w20, #3, .LBB525_10
// %bb.5:                               // %"$59"
	and	x8, x20, #0xfffffffffffffff7
	mov	x0, x1
	mov	x1, x8
	bl	cons
	orr	x0, x0, #0x8
	b	.LBB525_11
.LBB525_6:                              // %"$2"
	and	x21, x20, #0xfffffffffffffff7
	ldp	w8, w9, [x21]
	bfi	x8, x9, #32, #32
	tst	x8, #0xf
	b.eq	.LBB525_13
// %bb.7:                               // %"$4"
	cmp	x1, x8
	b.ne	.LBB525_18
// %bb.8:                               // %"$7"
	adrp	x8, SymTab+8
	add	x8, x8, :lo12:SymTab+8
	cmp	x2, x8
	b.ne	.LBB525_24
// %bb.9:                               // %"$11"
	ldp	w9, w8, [x21, #8]
	bfi	x9, x8, #32, #32
	sub	x21, x19, #8                    // =8
	orr	x8, x9, #0x8
	tst	w20, #0x8
	csel	x0, x9, x8, eq
	b	.LBB525_26
.LBB525_10:                             // %"$60"
	mov	x0, x1
	mov	x1, x20
	bl	cons
.LBB525_11:                             // %"$61"
	lsr	x8, x0, #32
	stp	w0, w8, [x19, #-8]
.LBB525_12:                             // %"$9"
	ldp	x20, x19, [sp, #32]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #16]             // 16-byte Folded Reload
	ldr	x30, [sp], #48                  // 8-byte Folded Reload
	ret
.LBB525_13:                             // %"$5"
	ldp	w10, w9, [x8, #8]
	bfi	x10, x9, #32, #32
	cmp	x1, x10
	b.ne	.LBB525_18
// %bb.14:                              // %"$17"
	adrp	x9, SymTab+8
	add	x9, x9, :lo12:SymTab+8
	cmp	x2, x9
	b.ne	.LBB525_27
// %bb.15:                              // %"$21"
	ldp	w8, w9, [x21, #8]
	bfi	x8, x9, #32, #32
	sub	x9, x19, #8                     // =8
	tbz	w20, #3, .LBB525_28
// %bb.16:                              // %"$22"
	orr	x8, x8, #0x8
	b	.LBB525_28
.LBB525_17:                             // %"$31"
                                        //   in Loop: Header=BB525_18 Depth=1
	ldp	w10, w9, [x8, #8]
	bfi	x10, x9, #32, #32
	cmp	x1, x10
	b.eq	.LBB525_29
.LBB525_18:                             // %"$27"
                                        // =>This Inner Loop Header: Depth=1
	mov	x22, x21
	ldp	w21, w8, [x21, #8]
	bfi	x21, x8, #32, #32
	tst	x21, #0xf
	b.ne	.LBB525_1
// %bb.19:                              // %"$28"
                                        //   in Loop: Header=BB525_18 Depth=1
	ldp	w8, w9, [x21]
	bfi	x8, x9, #32, #32
	tst	x8, #0xf
	b.eq	.LBB525_17
// %bb.20:                              // %"$30"
                                        //   in Loop: Header=BB525_18 Depth=1
	cmp	x1, x8
	b.ne	.LBB525_18
// %bb.21:                              // %"$33"
	adrp	x8, SymTab+8
	add	x8, x8, :lo12:SymTab+8
	cmp	x2, x8
	b.eq	.LBB525_30
// %bb.22:                              // %"$36"
	adrp	x8, SymTab+216
	add	x8, x8, :lo12:SymTab+216
	cmp	x2, x8
	b.eq	.LBB525_32
// %bb.23:                              // %"$38"
	mov	x0, x2
	bl	cons
	lsr	x8, x0, #32
	stp	w0, w8, [x21]
	b	.LBB525_32
.LBB525_24:                             // %"$10"
	adrp	x8, SymTab+216
	add	x8, x8, :lo12:SymTab+216
	cmp	x2, x8
	b.eq	.LBB525_12
// %bb.25:                              // %"$16"
	mov	x0, x2
	bl	cons
.LBB525_26:                             // %"$9.sink.split"
	lsr	x8, x0, #32
	stp	w0, w8, [x21]
	b	.LBB525_12
.LBB525_27:                             // %"$20"
	adrp	x9, SymTab+216
	add	x9, x9, :lo12:SymTab+216
	cmp	x2, x9
	csel	x9, x21, x8, eq
	csel	x8, x1, x2, eq
.LBB525_28:                             // %"$19"
	lsr	x10, x8, #32
	stp	w8, w10, [x9]
	b	.LBB525_12
.LBB525_29:                             // %"$43"
	adrp	x9, SymTab+8
	add	x9, x9, :lo12:SymTab+8
	cmp	x2, x9
	b.ne	.LBB525_31
.LBB525_30:                             // %"$35"
	ldp	w9, w8, [x21, #8]
	stp	w9, w8, [x22, #8]
	b	.LBB525_12
.LBB525_31:                             // %"$46"
	adrp	x9, SymTab+216
	add	x9, x9, :lo12:SymTab+216
	cmp	x2, x9
	csel	x8, x21, x8, eq
	csel	x9, x1, x2, eq
	lsr	x10, x9, #32
	stp	w9, w10, [x8]
.LBB525_32:                             // %"$39"
	ldp	w8, w9, [x21, #8]
	stp	w8, w9, [x22, #8]
	tbz	w20, #3, .LBB525_34
// %bb.33:                              // %"$41"
	and	x8, x20, #0xfffffffffffffff7
	lsr	x9, x20, #32
	stp	w8, w9, [x21, #8]
	orr	x21, x21, #0x8
	b	.LBB525_35
.LBB525_34:                             // %"$40"
	lsr	x8, x20, #32
	stp	w20, w8, [x21, #8]
.LBB525_35:                             // %"$42"
	lsr	x8, x21, #32
	stp	w21, w8, [x19, #-8]
	b	.LBB525_12
.Lfunc_end525:
	.size	put, .Lfunc_end525-put
	.cfi_endproc
                                        // -- End function
	.globl	wrLockDb                        // -- Begin function wrLockDb
	.p2align	4
	.type	wrLockDb,@function
wrLockDb:                               // @wrLockDb
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	adrp	x8, SymTab+216
	add	x8, x8, :lo12:SymTab+216
	ldr	x9, [x8, #144]
	cmp	x9, x8
	b.eq	.LBB526_2
// %bb.1:                               // %"$2"
	adrp	x8, ($DbFiles)
	ldr	x8, [x8, :lo12:($DbFiles)]
	ldr	w0, [x8]
	mov	w1, #1
	bl	wrLockWait
.LBB526_2:                              // %"$3"
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end526:
	.size	wrLockDb, .Lfunc_end526-wrLockDb
	.cfi_endproc
                                        // -- End function
	.globl	lockJnl                         // -- Begin function lockJnl
	.p2align	4
	.type	lockJnl,@function
lockJnl:                                // @lockJnl
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	bl	fileno
	mov	x1, xzr
	bl	wrLockWait
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end527:
	.size	lockJnl, .Lfunc_end527-lockJnl
	.cfi_endproc
                                        // -- End function
	.globl	newBlock                        // -- Begin function newBlock
	.p2align	4
	.type	newBlock,@function
newBlock:                               // @newBlock
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-64]!           // 16-byte Folded Spill
	str	x23, [sp, #16]                  // 8-byte Folded Spill
	stp	x22, x21, [sp, #32]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #48]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 64
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -48
	.cfi_offset w30, -56
	.cfi_offset w29, -64
	adrp	x8, ($DbFile)
	ldr	x22, [x8, :lo12:($DbFile)]
	ldr	w23, [x22, #12]
	mov	x8, sp
	add	x9, x23, #15                    // =15
	and	x9, x9, #0x1fffffff0
	sub	x19, x8, x9
	mov	sp, x19
	mov	x0, xzr
	mov	x1, x19
	mov	w2, #12
	bl	blkPeek
	mov	x0, x19
	bl	getAdr
	mov	x20, x0
	cbz	x0, .LBB528_3
// %bb.1:                               // %"$4"
	ldp	w9, w8, [x22, #32]
	bfi	x9, x8, #32, #32
	cmp	x9, #0                          // =0
	cset	w8, ne
	cbz	w8, .LBB528_4
.LBB528_2:                              // %"$6"
	ldrsw	x8, [x22, #8]
	lsl	x0, x20, x8
	mov	x1, x19
	mov	w2, #6
	bl	blkPeek
	mov	x8, x22
	ldr	w9, [x8, #32]!
	ldr	w10, [x8, #4]
	bfi	x9, x10, #32, #32
	sub	x9, x9, #1                      // =1
	str	w9, [x8]
	lsr	x9, x9, #32
	str	w9, [x8, #4]
	b	.LBB528_6
.LBB528_3:
	mov	w8, wzr
	cbnz	w8, .LBB528_2
.LBB528_4:                              // %"$5"
	add	x21, x19, #6                    // =6
	mov	x0, x21
	bl	getAdr
	mov	x8, #281474976710592
	cmp	x0, x8
	b.eq	.LBB528_7
// %bb.5:                               // %"$7"
	mov	x20, x0
	add	x0, x0, #64                     // =64
	mov	x1, x21
	bl	setAdr
.LBB528_6:                              // %"$2"
	sxtw	x21, w23
	mov	x0, xzr
	mov	x1, x19
	mov	w2, #12
	bl	blkPoke
	mov	x0, x19
	mov	w1, wzr
	mov	x2, x21
	bl	memset2
	ldrsw	x8, [x22, #8]
	lsl	x0, x20, x8
	mov	x1, x19
	mov	w2, w21
	bl	blkPoke
	mov	x0, x20
	mov	sp, x29
	ldp	x20, x19, [sp, #48]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #32]             // 16-byte Folded Reload
	ldr	x23, [sp, #16]                  // 8-byte Folded Reload
	ldp	x29, x30, [sp], #64             // 16-byte Folded Reload
	ret
.LBB528_7:                              // %"$8"
	adrp	x2, .L$170
	add	x2, x2, :lo12:.L$170
	mov	x0, xzr
	mov	x1, xzr
	mov	x3, xzr
	bl	err
.Lfunc_end528:
	.size	newBlock, .Lfunc_end528-newBlock
	.cfi_endproc
                                        // -- End function
	.globl	unLockJnl                       // -- Begin function unLockJnl
	.p2align	4
	.type	unLockJnl,@function
unLockJnl:                              // @unLockJnl
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	bl	fflush
	bl	fileno
	bl	unLock
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end529:
	.size	unLockJnl, .Lfunc_end529-unLockJnl
	.cfi_endproc
                                        // -- End function
	.globl	fflush                          // -- Begin function fflush
	.p2align	4
	.type	fflush,@function
fflush:                                 // @fflush
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	adrp	x0, .L$26
	add	x0, x0, :lo12:.L$26
	bl	"pr-libc"
	mov	w0, wzr
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end530:
	.size	fflush, .Lfunc_end530-fflush
	.cfi_endproc
                                        // -- End function
	.globl	fileno                          // -- Begin function fileno
	.p2align	4
	.type	fileno,@function
fileno:                                 // @fileno
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	adrp	x0, .L$29
	add	x0, x0, :lo12:.L$29
	bl	"pr-libc"
	mov	w0, wzr
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end531:
	.size	fileno, .Lfunc_end531-fileno
	.cfi_endproc
                                        // -- End function
	.globl	setAdr                          // -- Begin function setAdr
	.p2align	4
	.type	setAdr,@function
setAdr:                                 // @setAdr
	.cfi_startproc
// %bb.0:                               // %"$1"
	strb	w0, [x1]
	lsr	x8, x0, #8
	strb	w8, [x1, #1]
	lsr	x8, x0, #16
	lsr	x9, x0, #24
	strb	w8, [x1, #2]
	strb	w9, [x1, #3]
	lsr	x8, x0, #32
	strb	w8, [x1, #4]
	lsr	x8, x0, #40
	strb	w8, [x1, #5]
	ret
.Lfunc_end532:
	.size	setAdr, .Lfunc_end532-setAdr
	.cfi_endproc
                                        // -- End function
	.globl	blkPoke                         // -- Begin function blkPoke
	.p2align	4
	.type	blkPoke,@function
blkPoke:                                // @blkPoke
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-48]!           // 16-byte Folded Spill
	str	x21, [sp, #16]                  // 8-byte Folded Spill
	stp	x20, x19, [sp, #32]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 48
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -32
	.cfi_offset w30, -40
	.cfi_offset w29, -48
	mov	w20, w2
	mov	x19, x0
	adrp	x8, ($DbFile)
	ldr	x21, [x8, :lo12:($DbFile)]
	bl	pwrite
	cmp	w20, w0
	b.ne	.LBB533_6
// %bb.1:                               // %"$3"
	adrp	x8, ($DbJnl)
	ldr	x8, [x8, :lo12:($DbJnl)]
	cbz	x8, .LBB533_4
// %bb.2:                               // %"$4"
	bl	putc_unlocked
	mov	x8, sp
	sub	x9, x8, #16                     // =16
	mov	sp, x9
	ldr	w9, [x21, #4]
	sturb	w9, [x8, #-16]
	ldr	w9, [x21, #4]
	lsr	w9, w9, #8
	sturb	w9, [x8, #-15]
	ldrsw	x9, [x21, #8]
	lsr	x0, x19, x9
	sub	x1, x8, #14                     // =14
	bl	setAdr
	bl	fwrite
	cmp	w0, #1                          // =1
	b.ne	.LBB533_5
// %bb.3:                               // %"$10"
	bl	fwrite
	cmp	w0, #1                          // =1
	b.ne	.LBB533_5
.LBB533_4:                              // %"$5"
	mov	sp, x29
	ldp	x20, x19, [sp, #32]             // 16-byte Folded Reload
	ldr	x21, [sp, #16]                  // 8-byte Folded Reload
	ldp	x29, x30, [sp], #48             // 16-byte Folded Reload
	ret
.LBB533_5:                              // %"$11"
	bl	strErrno
	mov	x3, x0
	adrp	x2, .L$168
	add	x2, x2, :lo12:.L$168
	mov	x0, xzr
	mov	x1, xzr
	bl	err
.LBB533_6:                              // %"$2"
	bl	dbWrErr
.Lfunc_end533:
	.size	blkPoke, .Lfunc_end533-blkPoke
	.cfi_endproc
                                        // -- End function
	.globl	memset2                         // -- Begin function memset2
	.p2align	4
	.type	memset2,@function
memset2:                                // @memset2
	.cfi_startproc
// %bb.0:                               // %"$1"
	mov	x8, xzr
	cmp	x2, x8
	b.eq	.LBB534_2
.LBB534_1:                              // %"$3"
                                        // =>This Inner Loop Header: Depth=1
	strb	w1, [x0]
	add	x8, x8, #1                      // =1
	cmp	x2, x8
	b.ne	.LBB534_1
.LBB534_2:                              // %"$4"
	ret
.Lfunc_end534:
	.size	memset2, .Lfunc_end534-memset2
	.cfi_endproc
                                        // -- End function
	.globl	pwrite                          // -- Begin function pwrite
	.p2align	4
	.type	pwrite,@function
pwrite:                                 // @pwrite
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	adrp	x0, .L$20
	add	x0, x0, :lo12:.L$20
	bl	"pr-libc"
	mov	x0, xzr
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end535:
	.size	pwrite, .Lfunc_end535-pwrite
	.cfi_endproc
                                        // -- End function
	.globl	dbWrErr                         // -- Begin function dbWrErr
	.p2align	4
	.type	dbWrErr,@function
dbWrErr:                                // @dbWrErr
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	bl	strErrno
	mov	x3, x0
	adrp	x2, .L$165
	add	x2, x2, :lo12:.L$165
	mov	x0, xzr
	mov	x1, xzr
	bl	err
.Lfunc_end536:
	.size	dbWrErr, .Lfunc_end536-dbWrErr
	.cfi_endproc
                                        // -- End function
	.globl	putc_unlocked                   // -- Begin function putc_unlocked
	.p2align	4
	.type	putc_unlocked,@function
putc_unlocked:                          // @putc_unlocked
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	adrp	x0, .L$23
	add	x0, x0, :lo12:.L$23
	bl	"pr-libc"
	mov	w0, wzr
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end537:
	.size	putc_unlocked, .Lfunc_end537-putc_unlocked
	.cfi_endproc
                                        // -- End function
	.globl	fwrite                          // -- Begin function fwrite
	.p2align	4
	.type	fwrite,@function
fwrite:                                 // @fwrite
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	adrp	x0, .L$22
	add	x0, x0, :lo12:.L$22
	bl	"pr-libc"
	mov	w0, wzr
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end538:
	.size	fwrite, .Lfunc_end538-fwrite
	.cfi_endproc
                                        // -- End function
	.globl	wrLockWait                      // -- Begin function wrLockWait
	.p2align	4
	.type	wrLockWait,@function
wrLockWait:                             // @wrLockWait
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
.LBB539_1:                              // %"$2"
                                        // =>This Inner Loop Header: Depth=1
	bl	wrLock
	tbz	w0, #31, .LBB539_4
// %bb.2:                               // %"$3"
                                        //   in Loop: Header=BB539_1 Depth=1
	bl	gErrno
	cmp	w0, #2                          // =2
	b.eq	.LBB539_1
// %bb.3:                               // %"$5"
	bl	lockErr
.LBB539_4:                              // %"$4"
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end539:
	.size	wrLockWait, .Lfunc_end539-wrLockWait
	.cfi_endproc
                                        // -- End function
	.globl	wrLock                          // -- Begin function wrLock
	.p2align	4
	.type	wrLock,@function
wrLock:                                 // @wrLock
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	adrp	x0, .L$98
	add	x0, x0, :lo12:.L$98
	bl	"pr-libc"
	mov	w0, wzr
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end540:
	.size	wrLock, .Lfunc_end540-wrLock
	.cfi_endproc
                                        // -- End function
	.globl	redefine                        // -- Begin function redefine
	.p2align	4
	.type	redefine,@function
redefine:                               // @redefine
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-32]!                // 8-byte Folded Spill
	stp	x20, x19, [sp, #16]             // 16-byte Folded Spill
	.cfi_def_cfa_offset 32
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w30, -32
	mov	x19, x1
	tst	x1, #0x6
	b.ne	.LBB541_7
// %bb.1:                               // %"$3"
	adrp	x8, SymTab+8
	add	x8, x8, :lo12:SymTab+8
	add	x9, x8, #208                    // =208
	cmp	x9, x19
	ccmp	x19, x8, #0, hs
	b.hs	.LBB541_8
// %bb.2:                               // %"$7"
	mov	x20, x2
	ldp	w0, w9, [x19]
	bfi	x0, x9, #32, #32
	cmp	x0, x8
	b.eq	.LBB541_6
// %bb.3:                               // %"$7"
	cmp	x0, x19
	b.eq	.LBB541_6
// %bb.4:                               // %"$10"
	mov	x1, x20
	bl	equal
	tbnz	w0, #0, .LBB541_6
// %bb.5:                               // %"$11"
	mov	x0, x19
	mov	x1, xzr
	bl	redefMsg
.LBB541_6:                              // %"$12"
	lsr	x8, x20, #32
	stp	w20, w8, [x19]
	mov	x0, x19
	mov	x1, xzr
	bl	putSrc
	ldp	x20, x19, [sp, #16]             // 16-byte Folded Reload
	ldr	x30, [sp], #32                  // 8-byte Folded Reload
	ret
.LBB541_7:                              // %"$2"
	mov	x1, x19
	bl	varErr
.LBB541_8:                              // %"$6"
	mov	x1, x19
	bl	protErr
.Lfunc_end541:
	.size	redefine, .Lfunc_end541-redefine
	.cfi_endproc
                                        // -- End function
	.globl	redefMsg                        // -- Begin function redefMsg
	.p2align	4
	.type	redefMsg,@function
redefMsg:                               // @redefMsg
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-64]!                // 8-byte Folded Spill
	stp	x24, x23, [sp, #16]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #32]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #48]             // 16-byte Folded Spill
	.cfi_def_cfa_offset 64
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w30, -64
	mov	x19, x1
	mov	x20, x0
	adrp	x8, ($OutFiles)
	adrp	x21, ($OutFile)
	adrp	x23, ($Put)
	ldr	x22, [x21, :lo12:($OutFile)]
	ldr	x8, [x8, :lo12:($OutFiles)]
	ldr	x8, [x8, #16]
	ldr	x24, [x23, :lo12:($Put)]
	str	x8, [x21, :lo12:($OutFile)]
	adrp	x8, _putStdout
	add	x8, x8, :lo12:_putStdout
	str	x8, [x23, :lo12:($Put)]
	adrp	x0, .L$179
	add	x0, x0, :lo12:.L$179
	bl	outString
	mov	x0, x20
	bl	print
	cbz	x19, .LBB542_2
// %bb.1:                               // %"$2"
	bl	space
	mov	x0, x19
	bl	print
.LBB542_2:                              // %"$3"
	adrp	x0, .L$180
	add	x0, x0, :lo12:.L$180
	bl	outString
	str	x24, [x23, :lo12:($Put)]
	str	x22, [x21, :lo12:($OutFile)]
	ldp	x20, x19, [sp, #48]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #32]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #16]             // 16-byte Folded Reload
	ldr	x30, [sp], #64                  // 8-byte Folded Reload
	ret
.Lfunc_end542:
	.size	redefMsg, .Lfunc_end542-redefMsg
	.cfi_endproc
                                        // -- End function
	.globl	putSrc                          // -- Begin function putSrc
	.p2align	4
	.type	putSrc,@function
putSrc:                                 // @putSrc
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-64]!                // 8-byte Folded Spill
	stp	x24, x23, [sp, #16]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #32]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #48]             // 16-byte Folded Spill
	.cfi_def_cfa_offset 64
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w30, -64
	adrp	x22, SymTab+8
	add	x22, x22, :lo12:SymTab+8
	ldr	x8, [x22, #720]
	cmp	x8, x22
	b.eq	.LBB543_17
// %bb.1:                               // %"$3"
	mov	x21, x0
	ldurb	w8, [x0, #-8]
	tbnz	w8, #3, .LBB543_17
// %bb.2:                               // %"$4"
	adrp	x8, ($InFile)
	ldr	x24, [x8, :lo12:($InFile)]
	cbz	x24, .LBB543_17
// %bb.3:                               // %"$7"
	ldr	x8, [x24]
	cbz	x8, .LBB543_17
// %bb.4:                               // %"$8"
	mov	x20, x1
	adrp	x1, SymTab+728
	add	x1, x1, :lo12:SymTab+728
	mov	x0, x21
	bl	get
	mov	x19, x0
	ldrsw	x8, [x24, #20]
	mov	w23, #2
	bfi	x23, x8, #4, #60
	ldr	x0, [x24]
	bl	mkStr
	adrp	x8, env+88
	ldr	x1, [x8, :lo12:env+88]
	bl	cons
	mov	x1, x0
	mov	x0, x23
	bl	cons
	mov	x1, x0
	cmp	x19, x22
	cbz	x20, .LBB543_7
// %bb.5:                               // %"$11"
	b.ne	.LBB543_10
// %bb.6:                               // %"$17"
	mov	x0, x1
	mov	x1, x22
	bl	cons
	mov	x1, x0
	mov	x0, x22
	b	.LBB543_9
.LBB543_7:                              // %"$12"
	b.ne	.LBB543_14
// %bb.8:                               // %"$13"
	mov	x0, x1
	mov	x1, x22
.LBB543_9:                              // %"$5"
	bl	cons
	mov	x2, x0
	add	x1, x22, #720                   // =720
	mov	x0, x21
	bl	put
	b	.LBB543_17
.LBB543_10:
	mov	x8, x19
.LBB543_11:                             // %"$18"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w8, w9, [x8, #8]
	bfi	x8, x9, #32, #32
	tst	x8, #0xf
	b.ne	.LBB543_15
// %bb.12:                              // %"$19"
                                        //   in Loop: Header=BB543_11 Depth=1
	ldp	w10, w9, [x8]
	bfi	x10, x9, #32, #32
	ldp	w10, w9, [x10]
	bfi	x10, x9, #32, #32
	cmp	x10, x20
	b.ne	.LBB543_11
// %bb.13:                              // %"$23"
	ldp	w19, w9, [x8]
	bfi	x19, x9, #32, #32
	b	.LBB543_16
.LBB543_14:                             // %"$14"
	lsr	x8, x1, #32
	stp	w1, w8, [x19]
	b	.LBB543_17
.LBB543_15:                             // %"$21"
	mov	x0, x20
	bl	cons
	ldp	w1, w8, [x19, #8]
	bfi	x1, x8, #32, #32
	bl	cons
	mov	x1, x0
.LBB543_16:                             // %"$20"
	lsr	x8, x1, #32
	stp	w1, w8, [x19, #8]
.LBB543_17:                             // %"$5"
	ldp	x20, x19, [sp, #48]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #32]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #16]             // 16-byte Folded Reload
	ldr	x30, [sp], #64                  // 8-byte Folded Reload
	ret
.Lfunc_end543:
	.size	putSrc, .Lfunc_end543-putSrc
	.cfi_endproc
                                        // -- End function
	.globl	dbTouch                         // -- Begin function dbTouch
	.p2align	4
	.type	dbTouch,@function
dbTouch:                                // @dbTouch
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	mov	x8, x1
	ldr	w9, [x8, #-8]!
	ldr	w10, [x8, #4]
	bfi	x9, x10, #32, #32
	tst	x9, #0x6
	b.ne	.LBB544_3
// %bb.1:                               // %"$2"
	and	x9, x9, #0xfffffffffffffff7
.LBB544_2:                              // %"$4"
                                        // =>This Inner Loop Header: Depth=1
	mov	x8, x9
	ldr	w9, [x8, #8]!
	ldr	w10, [x8, #4]
	bfi	x9, x10, #32, #32
	tst	x9, #0x6
	b.eq	.LBB544_2
.LBB544_3:                              // %"$3"
	adds	x9, x9, x9
	b.hs	.LBB544_6
// %bb.4:                               // %"$7"
	adds	x9, x9, x9
	mov	x2, #-9223372036854775808
	bfxil	x2, x9, #2, #62
	lsr	x9, x9, #2
	lsr	x10, x2, #32
	stp	w9, w10, [x8]
	b.hs	.LBB544_6
// %bb.5:                               // %"$9"
	bl	db
.LBB544_6:                              // %"$8"
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end544:
	.size	dbTouch, .Lfunc_end544-dbTouch
	.cfi_endproc
                                        // -- End function
	.globl	fish                            // -- Begin function fish
	.p2align	4
	.type	fish,@function
fish:                                   // @fish
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x30, x23, [sp, #-48]!           // 16-byte Folded Spill
	stp	x22, x21, [sp, #16]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #32]             // 16-byte Folded Spill
	.cfi_def_cfa_offset 48
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w30, -48
	mov	x20, x4
	mov	x19, x3
	mov	x22, x2
	mov	x21, x1
	mov	x23, x0
	lsr	x8, x1, #32
	stp	w21, w8, [x2]
	bl	evList
	adrp	x8, SymTab+8
	add	x8, x8, :lo12:SymTab+8
	cmp	x0, x8
	b.ne	.LBB545_6
// %bb.1:                               // %"$4"
	tst	x21, #0xf
	b.ne	.LBB545_8
// %bb.2:                               // %"$5"
	mov	x9, sp
	adrp	x10, ($StkLimit)
	ldr	x10, [x10, :lo12:($StkLimit)]
	cmp	x10, x9
	b.hi	.LBB545_9
// %bb.3:                               // %"$8"
	ldp	w1, w9, [x21, #8]
	bfi	x1, x9, #32, #32
	cmp	x1, x8
	b.eq	.LBB545_5
// %bb.4:                               // %"$9"
	mov	x0, x23
	mov	x2, x22
	mov	x3, x19
	mov	x4, x20
	bl	fish
.LBB545_5:                              // %"$10"
	ldp	w1, w8, [x21]
	bfi	x1, x8, #32, #32
	mov	x0, x23
	mov	x2, x22
	mov	x3, x19
	mov	x4, x20
	bl	fish
	b	.LBB545_8
.LBB545_6:                              // %"$3"
	cmp	x0, x20
	b.eq	.LBB545_8
// %bb.7:                               // %"$12"
	ldp	w1, w8, [x19]
	bfi	x1, x8, #32, #32
	mov	x0, x21
	bl	cons
	lsr	x8, x0, #32
	stp	w0, w8, [x19]
.LBB545_8:                              // %"$2"
	ldp	x20, x19, [sp, #32]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #16]             // 16-byte Folded Reload
	ldp	x30, x23, [sp], #48             // 16-byte Folded Reload
	ret
.LBB545_9:                              // %"$7"
	mov	x0, xzr
	bl	stkErr
.Lfunc_end545:
	.size	fish, .Lfunc_end545-fish
	.cfi_endproc
                                        // -- End function
	.globl	begString                       // -- Begin function begString
	.p2align	4
	.type	begString,@function
begString:                              // @begString
	.cfi_startproc
// %bb.0:                               // %"$1"
	adrp	x8, ($StrP)
	adrp	x9, env
	adrp	x10, ($Put)
	ldr	x11, [x8, :lo12:($StrP)]
	lsr	x12, x11, #32
	stp	w11, w12, [x0, #40]
	str	x0, [x8, :lo12:($StrP)]
	ldr	x8, [x9, :lo12:env]
	lsr	x11, x8, #32
	stp	w8, w11, [x0, #24]
	add	x8, x0, #16                     // =16
	str	x8, [x9, :lo12:env]
	ldr	x8, [x10, :lo12:($Put)]
	lsr	x9, x8, #32
	stp	w8, w9, [x0, #32]
	adrp	x8, putString
	add	x8, x8, :lo12:putString
	str	x8, [x10, :lo12:($Put)]
	ret
.Lfunc_end546:
	.size	begString, .Lfunc_end546-begString
	.cfi_endproc
                                        // -- End function
	.globl	endString                       // -- Begin function endString
	.p2align	4
	.type	endString,@function
endString:                              // @endString
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x30, x19, [sp, #-16]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w19, -8
	.cfi_offset w30, -16
	adrp	x8, ($StrP)
	ldr	x19, [x8, :lo12:($StrP)]
	adrp	x9, ($Put)
	ldp	w11, w10, [x19, #32]
	bfi	x11, x10, #32, #32
	str	x11, [x9, :lo12:($Put)]
	ldp	w10, w9, [x19, #40]
	bfi	x10, x9, #32, #32
	str	x10, [x8, :lo12:($StrP)]
	ldp	w0, w8, [x19, #16]
	bfi	x0, x8, #32, #32
	bl	consStr
	ldp	w9, w8, [x19, #24]
	bfi	x9, x8, #32, #32
	adrp	x8, env
	str	x9, [x8, :lo12:env]
	ldp	x30, x19, [sp], #16             // 16-byte Folded Reload
	ret
.Lfunc_end547:
	.size	endString, .Lfunc_end547-endString
	.cfi_endproc
                                        // -- End function
	.globl	putString                       // -- Begin function putString
	.p2align	4
	.type	putString,@function
putString:                              // @putString
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	adrp	x8, ($StrP)
	ldr	x1, [x8, :lo12:($StrP)]
	bl	byteSym
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end548:
	.size	putString, .Lfunc_end548-putString
	.cfi_endproc
                                        // -- End function
	.globl	putPlio                         // -- Begin function putPlio
	.p2align	4
	.type	putPlio,@function
putPlio:                                // @putPlio
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	adrp	x8, ($Ptr)
	ldr	x9, [x8, :lo12:($Ptr)]
	strb	w0, [x9], #1
	str	x9, [x8, :lo12:($Ptr)]
	adrp	x8, ($End)
	ldr	x8, [x8, :lo12:($End)]
	cmp	x9, x8
	b.eq	.LBB549_2
// %bb.1:                               // %"$3"
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.LBB549_2:                              // %"$2"
	mov	x0, xzr
	bl	sizeErr
.Lfunc_end549:
	.size	putPlio, .Lfunc_end549-putPlio
	.cfi_endproc
                                        // -- End function
	.globl	binPrint                        // -- Begin function binPrint
	.p2align	4
	.type	binPrint,@function
binPrint:                               // @binPrint
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-80]!           // 16-byte Folded Spill
	stp	x26, x25, [sp, #16]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #32]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #48]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #64]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 80
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w30, -72
	.cfi_offset w29, -80
	mov	x19, x0
	tbz	w19, #1, .LBB550_3
// %bb.1:                               // %"$4"
	lsr	x1, x19, #3
	mov	w0, #4
.LBB550_2:                              // %"$2"
	bl	prCnt
	b	.LBB550_37
.LBB550_3:                              // %"$3"
	tbz	w19, #2, .LBB550_7
// %bb.4:                               // %"$6"
	and	x8, x19, #0xfffffffffffffff7
	mov	w21, #8
	mov	x10, x8
.LBB550_5:                              // %"$7"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w9, w11, [x10, #4]
	bfi	x9, x11, #32, #32
	tbnz	w9, #1, .LBB550_9
// %bb.6:                               // %"$8"
                                        //   in Loop: Header=BB550_5 Depth=1
	add	x21, x21, #8                    // =8
	mov	x10, x9
	b	.LBB550_5
.LBB550_7:                              // %"$5"
	adrp	x22, SymTab+8
	add	x22, x22, :lo12:SymTab+8
	cmp	x19, x22
	b.ne	.LBB550_25
.LBB550_8:                              // %"$35"
	adrp	x8, ($PutBin)
	ldr	x8, [x8, :lo12:($PutBin)]
	b	.LBB550_35
.LBB550_9:                              // %"$10"
	ldp	w10, w11, [x10, #-4]
	bfi	x10, x11, #32, #32
	lsr	x9, x9, #4
	cmn	x10, x10
	add	x9, x9, x9
	cinc	x9, x9, hs
	cbz	x9, .LBB550_11
.LBB550_10:                             // %"$13"
                                        // =>This Inner Loop Header: Depth=1
	add	x21, x21, #1                    // =1
	lsr	x9, x9, #8
	cbnz	x9, .LBB550_10
.LBB550_11:                             // %"$12"
	subs	x20, x21, #63                   // =63
	ldp	w9, w10, [x8, #-4]
	bfi	x9, x10, #32, #32
	b.mi	.LBB550_13
// %bb.12:                              // %"$16"
	mov	w21, #63
.LBB550_13:                             // %"$17"
	ldp	w22, w10, [x8, #4]
	bfi	x22, x10, #32, #32
	ror	x8, x19, #4
	cmn	x8, x8
	cset	w8, hs
	adds	x9, x9, x9
	cset	w10, hs
	adds	x19, x9, x8
	cset	w8, hs
	orr	w24, w10, w8
	adrp	x23, ($PutBin)
	ldr	x8, [x23, :lo12:($PutBin)]
	lsl	w0, w21, #2
	blr	x8
	mov	w25, #8
	b	.LBB550_15
.LBB550_14:                             // %"$33"
                                        //   in Loop: Header=BB550_15 Depth=1
	ldr	x8, [x23, :lo12:($PutBin)]
	mov	w0, w20
	blr	x8
	mov	x21, x20
	mov	x20, x26
.LBB550_15:                             // %"$19"
                                        // =>This Inner Loop Header: Depth=1
	ldr	x8, [x23, :lo12:($PutBin)]
	mov	w0, w19
	blr	x8
	subs	x25, x25, #1                    // =1
	b.eq	.LBB550_17
// %bb.16:                              // %"$20"
                                        //   in Loop: Header=BB550_15 Depth=1
	lsr	x19, x19, #8
	subs	x21, x21, #1                    // =1
	b.ne	.LBB550_15
	b	.LBB550_21
.LBB550_17:                             // %"$21"
                                        //   in Loop: Header=BB550_15 Depth=1
	tbz	w22, #1, .LBB550_19
// %bb.18:                              // %"$23"
                                        //   in Loop: Header=BB550_15 Depth=1
	lsr	x8, x22, #4
	b	.LBB550_20
.LBB550_19:                             // %"$24"
                                        //   in Loop: Header=BB550_15 Depth=1
	ldp	w8, w9, [x22, #-4]
	bfi	x8, x9, #32, #32
	ldp	w22, w9, [x22, #4]
	bfi	x22, x9, #32, #32
.LBB550_20:                             // %"$25"
                                        //   in Loop: Header=BB550_15 Depth=1
	adds	x8, x8, x8
	cset	w9, hs
	and	x10, x24, #0x1
	adds	x19, x8, x10
	cset	w8, hs
	orr	w24, w9, w8
	mov	w25, #8
	subs	x21, x21, #1                    // =1
	b.ne	.LBB550_15
.LBB550_21:                             // %"$27"
                                        //   in Loop: Header=BB550_15 Depth=1
	tbnz	x20, #63, .LBB550_37
// %bb.22:                              // %"$28"
                                        //   in Loop: Header=BB550_15 Depth=1
	cbz	x20, .LBB550_34
// %bb.23:                              // %"$30"
                                        //   in Loop: Header=BB550_15 Depth=1
	subs	x26, x20, #255                  // =255
	b.mi	.LBB550_14
// %bb.24:                              // %"$32"
                                        //   in Loop: Header=BB550_15 Depth=1
	mov	w20, #255
	b	.LBB550_14
.LBB550_25:                             // %"$34"
	tst	x19, #0xf
	b.eq	.LBB550_38
// %bb.26:                              // %"$36"
	ldp	w20, w8, [x19, #-8]
	bfi	x20, x8, #32, #32
	tbz	w20, #3, .LBB550_32
// %bb.27:                              // %"$56"
	and	x19, x20, #0xfffffffffffffff7
	tst	x19, #0x6
	b.ne	.LBB550_29
.LBB550_28:                             // %"$58"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w19, w8, [x19, #8]
	bfi	x19, x8, #32, #32
	tst	x19, #0x6
	b.eq	.LBB550_28
.LBB550_29:                             // %"$59"
	adrp	x8, ($Extn)
	ldr	w20, [x8, :lo12:($Extn)]
	cbz	w20, .LBB550_31
// %bb.30:                              // %"$60"
	mov	x0, x19
	bl	objFile
	sub	w8, w0, w20
	and	x8, x8, #0xffff
	lsl	x9, x8, #24
	mov	x10, #-4486007441326081
	movk	x10, #255, lsl #16
	and	x10, x19, x10
	orr	x8, x9, x8, lsl #36
	and	x8, x8, #0xfffff000ffffffff
	orr	x19, x10, x8
.LBB550_31:                             // %"$61"
	ubfx	x1, x19, #4, #58
	mov	w0, #7
	b	.LBB550_2
.LBB550_32:                             // %"$62"
                                        // =>This Inner Loop Header: Depth=1
	tst	x20, #0x6
	b.ne	.LBB550_49
// %bb.33:                              // %"$63"
                                        //   in Loop: Header=BB550_32 Depth=1
	ldp	w20, w8, [x20, #8]
	bfi	x20, x8, #32, #32
	b	.LBB550_32
.LBB550_34:                             // %"$31"
	ldr	x8, [x23, :lo12:($PutBin)]
.LBB550_35:                             // %"$2"
	mov	w0, wzr
.LBB550_36:                             // %"$2"
	blr	x8
.LBB550_37:                             // %"$2"
	mov	sp, x29
	ldp	x20, x19, [sp, #64]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #48]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #32]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #80             // 16-byte Folded Reload
	ret
.LBB550_38:                             // %"$37"
	adrp	x21, ($PutBin)
	ldr	x8, [x21, :lo12:($PutBin)]
	mov	w0, #1
	blr	x8
	mov	x0, x19
	bl	circ
	cbz	x0, .LBB550_46
// %bb.39:                              // %"$39"
	mov	x20, x0
	mov	x22, x19
.LBB550_40:                             // %"$47"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w0, w8, [x22]
	bfi	x0, x8, #32, #32
	bl	binPrint
	ldp	w22, w8, [x22, #8]
	bfi	x22, x8, #32, #32
	cmp	x20, x22
	b.ne	.LBB550_40
// %bb.41:                              // %"$49"
	ldr	x8, [x21, :lo12:($PutBin)]
	mov	w0, #2
	blr	x8
	cmp	x20, x19
	b.eq	.LBB550_45
// %bb.42:                              // %"$50"
	ldr	x8, [x21, :lo12:($PutBin)]
	mov	w0, #1
	blr	x8
.LBB550_43:                             // %"$52"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w0, w8, [x22]
	bfi	x0, x8, #32, #32
	bl	binPrint
	ldp	w22, w8, [x22, #8]
	bfi	x22, x8, #32, #32
	cmp	x20, x22
	b.ne	.LBB550_43
// %bb.44:                              // %"$54"
	ldr	x8, [x21, :lo12:($PutBin)]
	mov	w0, #2
	blr	x8
.LBB550_45:                             // %"$44"
	ldr	x8, [x21, :lo12:($PutBin)]
	mov	w0, #3
	b	.LBB550_36
.LBB550_46:                             // %"$41"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w0, w8, [x19]
	bfi	x0, x8, #32, #32
	bl	binPrint
	ldp	w19, w8, [x19, #8]
	bfi	x19, x8, #32, #32
	cmp	x19, x22
	b.eq	.LBB550_45
// %bb.47:                              // %"$42"
                                        //   in Loop: Header=BB550_46 Depth=1
	tst	x19, #0xf
	b.eq	.LBB550_46
// %bb.48:                              // %"$46"
	ldr	x8, [x21, :lo12:($PutBin)]
	mov	w0, #2
	blr	x8
	mov	x0, x19
	bl	binPrint
	b	.LBB550_37
.LBB550_49:                             // %"$64"
	cmp	x20, #2                         // =2
	b.eq	.LBB550_8
// %bb.50:                              // %"$65"
	adrp	x8, env+88
	ldr	x2, [x8, :lo12:env+88]
	mov	x0, x19
	mov	x1, x20
	bl	findSym
	tbz	w0, #0, .LBB550_52
// %bb.51:
	mov	w0, #1
	b	.LBB550_53
.LBB550_52:                             // %"$68"
	mov	w0, #2
.LBB550_53:                             // %"$69"
	tbz	w20, #1, .LBB550_55
// %bb.54:                              // %"$70"
	orr	w0, w0, #0x4
	lsr	x1, x20, #4
	b	.LBB550_2
.LBB550_55:                             // %"$73.preheader"
	mov	w8, #8
	mov	x9, x20
.LBB550_56:                             // %"$73"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w9, w10, [x9, #4]
	bfi	x9, x10, #32, #32
	tbz	w9, #2, .LBB550_58
// %bb.57:                              // %"$74"
                                        //   in Loop: Header=BB550_56 Depth=1
	add	x8, x8, #8                      // =8
	b	.LBB550_56
.LBB550_58:                             // %"$75"
	lsr	x9, x9, #4
	cbz	x9, .LBB550_60
.LBB550_59:                             // %"$77"
                                        // =>This Inner Loop Header: Depth=1
	lsr	x9, x9, #8
	add	x8, x8, #1                      // =1
	cbnz	x9, .LBB550_59
.LBB550_60:                             // %"$78"
	mov	x9, sp
	sub	x19, x9, #16                    // =16
	mov	sp, x19
	stp	wzr, wzr, [x9, #-16]
	lsr	x10, x20, #32
	subs	x21, x8, #63                    // =63
	mov	w11, #63
	csel	x23, x8, x11, mi
	bfi	w0, w23, #2, #30
	adrp	x22, ($PutBin)
	ldr	x8, [x22, :lo12:($PutBin)]
	stp	w20, w10, [x9, #-8]
	blr	x8
	b	.LBB550_62
.LBB550_61:                             // %"$90"
                                        //   in Loop: Header=BB550_62 Depth=1
	ldr	x8, [x22, :lo12:($PutBin)]
	mov	w0, w21
	blr	x8
	mov	x23, x21
	mov	x21, x20
.LBB550_62:                             // %"$82"
                                        // =>This Inner Loop Header: Depth=1
	mov	x0, x19
	bl	symByte
	ldr	x8, [x22, :lo12:($PutBin)]
	blr	x8
	subs	x23, x23, #1                    // =1
	b.ne	.LBB550_62
// %bb.63:                              // %"$84"
                                        //   in Loop: Header=BB550_62 Depth=1
	tbnz	x21, #63, .LBB550_37
// %bb.64:                              // %"$85"
                                        //   in Loop: Header=BB550_62 Depth=1
	cbz	x21, .LBB550_67
// %bb.65:                              // %"$87"
                                        //   in Loop: Header=BB550_62 Depth=1
	subs	x20, x21, #255                  // =255
	b.mi	.LBB550_61
// %bb.66:                              // %"$89"
                                        //   in Loop: Header=BB550_62 Depth=1
	mov	w21, #255
	b	.LBB550_61
.LBB550_67:                             // %"$88"
	ldr	x8, [x22, :lo12:($PutBin)]
	b	.LBB550_35
.Lfunc_end550:
	.size	binPrint, .Lfunc_end550-binPrint
	.cfi_endproc
                                        // -- End function
	.globl	getPlio                         // -- Begin function getPlio
	.p2align	4
	.type	getPlio,@function
getPlio:                                // @getPlio
	.cfi_startproc
// %bb.0:                               // %"$1"
	adrp	x8, ($Ptr)
	ldr	x9, [x8, :lo12:($Ptr)]
	add	x10, x9, #1                     // =1
	str	x10, [x8, :lo12:($Ptr)]
	ldrb	w0, [x9]
	ret
.Lfunc_end551:
	.size	getPlio, .Lfunc_end551-getPlio
	.cfi_endproc
                                        // -- End function
	.globl	prCnt                           // -- Begin function prCnt
	.p2align	4
	.type	prCnt,@function
prCnt:                                  // @prCnt
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-32]!                // 8-byte Folded Spill
	stp	x20, x19, [sp, #16]             // 16-byte Folded Spill
	.cfi_def_cfa_offset 32
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w30, -32
	mov	x19, x1
	mov	x8, x1
	lsr	x8, x8, #8
	cbz	x8, .LBB552_2
.LBB552_1:                              // %"$3"
                                        // =>This Inner Loop Header: Depth=1
	add	w0, w0, #4                      // =4
	lsr	x8, x8, #8
	cbnz	x8, .LBB552_1
.LBB552_2:                              // %"$4"
	adrp	x20, ($PutBin)
	ldr	x8, [x20, :lo12:($PutBin)]
	blr	x8
.LBB552_3:                              // %"$5"
                                        // =>This Inner Loop Header: Depth=1
	ldr	x8, [x20, :lo12:($PutBin)]
	mov	w0, w19
	blr	x8
	lsr	x19, x19, #8
	cbnz	x19, .LBB552_3
// %bb.4:                               // %"$7"
	ldp	x20, x19, [sp, #16]             // 16-byte Folded Reload
	ldr	x30, [sp], #32                  // 8-byte Folded Reload
	ret
.Lfunc_end552:
	.size	prCnt, .Lfunc_end552-prCnt
	.cfi_endproc
                                        // -- End function
	.globl	findSym                         // -- Begin function findSym
	.p2align	4
	.type	findSym,@function
findSym:                                // @findSym
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x30, x21, [sp, #-32]!           // 16-byte Folded Spill
	stp	x20, x19, [sp, #16]             // 16-byte Folded Spill
	.cfi_def_cfa_offset 32
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w30, -32
	mov	x19, x2
	mov	x20, x1
	mov	x21, x0
	tst	x19, #0xf
	b.ne	.LBB553_3
.LBB553_1:                              // %"$3"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w9, w8, [x19]
	bfi	x9, x8, #32, #32
	ldp	w9, w8, [x9]
	bfi	x9, x8, #32, #32
	ldp	w1, w8, [x9, #8]
	bfi	x1, x8, #32, #32
	mov	x0, x20
	bl	isIntern
	cmp	x21, x0
	b.eq	.LBB553_4
// %bb.2:                               // %"$6"
                                        //   in Loop: Header=BB553_1 Depth=1
	ldp	w19, w8, [x19, #8]
	bfi	x19, x8, #32, #32
	tst	x19, #0xf
	b.eq	.LBB553_1
.LBB553_3:
	mov	w0, wzr
	b	.LBB553_5
.LBB553_4:
	mov	w0, #1
.LBB553_5:                              // %"$4"
	ldp	x20, x19, [sp, #16]             // 16-byte Folded Reload
	ldp	x30, x21, [sp], #32             // 16-byte Folded Reload
	ret
.Lfunc_end553:
	.size	findSym, .Lfunc_end553-findSym
	.cfi_endproc
                                        // -- End function
	.globl	sizeErr                         // -- Begin function sizeErr
	.p2align	4
	.type	sizeErr,@function
sizeErr:                                // @sizeErr
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	adrp	x2, .L$136
	add	x2, x2, :lo12:.L$136
	mov	x1, xzr
	mov	x3, xzr
	bl	err
.Lfunc_end554:
	.size	sizeErr, .Lfunc_end554-sizeErr
	.cfi_endproc
                                        // -- End function
	.globl	prin                            // -- Begin function prin
	.p2align	4
	.type	prin,@function
prin:                                   // @prin
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-32]!                // 8-byte Folded Spill
	stp	x20, x19, [sp, #16]             // 16-byte Folded Spill
	.cfi_def_cfa_offset 32
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w30, -32
	mov	x19, x0
	adrp	x8, ($Signal)
	ldr	w8, [x8, :lo12:($Signal)]
	cbz	w8, .LBB555_2
// %bb.1:                               // %"$2"
	mov	x0, xzr
	bl	sighandler
.LBB555_2:                              // %"$3"
	adrp	x20, SymTab+8
	add	x20, x20, :lo12:SymTab+8
	cmp	x19, x20
	b.eq	.LBB555_19
// %bb.3:                               // %"$4"
	tbz	w19, #1, .LBB555_5
// %bb.4:                               // %"$8"
	mov	x0, x19
	bl	outNum
	b	.LBB555_19
.LBB555_5:                              // %"$7"
	tbz	w19, #2, .LBB555_7
// %bb.6:                               // %"$10"
	mov	x0, x19
	mov	x1, #-1
	mov	w2, wzr
	mov	w3, wzr
	mov	x4, xzr
	bl	fmtNum
	b	.LBB555_19
.LBB555_7:                              // %"$9"
	tst	x19, #0xf
	b.eq	.LBB555_14
// %bb.8:                               // %"$11"
	ldp	w19, w8, [x19, #-8]
	bfi	x19, x8, #32, #32
	tbz	w19, #3, .LBB555_12
// %bb.9:                               // %"$21"
	adrp	x20, ($Put)
	ldr	x8, [x20, :lo12:($Put)]
	mov	w0, #123
	blr	x8
	and	x0, x19, #0xfffffffffffffff7
	tst	x0, #0x6
	b.ne	.LBB555_11
.LBB555_10:                             // %"$23"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w0, w8, [x0, #8]
	bfi	x0, x8, #32, #32
	tst	x0, #0x6
	b.eq	.LBB555_10
.LBB555_11:                             // %"$24"
	bl	prExt
	ldr	x8, [x20, :lo12:($Put)]
	mov	w0, #125
	blr	x8
	b	.LBB555_19
.LBB555_12:                             // %"$25"
                                        // =>This Inner Loop Header: Depth=1
	tst	x19, #0x6
	b.ne	.LBB555_18
// %bb.13:                              // %"$26"
                                        //   in Loop: Header=BB555_12 Depth=1
	ldp	w19, w8, [x19, #8]
	bfi	x19, x8, #32, #32
	b	.LBB555_12
.LBB555_14:                             // %"$12"
	mov	x8, sp
	adrp	x9, ($StkLimit)
	ldr	x9, [x9, :lo12:($StkLimit)]
	cmp	x9, x8
	b.hi	.LBB555_20
.LBB555_15:                             // %"$15"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w0, w8, [x19]
	bfi	x0, x8, #32, #32
	bl	prin
	ldp	w19, w8, [x19, #8]
	bfi	x19, x8, #32, #32
	cmp	x19, x20
	b.eq	.LBB555_19
// %bb.16:                              // %"$16"
                                        //   in Loop: Header=BB555_15 Depth=1
	tst	x19, #0xf
	b.eq	.LBB555_15
// %bb.17:                              // %"$19"
	mov	x0, x19
	bl	prin
	b	.LBB555_19
.LBB555_18:                             // %"$27"
	mov	x0, x19
	bl	prName
.LBB555_19:                             // %"$5"
	ldp	x20, x19, [sp, #16]             // 16-byte Folded Reload
	ldr	x30, [sp], #32                  // 8-byte Folded Reload
	ret
.LBB555_20:                             // %"$13"
	mov	x0, xzr
	bl	stkErr
.Lfunc_end555:
	.size	prin, .Lfunc_end555-prin
	.cfi_endproc
                                        // -- End function
	.globl	prName                          // -- Begin function prName
	.p2align	4
	.type	prName,@function
prName:                                 // @prName
	.cfi_startproc
// %bb.0:                               // %"$1"
	sub	sp, sp, #32                     // =32
	stp	x30, x19, [sp, #16]             // 16-byte Folded Spill
	.cfi_def_cfa_offset 32
	.cfi_offset w19, -8
	.cfi_offset w30, -16
	stp	xzr, x0, [sp]
	adrp	x19, ($Put)
.LBB556_1:                              // %"$2"
                                        // =>This Inner Loop Header: Depth=1
	mov	x0, sp
	bl	symByte
	tst	w0, #0xff
	b.eq	.LBB556_3
// %bb.2:                               // %"$3"
                                        //   in Loop: Header=BB556_1 Depth=1
	ldr	x8, [x19, :lo12:($Put)]
	blr	x8
	b	.LBB556_1
.LBB556_3:                              // %"$4"
	ldp	x30, x19, [sp, #16]             // 16-byte Folded Reload
	add	sp, sp, #32                     // =32
	ret
.Lfunc_end556:
	.size	prName, .Lfunc_end556-prName
	.cfi_endproc
                                        // -- End function
	.globl	memcmp                          // -- Begin function memcmp
	.p2align	4
	.type	memcmp,@function
memcmp:                                 // @memcmp
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	adrp	x0, .L$32
	add	x0, x0, :lo12:.L$32
	bl	"pr-libc"
	mov	w0, wzr
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end557:
	.size	memcmp, .Lfunc_end557-memcmp
	.cfi_endproc
                                        // -- End function
	.globl	eol                             // -- Begin function eol
	.p2align	4
	.type	eol,@function
eol:                                    // @eol
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	tbnz	w0, #31, .LBB558_6
// %bb.1:                               // %"$3"
	cmp	w0, #13                         // =13
	b.eq	.LBB558_4
// %bb.2:                               // %"$3"
	cmp	w0, #10                         // =10
	b.eq	.LBB558_5
// %bb.3:
	mov	w0, wzr
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.LBB558_4:                              // %"$8"
	adrp	x8, ($Get)
	ldr	x8, [x8, :lo12:($Get)]
	blr	x8
	cmp	w0, #10                         // =10
	b.ne	.LBB558_6
.LBB558_5:                              // %"$9"
	adrp	x8, ($Chr)
	str	wzr, [x8, :lo12:($Chr)]
.LBB558_6:                              // %"$2"
	mov	w0, #1
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end558:
	.size	eol, .Lfunc_end558-eol
	.cfi_endproc
                                        // -- End function
	.globl	firstChar                       // -- Begin function firstChar
	.p2align	4
	.type	firstChar,@function
firstChar:                              // @firstChar
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-16]!           // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	adrp	x8, SymTab+8
	add	x8, x8, :lo12:SymTab+8
	cmp	x0, x8
	b.eq	.LBB559_2
// %bb.1:                               // %"$3"
	ldp	w8, w9, [x0, #-8]
	bfi	x8, x9, #32, #32
	tbz	w8, #3, .LBB559_3
.LBB559_2:
	mov	w0, wzr
	b	.LBB559_6
.LBB559_3:                              // %"$7"
                                        // =>This Inner Loop Header: Depth=1
	tst	x8, #0x6
	b.ne	.LBB559_5
// %bb.4:                               // %"$8"
                                        //   in Loop: Header=BB559_3 Depth=1
	ldp	w8, w9, [x8, #8]
	bfi	x8, x9, #32, #32
	b	.LBB559_3
.LBB559_5:                              // %"$9"
	mov	x9, sp
	sub	x0, x9, #16                     // =16
	mov	sp, x0
	stp	wzr, wzr, [x9, #-16]
	lsr	x10, x8, #32
	stp	w8, w10, [x9, #-8]
	bl	symChar
.LBB559_6:                              // %"$2"
	mov	sp, x29
	ldp	x29, x30, [sp], #16             // 16-byte Folded Reload
	ret
.Lfunc_end559:
	.size	firstChar, .Lfunc_end559-firstChar
	.cfi_endproc
                                        // -- End function
	.globl	atomErr                         // -- Begin function atomErr
	.p2align	4
	.type	atomErr,@function
atomErr:                                // @atomErr
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	adrp	x2, .L$117
	add	x2, x2, :lo12:.L$117
	mov	x3, xzr
	bl	err
.Lfunc_end560:
	.size	atomErr, .Lfunc_end560-atomErr
	.cfi_endproc
                                        // -- End function
	.globl	stdinByte                       // -- Begin function stdinByte
	.p2align	4
	.type	stdinByte,@function
stdinByte:                              // @stdinByte
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	adrp	x8, ($Get)
	ldr	x8, [x8, :lo12:($Get)]
	blr	x8
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end561:
	.size	stdinByte, .Lfunc_end561-stdinByte
	.cfi_endproc
                                        // -- End function
	.globl	meta                            // -- Begin function meta
	.p2align	4
	.type	meta,@function
meta:                                   // @meta
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x30, x23, [sp, #-48]!           // 16-byte Folded Spill
	stp	x22, x21, [sp, #16]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #32]             // 16-byte Folded Spill
	.cfi_def_cfa_offset 48
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w30, -48
	mov	x20, x1
	mov	x21, x0
	adrp	x23, ($StkLimit)
	adrp	x19, SymTab+8
	add	x19, x19, :lo12:SymTab+8
	b	.LBB562_2
.LBB562_1:                              // %"$7"
                                        //   in Loop: Header=BB562_2 Depth=1
	ldp	w21, w8, [x21, #8]
	bfi	x21, x8, #32, #32
.LBB562_2:                              // %"$2"
                                        // =>This Inner Loop Header: Depth=1
	tst	x21, #0xf
	b.ne	.LBB562_8
// %bb.3:                               // %"$3"
                                        //   in Loop: Header=BB562_2 Depth=1
	ldr	w22, [x21]
	eor	w8, w22, #0x8
	tst	x8, #0xe
	b.ne	.LBB562_1
// %bb.4:                               // %"$6"
                                        //   in Loop: Header=BB562_2 Depth=1
	ldr	w8, [x21, #4]
	bfi	x22, x8, #32, #32
	mov	x0, x22
	mov	x1, x20
	bl	get
	cmp	x0, x19
	b.ne	.LBB562_7
// %bb.5:                               // %"$8"
                                        //   in Loop: Header=BB562_2 Depth=1
	mov	x8, sp
	ldr	x9, [x23, :lo12:($StkLimit)]
	cmp	x9, x8
	b.hi	.LBB562_9
// %bb.6:                               // %"$11"
                                        //   in Loop: Header=BB562_2 Depth=1
	ldp	w0, w8, [x22]
	bfi	x0, x8, #32, #32
	mov	x1, x20
	bl	meta
	cmp	x0, x19
	b.eq	.LBB562_1
.LBB562_7:
	mov	x19, x0
.LBB562_8:                              // %"$4"
	mov	x0, x19
	ldp	x20, x19, [sp, #32]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #16]             // 16-byte Folded Reload
	ldp	x30, x23, [sp], #48             // 16-byte Folded Reload
	ret
.LBB562_9:                              // %"$10"
	mov	x0, xzr
	bl	stkErr
.Lfunc_end562:
	.size	meta, .Lfunc_end562-meta
	.cfi_endproc
                                        // -- End function
	.globl	getn                            // -- Begin function getn
	.p2align	4
	.type	getn,@function
getn:                                   // @getn
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-32]!                // 8-byte Folded Spill
	stp	x20, x19, [sp, #16]             // 16-byte Folded Spill
	.cfi_def_cfa_offset 32
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w30, -32
	mov	x19, x1
	tst	x1, #0x6
	b.ne	.LBB563_18
// %bb.1:                               // %"$3"
	mov	x20, x2
	tst	x19, #0xf
	b.eq	.LBB563_6
// %bb.2:                               // %"$5"
	ldurb	w8, [x19, #-8]
	tbz	w8, #3, .LBB563_4
// %bb.3:                               // %"$26"
	mov	x1, x19
	bl	dbFetch
.LBB563_4:                              // %"$27"
	mov	x0, x19
	mov	x1, x20
	bl	get
.LBB563_5:                              // %"$6"
	ldp	x20, x19, [sp, #16]             // 16-byte Folded Reload
	ldr	x30, [sp], #32                  // 8-byte Folded Reload
	ret
.LBB563_6:                              // %"$4"
	tst	x20, #0x6
	b.eq	.LBB563_9
// %bb.7:                               // %"$8"
	cmp	x20, #2                         // =2
	b.ne	.LBB563_14
// %bb.8:
	adrp	x0, SymTab+8
	add	x0, x0, :lo12:SymTab+8
	b	.LBB563_5
.LBB563_9:                              // %"$10.preheader"
	adrp	x0, SymTab+8
	add	x0, x0, :lo12:SymTab+8
.LBB563_10:                             // %"$10"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w8, w9, [x19]
	bfi	x8, x9, #32, #32
	tst	x8, #0xf
	b.eq	.LBB563_12
// %bb.11:                              //   in Loop: Header=BB563_10 Depth=1
	mov	w9, wzr
	cbz	w9, .LBB563_13
	b	.LBB563_17
.LBB563_12:                             // %"$12"
                                        //   in Loop: Header=BB563_10 Depth=1
	ldp	w10, w9, [x8]
	bfi	x10, x9, #32, #32
	cmp	x20, x10
	cset	w9, eq
	cbnz	w9, .LBB563_17
.LBB563_13:                             // %"$13"
                                        //   in Loop: Header=BB563_10 Depth=1
	ldp	w19, w8, [x19, #8]
	bfi	x19, x8, #32, #32
	tst	x19, #0xf
	b.eq	.LBB563_10
	b	.LBB563_5
.LBB563_14:                             // %"$19"
	lsr	x8, x20, #4
	sub	x8, x8, #1                      // =1
	cbz	x8, .LBB563_16
.LBB563_15:                             // %"$21"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w19, w9, [x19, #8]
	bfi	x19, x9, #32, #32
	sub	x8, x8, #1                      // =1
	cbnz	x8, .LBB563_15
.LBB563_16:                             // %"$22"
	add	x8, x19, #8                     // =8
	tst	w20, #0x8
	csel	x8, x19, x8, eq
	ldp	w0, w9, [x8]
	bfi	x0, x9, #32, #32
	b	.LBB563_5
.LBB563_17:                             // %"$15"
	ldp	w0, w9, [x8, #8]
	bfi	x0, x9, #32, #32
	b	.LBB563_5
.LBB563_18:                             // %"$2"
	mov	x1, x19
	bl	argErr
.Lfunc_end563:
	.size	getn, .Lfunc_end563-getn
	.cfi_endproc
                                        // -- End function
	.globl	wipe                            // -- Begin function wipe
	.p2align	4
	.type	wipe,@function
wipe:                                   // @wipe
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	eor	w8, w1, #0x8
	tst	x8, #0xe
	b.ne	.LBB564_9
// %bb.1:                               // %"$3"
	ldp	w9, w8, [x1, #-8]
	bfi	x9, x8, #32, #32
	and	x8, x9, #0xfffffffffffffff7
	tst	x8, #0x6
	b.ne	.LBB564_3
.LBB564_2:                              // %"$5"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w8, w10, [x8, #8]
	bfi	x8, x10, #32, #32
	tst	x8, #0x6
	b.eq	.LBB564_2
.LBB564_3:                              // %"$6"
	tbz	w9, #3, .LBB564_8
// %bb.4:                               // %"$8"
	adds	x8, x8, x8
	b.hs	.LBB564_7
// %bb.5:                               // %"$10"
	adds	x8, x8, x8
	b.lo	.LBB564_7
// %bb.6:                               // %"$12"
	adrp	x9, SymTab+8
	add	x9, x9, :lo12:SymTab+8
	lsr	x10, x9, #32
	stp	w9, w10, [x1]
	lsr	x9, x8, #2
	orr	w9, w9, #0x8
	lsr	x8, x8, #34
	stp	w9, w8, [x1, #-8]
.LBB564_7:                              // %"$9"
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.LBB564_8:                              // %"$7"
	adrp	x9, SymTab+8
	add	x9, x9, :lo12:SymTab+8
	lsr	x10, x9, #32
	stp	w9, w10, [x1]
	lsr	x9, x8, #32
	stp	w8, w9, [x1, #-8]
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.LBB564_9:                              // %"$2"
	bl	symErr
.Lfunc_end564:
	.size	wipe, .Lfunc_end564-wipe
	.cfi_endproc
                                        // -- End function
	.globl	prop                            // -- Begin function prop
	.p2align	4
	.type	prop,@function
prop:                                   // @prop
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x30, x21, [sp, #-32]!           // 16-byte Folded Spill
	stp	x20, x19, [sp, #16]             // 16-byte Folded Spill
	.cfi_def_cfa_offset 32
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w30, -32
	mov	x19, x0
	ldp	w20, w8, [x0, #-8]
	bfi	x20, x8, #32, #32
	tst	x20, #0x6
	b.eq	.LBB565_3
.LBB565_1:                              // %"$3"
	adrp	x0, SymTab+8
	add	x0, x0, :lo12:SymTab+8
	bl	cons
	mov	x21, x0
	tbz	w20, #3, .LBB565_6
// %bb.2:                               // %"$27"
	and	x1, x20, #0xfffffffffffffff7
	mov	x0, x21
	bl	cons
	orr	x0, x0, #0x8
	b	.LBB565_7
.LBB565_3:                              // %"$2"
	and	x8, x20, #0xfffffffffffffff7
	ldp	w0, w9, [x8]
	bfi	x0, x9, #32, #32
	tst	x0, #0xf
	b.eq	.LBB565_9
// %bb.4:                               // %"$4"
	cmp	x1, x0
	b.ne	.LBB565_11
// %bb.5:                               // %"$7"
	mov	x0, x1
	b	.LBB565_8
.LBB565_6:                              // %"$28"
	mov	x0, x21
	mov	x1, x20
	bl	cons
.LBB565_7:                              // %"$29"
	lsr	x8, x0, #32
	stp	w0, w8, [x19, #-8]
	mov	x0, x21
.LBB565_8:                              // %"$9"
	ldp	x20, x19, [sp, #16]             // 16-byte Folded Reload
	ldp	x30, x21, [sp], #32             // 16-byte Folded Reload
	ret
.LBB565_9:                              // %"$5"
	ldp	w10, w9, [x0, #8]
	bfi	x10, x9, #32, #32
	cmp	x1, x10
	b.ne	.LBB565_11
	b	.LBB565_8
.LBB565_10:                             // %"$15"
                                        //   in Loop: Header=BB565_11 Depth=1
	ldp	w11, w10, [x0, #8]
	bfi	x11, x10, #32, #32
	cmp	x1, x11
	b.eq	.LBB565_16
.LBB565_11:                             // %"$11"
                                        // =>This Inner Loop Header: Depth=1
	mov	x9, x8
	ldp	w8, w10, [x8, #8]
	bfi	x8, x10, #32, #32
	tst	x8, #0xf
	b.ne	.LBB565_1
// %bb.12:                              // %"$12"
                                        //   in Loop: Header=BB565_11 Depth=1
	ldp	w0, w10, [x8]
	bfi	x0, x10, #32, #32
	tst	x0, #0xf
	b.eq	.LBB565_10
// %bb.13:                              // %"$14"
                                        //   in Loop: Header=BB565_11 Depth=1
	cmp	x1, x0
	b.ne	.LBB565_11
// %bb.14:                              // %"$17"
	ldp	w10, w11, [x8, #8]
	stp	w10, w11, [x9, #8]
	tbz	w20, #3, .LBB565_18
// %bb.15:                              // %"$20"
	and	x9, x20, #0xfffffffffffffff7
	lsr	x10, x20, #32
	stp	w9, w10, [x8, #8]
	orr	x8, x8, #0x8
	b	.LBB565_19
.LBB565_16:                             // %"$22"
	ldp	w10, w11, [x8, #8]
	stp	w10, w11, [x9, #8]
	tbz	w20, #3, .LBB565_20
// %bb.17:                              // %"$25"
	and	x9, x20, #0xfffffffffffffff7
	lsr	x10, x20, #32
	stp	w9, w10, [x8, #8]
	orr	x8, x8, #0x8
	b	.LBB565_21
.LBB565_18:                             // %"$19"
	lsr	x9, x20, #32
	stp	w20, w9, [x8, #8]
.LBB565_19:                             // %"$21"
	lsr	x9, x8, #32
	stp	w8, w9, [x19, #-8]
	mov	x0, x1
	b	.LBB565_8
.LBB565_20:                             // %"$24"
	lsr	x9, x20, #32
	stp	w20, w9, [x8, #8]
.LBB565_21:                             // %"$26"
	lsr	x9, x8, #32
	stp	w8, w9, [x19, #-8]
	b	.LBB565_8
.Lfunc_end565:
	.size	prop, .Lfunc_end565-prop
	.cfi_endproc
                                        // -- End function
	.globl	putn                            // -- Begin function putn
	.p2align	4
	.type	putn,@function
putn:                                   // @putn
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	tst	x2, #0x6
	b.eq	.LBB566_5
// %bb.1:                               // %"$3"
	cmp	x2, #2                          // =2
	b.eq	.LBB566_13
// %bb.2:                               // %"$14"
	lsr	x8, x2, #4
	sub	x8, x8, #1                      // =1
.LBB566_3:                              // %"$15"
                                        // =>This Inner Loop Header: Depth=1
	cbz	x8, .LBB566_10
// %bb.4:                               // %"$16"
                                        //   in Loop: Header=BB566_3 Depth=1
	ldp	w1, w9, [x1, #8]
	bfi	x1, x9, #32, #32
	and	x9, x1, #0xf
	sub	x8, x8, #1                      // =1
	cbz	x9, .LBB566_3
	b	.LBB566_9
.LBB566_5:                              // %"$5"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w8, w9, [x1]
	bfi	x8, x9, #32, #32
	tst	x8, #0xf
	b.eq	.LBB566_7
// %bb.6:                               //   in Loop: Header=BB566_5 Depth=1
	mov	w9, wzr
	cbz	w9, .LBB566_8
	b	.LBB566_11
.LBB566_7:                              // %"$7"
                                        //   in Loop: Header=BB566_5 Depth=1
	ldp	w10, w9, [x8]
	bfi	x10, x9, #32, #32
	cmp	x2, x10
	cset	w9, eq
	cbnz	w9, .LBB566_11
.LBB566_8:                              // %"$8"
                                        //   in Loop: Header=BB566_5 Depth=1
	ldp	w1, w8, [x1, #8]
	bfi	x1, x8, #32, #32
	tst	x1, #0xf
	b.eq	.LBB566_5
.LBB566_9:                              // %"$11"
	mov	x1, x2
	bl	itemErr
.LBB566_10:                             // %"$17"
	add	x8, x1, #8                      // =8
	tst	w2, #0x8
	csel	x8, x1, x8, eq
	b	.LBB566_12
.LBB566_11:                             // %"$10"
	add	x8, x8, #8                      // =8
.LBB566_12:                             // %"$2"
	lsr	x9, x3, #32
	stp	w3, w9, [x8]
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.LBB566_13:                             // %"$13"
	mov	x1, x2
	bl	argErr
.Lfunc_end566:
	.size	putn, .Lfunc_end566-putn
	.cfi_endproc
                                        // -- End function
	.globl	itemErr                         // -- Begin function itemErr
	.p2align	4
	.type	itemErr,@function
itemErr:                                // @itemErr
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	adrp	x2, .L$121
	add	x2, x2, :lo12:.L$121
	mov	x3, xzr
	bl	err
.Lfunc_end567:
	.size	itemErr, .Lfunc_end567-itemErr
	.cfi_endproc
                                        // -- End function
	.globl	consTree                        // -- Begin function consTree
	.p2align	4
	.type	consTree,@function
consTree:                               // @consTree
	.cfi_startproc
// %bb.0:                               // %"$1"
	tst	x0, #0xf
	b.eq	.LBB568_2
// %bb.1:                               // %"$4"
	mov	x0, x1
	ret
.LBB568_2:                              // %"$3"
	stp	x29, x30, [sp, #-64]!           // 16-byte Folded Spill
	str	x23, [sp, #16]                  // 8-byte Folded Spill
	stp	x22, x21, [sp, #32]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #48]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 64
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -48
	.cfi_offset w30, -56
	.cfi_offset w29, -64
	mov	x19, x0
	mov	x9, sp
	sub	x20, x9, #16                    // =16
	mov	sp, x20
	lsr	x10, x0, #32
	adrp	x8, env
	add	x8, x8, :lo12:env
	stp	w19, w10, [x9, #-16]
	ldr	x10, [x8]
	lsr	x11, x10, #32
	stp	w10, w11, [x9, #-8]
	str	x20, [x8]
	mov	x9, sp
	sub	x21, x9, #16                    // =16
	mov	sp, x21
	lsr	x10, x1, #32
	stp	w1, w10, [x9, #-16]
	ldr	x10, [x8]
	lsr	x11, x10, #32
	stp	w10, w11, [x9, #-8]
	str	x21, [x8]
	mov	x9, sp
	sub	x22, x9, #16                    // =16
	mov	sp, x22
	mov	w10, #10
	stp	w10, wzr, [x9, #-16]
	ldr	x10, [x8]
	lsr	x11, x10, #32
	stp	w10, w11, [x9, #-8]
	mov	x9, x22
.LBB568_3:                              // %"$6"
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB568_4 Depth 2
                                        //       Child Loop BB568_6 Depth 3
	lsr	x10, x9, #32
	stp	w9, w10, [x8]
	ldp	w9, w8, [x19, #8]
	bfi	x9, x8, #32, #32
	ldp	w10, w8, [x9, #8]
	bfi	x10, x8, #32, #32
	tst	x10, #0xf
	b.eq	.LBB568_10
.LBB568_4:                              // %"$9"
                                        //   Parent Loop BB568_3 Depth=1
                                        // =>  This Loop Header: Depth=2
                                        //       Child Loop BB568_6 Depth 3
	lsr	x23, x19, #32
	stp	w19, w23, [x20]
	ldp	w0, w8, [x19]
	bfi	x0, x8, #32, #32
	ldp	w1, w8, [x21]
	bfi	x1, x8, #32, #32
	bl	cons
	lsr	x8, x0, #32
	stp	w0, w8, [x21]
	ldp	w8, w9, [x19, #8]
	bfi	x8, x9, #32, #32
	ldp	w9, w10, [x8]
	bfi	x9, x10, #32, #32
	tst	x9, #0xf
	b.eq	.LBB568_11
// %bb.5:                               //   in Loop: Header=BB568_4 Depth=2
	mov	x8, x19
.LBB568_6:                              // %"$13"
                                        //   Parent Loop BB568_3 Depth=1
                                        //     Parent Loop BB568_4 Depth=2
                                        // =>    This Inner Loop Header: Depth=3
	ldp	w19, w9, [x22]
	bfi	x19, x9, #32, #32
	cmp	x19, #10                        // =10
	b.eq	.LBB568_12
// %bb.7:                               // %"$15"
                                        //   in Loop: Header=BB568_6 Depth=3
	tbz	w19, #3, .LBB568_9
// %bb.8:                               // %"$16"
                                        //   in Loop: Header=BB568_6 Depth=3
	and	x9, x19, #0xfffffffffffffff7
	ldp	w11, w10, [x9, #8]
	bfi	x11, x10, #32, #32
	ldp	w10, w12, [x11]
	stp	w10, w12, [x22]
	lsr	x10, x8, #32
	stp	w8, w10, [x11]
	lsr	x8, x19, #32
	stp	w9, w8, [x20]
	mov	x8, x9
	b	.LBB568_6
.LBB568_9:                              // %"$18"
                                        //   in Loop: Header=BB568_4 Depth=2
	ldp	w10, w9, [x19, #8]
	bfi	x10, x9, #32, #32
	ldr	w9, [x10, #8]!
	ldr	w11, [x10, #4]
	stp	w9, w11, [x22]
	lsr	x9, x8, #32
	stp	w8, w9, [x10]
	b	.LBB568_4
.LBB568_10:                             // %"$7"
                                        //   in Loop: Header=BB568_3 Depth=1
	ldp	w11, w12, [x22]
	mov	x8, x22
	stp	w11, w12, [x9, #8]
	mov	x9, x19
	mov	x19, x10
	b	.LBB568_3
.LBB568_11:                             // %"$12"
                                        //   in Loop: Header=BB568_3 Depth=1
	ldp	w10, w11, [x22]
	stp	w10, w11, [x8]
	orr	w8, w19, #0x8
	stp	w8, w23, [x22]
	mov	x8, x20
	mov	x19, x9
	b	.LBB568_3
.LBB568_12:                             // %"$14"
	ldp	w9, w8, [x20, #8]
	bfi	x9, x8, #32, #32
	adrp	x8, env
	str	x9, [x8, :lo12:env]
	ldp	w0, w8, [x21]
	bfi	x0, x8, #32, #32
	mov	sp, x29
	ldp	x20, x19, [sp, #48]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #32]             // 16-byte Folded Reload
	ldr	x23, [sp, #16]                  // 8-byte Folded Reload
	ldp	x29, x30, [sp], #64             // 16-byte Folded Reload
	ret
.Lfunc_end568:
	.size	consTree, .Lfunc_end568-consTree
	.cfi_endproc
                                        // -- End function
	.globl	idxGet                          // -- Begin function idxGet
	.p2align	4
	.type	idxGet,@function
idxGet:                                 // @idxGet
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x30, x21, [sp, #-32]!           // 16-byte Folded Spill
	stp	x20, x19, [sp, #16]             // 16-byte Folded Spill
	.cfi_def_cfa_offset 32
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w30, -32
	mov	x19, x1
	adrp	x21, SymTab+8
	add	x21, x21, :lo12:SymTab+8
.LBB569_1:                              // %"$2"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w20, w8, [x0]
	bfi	x20, x8, #32, #32
	tst	x20, #0xf
	b.ne	.LBB569_5
// %bb.2:                               // %"$3"
                                        //   in Loop: Header=BB569_1 Depth=1
	ldp	w0, w8, [x20]
	bfi	x0, x8, #32, #32
	mov	x1, x19
	bl	compare
	cbz	x0, .LBB569_6
// %bb.3:                               // %"$6"
                                        //   in Loop: Header=BB569_1 Depth=1
	mov	x8, x0
	ldp	w0, w9, [x20, #8]
	bfi	x0, x9, #32, #32
	tbz	x8, #63, .LBB569_1
// %bb.4:                               // %"$8"
                                        //   in Loop: Header=BB569_1 Depth=1
	add	x0, x0, #8                      // =8
	b	.LBB569_1
.LBB569_5:
	mov	x20, x21
.LBB569_6:                              // %"$4"
	mov	x0, x20
	ldp	x20, x19, [sp, #16]             // 16-byte Folded Reload
	ldp	x30, x21, [sp], #32             // 16-byte Folded Reload
	ret
.Lfunc_end569:
	.size	idxGet, .Lfunc_end569-idxGet
	.cfi_endproc
                                        // -- End function
	.globl	idxDel                          // -- Begin function idxDel
	.p2align	4
	.type	idxDel,@function
idxDel:                                 // @idxDel
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x30, x23, [sp, #-48]!           // 16-byte Folded Spill
	stp	x22, x21, [sp, #16]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #32]             // 16-byte Folded Spill
	.cfi_def_cfa_offset 48
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w30, -48
	mov	x21, x1
	mov	x20, x0
	adrp	x22, SymTab+8
	add	x22, x22, :lo12:SymTab+8
.LBB570_1:                              // %"$2"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w19, w8, [x20]
	bfi	x19, x8, #32, #32
	tst	x19, #0xf
	b.ne	.LBB570_6
// %bb.2:                               // %"$3"
                                        //   in Loop: Header=BB570_1 Depth=1
	ldp	w23, w8, [x19, #8]
	bfi	x23, x8, #32, #32
	ldp	w0, w8, [x19]
	bfi	x0, x8, #32, #32
	mov	x1, x21
	bl	compare
	cbz	x0, .LBB570_7
// %bb.3:                               // %"$6"
                                        //   in Loop: Header=BB570_1 Depth=1
	tst	x23, #0xf
	b.ne	.LBB570_6
// %bb.4:                               // %"$19"
                                        //   in Loop: Header=BB570_1 Depth=1
	mov	x20, x23
	tbz	x0, #63, .LBB570_1
// %bb.5:                               // %"$22"
                                        //   in Loop: Header=BB570_1 Depth=1
	add	x20, x23, #8                    // =8
	b	.LBB570_1
.LBB570_6:
	mov	x19, x22
	b	.LBB570_12
.LBB570_7:                              // %"$7"
	ldrb	w8, [x23]
	tst	w8, #0xf
	b.eq	.LBB570_9
// %bb.8:                               // %"$10"
	ldp	w8, w9, [x23, #8]
	b	.LBB570_11
.LBB570_9:                              // %"$9"
	ldrb	w8, [x23, #8]
	tst	w8, #0xf
	b.eq	.LBB570_13
// %bb.10:                              // %"$12"
	ldp	w8, w9, [x23]
.LBB570_11:                             // %"$4"
	stp	w8, w9, [x20]
.LBB570_12:                             // %"$4"
	mov	x0, x19
	ldp	x20, x19, [sp, #32]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #16]             // 16-byte Folded Reload
	ldp	x30, x23, [sp], #48             // 16-byte Folded Reload
	ret
.LBB570_13:                             // %"$11"
	ldp	w8, w9, [x23, #8]
	bfi	x8, x9, #32, #32
	ldp	w9, w10, [x8, #8]
	bfi	x9, x10, #32, #32
	ldrb	w10, [x9]
	tst	w10, #0xf
	b.eq	.LBB570_15
// %bb.14:                              // %"$13"
	ldp	w10, w8, [x8]
	stp	w10, w8, [x19]
	ldp	w10, w8, [x19, #8]
	bfi	x10, x8, #32, #32
	ldp	w8, w9, [x9, #8]
	stp	w8, w9, [x10, #8]
	b	.LBB570_12
.LBB570_15:                             // %"$14"
	ldp	w9, w10, [x9]
	bfi	x9, x10, #32, #32
.LBB570_16:                             // %"$16"
                                        // =>This Inner Loop Header: Depth=1
	mov	x10, x9
	ldp	w9, w11, [x9, #8]
	bfi	x9, x11, #32, #32
	ldrb	w11, [x9]
	tst	w11, #0xf
	b.ne	.LBB570_18
// %bb.17:                              // %"$17"
                                        //   in Loop: Header=BB570_16 Depth=1
	ldp	w9, w8, [x9]
	bfi	x9, x8, #32, #32
	mov	x8, x10
	b	.LBB570_16
.LBB570_18:                             // %"$18"
	ldp	w11, w10, [x10]
	stp	w11, w10, [x19]
	ldp	w8, w10, [x8, #8]
	bfi	x8, x10, #32, #32
	ldp	w10, w9, [x9, #8]
	stp	w10, w9, [x8]
	b	.LBB570_12
.Lfunc_end570:
	.size	idxDel, .Lfunc_end570-idxDel
	.cfi_endproc
                                        // -- End function
	.globl	chopExtNm                       // -- Begin function chopExtNm
	.p2align	4
	.type	chopExtNm,@function
chopExtNm:                              // @chopExtNm
	.cfi_startproc
// %bb.0:                               // %"$1"
	sub	sp, sp, #48                     // =48
	stp	x30, x21, [sp, #16]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #32]             // 16-byte Folded Spill
	.cfi_def_cfa_offset 48
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w30, -32
	mov	x19, x0
	adrp	x8, SymTab+8
	add	x8, x8, :lo12:SymTab+8
	adrp	x20, env
	ldr	x9, [x20, :lo12:env]
	stp	x8, x9, [sp]
	mov	x8, sp
	str	x8, [x20, :lo12:env]
	bl	objId
	b	.LBB571_3
.LBB571_1:                              //   in Loop: Header=BB571_3 Depth=1
	mov	x21, x9
.LBB571_2:                              // %"$4"
                                        //   in Loop: Header=BB571_3 Depth=1
	mov	w0, #2
	bfi	x0, x8, #4, #22
	mov	x1, xzr
	bl	consSym
	ldr	x1, [sp]
	bl	cons
	str	x0, [sp]
	lsr	x0, x21, #3
	cbz	x0, .LBB571_6
.LBB571_3:                              // %"$2"
                                        // =>This Inner Loop Header: Depth=1
	mov	w8, #48
	bfxil	x8, x0, #0, #3
	lsr	x9, x0, #3
	cbz	x9, .LBB571_1
// %bb.4:                               // %"$3"
                                        //   in Loop: Header=BB571_3 Depth=1
	lsl	x8, x8, #8
	bfxil	x8, x0, #3, #3
	orr	x8, x8, #0x30
	lsr	x21, x9, #3
	cbz	x21, .LBB571_2
// %bb.5:                               // %"$5"
                                        //   in Loop: Header=BB571_3 Depth=1
	lsl	x8, x8, #8
	bfxil	x8, x9, #3, #3
	orr	x8, x8, #0x30
	b	.LBB571_2
.LBB571_6:                              // %"$8"
	mov	x0, x19
	bl	objFile
	cbz	w0, .LBB571_11
// %bb.7:                               // %"$11.preheader"
	mov	w8, wzr
.LBB571_8:                              // %"$11"
                                        // =>This Inner Loop Header: Depth=1
	and	w9, w0, #0xf
	orr	w8, w9, w8
	orr	w8, w8, #0x40
	lsr	w0, w0, #4
	cbz	w0, .LBB571_10
// %bb.9:                               // %"$12"
                                        //   in Loop: Header=BB571_8 Depth=1
	lsl	w8, w8, #8
	b	.LBB571_8
.LBB571_10:                             // %"$13"
	sxtw	x8, w8
	mov	w0, #2
	bfi	x0, x8, #4, #60
	bl	consStr
	ldr	x1, [sp]
	bl	cons
	str	x0, [sp]
.LBB571_11:                             // %"$10"
	ldp	x0, x8, [sp]
	str	x8, [x20, :lo12:env]
	ldp	x20, x19, [sp, #32]             // 16-byte Folded Reload
	ldp	x30, x21, [sp, #16]             // 16-byte Folded Reload
	add	sp, sp, #48                     // =48
	ret
.Lfunc_end571:
	.size	chopExtNm, .Lfunc_end571-chopExtNm
	.cfi_endproc
                                        // -- End function
	.globl	dbZap                           // -- Begin function dbZap
	.p2align	4
	.type	dbZap,@function
dbZap:                                  // @dbZap
	.cfi_startproc
// %bb.0:                               // %"$1"
	ldp	w8, w9, [x0, #-8]
	bfi	x8, x9, #32, #32
	tst	x8, #0x6
	b.ne	.LBB572_4
// %bb.1:                               // %"$2"
	and	x8, x8, #0xfffffffffffffff7
.LBB572_2:                              // %"$4"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w8, w9, [x8, #8]
	bfi	x8, x9, #32, #32
	tst	x8, #0x6
	b.eq	.LBB572_2
// %bb.3:                               // %"$6"
	orr	x8, x8, #0x8
.LBB572_4:                              // %"$3"
	orr	x9, x8, #0xc000000000000000
	lsr	x9, x9, #32
	stp	w8, w9, [x0, #-8]
	adrp	x8, SymTab+8
	add	x8, x8, :lo12:SymTab+8
	lsr	x9, x8, #32
	stp	w8, w9, [x0]
	ret
.Lfunc_end572:
	.size	dbZap, .Lfunc_end572-dbZap
	.cfi_endproc
                                        // -- End function
	.globl	unintern                        // -- Begin function unintern
	.p2align	4
	.type	unintern,@function
unintern:                               // @unintern
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x30, x23, [sp, #-48]!           // 16-byte Folded Spill
	stp	x22, x21, [sp, #16]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #32]             // 16-byte Folded Spill
	.cfi_def_cfa_offset 48
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w30, -48
	mov	x20, x1
	mov	x19, x0
	tbz	w20, #1, .LBB573_9
.LBB573_1:                              // %"$5"
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB573_3 Depth 2
	ldp	w0, w8, [x2]
	bfi	x0, x8, #32, #32
	tst	x0, #0xf
	b.ne	.LBB573_23
// %bb.2:                               // %"$6"
                                        //   in Loop: Header=BB573_1 Depth=1
	ldp	w8, w9, [x0]
	bfi	x8, x9, #32, #32
	sub	x9, x8, #8                      // =8
.LBB573_3:                              // %"$8"
                                        //   Parent Loop BB573_1 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	w9, w10, [x9]
	bfi	x9, x10, #32, #32
	tst	x9, #0x6
	b.ne	.LBB573_5
// %bb.4:                               // %"$9"
                                        //   in Loop: Header=BB573_3 Depth=2
	add	x9, x9, #8                      // =8
	b	.LBB573_3
.LBB573_5:                              // %"$10"
                                        //   in Loop: Header=BB573_1 Depth=1
	cmp	x20, x9
	b.eq	.LBB573_18
// %bb.6:                               // %"$11"
                                        //   in Loop: Header=BB573_1 Depth=1
	ldp	w2, w8, [x0, #8]
	bfi	x2, x8, #32, #32
	tst	x2, #0xf
	b.ne	.LBB573_23
// %bb.7:                               // %"$15"
                                        //   in Loop: Header=BB573_1 Depth=1
	cmp	x20, x9
	b.ls	.LBB573_1
// %bb.8:                               // %"$16"
                                        //   in Loop: Header=BB573_1 Depth=1
	add	x2, x2, #8                      // =8
	b	.LBB573_1
.LBB573_9:                              // %"$3"
	add	x21, x2, #8                     // =8
.LBB573_10:                             // %"$19"
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB573_12 Depth 2
	ldp	w22, w8, [x21]
	bfi	x22, x8, #32, #32
	tst	x22, #0xf
	b.ne	.LBB573_23
// %bb.11:                              // %"$20"
                                        //   in Loop: Header=BB573_10 Depth=1
	ldp	w23, w8, [x22]
	bfi	x23, x8, #32, #32
	sub	x8, x23, #8                     // =8
.LBB573_12:                             // %"$22"
                                        //   Parent Loop BB573_10 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	w0, w9, [x8]
	bfi	x0, x9, #32, #32
	tst	x0, #0x6
	b.ne	.LBB573_14
// %bb.13:                              // %"$23"
                                        //   in Loop: Header=BB573_12 Depth=2
	add	x8, x0, #8                      // =8
	b	.LBB573_12
.LBB573_14:                             // %"$24"
                                        //   in Loop: Header=BB573_10 Depth=1
	mov	x1, x20
	bl	cmpLong
	cbz	x0, .LBB573_20
// %bb.15:                              // %"$25"
                                        //   in Loop: Header=BB573_10 Depth=1
	ldp	w21, w8, [x22, #8]
	bfi	x21, x8, #32, #32
	tst	x21, #0xf
	b.ne	.LBB573_23
// %bb.16:                              // %"$29"
                                        //   in Loop: Header=BB573_10 Depth=1
	tbz	x0, #63, .LBB573_10
// %bb.17:                              // %"$30"
                                        //   in Loop: Header=BB573_10 Depth=1
	add	x21, x21, #8                    // =8
	b	.LBB573_10
.LBB573_18:                             // %"$12"
	cmp	x8, x19
	b.ne	.LBB573_23
// %bb.19:                              // %"$13"
	mov	x1, x2
	b	.LBB573_22
.LBB573_20:                             // %"$26"
	cmp	x23, x19
	b.ne	.LBB573_23
// %bb.21:                              // %"$27"
	mov	x0, x22
	mov	x1, x21
.LBB573_22:                             // %"$4"
	bl	delNode
.LBB573_23:                             // %"$4"
	ldp	x20, x19, [sp, #32]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #16]             // 16-byte Folded Reload
	ldp	x30, x23, [sp], #48             // 16-byte Folded Reload
	ret
.Lfunc_end573:
	.size	unintern, .Lfunc_end573-unintern
	.cfi_endproc
                                        // -- End function
	.globl	delNode                         // -- Begin function delNode
	.p2align	4
	.type	delNode,@function
delNode:                                // @delNode
	.cfi_startproc
// %bb.0:                               // %"$1"
	ldp	w8, w9, [x0, #8]
	bfi	x8, x9, #32, #32
	ldrb	w9, [x8]
	tst	w9, #0xf
	b.eq	.LBB574_2
// %bb.1:                               // %"$4"
	ldp	w8, w9, [x8, #8]
	stp	w8, w9, [x1]
	ret
.LBB574_2:                              // %"$3"
	ldrb	w9, [x8, #8]
	tst	w9, #0xf
	b.eq	.LBB574_4
// %bb.3:                               // %"$6"
	ldp	w8, w9, [x8]
	stp	w8, w9, [x1]
	ret
.LBB574_4:                              // %"$5"
	ldp	w9, w10, [x8, #8]
	bfi	x9, x10, #32, #32
	ldp	w8, w10, [x9, #8]
	bfi	x8, x10, #32, #32
	ldrb	w10, [x8]
	tst	w10, #0xf
	b.eq	.LBB574_6
// %bb.5:                               // %"$8"
	ldp	w10, w9, [x9]
	stp	w10, w9, [x0]
	ldp	w10, w9, [x0, #8]
	bfi	x10, x9, #32, #32
	ldp	w8, w9, [x8, #8]
	stp	w8, w9, [x10, #8]
	ret
.LBB574_6:                              // %"$9"
                                        // =>This Inner Loop Header: Depth=1
	mov	x10, x9
	ldp	w9, w11, [x8]
	bfi	x9, x11, #32, #32
	ldp	w8, w11, [x9, #8]
	bfi	x8, x11, #32, #32
	ldrb	w11, [x8]
	tst	w11, #0xf
	b.eq	.LBB574_6
// %bb.7:                               // %"$12"
	ldp	w11, w9, [x9]
	stp	w11, w9, [x0]
	ldp	w10, w9, [x10, #8]
	bfi	x10, x9, #32, #32
	ldp	w8, w9, [x8, #8]
	stp	w8, w9, [x10]
	ret
.Lfunc_end574:
	.size	delNode, .Lfunc_end574-delNode
	.cfi_endproc
                                        // -- End function
	.globl	funq                            // -- Begin function funq
	.p2align	4
	.type	funq,@function
funq:                                   // @funq
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-48]!                // 8-byte Folded Spill
	stp	x22, x21, [sp, #16]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #32]             // 16-byte Folded Spill
	.cfi_def_cfa_offset 48
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w30, -48
	mov	x19, x0
	tbnz	w19, #1, .LBB575_4
// %bb.1:                               // %"$3"
	mov	w8, #1
	ubfx	x9, x19, #3, #1
	tst	w19, #0x4
	csel	w8, w8, w9, ne
	tbnz	w8, #0, .LBB575_3
// %bb.2:                               // %"$7"
	mov	x0, x19
	bl	circ
	cbz	x0, .LBB575_5
.LBB575_3:
	mov	x19, xzr
.LBB575_4:                              // %"$2"
	mov	x0, x19
	ldp	x20, x19, [sp, #32]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #16]             // 16-byte Folded Reload
	ldr	x30, [sp], #48                  // 8-byte Folded Reload
	ret
.LBB575_5:                              // %"$9"
	ldp	w8, w9, [x19, #8]
	adrp	x21, SymTab+8
	add	x21, x21, :lo12:SymTab+8
	bfi	x8, x9, #32, #32
	adrp	x22, SymTab+216
	add	x22, x22, :lo12:SymTab+216
	b	.LBB575_7
.LBB575_6:                              // %"$39"
                                        //   in Loop: Header=BB575_7 Depth=1
	cmp	x8, x21
	b.ne	.LBB575_3
.LBB575_7:                              // %"$11"
                                        // =>This Inner Loop Header: Depth=1
	tst	x8, #0xf
	b.ne	.LBB575_14
// %bb.8:                               // %"$12"
                                        //   in Loop: Header=BB575_7 Depth=1
	ldp	w9, w10, [x8]
	bfi	x9, x10, #32, #32
	ldp	w8, w10, [x8, #8]
	bfi	x8, x10, #32, #32
	tst	x9, #0xf
	b.ne	.LBB575_6
// %bb.9:                               // %"$38"
                                        //   in Loop: Header=BB575_7 Depth=1
	ldrb	w10, [x9]
	tst	w10, #0x6
	b.eq	.LBB575_11
// %bb.10:                              // %"$41"
                                        //   in Loop: Header=BB575_7 Depth=1
	tst	x8, #0xf
	b.ne	.LBB575_7
	b	.LBB575_3
.LBB575_11:                             // %"$42"
                                        //   in Loop: Header=BB575_7 Depth=1
	ldp	w11, w10, [x9]
	bfi	x11, x10, #32, #32
	cmp	x11, x21
	b.ne	.LBB575_13
// %bb.12:                              //   in Loop: Header=BB575_7 Depth=1
	mov	w9, #1
	tbz	w9, #0, .LBB575_7
	b	.LBB575_3
.LBB575_13:                             // %"$47"
                                        //   in Loop: Header=BB575_7 Depth=1
	ldp	w9, w10, [x9]
	bfi	x9, x10, #32, #32
	cmp	x9, x22
	cset	w9, eq
	tbz	w9, #0, .LBB575_7
	b	.LBB575_3
.LBB575_14:                             // %"$14"
	cmp	x8, x21
	b.ne	.LBB575_3
// %bb.15:                              // %"$16"
	ldp	w20, w8, [x19]
	bfi	x20, x8, #32, #32
	cmp	x20, x21
	b.ne	.LBB575_17
// %bb.16:
	add	x19, x21, #208                  // =208
	b	.LBB575_4
.LBB575_17:                             // %"$18"
	adrp	x8, SymTab+40
	add	x8, x8, :lo12:SymTab+40
	cmp	x20, x8
	b.eq	.LBB575_3
// %bb.18:                              // %"$20"
	mov	x0, x20
	bl	circ
	cbnz	x0, .LBB575_3
// %bb.19:                              // %"$24.preheader"
	mov	w9, #1
	mov	x8, x20
.LBB575_20:                             // %"$24"
                                        // =>This Inner Loop Header: Depth=1
	tst	x8, #0xf
	b.ne	.LBB575_22
// %bb.21:                              // %"$25"
                                        //   in Loop: Header=BB575_20 Depth=1
	mov	x19, xzr
	ldp	w11, w10, [x8]
	eor	w12, w11, #0x8
	bfi	x11, x10, #32, #32
	ldp	w8, w10, [x8, #8]
	bfi	x8, x10, #32, #32
	cmp	x11, x22
	cset	w10, eq
	cmp	x11, x21
	csel	w10, w9, w10, eq
	tst	x12, #0xe
	csel	w10, w9, w10, ne
	tbz	w10, #0, .LBB575_20
	b	.LBB575_4
.LBB575_22:                             // %"$27"
	cmp	x8, x22
	cset	w9, eq
	tst	x8, #0x6
	mov	w8, #1
	csel	w8, w8, w9, ne
	tst	w8, #0x1
	csel	x19, xzr, x20, ne
	b	.LBB575_4
.Lfunc_end575:
	.size	funq, .Lfunc_end575-funq
	.cfi_endproc
                                        // -- End function
	.globl	initSeed                        // -- Begin function initSeed
	.p2align	4
	.type	initSeed,@function
initSeed:                               // @initSeed
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-32]!                // 8-byte Folded Spill
	stp	x20, x19, [sp, #16]             // 16-byte Folded Spill
	.cfi_def_cfa_offset 32
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w30, -32
	mov	x20, x0
	mov	x19, xzr
	tst	x20, #0xf
	b.ne	.LBB576_2
.LBB576_1:                              // %"$3"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w0, w8, [x20]
	bfi	x0, x8, #32, #32
	ldp	w20, w8, [x20, #8]
	bfi	x20, x8, #32, #32
	bl	initSeed
	add	x19, x19, x0
	tst	x20, #0xf
	b.eq	.LBB576_1
.LBB576_2:                              // %"$4"
	adrp	x8, SymTab+8
	add	x8, x8, :lo12:SymTab+8
	cmp	x20, x8
	b.eq	.LBB576_10
// %bb.3:                               // %"$5"
	tst	x20, #0x6
	b.eq	.LBB576_11
.LBB576_4:                              // %"$8"
	tbz	w20, #1, .LBB576_6
// %bb.5:                               // %"$12"
	lsr	x8, x20, #3
	b	.LBB576_9
.LBB576_6:                              // %"$13"
	and	x8, x20, #0xfffffffffffffff7
	tst	w20, #0x8
	csel	x8, x20, x8, eq
	cinc	x19, x19, ne
.LBB576_7:                              // %"$17"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w10, w9, [x8, #-4]
	bfi	x10, x9, #32, #32
	add	x19, x19, x10
	ldp	w8, w9, [x8, #4]
	bfi	x8, x9, #32, #32
	tbz	w8, #1, .LBB576_7
// %bb.8:                               // %"$19"
	lsr	x8, x8, #4
.LBB576_9:                              // %"$14"
	add	x19, x19, x8
.LBB576_10:                             // %"$6"
	mov	x0, x19
	ldp	x20, x19, [sp, #16]             // 16-byte Folded Reload
	ldr	x30, [sp], #32                  // 8-byte Folded Reload
	ret
.LBB576_11:                             // %"$7"
	ldp	w9, w8, [x20, #-8]
	bfi	x9, x8, #32, #32
	and	x20, x9, #0xfffffffffffffff7
	tst	x20, #0x6
	b.ne	.LBB576_4
.LBB576_12:                             // %"$10"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w20, w8, [x20, #8]
	bfi	x20, x8, #32, #32
	tst	x20, #0x6
	b.eq	.LBB576_12
	b	.LBB576_4
.Lfunc_end576:
	.size	initSeed, .Lfunc_end576-initSeed
	.cfi_endproc
                                        // -- End function
	.globl	mulu                            // -- Begin function mulu
	.p2align	4
	.type	mulu,@function
mulu:                                   // @mulu
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-96]!           // 16-byte Folded Spill
	stp	x28, x27, [sp, #16]             // 16-byte Folded Spill
	stp	x26, x25, [sp, #32]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #48]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #64]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #80]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	mov	x19, x0
	cmp	x0, #2                          // =2
	b.eq	.LBB577_41
// %bb.1:                               // %"$3"
	mov	x21, x1
	tbz	w19, #1, .LBB577_5
// %bb.2:                               // %"$6"
	lsr	x22, x19, #4
	tbz	w21, #1, .LBB577_7
// %bb.3:                               // %"$7"
	lsr	x9, x21, #4
	umulh	x8, x22, x9
	mul	x0, x22, x9
	mov	w9, #1
	tst	x0, #0xf000000000000000
	cset	w10, ne
	cmp	x8, #0                          // =0
	csel	w9, w9, w10, ne
	cbz	w9, .LBB577_17
// %bb.4:                               // %"$12"
	mov	w1, #2
	bfi	x1, x8, #4, #60
	bl	consNum
	mov	x19, x0
	b	.LBB577_41
.LBB577_5:                              // %"$5"
	cmp	x21, #2                         // =2
	b.ne	.LBB577_8
// %bb.6:
	mov	x19, x21
	b	.LBB577_41
.LBB577_7:
	mov	x19, x21
	b	.LBB577_10
.LBB577_8:                              // %"$23"
	tbz	w21, #1, .LBB577_18
// %bb.9:                               // %"$26"
	lsr	x22, x21, #4
.LBB577_10:                             // %"$-1"
	mov	x21, x19
	ldp	w9, w8, [x19, #-4]
	bfi	x9, x8, #32, #32
	umulh	x23, x22, x9
	mul	x0, x22, x9
	bl	boxNum
	mov	x19, x0
	adrp	x25, env
	add	x25, x25, :lo12:env
	ldr	x8, [x25]
	mov	x9, sp
	sub	x20, x9, #16                    // =16
	mov	sp, x20
	lsr	x10, x0, #32
	lsr	x11, x8, #32
	mov	x0, x20
	stp	w19, w10, [x9, #-16]
	mov	x24, x19
	stp	w8, w11, [x9, #-8]
.LBB577_11:                             // %"$15"
                                        // =>This Inner Loop Header: Depth=1
	lsr	x8, x0, #32
	stp	w0, w8, [x25]
	ldp	w21, w8, [x21, #4]
	bfi	x21, x8, #32, #32
	tbz	w21, #2, .LBB577_13
// %bb.12:                              // %"$16"
                                        //   in Loop: Header=BB577_11 Depth=1
	ldp	w9, w8, [x21, #-4]
	bfi	x9, x8, #32, #32
	mul	x8, x22, x9
	adds	x0, x8, x23
	umulh	x8, x22, x9
	cinc	x23, x8, hs
	add	x25, x24, #4                    // =4
	bl	boxNum
	mov	x24, x0
	b	.LBB577_11
.LBB577_13:                             // %"$17"
	lsr	x8, x21, #4
	umulh	x9, x22, x8
	mul	x8, x22, x8
	adds	x0, x8, x23
	cinc	x8, x9, hs
	mov	w9, #1
	tst	x0, #0xf000000000000000
	cset	w10, ne
	cmp	x8, #0                          // =0
	csel	w9, w9, w10, ne
	cbz	w9, .LBB577_15
// %bb.14:                              // %"$20"
	mov	w1, #2
	bfi	x1, x8, #4, #60
	bl	consNum
	mov	x8, x0
	b	.LBB577_16
.LBB577_15:                             // %"$21"
	mov	w8, #2
	bfi	x8, x0, #4, #60
.LBB577_16:                             // %"$22"
	lsr	x9, x8, #32
	stp	w8, w9, [x24, #4]
	ldp	w9, w8, [x20, #8]
	bfi	x9, x8, #32, #32
	adrp	x8, env
	str	x9, [x8, :lo12:env]
	b	.LBB577_41
.LBB577_17:                             // %"$13"
	mov	w19, #2
	bfi	x19, x0, #4, #60
	b	.LBB577_41
.LBB577_18:                             // %"$25"
	mov	x0, xzr
	bl	boxNum
	mov	x20, x0
	adrp	x22, env
	ldr	x8, [x22, :lo12:env]
	mov	x9, sp
	sub	x23, x9, #16                    // =16
	mov	sp, x23
	lsr	x10, x0, #32
	lsr	x11, x8, #32
	stp	w20, w10, [x9, #-16]
	stp	w8, w11, [x9, #-8]
	mov	x24, x0
	str	x23, [x22, :lo12:env]
	b	.LBB577_22
.LBB577_19:                             // %"$37"
                                        //   in Loop: Header=BB577_22 Depth=1
	add	x25, x9, #4                     // =4
.LBB577_20:                             // %"$38"
                                        //   in Loop: Header=BB577_22 Depth=1
	lsr	x9, x8, #32
	stp	w8, w9, [x25]
.LBB577_21:                             // %"$35"
                                        //   in Loop: Header=BB577_22 Depth=1
	ldp	w24, w8, [x24, #4]
	bfi	x24, x8, #32, #32
	ldp	w21, w8, [x21, #4]
	bfi	x21, x8, #32, #32
	tbnz	w21, #1, .LBB577_30
.LBB577_22:                             // %"$27"
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB577_23 Depth 2
	ldp	w10, w8, [x19, #-4]
	ldp	w11, w9, [x21, #-4]
	bfi	x10, x8, #32, #32
	bfi	x11, x9, #32, #32
	ldp	w8, w12, [x24, #-4]
	mul	x9, x10, x11
	bfi	x8, x12, #32, #32
	adds	x8, x9, x8
	cset	w9, hs
	umulh	x26, x10, x11
	mov	x25, x19
	mov	x27, x24
.LBB577_23:                             // %"$28"
                                        //   Parent Loop BB577_22 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	and	x28, x9, #0x1
	stur	w8, [x27, #-4]
	lsr	x8, x8, #32
	str	w8, [x27]
	ldp	w0, w8, [x27, #4]
	bfi	x0, x8, #32, #32
	tbz	w0, #1, .LBB577_25
// %bb.24:                              // %"$29"
                                        //   in Loop: Header=BB577_23 Depth=2
	mov	x0, xzr
	bl	boxNum
	lsr	x8, x0, #32
	stp	w0, w8, [x27, #4]
.LBB577_25:                             // %"$31"
                                        //   in Loop: Header=BB577_23 Depth=2
	add	x8, x26, x28
	ldp	w25, w9, [x25, #4]
	bfi	x25, x9, #32, #32
	tbnz	w25, #1, .LBB577_27
// %bb.26:                              // %"$32"
                                        //   in Loop: Header=BB577_23 Depth=2
	ldp	w10, w9, [x25, #-4]
	bfi	x10, x9, #32, #32
	ldp	w11, w9, [x21, #-4]
	bfi	x11, x9, #32, #32
	ldp	w12, w9, [x0, #-4]
	bfi	x12, x9, #32, #32
	mul	x9, x10, x11
	adds	x9, x9, x12
	umulh	x10, x10, x11
	cinc	x26, x10, hs
	adds	x8, x9, x8
	cset	w9, hs
	mov	x27, x0
	b	.LBB577_23
.LBB577_27:                             // %"$33"
                                        //   in Loop: Header=BB577_22 Depth=1
	lsr	x9, x25, #4
	ldp	w11, w10, [x21, #-4]
	bfi	x11, x10, #32, #32
	umulh	x10, x9, x11
	mul	x9, x9, x11
	mov	x11, x0
	ldr	w12, [x11, #-4]!
	ldr	w13, [x11, #4]
	bfi	x12, x13, #32, #32
	adds	x9, x9, x12
	cinc	x10, x10, hs
	adds	x9, x9, x8
	cinc	x8, x10, hs
	str	w9, [x11]
	lsr	x9, x9, #32
	str	w9, [x11, #4]
	cbz	x8, .LBB577_21
// %bb.28:                              // %"$34"
                                        //   in Loop: Header=BB577_22 Depth=1
	ldp	w9, w10, [x0, #4]
	bfi	x9, x10, #32, #32
	tbz	w9, #1, .LBB577_19
// %bb.29:                              // %"$36"
                                        //   in Loop: Header=BB577_22 Depth=1
	add	x25, x0, #4                     // =4
	mov	x0, x8
	bl	boxNum
	mov	x8, x0
	b	.LBB577_20
.LBB577_30:                             // %"$40"
	lsr	x21, x21, #4
	ldp	w9, w8, [x19, #-4]
	bfi	x9, x8, #32, #32
	umulh	x25, x9, x21
	mul	x8, x9, x21
	ldp	w10, w9, [x24, #-4]
	bfi	x10, x9, #32, #32
	adds	x8, x8, x10
	cset	w9, hs
.LBB577_31:                             // %"$41"
                                        // =>This Inner Loop Header: Depth=1
	and	x26, x9, #0x1
	stur	w8, [x24, #-4]
	lsr	x8, x8, #32
	str	w8, [x24]
	ldp	w0, w8, [x24, #4]
	bfi	x0, x8, #32, #32
	tbz	w0, #1, .LBB577_33
// %bb.32:                              // %"$42"
                                        //   in Loop: Header=BB577_31 Depth=1
	mov	x0, xzr
	bl	boxNum
	lsr	x8, x0, #32
	stp	w0, w8, [x24, #4]
.LBB577_33:                             // %"$44"
                                        //   in Loop: Header=BB577_31 Depth=1
	add	x8, x25, x26
	ldp	w19, w9, [x19, #4]
	bfi	x19, x9, #32, #32
	tbnz	w19, #1, .LBB577_35
// %bb.34:                              // %"$45"
                                        //   in Loop: Header=BB577_31 Depth=1
	ldp	w10, w9, [x19, #-4]
	bfi	x10, x9, #32, #32
	mul	x9, x10, x21
	ldp	w12, w11, [x0, #-4]
	bfi	x12, x11, #32, #32
	adds	x9, x9, x12
	umulh	x10, x10, x21
	cinc	x25, x10, hs
	adds	x8, x9, x8
	cset	w9, hs
	mov	x24, x0
	b	.LBB577_31
.LBB577_35:                             // %"$46"
	lsr	x9, x19, #4
	umulh	x10, x9, x21
	mul	x9, x9, x21
	mov	x11, x0
	ldr	w12, [x11, #-4]!
	ldr	w13, [x11, #4]
	bfi	x12, x13, #32, #32
	adds	x9, x9, x12
	cinc	x10, x10, hs
	adds	x9, x9, x8
	cinc	x8, x10, hs
	str	w9, [x11]
	lsr	x9, x9, #32
	str	w9, [x11, #4]
	cbz	x8, .LBB577_40
// %bb.36:                              // %"$47"
	ldp	w9, w10, [x0, #4]
	bfi	x9, x10, #32, #32
	tbz	w9, #1, .LBB577_38
// %bb.37:                              // %"$49"
	add	x19, x0, #4                     // =4
	mov	x0, x8
	bl	boxNum
	mov	x8, x0
	b	.LBB577_39
.LBB577_38:                             // %"$50"
	add	x19, x9, #4                     // =4
.LBB577_39:                             // %"$51"
	lsr	x9, x8, #32
	stp	w8, w9, [x19]
.LBB577_40:                             // %"$48"
	mov	x0, x20
	bl	zapZero
	mov	x19, x0
	ldp	w9, w8, [x23, #8]
	bfi	x9, x8, #32, #32
	str	x9, [x22, :lo12:env]
.LBB577_41:                             // %"$2"
	mov	x0, x19
	mov	sp, x29
	ldp	x20, x19, [sp, #80]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #64]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #48]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #32]             // 16-byte Folded Reload
	ldp	x28, x27, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #96             // 16-byte Folded Reload
	ret
.Lfunc_end577:
	.size	mulu, .Lfunc_end577-mulu
	.cfi_endproc
                                        // -- End function
	.globl	twiceBig                        // -- Begin function twiceBig
	.p2align	4
	.type	twiceBig,@function
twiceBig:                               // @twiceBig
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-32]!                // 8-byte Folded Spill
	stp	x20, x19, [sp, #16]             // 16-byte Folded Spill
	.cfi_def_cfa_offset 32
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w30, -32
	mov	x19, x0
	mov	x10, x0
	ldr	w8, [x10, #-4]!
	lsl	w13, w8, #1
	ldp	w12, w9, [x10, #4]
	bfi	x8, x12, #32, #32
	ldr	w12, [x10, #12]
	bfi	x9, x12, #32, #32
	lsr	x11, x8, #31
	stp	w13, w11, [x10]
	mov	x20, x0
	tbz	w9, #2, .LBB578_2
.LBB578_1:                              // %"$3"
                                        // =>This Inner Loop Header: Depth=1
	mov	x20, x9
	ldr	w10, [x9, #-4]!
	ldp	w13, w11, [x9, #8]
	ldr	w12, [x9, #4]
	bfi	x10, x12, #32, #32
	extr	x8, x10, x8, #63
	str	w8, [x9]
	lsr	x8, x8, #32
	str	w8, [x9, #4]
	bfi	x13, x11, #32, #32
	mov	x8, x10
	mov	x9, x13
	tbnz	w9, #2, .LBB578_1
.LBB578_2:                              // %"$4"
	lsr	x9, x9, #4
	extr	x8, x9, x8, #63
	tbz	x8, #60, .LBB578_4
// %bb.3:                               // %"$5"
	mov	x0, x8
	bl	boxNum
	b	.LBB578_5
.LBB578_4:                              // %"$6"
	mov	w0, #2
	bfi	x0, x8, #4, #60
.LBB578_5:                              // %"$7"
	lsr	x8, x0, #32
	stp	w0, w8, [x20, #4]
	mov	x0, x19
	ldp	x20, x19, [sp, #16]             // 16-byte Folded Reload
	ldr	x30, [sp], #32                  // 8-byte Folded Reload
	ret
.Lfunc_end578:
	.size	twiceBig, .Lfunc_end578-twiceBig
	.cfi_endproc
                                        // -- End function
	.globl	xoru                            // -- Begin function xoru
	.p2align	4
	.type	xoru,@function
xoru:                                   // @xoru
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-64]!           // 16-byte Folded Spill
	str	x23, [sp, #16]                  // 8-byte Folded Spill
	stp	x22, x21, [sp, #32]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #48]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 64
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -48
	.cfi_offset w30, -56
	.cfi_offset w29, -64
	mov	x19, x1
	mov	x20, x0
	tbz	w20, #1, .LBB579_3
// %bb.1:                               // %"$4"
	tbz	w19, #1, .LBB579_5
// %bb.2:                               // %"$5"
	eor	x8, x20, x19
	orr	x0, x8, #0x2
	b	.LBB579_17
.LBB579_3:                              // %"$3"
	tbz	w19, #1, .LBB579_7
// %bb.4:                               // %"$9"
	ldp	w8, w9, [x20, #-4]
	bfi	x8, x9, #32, #32
	eor	x0, x8, x19, lsr #4
	ldp	w1, w8, [x20, #4]
	b	.LBB579_6
.LBB579_5:                              // %"$6"
	ldp	w8, w9, [x19, #-4]
	bfi	x8, x9, #32, #32
	eor	x0, x8, x20, lsr #4
	ldp	w1, w8, [x19, #4]
.LBB579_6:                              // %"$2"
	bfi	x1, x8, #32, #32
	bl	consNum
	bl	zapZero
	b	.LBB579_17
.LBB579_7:                              // %"$8"
	ldp	w9, w8, [x20, #-4]
	bfi	x9, x8, #32, #32
	ldp	w10, w8, [x19, #-4]
	bfi	x10, x8, #32, #32
	eor	x0, x9, x10
	bl	boxNum
	mov	x21, x0
	adrp	x23, env
	add	x23, x23, :lo12:env
	ldr	x9, [x23]
	mov	x10, sp
	sub	x22, x10, #16                   // =16
	mov	sp, x22
	lsr	x8, x0, #32
	lsr	x11, x9, #32
	mov	x0, x22
	stp	w21, w8, [x10, #-16]
	mov	x8, x21
	stp	w9, w11, [x10, #-8]
.LBB579_8:                              // %"$10"
                                        // =>This Inner Loop Header: Depth=1
	lsr	x9, x0, #32
	stp	w0, w9, [x23]
	ldp	w20, w9, [x20, #4]
	bfi	x20, x9, #32, #32
	ldp	w19, w9, [x19, #4]
	bfi	x19, x9, #32, #32
	add	x23, x8, #4                     // =4
	tbnz	w20, #1, .LBB579_11
// %bb.9:                               // %"$11"
                                        //   in Loop: Header=BB579_8 Depth=1
	tbnz	w19, #1, .LBB579_13
// %bb.10:                              // %"$17"
                                        //   in Loop: Header=BB579_8 Depth=1
	ldp	w9, w8, [x20, #-4]
	bfi	x9, x8, #32, #32
	ldp	w10, w8, [x19, #-4]
	bfi	x10, x8, #32, #32
	eor	x0, x9, x10
	bl	boxNum
	mov	x8, x0
	b	.LBB579_8
.LBB579_11:                             // %"$13"
	tbz	w19, #1, .LBB579_14
// %bb.12:                              // %"$14"
	eor	x8, x20, x19
	orr	x0, x8, #0x2
	b	.LBB579_16
.LBB579_13:                             // %"$18"
	ldp	w8, w9, [x20, #-4]
	bfi	x8, x9, #32, #32
	eor	x0, x8, x19, lsr #4
	ldp	w1, w8, [x20, #4]
	b	.LBB579_15
.LBB579_14:                             // %"$15"
	ldp	w8, w9, [x19, #-4]
	bfi	x8, x9, #32, #32
	eor	x0, x8, x20, lsr #4
	ldp	w1, w8, [x19, #4]
.LBB579_15:                             // %"$12"
	bfi	x1, x8, #32, #32
	bl	consNum
.LBB579_16:                             // %"$12"
	lsr	x8, x0, #32
	stp	w0, w8, [x23]
	mov	x0, x21
	bl	zapZero
	ldp	w9, w8, [x22, #8]
	bfi	x9, x8, #32, #32
	adrp	x8, env
	str	x9, [x8, :lo12:env]
.LBB579_17:                             // %"$2"
	mov	sp, x29
	ldp	x20, x19, [sp, #48]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #32]             // 16-byte Folded Reload
	ldr	x23, [sp, #16]                  // 8-byte Folded Reload
	ldp	x29, x30, [sp], #64             // 16-byte Folded Reload
	ret
.Lfunc_end579:
	.size	xoru, .Lfunc_end579-xoru
	.cfi_endproc
                                        // -- End function
	.globl	oru                             // -- Begin function oru
	.p2align	4
	.type	oru,@function
oru:                                    // @oru
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-64]!           // 16-byte Folded Spill
	str	x23, [sp, #16]                  // 8-byte Folded Spill
	stp	x22, x21, [sp, #32]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #48]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 64
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -48
	.cfi_offset w30, -56
	.cfi_offset w29, -64
	mov	x20, x1
	mov	x21, x0
	tbz	w21, #1, .LBB580_3
// %bb.1:                               // %"$4"
	tbz	w20, #1, .LBB580_5
// %bb.2:                               // %"$5"
	orr	x19, x21, x20
	b	.LBB580_17
.LBB580_3:                              // %"$3"
	tbz	w20, #1, .LBB580_7
// %bb.4:                               // %"$9"
	ldp	w8, w9, [x21, #-4]
	bfi	x8, x9, #32, #32
	orr	x0, x8, x20, lsr #4
	ldp	w1, w8, [x21, #4]
	b	.LBB580_6
.LBB580_5:                              // %"$6"
	ldp	w8, w9, [x20, #-4]
	bfi	x8, x9, #32, #32
	orr	x0, x8, x21, lsr #4
	ldp	w1, w8, [x20, #4]
.LBB580_6:                              // %"$2"
	bfi	x1, x8, #32, #32
	bl	consNum
	mov	x19, x0
	b	.LBB580_17
.LBB580_7:                              // %"$8"
	ldp	w9, w8, [x21, #-4]
	bfi	x9, x8, #32, #32
	ldp	w10, w8, [x20, #-4]
	bfi	x10, x8, #32, #32
	orr	x0, x9, x10
	bl	boxNum
	mov	x19, x0
	adrp	x23, env
	add	x23, x23, :lo12:env
	ldr	x9, [x23]
	mov	x10, sp
	sub	x22, x10, #16                   // =16
	mov	sp, x22
	lsr	x8, x0, #32
	lsr	x11, x9, #32
	mov	x0, x22
	stp	w19, w8, [x10, #-16]
	mov	x8, x19
	stp	w9, w11, [x10, #-8]
.LBB580_8:                              // %"$10"
                                        // =>This Inner Loop Header: Depth=1
	lsr	x9, x0, #32
	stp	w0, w9, [x23]
	ldp	w21, w9, [x21, #4]
	bfi	x21, x9, #32, #32
	ldp	w20, w9, [x20, #4]
	bfi	x20, x9, #32, #32
	add	x23, x8, #4                     // =4
	tbnz	w21, #1, .LBB580_11
// %bb.9:                               // %"$11"
                                        //   in Loop: Header=BB580_8 Depth=1
	tbnz	w20, #1, .LBB580_13
// %bb.10:                              // %"$17"
                                        //   in Loop: Header=BB580_8 Depth=1
	ldp	w9, w8, [x21, #-4]
	bfi	x9, x8, #32, #32
	ldp	w10, w8, [x20, #-4]
	bfi	x10, x8, #32, #32
	orr	x0, x9, x10
	bl	boxNum
	mov	x8, x0
	b	.LBB580_8
.LBB580_11:                             // %"$13"
	tbz	w20, #1, .LBB580_14
// %bb.12:                              // %"$14"
	orr	x0, x21, x20
	b	.LBB580_16
.LBB580_13:                             // %"$18"
	ldp	w8, w9, [x21, #-4]
	bfi	x8, x9, #32, #32
	orr	x0, x8, x20, lsr #4
	ldp	w1, w8, [x21, #4]
	b	.LBB580_15
.LBB580_14:                             // %"$15"
	ldp	w8, w9, [x20, #-4]
	bfi	x8, x9, #32, #32
	orr	x0, x8, x21, lsr #4
	ldp	w1, w8, [x20, #4]
.LBB580_15:                             // %"$12"
	bfi	x1, x8, #32, #32
	bl	consNum
.LBB580_16:                             // %"$12"
	lsr	x8, x0, #32
	stp	w0, w8, [x23]
	ldp	w9, w8, [x22, #8]
	bfi	x9, x8, #32, #32
	adrp	x8, env
	str	x9, [x8, :lo12:env]
.LBB580_17:                             // %"$2"
	mov	x0, x19
	mov	sp, x29
	ldp	x20, x19, [sp, #48]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #32]             // 16-byte Folded Reload
	ldr	x23, [sp, #16]                  // 8-byte Folded Reload
	ldp	x29, x30, [sp], #64             // 16-byte Folded Reload
	ret
.Lfunc_end580:
	.size	oru, .Lfunc_end580-oru
	.cfi_endproc
                                        // -- End function
	.globl	andu                            // -- Begin function andu
	.p2align	4
	.type	andu,@function
andu:                                   // @andu
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-64]!           // 16-byte Folded Spill
	str	x23, [sp, #16]                  // 8-byte Folded Spill
	stp	x22, x21, [sp, #32]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #48]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 64
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -48
	.cfi_offset w30, -56
	.cfi_offset w29, -64
	mov	x19, x1
	mov	x20, x0
	tbz	w20, #1, .LBB581_4
// %bb.1:                               // %"$4"
	tbnz	w19, #1, .LBB581_3
// %bb.2:                               // %"$6"
	ldp	w9, w8, [x19, #-4]
	bfi	x9, x8, #32, #32
	mov	w19, #2
	bfi	x19, x9, #4, #60
.LBB581_3:                              // %"$7"
	and	x0, x20, x19
	b	.LBB581_15
.LBB581_4:                              // %"$3"
	tbz	w19, #1, .LBB581_6
// %bb.5:                               // %"$9"
	ldp	w9, w8, [x20, #-4]
	bfi	x9, x8, #32, #32
	mov	w8, #2
	bfi	x8, x9, #4, #60
	and	x0, x19, x8
	b	.LBB581_15
.LBB581_6:                              // %"$8"
	ldp	w9, w8, [x20, #-4]
	bfi	x9, x8, #32, #32
	ldp	w10, w8, [x19, #-4]
	bfi	x10, x8, #32, #32
	and	x0, x9, x10
	bl	boxNum
	mov	x21, x0
	adrp	x23, env
	add	x23, x23, :lo12:env
	ldr	x9, [x23]
	mov	x10, sp
	sub	x22, x10, #16                   // =16
	mov	sp, x22
	lsr	x8, x0, #32
	lsr	x11, x9, #32
	mov	x0, x22
	stp	w21, w8, [x10, #-16]
	mov	x8, x21
	stp	w9, w11, [x10, #-8]
.LBB581_7:                              // %"$10"
                                        // =>This Inner Loop Header: Depth=1
	lsr	x9, x0, #32
	stp	w0, w9, [x23]
	ldp	w20, w9, [x20, #4]
	bfi	x20, x9, #32, #32
	ldp	w19, w9, [x19, #4]
	bfi	x19, x9, #32, #32
	tbnz	w20, #1, .LBB581_10
// %bb.8:                               // %"$11"
                                        //   in Loop: Header=BB581_7 Depth=1
	tbnz	w19, #1, .LBB581_13
// %bb.9:                               // %"$17"
                                        //   in Loop: Header=BB581_7 Depth=1
	add	x23, x8, #4                     // =4
	ldp	w9, w8, [x20, #-4]
	bfi	x9, x8, #32, #32
	ldp	w10, w8, [x19, #-4]
	bfi	x10, x8, #32, #32
	and	x0, x9, x10
	bl	boxNum
	mov	x8, x0
	b	.LBB581_7
.LBB581_10:                             // %"$13"
	add	x8, x8, #4                      // =4
	tbnz	w19, #1, .LBB581_12
// %bb.11:                              // %"$15"
	ldp	w10, w9, [x19, #-4]
	bfi	x10, x9, #32, #32
	mov	w19, #2
	bfi	x19, x10, #4, #60
.LBB581_12:                             // %"$16"
	and	x9, x20, x19
	b	.LBB581_14
.LBB581_13:                             // %"$18"
	add	x8, x8, #4                      // =4
	ldp	w10, w9, [x20, #-4]
	bfi	x10, x9, #32, #32
	mov	w9, #2
	bfi	x9, x10, #4, #60
	and	x9, x19, x9
.LBB581_14:                             // %"$12"
	lsr	x10, x9, #32
	stp	w9, w10, [x8]
	mov	x0, x21
	bl	zapZero
	ldp	w9, w8, [x22, #8]
	bfi	x9, x8, #32, #32
	adrp	x8, env
	str	x9, [x8, :lo12:env]
.LBB581_15:                             // %"$2"
	mov	sp, x29
	ldp	x20, x19, [sp, #48]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #32]             // 16-byte Folded Reload
	ldr	x23, [sp, #16]                  // 8-byte Folded Reload
	ldp	x29, x30, [sp], #64             // 16-byte Folded Reload
	ret
.Lfunc_end581:
	.size	andu, .Lfunc_end581-andu
	.cfi_endproc
                                        // -- End function
	.globl	shru                            // -- Begin function shru
	.p2align	4
	.type	shru,@function
shru:                                   // @shru
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-64]!           // 16-byte Folded Spill
	stp	x24, x23, [sp, #16]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #32]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #48]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 64
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w30, -56
	.cfi_offset w29, -64
	mov	x8, x0
	tbz	w8, #1, .LBB582_2
// %bb.1:                               // %"$2"
	lsr	x8, x8, #1
	orr	x8, x8, #0x2
	mov	x9, #-10
	movk	x9, #32767, lsl #48
	and	x19, x8, x9
	b	.LBB582_13
.LBB582_2:                              // %"$3"
	ldp	w9, w10, [x8, #-4]
	ldp	w21, w8, [x8, #4]
	bfi	x9, x10, #32, #32
	lsr	x0, x9, #1
	bfi	x21, x8, #32, #32
	tbz	w21, #2, .LBB582_6
// %bb.3:                               // %"$5"
	ldp	w23, w8, [x21, #-4]
	bfi	x23, x8, #32, #32
	bfi	x0, x23, #63, #1
	bl	boxNum
	mov	x19, x0
	adrp	x24, env
	add	x24, x24, :lo12:env
	ldr	x8, [x24]
	mov	x9, sp
	sub	x20, x9, #16                    // =16
	mov	sp, x20
	lsr	x10, x0, #32
	lsr	x11, x8, #32
	mov	x0, x20
	stp	w19, w10, [x9, #-16]
	mov	x22, x19
	stp	w8, w11, [x9, #-8]
.LBB582_4:                              // %"$8"
                                        // =>This Inner Loop Header: Depth=1
	lsr	x8, x0, #32
	stp	w0, w8, [x24]
	lsr	x0, x23, #1
	ldp	w21, w8, [x21, #4]
	bfi	x21, x8, #32, #32
	tbnz	w21, #1, .LBB582_8
// %bb.5:                               // %"$9"
                                        //   in Loop: Header=BB582_4 Depth=1
	ldp	w23, w8, [x21, #-4]
	bfi	x23, x8, #32, #32
	add	x24, x22, #4                    // =4
	bfi	x0, x23, #63, #1
	bl	boxNum
	mov	x22, x0
	b	.LBB582_4
.LBB582_6:                              // %"$6"
	lsr	x8, x21, #4
	bfi	x0, x8, #63, #1
	lsr	x20, x21, #5
	mov	w8, #1
	tst	x0, #0xf000000000000000
	cset	w9, ne
	cmp	x20, #0                         // =0
	csel	w8, w8, w9, ne
	tbz	w8, #0, .LBB582_10
// %bb.7:                               // %"$19"
	bl	boxNum
	mov	x19, x0
	mov	w8, #2
	bfi	w8, w20, #4, #28
	lsr	x9, x20, #28
	stp	w8, w9, [x0, #4]
	b	.LBB582_13
.LBB582_8:                              // %"$10"
	lsr	x8, x21, #4
	bfi	x0, x8, #63, #1
	lsr	x21, x21, #5
	mov	w8, #1
	tst	x0, #0xf000000000000000
	cset	w9, ne
	cmp	x21, #0                         // =0
	csel	w8, w8, w9, ne
	tbz	w8, #0, .LBB582_11
// %bb.9:                               // %"$14"
	bl	boxNum
	mov	x8, x0
	mov	w9, #2
	bfi	w9, w21, #4, #28
	lsr	x10, x21, #28
	stp	w9, w10, [x0, #4]
	b	.LBB582_12
.LBB582_10:                             // %"$18"
	mov	w19, #2
	bfi	x19, x0, #4, #60
	b	.LBB582_13
.LBB582_11:                             // %"$13"
	mov	w8, #2
	bfi	x8, x0, #4, #60
.LBB582_12:                             // %"$15"
	lsr	x9, x8, #32
	stp	w8, w9, [x22, #4]
	ldp	w9, w8, [x20, #8]
	bfi	x9, x8, #32, #32
	adrp	x8, env
	str	x9, [x8, :lo12:env]
.LBB582_13:                             // %"$4"
	mov	x0, x19
	mov	sp, x29
	ldp	x20, x19, [sp, #48]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #32]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #64             // 16-byte Folded Reload
	ret
.Lfunc_end582:
	.size	shru, .Lfunc_end582-shru
	.cfi_endproc
                                        // -- End function
	.globl	shlu                            // -- Begin function shlu
	.p2align	4
	.type	shlu,@function
shlu:                                   // @shlu
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-80]!           // 16-byte Folded Spill
	str	x25, [sp, #16]                  // 8-byte Folded Spill
	stp	x24, x23, [sp, #32]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #48]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #64]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 80
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -64
	.cfi_offset w30, -72
	.cfi_offset w29, -80
	mov	x20, x0
	tbz	w20, #1, .LBB583_3
// %bb.1:                               // %"$2"
	adds	x8, x20, x20
	b.lo	.LBB583_7
// %bb.2:                               // %"$5"
	lsr	x0, x20, #3
	bl	boxNum
	mov	x19, x0
	b	.LBB583_10
.LBB583_3:                              // %"$3"
	ldp	w23, w8, [x20, #-4]
	bfi	x23, x8, #32, #32
	lsl	x0, x23, #1
	bl	boxNum
	mov	x19, x0
	ldp	w22, w8, [x20, #4]
	bfi	x22, x8, #32, #32
	adrp	x20, env
	ldr	x8, [x20, :lo12:env]
	mov	x9, sp
	sub	x21, x9, #16                    // =16
	mov	sp, x21
	lsr	x10, x0, #32
	lsr	x11, x8, #32
	stp	w19, w10, [x9, #-16]
	stp	w8, w11, [x9, #-8]
	mov	x24, x0
	str	x21, [x20, :lo12:env]
	tbz	w22, #2, .LBB583_5
.LBB583_4:                              // %"$9"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w25, w8, [x22, #-4]
	bfi	x25, x8, #32, #32
	extr	x0, x25, x23, #63
	bl	boxNum
	lsr	x8, x0, #32
	stp	w0, w8, [x24, #4]
	ldp	w22, w8, [x22, #4]
	bfi	x22, x8, #32, #32
	mov	x23, x25
	mov	x24, x0
	tbnz	w22, #2, .LBB583_4
.LBB583_5:                              // %"$10"
	lsr	x8, x22, #4
	extr	x8, x8, x23, #63
	tbz	x8, #60, .LBB583_8
// %bb.6:                               // %"$11"
	mov	x0, x8
	bl	boxNum
	b	.LBB583_9
.LBB583_7:                              // %"$6"
	eor	x19, x8, #0x6
	b	.LBB583_10
.LBB583_8:                              // %"$12"
	mov	w0, #2
	bfi	x0, x8, #4, #60
.LBB583_9:                              // %"$13"
	lsr	x8, x0, #32
	stp	w0, w8, [x24, #4]
	ldp	w9, w8, [x21, #8]
	bfi	x9, x8, #32, #32
	str	x9, [x20, :lo12:env]
.LBB583_10:                             // %"$4"
	mov	x0, x19
	mov	sp, x29
	ldp	x20, x19, [sp, #64]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #48]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #32]             // 16-byte Folded Reload
	ldr	x25, [sp, #16]                  // 8-byte Folded Reload
	ldp	x29, x30, [sp], #80             // 16-byte Folded Reload
	ret
.Lfunc_end583:
	.size	shlu, .Lfunc_end583-shlu
	.cfi_endproc
                                        // -- End function
	.globl	twice                           // -- Begin function twice
	.p2align	4
	.type	twice,@function
twice:                                  // @twice
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	tbz	w0, #1, .LBB584_3
// %bb.1:                               // %"$2"
	adds	x8, x0, x0
	b.lo	.LBB584_4
// %bb.2:                               // %"$5"
	lsr	x0, x0, #3
	bl	boxNum
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.LBB584_3:                              // %"$3"
	bl	twiceBig
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.LBB584_4:                              // %"$6"
	eor	x0, x8, #0x6
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end584:
	.size	twice, .Lfunc_end584-twice
	.cfi_endproc
                                        // -- End function
	.globl	divErr                          // -- Begin function divErr
	.p2align	4
	.type	divErr,@function
divErr:                                 // @divErr
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	adrp	x2, .L$131
	add	x2, x2, :lo12:.L$131
	mov	x1, xzr
	mov	x3, xzr
	bl	err
.Lfunc_end585:
	.size	divErr, .Lfunc_end585-divErr
	.cfi_endproc
                                        // -- End function
	.globl	remu                            // -- Begin function remu
	.p2align	4
	.type	remu,@function
remu:                                   // @remu
	.cfi_startproc
// %bb.0:                               // %"$1"
	tbz	w0, #2, .LBB586_2
// %bb.1:                               // %"$4"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	mov	w2, #1
	bl	div1
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.LBB586_2:                              // %"$3"
	tbnz	w1, #2, .LBB586_4
// %bb.3:                               // %"$5"
	lsr	x8, x0, #4
	lsr	x9, x1, #4
	udiv	x10, x8, x9
	msub	x8, x10, x9, x8
	mov	w0, #2
	bfi	x0, x8, #4, #60
.LBB586_4:                              // %"$2"
	ret
.Lfunc_end586:
	.size	remu, .Lfunc_end586-remu
	.cfi_endproc
                                        // -- End function
	.globl	div1                            // -- Begin function div1
	.p2align	4
	.type	div1,@function
div1:                                   // @div1
	.cfi_startproc
// %bb.0:                               // %"$1"
	sub	sp, sp, #144                    // =144
	stp	x29, x30, [sp, #48]             // 16-byte Folded Spill
	stp	x28, x27, [sp, #64]             // 16-byte Folded Spill
	stp	x26, x25, [sp, #80]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #96]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #112]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #128]            // 16-byte Folded Spill
	.cfi_def_cfa_offset 144
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	mov	w19, w2
	mov	x21, x1
	mov	x22, x0
	adrp	x23, env
	ldr	x8, [x23, :lo12:env]
	mov	w9, #2
	stp	x9, x8, [sp, #32]
	add	x8, sp, #32                     // =32
	str	x8, [x23, :lo12:env]
	ldp	w0, w8, [x0, #-4]
	bfi	x0, x8, #32, #32
	bl	boxNum
	mov	x20, x0
	mov	x25, xzr
	ldr	x8, [x23, :lo12:env]
	stp	x0, x8, [sp, #16]
	add	x8, sp, #16                     // =16
	stp	x21, x8, [sp]
	mov	x8, sp
	str	x8, [x23, :lo12:env]
.LBB587_1:                              // %"$2"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w22, w8, [x22, #4]
	bfi	x22, x8, #32, #32
	tbz	w22, #2, .LBB587_3
// %bb.2:                               // %"$3"
                                        //   in Loop: Header=BB587_1 Depth=1
	ldp	w0, w8, [x22, #-4]
	bfi	x0, x8, #32, #32
	bl	boxNum
	lsr	x8, x0, #32
	stp	w0, w8, [x20, #4]
	add	x25, x25, #1                    // =1
	mov	x20, x0
	b	.LBB587_1
.LBB587_3:                              // %"$4"
	cmp	x22, #2                         // =2
	b.eq	.LBB587_5
// %bb.4:                               // %"$5"
	lsr	x0, x22, #4
	bl	boxNum
	lsr	x8, x0, #32
	stp	w0, w8, [x20, #4]
	add	x25, x25, #1                    // =1
	mov	x20, x0
.LBB587_5:                              // %"$6"
	tbz	w21, #1, .LBB587_7
// %bb.6:                               // %"$7"
	lsr	x0, x21, #4
	bl	boxNum
	mov	x22, x0
	mov	x27, xzr
	str	x0, [sp]
	mov	w26, #1
	b	.LBB587_13
.LBB587_7:                              // %"$8"
	ldp	w0, w8, [x21, #-4]
	bfi	x0, x8, #32, #32
	bl	boxNum
	mov	x22, x0
	mov	x27, xzr
	str	x0, [sp]
	mov	w26, #1
.LBB587_8:                              // %"$10"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w21, w8, [x21, #4]
	bfi	x21, x8, #32, #32
	tbz	w21, #2, .LBB587_10
// %bb.9:                               // %"$11"
                                        //   in Loop: Header=BB587_8 Depth=1
	ldp	w0, w8, [x21, #-4]
	bfi	x0, x8, #32, #32
	bl	boxNum
	lsr	x8, x0, #32
	sub	x25, x25, #1                    // =1
	add	x26, x26, #1                    // =1
	stp	w0, w8, [x22, #4]
	mov	x27, x22
	mov	x22, x0
	b	.LBB587_8
.LBB587_10:                             // %"$12"
	cmp	x21, #2                         // =2
	b.eq	.LBB587_12
// %bb.11:                              // %"$13"
	lsr	x0, x21, #4
	bl	boxNum
	lsr	x8, x0, #32
	sub	x25, x25, #1                    // =1
	add	x26, x26, #1                    // =1
	stp	w0, w8, [x22, #4]
	mov	x27, x22
	mov	x22, x0
.LBB587_12:                             // %"$14"
	tbnz	x25, #63, .LBB587_49
.LBB587_13:                             // %"$9"
	mov	x0, xzr
	bl	boxNum
	mov	x28, xzr
	lsr	x8, x0, #32
	stp	w0, w8, [x20, #4]
.LBB587_14:                             // %"$20"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w9, w8, [x22, #-4]
	bfi	x9, x8, #32, #32
	tbnz	x9, #63, .LBB587_16
// %bb.15:                              // %"$21"
                                        //   in Loop: Header=BB587_14 Depth=1
	ldr	x0, [sp, #16]
	bl	twiceBig
	ldr	x0, [sp]
	bl	twiceBig
	add	x28, x28, #1                    // =1
	b	.LBB587_14
.LBB587_16:                             // %"$22"
	ldp	w20, w8, [x22, #-4]
	bfi	x20, x8, #32, #32
	cbz	x27, .LBB587_18
// %bb.17:                              // %"$23"
	ldp	w27, w8, [x27, #-4]
	bfi	x27, x8, #32, #32
.LBB587_18:                             // %"$26.preheader"
	add	x22, sp, #16                    // =16
	mov	w21, #2
	mov	x8, x25
	b	.LBB587_20
.LBB587_19:                             // %"$27"
                                        //   in Loop: Header=BB587_20 Depth=1
	add	x22, x29, #4                    // =4
.LBB587_20:                             // %"$26"
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB587_22 Depth 2
                                        //     Child Loop BB587_27 Depth 2
                                        //     Child Loop BB587_31 Depth 2
                                        //     Child Loop BB587_39 Depth 2
	ldp	w29, w9, [x22]
	bfi	x29, x9, #32, #32
	subs	x8, x8, #1                      // =1
	b.pl	.LBB587_19
// %bb.21:                              // %"$29.preheader"
                                        //   in Loop: Header=BB587_20 Depth=1
	mov	x22, xzr
	mov	x23, xzr
	mov	x8, x26
	mov	x9, x29
.LBB587_22:                             // %"$29"
                                        //   Parent Loop BB587_20 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	mov	x24, x23
	mov	x23, x22
	ldp	w22, w10, [x9, #-4]
	bfi	x22, x10, #32, #32
	ldp	w9, w10, [x9, #4]
	bfi	x9, x10, #32, #32
	subs	x8, x8, #1                      // =1
	b.pl	.LBB587_22
// %bb.23:                              // %"$31"
                                        //   in Loop: Header=BB587_20 Depth=1
	cmp	x22, x20
	b.ne	.LBB587_25
// %bb.24:                              //   in Loop: Header=BB587_20 Depth=1
	mov	x0, #-1
	b	.LBB587_26
.LBB587_25:                             // %"$33"
                                        //   in Loop: Header=BB587_20 Depth=1
	mov	x0, x23
	mov	x1, x22
	mov	x2, x20
	mov	x3, xzr
	bl	__udivti3
.LBB587_26:                             // %"$34"
                                        //   in Loop: Header=BB587_20 Depth=1
	umulh	x9, x0, x20
	mul	x8, x0, x20
	subs	x8, x23, x8
	cset	w10, lo
	sub	x9, x22, x9
	sub	x9, x9, x10
	cbnz	x9, .LBB587_30
.LBB587_27:                             // %"$36"
                                        //   Parent Loop BB587_20 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	umulh	x10, x0, x27
	cmp	x8, x10
	b.hi	.LBB587_30
// %bb.28:                              // %"$38"
                                        //   in Loop: Header=BB587_27 Depth=2
	mul	x11, x0, x27
	cmp	x24, x11
	cset	w11, hs
	cmp	x8, x10
	csel	w10, wzr, w11, ne
	tbnz	w10, #0, .LBB587_30
// %bb.29:                              // %"$41"
                                        //   in Loop: Header=BB587_27 Depth=2
	sub	x0, x0, #1                      // =1
	adds	x8, x8, x20
	cinc	x9, x9, hs
	cbz	x9, .LBB587_27
.LBB587_30:                             // %"$37"
                                        //   in Loop: Header=BB587_20 Depth=1
	ldr	x8, [sp]
	mov	x9, x29
	ldr	w10, [x9, #-4]!
	ldr	w11, [x9, #4]
	bfi	x10, x11, #32, #32
	ldp	w12, w11, [x8, #-4]
	bfi	x12, x11, #32, #32
	umulh	x11, x0, x12
	mul	x12, x0, x12
	subs	x10, x10, x12
	lsr	x12, x10, #32
	stp	w10, w12, [x9]
	cinc	x10, x11, lo
	mov	x9, x29
.LBB587_31:                             // %"$42"
                                        //   Parent Loop BB587_20 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	w8, w11, [x8, #4]
	bfi	x8, x11, #32, #32
	tbz	w8, #2, .LBB587_33
// %bb.32:                              // %"$43"
                                        //   in Loop: Header=BB587_31 Depth=2
	ldp	w9, w11, [x9, #4]
	bfi	x9, x11, #32, #32
	mov	x11, x9
	ldr	w12, [x11, #-4]!
	ldr	w13, [x11, #4]
	bfi	x12, x13, #32, #32
	subs	x10, x12, x10
	lsr	x12, x10, #32
	stp	w10, w12, [x11]
	ldp	w13, w12, [x8, #-4]
	bfi	x13, x12, #32, #32
	mul	x12, x0, x13
	umulh	x13, x0, x13
	cinc	x13, x13, lo
	subs	x10, x10, x12
	lsr	x12, x10, #32
	stp	w10, w12, [x11]
	cinc	x10, x13, lo
	b	.LBB587_31
.LBB587_33:                             // %"$44"
                                        //   in Loop: Header=BB587_20 Depth=1
	cbz	x10, .LBB587_42
// %bb.34:                              // %"$45"
                                        //   in Loop: Header=BB587_20 Depth=1
	ldp	w9, w8, [x9, #4]
	bfi	x9, x8, #32, #32
	ldr	w8, [x9, #-4]!
	ldr	w11, [x9, #4]
	bfi	x8, x11, #32, #32
	subs	x8, x8, x10
	str	w8, [x9]
	lsr	x8, x8, #32
	str	w8, [x9, #4]
	b.hs	.LBB587_42
// %bb.35:                              // %"$47"
                                        //   in Loop: Header=BB587_20 Depth=1
	sub	x0, x0, #1                      // =1
	tbz	w19, #0, .LBB587_37
// %bb.36:                              //   in Loop: Header=BB587_20 Depth=1
	mov	w8, #1
	cbnz	w8, .LBB587_38
	b	.LBB587_42
.LBB587_37:                             // %"$50"
                                        //   in Loop: Header=BB587_20 Depth=1
	cmp	x25, #0                         // =0
	cset	w8, ne
	cbz	w8, .LBB587_42
.LBB587_38:                             // %"$51"
                                        //   in Loop: Header=BB587_20 Depth=1
	ldr	x8, [sp]
	mov	x10, x29
	ldr	w9, [x10, #-4]!
	ldr	w11, [x29]
	bfi	x9, x11, #32, #32
	ldp	w12, w11, [x8, #-4]
	bfi	x12, x11, #32, #32
	adds	x11, x9, x12
	cset	w9, hs
.LBB587_39:                             // %"$53"
                                        //   Parent Loop BB587_20 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	lsr	x12, x11, #32
	stp	w11, w12, [x10]
	ldp	w29, w10, [x29, #4]
	bfi	x29, x10, #32, #32
	ldp	w8, w10, [x8, #4]
	bfi	x8, x10, #32, #32
	tbnz	w8, #1, .LBB587_41
// %bb.40:                              // %"$54"
                                        //   in Loop: Header=BB587_39 Depth=2
	mov	x10, x29
	ldr	w11, [x10, #-4]!
	ldr	w12, [x29]
	bfi	x11, x12, #32, #32
	ldp	w13, w12, [x8, #-4]
	bfi	x13, x12, #32, #32
	adds	x11, x11, x13
	cset	w12, hs
	and	x9, x9, #0x1
	adds	x11, x11, x9
	cset	w9, hs
	orr	w9, w12, w9
	b	.LBB587_39
.LBB587_41:                             // %"$55"
                                        //   in Loop: Header=BB587_20 Depth=1
	ldr	w8, [x29, #-4]!
	ldr	w10, [x29, #4]
	bfi	x8, x10, #32, #32
	and	x9, x9, #0x1
	add	x8, x8, x9
	str	w8, [x29]
	lsr	x8, x8, #32
	str	w8, [x29, #4]
.LBB587_42:                             // %"$46"
                                        //   in Loop: Header=BB587_20 Depth=1
	add	x22, sp, #16                    // =16
	mov	x1, x21
	bl	consNum
	mov	x21, x0
	str	x0, [sp, #32]
	subs	x25, x25, #1                    // =1
	mov	x8, x25
	b.pl	.LBB587_20
// %bb.43:                              // %"$57"
	tbz	w19, #0, .LBB587_46
// %bb.44:                              // %"$59"
	ldr	x0, [sp, #16]
	bl	zapZero
	cbz	x28, .LBB587_47
.LBB587_45:                             // %"$62"
                                        // =>This Inner Loop Header: Depth=1
	bl	half
	sub	x28, x28, #1                    // =1
	cbnz	x28, .LBB587_45
	b	.LBB587_47
.LBB587_46:                             // %"$58"
	mov	x0, x21
	bl	zapZero
.LBB587_47:
	adrp	x9, env
	ldr	x8, [sp, #40]
	str	x8, [x9, :lo12:env]
.LBB587_48:                             // %"$19"
	ldp	x20, x19, [sp, #128]            // 16-byte Folded Reload
	ldp	x22, x21, [sp, #112]            // 16-byte Folded Reload
	ldp	x24, x23, [sp, #96]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #80]             // 16-byte Folded Reload
	ldp	x28, x27, [sp, #64]             // 16-byte Folded Reload
	ldp	x29, x30, [sp, #48]             // 16-byte Folded Reload
	add	sp, sp, #144                    // =144
	ret
.LBB587_49:                             // %"$15"
	tbz	w19, #0, .LBB587_51
// %bb.50:                              // %"$17"
	ldr	x0, [sp, #16]
	bl	zapZero
	b	.LBB587_52
.LBB587_51:
	mov	w0, #2
.LBB587_52:                             // %"$19"
	ldr	x8, [sp, #40]
	str	x8, [x23, :lo12:env]
	b	.LBB587_48
.Lfunc_end587:
	.size	div1, .Lfunc_end587-div1
	.cfi_endproc
                                        // -- End function
	.globl	divu                            // -- Begin function divu
	.p2align	4
	.type	divu,@function
divu:                                   // @divu
	.cfi_startproc
// %bb.0:                               // %"$1"
	tbz	w0, #2, .LBB588_2
// %bb.1:                               // %"$4"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	mov	w2, wzr
	bl	div1
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.LBB588_2:                              // %"$3"
	tbz	w1, #2, .LBB588_4
// %bb.3:
	mov	w0, #2
	ret
.LBB588_4:                              // %"$5"
	lsr	x8, x0, #4
	lsr	x9, x1, #4
	udiv	x8, x8, x9
	mov	w0, #2
	bfi	x0, x8, #4, #60
	ret
.Lfunc_end588:
	.size	divu, .Lfunc_end588-divu
	.cfi_endproc
                                        // -- End function
	.globl	decs                            // -- Begin function decs
	.p2align	4
	.type	decs,@function
decs:                                   // @decs
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	tbz	w0, #3, .LBB589_2
// %bb.1:                               // %"$2"
	and	x0, x0, #0xfffffffffffffff7
	mov	w1, #18
	bl	addu
	eor	x8, x0, #0x8
	cmp	x0, #2                          // =2
	csel	x0, x0, x8, eq
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.LBB589_2:                              // %"$3"
	mov	w1, #18
	bl	subu
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end589:
	.size	decs, .Lfunc_end589-decs
	.cfi_endproc
                                        // -- End function
	.globl	incs                            // -- Begin function incs
	.p2align	4
	.type	incs,@function
incs:                                   // @incs
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	tbz	w0, #3, .LBB590_2
// %bb.1:                               // %"$2"
	and	x0, x0, #0xfffffffffffffff7
	mov	w1, #18
	bl	subu
	eor	x8, x0, #0x8
	cmp	x0, #2                          // =2
	csel	x0, x0, x8, eq
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.LBB590_2:                              // %"$3"
	mov	w1, #18
	bl	addu
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end590:
	.size	incs, .Lfunc_end590-incs
	.cfi_endproc
                                        // -- End function
	.globl	malloc                          // -- Begin function malloc
	.p2align	4
	.type	malloc,@function
malloc:                                 // @malloc
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	adrp	x0, .L$1
	add	x0, x0, :lo12:.L$1
	bl	"pr-libc"
	mov	x0, xzr
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end591:
	.size	malloc, .Lfunc_end591-malloc
	.cfi_endproc
                                        // -- End function
	.globl	realloc                         // -- Begin function realloc
	.p2align	4
	.type	realloc,@function
realloc:                                // @realloc
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	adrp	x0, .L$2
	add	x0, x0, :lo12:.L$2
	bl	"pr-libc"
	mov	x0, xzr
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end592:
	.size	realloc, .Lfunc_end592-realloc
	.cfi_endproc
                                        // -- End function
	.globl	free                            // -- Begin function free
	.p2align	4
	.type	free,@function
free:                                   // @free
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	adrp	x0, .L$3
	add	x0, x0, :lo12:.L$3
	bl	"pr-libc"
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end593:
	.size	free, .Lfunc_end593-free
	.cfi_endproc
                                        // -- End function
	.globl	fork                            // -- Begin function fork
	.p2align	4
	.type	fork,@function
fork:                                   // @fork
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	adrp	x0, .L$4
	add	x0, x0, :lo12:.L$4
	bl	"pr-libc"
	mov	w0, wzr
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end594:
	.size	fork, .Lfunc_end594-fork
	.cfi_endproc
                                        // -- End function
	.globl	getenv                          // -- Begin function getenv
	.p2align	4
	.type	getenv,@function
getenv:                                 // @getenv
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	adrp	x0, .L$5
	add	x0, x0, :lo12:.L$5
	bl	"pr-libc"
	mov	x0, xzr
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end595:
	.size	getenv, .Lfunc_end595-getenv
	.cfi_endproc
                                        // -- End function
	.globl	setenv                          // -- Begin function setenv
	.p2align	4
	.type	setenv,@function
setenv:                                 // @setenv
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	adrp	x0, .L$6
	add	x0, x0, :lo12:.L$6
	bl	"pr-libc"
	mov	w0, wzr
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end596:
	.size	setenv, .Lfunc_end596-setenv
	.cfi_endproc
                                        // -- End function
	.globl	getcwd                          // -- Begin function getcwd
	.p2align	4
	.type	getcwd,@function
getcwd:                                 // @getcwd
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	adrp	x0, .L$7
	add	x0, x0, :lo12:.L$7
	bl	"pr-libc"
	mov	x0, xzr
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end597:
	.size	getcwd, .Lfunc_end597-getcwd
	.cfi_endproc
                                        // -- End function
	.globl	chdir                           // -- Begin function chdir
	.p2align	4
	.type	chdir,@function
chdir:                                  // @chdir
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	adrp	x0, .L$8
	add	x0, x0, :lo12:.L$8
	bl	"pr-libc"
	mov	w0, wzr
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end598:
	.size	chdir, .Lfunc_end598-chdir
	.cfi_endproc
                                        // -- End function
	.globl	getpid                          // -- Begin function getpid
	.p2align	4
	.type	getpid,@function
getpid:                                 // @getpid
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	adrp	x0, .L$9
	add	x0, x0, :lo12:.L$9
	bl	"pr-libc"
	mov	w0, wzr
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end599:
	.size	getpid, .Lfunc_end599-getpid
	.cfi_endproc
                                        // -- End function
	.globl	getpgrp                         // -- Begin function getpgrp
	.p2align	4
	.type	getpgrp,@function
getpgrp:                                // @getpgrp
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	adrp	x0, .L$10
	add	x0, x0, :lo12:.L$10
	bl	"pr-libc"
	mov	w0, wzr
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end600:
	.size	getpgrp, .Lfunc_end600-getpgrp
	.cfi_endproc
                                        // -- End function
	.globl	setsid                          // -- Begin function setsid
	.p2align	4
	.type	setsid,@function
setsid:                                 // @setsid
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	adrp	x0, .L$11
	add	x0, x0, :lo12:.L$11
	bl	"pr-libc"
	mov	w0, wzr
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end601:
	.size	setsid, .Lfunc_end601-setsid
	.cfi_endproc
                                        // -- End function
	.globl	alarm                           // -- Begin function alarm
	.p2align	4
	.type	alarm,@function
alarm:                                  // @alarm
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	adrp	x0, .L$12
	add	x0, x0, :lo12:.L$12
	bl	"pr-libc"
	mov	w0, wzr
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end602:
	.size	alarm, .Lfunc_end602-alarm
	.cfi_endproc
                                        // -- End function
	.globl	setpgid                         // -- Begin function setpgid
	.p2align	4
	.type	setpgid,@function
setpgid:                                // @setpgid
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	adrp	x0, .L$13
	add	x0, x0, :lo12:.L$13
	bl	"pr-libc"
	mov	w0, wzr
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end603:
	.size	setpgid, .Lfunc_end603-setpgid
	.cfi_endproc
                                        // -- End function
	.globl	execvp                          // -- Begin function execvp
	.p2align	4
	.type	execvp,@function
execvp:                                 // @execvp
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	adrp	x0, .L$14
	add	x0, x0, :lo12:.L$14
	bl	"pr-libc"
	mov	w0, wzr
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end604:
	.size	execvp, .Lfunc_end604-execvp
	.cfi_endproc
                                        // -- End function
	.globl	tcgetattr                       // -- Begin function tcgetattr
	.p2align	4
	.type	tcgetattr,@function
tcgetattr:                              // @tcgetattr
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	adrp	x0, .L$16
	add	x0, x0, :lo12:.L$16
	bl	"pr-libc"
	mov	w0, wzr
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end605:
	.size	tcgetattr, .Lfunc_end605-tcgetattr
	.cfi_endproc
                                        // -- End function
	.globl	read                            // -- Begin function read
	.p2align	4
	.type	read,@function
read:                                   // @read
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	adrp	x0, .L$17
	add	x0, x0, :lo12:.L$17
	bl	"pr-libc"
	mov	x0, xzr
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end606:
	.size	read, .Lfunc_end606-read
	.cfi_endproc
                                        // -- End function
	.globl	write                           // -- Begin function write
	.p2align	4
	.type	write,@function
write:                                  // @write
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	adrp	x0, .L$18
	add	x0, x0, :lo12:.L$18
	bl	"pr-libc"
	mov	x0, xzr
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end607:
	.size	write, .Lfunc_end607-write
	.cfi_endproc
                                        // -- End function
	.globl	fread                           // -- Begin function fread
	.p2align	4
	.type	fread,@function
fread:                                  // @fread
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	adrp	x0, .L$21
	add	x0, x0, :lo12:.L$21
	bl	"pr-libc"
	mov	w0, wzr
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end608:
	.size	fread, .Lfunc_end608-fread
	.cfi_endproc
                                        // -- End function
	.globl	getc_unlocked                   // -- Begin function getc_unlocked
	.p2align	4
	.type	getc_unlocked,@function
getc_unlocked:                          // @getc_unlocked
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	adrp	x0, .L$24
	add	x0, x0, :lo12:.L$24
	bl	"pr-libc"
	mov	w0, wzr
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end609:
	.size	getc_unlocked, .Lfunc_end609-getc_unlocked
	.cfi_endproc
                                        // -- End function
	.globl	fopen                           // -- Begin function fopen
	.p2align	4
	.type	fopen,@function
fopen:                                  // @fopen
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	adrp	x0, .L$25
	add	x0, x0, :lo12:.L$25
	bl	"pr-libc"
	mov	x0, xzr
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end610:
	.size	fopen, .Lfunc_end610-fopen
	.cfi_endproc
                                        // -- End function
	.globl	feof                            // -- Begin function feof
	.p2align	4
	.type	feof,@function
feof:                                   // @feof
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	adrp	x0, .L$27
	add	x0, x0, :lo12:.L$27
	bl	"pr-libc"
	mov	w0, wzr
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end611:
	.size	feof, .Lfunc_end611-feof
	.cfi_endproc
                                        // -- End function
	.globl	fclose                          // -- Begin function fclose
	.p2align	4
	.type	fclose,@function
fclose:                                 // @fclose
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	adrp	x0, .L$28
	add	x0, x0, :lo12:.L$28
	bl	"pr-libc"
	mov	w0, wzr
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end612:
	.size	fclose, .Lfunc_end612-fclose
	.cfi_endproc
                                        // -- End function
	.globl	fsync                           // -- Begin function fsync
	.p2align	4
	.type	fsync,@function
fsync:                                  // @fsync
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	adrp	x0, .L$30
	add	x0, x0, :lo12:.L$30
	bl	"pr-libc"
	mov	w0, wzr
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end613:
	.size	fsync, .Lfunc_end613-fsync
	.cfi_endproc
                                        // -- End function
	.globl	pipe                            // -- Begin function pipe
	.p2align	4
	.type	pipe,@function
pipe:                                   // @pipe
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	adrp	x0, .L$31
	add	x0, x0, :lo12:.L$31
	bl	"pr-libc"
	mov	w0, wzr
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end614:
	.size	pipe, .Lfunc_end614-pipe
	.cfi_endproc
                                        // -- End function
	.globl	strlen                          // -- Begin function strlen
	.p2align	4
	.type	strlen,@function
strlen:                                 // @strlen
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	adrp	x0, .L$33
	add	x0, x0, :lo12:.L$33
	bl	"pr-libc"
	mov	x0, xzr
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end615:
	.size	strlen, .Lfunc_end615-strlen
	.cfi_endproc
                                        // -- End function
	.globl	strcpy                          // -- Begin function strcpy
	.p2align	4
	.type	strcpy,@function
strcpy:                                 // @strcpy
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	adrp	x0, .L$34
	add	x0, x0, :lo12:.L$34
	bl	"pr-libc"
	mov	x0, xzr
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end616:
	.size	strcpy, .Lfunc_end616-strcpy
	.cfi_endproc
                                        // -- End function
	.globl	strdup                          // -- Begin function strdup
	.p2align	4
	.type	strdup,@function
strdup:                                 // @strdup
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	adrp	x0, .L$35
	add	x0, x0, :lo12:.L$35
	bl	"pr-libc"
	mov	x0, xzr
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end617:
	.size	strdup, .Lfunc_end617-strdup
	.cfi_endproc
                                        // -- End function
	.globl	strcmp                          // -- Begin function strcmp
	.p2align	4
	.type	strcmp,@function
strcmp:                                 // @strcmp
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	adrp	x0, .L$36
	add	x0, x0, :lo12:.L$36
	bl	"pr-libc"
	mov	w0, wzr
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end618:
	.size	strcmp, .Lfunc_end618-strcmp
	.cfi_endproc
                                        // -- End function
	.globl	strrchr                         // -- Begin function strrchr
	.p2align	4
	.type	strrchr,@function
strrchr:                                // @strrchr
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	adrp	x0, .L$37
	add	x0, x0, :lo12:.L$37
	bl	"pr-libc"
	mov	x0, xzr
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end619:
	.size	strrchr, .Lfunc_end619-strrchr
	.cfi_endproc
                                        // -- End function
	.globl	dlsym                           // -- Begin function dlsym
	.p2align	4
	.type	dlsym,@function
dlsym:                                  // @dlsym
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	adrp	x0, .L$38
	add	x0, x0, :lo12:.L$38
	bl	"pr-libc"
	mov	x0, xzr
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end620:
	.size	dlsym, .Lfunc_end620-dlsym
	.cfi_endproc
                                        // -- End function
	.globl	dlerror                         // -- Begin function dlerror
	.p2align	4
	.type	dlerror,@function
dlerror:                                // @dlerror
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	adrp	x0, .L$39
	add	x0, x0, :lo12:.L$39
	bl	"pr-libc"
	mov	x0, xzr
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end621:
	.size	dlerror, .Lfunc_end621-dlerror
	.cfi_endproc
                                        // -- End function
	.globl	dup                             // -- Begin function dup
	.p2align	4
	.type	dup,@function
dup:                                    // @dup
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	adrp	x0, .L$40
	add	x0, x0, :lo12:.L$40
	bl	"pr-libc"
	mov	w0, wzr
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end622:
	.size	dup, .Lfunc_end622-dup
	.cfi_endproc
                                        // -- End function
	.globl	signal                          // -- Begin function signal
	.p2align	4
	.type	signal,@function
signal:                                 // @signal
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	adrp	x0, .L$43
	add	x0, x0, :lo12:.L$43
	bl	"pr-libc"
	mov	x0, xzr
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end623:
	.size	signal, .Lfunc_end623-signal
	.cfi_endproc
                                        // -- End function
	.globl	tcsetpgrp                       // -- Begin function tcsetpgrp
	.p2align	4
	.type	tcsetpgrp,@function
tcsetpgrp:                              // @tcsetpgrp
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	adrp	x0, .L$44
	add	x0, x0, :lo12:.L$44
	bl	"pr-libc"
	mov	w0, wzr
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end624:
	.size	tcsetpgrp, .Lfunc_end624-tcsetpgrp
	.cfi_endproc
                                        // -- End function
	.globl	kill                            // -- Begin function kill
	.p2align	4
	.type	kill,@function
kill:                                   // @kill
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	adrp	x0, .L$46
	add	x0, x0, :lo12:.L$46
	bl	"pr-libc"
	mov	w0, wzr
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end625:
	.size	kill, .Lfunc_end625-kill
	.cfi_endproc
                                        // -- End function
	.globl	exit                            // -- Begin function exit
	.p2align	4
	.type	exit,@function
exit:                                   // @exit
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	adrp	x0, .L$47
	add	x0, x0, :lo12:.L$47
	bl	"pr-libc"
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end626:
	.size	exit, .Lfunc_end626-exit
	.cfi_endproc
                                        // -- End function
	.globl	readline                        // -- Begin function readline
	.p2align	4
	.type	readline,@function
readline:                               // @readline
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	adrp	x0, .L$48
	add	x0, x0, :lo12:.L$48
	bl	"pr-libc"
	mov	x0, xzr
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end627:
	.size	readline, .Lfunc_end627-readline
	.cfi_endproc
                                        // -- End function
	.globl	add_history                     // -- Begin function add_history
	.p2align	4
	.type	add_history,@function
add_history:                            // @add_history
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	adrp	x0, .L$49
	add	x0, x0, :lo12:.L$49
	bl	"pr-libc"
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end628:
	.size	add_history, .Lfunc_end628-add_history
	.cfi_endproc
                                        // -- End function
	.globl	history_list                    // -- Begin function history_list
	.p2align	4
	.type	history_list,@function
history_list:                           // @history_list
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	adrp	x0, .L$50
	add	x0, x0, :lo12:.L$50
	bl	"pr-libc"
	mov	x0, xzr
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end629:
	.size	history_list, .Lfunc_end629-history_list
	.cfi_endproc
                                        // -- End function
	.globl	clear_history                   // -- Begin function clear_history
	.p2align	4
	.type	clear_history,@function
clear_history:                          // @clear_history
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	adrp	x0, .L$51
	add	x0, x0, :lo12:.L$51
	bl	"pr-libc"
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end630:
	.size	clear_history, .Lfunc_end630-clear_history
	.cfi_endproc
                                        // -- End function
	.globl	stderrMsg                       // -- Begin function stderrMsg
	.p2align	4
	.type	stderrMsg,@function
stderrMsg:                              // @stderrMsg
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	adrp	x0, .L$52
	add	x0, x0, :lo12:.L$52
	bl	"pr-libc"
	mov	x0, xzr
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end631:
	.size	stderrMsg, .Lfunc_end631-stderrMsg
	.cfi_endproc
                                        // -- End function
	.globl	gPrintf                         // -- Begin function gPrintf
	.p2align	4
	.type	gPrintf,@function
gPrintf:                                // @gPrintf
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	adrp	x0, .L$53
	add	x0, x0, :lo12:.L$53
	bl	"pr-libc"
	mov	w0, wzr
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end632:
	.size	gPrintf, .Lfunc_end632-gPrintf
	.cfi_endproc
                                        // -- End function
	.globl	openRd                          // -- Begin function openRd
	.p2align	4
	.type	openRd,@function
openRd:                                 // @openRd
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	adrp	x0, .L$55
	add	x0, x0, :lo12:.L$55
	bl	"pr-libc"
	mov	w0, wzr
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end633:
	.size	openRd, .Lfunc_end633-openRd
	.cfi_endproc
                                        // -- End function
	.globl	openWr                          // -- Begin function openWr
	.p2align	4
	.type	openWr,@function
openWr:                                 // @openWr
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	adrp	x0, .L$56
	add	x0, x0, :lo12:.L$56
	bl	"pr-libc"
	mov	w0, wzr
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end634:
	.size	openWr, .Lfunc_end634-openWr
	.cfi_endproc
                                        // -- End function
	.globl	openRdWr                        // -- Begin function openRdWr
	.p2align	4
	.type	openRdWr,@function
openRdWr:                               // @openRdWr
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	adrp	x0, .L$57
	add	x0, x0, :lo12:.L$57
	bl	"pr-libc"
	mov	w0, wzr
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end635:
	.size	openRdWr, .Lfunc_end635-openRdWr
	.cfi_endproc
                                        // -- End function
	.globl	openRdWrExcl                    // -- Begin function openRdWrExcl
	.p2align	4
	.type	openRdWrExcl,@function
openRdWrExcl:                           // @openRdWrExcl
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	adrp	x0, .L$58
	add	x0, x0, :lo12:.L$58
	bl	"pr-libc"
	mov	w0, wzr
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end636:
	.size	openRdWrExcl, .Lfunc_end636-openRdWrExcl
	.cfi_endproc
                                        // -- End function
	.globl	openRdWrCreate                  // -- Begin function openRdWrCreate
	.p2align	4
	.type	openRdWrCreate,@function
openRdWrCreate:                         // @openRdWrCreate
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	adrp	x0, .L$59
	add	x0, x0, :lo12:.L$59
	bl	"pr-libc"
	mov	w0, wzr
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end637:
	.size	openRdWrCreate, .Lfunc_end637-openRdWrCreate
	.cfi_endproc
                                        // -- End function
	.globl	openRdWrAppend                  // -- Begin function openRdWrAppend
	.p2align	4
	.type	openRdWrAppend,@function
openRdWrAppend:                         // @openRdWrAppend
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	adrp	x0, .L$60
	add	x0, x0, :lo12:.L$60
	bl	"pr-libc"
	mov	w0, wzr
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end638:
	.size	openRdWrAppend, .Lfunc_end638-openRdWrAppend
	.cfi_endproc
                                        // -- End function
	.globl	openWrAppend                    // -- Begin function openWrAppend
	.p2align	4
	.type	openWrAppend,@function
openWrAppend:                           // @openWrAppend
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	adrp	x0, .L$61
	add	x0, x0, :lo12:.L$61
	bl	"pr-libc"
	mov	w0, wzr
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end639:
	.size	openWrAppend, .Lfunc_end639-openWrAppend
	.cfi_endproc
                                        // -- End function
	.globl	fseekOfs                        // -- Begin function fseekOfs
	.p2align	4
	.type	fseekOfs,@function
fseekOfs:                               // @fseekOfs
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	adrp	x0, .L$62
	add	x0, x0, :lo12:.L$62
	bl	"pr-libc"
	mov	w0, wzr
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end640:
	.size	fseekOfs, .Lfunc_end640-fseekOfs
	.cfi_endproc
                                        // -- End function
	.globl	fseek0                          // -- Begin function fseek0
	.p2align	4
	.type	fseek0,@function
fseek0:                                 // @fseek0
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	adrp	x0, .L$63
	add	x0, x0, :lo12:.L$63
	bl	"pr-libc"
	mov	w0, wzr
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end641:
	.size	fseek0, .Lfunc_end641-fseek0
	.cfi_endproc
                                        // -- End function
	.globl	seek0                           // -- Begin function seek0
	.p2align	4
	.type	seek0,@function
seek0:                                  // @seek0
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	adrp	x0, .L$64
	add	x0, x0, :lo12:.L$64
	bl	"pr-libc"
	mov	w0, wzr
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end642:
	.size	seek0, .Lfunc_end642-seek0
	.cfi_endproc
                                        // -- End function
	.globl	truncate0                       // -- Begin function truncate0
	.p2align	4
	.type	truncate0,@function
truncate0:                              // @truncate0
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	adrp	x0, .L$65
	add	x0, x0, :lo12:.L$65
	bl	"pr-libc"
	mov	w0, wzr
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end643:
	.size	truncate0, .Lfunc_end643-truncate0
	.cfi_endproc
                                        // -- End function
	.globl	socketPair                      // -- Begin function socketPair
	.p2align	4
	.type	socketPair,@function
socketPair:                             // @socketPair
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	adrp	x0, .L$66
	add	x0, x0, :lo12:.L$66
	bl	"pr-libc"
	mov	w0, wzr
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end644:
	.size	socketPair, .Lfunc_end644-socketPair
	.cfi_endproc
                                        // -- End function
	.globl	fcntlCloExec                    // -- Begin function fcntlCloExec
	.p2align	4
	.type	fcntlCloExec,@function
fcntlCloExec:                           // @fcntlCloExec
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	adrp	x0, .L$67
	add	x0, x0, :lo12:.L$67
	bl	"pr-libc"
	mov	w0, wzr
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end645:
	.size	fcntlCloExec, .Lfunc_end645-fcntlCloExec
	.cfi_endproc
                                        // -- End function
	.globl	fcntlSetFl                      // -- Begin function fcntlSetFl
	.p2align	4
	.type	fcntlSetFl,@function
fcntlSetFl:                             // @fcntlSetFl
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	adrp	x0, .L$68
	add	x0, x0, :lo12:.L$68
	bl	"pr-libc"
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end646:
	.size	fcntlSetFl, .Lfunc_end646-fcntlSetFl
	.cfi_endproc
                                        // -- End function
	.globl	nonBlocking                     // -- Begin function nonBlocking
	.p2align	4
	.type	nonBlocking,@function
nonBlocking:                            // @nonBlocking
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	adrp	x0, .L$69
	add	x0, x0, :lo12:.L$69
	bl	"pr-libc"
	mov	w0, wzr
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end647:
	.size	nonBlocking, .Lfunc_end647-nonBlocking
	.cfi_endproc
                                        // -- End function
	.globl	fcntlSetOwn                     // -- Begin function fcntlSetOwn
	.p2align	4
	.type	fcntlSetOwn,@function
fcntlSetOwn:                            // @fcntlSetOwn
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	adrp	x0, .L$70
	add	x0, x0, :lo12:.L$70
	bl	"pr-libc"
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end648:
	.size	fcntlSetOwn, .Lfunc_end648-fcntlSetOwn
	.cfi_endproc
                                        // -- End function
	.globl	getDir                          // -- Begin function getDir
	.p2align	4
	.type	getDir,@function
getDir:                                 // @getDir
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	adrp	x0, .L$71
	add	x0, x0, :lo12:.L$71
	bl	"pr-libc"
	mov	x0, xzr
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end649:
	.size	getDir, .Lfunc_end649-getDir
	.cfi_endproc
                                        // -- End function
	.globl	initReadline                    // -- Begin function initReadline
	.p2align	4
	.type	initReadline,@function
initReadline:                           // @initReadline
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	adrp	x0, .L$72
	add	x0, x0, :lo12:.L$72
	bl	"pr-libc"
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end650:
	.size	initReadline, .Lfunc_end650-initReadline
	.cfi_endproc
                                        // -- End function
	.globl	rlHide                          // -- Begin function rlHide
	.p2align	4
	.type	rlHide,@function
rlHide:                                 // @rlHide
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	adrp	x0, .L$73
	add	x0, x0, :lo12:.L$73
	bl	"pr-libc"
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end651:
	.size	rlHide, .Lfunc_end651-rlHide
	.cfi_endproc
                                        // -- End function
	.globl	rlShow                          // -- Begin function rlShow
	.p2align	4
	.type	rlShow,@function
rlShow:                                 // @rlShow
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	adrp	x0, .L$74
	add	x0, x0, :lo12:.L$74
	bl	"pr-libc"
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end652:
	.size	rlShow, .Lfunc_end652-rlShow
	.cfi_endproc
                                        // -- End function
	.globl	rlSigBeg                        // -- Begin function rlSigBeg
	.p2align	4
	.type	rlSigBeg,@function
rlSigBeg:                               // @rlSigBeg
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	adrp	x0, .L$75
	add	x0, x0, :lo12:.L$75
	bl	"pr-libc"
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end653:
	.size	rlSigBeg, .Lfunc_end653-rlSigBeg
	.cfi_endproc
                                        // -- End function
	.globl	rlSigEnd                        // -- Begin function rlSigEnd
	.p2align	4
	.type	rlSigEnd,@function
rlSigEnd:                               // @rlSigEnd
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	adrp	x0, .L$76
	add	x0, x0, :lo12:.L$76
	bl	"pr-libc"
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end654:
	.size	rlSigEnd, .Lfunc_end654-rlSigEnd
	.cfi_endproc
                                        // -- End function
	.globl	currentLine                     // -- Begin function currentLine
	.p2align	4
	.type	currentLine,@function
currentLine:                            // @currentLine
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	adrp	x0, .L$77
	add	x0, x0, :lo12:.L$77
	bl	"pr-libc"
	mov	x0, xzr
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end655:
	.size	currentLine, .Lfunc_end655-currentLine
	.cfi_endproc
                                        // -- End function
	.globl	gSignal                         // -- Begin function gSignal
	.p2align	4
	.type	gSignal,@function
gSignal:                                // @gSignal
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	adrp	x0, .L$78
	add	x0, x0, :lo12:.L$78
	bl	"pr-libc"
	mov	w0, wzr
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end656:
	.size	gSignal, .Lfunc_end656-gSignal
	.cfi_endproc
                                        // -- End function
	.globl	sigUnblock                      // -- Begin function sigUnblock
	.p2align	4
	.type	sigUnblock,@function
sigUnblock:                             // @sigUnblock
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	adrp	x0, .L$79
	add	x0, x0, :lo12:.L$79
	bl	"pr-libc"
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end657:
	.size	sigUnblock, .Lfunc_end657-sigUnblock
	.cfi_endproc
                                        // -- End function
	.globl	sigChld                         // -- Begin function sigChld
	.p2align	4
	.type	sigChld,@function
sigChld:                                // @sigChld
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	adrp	x0, .L$81
	add	x0, x0, :lo12:.L$81
	bl	"pr-libc"
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end658:
	.size	sigChld, .Lfunc_end658-sigChld
	.cfi_endproc
                                        // -- End function
	.globl	waitWuntraced                   // -- Begin function waitWuntraced
	.p2align	4
	.type	waitWuntraced,@function
waitWuntraced:                          // @waitWuntraced
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	adrp	x0, .L$82
	add	x0, x0, :lo12:.L$82
	bl	"pr-libc"
	mov	w0, wzr
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end659:
	.size	waitWuntraced, .Lfunc_end659-waitWuntraced
	.cfi_endproc
                                        // -- End function
	.globl	wifStopped                      // -- Begin function wifStopped
	.p2align	4
	.type	wifStopped,@function
wifStopped:                             // @wifStopped
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	adrp	x0, .L$83
	add	x0, x0, :lo12:.L$83
	bl	"pr-libc"
	mov	w0, wzr
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end660:
	.size	wifStopped, .Lfunc_end660-wifStopped
	.cfi_endproc
                                        // -- End function
	.globl	nErrno                          // -- Begin function nErrno
	.p2align	4
	.type	nErrno,@function
nErrno:                                 // @nErrno
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	adrp	x0, .L$84
	add	x0, x0, :lo12:.L$84
	bl	"pr-libc"
	mov	w0, wzr
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end661:
	.size	nErrno, .Lfunc_end661-nErrno
	.cfi_endproc
                                        // -- End function
	.globl	setRaw                          // -- Begin function setRaw
	.p2align	4
	.type	setRaw,@function
setRaw:                                 // @setRaw
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	adrp	x0, .L$86
	add	x0, x0, :lo12:.L$86
	bl	"pr-libc"
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end662:
	.size	setRaw, .Lfunc_end662-setRaw
	.cfi_endproc
                                        // -- End function
	.globl	setCooked                       // -- Begin function setCooked
	.p2align	4
	.type	setCooked,@function
setCooked:                              // @setCooked
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	adrp	x0, .L$87
	add	x0, x0, :lo12:.L$87
	bl	"pr-libc"
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end663:
	.size	setCooked, .Lfunc_end663-setCooked
	.cfi_endproc
                                        // -- End function
	.globl	getUsec                         // -- Begin function getUsec
	.p2align	4
	.type	getUsec,@function
getUsec:                                // @getUsec
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	adrp	x0, .L$88
	add	x0, x0, :lo12:.L$88
	bl	"pr-libc"
	mov	x0, xzr
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end664:
	.size	getUsec, .Lfunc_end664-getUsec
	.cfi_endproc
                                        // -- End function
	.globl	getMsec                         // -- Begin function getMsec
	.p2align	4
	.type	getMsec,@function
getMsec:                                // @getMsec
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	adrp	x0, .L$89
	add	x0, x0, :lo12:.L$89
	bl	"pr-libc"
	mov	x0, xzr
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end665:
	.size	getMsec, .Lfunc_end665-getMsec
	.cfi_endproc
                                        // -- End function
	.globl	fileInfo                        // -- Begin function fileInfo
	.p2align	4
	.type	fileInfo,@function
fileInfo:                               // @fileInfo
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	adrp	x0, .L$90
	add	x0, x0, :lo12:.L$90
	bl	"pr-libc"
	mov	x0, xzr
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end666:
	.size	fileInfo, .Lfunc_end666-fileInfo
	.cfi_endproc
                                        // -- End function
	.globl	pollIn                          // -- Begin function pollIn
	.p2align	4
	.type	pollIn,@function
pollIn:                                 // @pollIn
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	adrp	x0, .L$91
	add	x0, x0, :lo12:.L$91
	bl	"pr-libc"
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end667:
	.size	pollIn, .Lfunc_end667-pollIn
	.cfi_endproc
                                        // -- End function
	.globl	pollOut                         // -- Begin function pollOut
	.p2align	4
	.type	pollOut,@function
pollOut:                                // @pollOut
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	adrp	x0, .L$92
	add	x0, x0, :lo12:.L$92
	bl	"pr-libc"
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end668:
	.size	pollOut, .Lfunc_end668-pollOut
	.cfi_endproc
                                        // -- End function
	.globl	pollIgn                         // -- Begin function pollIgn
	.p2align	4
	.type	pollIgn,@function
pollIgn:                                // @pollIgn
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	adrp	x0, .L$93
	add	x0, x0, :lo12:.L$93
	bl	"pr-libc"
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end669:
	.size	pollIgn, .Lfunc_end669-pollIgn
	.cfi_endproc
                                        // -- End function
	.globl	gPoll                           // -- Begin function gPoll
	.p2align	4
	.type	gPoll,@function
gPoll:                                  // @gPoll
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	adrp	x0, .L$94
	add	x0, x0, :lo12:.L$94
	bl	"pr-libc"
	mov	w0, wzr
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end670:
	.size	gPoll, .Lfunc_end670-gPoll
	.cfi_endproc
                                        // -- End function
	.globl	readyIn                         // -- Begin function readyIn
	.p2align	4
	.type	readyIn,@function
readyIn:                                // @readyIn
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	adrp	x0, .L$95
	add	x0, x0, :lo12:.L$95
	bl	"pr-libc"
	mov	w0, wzr
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end671:
	.size	readyIn, .Lfunc_end671-readyIn
	.cfi_endproc
                                        // -- End function
	.globl	readyOut                        // -- Begin function readyOut
	.p2align	4
	.type	readyOut,@function
readyOut:                               // @readyOut
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	adrp	x0, .L$96
	add	x0, x0, :lo12:.L$96
	bl	"pr-libc"
	mov	w0, wzr
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end672:
	.size	readyOut, .Lfunc_end672-readyOut
	.cfi_endproc
                                        // -- End function
	.globl	getLock                         // -- Begin function getLock
	.p2align	4
	.type	getLock,@function
getLock:                                // @getLock
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	adrp	x0, .L$100
	add	x0, x0, :lo12:.L$100
	bl	"pr-libc"
	mov	w0, wzr
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end673:
	.size	getLock, .Lfunc_end673-getLock
	.cfi_endproc
                                        // -- End function
	.globl	heapAlloc2                      // -- Begin function heapAlloc2
	.p2align	4
	.type	heapAlloc2,@function
heapAlloc2:                             // @heapAlloc2
	.cfi_startproc
// %bb.0:                               // %"$1"
	adrp	x9, ($Limit)
	adrp	x10, ($Heaps)
	mov	w11, #1048560
	ldr	x12, [x9, :lo12:($Limit)]
	ldr	x13, [x10, :lo12:($Heaps)]
	adrp	x8, ($Avail)
	add	x14, x12, #256, lsl #12         // =1048576
	add	x15, x14, #16                   // =16
	str	x15, [x9, :lo12:($Limit)]
	ldr	x9, [x8, :lo12:($Avail)]
	lsr	x15, x13, #32
	stp	w13, w15, [x14]
	str	x12, [x10, :lo12:($Heaps)]
	add	x11, x12, x11
	mov	x10, #-1048576
.LBB674_1:                              // %"$2"
                                        // =>This Inner Loop Header: Depth=1
	mov	x12, x9
	mov	x9, x11
	lsr	x11, x12, #32
	stp	w12, w11, [x9]
	sub	x11, x9, #16                    // =16
	adds	x10, x10, #16                   // =16
	b.ne	.LBB674_1
// %bb.2:                               // %"$4"
	str	x9, [x8, :lo12:($Avail)]
	ret
.Lfunc_end674:
	.size	heapAlloc2, .Lfunc_end674-heapAlloc2
	.cfi_endproc
                                        // -- End function
	.globl	wrnl                            // -- Begin function wrnl
	.p2align	4
	.type	wrnl,@function
wrnl:                                   // @wrnl
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	bl	write
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end675:
	.size	wrnl, .Lfunc_end675-wrnl
	.cfi_endproc
                                        // -- End function
	.globl	dbg                             // -- Begin function dbg
	.p2align	4
	.type	dbg,@function
dbg:                                    // @dbg
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x30, x23, [sp, #-48]!           // 16-byte Folded Spill
	stp	x22, x21, [sp, #16]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #32]             // 16-byte Folded Spill
	.cfi_def_cfa_offset 48
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w30, -48
	mov	x19, x1
	adrp	x8, ($OutFiles)
	adrp	x20, ($OutFile)
	adrp	x22, ($Put)
	ldr	x21, [x20, :lo12:($OutFile)]
	ldr	x8, [x8, :lo12:($OutFiles)]
	ldr	x8, [x8, #16]
	ldr	x23, [x22, :lo12:($Put)]
	str	x8, [x20, :lo12:($OutFile)]
	adrp	x8, _putStdout
	add	x8, x8, :lo12:_putStdout
	str	x8, [x22, :lo12:($Put)]
	bl	outWord
	cbz	x19, .LBB676_2
// %bb.1:                               // %"$2"
	bl	space
	mov	x0, x19
	bl	print
.LBB676_2:                              // %"$3"
	bl	newline
	str	x23, [x22, :lo12:($Put)]
	str	x21, [x20, :lo12:($OutFile)]
	mov	x0, x19
	ldp	x20, x19, [sp, #32]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #16]             // 16-byte Folded Reload
	ldp	x30, x23, [sp], #48             // 16-byte Folded Reload
	ret
.Lfunc_end676:
	.size	dbg, .Lfunc_end676-dbg
	.cfi_endproc
                                        // -- End function
	.globl	finish                          // -- Begin function finish
	.p2align	4
	.type	finish,@function
finish:                                 // @finish
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	bl	exit
.Lfunc_end677:
	.size	finish, .Lfunc_end677-finish
	.cfi_endproc
                                        // -- End function
	.globl	giveup                          // -- Begin function giveup
	.p2align	4
	.type	giveup,@function
giveup:                                 // @giveup
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	bl	stderrMsg
	mov	w0, #1
	bl	finish
.Lfunc_end678:
	.size	giveup, .Lfunc_end678-giveup
	.cfi_endproc
                                        // -- End function
	.globl	bye                             // -- Begin function bye
	.p2align	4
	.type	bye,@function
bye:                                    // @bye
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-32]!                // 8-byte Folded Spill
	stp	x20, x19, [sp, #16]             // 16-byte Folded Spill
	.cfi_def_cfa_offset 32
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w30, -32
	mov	w19, w0
	adrp	x8, ($InBye)
	ldrb	w9, [x8, :lo12:($InBye)]
	tbnz	w9, #0, .LBB679_5
// %bb.1:                               // %"$2"
	mov	w9, #1
	strb	w9, [x8, :lo12:($InBye)]
	mov	x0, xzr
	bl	unwind
	adrp	x8, SymTab+712
	ldr	x20, [x8, :lo12:SymTab+712]
.LBB679_2:                              // %"$4"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w0, w8, [x20]
	bfi	x0, x8, #32, #32
	ldp	w20, w8, [x20, #8]
	bfi	x20, x8, #32, #32
	tst	x0, #0xf
	b.ne	.LBB679_4
// %bb.3:                               // %"$5"
                                        //   in Loop: Header=BB679_2 Depth=1
	bl	evList
.LBB679_4:                              // %"$6"
                                        //   in Loop: Header=BB679_2 Depth=1
	tst	x20, #0xf
	b.eq	.LBB679_2
.LBB679_5:                              // %"$3"
	mov	w0, w19
	bl	finish
.Lfunc_end679:
	.size	bye, .Lfunc_end679-bye
	.cfi_endproc
                                        // -- End function
	.globl	execErr                         // -- Begin function execErr
	.p2align	4
	.type	execErr,@function
execErr:                                // @execErr
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	bl	stderrMsg
	bl	exit
.Lfunc_end680:
	.size	execErr, .Lfunc_end680-execErr
	.cfi_endproc
                                        // -- End function
	.globl	sigTerm                         // -- Begin function sigTerm
	.p2align	4
	.type	sigTerm,@function
sigTerm:                                // @sigTerm
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x30, x19, [sp, #-16]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w19, -8
	.cfi_offset w30, -16
	adrp	x8, ($TtyPid)
	ldr	w8, [x8, :lo12:($TtyPid)]
	cbz	w8, .LBB681_2
// %bb.1:                               // %"$2"
	bl	kill
	ldp	x30, x19, [sp], #16             // 16-byte Folded Reload
	ret
.LBB681_2:                              // %"$3"
	adrp	x19, ($Signal)
	add	x19, x19, :lo12:($Signal)
	ldr	w8, [x19]
	add	w8, w8, #1                      // =1
	str	w8, [x19]
	bl	gSignal
                                        // kill: def $w0 killed $w0 def $x0
	sbfiz	x8, x0, #2, #32
	ldr	w9, [x19, x8]
	add	w9, w9, #1                      // =1
	str	w9, [x19, x8]
	ldp	x30, x19, [sp], #16             // 16-byte Folded Reload
	ret
.Lfunc_end681:
	.size	sigTerm, .Lfunc_end681-sigTerm
	.cfi_endproc
                                        // -- End function
	.globl	extErr                          // -- Begin function extErr
	.p2align	4
	.type	extErr,@function
extErr:                                 // @extErr
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	adrp	x2, .L$115
	add	x2, x2, :lo12:.L$115
	mov	x3, xzr
	bl	err
.Lfunc_end682:
	.size	extErr, .Lfunc_end682-extErr
	.cfi_endproc
                                        // -- End function
	.globl	forkErr                         // -- Begin function forkErr
	.p2align	4
	.type	forkErr,@function
forkErr:                                // @forkErr
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	adrp	x2, .L$124
	add	x2, x2, :lo12:.L$124
	mov	x1, xzr
	mov	x3, xzr
	bl	err
.Lfunc_end683:
	.size	forkErr, .Lfunc_end683-forkErr
	.cfi_endproc
                                        // -- End function
	.globl	evLst                           // -- Begin function evLst
	.p2align	4
	.type	evLst,@function
evLst:                                  // @evLst
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x30, x19, [sp, #-16]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w19, -8
	.cfi_offset w30, -16
	mov	x19, x0
	ldp	w1, w8, [x0]
	bfi	x1, x8, #32, #32
	tst	x1, #0x6
	b.ne	.LBB684_4
// %bb.1:                               // %"$3"
	tbz	w1, #3, .LBB684_3
// %bb.2:                               // %"$6"
	ldp	w1, w8, [x1]
	bfi	x1, x8, #32, #32
	b	.LBB684_4
.LBB684_3:                              // %"$5"
	mov	x0, x1
	bl	evList
	mov	x1, x0
.LBB684_4:                              // %"$2"
	tst	x1, #0xf
	cset	w8, eq
	adrp	x9, SymTab+8
	add	x9, x9, :lo12:SymTab+8
	cmp	x1, x9
	cset	w9, eq
	orr	w8, w8, w9
	tbz	w8, #0, .LBB684_6
// %bb.5:                               // %"$10"
	mov	x0, x1
	ldp	x30, x19, [sp], #16             // 16-byte Folded Reload
	ret
.LBB684_6:                              // %"$9"
	mov	x0, x19
	bl	lstErr
.Lfunc_end684:
	.size	evLst, .Lfunc_end684-evLst
	.cfi_endproc
                                        // -- End function
	.globl	_tty                            // -- Begin function _tty
	.p2align	4
	.type	_tty,@function
_tty:                                   // @_tty
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	adrp	x0, .L$126
	add	x0, x0, :lo12:.L$126
	bl	outString
	adrp	x0, SymTab+8
	add	x0, x0, :lo12:SymTab+8
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end685:
	.size	_tty, .Lfunc_end685-_tty
	.cfi_endproc
                                        // -- End function
	.globl	_raw                            // -- Begin function _raw
	.p2align	4
	.type	_raw,@function
_raw:                                   // @_raw
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	adrp	x0, .L$127
	add	x0, x0, :lo12:.L$127
	bl	outString
	adrp	x0, SymTab+8
	add	x0, x0, :lo12:SymTab+8
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end686:
	.size	_raw, .Lfunc_end686-_raw
	.cfi_endproc
                                        // -- End function
	.globl	_sigio                          // -- Begin function _sigio
	.p2align	4
	.type	_sigio,@function
_sigio:                                 // @_sigio
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	adrp	x0, .L$128
	add	x0, x0, :lo12:.L$128
	bl	outString
	adrp	x0, SymTab+8
	add	x0, x0, :lo12:SymTab+8
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end687:
	.size	_sigio, .Lfunc_end687-_sigio
	.cfi_endproc
                                        // -- End function
	.globl	_kids                           // -- Begin function _kids
	.p2align	4
	.type	_kids,@function
_kids:                                  // @_kids
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	adrp	x0, .L$129
	add	x0, x0, :lo12:.L$129
	bl	outString
	adrp	x0, SymTab+8
	add	x0, x0, :lo12:SymTab+8
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end688:
	.size	_kids, .Lfunc_end688-_kids
	.cfi_endproc
                                        // -- End function
	.globl	tmDate                          // -- Begin function tmDate
	.p2align	4
	.type	tmDate,@function
tmDate:                                 // @tmDate
	.cfi_startproc
// %bb.0:                               // %"$1"
	cmp	x0, #1                          // =1
	adrp	x8, SymTab+8
	add	x8, x8, :lo12:SymTab+8
	b.lt	.LBB689_6
// %bb.1:                               // %"$1"
	cmp	x1, #1                          // =1
	b.lt	.LBB689_6
// %bb.2:                               // %"$1"
	cmp	x1, #12                         // =12
	b.hi	.LBB689_6
// %bb.3:                               // %"$1"
	cmp	x2, #1                          // =1
	b.lt	.LBB689_6
// %bb.4:                               // %"$6"
	adrp	x8, ($Month)
	add	x8, x8, :lo12:($Month)
	ldrb	w8, [x8, x1]
	cmp	x8, x2
	b.lo	.LBB689_7
.LBB689_5:                              // %"$15"
	mov	w8, #12
	madd	x8, x0, x8, x1
	sub	x8, x8, #3                      // =3
	mov	x9, #-6148914691236517206
	movk	x9, #43691
	umulh	x8, x8, x9
	lsr	x10, x8, #2
	and	x10, x10, #0x3ffffffffffffffe
	mov	w11, #4404
	mov	w12, #367
	mul	x12, x1, x12
	madd	x11, x0, x11, x12
	sub	x11, x11, #1094                 // =1094
	umulh	x9, x11, x9
	lsr	x11, x8, #7
	mov	x12, #15729
	movk	x12, #55050, lsl #16
	movk	x12, #28835, lsl #32
	movk	x12, #2621, lsl #48
	umulh	x11, x11, x12
	lsr	x8, x8, #5
	add	x9, x8, x9, lsr #3
	add	x9, x9, x11
	add	x9, x9, x2
	mov	x11, #62915
	movk	x11, #23592, lsl #16
	movk	x11, #49807, lsl #32
	movk	x11, #10485, lsl #48
	umulh	x8, x8, x11
	sub	x9, x9, x10
	sub	x9, x9, x8, lsr #2
	mov	w8, #2
	bfi	x8, x9, #4, #60
.LBB689_6:                              // %"$17"
	mov	x0, x8
	ret
.LBB689_7:                              // %"$8"
	cmp	x2, #29                         // =29
	adrp	x8, SymTab+8
	add	x8, x8, :lo12:SymTab+8
	b.ne	.LBB689_6
// %bb.8:                               // %"$8"
	cmp	x1, #2                          // =2
	b.ne	.LBB689_6
// %bb.9:                               // %"$8"
	and	x9, x0, #0x3
	cbnz	x9, .LBB689_6
// %bb.10:                              // %"$12"
	mov	x8, #23593
	movk	x8, #49807, lsl #16
	movk	x8, #10485, lsl #32
	movk	x8, #36700, lsl #48
	mul	x8, x0, x8
	ror	x8, x8, #2
	mov	x9, #36700
	movk	x9, #62914, lsl #16
	movk	x9, #23592, lsl #32
	movk	x9, #655, lsl #48
	cmp	x8, x9
	b.hi	.LBB689_5
// %bb.11:                              // %"$12"
	lsr	x8, x0, #4
	mov	x9, #15729
	movk	x9, #55050, lsl #16
	movk	x9, #28835, lsl #32
	movk	x9, #2621, lsl #48
	umulh	x8, x8, x9
	mov	w9, #400
	msub	x8, x8, x9, x0
	cbz	x8, .LBB689_5
// %bb.12:
	adrp	x0, SymTab+8
	add	x0, x0, :lo12:SymTab+8
	ret
.Lfunc_end689:
	.size	tmDate, .Lfunc_end689-tmDate
	.cfi_endproc
                                        // -- End function
	.globl	tmTime                          // -- Begin function tmTime
	.p2align	4
	.type	tmTime,@function
tmTime:                                 // @tmTime
	.cfi_startproc
// %bb.0:                               // %"$1"
	mov	x8, x0
	adrp	x0, SymTab+8
	add	x0, x0, :lo12:SymTab+8
	tbnz	x8, #63, .LBB690_6
// %bb.1:                               // %"$1"
	tbnz	x1, #63, .LBB690_6
// %bb.2:                               // %"$1"
	cmp	x1, #59                         // =59
	b.hi	.LBB690_6
// %bb.3:                               // %"$1"
	tbnz	x2, #63, .LBB690_6
// %bb.4:                               // %"$1"
	cmp	x2, #59                         // =59
	b.hi	.LBB690_6
// %bb.5:                               // %"$7"
	mov	w9, #3600
	mov	w10, #60
	mul	x10, x1, x10
	madd	x8, x8, x9, x10
	add	x8, x8, x2
	mov	w0, #2
	bfi	x0, x8, #4, #60
.LBB690_6:                              // %"$9"
	ret
.Lfunc_end690:
	.size	tmTime, .Lfunc_end690-tmTime
	.cfi_endproc
                                        // -- End function
	.globl	_date                           // -- Begin function _date
	.p2align	4
	.type	_date,@function
_date:                                  // @_date
	.cfi_startproc
// %bb.0:                               // %"$1"
	adrp	x0, SymTab+8
	add	x0, x0, :lo12:SymTab+8
	ret
.Lfunc_end691:
	.size	_date, .Lfunc_end691-_date
	.cfi_endproc
                                        // -- End function
	.globl	_time                           // -- Begin function _time
	.p2align	4
	.type	_time,@function
_time:                                  // @_time
	.cfi_startproc
// %bb.0:                               // %"$1"
	adrp	x0, SymTab+8
	add	x0, x0, :lo12:SymTab+8
	ret
.Lfunc_end692:
	.size	_time, .Lfunc_end692-_time
	.cfi_endproc
                                        // -- End function
	.globl	pathSize                        // -- Begin function pathSize
	.p2align	4
	.type	pathSize,@function
pathSize:                               // @pathSize
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x30, x19, [sp, #-16]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w19, -8
	.cfi_offset w30, -16
	mov	x19, x0
	bl	bufSize
	tbz	w19, #1, .LBB693_2
// %bb.1:                               // %"$2"
	lsr	x8, x19, #4
	b	.LBB693_3
.LBB693_2:                              // %"$3"
	ldp	w8, w9, [x19, #-4]
	bfi	x8, x9, #32, #32
.LBB693_3:                              // %"$4"
	and	w9, w8, #0xff
	cmp	w9, #126                        // =126
	b.eq	.LBB693_11
// %bb.4:                               // %"$4"
	cmp	w9, #64                         // =64
	b.eq	.LBB693_7
// %bb.5:                               // %"$4"
	cmp	w9, #43                         // =43
	b.ne	.LBB693_13
// %bb.6:                               // %"$9"
	ubfx	w9, w8, #8, #8
	cmp	w9, #64                         // =64
	b.ne	.LBB693_8
.LBB693_7:                              // %"$11"
	adrp	x8, ($PilLen)
	ldr	x8, [x8, :lo12:($PilLen)]
	b	.LBB693_12
.LBB693_8:                              // %"$10"
	and	w9, w8, #0xff
	cmp	w9, #126                        // =126
	b.eq	.LBB693_11
// %bb.9:                               // %"$10"
	cmp	w9, #43                         // =43
	b.ne	.LBB693_13
// %bb.10:                              // %"$15"
	ubfx	w8, w8, #8, #8
	cmp	w8, #126                        // =126
	b.ne	.LBB693_13
.LBB693_11:                             // %"$17"
	adrp	x8, ($UsrLen)
	ldr	x8, [x8, :lo12:($UsrLen)]
.LBB693_12:                             // %"$5"
	add	x8, x0, x8
	sub	x0, x8, #1                      // =1
.LBB693_13:                             // %"$5"
	ldp	x30, x19, [sp], #16             // 16-byte Folded Reload
	ret
.Lfunc_end693:
	.size	pathSize, .Lfunc_end693-pathSize
	.cfi_endproc
                                        // -- End function
	.globl	pathString                      // -- Begin function pathString
	.p2align	4
	.type	pathString,@function
pathString:                             // @pathString
	.cfi_startproc
// %bb.0:                               // %"$1"
	sub	sp, sp, #48                     // =48
	stp	x30, x21, [sp, #16]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #32]             // 16-byte Folded Spill
	.cfi_def_cfa_offset 48
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w30, -32
	mov	x19, x1
	stp	xzr, x0, [sp]
	mov	x0, sp
	bl	symByte
	and	w8, w0, #0xff
	mov	x20, x19
	cmp	w8, #43                         // =43
	b.ne	.LBB694_2
// %bb.1:                               // %"$2"
	strb	w0, [x20], #1
	mov	x0, sp
	bl	symByte
.LBB694_2:                              // %"$3"
	and	w8, w0, #0xff
	cmp	w8, #126                        // =126
	b.eq	.LBB694_6
// %bb.3:                               // %"$3"
	cmp	w8, #64                         // =64
	b.ne	.LBB694_9
// %bb.4:                               // %"$6"
	adrp	x8, ($PilLen)
	ldr	x21, [x8, :lo12:($PilLen)]
	cbz	x21, .LBB694_11
// %bb.5:                               // %"$8"
	adrp	x8, ($PilHome)
	ldr	x1, [x8, :lo12:($PilHome)]
	b	.LBB694_8
.LBB694_6:                              // %"$7"
	adrp	x8, ($UsrLen)
	ldr	x21, [x8, :lo12:($UsrLen)]
	cbz	x21, .LBB694_11
// %bb.7:                               // %"$10"
	adrp	x8, ($UsrHome)
	ldr	x1, [x8, :lo12:($UsrHome)]
.LBB694_8:                              // %"$12.preheader"
	mov	x0, x20
	mov	x2, x21
	bl	memcpy2
	add	x20, x20, x21
	b	.LBB694_11
.LBB694_9:                              // %"$4"
	strb	w0, [x20], #1
	b	.LBB694_11
.LBB694_10:                             // %"$13"
                                        //   in Loop: Header=BB694_11 Depth=1
	add	x20, x20, #1                    // =1
.LBB694_11:                             // %"$12"
                                        // =>This Inner Loop Header: Depth=1
	mov	x0, sp
	bl	symByte
	tst	w0, #0xff
	strb	w0, [x20]
	b.ne	.LBB694_10
// %bb.12:                              // %"$14"
	mov	x0, x19
	ldp	x20, x19, [sp, #32]             // 16-byte Folded Reload
	ldp	x30, x21, [sp, #16]             // 16-byte Folded Reload
	add	sp, sp, #48                     // =48
	ret
.Lfunc_end694:
	.size	pathString, .Lfunc_end694-pathString
	.cfi_endproc
                                        // -- End function
	.globl	mkStrE                          // -- Begin function mkStrE
	.p2align	4
	.type	mkStrE,@function
mkStrE:                                 // @mkStrE
	.cfi_startproc
// %bb.0:                               // %"$1"
	sub	sp, sp, #64                     // =64
	stp	x30, x21, [sp, #32]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #48]             // 16-byte Folded Spill
	.cfi_def_cfa_offset 64
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w30, -32
	mov	x19, x1
	mov	x20, x0
	mov	w8, #4
	mov	x9, sp
	mov	w10, #2
	str	x8, [sp]
	str	x10, [sp, #16]
	adrp	x21, env
	ldr	x8, [x21, :lo12:env]
	str	x8, [sp, #24]
	add	x8, x9, #16                     // =16
	str	x8, [x21, :lo12:env]
	cmp	x19, x20
	b.eq	.LBB695_3
.LBB695_1:                              // %"$3"
                                        // =>This Inner Loop Header: Depth=1
	ldrb	w0, [x20]
	cbz	w0, .LBB695_3
// %bb.2:                               // %"$5"
                                        //   in Loop: Header=BB695_1 Depth=1
	mov	x1, sp
	bl	byteSym
	add	x20, x20, #1                    // =1
	cmp	x19, x20
	b.ne	.LBB695_1
.LBB695_3:                              // %"$4"
	ldr	x0, [sp, #16]
	bl	consStr
	ldr	x8, [sp, #24]
	str	x8, [x21, :lo12:env]
	ldp	x20, x19, [sp, #48]             // 16-byte Folded Reload
	ldp	x30, x21, [sp, #32]             // 16-byte Folded Reload
	add	sp, sp, #64                     // =64
	ret
.Lfunc_end695:
	.size	mkStrE, .Lfunc_end695-mkStrE
	.cfi_endproc
                                        // -- End function
	.globl	openErr                         // -- Begin function openErr
	.p2align	4
	.type	openErr,@function
openErr:                                // @openErr
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-32]!                // 8-byte Folded Spill
	stp	x20, x19, [sp, #16]             // 16-byte Folded Spill
	.cfi_def_cfa_offset 32
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w30, -32
	mov	x19, x1
	mov	x20, x0
	bl	strErrno
	mov	x3, x0
	adrp	x2, .L$133
	add	x2, x2, :lo12:.L$133
	mov	x0, x20
	mov	x1, x19
	bl	err
.Lfunc_end696:
	.size	openErr, .Lfunc_end696-openErr
	.cfi_endproc
                                        // -- End function
	.globl	pipeErr                         // -- Begin function pipeErr
	.p2align	4
	.type	pipeErr,@function
pipeErr:                                // @pipeErr
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x30, x19, [sp, #-16]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w19, -8
	.cfi_offset w30, -16
	mov	x19, x0
	bl	strErrno
	mov	x3, x0
	adrp	x2, .L$135
	add	x2, x2, :lo12:.L$135
	mov	x0, x19
	mov	x1, xzr
	bl	err
.Lfunc_end697:
	.size	pipeErr, .Lfunc_end697-pipeErr
	.cfi_endproc
                                        // -- End function
	.globl	badFd                           // -- Begin function badFd
	.p2align	4
	.type	badFd,@function
badFd:                                  // @badFd
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	adrp	x2, .L$139
	add	x2, x2, :lo12:.L$139
	mov	x3, xzr
	bl	err
.Lfunc_end698:
	.size	badFd, .Lfunc_end698-badFd
	.cfi_endproc
                                        // -- End function
	.globl	writeErr                        // -- Begin function writeErr
	.p2align	4
	.type	writeErr,@function
writeErr:                               // @writeErr
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x30, x19, [sp, #-16]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w19, -8
	.cfi_offset w30, -16
	mov	x19, x0
	bl	strErrno
	mov	x3, x0
	mov	x0, xzr
	mov	x1, xzr
	mov	x2, x19
	bl	err
.Lfunc_end699:
	.size	writeErr, .Lfunc_end699-writeErr
	.cfi_endproc
                                        // -- End function
	.globl	selectErr                       // -- Begin function selectErr
	.p2align	4
	.type	selectErr,@function
selectErr:                              // @selectErr
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x30, x19, [sp, #-16]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w19, -8
	.cfi_offset w30, -16
	mov	x19, x0
	bl	strErrno
	mov	x3, x0
	adrp	x2, .L$140
	add	x2, x2, :lo12:.L$140
	mov	x0, x19
	mov	x1, xzr
	bl	err
.Lfunc_end700:
	.size	selectErr, .Lfunc_end700-selectErr
	.cfi_endproc
                                        // -- End function
	.globl	closeOnExec                     // -- Begin function closeOnExec
	.p2align	4
	.type	closeOnExec,@function
closeOnExec:                            // @closeOnExec
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x30, x19, [sp, #-16]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w19, -8
	.cfi_offset w30, -16
	mov	x19, x0
	bl	fcntlCloExec
	tbnz	w0, #31, .LBB701_2
// %bb.1:                               // %"$3"
	ldp	x30, x19, [sp], #16             // 16-byte Folded Reload
	ret
.LBB701_2:                              // %"$2"
	bl	strErrno
	mov	x3, x0
	adrp	x2, .L$141
	add	x2, x2, :lo12:.L$141
	mov	x0, x19
	mov	x1, xzr
	bl	err
.Lfunc_end701:
	.size	closeOnExec, .Lfunc_end701-closeOnExec
	.cfi_endproc
                                        // -- End function
	.globl	initInFile                      // -- Begin function initInFile
	.p2align	4
	.type	initInFile,@function
initInFile:                             // @initInFile
	.cfi_startproc
// %bb.0:                               // %"$1"
	mov	x0, xzr
	ret
.Lfunc_end702:
	.size	initInFile, .Lfunc_end702-initInFile
	.cfi_endproc
                                        // -- End function
	.globl	initOutFile                     // -- Begin function initOutFile
	.p2align	4
	.type	initOutFile,@function
initOutFile:                            // @initOutFile
	.cfi_startproc
// %bb.0:                               // %"$1"
	mov	x0, xzr
	ret
.Lfunc_end703:
	.size	initOutFile, .Lfunc_end703-initOutFile
	.cfi_endproc
                                        // -- End function
	.globl	slow                            // -- Begin function slow
	.p2align	4
	.type	slow,@function
slow:                                   // @slow
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-32]!                // 8-byte Folded Spill
	stp	x20, x19, [sp, #16]             // 16-byte Folded Spill
	.cfi_def_cfa_offset 32
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w30, -32
	mov	x19, x0
	str	wzr, [x0, #24]
	adrp	x20, ($Signal)
.LBB704_1:                              // %"$2"
                                        // =>This Inner Loop Header: Depth=1
	bl	read
	tbz	w0, #31, .LBB704_6
// %bb.2:                               // %"$3"
                                        //   in Loop: Header=BB704_1 Depth=1
	bl	gErrno
	cmp	w0, #2                          // =2
	b.ne	.LBB704_5
// %bb.3:                               // %"$6"
                                        //   in Loop: Header=BB704_1 Depth=1
	ldr	w8, [x20, :lo12:($Signal)]
	cbz	w8, .LBB704_1
// %bb.4:                               // %"$8"
                                        //   in Loop: Header=BB704_1 Depth=1
	mov	x0, xzr
	bl	sighandler
	b	.LBB704_1
.LBB704_5:
	mov	w0, wzr
.LBB704_6:                              // %"$4"
	str	w0, [x19, #28]
                                        // kill: def $w0 killed $w0 killed $x0
	ldp	x20, x19, [sp, #16]             // 16-byte Folded Reload
	ldr	x30, [sp], #32                  // 8-byte Folded Reload
	ret
.Lfunc_end704:
	.size	slow, .Lfunc_end704-slow
	.cfi_endproc
                                        // -- End function
	.globl	slowNb                          // -- Begin function slowNb
	.p2align	4
	.type	slowNb,@function
slowNb:                                 // @slowNb
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x30, x21, [sp, #-32]!           // 16-byte Folded Spill
	stp	x20, x19, [sp, #16]             // 16-byte Folded Spill
	.cfi_def_cfa_offset 32
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w30, -32
	mov	x19, x0
	adrp	x21, ($Signal)
.LBB705_1:                              // %"$2"
                                        // =>This Inner Loop Header: Depth=1
	bl	nonBlocking
	bl	read
	mov	x20, x0
	bl	fcntlSetFl
	cmp	w20, #1                         // =1
	b.ge	.LBB705_6
// %bb.2:                               // %"$3"
                                        //   in Loop: Header=BB705_1 Depth=1
	cbz	w20, .LBB705_7
// %bb.3:                               // %"$6"
                                        //   in Loop: Header=BB705_1 Depth=1
	bl	gErrno
	cmp	w0, #2                          // =2
	b.ne	.LBB705_8
// %bb.4:                               // %"$10"
                                        //   in Loop: Header=BB705_1 Depth=1
	ldr	w8, [x21, :lo12:($Signal)]
	cbz	w8, .LBB705_1
// %bb.5:                               // %"$12"
                                        //   in Loop: Header=BB705_1 Depth=1
	mov	x0, xzr
	bl	sighandler
	b	.LBB705_1
.LBB705_6:                              // %"$5"
	stp	wzr, w20, [x19, #24]
	b	.LBB705_11
.LBB705_7:                              // %"$7"
	mov	w8, #-1
	stp	w8, w8, [x19, #24]
	b	.LBB705_11
.LBB705_8:                              // %"$6"
	cmp	w0, #4                          // =4
	b.ne	.LBB705_10
// %bb.9:                               // %"$4.loopexit"
	mov	w20, #-1
	b	.LBB705_11
.LBB705_10:                             // %"$11"
	mov	w20, wzr
	stp	wzr, wzr, [x19, #24]
.LBB705_11:                             // %"$4"
	mov	w0, w20
	ldp	x20, x19, [sp, #16]             // 16-byte Folded Reload
	ldp	x30, x21, [sp], #32             // 16-byte Folded Reload
	ret
.Lfunc_end705:
	.size	slowNb, .Lfunc_end705-slowNb
	.cfi_endproc
                                        // -- End function
	.globl	rdBytes                         // -- Begin function rdBytes
	.p2align	4
	.type	rdBytes,@function
rdBytes:                                // @rdBytes
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x30, x21, [sp, #-32]!           // 16-byte Folded Spill
	stp	x20, x19, [sp, #16]             // 16-byte Folded Spill
	.cfi_def_cfa_offset 32
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w30, -32
	mov	w19, w2
	mov	x20, x1
	adrp	x21, ($Signal)
	b	.LBB706_2
.LBB706_1:                              // %"$6"
                                        //   in Loop: Header=BB706_2 Depth=1
	add	x20, x20, w0, sxtw
	subs	w19, w19, w0
	b.eq	.LBB706_8
.LBB706_2:                              // %"$3"
                                        // =>This Inner Loop Header: Depth=1
	bl	read
	cmp	w0, #1                          // =1
	b.ge	.LBB706_1
// %bb.3:                               // %"$4"
                                        //   in Loop: Header=BB706_2 Depth=1
	cbz	w0, .LBB706_5
// %bb.4:                               // %"$8"
                                        //   in Loop: Header=BB706_2 Depth=1
	bl	gErrno
	cmp	w0, #2                          // =2
	cset	w8, eq
	tbnz	w8, #0, .LBB706_6
	b	.LBB706_9
.LBB706_5:                              //   in Loop: Header=BB706_2 Depth=1
	mov	w8, wzr
	tbz	w8, #0, .LBB706_9
.LBB706_6:                              // %"$10"
                                        //   in Loop: Header=BB706_2 Depth=1
	ldr	w8, [x21, :lo12:($Signal)]
	cbz	w8, .LBB706_2
// %bb.7:                               // %"$11"
                                        //   in Loop: Header=BB706_2 Depth=1
	mov	x0, xzr
	bl	sighandler
	b	.LBB706_2
.LBB706_8:                              // %"$14"
	mov	w0, #1
	b	.LBB706_10
.LBB706_9:                              // %"$9"
	mov	w0, wzr
.LBB706_10:                             // %"$9"
	ldp	x20, x19, [sp, #16]             // 16-byte Folded Reload
	ldp	x30, x21, [sp], #32             // 16-byte Folded Reload
	ret
.Lfunc_end706:
	.size	rdBytes, .Lfunc_end706-rdBytes
	.cfi_endproc
                                        // -- End function
	.globl	rdBytesNb                       // -- Begin function rdBytesNb
	.p2align	4
	.type	rdBytesNb,@function
rdBytesNb:                              // @rdBytesNb
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-48]!                // 8-byte Folded Spill
	stp	x22, x21, [sp, #16]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #32]             // 16-byte Folded Spill
	.cfi_def_cfa_offset 48
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w30, -48
	mov	w19, w2
	mov	x20, x1
	adrp	x22, ($Signal)
.LBB707_1:                              // %"$2"
                                        // =>This Inner Loop Header: Depth=1
	bl	nonBlocking
	bl	read
	mov	x21, x0
	bl	fcntlSetFl
	cmp	w21, #1                         // =1
	b.ge	.LBB707_14
// %bb.2:                               // %"$4"
                                        //   in Loop: Header=BB707_1 Depth=1
	cbz	w21, .LBB707_16
// %bb.3:                               // %"$17"
                                        //   in Loop: Header=BB707_1 Depth=1
	bl	gErrno
	cmp	w0, #4                          // =4
	b.eq	.LBB707_17
// %bb.4:                               // %"$20"
                                        //   in Loop: Header=BB707_1 Depth=1
	cmp	w0, #2                          // =2
	b.ne	.LBB707_16
// %bb.5:                               // %"$22"
                                        //   in Loop: Header=BB707_1 Depth=1
	ldr	w8, [x22, :lo12:($Signal)]
	cbz	w8, .LBB707_1
// %bb.6:                               // %"$24"
                                        //   in Loop: Header=BB707_1 Depth=1
	mov	x0, xzr
	bl	sighandler
	b	.LBB707_1
.LBB707_7:                              // %"$7"
                                        //   in Loop: Header=BB707_14 Depth=1
	add	x20, x20, w21, sxtw
.LBB707_8:                              // %"$8"
                                        //   Parent Loop BB707_14 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	bl	read
	mov	x21, x0
	cmp	w21, #0                         // =0
	b.gt	.LBB707_14
// %bb.9:                               // %"$9"
                                        //   in Loop: Header=BB707_8 Depth=2
	cbz	w21, .LBB707_11
// %bb.10:                              // %"$12"
                                        //   in Loop: Header=BB707_8 Depth=2
	bl	gErrno
	cmp	w0, #2                          // =2
	cset	w8, eq
	tbnz	w8, #0, .LBB707_12
	b	.LBB707_16
.LBB707_11:                             //   in Loop: Header=BB707_8 Depth=2
	mov	w8, wzr
	tbz	w8, #0, .LBB707_16
.LBB707_12:                             // %"$14"
                                        //   in Loop: Header=BB707_8 Depth=2
	ldr	w8, [x22, :lo12:($Signal)]
	cbz	w8, .LBB707_8
// %bb.13:                              // %"$15"
                                        //   in Loop: Header=BB707_8 Depth=2
	mov	x0, xzr
	bl	sighandler
	b	.LBB707_8
.LBB707_14:                             // %"$5"
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB707_8 Depth 2
	subs	w19, w19, w21
	b.ne	.LBB707_7
// %bb.15:                              // %"$6"
	mov	w0, #1
	b	.LBB707_18
.LBB707_16:
	mov	x0, xzr
	b	.LBB707_18
.LBB707_17:
	mov	x0, #-1
.LBB707_18:                             // %"$18"
	ldp	x20, x19, [sp, #32]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #16]             // 16-byte Folded Reload
	ldr	x30, [sp], #48                  // 8-byte Folded Reload
	ret
.Lfunc_end707:
	.size	rdBytesNb, .Lfunc_end707-rdBytesNb
	.cfi_endproc
                                        // -- End function
	.globl	wrBytes                         // -- Begin function wrBytes
	.p2align	4
	.type	wrBytes,@function
wrBytes:                                // @wrBytes
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-48]!                // 8-byte Folded Spill
	stp	x22, x21, [sp, #16]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #32]             // 16-byte Folded Spill
	.cfi_def_cfa_offset 48
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w30, -48
	mov	w19, w2
	mov	x21, x1
	mov	w20, w0
	adrp	x22, ($Signal)
.LBB708_1:                              // %"$2"
                                        // =>This Inner Loop Header: Depth=1
	bl	write
	tbnz	w0, #31, .LBB708_4
// %bb.2:                               // %"$4"
                                        //   in Loop: Header=BB708_1 Depth=1
	subs	w19, w19, w0
	b.eq	.LBB708_11
// %bb.3:                               // %"$19"
                                        //   in Loop: Header=BB708_1 Depth=1
	add	x21, x21, w0, sxtw
	b	.LBB708_1
.LBB708_4:                              // %"$3"
                                        //   in Loop: Header=BB708_1 Depth=1
	bl	gErrno
	cmp	w0, #3                          // =3
	b.eq	.LBB708_10
// %bb.5:                               // %"$6"
                                        //   in Loop: Header=BB708_1 Depth=1
	cmp	w0, #6                          // =6
	b.eq	.LBB708_10
// %bb.6:                               // %"$9"
                                        //   in Loop: Header=BB708_1 Depth=1
	cmp	w0, #7                          // =7
	b.eq	.LBB708_10
// %bb.7:                               // %"$11"
                                        //   in Loop: Header=BB708_1 Depth=1
	cmp	w0, #2                          // =2
	b.ne	.LBB708_13
// %bb.8:                               // %"$14"
                                        //   in Loop: Header=BB708_1 Depth=1
	ldr	w8, [x22, :lo12:($Signal)]
	cbz	w8, .LBB708_1
// %bb.9:                               // %"$17"
                                        //   in Loop: Header=BB708_1 Depth=1
	mov	x0, xzr
	bl	sighandler
	b	.LBB708_1
.LBB708_10:
	mov	w0, wzr
	b	.LBB708_12
.LBB708_11:
	mov	w0, #1
.LBB708_12:                             // %"$7"
	ldp	x20, x19, [sp, #32]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #16]             // 16-byte Folded Reload
	ldr	x30, [sp], #48                  // 8-byte Folded Reload
	ret
.LBB708_13:                             // %"$13"
	cmp	w20, #2                         // =2
	b.ne	.LBB708_15
// %bb.14:                              // %"$15"
	mov	w0, #2
	bl	bye
.LBB708_15:                             // %"$16"
	adrp	x0, .L$142
	add	x0, x0, :lo12:.L$142
	bl	writeErr
.Lfunc_end708:
	.size	wrBytes, .Lfunc_end708-wrBytes
	.cfi_endproc
                                        // -- End function
	.globl	clsChild                        // -- Begin function clsChild
	.p2align	4
	.type	clsChild,@function
clsChild:                               // @clsChild
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	adrp	x0, .L$143
	add	x0, x0, :lo12:.L$143
	bl	outString
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end709:
	.size	clsChild, .Lfunc_end709-clsChild
	.cfi_endproc
                                        // -- End function
	.globl	wrChild                         // -- Begin function wrChild
	.p2align	4
	.type	wrChild,@function
wrChild:                                // @wrChild
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	adrp	x0, .L$144
	add	x0, x0, :lo12:.L$144
	bl	outString
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end710:
	.size	wrChild, .Lfunc_end710-wrChild
	.cfi_endproc
                                        // -- End function
	.globl	flushAll                        // -- Begin function flushAll
	.p2align	4
	.type	flushAll,@function
flushAll:                               // @flushAll
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	adrp	x0, .L$146
	add	x0, x0, :lo12:.L$146
	bl	outString
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end711:
	.size	flushAll, .Lfunc_end711-flushAll
	.cfi_endproc
                                        // -- End function
	.globl	getBinary                       // -- Begin function getBinary
	.p2align	4
	.type	getBinary,@function
getBinary:                              // @getBinary
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x30, x19, [sp, #-16]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w19, -8
	.cfi_offset w30, -16
	adrp	x8, ($InFile)
	ldr	x19, [x8, :lo12:($InFile)]
	ldp	w8, w9, [x19, #24]
	cmp	w8, w9
	b.ne	.LBB712_5
// %bb.1:                               // %"$2"
	tbnz	w8, #31, .LBB712_4
// %bb.2:                               // %"$5"
	mov	x0, x19
	bl	slow
	cmp	w0, #0                          // =0
	cset	w8, eq
	cbz	w8, .LBB712_5
.LBB712_3:                              // %"$6"
	mov	w0, #-1
	ldp	x30, x19, [sp], #16             // 16-byte Folded Reload
	ret
.LBB712_4:
	mov	w8, #1
	cbnz	w8, .LBB712_3
.LBB712_5:                              // %"$3"
	add	w9, w8, #1                      // =1
	str	w9, [x19, #24]
	add	x8, x19, w8, sxtw
	ldrb	w0, [x8, #32]
	ldp	x30, x19, [sp], #16             // 16-byte Folded Reload
	ret
.Lfunc_end712:
	.size	getBinary, .Lfunc_end712-getBinary
	.cfi_endproc
                                        // -- End function
	.globl	pr                              // -- Begin function pr
	.p2align	4
	.type	pr,@function
pr:                                     // @pr
	.cfi_startproc
// %bb.0:                               // %"$1"
	adrp	x8, _putStdout
	add	x8, x8, :lo12:_putStdout
	adrp	x9, ($PutBin)
	str	x8, [x9, :lo12:($PutBin)]
	b	binPrint
.Lfunc_end713:
	.size	pr, .Lfunc_end713-pr
	.cfi_endproc
                                        // -- End function
	.globl	putTell                         // -- Begin function putTell
	.p2align	4
	.type	putTell,@function
putTell:                                // @putTell
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	adrp	x8, ($Ptr)
	ldr	x9, [x8, :lo12:($Ptr)]
	strb	w0, [x9], #1
	str	x9, [x8, :lo12:($Ptr)]
	adrp	x8, ($End)
	ldr	x8, [x8, :lo12:($End)]
	cmp	x9, x8
	b.eq	.LBB714_2
// %bb.1:                               // %"$3"
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.LBB714_2:                              // %"$2"
	adrp	x2, .L$147
	add	x2, x2, :lo12:.L$147
	mov	x0, xzr
	mov	x1, xzr
	mov	x3, xzr
	bl	err
.Lfunc_end714:
	.size	putTell, .Lfunc_end714-putTell
	.cfi_endproc
                                        // -- End function
	.globl	prTell                          // -- Begin function prTell
	.p2align	4
	.type	prTell,@function
prTell:                                 // @prTell
	.cfi_startproc
// %bb.0:                               // %"$1"
	adrp	x8, putTell
	add	x8, x8, :lo12:putTell
	adrp	x9, ($PutBin)
	str	x8, [x9, :lo12:($PutBin)]
	adrp	x8, ($Extn)
	str	wzr, [x8, :lo12:($Extn)]
	b	binPrint
.Lfunc_end715:
	.size	prTell, .Lfunc_end715-prTell
	.cfi_endproc
                                        // -- End function
	.globl	tellBeg                         // -- Begin function tellBeg
	.p2align	4
	.type	tellBeg,@function
tellBeg:                                // @tellBeg
	.cfi_startproc
// %bb.0:                               // %"$1"
	ret
.Lfunc_end716:
	.size	tellBeg, .Lfunc_end716-tellBeg
	.cfi_endproc
                                        // -- End function
	.globl	tellEnd                         // -- Begin function tellEnd
	.p2align	4
	.type	tellEnd,@function
tellEnd:                                // @tellEnd
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x30, x23, [sp, #-48]!           // 16-byte Folded Spill
	stp	x22, x21, [sp, #16]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #32]             // 16-byte Folded Spill
	.cfi_def_cfa_offset 48
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w30, -48
	mov	w19, w0
	adrp	x8, ($Ptr)
	ldr	x8, [x8, :lo12:($Ptr)]
	adrp	x9, ($TellBuf)
	ldr	x22, [x9, :lo12:($TellBuf)]
	mov	w9, #3
	strb	w9, [x8]
	sub	w8, w8, w22
	sub	w20, w8, #7                     // =7
	stp	w0, w20, [x22]
	adrp	x21, ($Tell)
	ldr	w0, [x21, :lo12:($Tell)]
	cbz	w0, .LBB717_3
// %bb.1:                               // %"$2"
	add	w2, w8, #1                      // =1
	mov	x1, x22
	bl	wrBytes
	tbnz	w0, #0, .LBB717_3
// %bb.2:                               // %"$4"
	bl	close
	str	wzr, [x21, :lo12:($Tell)]
.LBB717_3:                              // %"$3"
	adrp	x8, ($Child)
	ldr	x21, [x8, :lo12:($Child)]
	adrp	x8, ($Children)
	ldr	w8, [x8, :lo12:($Children)]
	mov	w9, #28
	mul	w8, w8, w9
	add	x23, x21, w8, sxtw
	add	x22, x22, #8                    // =8
	b	.LBB717_5
.LBB717_4:                              // %"$14"
                                        //   in Loop: Header=BB717_5 Depth=1
	add	x21, x21, #28                   // =28
.LBB717_5:                              // %"$6"
                                        // =>This Inner Loop Header: Depth=1
	cmp	x21, x23
	b.eq	.LBB717_12
// %bb.6:                               // %"$7"
                                        //   in Loop: Header=BB717_5 Depth=1
	ldr	w8, [x21, #16]
	cbz	w8, .LBB717_9
// %bb.7:                               // %"$10"
                                        //   in Loop: Header=BB717_5 Depth=1
	cbz	w19, .LBB717_11
// %bb.8:                               // %"$12"
                                        //   in Loop: Header=BB717_5 Depth=1
	ldr	w8, [x21, #16]
	cmp	w19, w8
	cset	w8, eq
.LBB717_9:                              // %"$9"
                                        //   in Loop: Header=BB717_5 Depth=1
	cbz	w8, .LBB717_4
.LBB717_10:                             // %"$13"
                                        //   in Loop: Header=BB717_5 Depth=1
	mov	x0, x21
	mov	x1, x22
	mov	w2, w20
	bl	wrChild
	b	.LBB717_4
.LBB717_11:                             //   in Loop: Header=BB717_5 Depth=1
	mov	w8, #1
	cbz	w8, .LBB717_4
	b	.LBB717_10
.LBB717_12:                             // %"$8"
	ldp	x20, x19, [sp, #32]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #16]             // 16-byte Folded Reload
	ldp	x30, x23, [sp], #48             // 16-byte Folded Reload
	ret
.Lfunc_end717:
	.size	tellEnd, .Lfunc_end717-tellEnd
	.cfi_endproc
                                        // -- End function
	.globl	unsync                          // -- Begin function unsync
	.p2align	4
	.type	unsync,@function
unsync:                                 // @unsync
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-32]!           // 16-byte Folded Spill
	str	x19, [sp, #16]                  // 8-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 32
	.cfi_offset w19, -16
	.cfi_offset w30, -24
	.cfi_offset w29, -32
	adrp	x19, ($Tell)
	ldr	w0, [x19, :lo12:($Tell)]
	cbz	w0, .LBB718_3
// %bb.1:                               // %"$2"
	mov	x8, sp
	sub	x1, x8, #16                     // =16
	mov	sp, x1
	stp	wzr, wzr, [x8, #-16]
	mov	w2, #8
	bl	wrBytes
	tbnz	w0, #0, .LBB718_3
// %bb.2:                               // %"$4"
	bl	close
	str	wzr, [x19, :lo12:($Tell)]
.LBB718_3:                              // %"$3"
	adrp	x8, ($Sync)
	strb	wzr, [x8, :lo12:($Sync)]
	mov	sp, x29
	ldr	x19, [sp, #16]                  // 8-byte Folded Reload
	ldp	x29, x30, [sp], #32             // 16-byte Folded Reload
	ret
.Lfunc_end718:
	.size	unsync, .Lfunc_end718-unsync
	.cfi_endproc
                                        // -- End function
	.globl	pushErrFile                     // -- Begin function pushErrFile
	.p2align	4
	.type	pushErrFile,@function
pushErrFile:                            // @pushErrFile
	.cfi_startproc
// %bb.0:                               // %"$1"
	adrp	x8, env+64
	ldr	x9, [x8, :lo12:env+64]
	str	x9, [x0]
	str	x0, [x8, :lo12:env+64]
	ret
.Lfunc_end719:
	.size	pushErrFile, .Lfunc_end719-pushErrFile
	.cfi_endproc
                                        // -- End function
	.globl	pushCtlFile                     // -- Begin function pushCtlFile
	.p2align	4
	.type	pushCtlFile,@function
pushCtlFile:                            // @pushCtlFile
	.cfi_startproc
// %bb.0:                               // %"$1"
	adrp	x8, env+72
	ldr	x9, [x8, :lo12:env+72]
	str	x9, [x0]
	str	x0, [x8, :lo12:env+72]
	ret
.Lfunc_end720:
	.size	pushCtlFile, .Lfunc_end720-pushCtlFile
	.cfi_endproc
                                        // -- End function
	.globl	_path                           // -- Begin function _path
	.p2align	4
	.type	_path,@function
_path:                                  // @_path
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-32]!           // 16-byte Folded Spill
	str	x19, [sp, #16]                  // 8-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 32
	.cfi_offset w19, -16
	.cfi_offset w30, -24
	.cfi_offset w29, -32
	mov	x19, x0
	ldp	w0, w8, [x0, #8]
	bfi	x0, x8, #32, #32
	bl	evSym
	mov	x1, x0
	mov	x0, x19
	bl	xName
	mov	x19, x0
	bl	pathSize
	add	x8, x0, #15                     // =15
	and	x8, x8, #0xfffffffffffffff0
	mov	x9, sp
	sub	x1, x9, x8
	mov	sp, x1
	mov	x0, x19
	bl	pathString
	bl	mkStr
	mov	sp, x29
	ldr	x19, [sp, #16]                  // 8-byte Folded Reload
	ldp	x29, x30, [sp], #32             // 16-byte Folded Reload
	ret
.Lfunc_end721:
	.size	_path, .Lfunc_end721-_path
	.cfi_endproc
                                        // -- End function
	.globl	pollfd                          // -- Begin function pollfd
	.p2align	4
	.type	pollfd,@function
pollfd:                                 // @pollfd
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x30, x21, [sp, #-32]!           // 16-byte Folded Spill
	stp	x20, x19, [sp, #16]             // 16-byte Folded Spill
	.cfi_def_cfa_offset 32
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w30, -32
	mov	w19, w0
	adrp	x8, ($Nfds)
	ldr	w20, [x8, :lo12:($Nfds)]
	cmp	w0, w20
	adrp	x21, ($Poll)
	b.lt	.LBB722_4
// %bb.1:                               // %"$2"
	ldr	x0, [x21, :lo12:($Poll)]
	add	w9, w19, #1                     // =1
	str	w9, [x8, :lo12:($Nfds)]
	sbfiz	x1, x9, #3, #32
	bl	alloc
	str	x0, [x21, :lo12:($Poll)]
.LBB722_2:                              // %"$4"
                                        // =>This Inner Loop Header: Depth=1
	bl	pollIgn
	cmp	w19, w20
	b.eq	.LBB722_4
// %bb.3:                               // %"$5"
                                        //   in Loop: Header=BB722_2 Depth=1
	add	w20, w20, #1                    // =1
	b	.LBB722_2
.LBB722_4:                              // %"$3"
	ldr	x8, [x21, :lo12:($Poll)]
	add	x0, x8, w19, sxtw #3
	ldp	x20, x19, [sp, #16]             // 16-byte Folded Reload
	ldp	x30, x21, [sp], #32             // 16-byte Folded Reload
	ret
.Lfunc_end722:
	.size	pollfd, .Lfunc_end722-pollfd
	.cfi_endproc
                                        // -- End function
	.globl	hasData                         // -- Begin function hasData
	.p2align	4
	.type	hasData,@function
hasData:                                // @hasData
	.cfi_startproc
// %bb.0:                               // %"$1"
	adrp	x8, ($InFDs)
	ldr	w8, [x8, :lo12:($InFDs)]
	cmp	w8, w0
	b.le	.LBB723_4
// %bb.1:                               // %"$3"
	adrp	x8, ($InFiles)
	ldr	x8, [x8, :lo12:($InFiles)]
	ldr	x8, [x8, w0, sxtw #3]
	cbz	x8, .LBB723_4
// %bb.2:                               // %"$4"
	ldr	w9, [x8, #8]
	tbnz	w9, #31, .LBB723_4
// %bb.3:                               // %"$6"
	ldp	w8, w9, [x8, #24]
	cmp	w9, w8
	cset	w0, gt
	ret
.LBB723_4:
	mov	w0, wzr
	ret
.Lfunc_end723:
	.size	hasData, .Lfunc_end723-hasData
	.cfi_endproc
                                        // -- End function
	.globl	inReady                         // -- Begin function inReady
	.p2align	4
	.type	inReady,@function
inReady:                                // @inReady
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-32]!                // 8-byte Folded Spill
	stp	x20, x19, [sp, #16]             // 16-byte Folded Spill
	.cfi_def_cfa_offset 32
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w30, -32
	mov	w19, w1
	mov	w20, w0
	bl	pollfd
	adrp	x8, ($InFDs)
	ldr	w8, [x8, :lo12:($InFDs)]
	cmp	w20, w8
	b.ge	.LBB724_5
// %bb.1:                               // %"$3"
	adrp	x8, ($InFiles)
	ldr	x8, [x8, :lo12:($InFiles)]
	ldr	x20, [x8, w20, sxtw #3]
	cbz	x20, .LBB724_5
// %bb.2:                               // %"$5"
	ldr	w8, [x20, #8]
	tbnz	w8, #31, .LBB724_5
// %bb.3:                               // %"$8"
	ldp	w9, w8, [x20, #24]
	cmp	w8, w9
	b.le	.LBB724_7
// %bb.4:
	mov	w0, #1
	b	.LBB724_6
.LBB724_5:                              // %"$4"
	bl	readyIn
.LBB724_6:                              // %"$2"
	and	w0, w0, #0x1
	ldp	x20, x19, [sp, #16]             // 16-byte Folded Reload
	ldr	x30, [sp], #32                  // 8-byte Folded Reload
	ret
.LBB724_7:                              // %"$11"
	bl	readyIn
	mov	w8, w0
	sbfx	w0, w0, #0, #1
	tbz	w8, #0, .LBB724_6
// %bb.8:                               // %"$11"
	tbnz	w19, #0, .LBB724_6
// %bb.9:                               // %"$15"
	mov	x0, x20
	bl	slowNb
	mvn	w8, w0
	lsr	w0, w8, #31
	b	.LBB724_6
.Lfunc_end724:
	.size	inReady, .Lfunc_end724-inReady
	.cfi_endproc
                                        // -- End function
	.globl	waitFd                          // -- Begin function waitFd
	.p2align	4
	.type	waitFd,@function
waitFd:                                 // @waitFd
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	adrp	x0, .L$149
	add	x0, x0, :lo12:.L$149
	bl	outString
	mov	x0, xzr
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end725:
	.size	waitFd, .Lfunc_end725-waitFd
	.cfi_endproc
                                        // -- End function
	.globl	_wait                           // -- Begin function _wait
	.p2align	4
	.type	_wait,@function
_wait:                                  // @_wait
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x30, x23, [sp, #-48]!           // 16-byte Folded Spill
	stp	x22, x21, [sp, #16]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #32]             // 16-byte Folded Spill
	.cfi_def_cfa_offset 48
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w30, -48
	mov	x19, x0
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w1, w8, [x9]
	bfi	x1, x8, #32, #32
	ldp	w21, w8, [x9, #8]
	bfi	x21, x8, #32, #32
	tst	x1, #0x6
	b.ne	.LBB726_4
// %bb.1:                               // %"$3"
	tbz	w1, #3, .LBB726_3
// %bb.2:                               // %"$6"
	ldp	w1, w8, [x1]
	bfi	x1, x8, #32, #32
	b	.LBB726_4
.LBB726_3:                              // %"$5"
	mov	x0, x1
	bl	evList
	mov	x1, x0
.LBB726_4:                              // %"$2"
	adrp	x22, SymTab+8
	add	x22, x22, :lo12:SymTab+8
	cmp	x1, x22
	b.ne	.LBB726_6
// %bb.5:
	mov	x20, #9223372036854775807
	b	.LBB726_7
.LBB726_6:                              // %"$8"
	mov	x0, x19
	bl	xCnt
	mov	x20, x0
.LBB726_7:                              // %"$9"
	ldp	w9, w8, [x21]
	bfi	x9, x8, #32, #32
	adrp	x8, SymTab+216
	add	x8, x8, :lo12:SymTab+216
	cmp	x9, x8
	b.ne	.LBB726_10
// %bb.8:                               // %"$10"
	ldp	w1, w8, [x21, #8]
	bfi	x1, x8, #32, #32
	mov	x0, x19
	bl	evCnt
	mov	x21, x0
	mov	x0, x19
	mov	w1, w21
	mov	x2, x20
	bl	waitFd
	cbz	x0, .LBB726_26
// %bb.9:                               // %"$13"
	mov	w0, #2
	bfi	x0, x21, #4, #60
	b	.LBB726_28
.LBB726_10:                             // %"$16"
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB726_11 Depth 2
	mov	x23, x21
.LBB726_11:                             // %"$17"
                                        //   Parent Loop BB726_10 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	w0, w8, [x23]
	bfi	x0, x8, #32, #32
	ldp	w23, w8, [x23, #8]
	bfi	x23, x8, #32, #32
	tst	x23, #0xf
	b.ne	.LBB726_14
// %bb.12:                              // %"$18"
                                        //   in Loop: Header=BB726_11 Depth=2
	tst	x0, #0xf
	b.ne	.LBB726_11
// %bb.13:                              // %"$27"
                                        //   in Loop: Header=BB726_11 Depth=2
	bl	evList
	b	.LBB726_11
.LBB726_14:                             // %"$20"
                                        //   in Loop: Header=BB726_10 Depth=1
	tst	x0, #0x6
	b.ne	.LBB726_17
// %bb.15:                              // %"$22"
                                        //   in Loop: Header=BB726_10 Depth=1
	tbz	w0, #3, .LBB726_19
// %bb.16:                              // %"$25"
                                        //   in Loop: Header=BB726_10 Depth=1
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
.LBB726_17:                             // %"$19"
                                        //   in Loop: Header=BB726_10 Depth=1
	cmp	x0, x22
	b.ne	.LBB726_28
.LBB726_18:                             // %"$28"
                                        //   in Loop: Header=BB726_10 Depth=1
	mov	x0, x19
	mov	w1, #-1
	mov	x2, x20
	bl	waitFd
	mov	x20, x0
	cbnz	x0, .LBB726_10
	b	.LBB726_22
.LBB726_19:                             // %"$24"
                                        //   in Loop: Header=BB726_10 Depth=1
	bl	evList
	cmp	x0, x22
	b.eq	.LBB726_18
	b	.LBB726_28
.LBB726_20:                             // %"$34"
                                        //   in Loop: Header=BB726_22 Depth=1
	tst	x0, #0xf
	b.ne	.LBB726_22
// %bb.21:                              // %"$43"
                                        //   in Loop: Header=BB726_22 Depth=1
	bl	evList
.LBB726_22:                             // %"$33"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w0, w8, [x21]
	bfi	x0, x8, #32, #32
	ldp	w21, w8, [x21, #8]
	bfi	x21, x8, #32, #32
	tst	x21, #0xf
	b.eq	.LBB726_20
// %bb.23:                              // %"$36"
	tst	x0, #0x6
	b.ne	.LBB726_28
// %bb.24:                              // %"$38"
	tbz	w0, #3, .LBB726_27
// %bb.25:                              // %"$41"
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB726_28
.LBB726_26:
	adrp	x0, SymTab+8
	add	x0, x0, :lo12:SymTab+8
	b	.LBB726_28
.LBB726_27:                             // %"$40"
	bl	evList
.LBB726_28:                             // %"$12"
	ldp	x20, x19, [sp, #32]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #16]             // 16-byte Folded Reload
	ldp	x30, x23, [sp], #48             // 16-byte Folded Reload
	ret
.Lfunc_end726:
	.size	_wait, .Lfunc_end726-_wait
	.cfi_endproc
                                        // -- End function
	.globl	_sync                           // -- Begin function _sync
	.p2align	4
	.type	_sync,@function
_sync:                                  // @_sync
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	adrp	x0, .L$150
	add	x0, x0, :lo12:.L$150
	bl	outString
	adrp	x0, SymTab+8
	add	x0, x0, :lo12:SymTab+8
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end727:
	.size	_sync, .Lfunc_end727-_sync
	.cfi_endproc
                                        // -- End function
	.globl	_hear                           // -- Begin function _hear
	.p2align	4
	.type	_hear,@function
_hear:                                  // @_hear
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	adrp	x0, .L$151
	add	x0, x0, :lo12:.L$151
	bl	outString
	adrp	x0, SymTab+8
	add	x0, x0, :lo12:SymTab+8
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end728:
	.size	_hear, .Lfunc_end728-_hear
	.cfi_endproc
                                        // -- End function
	.globl	_tell                           // -- Begin function _tell
	.p2align	4
	.type	_tell,@function
_tell:                                  // @_tell
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	adrp	x0, .L$152
	add	x0, x0, :lo12:.L$152
	bl	outString
	adrp	x0, SymTab+8
	add	x0, x0, :lo12:SymTab+8
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end729:
	.size	_tell, .Lfunc_end729-_tell
	.cfi_endproc
                                        // -- End function
	.globl	_poll                           // -- Begin function _poll
	.p2align	4
	.type	_poll,@function
_poll:                                  // @_poll
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	adrp	x0, .L$153
	add	x0, x0, :lo12:.L$153
	bl	outString
	adrp	x0, SymTab+8
	add	x0, x0, :lo12:SymTab+8
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end730:
	.size	_poll, .Lfunc_end730-_poll
	.cfi_endproc
                                        // -- End function
	.globl	rdOpen                          // -- Begin function rdOpen
	.p2align	4
	.type	rdOpen,@function
rdOpen:                                 // @rdOpen
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-80]!           // 16-byte Folded Spill
	str	x25, [sp, #16]                  // 8-byte Folded Spill
	stp	x24, x23, [sp, #32]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #48]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #64]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 80
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -64
	.cfi_offset w30, -72
	.cfi_offset w29, -80
	mov	x19, x2
	adrp	x8, SymTab+8
	add	x8, x8, :lo12:SymTab+8
	cmp	x1, x8
	b.ne	.LBB731_2
// %bb.1:                               // %"$4"
	adrp	x8, ($InFiles)
	ldr	x8, [x8, :lo12:($InFiles)]
	ldr	x1, [x8]
	b	.LBB731_18
.LBB731_2:                              // %"$3"
	mov	x21, x1
	mov	x20, x0
	tst	x1, #0x6
	b.eq	.LBB731_8
// %bb.3:                               // %"$6"
	lsr	x8, x21, #4
	tbz	w21, #3, .LBB731_16
// %bb.4:                               // %"$9"
	adrp	x9, env+48
	ldr	x9, [x9, :lo12:env+48]
.LBB731_5:                              // %"$10"
                                        // =>This Inner Loop Header: Depth=1
	ldr	x9, [x9]
	cbz	x9, .LBB731_30
// %bb.6:                               // %"$12"
                                        //   in Loop: Header=BB731_5 Depth=1
	subs	w8, w8, #1                      // =1
	b.ne	.LBB731_5
// %bb.7:                               // %"$14"
	ldr	x1, [x9, #8]
	b	.LBB731_18
.LBB731_8:                              // %"$5"
	tbz	w21, #3, .LBB731_20
// %bb.9:                               // %"$20"
	mov	x0, x20
	mov	x1, x21
	bl	xName
	mov	x22, x0
	bl	pathSize
	add	x8, x0, #15                     // =15
	and	x8, x8, #0xfffffffffffffff0
	mov	x9, sp
	sub	x1, x9, x8
	mov	sp, x1
	mov	x0, x22
	bl	pathString
	ldrb	w23, [x0]
	cmp	w23, #43                        // =43
	adrp	x24, ($Signal)
.LBB731_10:                             // %"$23"
                                        // =>This Inner Loop Header: Depth=1
	cmp	w23, #43                        // =43
	b.ne	.LBB731_12
// %bb.11:                              // %"$24"
                                        //   in Loop: Header=BB731_10 Depth=1
	bl	openRdWrAppend
	mov	w22, w0
	tbnz	w0, #31, .LBB731_13
	b	.LBB731_29
.LBB731_12:                             // %"$25"
                                        //   in Loop: Header=BB731_10 Depth=1
	bl	openRd
	mov	w22, w0
	tbz	w0, #31, .LBB731_29
.LBB731_13:                             // %"$27"
                                        //   in Loop: Header=BB731_10 Depth=1
	bl	gErrno
	cmp	w0, #2                          // =2
	b.ne	.LBB731_31
// %bb.14:                              // %"$30"
                                        //   in Loop: Header=BB731_10 Depth=1
	ldr	w8, [x24, :lo12:($Signal)]
	cbz	w8, .LBB731_10
// %bb.15:                              // %"$31"
                                        //   in Loop: Header=BB731_10 Depth=1
	mov	x0, x20
	bl	sighandler
	b	.LBB731_10
.LBB731_16:                             // %"$8"
	adrp	x9, ($InFDs)
	ldr	w9, [x9, :lo12:($InFDs)]
	cmp	w8, w9
	b.ge	.LBB731_30
// %bb.17:                              // %"$15"
	adrp	x9, ($InFiles)
	ldr	x9, [x9, :lo12:($InFiles)]
	ldr	x1, [x9, w8, sxtw #3]
	cbz	x1, .LBB731_30
.LBB731_18:                             // %"$7"
	mov	x0, x19
	mov	w2, wzr
.LBB731_19:                             // %"$2"
	bl	pushInFile
	mov	sp, x29
	ldp	x20, x19, [sp, #64]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #48]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #32]             // 16-byte Folded Reload
	ldr	x25, [sp, #16]                  // 8-byte Folded Reload
	ldp	x29, x30, [sp], #80             // 16-byte Folded Reload
	ret
.LBB731_20:                             // %"$19"
	sub	x23, sp, #16                    // =16
	mov	sp, x23
	mov	x8, xzr
	mov	x9, x21
	tst	x9, #0xf
	b.ne	.LBB731_22
.LBB731_21:                             // %"$34"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w9, w10, [x9, #8]
	bfi	x9, x10, #32, #32
	add	x8, x8, #1                      // =1
	tst	x9, #0xf
	b.eq	.LBB731_21
.LBB731_22:                             // %"$35"
	lsl	x8, x8, #3
	mov	x9, sp
	add	x8, x8, #23                     // =23
	and	x8, x8, #0xfffffffffffffff0
	sub	x24, x9, x8
	mov	sp, x24
	ldp	w0, w8, [x21]
	bfi	x0, x8, #32, #32
	bl	xSym
	mov	x1, x0
	mov	x0, x20
	bl	xName
	mov	x22, x0
	bl	pipe
	tbnz	w0, #31, .LBB731_32
// %bb.23:                              // %"$37"
	mov	x0, x22
	bl	pathSize
	mov	x8, sp
	add	x9, x0, #15                     // =15
	and	x9, x9, #0xfffffffffffffff0
	sub	x1, x8, x9
	mov	sp, x1
	mov	x0, x22
	bl	pathString
	str	x0, [x24]
	mov	x25, x24
.LBB731_24:                             // %"$38"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w21, w8, [x21, #8]
	bfi	x21, x8, #32, #32
	tst	x21, #0xf
	b.ne	.LBB731_26
// %bb.25:                              // %"$39"
                                        //   in Loop: Header=BB731_24 Depth=1
	ldp	w0, w8, [x21]
	bfi	x0, x8, #32, #32
	bl	xSym
	mov	x1, x0
	mov	x0, x20
	bl	xName
	mov	x22, x0
	bl	bufSize
	add	x8, x0, #15                     // =15
	and	x8, x8, #0xfffffffffffffff0
	mov	x9, sp
	sub	x1, x9, x8
	mov	sp, x1
	mov	x0, x22
	bl	bufString
	str	x0, [x25, #8]!
	b	.LBB731_24
.LBB731_26:                             // %"$40"
	str	xzr, [x25, #8]
	bl	fork
	tbnz	w0, #31, .LBB731_33
// %bb.27:                              // %"$42"
	mov	w21, w0
	cbz	w0, .LBB731_34
// %bb.28:                              // %"$41"
	ldr	w22, [x23]
	bl	setpgid
	bl	close
	mov	x0, x20
	mov	w1, w22
	bl	closeOnExec
	mov	w0, w22
	mov	x1, xzr
	bl	initInFile
	mov	x1, x0
	mov	x0, x19
	mov	w2, w21
	b	.LBB731_19
.LBB731_29:                             // %"$28"
	mov	x0, x20
	mov	w1, w22
	bl	closeOnExec
	bl	strdup
	mov	x1, x0
	mov	w0, w22
	bl	initInFile
	mov	x1, x0
	mov	x0, x19
	mov	w2, #1
	b	.LBB731_19
.LBB731_30:                             // %"$11"
	mov	x0, x20
	mov	x1, x21
	bl	badFd
.LBB731_31:                             // %"$29"
	mov	x0, x20
	mov	x1, x21
	bl	openErr
.LBB731_32:                             // %"$36"
	mov	x0, x20
	bl	pipeErr
.LBB731_33:                             // %"$43"
	mov	x0, x20
	bl	forkErr
.LBB731_34:                             // %"$45"
	bl	setpgid
	bl	close
	ldr	w8, [x23, #4]
	cmp	w8, #1                          // =1
	b.eq	.LBB731_36
// %bb.35:                              // %"$46"
	bl	dup2
	bl	close
.LBB731_36:                             // %"$47"
	bl	signal
	bl	execvp
	ldr	x0, [x24]
	bl	execErr
.Lfunc_end731:
	.size	rdOpen, .Lfunc_end731-rdOpen
	.cfi_endproc
                                        // -- End function
	.globl	wrOpen                          // -- Begin function wrOpen
	.p2align	4
	.type	wrOpen,@function
wrOpen:                                 // @wrOpen
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-80]!           // 16-byte Folded Spill
	str	x25, [sp, #16]                  // 8-byte Folded Spill
	stp	x24, x23, [sp, #32]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #48]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #64]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 80
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -64
	.cfi_offset w30, -72
	.cfi_offset w29, -80
	mov	x19, x2
	adrp	x8, SymTab+8
	add	x8, x8, :lo12:SymTab+8
	cmp	x1, x8
	b.ne	.LBB732_2
// %bb.1:                               // %"$4"
	adrp	x8, ($OutFiles)
	ldr	x8, [x8, :lo12:($OutFiles)]
	ldr	x1, [x8, #8]
	b	.LBB732_18
.LBB732_2:                              // %"$3"
	mov	x21, x1
	mov	x20, x0
	tst	x1, #0x6
	b.eq	.LBB732_8
// %bb.3:                               // %"$6"
	lsr	x8, x21, #4
	tbz	w21, #3, .LBB732_16
// %bb.4:                               // %"$9"
	adrp	x9, env+56
	ldr	x9, [x9, :lo12:env+56]
.LBB732_5:                              // %"$10"
                                        // =>This Inner Loop Header: Depth=1
	ldr	x9, [x9]
	cbz	x9, .LBB732_30
// %bb.6:                               // %"$12"
                                        //   in Loop: Header=BB732_5 Depth=1
	subs	w8, w8, #1                      // =1
	b.ne	.LBB732_5
// %bb.7:                               // %"$14"
	ldr	x1, [x9, #8]
	b	.LBB732_18
.LBB732_8:                              // %"$5"
	tbz	w21, #3, .LBB732_20
// %bb.9:                               // %"$20"
	mov	x0, x20
	mov	x1, x21
	bl	xName
	mov	x22, x0
	bl	pathSize
	add	x8, x0, #15                     // =15
	and	x8, x8, #0xfffffffffffffff0
	mov	x9, sp
	sub	x1, x9, x8
	mov	sp, x1
	mov	x0, x22
	bl	pathString
	ldrb	w23, [x0]
	cmp	w23, #43                        // =43
	adrp	x24, ($Signal)
.LBB732_10:                             // %"$23"
                                        // =>This Inner Loop Header: Depth=1
	cmp	w23, #43                        // =43
	b.ne	.LBB732_12
// %bb.11:                              // %"$24"
                                        //   in Loop: Header=BB732_10 Depth=1
	bl	openWrAppend
	mov	w22, w0
	tbnz	w0, #31, .LBB732_13
	b	.LBB732_29
.LBB732_12:                             // %"$25"
                                        //   in Loop: Header=BB732_10 Depth=1
	bl	openWr
	mov	w22, w0
	tbz	w0, #31, .LBB732_29
.LBB732_13:                             // %"$27"
                                        //   in Loop: Header=BB732_10 Depth=1
	bl	gErrno
	cmp	w0, #2                          // =2
	b.ne	.LBB732_31
// %bb.14:                              // %"$30"
                                        //   in Loop: Header=BB732_10 Depth=1
	ldr	w8, [x24, :lo12:($Signal)]
	cbz	w8, .LBB732_10
// %bb.15:                              // %"$31"
                                        //   in Loop: Header=BB732_10 Depth=1
	mov	x0, x20
	bl	sighandler
	b	.LBB732_10
.LBB732_16:                             // %"$8"
	adrp	x9, ($OutFDs)
	ldr	w9, [x9, :lo12:($OutFDs)]
	cmp	w8, w9
	b.ge	.LBB732_30
// %bb.17:                              // %"$15"
	adrp	x9, ($OutFiles)
	ldr	x9, [x9, :lo12:($OutFiles)]
	ldr	x1, [x9, w8, sxtw #3]
	cbz	x1, .LBB732_30
.LBB732_18:                             // %"$7"
	mov	x0, x19
	mov	w2, wzr
.LBB732_19:                             // %"$2"
	bl	pushOutFile
	mov	sp, x29
	ldp	x20, x19, [sp, #64]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #48]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #32]             // 16-byte Folded Reload
	ldr	x25, [sp, #16]                  // 8-byte Folded Reload
	ldp	x29, x30, [sp], #80             // 16-byte Folded Reload
	ret
.LBB732_20:                             // %"$19"
	sub	x23, sp, #16                    // =16
	mov	sp, x23
	mov	x8, xzr
	mov	x9, x21
	tst	x9, #0xf
	b.ne	.LBB732_22
.LBB732_21:                             // %"$34"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w9, w10, [x9, #8]
	bfi	x9, x10, #32, #32
	add	x8, x8, #1                      // =1
	tst	x9, #0xf
	b.eq	.LBB732_21
.LBB732_22:                             // %"$35"
	lsl	x8, x8, #3
	mov	x9, sp
	add	x8, x8, #23                     // =23
	and	x8, x8, #0xfffffffffffffff0
	sub	x24, x9, x8
	mov	sp, x24
	ldp	w0, w8, [x21]
	bfi	x0, x8, #32, #32
	bl	xSym
	mov	x1, x0
	mov	x0, x20
	bl	xName
	mov	x22, x0
	bl	pipe
	tbnz	w0, #31, .LBB732_32
// %bb.23:                              // %"$37"
	mov	x0, x22
	bl	pathSize
	mov	x8, sp
	add	x9, x0, #15                     // =15
	and	x9, x9, #0xfffffffffffffff0
	sub	x1, x8, x9
	mov	sp, x1
	mov	x0, x22
	bl	pathString
	str	x0, [x24]
	mov	x25, x24
.LBB732_24:                             // %"$38"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w21, w8, [x21, #8]
	bfi	x21, x8, #32, #32
	tst	x21, #0xf
	b.ne	.LBB732_26
// %bb.25:                              // %"$39"
                                        //   in Loop: Header=BB732_24 Depth=1
	ldp	w0, w8, [x21]
	bfi	x0, x8, #32, #32
	bl	xSym
	mov	x1, x0
	mov	x0, x20
	bl	xName
	mov	x22, x0
	bl	bufSize
	add	x8, x0, #15                     // =15
	and	x8, x8, #0xfffffffffffffff0
	mov	x9, sp
	sub	x1, x9, x8
	mov	sp, x1
	mov	x0, x22
	bl	bufString
	str	x0, [x25, #8]!
	b	.LBB732_24
.LBB732_26:                             // %"$40"
	str	xzr, [x25, #8]
	bl	fork
	tbnz	w0, #31, .LBB732_33
// %bb.27:                              // %"$42"
	mov	w21, w0
	cbz	w0, .LBB732_34
// %bb.28:                              // %"$41"
	ldr	w22, [x23, #4]
	bl	setpgid
	bl	close
	mov	x0, x20
	mov	w1, w22
	bl	closeOnExec
	mov	w0, w22
	bl	initOutFile
	mov	x1, x0
	mov	x0, x19
	mov	w2, w21
	b	.LBB732_19
.LBB732_29:                             // %"$28"
	mov	x0, x20
	mov	w1, w22
	bl	closeOnExec
	mov	w0, w22
	bl	initOutFile
	mov	x1, x0
	mov	x0, x19
	mov	w2, #1
	b	.LBB732_19
.LBB732_30:                             // %"$11"
	mov	x0, x20
	mov	x1, x21
	bl	badFd
.LBB732_31:                             // %"$29"
	mov	x0, x20
	mov	x1, x21
	bl	openErr
.LBB732_32:                             // %"$36"
	mov	x0, x20
	bl	pipeErr
.LBB732_33:                             // %"$43"
	mov	x0, x20
	bl	forkErr
.LBB732_34:                             // %"$45"
	bl	setpgid
	bl	close
	ldr	w8, [x23]
	cbz	w8, .LBB732_36
// %bb.35:                              // %"$46"
	bl	dup2
	bl	close
.LBB732_36:                             // %"$47"
	bl	execvp
	ldr	x0, [x24]
	bl	execErr
.Lfunc_end732:
	.size	wrOpen, .Lfunc_end732-wrOpen
	.cfi_endproc
                                        // -- End function
	.globl	erOpen                          // -- Begin function erOpen
	.p2align	4
	.type	erOpen,@function
erOpen:                                 // @erOpen
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-64]!           // 16-byte Folded Spill
	str	x23, [sp, #16]                  // 8-byte Folded Spill
	stp	x22, x21, [sp, #32]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #48]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 64
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -48
	.cfi_offset w30, -56
	.cfi_offset w29, -64
	mov	x19, x2
	mov	x20, x1
	mov	x21, x0
	bl	dup
	str	w0, [x19, #8]
	eor	w8, w20, #0x8
	tst	x8, #0xe
	b.ne	.LBB733_13
// %bb.1:                               // %"$3"
	adrp	x8, SymTab+8
	add	x8, x8, :lo12:SymTab+8
	cmp	x20, x8
	b.ne	.LBB733_3
// %bb.2:                               // %"$4"
	bl	dup
	b	.LBB733_11
.LBB733_3:                              // %"$5"
	mov	x0, x21
	mov	x1, x20
	bl	xName
	mov	x22, x0
	bl	pathSize
	add	x8, x0, #15                     // =15
	and	x8, x8, #0xfffffffffffffff0
	mov	x9, sp
	sub	x1, x9, x8
	mov	sp, x1
	mov	x0, x22
	bl	pathString
	ldrb	w22, [x0]
	cmp	w22, #43                        // =43
	adrp	x23, ($Signal)
.LBB733_4:                              // %"$9"
                                        // =>This Inner Loop Header: Depth=1
	cmp	w22, #43                        // =43
	b.ne	.LBB733_6
// %bb.5:                               // %"$10"
                                        //   in Loop: Header=BB733_4 Depth=1
	bl	openWrAppend
	mov	w1, w0
	tbnz	w0, #31, .LBB733_7
	b	.LBB733_10
.LBB733_6:                              // %"$11"
                                        //   in Loop: Header=BB733_4 Depth=1
	bl	openWr
	mov	w1, w0
	tbz	w0, #31, .LBB733_10
.LBB733_7:                              // %"$13"
                                        //   in Loop: Header=BB733_4 Depth=1
	bl	gErrno
	cmp	w0, #2                          // =2
	b.ne	.LBB733_12
// %bb.8:                               // %"$16"
                                        //   in Loop: Header=BB733_4 Depth=1
	ldr	w8, [x23, :lo12:($Signal)]
	cbz	w8, .LBB733_4
// %bb.9:                               // %"$17"
                                        //   in Loop: Header=BB733_4 Depth=1
	mov	x0, x21
	bl	sighandler
	b	.LBB733_4
.LBB733_10:                             // %"$14"
	mov	x0, x21
	bl	closeOnExec
.LBB733_11:                             // %"$6"
	bl	dup2
	bl	close
	mov	x0, x19
	bl	pushErrFile
	mov	sp, x29
	ldp	x20, x19, [sp, #48]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #32]             // 16-byte Folded Reload
	ldr	x23, [sp, #16]                  // 8-byte Folded Reload
	ldp	x29, x30, [sp], #64             // 16-byte Folded Reload
	ret
.LBB733_12:                             // %"$15"
	mov	x0, x21
	mov	x1, x20
	bl	openErr
.LBB733_13:                             // %"$2"
	mov	x0, x21
	mov	x1, x20
	bl	symErr
.Lfunc_end733:
	.size	erOpen, .Lfunc_end733-erOpen
	.cfi_endproc
                                        // -- End function
	.globl	ctOpen                          // -- Begin function ctOpen
	.p2align	4
	.type	ctOpen,@function
ctOpen:                                 // @ctOpen
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-64]!           // 16-byte Folded Spill
	stp	x24, x23, [sp, #16]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #32]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #48]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 64
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w30, -56
	.cfi_offset w29, -64
	mov	x21, x1
	mov	x20, x0
	eor	w8, w21, #0x8
	tst	x8, #0xe
	b.ne	.LBB734_16
// %bb.1:                               // %"$4"
	mov	x19, x2
	adrp	x8, SymTab+8
	add	x8, x8, :lo12:SymTab+8
	cmp	x21, x8
	b.ne	.LBB734_3
// %bb.2:                               // %"$6"
	mov	w8, #-1
	str	w8, [x19, #8]
	mov	x0, x20
	bl	currFd
	mov	x1, xzr
	bl	rdLockWait
	b	.LBB734_14
.LBB734_3:                              // %"$5"
	adrp	x8, SymTab+216
	add	x8, x8, :lo12:SymTab+216
	cmp	x21, x8
	b.ne	.LBB734_5
// %bb.4:                               // %"$8"
	mov	w8, #-1
	str	w8, [x19, #8]
	mov	x0, x20
	bl	currFd
	mov	x1, xzr
	bl	wrLockWait
	b	.LBB734_14
.LBB734_5:                              // %"$7"
	mov	x0, x20
	mov	x1, x21
	bl	xName
	mov	x22, x0
	bl	pathSize
	add	x8, x0, #15                     // =15
	and	x8, x8, #0xfffffffffffffff0
	mov	x9, sp
	sub	x1, x9, x8
	mov	sp, x1
	mov	x0, x22
	bl	pathString
	ldrb	w23, [x0]
	cmp	w23, #43                        // =43
	adrp	x24, ($Signal)
.LBB734_6:                              // %"$11"
                                        // =>This Inner Loop Header: Depth=1
	bl	openRdWrCreate
	tbz	w0, #31, .LBB734_10
// %bb.7:                               // %"$12"
                                        //   in Loop: Header=BB734_6 Depth=1
	bl	gErrno
	cmp	w0, #2                          // =2
	b.ne	.LBB734_15
// %bb.8:                               // %"$15"
                                        //   in Loop: Header=BB734_6 Depth=1
	ldr	w8, [x24, :lo12:($Signal)]
	cbz	w8, .LBB734_6
// %bb.9:                               // %"$16"
                                        //   in Loop: Header=BB734_6 Depth=1
	mov	x0, x20
	bl	sighandler
	b	.LBB734_6
.LBB734_10:                             // %"$13"
	mov	w22, w0
	str	w0, [x19, #8]
	cmp	w23, #43                        // =43
	b.ne	.LBB734_12
// %bb.11:                              // %"$18"
	mov	x1, xzr
	bl	rdLockWait
	b	.LBB734_13
.LBB734_12:                             // %"$19"
	mov	x1, xzr
	bl	wrLockWait
.LBB734_13:                             // %"$20"
	mov	x0, x20
	mov	w1, w22
	bl	closeOnExec
.LBB734_14:                             // %"$2"
	mov	x0, x19
	bl	pushCtlFile
	mov	sp, x29
	ldp	x20, x19, [sp, #48]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #32]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #64             // 16-byte Folded Reload
	ret
.LBB734_15:                             // %"$14"
	mov	x0, x20
	mov	x1, x21
	bl	openErr
.LBB734_16:                             // %"$3"
	mov	x0, x20
	mov	x1, x21
	bl	symErr
.Lfunc_end734:
	.size	ctOpen, .Lfunc_end734-ctOpen
	.cfi_endproc
                                        // -- End function
	.globl	_peek                           // -- Begin function _peek
	.p2align	4
	.type	_peek,@function
_peek:                                  // @_peek
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	adrp	x8, ($Chr)
	ldr	w0, [x8, :lo12:($Chr)]
	cbz	w0, .LBB735_3
// %bb.1:                               // %"$3"
	tbnz	w0, #31, .LBB735_4
.LBB735_2:                              // %"$5"
	bl	mkChar
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.LBB735_3:                              // %"$2"
	adrp	x8, ($Get)
	ldr	x8, [x8, :lo12:($Get)]
	blr	x8
	tbz	w0, #31, .LBB735_2
.LBB735_4:
	adrp	x0, SymTab+8
	add	x0, x0, :lo12:SymTab+8
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end735:
	.size	_peek, .Lfunc_end735-_peek
	.cfi_endproc
                                        // -- End function
	.globl	_in                             // -- Begin function _in
	.p2align	4
	.type	_in,@function
_in:                                    // @_in
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-32]!           // 16-byte Folded Spill
	stp	x20, x19, [sp, #16]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 32
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w30, -24
	.cfi_offset w29, -32
	mov	x19, x0
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w1, w8, [x9]
	bfi	x1, x8, #32, #32
	ldp	w20, w8, [x9, #8]
	bfi	x20, x8, #32, #32
	tst	x1, #0x6
	b.ne	.LBB736_4
// %bb.1:                               // %"$3"
	tbz	w1, #3, .LBB736_3
// %bb.2:                               // %"$6"
	ldp	w1, w8, [x1]
	bfi	x1, x8, #32, #32
	b	.LBB736_4
.LBB736_3:                              // %"$5"
	mov	x0, x1
	bl	evList
	mov	x1, x0
.LBB736_4:                              // %"$2"
	sub	x2, sp, #32                     // =32
	mov	sp, x2
	mov	x0, x19
	bl	rdOpen
.LBB736_5:                              // %"$7"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w19, w8, [x20]
	bfi	x19, x8, #32, #32
	ldp	w20, w8, [x20, #8]
	bfi	x20, x8, #32, #32
	tst	x20, #0xf
	b.ne	.LBB736_8
// %bb.6:                               // %"$8"
                                        //   in Loop: Header=BB736_5 Depth=1
	tst	x19, #0xf
	b.ne	.LBB736_5
// %bb.7:                               // %"$17"
                                        //   in Loop: Header=BB736_5 Depth=1
	mov	x0, x19
	bl	evList
	b	.LBB736_5
.LBB736_8:                              // %"$10"
	tst	x19, #0x6
	b.ne	.LBB736_12
// %bb.9:                               // %"$12"
	tbz	w19, #3, .LBB736_11
// %bb.10:                              // %"$15"
	ldp	w19, w8, [x19]
	bfi	x19, x8, #32, #32
	b	.LBB736_12
.LBB736_11:                             // %"$14"
	mov	x0, x19
	bl	evList
	mov	x19, x0
.LBB736_12:                             // %"$9"
	bl	popInFiles
	bl	tosInFile
	mov	x0, x19
	mov	sp, x29
	ldp	x20, x19, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #32             // 16-byte Folded Reload
	ret
.Lfunc_end736:
	.size	_in, .Lfunc_end736-_in
	.cfi_endproc
                                        // -- End function
	.globl	_out                            // -- Begin function _out
	.p2align	4
	.type	_out,@function
_out:                                   // @_out
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-32]!           // 16-byte Folded Spill
	stp	x20, x19, [sp, #16]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 32
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w30, -24
	.cfi_offset w29, -32
	mov	x19, x0
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w1, w8, [x9]
	bfi	x1, x8, #32, #32
	ldp	w20, w8, [x9, #8]
	bfi	x20, x8, #32, #32
	tst	x1, #0x6
	b.ne	.LBB737_4
// %bb.1:                               // %"$3"
	tbz	w1, #3, .LBB737_3
// %bb.2:                               // %"$6"
	ldp	w1, w8, [x1]
	bfi	x1, x8, #32, #32
	b	.LBB737_4
.LBB737_3:                              // %"$5"
	mov	x0, x1
	bl	evList
	mov	x1, x0
.LBB737_4:                              // %"$2"
	sub	x2, sp, #32                     // =32
	mov	sp, x2
	mov	x0, x19
	bl	wrOpen
.LBB737_5:                              // %"$7"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w19, w8, [x20]
	bfi	x19, x8, #32, #32
	ldp	w20, w8, [x20, #8]
	bfi	x20, x8, #32, #32
	tst	x20, #0xf
	b.ne	.LBB737_8
// %bb.6:                               // %"$8"
                                        //   in Loop: Header=BB737_5 Depth=1
	tst	x19, #0xf
	b.ne	.LBB737_5
// %bb.7:                               // %"$17"
                                        //   in Loop: Header=BB737_5 Depth=1
	mov	x0, x19
	bl	evList
	b	.LBB737_5
.LBB737_8:                              // %"$10"
	tst	x19, #0x6
	b.ne	.LBB737_12
// %bb.9:                               // %"$12"
	tbz	w19, #3, .LBB737_11
// %bb.10:                              // %"$15"
	ldp	w19, w8, [x19]
	bfi	x19, x8, #32, #32
	b	.LBB737_12
.LBB737_11:                             // %"$14"
	mov	x0, x19
	bl	evList
	mov	x19, x0
.LBB737_12:                             // %"$9"
	bl	popOutFiles
	bl	tosOutFile
	mov	x0, x19
	mov	sp, x29
	ldp	x20, x19, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #32             // 16-byte Folded Reload
	ret
.Lfunc_end737:
	.size	_out, .Lfunc_end737-_out
	.cfi_endproc
                                        // -- End function
	.globl	_err                            // -- Begin function _err
	.p2align	4
	.type	_err,@function
_err:                                   // @_err
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-32]!           // 16-byte Folded Spill
	stp	x20, x19, [sp, #16]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 32
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w30, -24
	.cfi_offset w29, -32
	mov	x19, x0
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w1, w8, [x9]
	bfi	x1, x8, #32, #32
	ldp	w20, w8, [x9, #8]
	bfi	x20, x8, #32, #32
	tst	x1, #0x6
	b.ne	.LBB738_4
// %bb.1:                               // %"$3"
	tbz	w1, #3, .LBB738_3
// %bb.2:                               // %"$6"
	ldp	w1, w8, [x1]
	bfi	x1, x8, #32, #32
	b	.LBB738_4
.LBB738_3:                              // %"$5"
	mov	x0, x1
	bl	evList
	mov	x1, x0
.LBB738_4:                              // %"$2"
	sub	x2, sp, #16                     // =16
	mov	sp, x2
	mov	x0, x19
	bl	erOpen
.LBB738_5:                              // %"$7"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w19, w8, [x20]
	bfi	x19, x8, #32, #32
	ldp	w20, w8, [x20, #8]
	bfi	x20, x8, #32, #32
	tst	x20, #0xf
	b.ne	.LBB738_8
// %bb.6:                               // %"$8"
                                        //   in Loop: Header=BB738_5 Depth=1
	tst	x19, #0xf
	b.ne	.LBB738_5
// %bb.7:                               // %"$17"
                                        //   in Loop: Header=BB738_5 Depth=1
	mov	x0, x19
	bl	evList
	b	.LBB738_5
.LBB738_8:                              // %"$10"
	tst	x19, #0x6
	b.ne	.LBB738_12
// %bb.9:                               // %"$12"
	tbz	w19, #3, .LBB738_11
// %bb.10:                              // %"$15"
	ldp	w19, w8, [x19]
	bfi	x19, x8, #32, #32
	b	.LBB738_12
.LBB738_11:                             // %"$14"
	mov	x0, x19
	bl	evList
	mov	x19, x0
.LBB738_12:                             // %"$9"
	bl	popErrFiles
	mov	x0, x19
	mov	sp, x29
	ldp	x20, x19, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #32             // 16-byte Folded Reload
	ret
.Lfunc_end738:
	.size	_err, .Lfunc_end738-_err
	.cfi_endproc
                                        // -- End function
	.globl	_ctl                            // -- Begin function _ctl
	.p2align	4
	.type	_ctl,@function
_ctl:                                   // @_ctl
	.cfi_startproc
// %bb.0:                               // %"$1"
	adrp	x0, SymTab+8
	add	x0, x0, :lo12:SymTab+8
	ret
.Lfunc_end739:
	.size	_ctl, .Lfunc_end739-_ctl
	.cfi_endproc
                                        // -- End function
	.globl	_fd                             // -- Begin function _fd
	.p2align	4
	.type	_fd,@function
_fd:                                    // @_fd
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	bl	currFd
                                        // kill: def $w0 killed $w0 def $x0
	sxtw	x8, w0
	mov	w0, #2
	bfi	x0, x8, #4, #60
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end740:
	.size	_fd, .Lfunc_end740-_fd
	.cfi_endproc
                                        // -- End function
	.globl	forkLisp                        // -- Begin function forkLisp
	.p2align	4
	.type	forkLisp,@function
forkLisp:                               // @forkLisp
	.cfi_startproc
// %bb.0:                               // %"$1"
	mov	w0, wzr
	ret
.Lfunc_end741:
	.size	forkLisp, .Lfunc_end741-forkLisp
	.cfi_endproc
                                        // -- End function
	.globl	_pipe                           // -- Begin function _pipe
	.p2align	4
	.type	_pipe,@function
_pipe:                                  // @_pipe
	.cfi_startproc
// %bb.0:                               // %"$1"
	adrp	x0, SymTab+8
	add	x0, x0, :lo12:SymTab+8
	ret
.Lfunc_end742:
	.size	_pipe, .Lfunc_end742-_pipe
	.cfi_endproc
                                        // -- End function
	.globl	_open                           // -- Begin function _open
	.p2align	4
	.type	_open,@function
_open:                                  // @_open
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-64]!           // 16-byte Folded Spill
	str	x23, [sp, #16]                  // 8-byte Folded Spill
	stp	x22, x21, [sp, #32]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #48]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 64
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -48
	.cfi_offset w30, -56
	.cfi_offset w29, -64
	mov	x19, x0
	ldp	w20, w8, [x0, #8]
	bfi	x20, x8, #32, #32
	mov	x0, x20
	bl	evSym
	mov	x1, x0
	mov	x0, x19
	bl	xName
	mov	x21, x0
	bl	pathSize
	add	x8, x0, #15                     // =15
	and	x8, x8, #0xfffffffffffffff0
	mov	x9, sp
	sub	x1, x9, x8
	mov	sp, x1
	mov	x0, x21
	bl	pathString
	ldp	w9, w8, [x20, #8]
	bfi	x9, x8, #32, #32
	ldp	w20, w8, [x9]
	bfi	x20, x8, #32, #32
	tst	x20, #0x6
	b.ne	.LBB743_4
// %bb.1:                               // %"$3"
	tbz	w20, #3, .LBB743_3
// %bb.2:                               // %"$6"
	ldp	w20, w8, [x20]
	bfi	x20, x8, #32, #32
	b	.LBB743_4
.LBB743_3:                              // %"$5"
	mov	x0, x20
	bl	evList
	mov	x20, x0
.LBB743_4:                              // %"$2"
	adrp	x23, ($Signal)
	adrp	x21, SymTab+8
	add	x21, x21, :lo12:SymTab+8
.LBB743_5:                              // %"$7"
                                        // =>This Inner Loop Header: Depth=1
	cmp	x20, x21
	b.ne	.LBB743_7
// %bb.6:                               // %"$8"
                                        //   in Loop: Header=BB743_5 Depth=1
	bl	openRdWrCreate
	mov	w22, w0
	tbnz	w0, #31, .LBB743_8
	b	.LBB743_11
.LBB743_7:                              // %"$9"
                                        //   in Loop: Header=BB743_5 Depth=1
	bl	openRd
	mov	w22, w0
	tbz	w0, #31, .LBB743_11
.LBB743_8:                              // %"$11"
                                        //   in Loop: Header=BB743_5 Depth=1
	bl	gErrno
	cmp	w0, #2                          // =2
	b.ne	.LBB743_12
// %bb.9:                               // %"$14"
                                        //   in Loop: Header=BB743_5 Depth=1
	ldr	w8, [x23, :lo12:($Signal)]
	cbz	w8, .LBB743_5
// %bb.10:                              // %"$16"
                                        //   in Loop: Header=BB743_5 Depth=1
	mov	x0, x19
	bl	sighandler
	b	.LBB743_5
.LBB743_11:                             // %"$13"
	mov	x0, x19
	mov	w1, w22
	bl	closeOnExec
	bl	strdup
	mov	x1, x0
	mov	w0, w22
	bl	initInFile
	mov	w0, w22
	bl	initOutFile
	sxtw	x8, w22
	mov	w21, #2
	bfi	x21, x8, #4, #60
.LBB743_12:                             // %"$12"
	mov	x0, x21
	mov	sp, x29
	ldp	x20, x19, [sp, #48]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #32]             // 16-byte Folded Reload
	ldr	x23, [sp, #16]                  // 8-byte Folded Reload
	ldp	x29, x30, [sp], #64             // 16-byte Folded Reload
	ret
.Lfunc_end743:
	.size	_open, .Lfunc_end743-_open
	.cfi_endproc
                                        // -- End function
	.globl	_close                          // -- Begin function _close
	.p2align	4
	.type	_close,@function
_close:                                 // @_close
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x30, x23, [sp, #-48]!           // 16-byte Folded Spill
	stp	x22, x21, [sp, #16]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #32]             // 16-byte Folded Spill
	.cfi_def_cfa_offset 48
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w30, -48
	mov	x20, x0
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w19, w8, [x9]
	bfi	x19, x8, #32, #32
	tst	x19, #0x6
	b.ne	.LBB744_4
// %bb.1:                               // %"$3"
	tbz	w19, #3, .LBB744_3
// %bb.2:                               // %"$6"
	ldp	w19, w8, [x19]
	bfi	x19, x8, #32, #32
	b	.LBB744_4
.LBB744_3:                              // %"$5"
	mov	x0, x19
	bl	evList
	mov	x19, x0
.LBB744_4:                              // %"$2"
	mov	x0, x20
	mov	x1, x19
	bl	xCnt
	mov	x21, x0
	adrp	x23, ($Signal)
	adrp	x22, SymTab+8
	add	x22, x22, :lo12:SymTab+8
.LBB744_5:                              // %"$7"
                                        // =>This Inner Loop Header: Depth=1
	bl	close
	cbz	w0, .LBB744_9
// %bb.6:                               // %"$8"
                                        //   in Loop: Header=BB744_5 Depth=1
	bl	gErrno
	cmp	w0, #2                          // =2
	b.ne	.LBB744_10
// %bb.7:                               // %"$11"
                                        //   in Loop: Header=BB744_5 Depth=1
	ldr	w8, [x23, :lo12:($Signal)]
	cbz	w8, .LBB744_5
// %bb.8:                               // %"$13"
                                        //   in Loop: Header=BB744_5 Depth=1
	mov	x0, x20
	bl	sighandler
	b	.LBB744_5
.LBB744_9:                              // %"$10"
	mov	w0, w21
	bl	closeInFile
	mov	w0, w21
	bl	closeOutFile
	b	.LBB744_11
.LBB744_10:
	mov	x19, x22
.LBB744_11:                             // %"$9"
	mov	x0, x19
	ldp	x20, x19, [sp, #32]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #16]             // 16-byte Folded Reload
	ldp	x30, x23, [sp], #48             // 16-byte Folded Reload
	ret
.Lfunc_end744:
	.size	_close, .Lfunc_end744-_close
	.cfi_endproc
                                        // -- End function
	.globl	_putStdout_uart                 // -- Begin function _putStdout_uart
	.p2align	4
	.type	_putStdout_uart,@function
_putStdout_uart:                        // @_putStdout_uart
	.cfi_startproc
// %bb.0:                               // %"$1"
	mov	w8, #4096
	movk	w8, #65056, lsl #16
.LBB745_1:                              // %"$2"
                                        // =>This Inner Loop Header: Depth=1
	ldrb	w9, [x8, #24]
	tbnz	w9, #5, .LBB745_1
// %bb.2:                               // %"$4"
	and	w9, w0, #0xff
	str	w9, [x8]
	ret
.Lfunc_end745:
	.size	_putStdout_uart, .Lfunc_end745-_putStdout_uart
	.cfi_endproc
                                        // -- End function
	.globl	bufAo                           // -- Begin function bufAo
	.p2align	4
	.type	bufAo,@function
bufAo:                                  // @bufAo
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x30, x19, [sp, #-16]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w19, -8
	.cfi_offset w30, -16
	mov	w19, w1
	cmp	w1, #16                         // =16
	b.lt	.LBB746_2
// %bb.1:                               // %"$2"
	lsr	w1, w19, #4
	bl	bufAo
	and	w19, w19, #0xf
.LBB746_2:                              // %"$3"
	add	w8, w19, #64                    // =64
	strb	w8, [x0], #1
	ldp	x30, x19, [sp], #16             // 16-byte Folded Reload
	ret
.Lfunc_end746:
	.size	bufAo, .Lfunc_end746-bufAo
	.cfi_endproc
                                        // -- End function
	.globl	prSym                           // -- Begin function prSym
	.p2align	4
	.type	prSym,@function
prSym:                                  // @prSym
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	sub	x8, x0, #8                      // =8
.LBB747_1:                              // %"$2"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w0, w9, [x8]
	bfi	x0, x9, #32, #32
	tst	x0, #0x6
	b.ne	.LBB747_3
// %bb.2:                               // %"$3"
                                        //   in Loop: Header=BB747_1 Depth=1
	add	x8, x0, #8                      // =8
	b	.LBB747_1
.LBB747_3:                              // %"$4"
	bl	prName
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end747:
	.size	prSym, .Lfunc_end747-prSym
	.cfi_endproc
                                        // -- End function
	.globl	_flush                          // -- Begin function _flush
	.p2align	4
	.type	_flush,@function
_flush:                                 // @_flush
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	adrp	x8, ($OutFile)
	ldr	x0, [x8, :lo12:($OutFile)]
	bl	flush
	adrp	x8, SymTab+8
	add	x8, x8, :lo12:SymTab+8
	add	x9, x8, #208                    // =208
	tst	w0, #0x1
	csel	x0, x9, x8, ne
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end748:
	.size	_flush, .Lfunc_end748-_flush
	.cfi_endproc
                                        // -- End function
	.globl	_rewind                         // -- Begin function _rewind
	.p2align	4
	.type	_rewind,@function
_rewind:                                // @_rewind
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	adrp	x8, ($OutFile)
	ldr	x8, [x8, :lo12:($OutFile)]
	cbz	x8, .LBB749_3
// %bb.1:                               // %"$3"
	str	wzr, [x8, #4]
	bl	seek0
	mov	w8, w0
	mov	w0, wzr
	tbz	w8, #0, .LBB749_4
// %bb.2:                               // %"$5"
	bl	truncate0
	b	.LBB749_4
.LBB749_3:
	mov	w0, wzr
.LBB749_4:                              // %"$2"
	adrp	x8, SymTab+8
	add	x8, x8, :lo12:SymTab+8
	add	x9, x8, #208                    // =208
	tst	w0, #0x1
	csel	x0, x9, x8, ne
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end749:
	.size	_rewind, .Lfunc_end749-_rewind
	.cfi_endproc
                                        // -- End function
	.globl	_ext                            // -- Begin function _ext
	.p2align	4
	.type	_ext,@function
_ext:                                   // @_ext
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x30, x21, [sp, #-32]!           // 16-byte Folded Spill
	stp	x20, x19, [sp, #16]             // 16-byte Folded Spill
	.cfi_def_cfa_offset 32
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w30, -32
	ldp	w19, w8, [x0, #8]
	bfi	x19, x8, #32, #32
	mov	x1, x19
	bl	evCnt
	adrp	x20, ($ExtN)
	ldr	w21, [x20, :lo12:($ExtN)]
	str	w0, [x20, :lo12:($ExtN)]
	ldp	w19, w8, [x19, #8]
	bfi	x19, x8, #32, #32
.LBB750_1:                              // %"$2"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w0, w8, [x19]
	bfi	x0, x8, #32, #32
	ldp	w19, w8, [x19, #8]
	bfi	x19, x8, #32, #32
	tst	x19, #0xf
	b.ne	.LBB750_4
// %bb.2:                               // %"$3"
                                        //   in Loop: Header=BB750_1 Depth=1
	tst	x0, #0xf
	b.ne	.LBB750_1
// %bb.3:                               // %"$12"
                                        //   in Loop: Header=BB750_1 Depth=1
	bl	evList
	b	.LBB750_1
.LBB750_4:                              // %"$5"
	tst	x0, #0x6
	b.ne	.LBB750_8
// %bb.5:                               // %"$7"
	tbz	w0, #3, .LBB750_7
// %bb.6:                               // %"$10"
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB750_8
.LBB750_7:                              // %"$9"
	bl	evList
.LBB750_8:                              // %"$4"
	str	w21, [x20, :lo12:($ExtN)]
	ldp	x20, x19, [sp, #16]             // 16-byte Folded Reload
	ldp	x30, x21, [sp], #32             // 16-byte Folded Reload
	ret
.Lfunc_end750:
	.size	_ext, .Lfunc_end750-_ext
	.cfi_endproc
                                        // -- End function
	.globl	_rd                             // -- Begin function _rd
	.p2align	4
	.type	_rd,@function
_rd:                                    // @_rd
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-64]!           // 16-byte Folded Spill
	stp	x24, x23, [sp, #16]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #32]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #48]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 64
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w30, -56
	.cfi_offset w29, -64
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w19, w8, [x9]
	bfi	x19, x8, #32, #32
	tst	x19, #0x6
	b.ne	.LBB751_4
// %bb.1:                               // %"$3"
	tbz	w19, #3, .LBB751_3
// %bb.2:                               // %"$6"
	ldp	w19, w8, [x19]
	bfi	x19, x8, #32, #32
	b	.LBB751_4
.LBB751_3:                              // %"$5"
	mov	x0, x19
	bl	evList
	mov	x19, x0
.LBB751_4:                              // %"$2"
	adrp	x21, env
	ldr	x8, [x21, :lo12:env]
	mov	x9, sp
	sub	x22, x9, #16                    // =16
	mov	sp, x22
	lsr	x10, x19, #32
	stp	w19, w10, [x9, #-16]
	lsr	x10, x8, #32
	stp	w8, w10, [x9, #-8]
	str	x22, [x21, :lo12:env]
	adrp	x8, ($InFile)
	ldr	x8, [x8, :lo12:($InFile)]
	ldr	w8, [x8, #8]
	tbnz	w8, #31, .LBB751_16
// %bb.5:                               // %"$8"
	tst	x19, #0x6
	b.eq	.LBB751_17
// %bb.6:                               // %"$11"
	mov	x8, sp
	sub	x20, x8, #32                    // =32
	mov	sp, x20
	mov	w9, #3
	stp	w9, wzr, [x8, #-32]
	stur	wzr, [x8, #-12]
	mov	w9, #2
	mov	x23, x20
	str	w9, [x23, #16]!
	ldr	x9, [x21, :lo12:env]
	lsr	x10, x9, #32
	stp	w9, w10, [x8, #-8]
	lsr	x24, x19, #4
	str	x23, [x21, :lo12:env]
	cbz	x24, .LBB751_16
// %bb.7:                               // %"$13"
	tbz	w19, #3, .LBB751_12
.LBB751_8:                              // %"$17"
                                        // =>This Inner Loop Header: Depth=1
	bl	getBinary
	tbnz	w0, #31, .LBB751_20
// %bb.9:                               // %"$19"
                                        //   in Loop: Header=BB751_8 Depth=1
	mov	x1, x20
	bl	byteNum
	subs	x24, x24, #1                    // =1
	b.ne	.LBB751_8
// %bb.10:                              // %"$21"
	ldp	w0, w8, [x23]
	bfi	x0, x8, #32, #32
	tbz	w0, #1, .LBB751_15
// %bb.11:                              // %"$22"
	bl	twice
	b	.LBB751_18
.LBB751_12:                             // %"$25"
                                        // =>This Inner Loop Header: Depth=1
	bl	getBinary
                                        // kill: def $w0 killed $w0 def $x0
	tbnz	w0, #31, .LBB751_20
// %bb.13:                              // %"$27"
                                        //   in Loop: Header=BB751_12 Depth=1
	sxtw	x8, w0
	mov	w19, #2
	bfi	x19, x8, #4, #60
	ldp	w0, w8, [x23]
	bfi	x0, x8, #32, #32
	mov	w1, #4098
	bl	mulu
	mov	x1, x0
	lsr	x8, x0, #32
	stp	w1, w8, [x23]
	mov	x0, x19
	bl	addu
	lsr	x8, x0, #32
	stp	w0, w8, [x23]
	subs	x24, x24, #1                    // =1
	b.ne	.LBB751_12
// %bb.14:                              // %"$29"
	ldp	w0, w8, [x23]
	bfi	x0, x8, #32, #32
	tbnz	w0, #1, .LBB751_18
.LBB751_15:                             // %"$23"
	bl	zapZero
	b	.LBB751_18
.LBB751_16:
	adrp	x0, SymTab+8
	add	x0, x0, :lo12:SymTab+8
	b	.LBB751_18
.LBB751_17:                             // %"$10"
	adrp	x8, getBinary
	add	x8, x8, :lo12:getBinary
	adrp	x9, ($GetBin)
	str	x8, [x9, :lo12:($GetBin)]
	adrp	x8, ($ExtN)
	ldr	w8, [x8, :lo12:($ExtN)]
	adrp	x9, ($Extn)
	str	w8, [x9, :lo12:($Extn)]
	bl	binRead
	cmp	x0, #0                          // =0
	csel	x0, x0, x19, ne
.LBB751_18:                             // %"$7"
	ldp	w9, w8, [x22, #8]
	bfi	x9, x8, #32, #32
	str	x9, [x21, :lo12:env]
.LBB751_19:                             // %"$7"
	mov	sp, x29
	ldp	x20, x19, [sp, #48]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #32]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #64             // 16-byte Folded Reload
	ret
.LBB751_20:                             // %"$-1"
	ldp	w9, w8, [x22, #8]
	bfi	x9, x8, #32, #32
	str	x9, [x21, :lo12:env]
	adrp	x0, SymTab+8
	add	x0, x0, :lo12:SymTab+8
	b	.LBB751_19
.Lfunc_end751:
	.size	_rd, .Lfunc_end751-_rd
	.cfi_endproc
                                        // -- End function
	.globl	_pr                             // -- Begin function _pr
	.p2align	4
	.type	_pr,@function
_pr:                                    // @_pr
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-48]!                // 8-byte Folded Spill
	stp	x22, x21, [sp, #16]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #32]             // 16-byte Folded Spill
	.cfi_def_cfa_offset 48
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w30, -48
	ldp	w20, w8, [x0, #8]
	bfi	x20, x8, #32, #32
	adrp	x21, ($ExtN)
	adrp	x22, ($Extn)
	b	.LBB752_3
.LBB752_1:                              // %"$6"
                                        //   in Loop: Header=BB752_3 Depth=1
	mov	x0, x19
	bl	evList
	mov	x19, x0
.LBB752_2:                              // %"$3"
                                        //   in Loop: Header=BB752_3 Depth=1
	ldr	w8, [x21, :lo12:($ExtN)]
	str	w8, [x22, :lo12:($Extn)]
	mov	x0, x19
	bl	pr
	tst	x20, #0xf
	b.ne	.LBB752_6
.LBB752_3:                              // %"$2"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w19, w8, [x20]
	bfi	x19, x8, #32, #32
	ldp	w20, w8, [x20, #8]
	bfi	x20, x8, #32, #32
	tst	x19, #0x6
	b.ne	.LBB752_2
// %bb.4:                               // %"$4"
                                        //   in Loop: Header=BB752_3 Depth=1
	tbz	w19, #3, .LBB752_1
// %bb.5:                               // %"$7"
                                        //   in Loop: Header=BB752_3 Depth=1
	ldp	w19, w8, [x19]
	bfi	x19, x8, #32, #32
	b	.LBB752_2
.LBB752_6:                              // %"$9"
	mov	x0, x19
	ldp	x20, x19, [sp, #32]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #16]             // 16-byte Folded Reload
	ldr	x30, [sp], #48                  // 8-byte Folded Reload
	ret
.Lfunc_end752:
	.size	_pr, .Lfunc_end752-_pr
	.cfi_endproc
                                        // -- End function
	.globl	_wr                             // -- Begin function _wr
	.p2align	4
	.type	_wr,@function
_wr:                                    // @_wr
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-32]!                // 8-byte Folded Spill
	stp	x20, x19, [sp, #16]             // 16-byte Folded Spill
	.cfi_def_cfa_offset 32
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w30, -32
	ldp	w20, w8, [x0, #8]
	bfi	x20, x8, #32, #32
	b	.LBB753_3
.LBB753_1:                              // %"$6"
                                        //   in Loop: Header=BB753_3 Depth=1
	mov	x0, x19
	bl	evList
	mov	x19, x0
.LBB753_2:                              // %"$3"
                                        //   in Loop: Header=BB753_3 Depth=1
	lsr	x0, x19, #4
                                        // kill: def $w0 killed $w0 killed $x0
	bl	_putStdout
	tst	x20, #0xf
	b.ne	.LBB753_6
.LBB753_3:                              // %"$2"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w19, w8, [x20]
	bfi	x19, x8, #32, #32
	ldp	w20, w8, [x20, #8]
	bfi	x20, x8, #32, #32
	tst	x19, #0x6
	b.ne	.LBB753_2
// %bb.4:                               // %"$4"
                                        //   in Loop: Header=BB753_3 Depth=1
	tbz	w19, #3, .LBB753_1
// %bb.5:                               // %"$7"
                                        //   in Loop: Header=BB753_3 Depth=1
	ldp	w19, w8, [x19]
	bfi	x19, x8, #32, #32
	b	.LBB753_2
.LBB753_6:                              // %"$9"
	mov	x0, x19
	ldp	x20, x19, [sp, #16]             // 16-byte Folded Reload
	ldr	x30, [sp], #32                  // 8-byte Folded Reload
	ret
.Lfunc_end753:
	.size	_wr, .Lfunc_end753-_wr
	.cfi_endproc
                                        // -- End function
	.globl	tglString                       // -- Begin function tglString
	.p2align	4
	.type	tglString,@function
tglString:                              // @tglString
	.cfi_startproc
// %bb.0:                               // %"$1"
	adrp	x8, ($Put)
	ldr	w9, [x0, #32]!
	ldr	w10, [x0, #4]
	ldr	x11, [x8, :lo12:($Put)]
	lsr	x12, x11, #32
	stp	w11, w12, [x0]
	bfi	x9, x10, #32, #32
	str	x9, [x8, :lo12:($Put)]
	ret
.Lfunc_end754:
	.size	tglString, .Lfunc_end754-tglString
	.cfi_endproc
                                        // -- End function
	.globl	loadAll                         // -- Begin function loadAll
	.p2align	4
	.type	loadAll,@function
loadAll:                                // @loadAll
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-32]!                // 8-byte Folded Spill
	stp	x20, x19, [sp, #16]             // 16-byte Folded Spill
	.cfi_def_cfa_offset 32
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w30, -32
	mov	x19, x0
	adrp	x20, ($AV)
	adrp	x0, SymTab+8
	add	x0, x0, :lo12:SymTab+8
.LBB755_1:                              // %"$2"
                                        // =>This Inner Loop Header: Depth=1
	ldr	x9, [x20, :lo12:($AV)]
	ldr	x8, [x9]
	cbz	x8, .LBB755_4
// %bb.2:                               // %"$4"
                                        //   in Loop: Header=BB755_1 Depth=1
	ldrb	w10, [x8]
	cmp	w10, #45                        // =45
	b.ne	.LBB755_5
// %bb.3:                               // %"$6"
                                        //   in Loop: Header=BB755_1 Depth=1
	ldrb	w10, [x8, #1]
	cmp	w10, #0                         // =0
	cset	w10, eq
	tbz	w10, #0, .LBB755_6
	b	.LBB755_7
.LBB755_4:                              //   in Loop: Header=BB755_1 Depth=1
	mov	w10, #1
	tbz	w10, #0, .LBB755_6
	b	.LBB755_7
.LBB755_5:                              //   in Loop: Header=BB755_1 Depth=1
	mov	w10, wzr
	tbnz	w10, #0, .LBB755_7
.LBB755_6:                              // %"$7"
                                        //   in Loop: Header=BB755_1 Depth=1
	add	x9, x9, #8                      // =8
	str	x9, [x20, :lo12:($AV)]
	mov	x0, x8
	bl	mkStr
	mov	x2, x0
	mov	x0, x19
	mov	x1, xzr
	bl	repl
	b	.LBB755_1
.LBB755_7:                              // %"$8"
	ldp	x20, x19, [sp, #16]             // 16-byte Folded Reload
	ldr	x30, [sp], #32                  // 8-byte Folded Reload
	ret
.Lfunc_end755:
	.size	loadAll, .Lfunc_end755-loadAll
	.cfi_endproc
                                        // -- End function
	.globl	_load                           // -- Begin function _load
	.p2align	4
	.type	_load,@function
_load:                                  // @_load
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x30, x23, [sp, #-48]!           // 16-byte Folded Spill
	stp	x22, x21, [sp, #16]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #32]             // 16-byte Folded Spill
	.cfi_def_cfa_offset 48
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w30, -48
	mov	x19, x0
	ldp	w21, w8, [x0, #8]
	adrp	x22, SymTab+216
	add	x22, x22, :lo12:SymTab+216
	bfi	x21, x8, #32, #32
	adrp	x20, .L$162
	add	x20, x20, :lo12:.L$162
	b	.LBB756_2
.LBB756_1:                              // %"$9"
                                        //   in Loop: Header=BB756_2 Depth=1
	mov	x1, x20
	bl	repl
	tst	x21, #0xf
	b.ne	.LBB756_8
.LBB756_2:                              // %"$2"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w2, w8, [x21]
	bfi	x2, x8, #32, #32
	ldp	w21, w23, [x21, #8]
	tst	x2, #0x6
	b.ne	.LBB756_6
// %bb.3:                               // %"$4"
                                        //   in Loop: Header=BB756_2 Depth=1
	tbz	w2, #3, .LBB756_5
// %bb.4:                               // %"$7"
                                        //   in Loop: Header=BB756_2 Depth=1
	ldp	w2, w8, [x2]
	bfi	x2, x8, #32, #32
	b	.LBB756_6
.LBB756_5:                              // %"$6"
                                        //   in Loop: Header=BB756_2 Depth=1
	mov	x0, x2
	bl	evList
	mov	x2, x0
.LBB756_6:                              // %"$3"
                                        //   in Loop: Header=BB756_2 Depth=1
	bfi	x21, x23, #32, #32
	mov	x0, x19
	cmp	x2, x22
	b.ne	.LBB756_1
// %bb.7:                               // %"$8"
                                        //   in Loop: Header=BB756_2 Depth=1
	bl	loadAll
	tst	x21, #0xf
	b.eq	.LBB756_2
.LBB756_8:                              // %"$12"
	ldp	x20, x19, [sp, #32]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #16]             // 16-byte Folded Reload
	ldp	x30, x23, [sp], #48             // 16-byte Folded Reload
	ret
.Lfunc_end756:
	.size	_load, .Lfunc_end756-_load
	.cfi_endproc
                                        // -- End function
	.globl	jnlErr                          // -- Begin function jnlErr
	.p2align	4
	.type	jnlErr,@function
jnlErr:                                 // @jnlErr
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	adrp	x2, .L$166
	add	x2, x2, :lo12:.L$166
	mov	x1, xzr
	mov	x3, xzr
	bl	err
.Lfunc_end757:
	.size	jnlErr, .Lfunc_end757-jnlErr
	.cfi_endproc
                                        // -- End function
	.globl	dbSyncErr                       // -- Begin function dbSyncErr
	.p2align	4
	.type	dbSyncErr,@function
dbSyncErr:                              // @dbSyncErr
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x30, x19, [sp, #-16]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w19, -8
	.cfi_offset w30, -16
	mov	x19, x0
	bl	strErrno
	mov	x3, x0
	adrp	x2, .L$167
	add	x2, x2, :lo12:.L$167
	mov	x0, x19
	mov	x1, xzr
	bl	err
.Lfunc_end758:
	.size	dbSyncErr, .Lfunc_end758-dbSyncErr
	.cfi_endproc
                                        // -- End function
	.globl	dbfBuf                          // -- Begin function dbfBuf
	.p2align	4
	.type	dbfBuf,@function
dbfBuf:                                 // @dbfBuf
	.cfi_startproc
// %bb.0:                               // %"$1"
	ldrb	w9, [x0, #1]
	ldrb	w8, [x0]
	bfi	w8, w9, #8, #8
	adrp	x9, ($DBs)
	ldr	w9, [x9, :lo12:($DBs)]
	cmp	w9, w8
	b.le	.LBB759_2
// %bb.1:                               // %"$2"
	adrp	x9, ($DbFiles)
	ldr	x9, [x9, :lo12:($DbFiles)]
	mov	w10, #42
	mul	w8, w8, w10
	add	x0, x9, x8
	adrp	x8, ($DbFile)
	str	x0, [x8, :lo12:($DbFile)]
	ret
.LBB759_2:
	mov	x0, xzr
	ret
.Lfunc_end759:
	.size	dbfBuf, .Lfunc_end759-dbfBuf
	.cfi_endproc
                                        // -- End function
	.globl	tryLock                         // -- Begin function tryLock
	.p2align	4
	.type	tryLock,@function
tryLock:                                // @tryLock
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-32]!                // 8-byte Folded Spill
	stp	x20, x19, [sp, #16]             // 16-byte Folded Spill
	.cfi_def_cfa_offset 32
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w30, -32
	mov	x19, x1
	mov	x20, x0
	b	.LBB760_2
.LBB760_1:                              // %"$18"
                                        //   in Loop: Header=BB760_2 Depth=1
	cmp	w0, #1                          // =1
	b.ge	.LBB760_12
.LBB760_2:                              // %"$2"
                                        // =>This Inner Loop Header: Depth=1
	bl	wrLock
	tbz	w0, #31, .LBB760_7
// %bb.3:                               // %"$3"
                                        //   in Loop: Header=BB760_2 Depth=1
	bl	gErrno
	sub	w8, w0, #4                      // =4
	cmp	w8, #2                          // =2
	b.lo	.LBB760_5
.LBB760_4:                              // %"$3"
                                        //   in Loop: Header=BB760_2 Depth=1
	cmp	w0, #2                          // =2
	b.ne	.LBB760_13
.LBB760_5:                              // %"$16"
                                        //   in Loop: Header=BB760_2 Depth=1
	bl	getLock
	tbz	w0, #31, .LBB760_1
// %bb.6:                               // %"$17"
                                        //   in Loop: Header=BB760_2 Depth=1
	bl	gErrno
	b	.LBB760_4
.LBB760_7:                              // %"$5"
	mov	w8, #1
	strb	w8, [x20, #40]
	cbz	x19, .LBB760_10
// %bb.8:                               // %"$7"
	adrp	x8, SymTab+216
	add	x8, x8, :lo12:SymTab+216
	ldr	x9, [x8, #144]
	cmp	x9, x8
	b.ne	.LBB760_11
// %bb.9:
	mov	w0, wzr
	b	.LBB760_12
.LBB760_10:                             // %"$8"
	mov	w0, wzr
	adrp	x8, SymTab+216
	add	x8, x8, :lo12:SymTab+216
	str	x8, [x8, #144]
	b	.LBB760_12
.LBB760_11:                             // %"$10"
	mov	w0, wzr
	adrp	x8, SymTab+8
	add	x8, x8, :lo12:SymTab+8
	str	x8, [x8, #352]
.LBB760_12:                             // %"$4"
	ldp	x20, x19, [sp, #16]             // 16-byte Folded Reload
	ldr	x30, [sp], #32                  // 8-byte Folded Reload
	ret
.LBB760_13:                             // %"$14.critedge"
	bl	lockErr
.Lfunc_end760:
	.size	tryLock, .Lfunc_end760-tryLock
	.cfi_endproc
                                        // -- End function
	.globl	wrBlock                         // -- Begin function wrBlock
	.p2align	4
	.type	wrBlock,@function
wrBlock:                                // @wrBlock
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	adrp	x8, ($DbFile)
	ldr	x8, [x8, :lo12:($DbFile)]
	adrp	x9, ($BlkIndex)
	ldr	x9, [x9, :lo12:($BlkIndex)]
	ldp	w10, w2, [x8, #8]
                                        // kill: def $w10 killed $w10 def $x10
	sxtw	x10, w10
	lsl	x0, x9, x10
	adrp	x8, ($DbBlock)
	ldr	x1, [x8, :lo12:($DbBlock)]
	bl	blkPoke
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end761:
	.size	wrBlock, .Lfunc_end761-wrBlock
	.cfi_endproc
                                        // -- End function
	.globl	logBlock                        // -- Begin function logBlock
	.p2align	4
	.type	logBlock,@function
logBlock:                               // @logBlock
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	adrp	x8, ($DbFile)
	ldr	x8, [x8, :lo12:($DbFile)]
	ldr	w9, [x8, #4]
	strb	w9, [sp, #8]
	ldr	w8, [x8, #4]
	adrp	x9, ($BlkIndex)
	lsr	w8, w8, #8
	strb	w8, [sp, #9]
	ldr	x0, [x9, :lo12:($BlkIndex)]
	add	x8, sp, #8                      // =8
	orr	x1, x8, #0x2
	bl	setAdr
	bl	fwrite
	cmp	w0, #1                          // =1
	b.ne	.LBB762_3
// %bb.1:                               // %"$3"
	bl	fwrite
	cmp	w0, #1                          // =1
	b.ne	.LBB762_3
// %bb.2:                               // %"$5"
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.LBB762_3:                              // %"$4"
	bl	strErrno
	mov	x3, x0
	adrp	x2, .L$169
	add	x2, x2, :lo12:.L$169
	mov	x0, xzr
	mov	x1, xzr
	bl	err
.Lfunc_end762:
	.size	logBlock, .Lfunc_end762-logBlock
	.cfi_endproc
                                        // -- End function
	.globl	cleanUp                         // -- Begin function cleanUp
	.p2align	4
	.type	cleanUp,@function
cleanUp:                                // @cleanUp
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-48]!                // 8-byte Folded Spill
	stp	x22, x21, [sp, #16]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #32]             // 16-byte Folded Spill
	.cfi_def_cfa_offset 48
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w30, -48
	mov	x20, x0
	adrp	x8, ($DbFile)
	ldr	x22, [x8, :lo12:($DbFile)]
	add	x1, sp, #8                      // =8
	mov	x0, xzr
	mov	w2, #6
	bl	blkPeek
	add	x0, sp, #8                      // =8
	bl	getAdr
	mov	x19, x0
	add	x1, sp, #8                      // =8
	mov	x0, x20
	bl	setAdr
	mov	x21, xzr
.LBB763_1:                              // %"$2"
                                        // =>This Inner Loop Header: Depth=1
	add	x1, sp, #8                      // =8
	mov	x0, x21
	mov	w2, #6
	bl	blkPoke
	ldrsw	x8, [x22, #8]
	lsl	x21, x20, x8
	add	x1, sp, #8                      // =8
	mov	x0, x21
	mov	w2, #6
	bl	blkPeek
	ldrb	w8, [sp, #8]
	and	w8, w8, #0xc0
	strb	w8, [sp, #8]
	add	x0, sp, #8                      // =8
	bl	getAdr
	mov	x20, x0
	cbnz	x0, .LBB763_1
// %bb.2:                               // %"$5"
	add	x1, sp, #8                      // =8
	mov	x0, x19
	bl	setAdr
	add	x1, sp, #8                      // =8
	mov	x0, x21
	mov	w2, #6
	bl	blkPoke
	ldp	x20, x19, [sp, #32]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #16]             // 16-byte Folded Reload
	ldr	x30, [sp], #48                  // 8-byte Folded Reload
	ret
.Lfunc_end763:
	.size	cleanUp, .Lfunc_end763-cleanUp
	.cfi_endproc
                                        // -- End function
	.globl	putBlock                        // -- Begin function putBlock
	.p2align	4
	.type	putBlock,@function
putBlock:                               // @putBlock
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x30, x23, [sp, #-48]!           // 16-byte Folded Spill
	stp	x22, x21, [sp, #16]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #32]             // 16-byte Folded Spill
	.cfi_def_cfa_offset 48
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w30, -48
	mov	w19, w0
	adrp	x22, ($BlkPtr)
	ldr	x8, [x22, :lo12:($BlkPtr)]
	adrp	x9, ($BlkEnd)
	ldr	x9, [x9, :lo12:($BlkEnd)]
	cmp	x8, x9
	b.ne	.LBB764_5
// %bb.1:                               // %"$2"
	adrp	x8, ($BlkLink)
	ldr	x20, [x8, :lo12:($BlkLink)]
	cbz	x20, .LBB764_3
// %bb.2:                               // %"$5"
	bl	wrBlock
	mov	x0, x20
	bl	rdBlock
	mov	x20, x0
	b	.LBB764_4
.LBB764_3:                              // %"$4"
	bl	newBlock
	mov	x21, x0
	adrp	x8, ($DbBlock)
	ldr	x20, [x8, :lo12:($DbBlock)]
	ldrb	w23, [x20]
	orr	x0, x0, x23
	mov	x1, x20
	bl	setAdr
	bl	wrBlock
	adrp	x8, ($BlkIndex)
	str	x21, [x8, :lo12:($BlkIndex)]
	cmp	w23, #63                        // =63
	cinc	x0, x23, ne
	mov	x1, x20
	bl	setAdr
.LBB764_4:                              // %"$6"
	add	x8, x20, #6                     // =6
.LBB764_5:                              // %"$3"
	strb	w19, [x8], #1
	str	x8, [x22, :lo12:($BlkPtr)]
	ldp	x20, x19, [sp, #32]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #16]             // 16-byte Folded Reload
	ldp	x30, x23, [sp], #48             // 16-byte Folded Reload
	ret
.Lfunc_end764:
	.size	putBlock, .Lfunc_end764-putBlock
	.cfi_endproc
                                        // -- End function
	.globl	_rollback                       // -- Begin function _rollback
	.p2align	4
	.type	_rollback,@function
_rollback:                              // @_rollback
	.cfi_startproc
// %bb.0:                               // %"$1"
	adrp	x0, SymTab+8
	add	x0, x0, :lo12:SymTab+8
	ret
.Lfunc_end765:
	.size	_rollback, .Lfunc_end765-_rollback
	.cfi_endproc
                                        // -- End function
	.globl	_extern                         // -- Begin function _extern
	.p2align	4
	.type	_extern,@function
_extern:                                // @_extern
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-48]!           // 16-byte Folded Spill
	stp	x22, x21, [sp, #16]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #32]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 48
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w30, -40
	.cfi_offset w29, -48
	mov	x19, x0
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w1, w8, [x9]
	bfi	x1, x8, #32, #32
	tst	x1, #0x6
	b.ne	.LBB766_4
// %bb.1:                               // %"$3"
	tbz	w1, #3, .LBB766_3
// %bb.2:                               // %"$6"
	ldp	w1, w8, [x1]
	bfi	x1, x8, #32, #32
	b	.LBB766_4
.LBB766_3:                              // %"$5"
	mov	x0, x1
	bl	evList
	mov	x1, x0
.LBB766_4:                              // %"$2"
	eor	w8, w1, #0x8
	tst	x8, #0xe
	b.ne	.LBB766_9
// %bb.5:                               // %"$8"
	ldp	w9, w8, [x1, #-8]
	bfi	x9, x8, #32, #32
	and	x8, x9, #0xfffffffffffffff7
	tst	x8, #0x6
	b.ne	.LBB766_7
.LBB766_6:                              // %"$10"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w8, w9, [x8, #8]
	bfi	x8, x9, #32, #32
	tst	x8, #0x6
	b.eq	.LBB766_6
.LBB766_7:                              // %"$11"
	cmp	x8, #2                          // =2
	b.eq	.LBB766_10
// %bb.8:                               // %"$13"
	mov	x9, sp
	sub	x19, x9, #16                    // =16
	mov	sp, x19
	stp	wzr, wzr, [x9, #-16]
	lsr	x10, x8, #32
	stp	w8, w10, [x9, #-8]
	mov	x0, x19
	bl	symChar
	mov	w21, wzr
	mov	w20, wzr
	cmp	w0, #123                        // =123
	b.eq	.LBB766_12
	b	.LBB766_13
.LBB766_9:                              // %"$7"
	mov	x0, x19
	bl	symErr
.LBB766_10:                             // %"$12"
	adrp	x0, SymTab+8
	add	x0, x0, :lo12:SymTab+8
.LBB766_11:                             // %"$12"
	mov	sp, x29
	ldp	x20, x19, [sp, #32]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #48             // 16-byte Folded Reload
	ret
.LBB766_12:                             // %"$16.sink.split"
	mov	x0, x19
	bl	symChar
	mov	w20, w21
.LBB766_13:                             // %"$16"
	cmp	w0, #63                         // =63
	b.le	.LBB766_16
// %bb.14:                              // %"$17"
	cmp	w0, #80                         // =80
	b.ge	.LBB766_10
// %bb.15:                              // %"$20"
	sub	w8, w0, #64                     // =64
	orr	w21, w8, w20, lsl #4
	b	.LBB766_12
.LBB766_16:                             // %"$21.preheader"
	mov	x21, xzr
	mov	w22, #1
.LBB766_17:                             // %"$21"
                                        // =>This Inner Loop Header: Depth=1
	cmp	w0, #56                         // =56
	cset	w9, lt
	subs	w8, w0, #48                     // =48
	csel	w9, wzr, w9, lt
	tbz	w9, #0, .LBB766_10
// %bb.18:                              // %"$25"
                                        //   in Loop: Header=BB766_17 Depth=1
	sxtw	x8, w8
	orr	x21, x8, x21, lsl #3
	mov	x0, x19
	bl	symChar
	cmp	w0, #125                        // =125
	cset	w8, eq
	cmp	w0, #0                          // =0
	csel	w8, w22, w8, eq
	cbz	w8, .LBB766_17
// %bb.19:                              // %"$29"
	mov	w0, w20
	mov	x1, x21
	bl	extNm
	bl	extern
	mov	x19, x0
	bl	isLife
	tbnz	w0, #0, .LBB766_21
// %bb.20:                              // %"$31"
	adrp	x19, SymTab+8
	add	x19, x19, :lo12:SymTab+8
.LBB766_21:                             // %"$32"
	mov	x0, x19
	b	.LBB766_11
.Lfunc_end766:
	.size	_extern, .Lfunc_end766-_extern
	.cfi_endproc
                                        // -- End function
	.globl	ignLog                          // -- Begin function ignLog
	.p2align	4
	.type	ignLog,@function
ignLog:                                 // @ignLog
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	bl	stderrMsg
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end767:
	.size	ignLog, .Lfunc_end767-ignLog
	.cfi_endproc
                                        // -- End function
	.globl	transaction                     // -- Begin function transaction
	.p2align	4
	.type	transaction,@function
transaction:                            // @transaction
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	bl	fseek0
	bl	fread
	cbz	w0, .LBB768_6
.LBB768_1:                              // %"$5"
                                        // =>This Inner Loop Header: Depth=1
	ldrsh	w8, [sp, #8]
	cmn	w8, #1                          // =1
	b.eq	.LBB768_9
// %bb.2:                               // %"$6"
                                        //   in Loop: Header=BB768_1 Depth=1
	add	x0, sp, #8                      // =8
	bl	dbfBuf
	cbz	x0, .LBB768_7
// %bb.3:                               // %"$10"
                                        //   in Loop: Header=BB768_1 Depth=1
	bl	fread
	cmp	w0, #1                          // =1
	b.ne	.LBB768_7
// %bb.4:                               // %"$11"
                                        //   in Loop: Header=BB768_1 Depth=1
	bl	fseekOfs
	tbz	w0, #0, .LBB768_7
// %bb.5:                               // %"$12"
                                        //   in Loop: Header=BB768_1 Depth=1
	bl	fread
	cmp	w0, #1                          // =1
	b.eq	.LBB768_1
	b	.LBB768_7
.LBB768_6:                              // %"$3"
	bl	feof
	cbnz	w0, .LBB768_8
.LBB768_7:                              // %"$15"
	bl	ignLog
.LBB768_8:                              // %"$4"
	mov	w0, wzr
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.LBB768_9:
	mov	w0, #1
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end768:
	.size	transaction, .Lfunc_end768-transaction
	.cfi_endproc
                                        // -- End function
	.globl	fsyncDB                         // -- Begin function fsyncDB
	.p2align	4
	.type	fsyncDB,@function
fsyncDB:                                // @fsyncDB
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x30, x21, [sp, #-32]!           // 16-byte Folded Spill
	stp	x20, x19, [sp, #16]             // 16-byte Folded Spill
	.cfi_def_cfa_offset 32
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w30, -32
	mov	x19, x0
	adrp	x8, ($DbFiles)
	ldr	x20, [x8, :lo12:($DbFiles)]
	adrp	x8, ($DBs)
	ldr	w21, [x8, :lo12:($DBs)]
.LBB769_1:                              // %"$2"
                                        // =>This Inner Loop Header: Depth=1
	ldrb	w8, [x20, #41]
	cmp	w8, #1                          // =1
	b.ne	.LBB769_3
// %bb.2:                               // %"$4"
                                        //   in Loop: Header=BB769_1 Depth=1
	bl	fsync
	lsr	w8, w0, #31
	b	.LBB769_4
.LBB769_3:                              //   in Loop: Header=BB769_1 Depth=1
	mov	w8, wzr
.LBB769_4:                              // %"$3"
                                        //   in Loop: Header=BB769_1 Depth=1
	cbnz	w8, .LBB769_8
// %bb.5:                               // %"$6"
                                        //   in Loop: Header=BB769_1 Depth=1
	subs	w21, w21, #1                    // =1
	b.eq	.LBB769_7
// %bb.6:                               // %"$7"
                                        //   in Loop: Header=BB769_1 Depth=1
	add	x20, x20, #42                   // =42
	b	.LBB769_1
.LBB769_7:                              // %"$8"
	ldp	x20, x19, [sp, #16]             // 16-byte Folded Reload
	ldp	x30, x21, [sp], #32             // 16-byte Folded Reload
	ret
.LBB769_8:                              // %"$5"
	mov	x0, x19
	bl	dbSyncErr
.Lfunc_end769:
	.size	fsyncDB, .Lfunc_end769-fsyncDB
	.cfi_endproc
                                        // -- End function
	.globl	restore                         // -- Begin function restore
	.p2align	4
	.type	restore,@function
restore:                                // @restore
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-48]!           // 16-byte Folded Spill
	stp	x22, x21, [sp, #16]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #32]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 48
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w30, -40
	.cfi_offset w29, -48
	mov	x19, x0
	bl	stderrMsg
	bl	fseek0
	adrp	x8, ($DbFiles)
	ldr	x8, [x8, :lo12:($DbFiles)]
	adrp	x9, ($DBs)
	ldr	w9, [x9, :lo12:($DBs)]
.LBB770_1:                              // %"$2"
                                        // =>This Inner Loop Header: Depth=1
	sub	w9, w9, #1                      // =1
	strb	wzr, [x8, #41]
	cbz	w9, .LBB770_3
// %bb.2:                               // %"$3"
                                        //   in Loop: Header=BB770_1 Depth=1
	add	x8, x8, #42                     // =42
	b	.LBB770_1
.LBB770_3:                              // %"$4"
	sub	x20, sp, #16                    // =16
	mov	sp, x20
	adrp	x8, ($MaxBlkSize)
	ldr	w8, [x8, :lo12:($MaxBlkSize)]
	mov	x9, sp
	add	x8, x8, #15                     // =15
	and	x8, x8, #0x1fffffff0
	sub	x8, x9, x8
	mov	sp, x8
	mov	w22, #1
.LBB770_4:                              // %"$5"
                                        // =>This Inner Loop Header: Depth=1
	bl	fread
	cmp	w0, #1                          // =1
	b.ne	.LBB770_12
// %bb.5:                               // %"$7"
                                        //   in Loop: Header=BB770_4 Depth=1
	ldrsh	w8, [x20]
	cmn	w8, #1                          // =1
	b.eq	.LBB770_11
// %bb.6:                               // %"$8"
                                        //   in Loop: Header=BB770_4 Depth=1
	mov	x0, x20
	bl	dbfBuf
	cbz	x0, .LBB770_12
// %bb.7:                               // %"$10"
                                        //   in Loop: Header=BB770_4 Depth=1
	mov	x21, x0
	bl	fread
	cmp	w0, #1                          // =1
	b.ne	.LBB770_12
// %bb.8:                               // %"$14"
                                        //   in Loop: Header=BB770_4 Depth=1
	bl	fread
	cmp	w0, #1                          // =1
	b.ne	.LBB770_12
// %bb.9:                               // %"$16"
                                        //   in Loop: Header=BB770_4 Depth=1
	mov	x0, x20
	bl	getAdr
	bl	pwrite
	ldrsw	x8, [x21, #12]
	cmp	x0, x8
	b.ne	.LBB770_13
// %bb.10:                              // %"$18"
                                        //   in Loop: Header=BB770_4 Depth=1
	strb	w22, [x21, #41]
	b	.LBB770_4
.LBB770_11:                             // %"$9"
	mov	x0, x19
	bl	fsyncDB
	mov	sp, x29
	ldp	x20, x19, [sp, #32]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #48             // 16-byte Folded Reload
	ret
.LBB770_12:                             // %"$6"
	mov	x0, x19
	bl	jnlErr
.LBB770_13:                             // %"$17"
	bl	dbWrErr
.Lfunc_end770:
	.size	restore, .Lfunc_end770-restore
	.cfi_endproc
                                        // -- End function
	.globl	truncLog                        // -- Begin function truncLog
	.p2align	4
	.type	truncLog,@function
truncLog:                               // @truncLog
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x30, x19, [sp, #-16]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w19, -8
	.cfi_offset w30, -16
	mov	x19, x0
	bl	fseek0
	tbz	w0, #0, .LBB771_3
// %bb.1:                               // %"$3"
	bl	fileno
	bl	truncate0
	tbz	w0, #0, .LBB771_3
// %bb.2:                               // %"$5"
	ldp	x30, x19, [sp], #16             // 16-byte Folded Reload
	ret
.LBB771_3:                              // %"$4"
	bl	strErrno
	mov	x3, x0
	adrp	x2, .L$173
	add	x2, x2, :lo12:.L$173
	mov	x0, x19
	mov	x1, xzr
	bl	err
.Lfunc_end771:
	.size	truncLog, .Lfunc_end771-truncLog
	.cfi_endproc
                                        // -- End function
	.globl	_pool                           // -- Begin function _pool
	.p2align	4
	.type	_pool,@function
_pool:                                  // @_pool
	.cfi_startproc
// %bb.0:                               // %"$1"
	adrp	x0, SymTab+8
	add	x0, x0, :lo12:SymTab+8
	ret
.Lfunc_end772:
	.size	_pool, .Lfunc_end772-_pool
	.cfi_endproc
                                        // -- End function
	.globl	_pool2                          // -- Begin function _pool2
	.p2align	4
	.type	_pool2,@function
_pool2:                                 // @_pool2
	.cfi_startproc
// %bb.0:                               // %"$1"
	adrp	x0, SymTab+8
	add	x0, x0, :lo12:SymTab+8
	ret
.Lfunc_end773:
	.size	_pool2, .Lfunc_end773-_pool2
	.cfi_endproc
                                        // -- End function
	.globl	_journal                        // -- Begin function _journal
	.p2align	4
	.type	_journal,@function
_journal:                               // @_journal
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-96]!           // 16-byte Folded Spill
	str	x27, [sp, #16]                  // 8-byte Folded Spill
	stp	x26, x25, [sp, #32]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #48]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #64]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #80]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	mov	x19, x0
	ldp	w20, w8, [x0, #8]
	bfi	x20, x8, #32, #32
	mov	x0, x20
	bl	evSym
	adrp	x8, ($MaxBlkSize)
	ldr	w8, [x8, :lo12:($MaxBlkSize)]
	mov	x9, sp
	add	x8, x8, #15                     // =15
	and	x8, x8, #0x1fffffff0
	sub	x21, x9, x8
	mov	sp, x21
	mov	x8, sp
	adrp	x9, ($StkLimit)
	ldr	x9, [x9, :lo12:($StkLimit)]
	cmp	x9, x8
	b.hi	.LBB774_3
// %bb.1:                               // %"$3"
	mov	x22, x0
	adrp	x24, ($DbJnl)
	ldr	x25, [x24, :lo12:($DbJnl)]
	adrp	x26, ($DbLog)
	ldr	x27, [x26, :lo12:($DbLog)]
	adrp	x8, SymTab+216
	add	x8, x8, :lo12:SymTab+216
	cmp	x0, x8
	b.ne	.LBB774_5
// %bb.2:                               // %"$4"
	str	xzr, [x24, :lo12:($DbJnl)]
	str	xzr, [x26, :lo12:($DbLog)]
	ldp	w20, w8, [x20, #8]
	bfi	x20, x8, #32, #32
	b	.LBB774_4
.LBB774_3:                              // %"$2"
	mov	x0, x19
	bl	stkErr
.LBB774_4:                              // %"$6.sink.split"
	mov	x0, x20
	bl	evSym
	mov	x22, x0
.LBB774_5:                              // %"$6"
	mov	x0, x19
	mov	x1, x22
	bl	xName
	mov	x23, x0
	bl	pathSize
	add	x8, x0, #15                     // =15
	and	x8, x8, #0xfffffffffffffff0
	mov	x9, sp
	sub	x1, x9, x8
	mov	sp, x1
	mov	x0, x23
	bl	pathString
	bl	fopen
	cbz	x0, .LBB774_22
// %bb.6:                               // %"$9"
	bl	getc_unlocked
	tbnz	w0, #31, .LBB774_18
.LBB774_7:                              // %"$10"
                                        // =>This Inner Loop Header: Depth=1
	mov	w22, w0
	bl	fread
	cmp	w0, #1                          // =1
	b.ne	.LBB774_20
// %bb.8:                               // %"$13"
                                        //   in Loop: Header=BB774_7 Depth=1
	add	x0, x29, #24                    // =24
	bl	dbfBuf
	cbz	x0, .LBB774_21
// %bb.9:                               // %"$14"
                                        //   in Loop: Header=BB774_7 Depth=1
	mov	x23, x0
	cmp	w22, #64                        // =64
	b.ne	.LBB774_11
// %bb.10:                              // %"$17"
                                        //   in Loop: Header=BB774_7 Depth=1
	ldr	w22, [x23, #12]
.LBB774_11:                             // %"$18"
                                        //   in Loop: Header=BB774_7 Depth=1
	cbnz	w22, .LBB774_13
// %bb.12:                              // %"$19"
                                        //   in Loop: Header=BB774_7 Depth=1
	ldr	w22, [x23, #12]
.LBB774_13:                             // %"$20"
                                        //   in Loop: Header=BB774_7 Depth=1
	bl	fread
	cmp	w0, #1                          // =1
	b.ne	.LBB774_15
// %bb.14:                              // %"$22"
                                        //   in Loop: Header=BB774_7 Depth=1
	bl	fread
	cmp	w0, #1                          // =1
	cset	w8, eq
	b	.LBB774_16
.LBB774_15:                             //   in Loop: Header=BB774_7 Depth=1
	mov	w8, wzr
.LBB774_16:                             // %"$21"
                                        //   in Loop: Header=BB774_7 Depth=1
	tbz	w8, #0, .LBB774_20
// %bb.17:                              // %"$24"
                                        //   in Loop: Header=BB774_7 Depth=1
	add	x0, x29, #24                    // =24
	bl	getAdr
	ldrsw	x8, [x23, #8]
	lsl	x0, x0, x8
	mov	x1, x21
	mov	w2, w22
	bl	blkPoke
	bl	getc_unlocked
	tbz	w0, #31, .LBB774_7
.LBB774_18:                             // %"$11"
	bl	fclose
	ldp	w20, w8, [x20, #8]
	bfi	x20, x8, #32, #32
	tst	x20, #0xf
	b.eq	.LBB774_4
// %bb.19:                              // %"$26"
	str	x27, [x26, :lo12:($DbLog)]
	str	x25, [x24, :lo12:($DbJnl)]
	adrp	x0, SymTab+216
	add	x0, x0, :lo12:SymTab+216
	mov	sp, x29
	ldp	x20, x19, [sp, #80]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #64]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #48]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #32]             // 16-byte Folded Reload
	ldr	x27, [sp, #16]                  // 8-byte Folded Reload
	ldp	x29, x30, [sp], #96             // 16-byte Folded Reload
	ret
.LBB774_20:                             // %"$12"
	mov	x0, x19
	bl	jnlErr
.LBB774_21:                             // %"$15"
	mov	x0, x19
	bl	dbfErr
.LBB774_22:                             // %"$7"
	mov	x0, x19
	mov	x1, x22
	bl	openErr
.Lfunc_end774:
	.size	_journal, .Lfunc_end774-_journal
	.cfi_endproc
                                        // -- End function
	.globl	_id                             // -- Begin function _id
	.p2align	4
	.type	_id,@function
_id:                                    // @_id
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x30, x21, [sp, #-32]!           // 16-byte Folded Spill
	stp	x20, x19, [sp, #16]             // 16-byte Folded Spill
	.cfi_def_cfa_offset 32
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w30, -32
	mov	x19, x0
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w20, w8, [x9]
	bfi	x20, x8, #32, #32
	ldp	w21, w8, [x9, #8]
	bfi	x21, x8, #32, #32
	tst	x20, #0x6
	b.ne	.LBB775_3
// %bb.1:                               // %"$3"
	tbz	w20, #3, .LBB775_7
// %bb.2:                               // %"$6"
	ldp	w20, w8, [x20]
	bfi	x20, x8, #32, #32
.LBB775_3:                              // %"$2"
	tbz	w20, #1, .LBB775_8
.LBB775_4:                              // %"$7"
	ldp	w1, w8, [x21]
	bfi	x1, x8, #32, #32
	tst	x1, #0x6
	b.ne	.LBB775_17
// %bb.5:                               // %"$11"
	tbz	w1, #3, .LBB775_16
// %bb.6:                               // %"$14"
	ldp	w1, w8, [x1]
	bfi	x1, x8, #32, #32
	b	.LBB775_17
.LBB775_7:                              // %"$5"
	mov	x0, x20
	bl	evList
	mov	x20, x0
	tbnz	w20, #1, .LBB775_4
.LBB775_8:                              // %"$8"
	eor	w8, w20, #0x8
	tst	x8, #0xe
	b.ne	.LBB775_26
// %bb.9:                               // %"$19"
	eor	w8, w20, #0x8
	tst	x8, #0xe
	b.ne	.LBB775_26
// %bb.10:                              // %"$21"
	ldurb	w8, [x20, #-8]
	tbz	w8, #3, .LBB775_27
// %bb.11:                              // %"$23"
	ldp	w9, w8, [x20, #-8]
	bfi	x9, x8, #32, #32
	and	x20, x9, #0xfffffffffffffff7
	tst	x20, #0x6
	b.ne	.LBB775_13
.LBB775_12:                             // %"$25"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w20, w8, [x20, #8]
	bfi	x20, x8, #32, #32
	tst	x20, #0x6
	b.eq	.LBB775_12
.LBB775_13:                             // %"$26"
	mov	x0, x20
	bl	objId
	mov	w19, #2
	bfi	x19, x0, #4, #60
	ldp	w0, w8, [x21]
	bfi	x0, x8, #32, #32
	tst	x0, #0x6
	b.ne	.LBB775_22
// %bb.14:                              // %"$28"
	tbz	w0, #3, .LBB775_21
// %bb.15:                              // %"$31"
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB775_22
.LBB775_16:                             // %"$13"
	mov	x0, x1
	bl	evList
	mov	x1, x0
.LBB775_17:                             // %"$10"
	adrp	x9, SymTab+8
	add	x9, x9, :lo12:SymTab+8
	lsr	x8, x20, #4
	cmp	x1, x9
	b.ne	.LBB775_19
// %bb.18:                              // %"$15"
	mov	w0, wzr
	mov	x1, x8
	b	.LBB775_20
.LBB775_19:                             // %"$16"
	sub	w20, w8, #1                     // =1
	mov	x0, x19
	bl	xCnt
	mov	x1, x0
	mov	w0, w20
.LBB775_20:                             // %"$17"
	bl	extNm
	bl	extern
	b	.LBB775_24
.LBB775_21:                             // %"$30"
	bl	evList
.LBB775_22:                             // %"$27"
	adrp	x8, SymTab+8
	add	x8, x8, :lo12:SymTab+8
	cmp	x0, x8
	b.eq	.LBB775_25
// %bb.23:                              // %"$33"
	mov	x0, x20
	bl	objFile
	add	w8, w0, #1                      // =1
	sxtw	x8, w8
	mov	w0, #2
	bfi	x0, x8, #4, #60
	mov	x1, x19
	bl	cons
.LBB775_24:                             // %"$9"
	mov	x19, x0
.LBB775_25:                             // %"$9"
	mov	x0, x19
	ldp	x20, x19, [sp, #16]             // 16-byte Folded Reload
	ldp	x30, x21, [sp], #32             // 16-byte Folded Reload
	ret
.LBB775_26:                             // %"$18"
	mov	x0, x19
	mov	x1, x20
	bl	symErr
.LBB775_27:                             // %"$22"
	mov	x0, x19
	mov	x1, x20
	bl	extErr
.Lfunc_end775:
	.size	_id, .Lfunc_end775-_id
	.cfi_endproc
                                        // -- End function
	.globl	_blk                            // -- Begin function _blk
	.p2align	4
	.type	_blk,@function
_blk:                                   // @_blk
	.cfi_startproc
// %bb.0:                               // %"$1"
	adrp	x0, SymTab+8
	add	x0, x0, :lo12:SymTab+8
	ret
.Lfunc_end776:
	.size	_blk, .Lfunc_end776-_blk
	.cfi_endproc
                                        // -- End function
	.globl	_seq                            // -- Begin function _seq
	.p2align	4
	.type	_seq,@function
_seq:                                   // @_seq
	.cfi_startproc
// %bb.0:                               // %"$1"
	adrp	x0, SymTab+8
	add	x0, x0, :lo12:SymTab+8
	ret
.Lfunc_end777:
	.size	_seq, .Lfunc_end777-_seq
	.cfi_endproc
                                        // -- End function
	.globl	_lieu                           // -- Begin function _lieu
	.p2align	4
	.type	_lieu,@function
_lieu:                                  // @_lieu
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w0, w8, [x9]
	bfi	x0, x8, #32, #32
	tst	x0, #0x6
	b.ne	.LBB778_4
// %bb.1:                               // %"$3"
	tbz	w0, #3, .LBB778_3
// %bb.2:                               // %"$6"
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB778_4
.LBB778_3:                              // %"$5"
	bl	evList
.LBB778_4:                              // %"$2"
	eor	w8, w0, #0x8
	tst	x8, #0xe
	b.ne	.LBB778_10
// %bb.5:                               // %"$8"
	ldurb	w8, [x0, #-8]
	tbz	w8, #3, .LBB778_10
// %bb.6:                               // %"$10"
	ldp	w9, w8, [x0, #-8]
	bfi	x9, x8, #32, #32
	and	x8, x9, #0xfffffffffffffff7
	tst	x8, #0x6
	b.ne	.LBB778_8
.LBB778_7:                              // %"$13"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w8, w9, [x8, #8]
	bfi	x8, x9, #32, #32
	tst	x8, #0x6
	b.eq	.LBB778_7
.LBB778_8:                              // %"$14"
	adds	x8, x8, x8
	b.lo	.LBB778_11
// %bb.9:                               // %"$17"
	cmn	x8, x8
	b.lo	.LBB778_12
.LBB778_10:
	adrp	x0, SymTab+8
	add	x0, x0, :lo12:SymTab+8
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.LBB778_11:                             // %"$16"
	cmn	x8, x8
	adrp	x8, SymTab+8
	add	x8, x8, :lo12:SymTab+8
	cset	w9, hs
	tst	w9, #0x1
	csel	x0, x0, x8, ne
.LBB778_12:                             // %"$7"
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end778:
	.size	_lieu, .Lfunc_end778-_lieu
	.cfi_endproc
                                        // -- End function
	.globl	_lock                           // -- Begin function _lock
	.p2align	4
	.type	_lock,@function
_lock:                                  // @_lock
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-48]!                // 8-byte Folded Spill
	stp	x22, x21, [sp, #16]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #32]             // 16-byte Folded Spill
	.cfi_def_cfa_offset 48
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w30, -48
	mov	x19, x0
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w1, w8, [x9]
	bfi	x1, x8, #32, #32
	tst	x1, #0x6
	b.ne	.LBB779_4
// %bb.1:                               // %"$3"
	tbz	w1, #3, .LBB779_3
// %bb.2:                               // %"$6"
	ldp	w1, w8, [x1]
	bfi	x1, x8, #32, #32
	b	.LBB779_4
.LBB779_3:                              // %"$5"
	mov	x0, x1
	bl	evList
	mov	x1, x0
.LBB779_4:                              // %"$2"
	adrp	x22, SymTab+8
	add	x22, x22, :lo12:SymTab+8
	cmp	x1, x22
	b.ne	.LBB779_6
// %bb.5:                               // %"$7"
	adrp	x8, ($DbFiles)
	ldr	x0, [x8, :lo12:($DbFiles)]
	mov	x1, xzr
	mov	x2, xzr
	b	.LBB779_13
.LBB779_6:                              // %"$8"
	eor	w8, w1, #0x8
	tst	x8, #0xe
	b.ne	.LBB779_14
// %bb.7:                               // %"$11"
	eor	w8, w1, #0x8
	tst	x8, #0xe
	b.ne	.LBB779_14
// %bb.8:                               // %"$13"
	ldurb	w8, [x1, #-8]
	tbz	w8, #3, .LBB779_15
// %bb.9:                               // %"$15"
	ldp	w9, w8, [x1, #-8]
	bfi	x9, x8, #32, #32
	and	x20, x9, #0xfffffffffffffff7
	tst	x20, #0x6
	b.ne	.LBB779_11
.LBB779_10:                             // %"$17"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w20, w8, [x20, #8]
	bfi	x20, x8, #32, #32
	tst	x20, #0x6
	b.eq	.LBB779_10
.LBB779_11:                             // %"$18"
	mov	x0, x20
	bl	objFile
	mov	w21, w0
	mov	x0, x20
	bl	objId
	adrp	x8, ($DBs)
	ldr	w8, [x8, :lo12:($DBs)]
	cmp	w21, w8
	b.ge	.LBB779_16
// %bb.12:                              // %"$20"
	adrp	x8, ($DbFiles)
	ldr	x8, [x8, :lo12:($DbFiles)]
	mov	w9, #42
	mul	w9, w21, w9
	add	x8, x8, w9, sxtw
	ldrsw	x9, [x8, #12]
	mul	x1, x0, x9
	mov	x0, x8
	mov	w2, #1
.LBB779_13:                             // %"$9"
	bl	tryLock
                                        // kill: def $w0 killed $w0 def $x0
	sxtw	x8, w0
	mov	w9, #2
	bfi	x9, x8, #4, #60
	cmp	w0, #0                          // =0
	csel	x0, x9, x22, ne
	ldp	x20, x19, [sp, #32]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #16]             // 16-byte Folded Reload
	ldr	x30, [sp], #48                  // 8-byte Folded Reload
	ret
.LBB779_14:                             // %"$10"
	mov	x0, x19
	bl	symErr
.LBB779_15:                             // %"$14"
	mov	x0, x19
	bl	extErr
.LBB779_16:                             // %"$19"
	mov	x0, x19
	bl	dbfErr
.Lfunc_end779:
	.size	_lock, .Lfunc_end779-_lock
	.cfi_endproc
                                        // -- End function
	.globl	_touch                          // -- Begin function _touch
	.p2align	4
	.type	_touch,@function
_touch:                                 // @_touch
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-32]!                // 8-byte Folded Spill
	stp	x20, x19, [sp, #16]             // 16-byte Folded Spill
	.cfi_def_cfa_offset 32
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w30, -32
	mov	x19, x0
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w20, w8, [x9]
	bfi	x20, x8, #32, #32
	tst	x20, #0x6
	b.ne	.LBB780_4
// %bb.1:                               // %"$3"
	tbz	w20, #3, .LBB780_3
// %bb.2:                               // %"$6"
	ldp	w20, w8, [x20]
	bfi	x20, x8, #32, #32
	b	.LBB780_4
.LBB780_3:                              // %"$5"
	mov	x0, x20
	bl	evList
	mov	x20, x0
.LBB780_4:                              // %"$2"
	eor	w8, w20, #0x8
	tst	x8, #0xe
	b.ne	.LBB780_7
// %bb.5:                               // %"$8"
	ldurb	w8, [x20, #-8]
	tbz	w8, #3, .LBB780_7
// %bb.6:                               // %"$9"
	mov	x0, x19
	mov	x1, x20
	bl	dbTouch
.LBB780_7:                              // %"$10"
	mov	x0, x20
	ldp	x20, x19, [sp, #16]             // 16-byte Folded Reload
	ldr	x30, [sp], #32                  // 8-byte Folded Reload
	ret
.Lfunc_end780:
	.size	_touch, .Lfunc_end780-_touch
	.cfi_endproc
                                        // -- End function
	.globl	_commit                         // -- Begin function _commit
	.p2align	4
	.type	_commit,@function
_commit:                                // @_commit
	.cfi_startproc
// %bb.0:                               // %"$1"
	adrp	x0, SymTab+8
	add	x0, x0, :lo12:SymTab+8
	ret
.Lfunc_end781:
	.size	_commit, .Lfunc_end781-_commit
	.cfi_endproc
                                        // -- End function
	.globl	_mark                           // -- Begin function _mark
	.p2align	4
	.type	_mark,@function
_mark:                                  // @_mark
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-64]!                // 8-byte Folded Spill
	stp	x24, x23, [sp, #16]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #32]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #48]             // 16-byte Folded Spill
	.cfi_def_cfa_offset 64
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w30, -64
	mov	x19, x0
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w1, w8, [x9]
	bfi	x1, x8, #32, #32
	ldp	w22, w20, [x9, #8]
	tst	x1, #0x6
	b.eq	.LBB782_4
// %bb.1:                               // %"$2"
	cmp	x1, #2                          // =2
	b.ne	.LBB782_7
.LBB782_2:                              // %"$7"
	adrp	x8, ($DbFiles)
	adrp	x9, ($DBs)
	ldr	x8, [x8, :lo12:($DbFiles)]
	ldr	w9, [x9, :lo12:($DBs)]
	add	x19, x8, #16                    // =16
	sub	w21, w9, #1                     // =1
	adrp	x20, SymTab+8
	add	x20, x20, :lo12:SymTab+8
	tbnz	w21, #31, .LBB782_22
.LBB782_3:                              // %"$11"
                                        // =>This Inner Loop Header: Depth=1
	stp	wzr, wzr, [x19, #8]
	bl	free
	str	xzr, [x19], #42
	sub	w21, w21, #1                    // =1
	tbz	w21, #31, .LBB782_3
	b	.LBB782_22
.LBB782_4:                              // %"$3"
	tbz	w1, #3, .LBB782_6
// %bb.5:                               // %"$6"
	ldp	w1, w8, [x1]
	bfi	x1, x8, #32, #32
	cmp	x1, #2                          // =2
	b.ne	.LBB782_7
	b	.LBB782_2
.LBB782_6:                              // %"$5"
	mov	x0, x1
	bl	evList
	mov	x1, x0
	cmp	x1, #2                          // =2
	b.eq	.LBB782_2
.LBB782_7:                              // %"$8"
	eor	w8, w1, #0x8
	tst	x8, #0xe
	b.ne	.LBB782_25
// %bb.8:                               // %"$14"
	ldurb	w8, [x1, #-8]
	tbz	w8, #3, .LBB782_26
// %bb.9:                               // %"$16"
	bfi	x22, x20, #32, #32
	ldp	w9, w8, [x1, #-8]
	bfi	x9, x8, #32, #32
	and	x19, x9, #0xfffffffffffffff7
	tst	x19, #0x6
	b.ne	.LBB782_11
.LBB782_10:                             // %"$18"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w19, w8, [x19, #8]
	bfi	x19, x8, #32, #32
	tst	x19, #0x6
	b.eq	.LBB782_10
.LBB782_11:                             // %"$19"
	mov	x0, x19
	bl	objFile
	mov	w21, w0
	mov	x0, x19
	bl	objId
	adrp	x8, ($DBs)
	ldr	w8, [x8, :lo12:($DBs)]
	cmp	w21, w8
	b.ge	.LBB782_21
// %bb.12:                              // %"$21"
	mov	x20, x0
	ldp	w19, w8, [x22]
	bfi	x19, x8, #32, #32
	tst	x19, #0x6
	b.ne	.LBB782_16
// %bb.13:                              // %"$24"
	tbz	w19, #3, .LBB782_15
// %bb.14:                              // %"$27"
	ldp	w19, w8, [x19]
	bfi	x19, x8, #32, #32
	b	.LBB782_16
.LBB782_15:                             // %"$26"
	mov	x0, x19
	bl	evList
	mov	x19, x0
.LBB782_16:                             // %"$23"
	adrp	x8, ($DbFiles)
	ldr	x8, [x8, :lo12:($DbFiles)]
	mov	w9, #42
	mul	w9, w21, w9
	add	x24, x8, w9, sxtw
	ldr	x21, [x24, #16]
	lsr	x23, x20, #3
	ldp	w9, w8, [x24, #24]
	bfi	x9, x8, #32, #32
	cmp	x23, x9
	b.lo	.LBB782_18
// %bb.17:                              // %"$28"
	add	x22, x23, #1                    // =1
	mov	x0, x21
	mov	x1, x22
	bl	alloc
	mov	x21, x0
	ldr	w8, [x24, #24]!
	stur	x0, [x24, #-8]
	ldr	w9, [x24, #4]
	bfi	x8, x9, #32, #32
	add	x0, x0, x8
	sub	x2, x22, x8
	mov	w1, wzr
	bl	memset2
	lsr	x8, x22, #32
	stp	w22, w8, [x24]
.LBB782_18:                             // %"$29"
	and	x8, x20, #0x7
	mov	w9, #1
	lsl	w8, w9, w8
	ldrb	w9, [x21, x23]
	tst	w9, w8
	b.eq	.LBB782_23
// %bb.19:                              // %"$32"
	cmp	x19, #2                         // =2
	b.ne	.LBB782_21
// %bb.20:                              // %"$33"
	bic	w8, w9, w8
	strb	w8, [x21, x23]
.LBB782_21:
	adrp	x20, SymTab+216
	add	x20, x20, :lo12:SymTab+216
.LBB782_22:                             // %"$9"
	mov	x0, x20
	ldp	x20, x19, [sp, #48]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #32]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #16]             // 16-byte Folded Reload
	ldr	x30, [sp], #64                  // 8-byte Folded Reload
	ret
.LBB782_23:                             // %"$31"
	adrp	x20, SymTab+8
	add	x20, x20, :lo12:SymTab+8
	add	x10, x20, #208                  // =208
	cmp	x10, x19
	b.ne	.LBB782_22
// %bb.24:                              // %"$35"
	orr	w8, w9, w8
	strb	w8, [x21, x23]
	adrp	x20, SymTab+8
	add	x20, x20, :lo12:SymTab+8
	b	.LBB782_22
.LBB782_25:                             // %"$13"
	mov	x0, x19
	bl	symErr
.LBB782_26:                             // %"$15"
	mov	x0, x19
	bl	extErr
.Lfunc_end782:
	.size	_mark, .Lfunc_end782-_mark
	.cfi_endproc
                                        // -- End function
	.globl	_free                           // -- Begin function _free
	.p2align	4
	.type	_free,@function
_free:                                  // @_free
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-96]!           // 16-byte Folded Spill
	str	x27, [sp, #16]                  // 8-byte Folded Spill
	stp	x26, x25, [sp, #32]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #48]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #64]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #80]             // 16-byte Folded Spill
	mov	x29, sp
	sub	sp, sp, #16                     // =16
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	mov	x20, x0
	ldp	w1, w8, [x0, #8]
	bfi	x1, x8, #32, #32
	bl	evCnt
	sub	w19, w0, #1                     // =1
	adrp	x8, ($DBs)
	ldr	w8, [x8, :lo12:($DBs)]
	cmp	w19, w8
	b.ge	.LBB783_4
// %bb.1:                               // %"$3"
	adrp	x8, ($DbFiles)
	ldr	x8, [x8, :lo12:($DbFiles)]
	mov	w9, #42
	mul	w9, w19, w9
	add	x8, x8, w9, sxtw
	adrp	x9, ($DbFile)
	str	x8, [x9, :lo12:($DbFile)]
	bl	rdLockDb
	sub	x20, x29, #12                   // =12
	sub	x1, x29, #12                    // =12
	mov	x0, xzr
	mov	w2, #12
	bl	blkPeek
	sub	x0, x29, #12                    // =12
	bl	getAdr
	adrp	x24, ($BlkLink)
	str	x0, [x24, :lo12:($BlkLink)]
	add	x0, x20, #6                     // =6
	bl	getAdr
	lsr	x1, x0, #6
	mov	w0, w19
	bl	extNm
	bl	extern
	adrp	x21, SymTab+8
	add	x21, x21, :lo12:SymTab+8
	mov	x1, x21
	bl	cons
	mov	x20, x0
	adrp	x25, env
	ldr	x8, [x25, :lo12:env]
	mov	x9, sp
	sub	x26, x9, #16                    // =16
	mov	sp, x26
	lsr	x10, x0, #32
	lsr	x11, x8, #32
	stp	w20, w10, [x9, #-16]
	stp	w8, w11, [x9, #-8]
	mov	x27, x0
	str	x26, [x25, :lo12:env]
	ldr	x22, [x24, :lo12:($BlkLink)]
	cbz	x22, .LBB783_3
.LBB783_2:                              // %"$5"
                                        // =>This Inner Loop Header: Depth=1
	lsr	x1, x22, #6
	mov	w0, w19
	bl	extNm
	bl	extern
	mov	x1, x21
	bl	cons
	mov	x23, x0
	lsr	x8, x0, #32
	stp	w23, w8, [x27, #8]
	mov	x0, x22
	bl	rdBlock
	mov	x27, x23
	ldr	x22, [x24, :lo12:($BlkLink)]
	cbnz	x22, .LBB783_2
.LBB783_3:                              // %"$6"
	mov	w0, #1
	bl	unLockDb
	ldp	w9, w8, [x26, #8]
	bfi	x9, x8, #32, #32
	str	x9, [x25, :lo12:env]
	mov	x0, x20
	mov	sp, x29
	ldp	x20, x19, [sp, #80]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #64]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #48]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #32]             // 16-byte Folded Reload
	ldr	x27, [sp, #16]                  // 8-byte Folded Reload
	ldp	x29, x30, [sp], #96             // 16-byte Folded Reload
	ret
.LBB783_4:                              // %"$2"
	mov	x0, x20
	bl	dbfErr
.Lfunc_end783:
	.size	_free, .Lfunc_end783-_free
	.cfi_endproc
                                        // -- End function
	.globl	_dbck                           // -- Begin function _dbck
	.p2align	4
	.type	_dbck,@function
_dbck:                                  // @_dbck
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-96]!           // 16-byte Folded Spill
	stp	x28, x27, [sp, #16]             // 16-byte Folded Spill
	stp	x26, x25, [sp, #32]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #48]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #64]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #80]             // 16-byte Folded Spill
	mov	x29, sp
	sub	sp, sp, #16                     // =16
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	mov	x21, x0
	ldp	w22, w8, [x0, #8]
	bfi	x22, x8, #32, #32
	ldp	w19, w8, [x22]
	bfi	x19, x8, #32, #32
	tst	x19, #0x6
	b.ne	.LBB784_4
// %bb.1:                               // %"$3"
	tbz	w19, #3, .LBB784_3
// %bb.2:                               // %"$6"
	ldp	w19, w8, [x19]
	bfi	x19, x8, #32, #32
	b	.LBB784_4
.LBB784_3:                              // %"$5"
	mov	x0, x19
	bl	evList
	mov	x19, x0
.LBB784_4:                              // %"$2"
	adrp	x28, ($DbJnl)
	ldr	x24, [x28, :lo12:($DbJnl)]
	sub	x20, sp, #16                    // =16
	mov	sp, x20
	tbz	w19, #1, .LBB784_9
// %bb.5:                               // %"$7"
	lsr	x8, x19, #4
	sub	w8, w8, #1                      // =1
	adrp	x9, ($DBs)
	ldr	w9, [x9, :lo12:($DBs)]
	cmp	w8, w9
	b.ge	.LBB784_41
// %bb.6:                               // %"$11"
	adrp	x9, ($DbFiles)
	ldr	x9, [x9, :lo12:($DbFiles)]
	mov	w10, #42
	mul	w8, w8, w10
	add	x8, x9, w8, sxtw
	adrp	x9, ($DbFile)
	str	x8, [x9, :lo12:($DbFile)]
	ldp	w9, w8, [x22, #8]
	bfi	x9, x8, #32, #32
	ldp	w19, w8, [x9]
	bfi	x19, x8, #32, #32
	tst	x19, #0x6
	b.ne	.LBB784_10
// %bb.7:                               // %"$13"
	tbz	w19, #3, .LBB784_32
// %bb.8:                               // %"$16"
	ldp	w19, w8, [x19]
	bfi	x19, x8, #32, #32
	b	.LBB784_10
.LBB784_9:                              // %"$8"
	adrp	x8, ($DbFiles)
	ldr	x8, [x8, :lo12:($DbFiles)]
	adrp	x9, ($DbFile)
	str	x8, [x9, :lo12:($DbFile)]
.LBB784_10:                             // %"$9"
	adrp	x22, env+136
	ldr	w8, [x22, :lo12:env+136]
	add	w8, w8, #1                      // =1
	str	w8, [x22, :lo12:env+136]
	bl	wrLockDb
	cbz	x24, .LBB784_12
// %bb.11:                              // %"$17"
	bl	lockJnl
	str	xzr, [x28, :lo12:($DbJnl)]
.LBB784_12:                             // %"$18"
	mov	x0, xzr
	mov	x1, x20
	mov	w2, #12
	bl	blkPeek
	mov	x0, x20
	bl	getAdr
	adrp	x26, ($BlkLink)
	str	x0, [x26, :lo12:($BlkLink)]
	add	x0, x20, #6                     // =6
	bl	getAdr
	mov	x21, x0
	mov	w27, #64
	ldr	x0, [x26, :lo12:($BlkLink)]
	cbz	x0, .LBB784_15
.LBB784_13:                             // %"$20"
                                        // =>This Inner Loop Header: Depth=1
	bl	rdBlock
	ldrb	w8, [x0]
	orr	w8, w8, #0x3f
	strb	w8, [x0]
	add	x27, x27, #64                   // =64
	cmp	x27, x21
	b.hi	.LBB784_25
// %bb.14:                              // %"$23"
                                        //   in Loop: Header=BB784_13 Depth=1
	bl	wrBlock
	ldr	x0, [x26, :lo12:($BlkLink)]
	cbnz	x0, .LBB784_13
.LBB784_15:                             // %"$21"
	stur	xzr, [x29, #-8]                 // 8-byte Folded Spill
	mov	x23, xzr
	str	x24, [x28, :lo12:($DbJnl)]
	mov	w22, #64
	b	.LBB784_17
.LBB784_16:                             // %"$27"
                                        //   in Loop: Header=BB784_17 Depth=1
	add	x22, x22, #64                   // =64
.LBB784_17:                             // %"$24"
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB784_22 Depth 2
	cmp	x22, x21
	b.eq	.LBB784_33
// %bb.18:                              // %"$25"
                                        //   in Loop: Header=BB784_17 Depth=1
	mov	x0, x22
	bl	rdBlock
	ldrb	w8, [x0]
	and	w8, w8, #0x3f
	cmp	w8, #1                          // =1
	b.eq	.LBB784_21
// %bb.19:                              // %"$25"
                                        //   in Loop: Header=BB784_17 Depth=1
	cbnz	w8, .LBB784_16
// %bb.20:                              // %"$28"
                                        //   in Loop: Header=BB784_17 Depth=1
	add	x27, x27, #64                   // =64
	mov	x1, x20
	mov	w2, #6
	bl	memcpy2
	bl	wrBlock
	mov	x0, x22
	mov	x1, x20
	bl	setAdr
	mov	x0, xzr
	mov	x1, x20
	mov	w2, #6
	bl	blkPoke
	b	.LBB784_16
.LBB784_21:                             // %"$29"
                                        //   in Loop: Header=BB784_17 Depth=1
	ldur	x8, [x29, #-8]                  // 8-byte Folded Reload
	add	x8, x8, #1                      // =1
	stur	x8, [x29, #-8]                  // 8-byte Folded Spill
	mov	w25, #2
.LBB784_22:                             // %"$30"
                                        //   Parent Loop BB784_17 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	add	x23, x23, #1                    // =1
	add	x27, x27, #64                   // =64
	ldr	x0, [x26, :lo12:($BlkLink)]
	cbz	x0, .LBB784_16
// %bb.23:                              // %"$31"
                                        //   in Loop: Header=BB784_22 Depth=2
	bl	rdBlock
	ldrb	w8, [x0]
	and	w8, w8, #0x3f
	cmp	w8, w25, uxtb
	b.ne	.LBB784_28
// %bb.24:                              // %"$34"
                                        //   in Loop: Header=BB784_22 Depth=2
	and	w8, w25, #0xff
	cmp	w8, #62                         // =62
	cinc	w25, w25, ls
	b	.LBB784_22
.LBB784_25:                             // %"$22"
	adrp	x0, .L$176
	add	x0, x0, :lo12:.L$176
.LBB784_26:                             // %"$-9"
	bl	mkStr
.LBB784_27:                             // %"$-9"
	mov	x19, x0
	b	.LBB784_29
.LBB784_28:                             // %"$33"
	adrp	x0, .L$177
	add	x0, x0, :lo12:.L$177
	bl	mkStr
	mov	x19, x0
	adrp	x22, env+136
.LBB784_29:                             // %"$-9"
	str	x24, [x28, :lo12:($DbJnl)]
	cbz	x24, .LBB784_31
// %bb.30:                              // %"$47"
	bl	unLockJnl
.LBB784_31:                             // %"$48"
	mov	w0, #1
	bl	unLockDb
	ldr	w8, [x22, :lo12:env+136]
	sub	w8, w8, #1                      // =1
	str	w8, [x22, :lo12:env+136]
	mov	x0, x19
	mov	sp, x29
	ldp	x20, x19, [sp, #80]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #64]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #48]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #32]             // 16-byte Folded Reload
	ldp	x28, x27, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #96             // 16-byte Folded Reload
	ret
.LBB784_32:                             // %"$15"
	mov	x0, x19
	bl	evList
	mov	x19, x0
	b	.LBB784_10
.LBB784_33:                             // %"$26"
	mov	x0, x20
	bl	getAdr
	str	x0, [x26, :lo12:($BlkLink)]
	str	xzr, [x28, :lo12:($DbJnl)]
	adrp	x22, env+136
.LBB784_34:                             // %"$37"
                                        // =>This Inner Loop Header: Depth=1
	ldr	x0, [x26, :lo12:($BlkLink)]
	cbz	x0, .LBB784_37
// %bb.35:                              // %"$38"
                                        //   in Loop: Header=BB784_34 Depth=1
	bl	rdBlock
	ldrb	w8, [x0]
	tst	w8, #0x3f
	b.eq	.LBB784_34
// %bb.36:                              // %"$40"
                                        //   in Loop: Header=BB784_34 Depth=1
	ldrb	w8, [x0]
	and	w8, w8, #0xc0
	strb	w8, [x0]
	bl	wrBlock
	b	.LBB784_34
.LBB784_37:                             // %"$39"
	cmp	x27, x21
	b.ne	.LBB784_40
// %bb.38:                              // %"$43"
	adrp	x8, SymTab+8
	add	x8, x8, :lo12:SymTab+8
	cmp	x19, x8
	b.eq	.LBB784_29
// %bb.39:                              // %"$46"
	mov	w1, #2
	mov	w0, #2
	bfi	x0, x23, #4, #60
	ldur	x8, [x29, #-8]                  // 8-byte Folded Reload
	bfi	x1, x8, #4, #60
	bl	cons
	b	.LBB784_27
.LBB784_40:                             // %"$44"
	adrp	x0, .L$178
	add	x0, x0, :lo12:.L$178
	b	.LBB784_26
.LBB784_41:                             // %"$10"
	mov	x0, x21
	bl	dbfErr
.Lfunc_end784:
	.size	_dbck, .Lfunc_end784-_dbck
	.cfi_endproc
                                        // -- End function
	.globl	tabComplete                     // -- Begin function tabComplete
	.p2align	4
	.type	tabComplete,@function
tabComplete:                            // @tabComplete
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-64]!           // 16-byte Folded Spill
	str	x23, [sp, #16]                  // 8-byte Folded Spill
	stp	x22, x21, [sp, #32]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #48]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 64
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -48
	.cfi_offset w30, -56
	.cfi_offset w29, -64
	adrp	x20, SymTab+8
	add	x20, x20, :lo12:SymTab+8
	ldr	x8, [x20, #768]
	cmp	x8, x20
	b.ne	.LBB785_2
// %bb.1:
	mov	x0, xzr
	b	.LBB785_14
.LBB785_2:                              // %"$3"
	mov	x9, sp
	sub	x23, x9, #48                    // =48
	mov	sp, x23
	lsr	x10, x20, #32
	stp	w20, w10, [x9, #-40]
	mov	w10, #2
	stp	w10, wzr, [x9, #-32]
	mov	x9, sp
	sub	x19, x9, #48                    // =48
	mov	sp, x19
	lsr	x11, x23, #32
	stp	w23, w11, [x9, #-40]
	stp	w10, wzr, [x9, #-32]
	lsr	x10, x8, #32
	stp	w8, w10, [x9, #-24]
	cbz	x0, .LBB785_5
// %bb.3:                               // %"$6"
	ldrb	w8, [x0]
	cbz	w8, .LBB785_6
// %bb.4:                               // %"$8"
	bl	mkStr
	b	.LBB785_7
.LBB785_5:
	mov	x0, x20
	b	.LBB785_7
.LBB785_6:
	adrp	x0, SymTab+216
	add	x0, x0, :lo12:SymTab+216
.LBB785_7:                              // %"$5"
	lsr	x8, x0, #32
	str	w8, [x23, #28]
	mov	x22, x23
	str	w0, [x22, #24]!
	adrp	x21, env
	ldr	x8, [x21, :lo12:env]
	str	x22, [x21, :lo12:env]
	add	x9, x19, #24                    // =24
	lsr	x10, x22, #32
	stp	w22, w10, [x23]
	lsr	x10, x8, #32
	stp	w8, w10, [x23, #32]
	ldr	x8, [x21, :lo12:env]
	lsr	x10, x8, #32
	stp	w8, w10, [x19, #32]
	str	x9, [x21, :lo12:env]
	lsr	x8, x9, #32
	stp	w9, w8, [x19]
	mov	x0, x19
	bl	evList
	cmp	x0, x20
	b.ne	.LBB785_9
// %bb.8:
	mov	x0, xzr
	b	.LBB785_13
.LBB785_9:                              // %"$11"
	bl	xSym
	sub	x8, x0, #8                      // =8
.LBB785_10:                             // %"$13"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w19, w9, [x8]
	bfi	x19, x9, #32, #32
	tst	x19, #0x6
	b.ne	.LBB785_12
// %bb.11:                              // %"$14"
                                        //   in Loop: Header=BB785_10 Depth=1
	add	x8, x19, #8                     // =8
	b	.LBB785_10
.LBB785_12:                             // %"$15"
	mov	x0, x19
	bl	bufSize
	mov	x8, sp
	add	x9, x0, #15                     // =15
	and	x9, x9, #0xfffffffffffffff0
	sub	x1, x8, x9
	mov	sp, x1
	mov	x0, x19
	bl	bufString
	bl	strdup
.LBB785_13:                             // %"$12"
	ldp	w9, w8, [x22, #8]
	bfi	x9, x8, #32, #32
	str	x9, [x21, :lo12:env]
.LBB785_14:                             // %"$4"
	mov	sp, x29
	ldp	x20, x19, [sp, #48]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #32]             // 16-byte Folded Reload
	ldr	x23, [sp, #16]                  // 8-byte Folded Reload
	ldp	x29, x30, [sp], #64             // 16-byte Folded Reload
	ret
.Lfunc_end785:
	.size	tabComplete, .Lfunc_end785-tabComplete
	.cfi_endproc
                                        // -- End function
	.globl	_exec                           // -- Begin function _exec
	.p2align	4
	.type	_exec,@function
_exec:                                  // @_exec
	.cfi_startproc
// %bb.0:                               // %"$1"
	adrp	x0, SymTab+8
	add	x0, x0, :lo12:SymTab+8
	ret
.Lfunc_end786:
	.size	_exec, .Lfunc_end786-_exec
	.cfi_endproc
                                        // -- End function
	.globl	_call                           // -- Begin function _call
	.p2align	4
	.type	_call,@function
_call:                                  // @_call
	.cfi_startproc
// %bb.0:                               // %"$1"
	adrp	x0, SymTab+8
	add	x0, x0, :lo12:SymTab+8
	ret
.Lfunc_end787:
	.size	_call, .Lfunc_end787-_call
	.cfi_endproc
                                        // -- End function
	.globl	_ipid                           // -- Begin function _ipid
	.p2align	4
	.type	_ipid,@function
_ipid:                                  // @_ipid
	.cfi_startproc
// %bb.0:                               // %"$1"
	adrp	x0, SymTab+8
	add	x0, x0, :lo12:SymTab+8
	ret
.Lfunc_end788:
	.size	_ipid, .Lfunc_end788-_ipid
	.cfi_endproc
                                        // -- End function
	.globl	_opid                           // -- Begin function _opid
	.p2align	4
	.type	_opid,@function
_opid:                                  // @_opid
	.cfi_startproc
// %bb.0:                               // %"$1"
	adrp	x0, SymTab+8
	add	x0, x0, :lo12:SymTab+8
	ret
.Lfunc_end789:
	.size	_opid, .Lfunc_end789-_opid
	.cfi_endproc
                                        // -- End function
	.globl	_kill                           // -- Begin function _kill
	.p2align	4
	.type	_kill,@function
_kill:                                  // @_kill
	.cfi_startproc
// %bb.0:                               // %"$1"
	adrp	x0, SymTab+8
	add	x0, x0, :lo12:SymTab+8
	ret
.Lfunc_end790:
	.size	_kill, .Lfunc_end790-_kill
	.cfi_endproc
                                        // -- End function
	.globl	_fork                           // -- Begin function _fork
	.p2align	4
	.type	_fork,@function
_fork:                                  // @_fork
	.cfi_startproc
// %bb.0:                               // %"$1"
	adrp	x0, SymTab+8
	add	x0, x0, :lo12:SymTab+8
	ret
.Lfunc_end791:
	.size	_fork, .Lfunc_end791-_fork
	.cfi_endproc
                                        // -- End function
	.globl	_detach                         // -- Begin function _detach
	.p2align	4
	.type	_detach,@function
_detach:                                // @_detach
	.cfi_startproc
// %bb.0:                               // %"$1"
	adrp	x0, SymTab+8
	add	x0, x0, :lo12:SymTab+8
	ret
.Lfunc_end792:
	.size	_detach, .Lfunc_end792-_detach
	.cfi_endproc
                                        // -- End function
	.globl	_bye                            // -- Begin function _bye
	.p2align	4
	.type	_bye,@function
_bye:                                   // @_bye
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x30, x19, [sp, #-16]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w19, -8
	.cfi_offset w30, -16
	mov	x19, x0
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w1, w8, [x9]
	bfi	x1, x8, #32, #32
	tst	x1, #0x6
	b.ne	.LBB793_4
// %bb.1:                               // %"$3"
	tbz	w1, #3, .LBB793_3
// %bb.2:                               // %"$6"
	ldp	w1, w8, [x1]
	bfi	x1, x8, #32, #32
	b	.LBB793_4
.LBB793_3:                              // %"$5"
	mov	x0, x1
	bl	evList
	mov	x1, x0
.LBB793_4:                              // %"$2"
	adrp	x8, SymTab+8
	add	x8, x8, :lo12:SymTab+8
	cmp	x1, x8
	b.ne	.LBB793_6
// %bb.5:
	mov	w0, wzr
                                        // kill: def $w0 killed $w0 killed $x0
	bl	bye
.LBB793_6:                              // %"$8"
	mov	x0, x19
	bl	xCnt
                                        // kill: def $w0 killed $w0 killed $x0
	bl	bye
.Lfunc_end793:
	.size	_bye, .Lfunc_end793-_bye
	.cfi_endproc
                                        // -- End function
	.globl	_quit                           // -- Begin function _quit
	.p2align	4
	.type	_quit,@function
_quit:                                  // @_quit
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-32]!           // 16-byte Folded Spill
	stp	x20, x19, [sp, #16]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 32
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w30, -24
	.cfi_offset w29, -32
	mov	x19, x0
	ldp	w20, w8, [x0, #8]
	bfi	x20, x8, #32, #32
	mov	x0, x20
	bl	evSym
	mov	x1, x0
	mov	x0, x19
	bl	xName
	mov	x19, x0
	bl	bufSize
	add	x8, x0, #15                     // =15
	and	x8, x8, #0xfffffffffffffff0
	mov	x9, sp
	sub	x1, x9, x8
	mov	sp, x1
	mov	x0, x19
	bl	bufString
	mov	x19, x0
	ldp	w8, w9, [x20, #8]
	bfi	x8, x9, #32, #32
	tst	x8, #0xf
	b.eq	.LBB794_2
// %bb.1:
	mov	x1, xzr
	b	.LBB794_6
.LBB794_2:                              // %"$3"
	ldp	w1, w9, [x8]
	bfi	x1, x9, #32, #32
	tst	x1, #0x6
	b.ne	.LBB794_6
// %bb.3:                               // %"$6"
	tbz	w1, #3, .LBB794_5
// %bb.4:                               // %"$9"
	ldp	w1, w8, [x1]
	bfi	x1, x8, #32, #32
	b	.LBB794_6
.LBB794_5:                              // %"$8"
	mov	x0, x1
	bl	evList
	mov	x1, x0
.LBB794_6:                              // %"$4"
	adrp	x2, .L$195
	add	x2, x2, :lo12:.L$195
	mov	x0, xzr
	mov	x3, x19
	bl	err
.Lfunc_end794:
	.size	_quit, .Lfunc_end794-_quit
	.cfi_endproc
                                        // -- End function
	.globl	_sys                            // -- Begin function _sys
	.p2align	4
	.type	_sys,@function
_sys:                                   // @_sys
	.cfi_startproc
// %bb.0:                               // %"$1"
	adrp	x0, SymTab+8
	add	x0, x0, :lo12:SymTab+8
	ret
.Lfunc_end795:
	.size	_sys, .Lfunc_end795-_sys
	.cfi_endproc
                                        // -- End function
	.globl	_pwd                            // -- Begin function _pwd
	.p2align	4
	.type	_pwd,@function
_pwd:                                   // @_pwd
	.cfi_startproc
// %bb.0:                               // %"$1"
	adrp	x0, SymTab+8
	add	x0, x0, :lo12:SymTab+8
	ret
.Lfunc_end796:
	.size	_pwd, .Lfunc_end796-_pwd
	.cfi_endproc
                                        // -- End function
	.globl	_cd                             // -- Begin function _cd
	.p2align	4
	.type	_cd,@function
_cd:                                    // @_cd
	.cfi_startproc
// %bb.0:                               // %"$1"
	adrp	x0, SymTab+8
	add	x0, x0, :lo12:SymTab+8
	ret
.Lfunc_end797:
	.size	_cd, .Lfunc_end797-_cd
	.cfi_endproc
                                        // -- End function
	.globl	_ctty                           // -- Begin function _ctty
	.p2align	4
	.type	_ctty,@function
_ctty:                                  // @_ctty
	.cfi_startproc
// %bb.0:                               // %"$1"
	adrp	x0, SymTab+8
	add	x0, x0, :lo12:SymTab+8
	ret
.Lfunc_end798:
	.size	_ctty, .Lfunc_end798-_ctty
	.cfi_endproc
                                        // -- End function
	.globl	_cmd                            // -- Begin function _cmd
	.p2align	4
	.type	_cmd,@function
_cmd:                                   // @_cmd
	.cfi_startproc
// %bb.0:                               // %"$1"
	adrp	x0, SymTab+8
	add	x0, x0, :lo12:SymTab+8
	ret
.Lfunc_end799:
	.size	_cmd, .Lfunc_end799-_cmd
	.cfi_endproc
                                        // -- End function
	.globl	_dir                            // -- Begin function _dir
	.p2align	4
	.type	_dir,@function
_dir:                                   // @_dir
	.cfi_startproc
// %bb.0:                               // %"$1"
	adrp	x0, SymTab+8
	add	x0, x0, :lo12:SymTab+8
	ret
.Lfunc_end800:
	.size	_dir, .Lfunc_end800-_dir
	.cfi_endproc
                                        // -- End function
	.globl	_info                           // -- Begin function _info
	.p2align	4
	.type	_info,@function
_info:                                  // @_info
	.cfi_startproc
// %bb.0:                               // %"$1"
	adrp	x0, SymTab+8
	add	x0, x0, :lo12:SymTab+8
	ret
.Lfunc_end801:
	.size	_info, .Lfunc_end801-_info
	.cfi_endproc
                                        // -- End function
	.globl	_file                           // -- Begin function _file
	.p2align	4
	.type	_file,@function
_file:                                  // @_file
	.cfi_startproc
// %bb.0:                               // %"$1"
	adrp	x0, SymTab+8
	add	x0, x0, :lo12:SymTab+8
	ret
.Lfunc_end802:
	.size	_file, .Lfunc_end802-_file
	.cfi_endproc
                                        // -- End function
	.globl	_argv                           // -- Begin function _argv
	.p2align	4
	.type	_argv,@function
_argv:                                  // @_argv
	.cfi_startproc
// %bb.0:                               // %"$1"
	adrp	x0, SymTab+8
	add	x0, x0, :lo12:SymTab+8
	ret
.Lfunc_end803:
	.size	_argv, .Lfunc_end803-_argv
	.cfi_endproc
                                        // -- End function
	.globl	_opt                            // -- Begin function _opt
	.p2align	4
	.type	_opt,@function
_opt:                                   // @_opt
	.cfi_startproc
// %bb.0:                               // %"$1"
	adrp	x0, SymTab+8
	add	x0, x0, :lo12:SymTab+8
	ret
.Lfunc_end804:
	.size	_opt, .Lfunc_end804-_opt
	.cfi_endproc
                                        // -- End function
	.globl	_errno                          // -- Begin function _errno
	.p2align	4
	.type	_errno,@function
_errno:                                 // @_errno
	.cfi_startproc
// %bb.0:                               // %"$1"
	adrp	x0, SymTab+8
	add	x0, x0, :lo12:SymTab+8
	ret
.Lfunc_end805:
	.size	_errno, .Lfunc_end805-_errno
	.cfi_endproc
                                        // -- End function
	.globl	fetchChar                       // -- Begin function fetchChar
	.p2align	4
	.type	fetchChar,@function
fetchChar:                              // @fetchChar
	.cfi_startproc
// %bb.0:                               // %"$1"
	ldr	x9, [x0]
	ldrb	w8, [x9], #1
	cmp	w8, #128                        // =128
	b.lt	.LBB806_10
// %bb.1:                               // %"$3"
	cmp	w8, #255                        // =255
	b.ne	.LBB806_3
// %bb.2:
	mov	w8, #1114112
	b	.LBB806_10
.LBB806_3:                              // %"$5"
	tbz	w8, #5, .LBB806_6
// %bb.4:                               // %"$8"
	tbz	w8, #4, .LBB806_7
// %bb.5:                               // %"$11"
	ldrb	w10, [x9], #1
	and	w11, w8, #0x7
	and	w8, w10, #0x3f
	bfi	w8, w11, #6, #3
	b	.LBB806_8
.LBB806_6:                              // %"$7"
	and	w10, w8, #0x1f
	b	.LBB806_9
.LBB806_7:                              // %"$10"
	and	w8, w8, #0xf
.LBB806_8:                              // %"$12"
	ldrb	w10, [x9], #1
	and	w10, w10, #0x3f
	bfi	w10, w8, #6, #9
.LBB806_9:                              // %"$9"
	ldrb	w8, [x9], #1
	and	w8, w8, #0x3f
	bfi	w8, w10, #6, #15
.LBB806_10:                             // %"$2"
	str	x9, [x0]
	mov	w0, w8
	ret
.Lfunc_end806:
	.size	fetchChar, .Lfunc_end806-fetchChar
	.cfi_endproc
                                        // -- End function
	.globl	natErr                          // -- Begin function natErr
	.p2align	4
	.type	natErr,@function
natErr:                                 // @natErr
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	mov	x1, x0
	adrp	x2, .L$196
	add	x2, x2, :lo12:.L$196
	mov	x0, xzr
	mov	x3, xzr
	bl	err
.Lfunc_end807:
	.size	natErr, .Lfunc_end807-natErr
	.cfi_endproc
                                        // -- End function
	.globl	ffi                             // -- Begin function ffi
	.p2align	4
	.type	ffi,@function
ffi:                                    // @ffi
	.cfi_startproc
// %bb.0:                               // %"$1"
	adrp	x0, SymTab+8
	add	x0, x0, :lo12:SymTab+8
	ret
.Lfunc_end808:
	.size	ffi, .Lfunc_end808-ffi
	.cfi_endproc
                                        // -- End function
	.globl	_nat                            // -- Begin function _nat
	.p2align	4
	.type	_nat,@function
_nat:                                   // @_nat
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-96]!           // 16-byte Folded Spill
	str	x27, [sp, #16]                  // 8-byte Folded Spill
	stp	x26, x25, [sp, #32]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #48]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #64]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #80]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	mov	x19, x0
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w20, w8, [x9]
	bfi	x20, x8, #32, #32
	ldp	w21, w8, [x9, #8]
	bfi	x21, x8, #32, #32
	tst	x20, #0x6
	b.ne	.LBB809_4
// %bb.1:                               // %"$3"
	tbz	w20, #3, .LBB809_3
// %bb.2:                               // %"$6"
	ldp	w20, w8, [x20]
	bfi	x20, x8, #32, #32
	b	.LBB809_4
.LBB809_3:                              // %"$5"
	mov	x0, x20
	bl	evList
	mov	x20, x0
.LBB809_4:                              // %"$2"
	adrp	x23, env
	ldr	x8, [x23, :lo12:env]
	mov	x9, sp
	sub	x24, x9, #16                    // =16
	mov	sp, x24
	lsr	x10, x20, #32
	stp	w20, w10, [x9, #-16]
	lsr	x10, x8, #32
	stp	w8, w10, [x9, #-8]
	str	x24, [x23, :lo12:env]
	ldp	w0, w8, [x21]
	bfi	x0, x8, #32, #32
	ldp	w25, w8, [x21, #8]
	bfi	x25, x8, #32, #32
	tst	x0, #0x6
	b.ne	.LBB809_8
// %bb.5:                               // %"$8"
	tbz	w0, #3, .LBB809_7
// %bb.6:                               // %"$11"
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB809_8
.LBB809_7:                              // %"$10"
	bl	evList
.LBB809_8:                              // %"$7"
	adrp	x22, SymTab+8
	add	x22, x22, :lo12:SymTab+8
	mov	x1, x22
	bl	cons
	mov	x21, x0
	ldr	x8, [x23, :lo12:env]
	mov	x9, sp
	sub	x10, x9, #16                    // =16
	mov	sp, x10
	lsr	x11, x0, #32
	lsr	x12, x8, #32
	stp	w21, w11, [x9, #-16]
	stp	w8, w12, [x9, #-8]
	lsr	x26, x22, #32
	mov	x27, x0
	str	x10, [x23, :lo12:env]
	b	.LBB809_11
.LBB809_9:                              // %"$18"
                                        //   in Loop: Header=BB809_11 Depth=1
	bl	evList
.LBB809_10:                             // %"$15"
                                        //   in Loop: Header=BB809_11 Depth=1
	ldr	x8, [x23, :lo12:env]
	mov	x9, sp
	sub	x10, x9, #16                    // =16
	mov	sp, x10
	lsr	x11, x0, #32
	lsr	x12, x8, #32
	stp	w0, w11, [x9, #-16]
	stp	w8, w12, [x9, #-8]
	str	x10, [x23, :lo12:env]
	mov	x8, sp
	sub	x9, x8, #16                     // =16
	mov	sp, x9
	stp	w0, w11, [x8, #-16]
	stp	w22, w26, [x8, #-8]
	lsr	x8, x9, #32
	stp	w9, w8, [x27, #8]
	mov	x27, x9
.LBB809_11:                             // %"$12"
                                        // =>This Inner Loop Header: Depth=1
	tst	x25, #0xf
	b.ne	.LBB809_15
// %bb.12:                              // %"$13"
                                        //   in Loop: Header=BB809_11 Depth=1
	ldp	w0, w8, [x25]
	bfi	x0, x8, #32, #32
	ldp	w25, w8, [x25, #8]
	bfi	x25, x8, #32, #32
	tst	x0, #0x6
	b.ne	.LBB809_10
// %bb.13:                              // %"$16"
                                        //   in Loop: Header=BB809_11 Depth=1
	tbz	w0, #3, .LBB809_9
// %bb.14:                              // %"$19"
                                        //   in Loop: Header=BB809_11 Depth=1
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB809_10
.LBB809_15:                             // %"$14"
	mov	x0, x19
	mov	x1, xzr
	mov	x2, x20
	mov	x3, x21
	bl	ffi
	ldp	w9, w8, [x24, #8]
	bfi	x9, x8, #32, #32
	str	x9, [x23, :lo12:env]
	mov	sp, x29
	ldp	x20, x19, [sp, #80]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #64]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #48]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #32]             // 16-byte Folded Reload
	ldr	x27, [sp, #16]                  // 8-byte Folded Reload
	ldp	x29, x30, [sp], #96             // 16-byte Folded Reload
	ret
.Lfunc_end809:
	.size	_nat, .Lfunc_end809-_nat
	.cfi_endproc
                                        // -- End function
	.globl	_native                         // -- Begin function _native
	.p2align	4
	.type	_native,@function
_native:                                // @_native
	.cfi_startproc
// %bb.0:                               // %"$1"
	adrp	x0, SymTab+8
	add	x0, x0, :lo12:SymTab+8
	ret
.Lfunc_end810:
	.size	_native, .Lfunc_end810-_native
	.cfi_endproc
                                        // -- End function
	.globl	_args                           // -- Begin function _args
	.p2align	4
	.type	_args,@function
_args:                                  // @_args
	.cfi_startproc
// %bb.0:                               // %"$1"
	adrp	x8, SymTab+8
	add	x8, x8, :lo12:SymTab+8
	adrp	x9, env+96
	add	x10, x8, #208                   // =208
	ldrb	w9, [x9, :lo12:env+96]
	tst	w9, #0xf
	csel	x0, x10, x8, eq
	ret
.Lfunc_end811:
	.size	_args, .Lfunc_end811-_args
	.cfi_endproc
                                        // -- End function
	.globl	_next                           // -- Begin function _next
	.p2align	4
	.type	_next,@function
_next:                                  // @_next
	.cfi_startproc
// %bb.0:                               // %"$1"
	adrp	x8, env+96
	ldr	x9, [x8, :lo12:env+96]
	ldp	w11, w10, [x9]
	bfi	x11, x10, #32, #32
	str	x11, [x8, :lo12:env+96]
	ldp	w0, w8, [x9, #8]
	bfi	x0, x8, #32, #32
	ret
.Lfunc_end812:
	.size	_next, .Lfunc_end812-_next
	.cfi_endproc
                                        // -- End function
	.globl	_arg                            // -- Begin function _arg
	.p2align	4
	.type	_arg,@function
_arg:                                   // @_arg
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	ldp	w1, w8, [x0, #8]
	bfi	x1, x8, #32, #32
	bl	evCnt
	cmp	x0, #1                          // =1
	b.ge	.LBB813_2
// %bb.1:
	adrp	x0, SymTab+8
	add	x0, x0, :lo12:SymTab+8
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.LBB813_2:                              // %"$5.preheader"
	adrp	x8, env+96
	add	x8, x8, :lo12:env+96
.LBB813_3:                              // %"$5"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w8, w9, [x8]
	bfi	x8, x9, #32, #32
	sub	x0, x0, #1                      // =1
	cmp	x0, #0                          // =0
	b.gt	.LBB813_3
// %bb.4:                               // %"$7"
	ldp	w0, w9, [x8, #8]
	bfi	x0, x9, #32, #32
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end813:
	.size	_arg, .Lfunc_end813-_arg
	.cfi_endproc
                                        // -- End function
	.globl	_rest                           // -- Begin function _rest
	.p2align	4
	.type	_rest,@function
_rest:                                  // @_rest
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-64]!           // 16-byte Folded Spill
	stp	x24, x23, [sp, #16]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #32]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #48]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 64
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w30, -56
	.cfi_offset w29, -64
	adrp	x8, env+96
	ldr	x21, [x8, :lo12:env+96]
	tst	x21, #0xf
	b.eq	.LBB814_2
// %bb.1:
	mov	x19, x21
	b	.LBB814_6
.LBB814_2:                              // %"$3"
	ldp	w0, w8, [x21, #8]
	bfi	x0, x8, #32, #32
	adrp	x20, SymTab+8
	add	x20, x20, :lo12:SymTab+8
	mov	x1, x20
	bl	cons
	mov	x19, x0
	adrp	x22, env
	ldr	x8, [x22, :lo12:env]
	mov	x9, sp
	sub	x23, x9, #16                    // =16
	mov	sp, x23
	lsr	x10, x0, #32
	lsr	x11, x8, #32
	stp	w19, w10, [x9, #-16]
	stp	w8, w11, [x9, #-8]
	mov	x24, x0
	str	x23, [x22, :lo12:env]
.LBB814_3:                              // %"$5"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w21, w8, [x21]
	bfi	x21, x8, #32, #32
	tst	x21, #0xf
	b.ne	.LBB814_5
// %bb.4:                               // %"$6"
                                        //   in Loop: Header=BB814_3 Depth=1
	ldp	w0, w8, [x21, #8]
	bfi	x0, x8, #32, #32
	mov	x1, x20
	bl	cons
	lsr	x8, x0, #32
	stp	w0, w8, [x24, #8]
	mov	x24, x0
	b	.LBB814_3
.LBB814_5:                              // %"$7"
	ldp	w9, w8, [x23, #8]
	bfi	x9, x8, #32, #32
	str	x9, [x22, :lo12:env]
.LBB814_6:                              // %"$4"
	mov	x0, x19
	mov	sp, x29
	ldp	x20, x19, [sp, #48]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #32]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #64             // 16-byte Folded Reload
	ret
.Lfunc_end814:
	.size	_rest, .Lfunc_end814-_rest
	.cfi_endproc
                                        // -- End function
	.globl	_env                            // -- Begin function _env
	.p2align	4
	.type	_env,@function
_env:                                   // @_env
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-64]!           // 16-byte Folded Spill
	stp	x24, x23, [sp, #16]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #32]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #48]             // 16-byte Folded Spill
	mov	x29, sp
	sub	sp, sp, #16                     // =16
	.cfi_def_cfa w29, 64
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w30, -56
	.cfi_offset w29, -64
	ldp	w22, w8, [x0, #8]
	bfi	x22, x8, #32, #32
	adrp	x21, env
	adrp	x23, SymTab+8
	add	x23, x23, :lo12:SymTab+8
	ldr	x8, [x21, :lo12:env]
	stp	x23, x8, [x29, #-16]
	sub	x8, x29, #16                    // =16
	str	x8, [x21, :lo12:env]
	tst	x22, #0xf
	b.eq	.LBB815_8
// %bb.1:                               // %"$2"
	adrp	x19, SymTab+8
	add	x19, x19, :lo12:SymTab+8
	adrp	x8, env+8
	add	x8, x8, :lo12:env+8
	b	.LBB815_4
.LBB815_2:                              // %"$11"
                                        //   in Loop: Header=BB815_4 Depth=1
	ldp	w1, w8, [x0]
	bfi	x1, x8, #32, #32
	bl	cons
	mov	x1, x19
	bl	cons
	mov	x19, x0
	stur	x0, [x29, #-16]
.LBB815_3:                              // %"$10"
                                        //   in Loop: Header=BB815_4 Depth=1
	add	x8, x20, #16                    // =16
.LBB815_4:                              // %"$5"
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB815_6 Depth 2
	ldp	w20, w9, [x8]
	bfi	x20, x9, #32, #32
	cbz	x20, .LBB815_25
// %bb.5:                               // %"$6"
                                        //   in Loop: Header=BB815_4 Depth=1
	ldp	w0, w8, [x20, #8]
	bfi	x0, x8, #32, #32
	mov	x8, x19
	tst	x8, #0xf
	b.ne	.LBB815_2
.LBB815_6:                              // %"$9"
                                        //   Parent Loop BB815_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	w10, w9, [x8]
	bfi	x10, x9, #32, #32
	ldp	w10, w9, [x10]
	bfi	x10, x9, #32, #32
	cmp	x0, x10
	b.eq	.LBB815_3
// %bb.7:                               // %"$12"
                                        //   in Loop: Header=BB815_6 Depth=2
	ldp	w8, w9, [x8, #8]
	bfi	x8, x9, #32, #32
	tst	x8, #0xf
	b.eq	.LBB815_6
	b	.LBB815_2
.LBB815_8:                              // %"$3"
	mov	x8, sp
	sub	x24, x8, #16                    // =16
	mov	sp, x24
	lsr	x9, x23, #32
	stp	w23, w9, [x8, #-16]
	ldr	x9, [x21, :lo12:env]
	lsr	x10, x9, #32
	stp	w9, w10, [x8, #-8]
	str	x24, [x21, :lo12:env]
	mov	x19, x23
	b	.LBB815_12
.LBB815_9:                              // %"$33"
                                        //   in Loop: Header=BB815_12 Depth=1
	mov	x0, x1
	bl	evList
	mov	x1, x0
.LBB815_10:                             // %"$30"
                                        //   in Loop: Header=BB815_12 Depth=1
	mov	x0, x20
	bl	cons
	mov	x1, x19
	bl	cons
	mov	x19, x0
	stur	x0, [x29, #-16]
.LBB815_11:                             // %"$19"
                                        //   in Loop: Header=BB815_12 Depth=1
	tst	x22, #0xf
	b.ne	.LBB815_25
.LBB815_12:                             // %"$13"
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB815_23 Depth 2
	ldp	w20, w8, [x22]
	bfi	x20, x8, #32, #32
	ldp	w22, w8, [x22, #8]
	bfi	x22, x8, #32, #32
	tst	x20, #0x6
	b.ne	.LBB815_16
// %bb.13:                              // %"$15"
                                        //   in Loop: Header=BB815_12 Depth=1
	tbz	w20, #3, .LBB815_15
// %bb.14:                              // %"$18"
                                        //   in Loop: Header=BB815_12 Depth=1
	ldp	w20, w8, [x20]
	bfi	x20, x8, #32, #32
	b	.LBB815_16
.LBB815_15:                             // %"$17"
                                        //   in Loop: Header=BB815_12 Depth=1
	mov	x0, x20
	bl	evList
	mov	x20, x0
.LBB815_16:                             // %"$14"
                                        //   in Loop: Header=BB815_12 Depth=1
	lsr	x8, x20, #32
	stp	w20, w8, [x24]
	tst	x20, #0xf
	b.eq	.LBB815_23
// %bb.17:                              // %"$20"
                                        //   in Loop: Header=BB815_12 Depth=1
	cmp	x20, x23
	b.eq	.LBB815_11
// %bb.18:                              // %"$29"
                                        //   in Loop: Header=BB815_12 Depth=1
	ldp	w1, w8, [x22]
	bfi	x1, x8, #32, #32
	ldp	w22, w8, [x22, #8]
	bfi	x22, x8, #32, #32
	tst	x1, #0x6
	b.ne	.LBB815_10
// %bb.19:                              // %"$31"
                                        //   in Loop: Header=BB815_12 Depth=1
	tbz	w1, #3, .LBB815_9
// %bb.20:                              // %"$34"
                                        //   in Loop: Header=BB815_12 Depth=1
	ldp	w1, w8, [x1]
	bfi	x1, x8, #32, #32
	b	.LBB815_10
.LBB815_21:                             // %"$24"
                                        //   in Loop: Header=BB815_23 Depth=2
	mov	x8, x0
.LBB815_22:                             // %"$25"
                                        //   in Loop: Header=BB815_23 Depth=2
	ldp	w1, w9, [x8]
	bfi	x1, x9, #32, #32
	bl	cons
	mov	x1, x19
	bl	cons
	mov	x19, x0
	stur	x0, [x29, #-16]
	tst	x20, #0xf
	b.ne	.LBB815_11
.LBB815_23:                             // %"$22"
                                        //   Parent Loop BB815_12 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	w0, w8, [x20]
	bfi	x0, x8, #32, #32
	ldp	w20, w8, [x20, #8]
	bfi	x20, x8, #32, #32
	tst	x0, #0xf
	b.ne	.LBB815_21
// %bb.24:                              // %"$23"
                                        //   in Loop: Header=BB815_23 Depth=2
	add	x8, x0, #8                      // =8
	ldp	w0, w9, [x0]
	bfi	x0, x9, #32, #32
	b	.LBB815_22
.LBB815_25:                             // %"$4"
	ldur	x8, [x29, #-8]
	str	x8, [x21, :lo12:env]
	mov	x0, x19
	mov	sp, x29
	ldp	x20, x19, [sp, #48]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #32]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #64             // 16-byte Folded Reload
	ret
.Lfunc_end815:
	.size	_env, .Lfunc_end815-_env
	.cfi_endproc
                                        // -- End function
	.globl	_trail                          // -- Begin function _trail
	.p2align	4
	.type	_trail,@function
_trail:                                 // @_trail
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x30, x23, [sp, #-48]!           // 16-byte Folded Spill
	stp	x22, x21, [sp, #16]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #32]             // 16-byte Folded Spill
	.cfi_def_cfa_offset 48
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w30, -48
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w19, w8, [x9]
	bfi	x19, x8, #32, #32
	tst	x19, #0x6
	b.ne	.LBB816_4
// %bb.1:                               // %"$3"
	tbz	w19, #3, .LBB816_3
// %bb.2:                               // %"$6"
	ldp	w19, w8, [x19]
	bfi	x19, x8, #32, #32
	b	.LBB816_4
.LBB816_3:                              // %"$5"
	mov	x0, x19
	bl	evList
	mov	x19, x0
.LBB816_4:                              // %"$2"
	adrp	x21, SymTab+8
	add	x21, x21, :lo12:SymTab+8
	adrp	x8, env+8
	add	x8, x8, :lo12:env+8
	mov	x1, x21
	adrp	x22, SymTab+376
	add	x22, x22, :lo12:SymTab+376
	b	.LBB816_7
.LBB816_5:                              // %"$11"
                                        //   in Loop: Header=BB816_7 Depth=1
	cmp	x19, x21
	b.ne	.LBB816_11
.LBB816_6:                              // %"$10"
                                        //   in Loop: Header=BB816_7 Depth=1
	add	x8, x23, #16                    // =16
.LBB816_7:                              // %"$7"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w23, w9, [x8]
	bfi	x23, x9, #32, #32
	cbz	x23, .LBB816_12
// %bb.8:                               // %"$8"
                                        //   in Loop: Header=BB816_7 Depth=1
	ldp	w20, w8, [x23, #8]
	bfi	x20, x8, #32, #32
	cmp	x20, x22
	b.ne	.LBB816_5
// %bb.9:                               // %"$12"
                                        //   in Loop: Header=BB816_7 Depth=1
	ldp	w0, w8, [x23, #24]
	bfi	x0, x8, #32, #32
	cbz	x0, .LBB816_6
// %bb.10:                              // %"$13"
                                        //   in Loop: Header=BB816_7 Depth=1
	bl	cons
	mov	x1, x0
	add	x8, x23, #16                    // =16
	b	.LBB816_7
.LBB816_11:                             // %"$16"
                                        //   in Loop: Header=BB816_7 Depth=1
	ldp	w0, w8, [x20]
	bfi	x0, x8, #32, #32
	bl	cons
	mov	x1, x0
	mov	x0, x20
	bl	cons
	mov	x1, x0
	ldp	w8, w9, [x23]
	stp	w8, w9, [x20]
	b	.LBB816_6
.LBB816_12:
	mov	x8, x1
.LBB816_13:                             // %"$17"
                                        // =>This Inner Loop Header: Depth=1
	tst	x8, #0xf
	b.ne	.LBB816_16
// %bb.14:                              // %"$18"
                                        //   in Loop: Header=BB816_13 Depth=1
	ldp	w9, w10, [x8]
	bfi	x9, x10, #32, #32
	ldp	w8, w10, [x8, #8]
	bfi	x8, x10, #32, #32
	tst	x9, #0xf
	b.eq	.LBB816_13
// %bb.15:                              // %"$20"
                                        //   in Loop: Header=BB816_13 Depth=1
	ldp	w10, w11, [x8]
	ldp	w8, w12, [x8, #8]
	bfi	x8, x12, #32, #32
	stp	w10, w11, [x9]
	b	.LBB816_13
.LBB816_16:                             // %"$19"
	mov	x0, x1
	ldp	x20, x19, [sp, #32]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #16]             // 16-byte Folded Reload
	ldp	x30, x23, [sp], #48             // 16-byte Folded Reload
	ret
.Lfunc_end816:
	.size	_trail, .Lfunc_end816-_trail
	.cfi_endproc
                                        // -- End function
	.globl	_up                             // -- Begin function _up
	.p2align	4
	.type	_up,@function
_up:                                    // @_up
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x30, x19, [sp, #-16]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w19, -8
	.cfi_offset w30, -16
	ldp	w10, w8, [x0, #8]
	bfi	x10, x8, #32, #32
	ldp	w19, w8, [x10]
	bfi	x19, x8, #32, #32
	adrp	x8, env+8
	ldr	x8, [x8, :lo12:env+8]
	tst	x19, #0x6
	b.eq	.LBB817_2
// %bb.1:                               // %"$2"
	lsr	x9, x19, #4
	ldp	w10, w11, [x10, #8]
	bfi	x10, x11, #32, #32
	ldp	w19, w11, [x10]
	bfi	x19, x11, #32, #32
	b	.LBB817_3
.LBB817_2:
	mov	w9, #1
.LBB817_3:                              // %"$3"
	adrp	x11, SymTab+8
	add	x11, x11, :lo12:SymTab+8
	cmp	x19, x11
	b.ne	.LBB817_9
// %bb.4:                               // %"$4"
	adrp	x0, SymTab+8
	add	x0, x0, :lo12:SymTab+8
	cbz	x9, .LBB817_8
// %bb.5:                               // %"$10.preheader"
	adrp	x10, SymTab+376
	add	x10, x10, :lo12:SymTab+376
	cbz	x8, .LBB817_8
.LBB817_6:                              // %"$11"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w12, w11, [x8, #8]
	bfi	x12, x11, #32, #32
	subs	x11, x9, #1                     // =1
	cset	w13, eq
	cmp	x10, x12
	csel	x9, x9, x11, ne
	csel	w11, wzr, w13, ne
	cbnz	w11, .LBB817_19
// %bb.7:                               // %"$16"
                                        //   in Loop: Header=BB817_6 Depth=1
	ldp	w8, w11, [x8, #16]
	bfi	x8, x11, #32, #32
	cbnz	x8, .LBB817_6
.LBB817_8:                              // %"$6"
	ldp	x30, x19, [sp], #16             // 16-byte Folded Reload
	ret
.LBB817_9:                              // %"$5"
	cbz	x9, .LBB817_14
// %bb.10:                              // %"$23.preheader"
	mov	x11, x19
	cbz	x8, .LBB817_13
.LBB817_11:                             // %"$24"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w13, w12, [x8, #8]
	bfi	x13, x12, #32, #32
	subs	x12, x9, #1                     // =1
	cset	w14, eq
	cmp	x19, x13
	csel	x9, x9, x12, ne
	csel	x11, x11, x8, ne
	csel	w12, wzr, w14, ne
	tbnz	w12, #0, .LBB817_13
// %bb.12:                              // %"$28"
                                        //   in Loop: Header=BB817_11 Depth=1
	ldp	w8, w12, [x8, #16]
	bfi	x8, x12, #32, #32
	cbnz	x8, .LBB817_11
.LBB817_13:
	mov	x19, x11
.LBB817_14:                             // %"$22"
	ldp	w8, w9, [x10, #8]
	bfi	x8, x9, #32, #32
	tst	x8, #0xf
	b.eq	.LBB817_16
// %bb.15:                              // %"$29"
	ldp	w0, w8, [x19]
	bfi	x0, x8, #32, #32
	ldp	x30, x19, [sp], #16             // 16-byte Folded Reload
	ret
.LBB817_16:                             // %"$30"
	ldp	w0, w9, [x8]
	bfi	x0, x9, #32, #32
	tst	x0, #0x6
	b.ne	.LBB817_22
// %bb.17:                              // %"$33"
	tbz	w0, #3, .LBB817_21
// %bb.18:                              // %"$36"
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB817_22
.LBB817_19:                             // %"$17"
	ldp	w0, w9, [x8, #24]
	bfi	x0, x9, #32, #32
	cbnz	x0, .LBB817_8
// %bb.20:                              // %"$19"
	adrp	x0, SymTab+8
	add	x0, x0, :lo12:SymTab+8
	ldp	x30, x19, [sp], #16             // 16-byte Folded Reload
	ret
.LBB817_21:                             // %"$35"
	bl	evList
.LBB817_22:                             // %"$32"
	lsr	x8, x0, #32
	stp	w0, w8, [x19]
	ldp	x30, x19, [sp], #16             // 16-byte Folded Reload
	ret
.Lfunc_end817:
	.size	_up, .Lfunc_end817-_up
	.cfi_endproc
                                        // -- End function
	.globl	_history                        // -- Begin function _history
	.p2align	4
	.type	_history,@function
_history:                               // @_history
	.cfi_startproc
// %bb.0:                               // %"$1"
	adrp	x0, SymTab+8
	add	x0, x0, :lo12:SymTab+8
	ret
.Lfunc_end818:
	.size	_history, .Lfunc_end818-_history
	.cfi_endproc
                                        // -- End function
	.globl	main                            // -- Begin function main
	.p2align	4
	.type	main,@function
main:                                   // @main
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x30, x23, [sp, #-48]!           // 16-byte Folded Spill
	stp	x22, x21, [sp, #16]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #32]             // 16-byte Folded Spill
	.cfi_def_cfa_offset 48
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w30, -48
	mov	w8, #2
	movk	w8, #16384, lsl #16
	adrp	x21, ($QuitRst)
	mov	w9, #144
	strb	w9, [x21, :lo12:($QuitRst)]
	adrp	x19, SymTab+8
	add	x19, x19, :lo12:SymTab+8
	adrp	x22, ($Heap)
	str	x8, [x19, #752]
	mov	w8, #1168
	movk	w8, #1024, lsl #16
	str	x8, [x22, :lo12:($Heap)]
	adrp	x23, ($Limit)
	str	x8, [x23, :lo12:($Limit)]
	adrp	x8, ($Put)
	adrp	x9, _putStdout
	add	x9, x9, :lo12:_putStdout
	str	x9, [x8, :lo12:($Put)]
	adrp	x8, _getStdin
	add	x8, x8, :lo12:_getStdin
	adrp	x10, ($Get)
	str	x8, [x10, :lo12:($Get)]
	add	x20, x19, #752                  // =752
	mov	w0, #10
	blr	x9
	adrp	x0, .L$198
	add	x0, x0, :lo12:.L$198
	bl	outString
	mov	x0, x20
	bl	print
	bl	newline
	adrp	x0, .L$199
	add	x0, x0, :lo12:.L$199
	bl	outString
	ldrb	w0, [x21, :lo12:($QuitRst)]
	bl	outWord
	bl	newline
	adrp	x0, .L$200
	add	x0, x0, :lo12:.L$200
	bl	outString
	ldr	x0, [x22, :lo12:($Heap)]
	bl	outWord
	bl	newline
	adrp	x0, .L$201
	add	x0, x0, :lo12:.L$201
	bl	outString
	ldr	x0, [x23, :lo12:($Limit)]
	bl	outWord
	bl	newline
	adrp	x0, .L$202
	add	x0, x0, :lo12:.L$202
	bl	outString
	bl	heapAlloc
	adrp	x0, .L$203
	add	x0, x0, :lo12:.L$203
	bl	outString
	mov	w8, #5920
	add	x22, x19, x8
	mov	x20, x19
	b	.LBB819_2
.LBB819_1:                              // %"$7"
                                        //   in Loop: Header=BB819_2 Depth=1
	add	x20, x20, #16                   // =16
.LBB819_2:                              // %"$5"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w21, w8, [x20, #-8]
	bfi	x21, x8, #32, #32
	tst	x21, #0x6
	b.eq	.LBB819_1
// %bb.3:                               // %"$6"
                                        //   in Loop: Header=BB819_2 Depth=1
	ldr	x3, [x19, #64]
	mov	x0, x20
	mov	x1, xzr
	mov	x2, x21
	mov	x4, x19
	mov	w5, wzr
	bl	intern
	cmp	x20, x22
	b.eq	.LBB819_6
// %bb.4:                               // %"$8"
                                        //   in Loop: Header=BB819_2 Depth=1
	tbz	w21, #2, .LBB819_1
// %bb.5:                               // %"$10"
                                        //   in Loop: Header=BB819_2 Depth=1
	add	x20, x20, #16                   // =16
	b	.LBB819_1
.LBB819_6:                              // %"$9"
	adrp	x0, .L$204
	add	x0, x0, :lo12:.L$204
	bl	outString
	str	x19, [x19, #720]
	add	x0, x19, #336                   // =336
	str	x0, [x19, #160]
	mov	w8, #26
	str	x8, [x19, #328]
	mov	x1, x19
	bl	cons
	adrp	x8, ($Extern)
	str	x0, [x8, :lo12:($Extern)]
	//APP
	mrs	x8, CNTVCT_EL0
	//NO_APP
	adrp	x20, ($USec)
	str	x8, [x20, :lo12:($USec)]
	adrp	x0, ($Kerns)
	add	x0, x0, :lo12:($Kerns)
	bl	mkStr
	str	x0, [x19, #736]
	adrp	x0, .L$205
	add	x0, x0, :lo12:.L$205
	bl	outString
	ldr	x0, [x20, :lo12:($USec)]
	bl	outWord
	bl	newline
	bl	loadKern
	adrp	x0, ($QuitRst)
	add	x0, x0, :lo12:($QuitRst)
	bl	setjmp
	adrp	x1, .L$206
	add	x1, x1, :lo12:.L$206
	mov	x0, xzr
	mov	x2, x19
	bl	repl2
	adrp	x0, .L$207
	add	x0, x0, :lo12:.L$207
	bl	outString
	ldp	x20, x19, [sp, #32]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #16]             // 16-byte Folded Reload
	ldp	x30, x23, [sp], #48             // 16-byte Folded Reload
	ret
.Lfunc_end819:
	.size	main, .Lfunc_end819-main
	.cfi_endproc
                                        // -- End function
	.type	$Heap,@object                   // @"$Heap"
	.bss
	.globl	$Heap
	.p2align	3
$Heap:
	.xword	0                               // 0x0
	.size	$Heap, 8

	.type	$Limit,@object                  // @"$Limit"
	.globl	$Limit
	.p2align	3
$Limit:
	.xword	0                               // 0x0
	.size	$Limit, 8

	.type	$AV0,@object                    // @"$AV0"
	.globl	$AV0
	.p2align	3
$AV0:
	.xword	0
	.size	$AV0, 8

	.type	$AV,@object                     // @"$AV"
	.globl	$AV
	.p2align	3
$AV:
	.xword	0
	.size	$AV, 8

	.type	$PilHome,@object                // @"$PilHome"
	.globl	$PilHome
	.p2align	3
$PilHome:
	.xword	0
	.size	$PilHome, 8

	.type	$PilLen,@object                 // @"$PilLen"
	.globl	$PilLen
	.p2align	3
$PilLen:
	.xword	0                               // 0x0
	.size	$PilLen, 8

	.type	$UsrHome,@object                // @"$UsrHome"
	.globl	$UsrHome
	.p2align	3
$UsrHome:
	.xword	0
	.size	$UsrHome, 8

	.type	$UsrLen,@object                 // @"$UsrLen"
	.globl	$UsrLen
	.p2align	3
$UsrLen:
	.xword	0                               // 0x0
	.size	$UsrLen, 8

	.type	$Heaps,@object                  // @"$Heaps"
	.globl	$Heaps
	.p2align	3
$Heaps:
	.xword	0                               // 0x0
	.size	$Heaps, 8

	.type	$Avail,@object                  // @"$Avail"
	.globl	$Avail
	.p2align	3
$Avail:
	.xword	0                               // 0x0
	.size	$Avail, 8

	.type	$Extern,@object                 // @"$Extern"
	.globl	$Extern
	.p2align	3
$Extern:
	.xword	0                               // 0x0
	.size	$Extern, 8

	.type	$ExtCnt,@object                 // @"$ExtCnt"
	.data
	.globl	$ExtCnt
	.p2align	3
$ExtCnt:
	.xword	1                               // 0x1
	.size	$ExtCnt, 8

	.type	$ExtSkip,@object                // @"$ExtSkip"
	.bss
	.globl	$ExtSkip
	.p2align	3
$ExtSkip:
	.xword	0                               // 0x0
	.size	$ExtSkip, 8

	.type	$StkSize,@object                // @"$StkSize"
	.data
	.globl	$StkSize
	.p2align	3
$StkSize:
	.xword	65536                           // 0x10000
	.size	$StkSize, 8

	.type	$StkLimit,@object               // @"$StkLimit"
	.bss
	.globl	$StkLimit
	.p2align	3
$StkLimit:
	.xword	0
	.size	$StkLimit, 8

	.type	$Stdin,@object                  // @"$Stdin"
	.globl	$Stdin
	.p2align	3
$Stdin:
	.xword	0
	.size	$Stdin, 8

	.type	$Stdout,@object                 // @"$Stdout"
	.globl	$Stdout
	.p2align	3
$Stdout:
	.xword	0
	.size	$Stdout, 8

	.type	$LinePtr,@object                // @"$LinePtr"
	.globl	$LinePtr
	.p2align	3
$LinePtr:
	.xword	0
	.size	$LinePtr, 8

	.type	$LineBuf,@object                // @"$LineBuf"
	.globl	$LineBuf
	.p2align	3
$LineBuf:
	.xword	0
	.size	$LineBuf, 8

	.type	$LinePrmt,@object               // @"$LinePrmt"
	.globl	$LinePrmt
	.p2align	3
$LinePrmt:
	.xword	0
	.size	$LinePrmt, 8

	.type	$ReplPrmt,@object               // @"$ReplPrmt"
	.globl	$ReplPrmt
	.p2align	3
$ReplPrmt:
	.xword	0
	.size	$ReplPrmt, 8

	.type	$ContPrmt,@object               // @"$ContPrmt"
	.globl	$ContPrmt
	.p2align	3
$ContPrmt:
	.xword	0
	.size	$ContPrmt, 8

	.type	$Ret,@object                    // @"$Ret"
	.globl	$Ret
	.p2align	3
$Ret:
	.xword	0                               // 0x0
	.size	$Ret, 8

	.type	$TtyPid,@object                 // @"$TtyPid"
	.globl	$TtyPid
	.p2align	2
$TtyPid:
	.word	0                               // 0x0
	.size	$TtyPid, 4

	.type	$InFiles,@object                // @"$InFiles"
	.globl	$InFiles
	.p2align	3
$InFiles:
	.xword	0
	.size	$InFiles, 8

	.type	$InFDs,@object                  // @"$InFDs"
	.globl	$InFDs
	.p2align	2
$InFDs:
	.word	0                               // 0x0
	.size	$InFDs, 4

	.type	$OutFiles,@object               // @"$OutFiles"
	.globl	$OutFiles
	.p2align	3
$OutFiles:
	.xword	0
	.size	$OutFiles, 8

	.type	$InFile,@object                 // @"$InFile"
	.globl	$InFile
	.p2align	3
$InFile:
	.xword	0
	.size	$InFile, 8

	.type	$OutFile,@object                // @"$OutFile"
	.globl	$OutFile
	.p2align	3
$OutFile:
	.xword	0
	.size	$OutFile, 8

	.type	$Chr,@object                    // @"$Chr"
	.globl	$Chr
	.p2align	2
$Chr:
	.word	0                               // 0x0
	.size	$Chr, 4

	.type	$Put,@object                    // @"$Put"
	.globl	$Put
	.p2align	3
$Put:
	.xword	0
	.size	$Put, 8

	.type	$Get,@object                    // @"$Get"
	.globl	$Get
	.p2align	3
$Get:
	.xword	0
	.size	$Get, 8

	.type	$PutBin,@object                 // @"$PutBin"
	.globl	$PutBin
	.p2align	3
$PutBin:
	.xword	0
	.size	$PutBin, 8

	.type	$GetBin,@object                 // @"$GetBin"
	.globl	$GetBin
	.p2align	3
$GetBin:
	.xword	0
	.size	$GetBin, 8

	.type	$OutFDs,@object                 // @"$OutFDs"
	.globl	$OutFDs
	.p2align	2
$OutFDs:
	.word	0                               // 0x0
	.size	$OutFDs, 4

	.type	$Poll,@object                   // @"$Poll"
	.globl	$Poll
	.p2align	3
$Poll:
	.xword	0
	.size	$Poll, 8

	.type	$Nfds,@object                   // @"$Nfds"
	.globl	$Nfds
	.p2align	2
$Nfds:
	.word	0                               // 0x0
	.size	$Nfds, 4

	.type	$SeedL,@object                  // @"$SeedL"
	.globl	$SeedL
	.p2align	3
$SeedL:
	.xword	0                               // 0x0
	.size	$SeedL, 8

	.type	$SeedH,@object                  // @"$SeedH"
	.globl	$SeedH
	.p2align	3
$SeedH:
	.xword	0                               // 0x0
	.size	$SeedH, 8

	.type	$USec,@object                   // @"$USec"
	.globl	$USec
	.p2align	3
$USec:
	.xword	0                               // 0x0
	.size	$USec, 8

	.type	$TickU,@object                  // @"$TickU"
	.globl	$TickU
	.p2align	3
$TickU:
	.xword	0                               // 0x0
	.size	$TickU, 8

	.type	$TickS,@object                  // @"$TickS"
	.globl	$TickS
	.p2align	3
$TickS:
	.xword	0                               // 0x0
	.size	$TickS, 8

	.type	$Child,@object                  // @"$Child"
	.globl	$Child
	.p2align	3
$Child:
	.xword	0
	.size	$Child, 8

	.type	$Children,@object               // @"$Children"
	.globl	$Children
	.p2align	2
$Children:
	.word	0                               // 0x0
	.size	$Children, 4

	.type	$Slot,@object                   // @"$Slot"
	.globl	$Slot
	.p2align	2
$Slot:
	.word	0                               // 0x0
	.size	$Slot, 4

	.type	$Spkr,@object                   // @"$Spkr"
	.globl	$Spkr
	.p2align	2
$Spkr:
	.word	0                               // 0x0
	.size	$Spkr, 4

	.type	$Mic,@object                    // @"$Mic"
	.globl	$Mic
	.p2align	2
$Mic:
	.word	0                               // 0x0
	.size	$Mic, 4

	.type	$SpMiPipe,@object               // @"$SpMiPipe"
	.globl	$SpMiPipe
	.p2align	2
$SpMiPipe:
	.zero	8
	.size	$SpMiPipe, 8

	.type	$Talking,@object                // @"$Talking"
	.globl	$Talking
	.p2align	2
$Talking:
	.word	0                               // 0x0
	.size	$Talking, 4

	.type	$Hear,@object                   // @"$Hear"
	.globl	$Hear
	.p2align	2
$Hear:
	.word	0                               // 0x0
	.size	$Hear, 4

	.type	$Tell,@object                   // @"$Tell"
	.globl	$Tell
	.p2align	2
$Tell:
	.word	0                               // 0x0
	.size	$Tell, 4

	.type	$TellBuf,@object                // @"$TellBuf"
	.globl	$TellBuf
	.p2align	3
$TellBuf:
	.xword	0
	.size	$TellBuf, 8

	.type	$Ptr,@object                    // @"$Ptr"
	.globl	$Ptr
	.p2align	3
$Ptr:
	.xword	0
	.size	$Ptr, 8

	.type	$End,@object                    // @"$End"
	.globl	$End
	.p2align	3
$End:
	.xword	0
	.size	$End, 8

	.type	$BufX,@object                   // @"$BufX"
	.globl	$BufX
	.p2align	3
$BufX:
	.xword	0
	.size	$BufX, 8

	.type	$PtrX,@object                   // @"$PtrX"
	.globl	$PtrX
	.p2align	3
$PtrX:
	.xword	0
	.size	$PtrX, 8

	.type	$EndX,@object                   // @"$EndX"
	.globl	$EndX
	.p2align	3
$EndX:
	.xword	0
	.size	$EndX, 8

	.type	$ExtN,@object                   // @"$ExtN"
	.globl	$ExtN
	.p2align	2
$ExtN:
	.word	0                               // 0x0
	.size	$ExtN, 4

	.type	$Extn,@object                   // @"$Extn"
	.globl	$Extn
	.p2align	2
$Extn:
	.word	0                               // 0x0
	.size	$Extn, 4

	.type	$StrP,@object                   // @"$StrP"
	.globl	$StrP
	.p2align	3
$StrP:
	.xword	0
	.size	$StrP, 8

	.type	$GcCount,@object                // @"$GcCount"
	.data
	.globl	$GcCount
	.p2align	3
$GcCount:
	.xword	65536                           // 0x10000
	.size	$GcCount, 8

	.type	$DbFiles,@object                // @"$DbFiles"
	.bss
	.globl	$DbFiles
	.p2align	3
$DbFiles:
	.xword	0
	.size	$DbFiles, 8

	.type	$DbFile,@object                 // @"$DbFile"
	.globl	$DbFile
	.p2align	3
$DbFile:
	.xword	0
	.size	$DbFile, 8

	.type	$DBs,@object                    // @"$DBs"
	.globl	$DBs
	.p2align	2
$DBs:
	.word	0                               // 0x0
	.size	$DBs, 4

	.type	$MaxBlkSize,@object             // @"$MaxBlkSize"
	.globl	$MaxBlkSize
	.p2align	2
$MaxBlkSize:
	.word	0                               // 0x0
	.size	$MaxBlkSize, 4

	.type	$DbBlock,@object                // @"$DbBlock"
	.globl	$DbBlock
	.p2align	3
$DbBlock:
	.xword	0
	.size	$DbBlock, 8

	.type	$BlkIndex,@object               // @"$BlkIndex"
	.globl	$BlkIndex
	.p2align	3
$BlkIndex:
	.xword	0                               // 0x0
	.size	$BlkIndex, 8

	.type	$BlkLink,@object                // @"$BlkLink"
	.globl	$BlkLink
	.p2align	3
$BlkLink:
	.xword	0                               // 0x0
	.size	$BlkLink, 8

	.type	$BlkPtr,@object                 // @"$BlkPtr"
	.globl	$BlkPtr
	.p2align	3
$BlkPtr:
	.xword	0
	.size	$BlkPtr, 8

	.type	$BlkEnd,@object                 // @"$BlkEnd"
	.globl	$BlkEnd
	.p2align	3
$BlkEnd:
	.xword	0
	.size	$BlkEnd, 8

	.type	$DbJnl,@object                  // @"$DbJnl"
	.globl	$DbJnl
	.p2align	3
$DbJnl:
	.xword	0
	.size	$DbJnl, 8

	.type	$DbLog,@object                  // @"$DbLog"
	.globl	$DbLog
	.p2align	3
$DbLog:
	.xword	0
	.size	$DbLog, 8

	.type	$QuitRst,@object                // @"$QuitRst"
	.globl	$QuitRst
	.p2align	2
$QuitRst:
	.byte	0                               // 0x0
	.size	$QuitRst, 1

	.type	$JmpBufSize,@object             // @"$JmpBufSize"
	.data
	.globl	$JmpBufSize
	.p2align	3
$JmpBufSize:
	.xword	176                             // 0xb0
	.size	$JmpBufSize, 8

	.type	$Signal,@object                 // @"$Signal"
	.bss
	.globl	$Signal
	.p2align	4
$Signal:
	.zero	64
	.size	$Signal, 64

	.type	SymTab,@object                  // @SymTab
	.data
	.globl	SymTab
	.p2align	4
SymTab:
	.xword	79992034                        // 0x4c494e2
	.xword	SymTab+8
	.xword	SymTab+8
	.xword	0                               // 0x0
	.xword	2018                            // 0x7e2
	.xword	SymTab+40
	.xword	SymTab+8
	.xword	SymTab+8
	.xword	SymTab+40
	.xword	SymTab+48
	.xword	29900576514                     // 0x6f6369702
	.xword	SymTab+64
	.xword	SymTab+88
	.xword	SymTab+8
	.xword	SymTab+8
	.xword	SymTab+8
	.xword	SymTab+40
	.xword	SymTab+112
	.xword	31785953026                     // 0x766972702
	.xword	SymTab+128
	.xword	69485218                        // 0x42442a2
	.xword	0                               // 0x0
	.xword	28039337682                     // 0x6874656d2
	.xword	__meth+2
	.xword	6971922536210                   // 0x65746f75712
	.xword	_quote+2
	.xword	1346                            // 0x542
	.xword	SymTab+216
	.xword	1250                            // 0x4e2
	.xword	SymTab+8
	.xword	1074                            // 0x432
	.xword	SymTab+8
	.xword	1330                            // 0x532
	.xword	SymTab+8
	.xword	1058                            // 0x422
	.xword	SymTab+8
	.xword	1170                            // 0x492
	.xword	SymTab+8
	.xword	1282                            // 0x502
	.xword	SymTab+8
	.xword	1394                            // 0x572
	.xword	SymTab+8
	.xword	0                               // 0x0
	.xword	SymTab+8
	.xword	7656969679522                   // 0x6f6c6f532a2
	.xword	2                               // 0x2
	.xword	1026                            // 0x402
	.xword	SymTab+8
	.xword	263170                          // 0x40402
	.xword	SymTab+8
	.xword	67372034                        // 0x4040402
	.xword	SymTab+8
	.xword	30980605250                     // 0x736968542
	.xword	SymTab+8
	.xword	524395401951117986              // 0x74706d6f72502a2
	.xword	SymTab+8
	.xword	30166852258                     // 0x70615a2a2
	.xword	SymTab+8
	.xword	31264625314                     // 0x7478452a2
	.xword	SymTab+8
	.xword	29095178914                     // 0x6c63532a2
	.xword	2                               // 0x2
	.xword	2031030286693026                // 0x7373616c432a2
	.xword	SymTab+8
	.xword	29650920098                     // 0x6e75522a2
	.xword	SymTab+8
	.xword	30187750050                     // 0x7075482a2
	.xword	SymTab+8
	.xword	3395013653154                   // 0x316769532a2
	.xword	SymTab+8
	.xword	3463733129890                   // 0x326769532a2
	.xword	SymTab+8
	.xword	1836420215173794                // 0x68636e69572a2
	.xword	SymTab+8
	.xword	869744923460258                 // 0x31707453542a2
	.xword	SymTab+8
	.xword	887337109504674                 // 0x32707453542a2
	.xword	SymTab+8
	.xword	1506                            // 0x5e2
	.xword	SymTab+8
	.xword	30721462946                     // 0x7272452a2
	.xword	SymTab+8
	.xword	27769754274                     // 0x67734d2a2
	.xword	SymTab+8
	.xword	28301415074                     // 0x696e552a2
	.xword	SymTab+8
	.xword	7383702332066                   // 0x6b726f462a2
	.xword	SymTab+8
	.xword	27239129762                     // 0x6579422a2
	.xword	SymTab+8
	.xword	27751891618                     // 0x6762442a2
	.xword	SymTab+8
	.xword	7589850296994                   // 0x6e72654b2a2
	.xword	SymTab+8
	.xword	8276203066018                   // 0x786f424d2a2
	.xword	SymTab+8
	.xword	SymTab+788
	.xword	SymTab+8
	.xword	7310579611546251107             // 0x6574656c706d6f63
	.xword	2                               // 0x2
	.xword	407154                          // 0x63672
	.xword	_gc+2
	.xword	2047388749854306                // 0x74616d726f662
	.xword	_format+2
	.xword	690                             // 0x2b2
	.xword	_add+2
	.xword	722                             // 0x2d2
	.xword	_sub+2
	.xword	104261266                       // 0x636e692
	.xword	_inc+2
	.xword	104224322                       // 0x6365642
	.xword	_dec+2
	.xword	674                             // 0x2a2
	.xword	_mul+2
	.xword	193186                          // 0x2f2a2
	.xword	_mulDiv+2
	.xword	754                             // 0x2f2
	.xword	_div+2
	.xword	594                             // 0x252
	.xword	_rem+2
	.xword	254946                          // 0x3e3e2
	.xword	_shr+2
	.xword	50808514                        // 0x30746c2
	.xword	_lt0+2
	.xword	50747074                        // 0x30656c2
	.xword	_le0+2
	.xword	50746994                        // 0x3065672
	.xword	_ge0+2
	.xword	50808434                        // 0x3074672
	.xword	_gt0+2
	.xword	120989202                       // 0x7362612
	.xword	_abs+2
	.xword	17033500194                     // 0x3f7469622
	.xword	_bitQ+2
	.xword	610                             // 0x262
	.xword	_bitAnd+2
	.xword	1986                            // 0x7c2
	.xword	_bitOr+2
	.xword	509826                          // 0x7c782
	.xword	_bitXor+2
	.xword	31258515250                     // 0x747271732
	.xword	_sqrt+2
	.xword	26949867314                     // 0x646565732
	.xword	_seed+2
	.xword	28038272642                     // 0x687361682
	.xword	_hash+2
	.xword	26959288098                     // 0x646e61722
	.xword	_rand+2
	.xword	27226674914                     // 0x656d616e2
	.xword	_name+2
	.xword	117913314                       // 0x70736e2
	.xword	_nsp+2
	.xword	66520882                        // 0x3f70732
	.xword	_spQ+2
	.xword	17033467650                     // 0x3f7461702
	.xword	_patQ+2
	.xword	17027257954                     // 0x3f6e75662
	.xword	_funQ+2
	.xword	26965595762                     // 0x647465672
	.xword	_getd+2
	.xword	113690130                       // 0x6c6c612
	.xword	_all+2
	.xword	519821567523788594              // 0x736c6f626d79732
	.xword	_symbols+2
	.xword	1943001719301778                // 0x6e7265746e692
	.xword	_intern+2
	.xword	17037719074                     // 0x3f786f622
	.xword	_boxQ+2
	.xword	17031448370                     // 0x3f7274732
	.xword	_strQ+2
	.xword	117839778                       // 0x70617a2
	.xword	_zap+2
	.xword	30181590578                     // 0x706f68632
	.xword	_chop+2
	.xword	28826801922                     // 0x6b6361702
	.xword	_pack+2
	.xword	27235108466                     // 0x65756c672
	.xword	_glue+2
	.xword	31264757570                     // 0x747865742
	.xword	_text+2
	.xword	17017808642                     // 0x3f6572702
	.xword	_preQ+2
	.xword	17014675250                     // 0x3f6275732
	.xword	_subQ+2
	.xword	113645410                       // 0x6c61762
	.xword	_val+2
	.xword	122050354                       // 0x7465732
	.xword	_set+2
	.xword	30455256882                     // 0x717465732
	.xword	_setq+2
	.xword	30166972210                     // 0x706177732
	.xword	_swap+2
	.xword	27758311298                     // 0x676863782
	.xword	_xchg+2
	.xword	452338                          // 0x6e6f2
	.xword	_on+2
	.xword	107374322                       // 0x66666f2
	.xword	_off+2
	.xword	7036850333426                   // 0x66664f6e6f2
	.xword	_onOff+2
	.xword	29916288930                     // 0x6f72657a2
	.xword	_zero+2
	.xword	106358514                       // 0x656e6f2
	.xword	_one+2
	.xword	524325579192161858              // 0x746c75616665642
	.xword	_default+2
	.xword	28038354690                     // 0x687375702
	.xword	_push+2
	.xword	3395292714754                   // 0x31687375702
	.xword	_push1+2
	.xword	1991312315733762                // 0x7131687375702
	.xword	_push1q+2
	.xword	117896962                       // 0x706f702
	.xword	_pop+2
	.xword	176818                          // 0x2b2b2
	.xword	_popq+2
	.xword	122115634                       // 0x7475632
	.xword	_cut+2
	.xword	113661506                       // 0x6c65642
	.xword	_del+2
	.xword	6972180485906                   // 0x65756575712
	.xword	_queue+2
	.xword	29903722082                     // 0x6f6669662
	.xword	_fifo+2
	.xword	126240402                       // 0x7864692
	.xword	_idx+2
	.xword	117921474                       // 0x70756c2
	.xword	_lup+2
	.xword	122115842                       // 0x7475702
	.xword	_put+2
	.xword	122050162                       // 0x7465672
	.xword	_get+2
	.xword	30181631746                     // 0x706f72702
	.xword	_prop+2
	.xword	946                             // 0x3b2
	.xword	_semicol+2
	.xword	238546                          // 0x3a3d2
	.xword	_setCol+2
	.xword	930                             // 0x3a2
	.xword	_col+2
	.xword	238498                          // 0x3a3a2
	.xword	_propCol+2
	.xword	29113145090                     // 0x6c7475702
	.xword	_putl+2
	.xword	29113079410                     // 0x6c7465672
	.xword	_getl+2
	.xword	27229853554                     // 0x657069772
	.xword	_wipe+2
	.xword	26160289490                     // 0x6174656d2
	.xword	_meta+2
	.xword	17036670658                     // 0x3f776f6c2
	.xword	_lowQ+2
	.xword	17029334866                     // 0x3f7070752
	.xword	_uppQ+2
	.xword	26700347074                     // 0x63776f6c2
	.xword	_lowc+2
	.xword	26693011282                     // 0x637070752
	.xword	_uppc+2
	.xword	26957248098                     // 0x646c6f662
	.xword	_fold+2
	.xword	26945672994                     // 0x646165722
	.xword	_read+2
	.xword	127293106                       // 0x79656b2
	.xword	_key+2
	.xword	30703781426                     // 0x726168632
	.xword	_char+2
	.xword	30175311666                     // 0x70696b732
	.xword	_skip+2
	.xword	113702482                       // 0x6c6f652
	.xword	_eol+2
	.xword	107411026                       // 0x666f652
	.xword	_eof+2
	.xword	29376325218                     // 0x6d6f72662
	.xword	_from+2
	.xword	29104707394                     // 0x6c6c69742
	.xword	_till+2
	.xword	27227756226                     // 0x656e696c2
	.xword	_line+2
	.xword	29905794642                     // 0x6f6863652
	.xword	_echo+2
	.xword	29638469378                     // 0x6e6972702
	.xword	_prin+2
	.xword	7451341956866                   // 0x6c6e6972702
	.xword	_prinl+2
	.xword	6967344432946                   // 0x65636170732
	.xword	_space+2
	.xword	8001097770754                   // 0x746e6972702
	.xword	_print+2
	.xword	506434260758374146              // 0x7073746e6972702
	.xword	_printsp+2
	.xword	497303916201322242              // 0x6e6c746e6972702
	.xword	_println+2
	.xword	29906880258                     // 0x6f696c702
	.xword	_plio+2
	.xword	127329810                       // 0x796e612
	.xword	_any+2
	.xword	114792242                       // 0x6d79732
	.xword	_sym+2
	.xword	120014642                       // 0x7274732
	.xword	_str+2
	.xword	17033561682                     // 0x3f7478652
	.xword	_extQ+2
	.xword	8344165615122                   // 0x796c7070612
	.xword	_apply+2
	.xword	30991062786                     // 0x737361702
	.xword	_pass+2
	.xword	30987917010                     // 0x7370616d2
	.xword	_maps+2
	.xword	117839570                       // 0x70616d2
	.xword	_map+2
	.xword	26692949714                     // 0x6370616d2
	.xword	_mapc+2
	.xword	524447902824011474              // 0x7473696c70616d2
	.xword	_maplist+2
	.xword	2012201691256530                // 0x72616370616d2
	.xword	_mapcar+2
	.xword	1942795019753170                // 0x6e6f6370616d2
	.xword	_mapcon+2
	.xword	1941832947078866                // 0x6e616370616d2
	.xword	_mapcan+2
	.xword	2012481128404578                // 0x7265746c69662
	.xword	_filter+2
	.xword	524165879706388050              // 0x746361727478652
	.xword	_extract+2
	.xword	28828915506                     // 0x6b6565732
	.xword	_seek+2
	.xword	26959320674                     // 0x646e69662
	.xword	_find+2
	.xword	28826834690                     // 0x6b6369702
	.xword	_pick+2
	.xword	8344161441378                   // 0x796c6c75662
	.xword	_fully+2
	.xword	122086962                       // 0x746e632
	.xword	_cnt+2
	.xword	114775858                       // 0x6d75732
	.xword	_sum+2
	.xword	28311951058                     // 0x6978616d2
	.xword	_maxi+2
	.xword	28301498066                     // 0x696e696d2
	.xword	_mini+2
	.xword	28038305378                     // 0x687369662
	.xword	_fish+2
	.xword	497186                          // 0x79622
	.xword	_by+2
	.xword	472594                          // 0x73612
	.xword	_as+2
	.xword	122066626                       // 0x74696c2
	.xword	_lit+2
	.xword	29093226066                     // 0x6c6176652
	.xword	_eval+2
	.xword	115824418                       // 0x6e75722
	.xword	_run+2
	.xword	107370050                       // 0x6665642
	.xword	_def+2
	.xword	415298                          // 0x65642
	.xword	_de+2
	.xword	448066                          // 0x6d642
	.xword	_dm+2
	.xword	126285346                       // 0x786f622
	.xword	_box+2
	.xword	125196002                       // 0x77656e2
	.xword	_new+2
	.xword	27229919042                     // 0x657079742
	.xword	_type+2
	.xword	102184594                       // 0x6173692
	.xword	_isa+2
	.xword	1766874505696978                // 0x646f6874656d2
	.xword	_method+2
	.xword	26959304498                     // 0x646e65732
	.xword	_send+2
	.xword	127346498                       // 0x7972742
	.xword	_try+2
	.xword	7861250250546                   // 0x72657075732
	.xword	_super+2
	.xword	6696513013330                   // 0x61727478652
	.xword	_extra+2
	.xword	105309714                       // 0x646e612
	.xword	_and+2
	.xword	468722                          // 0x726f2
	.xword	_or+2
	.xword	26959288034                     // 0x646e616e2
	.xword	_nand+2
	.xword	119994082                       // 0x726f6e2
	.xword	_nor+2
	.xword	119994242                       // 0x726f782
	.xword	_xor+2
	.xword	29107877410                     // 0x6c6f6f622
	.xword	_bool+2
	.xword	122091234                       // 0x746f6e2
	.xword	_not+2
	.xword	113678050                       // 0x6c696e2
	.xword	_nil+2
	.xword	1858                            // 0x742
	.xword	_t+2
	.xword	27765712642                     // 0x676f72702
	.xword	_prog+2
	.xword	3395020072706                   // 0x31676f72702
	.xword	_prog1+2
	.xword	3463739549442                   // 0x32676f72702
	.xword	_prog2+2
	.xword	419474                          // 0x66692
	.xword	_if+2
	.xword	115762834                       // 0x6e66692
	.xword	_ifn+2
	.xword	52848274                        // 0x3266692
	.xword	_if2+2
	.xword	29634234226                     // 0x6e6568772
	.xword	_when+2
	.xword	2031031360612178                // 0x7373656c6e752
	.xword	_unless+2
	.xword	26959345202                     // 0x646e6f632
	.xword	_cond+2
	.xword	26959345378                     // 0x646e6f6e2
	.xword	_nond+2
	.xword	27232966194                     // 0x657361632
	.xword	_case+2
	.xword	30454191666                     // 0x717361632
	.xword	_casq+2
	.xword	6971907852082                   // 0x65746174732
	.xword	_state+2
	.xword	6969768707954                   // 0x656c6968772
	.xword	_while+2
	.xword	7450011297618                   // 0x6c69746e752
	.xword	_until+2
	.xword	476690                          // 0x74612
	.xword	_at+2
	.xword	456258                          // 0x6f642
	.xword	_do+2
	.xword	30181619394                     // 0x706f6f6c2
	.xword	_loop+2
	.xword	119993954                       // 0x726f662
	.xword	_for+2
	.xword	28039354226                     // 0x687469772
	.xword	_with+2
	.xword	26959320610                     // 0x646e69622
	.xword	_bind+2
	.xword	103216802                       // 0x626f6a2
	.xword	_job+2
	.xword	122050242                       // 0x74656c2
	.xword	_let+2
	.xword	17033483970                     // 0x3f74656c2
	.xword	_letQ+2
	.xword	106379090                       // 0x6573752
	.xword	_use+2
	.xword	107435554                       // 0x6675622
	.xword	_buf+2
	.xword	7173522724402                   // 0x68637461632
	.xword	_catch+2
	.xword	8207534032706                   // 0x776f7268742
	.xword	_throw+2
	.xword	546842958862128738              // 0x796c6c616e69662
	.xword	_finally+2
	.xword	456242                          // 0x6f632
	.xword	_co+2
	.xword	6901045041042                   // 0x646c6569792
	.xword	_yield+2
	.xword	530                             // 0x212
	.xword	_break+2
	.xword	1618                            // 0x652
	.xword	_e+2
	.xword	578                             // 0x242
	.xword	_trace+2
	.xword	119936562                       // 0x7261632
	.xword	_car+2
	.xword	119948850                       // 0x7264632
	.xword	_cdr+2
	.xword	30703752754                     // 0x726161632
	.xword	_caar+2
	.xword	30706898482                     // 0x726461632
	.xword	_cadr+2
	.xword	30703765042                     // 0x726164632
	.xword	_cdar+2
	.xword	30706910770                     // 0x726464632
	.xword	_cddr+2
	.xword	7860160697906                   // 0x72616161632
	.xword	_caaar+2
	.xword	7860966004274                   // 0x72646161632
	.xword	_caadr+2
	.xword	7860163843634                   // 0x72616461632
	.xword	_cadar+2
	.xword	7860969150002                   // 0x72646461632
	.xword	_caddr+2
	.xword	7860160710194                   // 0x72616164632
	.xword	_cdaar+2
	.xword	7860966016562                   // 0x72646164632
	.xword	_cdadr+2
	.xword	7860163855922                   // 0x72616464632
	.xword	_cddar+2
	.xword	7860969162290                   // 0x72646464632
	.xword	_cdddr+2
	.xword	2012201138656818                // 0x7261616161632
	.xword	_caaaar+2
	.xword	2012407297087026                // 0x7264616161632
	.xword	_caaadr+2
	.xword	2012201943963186                // 0x7261646161632
	.xword	_caadar+2
	.xword	2012408102393394                // 0x7264646161632
	.xword	_caaddr+2
	.xword	2012201141802546                // 0x7261616461632
	.xword	_cadaar+2
	.xword	2012407300232754                // 0x7264616461632
	.xword	_cadadr+2
	.xword	2012201947108914                // 0x7261646461632
	.xword	_caddar+2
	.xword	2012408105539122                // 0x7264646461632
	.xword	_cadddr+2
	.xword	2012201138669106                // 0x7261616164632
	.xword	_cdaaar+2
	.xword	2012407297099314                // 0x7264616164632
	.xword	_cdaadr+2
	.xword	2012201943975474                // 0x7261646164632
	.xword	_cdadar+2
	.xword	2012408102405682                // 0x7264646164632
	.xword	_cdaddr+2
	.xword	2012201141814834                // 0x7261616464632
	.xword	_cddaar+2
	.xword	2012407300245042                // 0x7264616464632
	.xword	_cddadr+2
	.xword	2012201947121202                // 0x7261646464632
	.xword	_cdddar+2
	.xword	2012408105551410                // 0x7264646464632
	.xword	_cddddr+2
	.xword	109528802                       // 0x68746e2
	.xword	_nth+2
	.xword	115799602                       // 0x6e6f632
	.xword	_con+2
	.xword	30985877042                     // 0x736e6f632
	.xword	_cons+2
	.xword	26690909746                     // 0x636e6f632
	.xword	_conc+2
	.xword	26695079474                     // 0x637269632
	.xword	_circ+2
	.xword	122091298                       // 0x746f722
	.xword	_rot+2
	.xword	31259530946                     // 0x7473696c2
	.xword	_list+2
	.xword	26949867234                     // 0x6465656e2
	.xword	_need+2
	.xword	6968431744802                   // 0x65676e61722
	.xword	_range+2
	.xword	29104756322                     // 0x6c6c75662
	.xword	_full+2
	.xword	27224577746                     // 0x656b616d2
	.xword	_make+2
	.xword	27217237714                     // 0x6564616d2
	.xword	_made+2
	.xword	7587430303282                   // 0x6e696168632
	.xword	_chain+2
	.xword	28838368962                     // 0x6b6e696c2
	.xword	_link+2
	.xword	27224635282                     // 0x656b6f792
	.xword	_yoke+2
	.xword	32598586930                     // 0x79706f632
	.xword	_copy+2
	.xword	126260946                       // 0x78696d2
	.xword	_mix+2
	.xword	1766804976764434                // 0x646e657070612
	.xword	_append+2
	.xword	1784809475429954                // 0x6574656c65642
	.xword	_delete+2
	.xword	30446868034                     // 0x716c65642
	.xword	_delq+2
	.xword	456611883680945954              // 0x6563616c7065722
	.xword	_replace+2
	.xword	2048554834519698                // 0x747265736e692
	.xword	_insert+2
	.xword	1784949599786786                // 0x65766f6d65722
	.xword	_remove+2
	.xword	6967344416514                   // 0x6563616c702
	.xword	_place+2
	.xword	7724887131954                   // 0x70697274732
	.xword	_strip+2
	.xword	7999758731058                   // 0x74696c70732
	.xword	_split+2
	.xword	456894525016004386              // 0x657372657665722
	.xword	_reverse+2
	.xword	30175315554                     // 0x70696c662
	.xword	_flip+2
	.xword	29370033986                     // 0x6d6972742
	.xword	_trim+2
	.xword	30175315506                     // 0x70696c632
	.xword	_clip+2
	.xword	26945672834                     // 0x646165682
	.xword	_head+2
	.xword	29101528898                     // 0x6c6961742
	.xword	_tail+2
	.xword	29365847858                     // 0x6d6574732
	.xword	_stem+2
	.xword	115775074                       // 0x6e69662
	.xword	_fin+2
	.xword	31259498178                     // 0x7473616c2
	.xword	_last+2
	.xword	250834                          // 0x3d3d2
	.xword	_eq+2
	.xword	64214754                        // 0x3d3d6e2
	.xword	_neq+2
	.xword	978                             // 0x3d2
	.xword	_equal+2
	.xword	254914                          // 0x3e3c2
	.xword	_nequal+2
	.xword	197586                          // 0x303d2
	.xword	_eq0+2
	.xword	201682                          // 0x313d2
	.xword	_eq1+2
	.xword	345042                          // 0x543d2
	.xword	_eqT+2
	.xword	198370                          // 0x306e2
	.xword	_neq0+2
	.xword	345826                          // 0x546e2
	.xword	_neqT+2
	.xword	962                             // 0x3c2
	.xword	_lt+2
	.xword	250818                          // 0x3d3c2
	.xword	_le+2
	.xword	994                             // 0x3e2
	.xword	_gt+2
	.xword	250850                          // 0x3d3e2
	.xword	_ge+2
	.xword	126228178                       // 0x78616d2
	.xword	_max+2
	.xword	115775186                       // 0x6e696d2
	.xword	_min+2
	.xword	29376333330                     // 0x6d6f74612
	.xword	_atom+2
	.xword	30712141570                     // 0x726961702
	.xword	_pair+2
	.xword	4356022113842                   // 0x3f637269632
	.xword	_circQ+2
	.xword	17033541314                     // 0x3f74736c2
	.xword	_lstQ+2
	.xword	17026209506                     // 0x3f6d756e2
	.xword	_numQ+2
	.xword	17026225970                     // 0x3f6d79732
	.xword	_symQ+2
	.xword	17019881058                     // 0x3f676c662
	.xword	_flgQ+2
	.xword	2012476297598674                // 0x7265626d656d2
	.xword	_member+2
	.xword	30447916754                     // 0x716d656d2
	.xword	_memq+2
	.xword	30439560914                     // 0x71656d6d2
	.xword	_mmeq+2
	.xword	31242737458                     // 0x746365732
	.xword	_sect+2
	.xword	27487802946                     // 0x666669642
	.xword	_diff+2
	.xword	8273554499218                   // 0x7865646e692
	.xword	_index+2
	.xword	2047665225754354                // 0x74657366666f2
	.xword	_offset+2
	.xword	7863927252738                   // 0x726f6972702
	.xword	_prior+2
	.xword	1837586572531394                // 0x6874676e656c2
	.xword	_length+2
	.xword	27240339250                     // 0x657a69732
	.xword	_size+2
	.xword	7929973937698                   // 0x73657479622
	.xword	_bytes+2
	.xword	6833145591314                   // 0x636f7373612
	.xword	_assoc+2
	.xword	1749285271377698                // 0x636f737361722
	.xword	_rassoc+2
	.xword	30450071058                     // 0x716f73612
	.xword	_asoq+2
	.xword	28838336290                     // 0x6b6e61722
	.xword	_rank+2
	.xword	7173522724562                   // 0x686374616d2
	.xword	_match+2
	.xword	29104707170                     // 0x6c6c69662
	.xword	_fill+2
	.xword	6972459394818                   // 0x65766f72702
	.xword	_prove+2
	.xword	254674                          // 0x3e2d2
	.xword	_arrow+2
	.xword	8342547654482                   // 0x7966696e752
	.xword	_unify+2
	.xword	7728105203314                   // 0x70756f72672
	.xword	_group+2
	.xword	31258507058                     // 0x74726f732
	.xword	_sort+2
	.xword	7521126762002                   // 0x6d72616c612
	.xword	_alarm+2
	.xword	524166155115898626              // 0x746365746f72702
	.xword	_protect+2
	.xword	30166898306                     // 0x706165682
	.xword	_heap+2
	.xword	7379661309746                   // 0x6b636174732
	.xword	_stack+2
	.xword	27234113058                     // 0x657479622
	.xword	_byte+2
	.xword	3449784059650                   // 0x32337274702
	.xword	_ptr32+2
	.xword	3588028319490                   // 0x34367274702
	.xword	_ptr64+2
	.xword	26681489234                     // 0x636573752
	.xword	_usec+2
	.xword	2047528336312114                // 0x7463757274732
	.xword	_struct+2
	.xword	30185789122                     // 0x7073696c2
	.xword	_lisp+2
	.xword	119948818                       // 0x7264612
	.xword	_adr+2
	.xword	29647853234                     // 0x6e72656b2
	.xword	_kern+2
	.xword	110520178                       // 0x6966772
	.xword	_wfi+2
	.xword	106325874                       // 0x6566772
	.xword	_wfe+2
	.xword	27490915906                     // 0x666961642
	.xword	_daif+2
	.xword	510919288690239026              // 0x7172662d746e632
	.xword	"_cnt-frq"+2
	.xword	SymTab+5716
	.xword	"_cntv-ctl"+2
	.xword	7814980300306673251             // 0x6c74632d76746e63
	.xword	2                               // 0x2
	.xword	SymTab+5748
	.xword	"_cntv-cval"+2
	.xword	7022909715842887267             // 0x6176632d76746e63
	.xword	1730                            // 0x6c2
	.xword	SymTab+5780
	.xword	"_cntv-tval"+2
	.xword	7022928407540559459             // 0x6176742d76746e63
	.xword	1730                            // 0x6c2
	.xword	2047528606819890                // 0x746376746e632
	.xword	_cntvct+2
	.xword	SymTab+5828
	.xword	"_cntp-ctl"+2
	.xword	7814980300206009955             // 0x6c74632d70746e63
	.xword	2                               // 0x2
	.xword	SymTab+5860
	.xword	"_cntp-cval"+2
	.xword	7022909715742223971             // 0x6176632d70746e63
	.xword	1730                            // 0x6c2
	.xword	SymTab+5892
	.xword	"_cntp-tval"+2
	.xword	7022928407439896163             // 0x6176742d70746e63
	.xword	1730                            // 0x6c2
	.xword	2047526996207154                // 0x746370746e632
	.xword	_cntpct+2
	.xword	497355938196772706              // 0x6e6f69737265762
	.xword	_version+2
	.size	SymTab, 5936

	.type	$Version,@object                // @"$Version"
	.globl	$Version
	.p2align	3
$Version:
	.xword	338                             // 0x152
	.xword	18                              // 0x12
	.xword	402                             // 0x192
	.size	$Version, 24

	.type	env,@object                     // @env
	.globl	env
	.p2align	3
env:
	.xword	0                               // 0x0
	.xword	0                               // 0x0
	.xword	0                               // 0x0
	.xword	0                               // 0x0
	.xword	0                               // 0x0
	.xword	0                               // 0x0
	.xword	0                               // 0x0
	.xword	0                               // 0x0
	.xword	0                               // 0x0
	.xword	0                               // 0x0
	.xword	0                               // 0x0
	.xword	SymTab+96
	.xword	SymTab+8
	.xword	0                               // 0x0
	.xword	0                               // 0x0
	.xword	0                               // 0x0
	.xword	0                               // 0x0
	.xword	0                               // 0x0
	.xword	0                               // 0x0
	.size	env, 152

	.type	gcData,@object                  // @gcData
	.globl	gcData
	.p2align	3
gcData:
	.xword	SymTab+8
	.xword	SymTab+8
	.xword	SymTab+8
	.xword	SymTab+8
	.xword	SymTab+8
	.xword	SymTab+8
	.xword	SymTab+8
	.xword	SymTab+8
	.xword	SymTab+8
	.xword	SymTab+8
	.xword	SymTab+8
	.xword	SymTab+8
	.xword	SymTab+8
	.xword	SymTab+8
	.xword	SymTab+8
	.xword	SymTab+8
	.xword	SymTab+8
	.xword	SymTab+8
	.xword	SymTab+8
	.xword	SymTab+8
	.xword	SymTab+8
	.xword	SymTab+8
	.xword	SymTab+8
	.xword	SymTab+8
	.xword	SymTab+8
	.xword	SymTab+8
	.xword	SymTab+8
	.xword	SymTab+8
	.xword	SymTab+8
	.xword	SymTab+8
	.xword	SymTab+8
	.xword	SymTab+8
	.xword	SymTab+8
	.xword	SymTab+8
	.xword	SymTab+8
	.xword	SymTab+8
	.xword	SymTab+8
	.xword	SymTab+8
	.xword	SymTab+8
	.xword	SymTab+8
	.xword	SymTab+8
	.xword	SymTab+8
	.xword	SymTab+8
	.xword	SymTab+8
	.xword	SymTab+8
	.xword	SymTab+8
	.xword	SymTab+8
	.xword	SymTab+8
	.xword	SymTab+8
	.xword	SymTab+8
	.xword	SymTab+8
	.xword	SymTab+8
	.size	gcData, 416

	.type	.L$130,@object                  // @"$130"
	.section	.rodata,"a",@progbits
	.p2align	2
.L$130:
	.asciz	"gc:free="
	.size	.L$130, 9

	.type	.L$110,@object                  // @"$110"
	.p2align	2
.L$110:
	.asciz	"Stack overflow"
	.size	.L$110, 15

	.type	.L$104,@object                  // @"$104"
	.p2align	2
.L$104:
	.asciz	"!? "
	.size	.L$104, 4

	.type	.L$105,@object                  // @"$105"
	.p2align	2
.L$105:
	.asciz	" -- "
	.size	.L$105, 5

	.type	$Jam,@object                    // @"$Jam"
	.bss
	.globl	$Jam
$Jam:
	.byte	0                               // 0x0
	.size	$Jam, 1

	.type	.L$106,@object                  // @"$106"
	.section	.rodata,"a",@progbits
	.p2align	2
.L$106:
	.asciz	"? "
	.size	.L$106, 3

	.type	.L$107,@object                  // @"$107"
	.p2align	2
.L$107:
	.asciz	"err 1\n"
	.size	.L$107, 7

	.type	.L$108,@object                  // @"$108"
	.p2align	2
.L$108:
	.asciz	"err 2\n"
	.size	.L$108, 7

	.type	.L$109,@object                  // @"$109"
	.p2align	2
.L$109:
	.asciz	"err 3\n"
	.size	.L$109, 7

	.type	.L$158,@object                  // @"$158"
	.p2align	2
.L$158:
	.asciz	"\n-> "
	.size	.L$158, 5

	.type	.L$155,@object                  // @"$155"
	.p2align	4
.L$155:
	.asciz	"Super parentheses mismatch"
	.size	.L$155, 27

	.type	$Cell,@object                   // @"$Cell"
	.data
	.globl	$Cell
	.p2align	3
$Cell:
	.xword	SymTab+8
	.xword	SymTab+8
	.size	$Cell, 16

	.type	$Delim,@object                  // @"$Delim"
	.section	.rodata,"a",@progbits
	.globl	$Delim
	.p2align	2
$Delim:
	.asciz	" \t\n\r\"'(),[]`{}~"
	.size	$Delim, 16

	.type	.L$125,@object                  // @"$125"
	.p2align	4
.L$125:
	.asciz	"Bad symbol namespace"
	.size	.L$125, 21

	.type	.L$138,@object                  // @"$138"
	.p2align	2
.L$138:
	.asciz	"Bad input '%s'"
	.size	.L$138, 15

	.type	.L$154,@object                  // @"$154"
	.p2align	2
.L$154:
	.asciz	"Bad dotted pair"
	.size	.L$154, 16

	.type	.L$137,@object                  // @"$137"
	.p2align	2
.L$137:
	.asciz	"EOF Overrun"
	.size	.L$137, 12

	.type	.L$156,@object                  // @"$156"
	.p2align	2
.L$156:
	.asciz	"priv~"
	.size	.L$156, 6

	.type	.L$157,@object                  // @"$157"
	.p2align	2
.L$157:
	.asciz	" . "
	.size	.L$157, 4

	.type	.L$134,@object                  // @"$134"
	.p2align	2
.L$134:
	.asciz	"Close error: %s"
	.size	.L$134, 16

	.type	.L$54,@object                   // @"$54"
	.p2align	2
.L$54:
	.asciz	"strErrno      "
	.size	.L$54, 15

	.type	.L$85,@object                   // @"$85"
	.p2align	2
.L$85:
	.asciz	"gErrno"
	.size	.L$85, 7

	.type	.L$45,@object                   // @"$45"
	.p2align	2
.L$45:
	.asciz	"waitpid      "
	.size	.L$45, 14

	.type	.L$42,@object                   // @"$42"
	.p2align	2
.L$42:
	.asciz	"close        "
	.size	.L$42, 14

	.type	.L$145,@object                  // @"$145"
	.p2align	2
.L$145:
	.asciz	"flush"
	.size	.L$145, 6

	.type	.L$41,@object                   // @"$41"
	.p2align	2
.L$41:
	.asciz	"dup2         "
	.size	.L$41, 14

	.type	.L$99,@object                   // @"$99"
	.p2align	2
.L$99:
	.asciz	"unLock "
	.size	.L$99, 8

	.type	.L$148,@object                  // @"$148"
	.p2align	2
.L$148:
	.asciz	"No current fd"
	.size	.L$148, 14

	.type	.L$116,@object                  // @"$116"
	.p2align	2
.L$116:
	.asciz	"Name expected"
	.size	.L$116, 14

	.type	.L$132,@object                  // @"$132"
	.p2align	2
.L$132:
	.asciz	"Undefined"
	.size	.L$132, 10

	.type	.L$122,@object                  // @"$122"
	.p2align	2
.L$122:
	.asciz	"Protected"
	.size	.L$122, 10

	.type	.L$120,@object                  // @"$120"
	.p2align	4
.L$120:
	.asciz	"Variable expected"
	.size	.L$120, 18

	.type	.L$103,@object                  // @"$103"
	.p2align	2
.L$103:
	.asciz	"sighandler\n"
	.size	.L$103, 12

	.type	.L$112,@object                  // @"$112"
	.p2align	4
.L$112:
	.asciz	"Small number expected"
	.size	.L$112, 22

	.type	cbFuns,@object                  // @cbFuns
	.data
	.globl	cbFuns
	.p2align	3
cbFuns:
	.xword	_cb1
	.xword	_cb2
	.xword	_cb3
	.xword	_cb4
	.xword	_cb5
	.xword	_cb6
	.xword	_cb7
	.xword	_cb8
	.xword	_cb9
	.xword	_cb10
	.xword	_cb11
	.xword	_cb12
	.xword	_cb13
	.xword	_cb14
	.xword	_cb15
	.xword	_cb16
	.xword	_cb17
	.xword	_cb18
	.xword	_cb19
	.xword	_cb20
	.xword	_cb21
	.xword	_cb22
	.xword	_cb23
	.xword	_cb24
	.size	cbFuns, 192

	.type	.L$197,@object                  // @"$197"
	.section	.rodata,"a",@progbits
	.p2align	4
.L$197:
	.asciz	"Too many callbacks"
	.size	.L$197, 19

	.type	.L$113,@object                  // @"$113"
	.p2align	2
.L$113:
	.asciz	"Number expected"
	.size	.L$113, 16

	.type	$Pnl,@object                    // @"$Pnl"
	.bss
	.globl	$Pnl
	.p2align	3
$Pnl:
	.xword	0                               // 0x0
	.size	$Pnl, 8

	.type	$Penv,@object                   // @"$Penv"
	.globl	$Penv
	.p2align	3
$Penv:
	.xword	0                               // 0x0
	.size	$Penv, 8

	.type	.L$175,@object                  // @"$175"
	.section	.rodata,"a",@progbits
	.p2align	2
.L$175:
	.asciz	"Bad ID"
	.size	.L$175, 7

	.type	.L$164,@object                  // @"$164"
	.p2align	2
.L$164:
	.asciz	"DB read: %s"
	.size	.L$164, 12

	.type	.L$19,@object                   // @"$19"
	.p2align	2
.L$19:
	.asciz	"pread        "
	.size	.L$19, 14

	.type	.L$123,@object                  // @"$123"
	.p2align	2
.L$123:
	.asciz	"File lock: %s"
	.size	.L$123, 14

	.type	.L$97,@object                   // @"$97"
	.p2align	2
.L$97:
	.asciz	"rdLock "
	.size	.L$97, 8

	.type	.L$163,@object                  // @"$163"
	.p2align	2
.L$163:
	.asciz	"Bad DB file"
	.size	.L$163, 12

	.type	.L$194,@object                  // @"$194"
	.p2align	2
.L$194:
	.asciz	"Not making"
	.size	.L$194, 11

	.type	.L$111,@object                  // @"$111"
	.p2align	2
.L$111:
	.asciz	"Bad argument"
	.size	.L$111, 13

	.type	.L$118,@object                  // @"$118"
	.p2align	4
.L$118:
	.asciz	"Cons pair expected"
	.size	.L$118, 19

	.type	.L$119,@object                  // @"$119"
	.p2align	2
.L$119:
	.asciz	"List expected"
	.size	.L$119, 14

	.type	.L$192,@object                  // @"$192"
	.p2align	2
.L$192:
	.asciz	" :"
	.size	.L$192, 3

	.type	.L$193,@object                  // @"$193"
	.p2align	2
.L$193:
	.asciz	" = "
	.size	.L$193, 4

	.type	.L$191,@object                  // @"$191"
	.p2align	2
.L$191:
	.asciz	"No Break"
	.size	.L$191, 9

	.type	.L$190,@object                  // @"$190"
	.p2align	2
.L$190:
	.asciz	"! "
	.size	.L$190, 3

	.type	$Repl,@object                   // @"$Repl"
	.bss
	.globl	$Repl
$Repl:
	.byte	0                               // 0x0
	.size	$Repl, 1

	.type	Sig,@object                     // @Sig
	.globl	Sig
	.p2align	2
Sig:
	.word	0                               // 0x0
	.size	Sig, 4

	.type	.L$159,@object                  // @"$159"
	.section	.rodata,"a",@progbits
	.p2align	2
.L$159:
	.asciz	"Y...\n"
	.size	.L$159, 6

	.type	.L$160,@object                  // @"$160"
	.p2align	2
.L$160:
	.asciz	"   "
	.size	.L$160, 4

	.type	.L$161,@object                  // @"$161"
	.p2align	2
.L$161:
	.asciz	"-> "
	.size	.L$161, 4

	.type	.L$80,@object                   // @"$80"
	.p2align	2
.L$80:
	.asciz	"iSignal      "
	.size	.L$80, 14

	.type	.L$15,@object                   // @"$15"
	.p2align	2
.L$15:
	.asciz	"isatty       "
	.size	.L$15, 14

	.type	.L$187,@object                  // @"$187"
	.p2align	2
.L$187:
	.asciz	"No coroutines"
	.size	.L$187, 14

	.type	.L$188,@object                  // @"$188"
	.p2align	4
.L$188:
	.asciz	"Coroutine not found"
	.size	.L$188, 20

	.type	.L$189,@object                  // @"$189"
	.p2align	2
.L$189:
	.asciz	"Tag expected"
	.size	.L$189, 13

	.type	.L$185,@object                  // @"$185"
	.p2align	4
.L$185:
	.asciz	"Reentrant coroutine"
	.size	.L$185, 20

	.type	.L$186,@object                  // @"$186"
	.p2align	4
.L$186:
	.asciz	"Can't stop main routine"
	.size	.L$186, 24

	.type	.L$184,@object                  // @"$184"
	.p2align	2
.L$184:
	.asciz	"Tag not found"
	.size	.L$184, 14

	.type	.L$183,@object                  // @"$183"
	.p2align	2
.L$183:
	.asciz	"Bad extra"
	.size	.L$183, 10

	.type	.L$182,@object                  // @"$182"
	.p2align	2
.L$182:
	.asciz	"Bad super"
	.size	.L$182, 10

	.type	.L$181,@object                  // @"$181"
	.p2align	2
.L$181:
	.asciz	"Bad message"
	.size	.L$181, 12

	.type	.L$114,@object                  // @"$114"
	.p2align	2
.L$114:
	.asciz	"Symbol expected"
	.size	.L$114, 16

	.type	.L$29,@object                   // @"$29"
	.p2align	2
.L$29:
	.asciz	"fileno       "
	.size	.L$29, 14

	.type	.L$26,@object                   // @"$26"
	.p2align	2
.L$26:
	.asciz	"fflush       "
	.size	.L$26, 14

	.type	.L$170,@object                  // @"$170"
	.p2align	2
.L$170:
	.asciz	"DB Oversize"
	.size	.L$170, 12

	.type	.L$168,@object                  // @"$168"
	.p2align	4
.L$168:
	.asciz	"Journal write: %s"
	.size	.L$168, 18

	.type	.L$22,@object                   // @"$22"
	.p2align	2
.L$22:
	.asciz	"fwrite       "
	.size	.L$22, 14

	.type	.L$23,@object                   // @"$23"
	.p2align	2
.L$23:
	.asciz	"putc_unlocked"
	.size	.L$23, 14

	.type	.L$165,@object                  // @"$165"
	.p2align	2
.L$165:
	.asciz	"DB write: %s"
	.size	.L$165, 13

	.type	.L$20,@object                   // @"$20"
	.p2align	2
.L$20:
	.asciz	"pwrite       "
	.size	.L$20, 14

	.type	.L$98,@object                   // @"$98"
	.p2align	2
.L$98:
	.asciz	"wrLock "
	.size	.L$98, 8

	.type	.L$179,@object                  // @"$179"
	.p2align	2
.L$179:
	.asciz	"# "
	.size	.L$179, 3

	.type	.L$180,@object                  // @"$180"
	.p2align	2
.L$180:
	.asciz	" redefined\n"
	.size	.L$180, 12

	.type	.L$136,@object                  // @"$136"
	.p2align	2
.L$136:
	.asciz	"Size overflow"
	.size	.L$136, 14

	.type	.L$32,@object                   // @"$32"
	.p2align	2
.L$32:
	.asciz	"memcmp       "
	.size	.L$32, 14

	.type	.L$117,@object                  // @"$117"
	.p2align	2
.L$117:
	.asciz	"Atom expected"
	.size	.L$117, 14

	.type	.L$121,@object                  // @"$121"
	.p2align	2
.L$121:
	.asciz	"Item not found"
	.size	.L$121, 15

	.type	.L$131,@object                  // @"$131"
	.p2align	2
.L$131:
	.asciz	"Div/0"
	.size	.L$131, 6

	.type	$TBuf,@object                   // @"$TBuf"
	.data
	.globl	$TBuf
	.p2align	2
$TBuf:
	.ascii	"\005T"
	.size	$TBuf, 2

	.type	$Month,@object                  // @"$Month"
	.globl	$Month
	.p2align	2
$Month:
	.ascii	"\037\037\034\037\036\037\036\037\037\036\037\036\037"
	.size	$Month, 13

	.type	$PRepl,@object                  // @"$PRepl"
	.bss
	.globl	$PRepl
$PRepl:
	.byte	0                               // 0x0
	.size	$PRepl, 1

	.type	$InBye,@object                  // @"$InBye"
	.globl	$InBye
$InBye:
	.byte	0                               // 0x0
	.size	$InBye, 1

	.type	$Sync,@object                   // @"$Sync"
	.globl	$Sync
$Sync:
	.byte	0                               // 0x0
	.size	$Sync, 1

	.type	$Empty,@object                  // @"$Empty"
	.section	.rodata,"a",@progbits
	.globl	$Empty
	.p2align	2
$Empty:
	.zero	1
	.size	$Empty, 1

	.type	$Kerns,@object                  // @"$Kerns"
	.globl	$Kerns
	.p2align	4
$Kerns:
	.incbin "kern.l"
	.size	$Kerns, 27

	.type	SigDfl,@object                  // @SigDfl
	.bss
	.globl	SigDfl
	.p2align	3
SigDfl:
	.xword	0
	.size	SigDfl, 8

	.type	SigIgn,@object                  // @SigIgn
	.globl	SigIgn
	.p2align	3
SigIgn:
	.xword	0
	.size	SigIgn, 8

	.type	.L$1,@object                    // @"$1"
	.section	.rodata,"a",@progbits
	.p2align	2
.L$1:
	.asciz	"malloc       "
	.size	.L$1, 14

	.type	.L$2,@object                    // @"$2"
	.p2align	2
.L$2:
	.asciz	"realloc      "
	.size	.L$2, 14

	.type	.L$3,@object                    // @"$3"
	.p2align	2
.L$3:
	.asciz	"free         "
	.size	.L$3, 14

	.type	.L$4,@object                    // @"$4"
	.p2align	2
.L$4:
	.asciz	"fork         "
	.size	.L$4, 14

	.type	.L$5,@object                    // @"$5"
	.p2align	2
.L$5:
	.asciz	"getenv       "
	.size	.L$5, 14

	.type	.L$6,@object                    // @"$6"
	.p2align	2
.L$6:
	.asciz	"setenv       "
	.size	.L$6, 14

	.type	.L$7,@object                    // @"$7"
	.p2align	2
.L$7:
	.asciz	"getcwd       "
	.size	.L$7, 14

	.type	.L$8,@object                    // @"$8"
	.p2align	2
.L$8:
	.asciz	"chdir        "
	.size	.L$8, 14

	.type	.L$9,@object                    // @"$9"
	.p2align	2
.L$9:
	.asciz	"getpid       "
	.size	.L$9, 14

	.type	.L$10,@object                   // @"$10"
	.p2align	2
.L$10:
	.asciz	"getpgrp      "
	.size	.L$10, 14

	.type	.L$11,@object                   // @"$11"
	.p2align	2
.L$11:
	.asciz	"setsid       "
	.size	.L$11, 14

	.type	.L$12,@object                   // @"$12"
	.p2align	2
.L$12:
	.asciz	"alarm        "
	.size	.L$12, 14

	.type	.L$13,@object                   // @"$13"
	.p2align	2
.L$13:
	.asciz	"setpgid      "
	.size	.L$13, 14

	.type	.L$14,@object                   // @"$14"
	.p2align	2
.L$14:
	.asciz	"execvp       "
	.size	.L$14, 14

	.type	.L$16,@object                   // @"$16"
	.p2align	2
.L$16:
	.asciz	"tcgetattr    "
	.size	.L$16, 14

	.type	.L$17,@object                   // @"$17"
	.p2align	2
.L$17:
	.asciz	"read         "
	.size	.L$17, 14

	.type	.L$18,@object                   // @"$18"
	.p2align	2
.L$18:
	.asciz	"write        "
	.size	.L$18, 14

	.type	.L$21,@object                   // @"$21"
	.p2align	2
.L$21:
	.asciz	"fread        "
	.size	.L$21, 14

	.type	.L$24,@object                   // @"$24"
	.p2align	2
.L$24:
	.asciz	"getc_unlocked"
	.size	.L$24, 14

	.type	.L$25,@object                   // @"$25"
	.p2align	2
.L$25:
	.asciz	"fopen        "
	.size	.L$25, 14

	.type	.L$27,@object                   // @"$27"
	.p2align	2
.L$27:
	.asciz	"feof         "
	.size	.L$27, 14

	.type	.L$28,@object                   // @"$28"
	.p2align	2
.L$28:
	.asciz	"fclose       "
	.size	.L$28, 14

	.type	.L$30,@object                   // @"$30"
	.p2align	2
.L$30:
	.asciz	"fsync        "
	.size	.L$30, 14

	.type	.L$31,@object                   // @"$31"
	.p2align	2
.L$31:
	.asciz	"pipe         "
	.size	.L$31, 14

	.type	.L$33,@object                   // @"$33"
	.p2align	2
.L$33:
	.asciz	"strlen       "
	.size	.L$33, 14

	.type	.L$34,@object                   // @"$34"
	.p2align	2
.L$34:
	.asciz	"strcpy       "
	.size	.L$34, 14

	.type	.L$35,@object                   // @"$35"
	.p2align	2
.L$35:
	.asciz	"strdup       "
	.size	.L$35, 14

	.type	.L$36,@object                   // @"$36"
	.p2align	2
.L$36:
	.asciz	"strcmp       "
	.size	.L$36, 14

	.type	.L$37,@object                   // @"$37"
	.p2align	2
.L$37:
	.asciz	"strrchr      "
	.size	.L$37, 14

	.type	.L$38,@object                   // @"$38"
	.p2align	2
.L$38:
	.asciz	"dlsym        "
	.size	.L$38, 14

	.type	.L$39,@object                   // @"$39"
	.p2align	2
.L$39:
	.asciz	"dlerror      "
	.size	.L$39, 14

	.type	.L$40,@object                   // @"$40"
	.p2align	2
.L$40:
	.asciz	"dup          "
	.size	.L$40, 14

	.type	.L$43,@object                   // @"$43"
	.p2align	2
.L$43:
	.asciz	"signal       "
	.size	.L$43, 14

	.type	.L$44,@object                   // @"$44"
	.p2align	2
.L$44:
	.asciz	"tcsetpgrp    "
	.size	.L$44, 14

	.type	.L$46,@object                   // @"$46"
	.p2align	2
.L$46:
	.asciz	"kill         "
	.size	.L$46, 14

	.type	.L$47,@object                   // @"$47"
	.p2align	2
.L$47:
	.asciz	"exit         "
	.size	.L$47, 14

	.type	.L$48,@object                   // @"$48"
	.p2align	2
.L$48:
	.asciz	"readline     "
	.size	.L$48, 14

	.type	.L$49,@object                   // @"$49"
	.p2align	2
.L$49:
	.asciz	"add_history  "
	.size	.L$49, 14

	.type	.L$50,@object                   // @"$50"
	.p2align	2
.L$50:
	.asciz	"history_list "
	.size	.L$50, 14

	.type	.L$51,@object                   // @"$51"
	.p2align	2
.L$51:
	.asciz	"clear_history"
	.size	.L$51, 14

	.type	.L$52,@object                   // @"$52"
	.p2align	2
.L$52:
	.asciz	"stderrMsg     "
	.size	.L$52, 15

	.type	.L$53,@object                   // @"$53"
	.p2align	2
.L$53:
	.asciz	"gPrintf       "
	.size	.L$53, 15

	.type	.L$55,@object                   // @"$55"
	.p2align	2
.L$55:
	.asciz	"openRd        "
	.size	.L$55, 15

	.type	.L$56,@object                   // @"$56"
	.p2align	2
.L$56:
	.asciz	"openWr        "
	.size	.L$56, 15

	.type	.L$57,@object                   // @"$57"
	.p2align	2
.L$57:
	.asciz	"openRdWr      "
	.size	.L$57, 15

	.type	.L$58,@object                   // @"$58"
	.p2align	2
.L$58:
	.asciz	"openRdWrExcl  "
	.size	.L$58, 15

	.type	.L$59,@object                   // @"$59"
	.p2align	2
.L$59:
	.asciz	"openRdWrCreate"
	.size	.L$59, 15

	.type	.L$60,@object                   // @"$60"
	.p2align	2
.L$60:
	.asciz	"openRdWrAppend"
	.size	.L$60, 15

	.type	.L$61,@object                   // @"$61"
	.p2align	2
.L$61:
	.asciz	"openWrAppend  "
	.size	.L$61, 15

	.type	.L$62,@object                   // @"$62"
	.p2align	2
.L$62:
	.asciz	"fseekOfs      "
	.size	.L$62, 15

	.type	.L$63,@object                   // @"$63"
	.p2align	2
.L$63:
	.asciz	"fseek0        "
	.size	.L$63, 15

	.type	.L$64,@object                   // @"$64"
	.p2align	2
.L$64:
	.asciz	"seek0         "
	.size	.L$64, 15

	.type	.L$65,@object                   // @"$65"
	.p2align	2
.L$65:
	.asciz	"truncate0     "
	.size	.L$65, 15

	.type	.L$66,@object                   // @"$66"
	.p2align	2
.L$66:
	.asciz	"socketPair    "
	.size	.L$66, 15

	.type	.L$67,@object                   // @"$67"
	.p2align	2
.L$67:
	.asciz	"fcntlCloExec  "
	.size	.L$67, 15

	.type	.L$68,@object                   // @"$68"
	.p2align	2
.L$68:
	.asciz	"fcntlSetFl    "
	.size	.L$68, 15

	.type	.L$69,@object                   // @"$69"
	.p2align	2
.L$69:
	.asciz	"nonBlocking   "
	.size	.L$69, 15

	.type	.L$70,@object                   // @"$70"
	.p2align	2
.L$70:
	.asciz	"fcntlSetOwn   "
	.size	.L$70, 15

	.type	.L$71,@object                   // @"$71"
	.p2align	2
.L$71:
	.asciz	"getDir        "
	.size	.L$71, 15

	.type	.L$72,@object                   // @"$72"
	.p2align	2
.L$72:
	.asciz	"initReadline"
	.size	.L$72, 13

	.type	.L$73,@object                   // @"$73"
	.p2align	2
.L$73:
	.asciz	"rlHide      "
	.size	.L$73, 13

	.type	.L$74,@object                   // @"$74"
	.p2align	2
.L$74:
	.asciz	"rlShow      "
	.size	.L$74, 13

	.type	.L$75,@object                   // @"$75"
	.p2align	2
.L$75:
	.asciz	"rlSigBeg    "
	.size	.L$75, 13

	.type	.L$76,@object                   // @"$76"
	.p2align	2
.L$76:
	.asciz	"rlSigEnd    "
	.size	.L$76, 13

	.type	.L$77,@object                   // @"$77"
	.p2align	2
.L$77:
	.asciz	"currentLine "
	.size	.L$77, 13

	.type	.L$78,@object                   // @"$78"
	.p2align	2
.L$78:
	.asciz	"gSignal      "
	.size	.L$78, 14

	.type	.L$79,@object                   // @"$79"
	.p2align	2
.L$79:
	.asciz	"sigUnblock   "
	.size	.L$79, 14

	.type	.L$81,@object                   // @"$81"
	.p2align	2
.L$81:
	.asciz	"sigChld      "
	.size	.L$81, 14

	.type	.L$82,@object                   // @"$82"
	.p2align	2
.L$82:
	.asciz	"waitWuntraced"
	.size	.L$82, 14

	.type	.L$83,@object                   // @"$83"
	.p2align	2
.L$83:
	.asciz	"wifStopped   "
	.size	.L$83, 14

	.type	.L$84,@object                   // @"$84"
	.p2align	2
.L$84:
	.asciz	"nErrno"
	.size	.L$84, 7

	.type	.L$86,@object                   // @"$86"
	.p2align	2
.L$86:
	.asciz	"setRaw   "
	.size	.L$86, 10

	.type	.L$87,@object                   // @"$87"
	.p2align	2
.L$87:
	.asciz	"setCooked"
	.size	.L$87, 10

	.type	.L$88,@object                   // @"$88"
	.p2align	2
.L$88:
	.asciz	"getUsec "
	.size	.L$88, 9

	.type	.L$89,@object                   // @"$89"
	.p2align	2
.L$89:
	.asciz	"getMsec "
	.size	.L$89, 9

	.type	.L$90,@object                   // @"$90"
	.p2align	2
.L$90:
	.asciz	"fileInfo"
	.size	.L$90, 9

	.type	.L$91,@object                   // @"$91"
	.p2align	2
.L$91:
	.asciz	"pollIn  "
	.size	.L$91, 9

	.type	.L$92,@object                   // @"$92"
	.p2align	2
.L$92:
	.asciz	"pollOut "
	.size	.L$92, 9

	.type	.L$93,@object                   // @"$93"
	.p2align	2
.L$93:
	.asciz	"pollIgn "
	.size	.L$93, 9

	.type	.L$94,@object                   // @"$94"
	.p2align	2
.L$94:
	.asciz	"gPoll   "
	.size	.L$94, 9

	.type	.L$95,@object                   // @"$95"
	.p2align	2
.L$95:
	.asciz	"readyIn "
	.size	.L$95, 9

	.type	.L$96,@object                   // @"$96"
	.p2align	2
.L$96:
	.asciz	"readyOut"
	.size	.L$96, 9

	.type	.L$100,@object                  // @"$100"
	.p2align	2
.L$100:
	.asciz	"getLock"
	.size	.L$100, 8

	.type	.L$115,@object                  // @"$115"
	.p2align	4
.L$115:
	.asciz	"External symbol expected"
	.size	.L$115, 25

	.type	.L$124,@object                  // @"$124"
	.p2align	2
.L$124:
	.asciz	"Can't fork"
	.size	.L$124, 11

	.type	.L$126,@object                  // @"$126"
	.p2align	2
.L$126:
	.asciz	"tty\n"
	.size	.L$126, 5

	.type	.L$127,@object                  // @"$127"
	.p2align	2
.L$127:
	.asciz	"raw\n"
	.size	.L$127, 5

	.type	.L$128,@object                  // @"$128"
	.p2align	2
.L$128:
	.asciz	"sigio\n"
	.size	.L$128, 7

	.type	.L$129,@object                  // @"$129"
	.p2align	2
.L$129:
	.asciz	"kids\n"
	.size	.L$129, 6

	.type	.L$133,@object                  // @"$133"
	.p2align	2
.L$133:
	.asciz	"Open error: %s"
	.size	.L$133, 15

	.type	.L$135,@object                  // @"$135"
	.p2align	2
.L$135:
	.asciz	"Pipe error: %s"
	.size	.L$135, 15

	.type	.L$139,@object                  // @"$139"
	.p2align	2
.L$139:
	.asciz	"Bad FD"
	.size	.L$139, 7

	.type	.L$140,@object                  // @"$140"
	.p2align	4
.L$140:
	.asciz	"Select error: %s"
	.size	.L$140, 17

	.type	.L$141,@object                  // @"$141"
	.p2align	2
.L$141:
	.asciz	"SETFD %s"
	.size	.L$141, 9

	.type	.L$142,@object                  // @"$142"
	.p2align	2
.L$142:
	.asciz	"bytes write: %s"
	.size	.L$142, 16

	.type	.L$143,@object                  // @"$143"
	.p2align	2
.L$143:
	.asciz	"clsChild"
	.size	.L$143, 9

	.type	.L$144,@object                  // @"$144"
	.p2align	2
.L$144:
	.asciz	"wrChild"
	.size	.L$144, 8

	.type	.L$146,@object                  // @"$146"
	.p2align	2
.L$146:
	.asciz	"flushAll"
	.size	.L$146, 9

	.type	.L$147,@object                  // @"$147"
	.p2align	2
.L$147:
	.asciz	"Tell PIPE_BUF"
	.size	.L$147, 14

	.type	.L$149,@object                  // @"$149"
	.p2align	2
.L$149:
	.asciz	"waitFd\n"
	.size	.L$149, 8

	.type	.L$150,@object                  // @"$150"
	.p2align	2
.L$150:
	.asciz	"sync\n"
	.size	.L$150, 6

	.type	.L$151,@object                  // @"$151"
	.p2align	2
.L$151:
	.asciz	"hear\n"
	.size	.L$151, 6

	.type	.L$152,@object                  // @"$152"
	.p2align	2
.L$152:
	.asciz	"tell\n"
	.size	.L$152, 6

	.type	.L$153,@object                  // @"$153"
	.p2align	2
.L$153:
	.asciz	"poll\n"
	.size	.L$153, 6

	.type	.L$162,@object                  // @"$162"
	.p2align	2
.L$162:
	.asciz	"> "
	.size	.L$162, 3

	.type	.L$166,@object                  // @"$166"
	.p2align	2
.L$166:
	.asciz	"Bad Journal"
	.size	.L$166, 12

	.type	.L$167,@object                  // @"$167"
	.p2align	4
.L$167:
	.asciz	"DB fsync error: %s"
	.size	.L$167, 19

	.type	.L$169,@object                  // @"$169"
	.p2align	2
.L$169:
	.asciz	"Log write: %s"
	.size	.L$169, 14

	.type	.L$173,@object                  // @"$173"
	.p2align	4
.L$173:
	.asciz	"Log truncate error: %s"
	.size	.L$173, 23

	.type	.L$176,@object                  // @"$176"
	.p2align	4
.L$176:
	.asciz	"Circular free list"
	.size	.L$176, 19

	.type	.L$177,@object                  // @"$177"
	.p2align	2
.L$177:
	.asciz	"Bad chain"
	.size	.L$177, 10

	.type	.L$178,@object                  // @"$178"
	.p2align	2
.L$178:
	.asciz	"Bad count"
	.size	.L$178, 10

	.type	.L$195,@object                  // @"$195"
	.p2align	2
.L$195:
	.asciz	"%s"
	.size	.L$195, 3

	.type	.L$196,@object                  // @"$196"
	.p2align	2
.L$196:
	.asciz	"Bad result spec"
	.size	.L$196, 16

	.type	.L$198,@object                  // @"$198"
	.p2align	2
.L$198:
	.asciz	"$MBox="
	.size	.L$198, 7

	.type	.L$199,@object                  // @"$199"
	.p2align	2
.L$199:
	.asciz	"$QuitRst="
	.size	.L$199, 10

	.type	.L$200,@object                  // @"$200"
	.p2align	2
.L$200:
	.asciz	"$Heap="
	.size	.L$200, 7

	.type	.L$201,@object                  // @"$201"
	.p2align	2
.L$201:
	.asciz	"$Limit="
	.size	.L$201, 8

	.type	.L$202,@object                  // @"$202"
	.p2align	4
.L$202:
	.asciz	"Call heapAlloc...\n"
	.size	.L$202, 19

	.type	.L$203,@object                  // @"$203"
	.p2align	4
.L$203:
	.asciz	"Init internal symbols...\n"
	.size	.L$203, 26

	.type	.L$204,@object                  // @"$204"
	.p2align	4
.L$204:
	.asciz	"Init internal globals...\n"
	.size	.L$204, 26

	.type	.L$205,@object                  // @"$205"
	.p2align	2
.L$205:
	.asciz	"$USec="
	.size	.L$205, 7

	.type	.L$206,@object                  // @"$206"
	.p2align	2
.L$206:
	.asciz	": "
	.size	.L$206, 3

	.type	.L$207,@object                  // @"$207"
	.p2align	2
.L$207:
	.asciz	"pil21 bye"
	.size	.L$207, 10

	.section	".note.GNU-stack","",@progbits
