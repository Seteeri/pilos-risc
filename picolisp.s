	.text
	.file	"llvm-link"
	.globl	__meth                          // -- Begin function __meth
	.p2align	4
	.type	__meth,@function
__meth:                                 // @__meth
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-80]!           // 16-byte Folded Spill
	str	x25, [sp, #16]                  // 8-byte Folded Spill
	stp	x24, x23, [sp, #32]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #48]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #64]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 80
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -64
	.cfi_offset w30, -72
	.cfi_offset w29, -80
	mov	x19, x1
	mov	x20, x0
	ldp	w22, w8, [x0, #8]
	bfi	x22, x8, #32, #32
	ldp	w21, w8, [x22]
	bfi	x21, x8, #32, #32
	tst	x21, #0x6
	b.ne	.LBB0_4
// %bb.1:                               // %"$3"
	tbz	w21, #3, .LBB0_3
// %bb.2:                               // %"$6"
	ldp	w21, w8, [x21]
	bfi	x21, x8, #32, #32
	b	.LBB0_4
.LBB0_3:                                // %"$5"
	mov	x0, x21
	bl	evList
	mov	x21, x0
.LBB0_4:                                // %"$2"
	adrp	x23, env
	ldr	x8, [x23, :lo12:env]
	mov	x9, sp
	sub	x24, x9, #16                    // =16
	mov	sp, x24
	lsr	x10, x21, #32
	stp	w21, w10, [x9, #-16]
	lsr	x10, x8, #32
	stp	w8, w10, [x9, #-8]
	eor	w8, w21, #0x8
	tst	x8, #0xe
	str	x24, [x23, :lo12:env]
	b.ne	.LBB0_9
// %bb.5:                               // %"$8"
	ldurb	w8, [x21, #-8]
	tbz	w8, #3, .LBB0_7
// %bb.6:                               // %"$9"
	mov	x0, x20
	mov	x1, x21
	bl	dbFetch
.LBB0_7:                                // %"$10"
	adrp	x25, ($Ret)
	str	xzr, [x25, :lo12:($Ret)]
	mov	x0, x21
	mov	x1, x19
	bl	method
	mov	x3, x0
	cbz	x0, .LBB0_10
// %bb.8:                               // %"$11"
	ldr	x1, [x25, :lo12:($Ret)]
	ldp	w4, w8, [x22, #8]
	bfi	x4, x8, #32, #32
	mov	x0, x21
	mov	x2, x19
	bl	evMethod
	ldp	w9, w8, [x24, #8]
	bfi	x9, x8, #32, #32
	str	x9, [x23, :lo12:env]
	mov	sp, x29
	ldp	x20, x19, [sp, #64]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #48]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #32]             // 16-byte Folded Reload
	ldr	x25, [sp, #16]                  // 8-byte Folded Reload
	ldp	x29, x30, [sp], #80             // 16-byte Folded Reload
	ret
.LBB0_9:                                // %"$7"
	mov	x0, x20
	mov	x1, x21
	bl	symErr
.LBB0_10:                               // %"$12"
	adrp	x2, .L$72
	add	x2, x2, :lo12:.L$72
	mov	x0, x20
	mov	x1, x19
	bl	err
.Lfunc_end0:
	.size	__meth, .Lfunc_end0-__meth
	.cfi_endproc
                                        // -- End function
	.globl	_quote                          // -- Begin function _quote
	.p2align	4
	.type	_quote,@function
_quote:                                 // @_quote
	.cfi_startproc
// %bb.0:                               // %"$1"
	ldp	w0, w8, [x0, #8]
	bfi	x0, x8, #32, #32
	ret
.Lfunc_end1:
	.size	_quote, .Lfunc_end1-_quote
	.cfi_endproc
                                        // -- End function
	.globl	_gc                             // -- Begin function _gc
	.p2align	4
	.type	_gc,@function
_gc:                                    // @_gc
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-48]!                // 8-byte Folded Spill
	stp	x22, x21, [sp, #16]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #32]             // 16-byte Folded Spill
	.cfi_def_cfa_offset 48
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w30, -48
	mov	x20, x0
	ldp	w21, w8, [x0, #8]
	bfi	x21, x8, #32, #32
	ldp	w19, w8, [x21]
	bfi	x19, x8, #32, #32
	tst	x19, #0x6
	b.ne	.LBB2_4
// %bb.1:                               // %"$3"
	tbz	w19, #3, .LBB2_3
// %bb.2:                               // %"$6"
	ldp	w19, w8, [x19]
	bfi	x19, x8, #32, #32
	b	.LBB2_4
.LBB2_3:                                // %"$5"
	mov	x0, x19
	bl	evList
	mov	x19, x0
.LBB2_4:                                // %"$2"
	adrp	x8, SymTab+8
	add	x8, x8, :lo12:SymTab+8
	str	x8, [x8, #368]
	str	x8, [x8, #384]
	cmp	x19, x8
	b.ne	.LBB2_6
// %bb.5:                               // %"$7"
	bl	gc
	b	.LBB2_10
.LBB2_6:                                // %"$8"
	mov	x0, x20
	mov	x1, x19
	bl	xCnt
	lsl	x8, x0, #16
	adrp	x22, ($GcCount)
	str	x8, [x22, :lo12:($GcCount)]
	bl	gc
	ldp	w1, w8, [x21, #8]
	bfi	x1, x8, #32, #32
	tst	x1, #0xf
	b.eq	.LBB2_8
// %bb.7:
	mov	w8, #65536
	b	.LBB2_9
.LBB2_8:                                // %"$11"
	mov	x0, x20
	bl	evCnt
	lsl	x8, x0, #16
.LBB2_9:                                // %"$12"
	str	x8, [x22, :lo12:($GcCount)]
.LBB2_10:                               // %"$9"
	mov	x0, x19
	ldp	x20, x19, [sp, #32]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #16]             // 16-byte Folded Reload
	ldr	x30, [sp], #48                  // 8-byte Folded Reload
	ret
.Lfunc_end2:
	.size	_gc, .Lfunc_end2-_gc
	.cfi_endproc
                                        // -- End function
	.globl	_format                         // -- Begin function _format
	.p2align	4
	.type	_format,@function
_format:                                // @_format
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-80]!           // 16-byte Folded Spill
	stp	x26, x25, [sp, #16]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #32]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #48]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #64]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 80
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w30, -72
	.cfi_offset w29, -80
	mov	x21, x0
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w19, w8, [x9]
	bfi	x19, x8, #32, #32
	ldp	w20, w8, [x9, #8]
	bfi	x20, x8, #32, #32
	tst	x19, #0x6
	b.ne	.LBB3_4
// %bb.1:                               // %"$3"
	tbz	w19, #3, .LBB3_3
// %bb.2:                               // %"$6"
	ldp	w19, w8, [x19]
	bfi	x19, x8, #32, #32
	b	.LBB3_4
.LBB3_3:                                // %"$5"
	mov	x0, x19
	bl	evList
	mov	x19, x0
.LBB3_4:                                // %"$2"
	adrp	x23, env
	ldr	x8, [x23, :lo12:env]
	mov	x9, sp
	sub	x24, x9, #16                    // =16
	mov	sp, x24
	lsr	x10, x19, #32
	stp	w19, w10, [x9, #-16]
	lsr	x10, x8, #32
	stp	w8, w10, [x9, #-8]
	str	x24, [x23, :lo12:env]
	ldp	w1, w8, [x20]
	bfi	x1, x8, #32, #32
	ldp	w22, w25, [x20, #8]
	tst	x1, #0x6
	b.ne	.LBB3_8
// %bb.5:                               // %"$8"
	tbz	w1, #3, .LBB3_7
// %bb.6:                               // %"$11"
	ldp	w1, w8, [x1]
	bfi	x1, x8, #32, #32
	b	.LBB3_8
.LBB3_7:                                // %"$10"
	mov	x0, x1
	bl	evList
	mov	x1, x0
.LBB3_8:                                // %"$7"
	bfi	x22, x25, #32, #32
	adrp	x8, SymTab+8
	add	x8, x8, :lo12:SymTab+8
	cmp	x1, x8
	b.ne	.LBB3_11
// %bb.9:
	mov	x20, xzr
	tst	x22, #0xf
	b.eq	.LBB3_12
.LBB3_10:
	mov	w21, wzr
	mov	w22, #46
	tst	x19, #0x6
	b.ne	.LBB3_19
	b	.LBB3_26
.LBB3_11:                               // %"$13"
	mov	x0, x21
	bl	xCnt
	mov	x20, x0
	tst	x22, #0xf
	b.ne	.LBB3_10
.LBB3_12:                               // %"$15"
	ldp	w1, w8, [x22]
	bfi	x1, x8, #32, #32
	ldp	w25, w26, [x22, #8]
	tst	x1, #0x6
	b.ne	.LBB3_16
// %bb.13:                              // %"$18"
	tbz	w1, #3, .LBB3_15
// %bb.14:                              // %"$21"
	ldp	w1, w8, [x1]
	bfi	x1, x8, #32, #32
	b	.LBB3_16
.LBB3_15:                               // %"$20"
	mov	x0, x1
	bl	evList
	mov	x1, x0
.LBB3_16:                               // %"$17"
	eor	w8, w1, #0x8
	tst	x8, #0xe
	b.ne	.LBB3_34
// %bb.17:                              // %"$23"
	bfi	x25, x26, #32, #32
	mov	x0, x1
	bl	firstByte
	mov	w22, w0
	tst	x25, #0xf
	b.eq	.LBB3_20
// %bb.18:
	mov	w21, wzr
	tst	x19, #0x6
	b.eq	.LBB3_26
.LBB3_19:                               // %"$35"
	mov	x8, sp
	sub	x4, x8, #32                     // =32
	mov	sp, x4
	mov	w9, #4
	stp	w9, wzr, [x8, #-32]
	mov	w9, #2
	mov	x25, x4
	str	w9, [x25, #16]!
	str	wzr, [x25, #4]
	ldr	x9, [x23, :lo12:env]
	lsr	x10, x9, #32
	stp	w9, w10, [x8, #-8]
	str	x25, [x23, :lo12:env]
	mov	x0, x19
	mov	x1, x20
	mov	w2, w22
	mov	w3, w21
	bl	fmtNum
	ldp	w0, w8, [x25]
	bfi	x0, x8, #32, #32
	bl	consStr
	b	.LBB3_33
.LBB3_20:                               // %"$24"
	ldp	w1, w8, [x25]
	bfi	x1, x8, #32, #32
	tst	x1, #0x6
	b.ne	.LBB3_24
// %bb.21:                              // %"$27"
	tbz	w1, #3, .LBB3_23
// %bb.22:                              // %"$30"
	ldp	w1, w8, [x1]
	bfi	x1, x8, #32, #32
	b	.LBB3_24
.LBB3_23:                               // %"$29"
	mov	x0, x1
	bl	evList
	mov	x1, x0
.LBB3_24:                               // %"$26"
	eor	w8, w1, #0x8
	tst	x8, #0xe
	b.ne	.LBB3_34
// %bb.25:                              // %"$32"
	mov	x0, x1
	bl	firstByte
	mov	w21, w0
	tst	x19, #0x6
	b.ne	.LBB3_19
.LBB3_26:                               // %"$34"
	tbz	w19, #3, .LBB3_31
// %bb.27:                              // %"$37"
	ldp	w0, w8, [x19, #-8]
	bfi	x0, x8, #32, #32
	tbnz	w0, #3, .LBB3_32
// %bb.28:                              // %"$41"
	tst	x0, #0x6
	b.ne	.LBB3_30
.LBB3_29:                               // %"$42"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w0, w8, [x0, #8]
	bfi	x0, x8, #32, #32
	tst	x0, #0x6
	b.eq	.LBB3_29
.LBB3_30:                               // %"$43"
	mov	x1, x20
	mov	w2, w22
	mov	w3, w21
	bl	symToNum
	adrp	x8, SymTab+8
	add	x8, x8, :lo12:SymTab+8
	cmp	x0, #0                          // =0
	csel	x0, x8, x0, eq
	b	.LBB3_33
.LBB3_31:                               // %"$36"
	mov	x8, sp
	sub	x1, x8, #32                     // =32
	mov	sp, x1
	mov	w9, #4
	stp	w9, wzr, [x8, #-32]
	mov	w9, #2
	mov	x25, x1
	str	w9, [x25, #16]!
	str	wzr, [x25, #4]
	ldr	x9, [x23, :lo12:env]
	lsr	x10, x9, #32
	stp	w9, w10, [x8, #-8]
	str	x25, [x23, :lo12:env]
	mov	x0, x19
	bl	pack
	ldp	w0, w8, [x25]
	bfi	x0, x8, #32, #32
	mov	x1, x20
	mov	w2, w22
	mov	w3, w21
	bl	symToNum
	cbnz	x0, .LBB3_33
.LBB3_32:                               // %"$47"
	adrp	x0, SymTab+8
	add	x0, x0, :lo12:SymTab+8
.LBB3_33:                               // %"$33"
	ldp	w9, w8, [x24, #8]
	bfi	x9, x8, #32, #32
	str	x9, [x23, :lo12:env]
	mov	sp, x29
	ldp	x20, x19, [sp, #64]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #48]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #32]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #80             // 16-byte Folded Reload
	ret
.LBB3_34:                               // %"$22"
	mov	x0, x21
	bl	symErr
.Lfunc_end3:
	.size	_format, .Lfunc_end3-_format
	.cfi_endproc
                                        // -- End function
	.globl	_add                            // -- Begin function _add
	.p2align	4
	.type	_add,@function
_add:                                   // @_add
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-64]!           // 16-byte Folded Spill
	stp	x24, x23, [sp, #16]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #32]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #48]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 64
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w30, -56
	.cfi_offset w29, -64
	mov	x19, x0
	ldp	w20, w8, [x0, #8]
	bfi	x20, x8, #32, #32
	ldp	w1, w8, [x20]
	bfi	x1, x8, #32, #32
	tst	x1, #0x6
	b.ne	.LBB4_4
// %bb.1:                               // %"$3"
	tbz	w1, #3, .LBB4_3
// %bb.2:                               // %"$6"
	ldp	w1, w8, [x1]
	bfi	x1, x8, #32, #32
	b	.LBB4_4
.LBB4_3:                                // %"$5"
	mov	x0, x1
	bl	evList
	mov	x1, x0
.LBB4_4:                                // %"$2"
	adrp	x23, SymTab+8
	add	x23, x23, :lo12:SymTab+8
	cmp	x1, x23
	b.eq	.LBB4_17
// %bb.5:                               // %"$8"
	adrp	x21, env
	ldr	x8, [x21, :lo12:env]
	mov	x9, sp
	sub	x22, x9, #16                    // =16
	mov	sp, x22
	mov	w10, #10
	lsr	x11, x8, #32
	stp	w10, wzr, [x9, #-16]
	stp	w8, w11, [x9, #-8]
	tst	x1, #0x6
	str	x22, [x21, :lo12:env]
	b.eq	.LBB4_18
// %bb.6:                               // %"$11"
	mov	x9, sp
	sub	x24, x9, #16                    // =16
	mov	sp, x24
	lsr	x10, x1, #32
	adrp	x8, env
	add	x8, x8, :lo12:env
	stp	w1, w10, [x9, #-16]
	ldr	x10, [x8]
	lsr	x11, x10, #32
	stp	w10, w11, [x9, #-8]
	mov	x0, x24
.LBB4_7:                                // %"$12"
                                        // =>This Inner Loop Header: Depth=1
	lsr	x9, x0, #32
	stp	w0, w9, [x8]
	ldp	w20, w8, [x20, #8]
	bfi	x20, x8, #32, #32
	tst	x20, #0xf
	b.ne	.LBB4_15
// %bb.8:                               // %"$13"
                                        //   in Loop: Header=BB4_7 Depth=1
	ldp	w1, w8, [x20]
	bfi	x1, x8, #32, #32
	tst	x1, #0x6
	b.ne	.LBB4_11
// %bb.9:                               // %"$17"
                                        //   in Loop: Header=BB4_7 Depth=1
	tbz	w1, #3, .LBB4_14
// %bb.10:                              // %"$20"
                                        //   in Loop: Header=BB4_7 Depth=1
	ldp	w1, w8, [x1]
	bfi	x1, x8, #32, #32
.LBB4_11:                               // %"$16"
                                        //   in Loop: Header=BB4_7 Depth=1
	cmp	x1, x23
	b.eq	.LBB4_16
.LBB4_12:                               // %"$21"
                                        //   in Loop: Header=BB4_7 Depth=1
	tst	x1, #0x6
	b.eq	.LBB4_18
// %bb.13:                              // %"$24"
                                        //   in Loop: Header=BB4_7 Depth=1
	lsr	x8, x1, #32
	stp	w1, w8, [x22]
	ldp	w0, w8, [x24]
	bfi	x0, x8, #32, #32
	bl	adds
	mov	x8, x24
	b	.LBB4_7
.LBB4_14:                               // %"$19"
                                        //   in Loop: Header=BB4_7 Depth=1
	mov	x0, x1
	bl	evList
	mov	x1, x0
	cmp	x1, x23
	b.ne	.LBB4_12
	b	.LBB4_16
.LBB4_15:                               // %"$15"
	ldp	w1, w8, [x24]
	bfi	x1, x8, #32, #32
.LBB4_16:                               // %"$14"
	ldp	w9, w8, [x22, #8]
	bfi	x9, x8, #32, #32
	str	x9, [x21, :lo12:env]
.LBB4_17:                               // %"$9"
	mov	x0, x1
	mov	sp, x29
	ldp	x20, x19, [sp, #48]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #32]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #64             // 16-byte Folded Reload
	ret
.LBB4_18:                               // %"$10"
	mov	x0, x19
	bl	numErr
.Lfunc_end4:
	.size	_add, .Lfunc_end4-_add
	.cfi_endproc
                                        // -- End function
	.globl	_sub                            // -- Begin function _sub
	.p2align	4
	.type	_sub,@function
_sub:                                   // @_sub
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-80]!           // 16-byte Folded Spill
	str	x25, [sp, #16]                  // 8-byte Folded Spill
	stp	x24, x23, [sp, #32]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #48]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #64]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 80
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -64
	.cfi_offset w30, -72
	.cfi_offset w29, -80
	mov	x19, x0
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w1, w8, [x9]
	bfi	x1, x8, #32, #32
	ldp	w20, w21, [x9, #8]
	tst	x1, #0x6
	b.ne	.LBB5_4
// %bb.1:                               // %"$3"
	tbz	w1, #3, .LBB5_3
// %bb.2:                               // %"$6"
	ldp	w1, w8, [x1]
	bfi	x1, x8, #32, #32
	b	.LBB5_4
.LBB5_3:                                // %"$5"
	mov	x0, x1
	bl	evList
	mov	x1, x0
.LBB5_4:                                // %"$2"
	adrp	x22, SymTab+8
	add	x22, x22, :lo12:SymTab+8
	cmp	x1, x22
	b.eq	.LBB5_18
// %bb.5:                               // %"$8"
	tst	x1, #0x6
	b.eq	.LBB5_19
// %bb.6:                               // %"$11"
	bfi	x20, x21, #32, #32
	tst	x20, #0xf
	b.eq	.LBB5_8
// %bb.7:                               // %"$12"
	eor	x8, x1, #0x8
	cmp	x1, #2                          // =2
	csel	x1, x1, x8, eq
	b	.LBB5_18
.LBB5_8:                                // %"$13"
	adrp	x21, env
	ldr	x8, [x21, :lo12:env]
	mov	x9, sp
	sub	x23, x9, #16                    // =16
	mov	sp, x23
	mov	w10, #10
	lsr	x11, x8, #32
	stp	w10, wzr, [x9, #-16]
	stp	w8, w11, [x9, #-8]
	str	x23, [x21, :lo12:env]
	mov	x8, sp
	sub	x24, x8, #16                    // =16
	mov	sp, x24
	lsr	x9, x1, #32
	stp	w1, w9, [x8, #-16]
	ldr	x9, [x21, :lo12:env]
	lsr	x10, x9, #32
	stp	w9, w10, [x8, #-8]
	str	x24, [x21, :lo12:env]
.LBB5_9:                                // %"$18"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w1, w8, [x20]
	bfi	x1, x8, #32, #32
	ldp	w20, w25, [x20, #8]
	tst	x1, #0x6
	b.ne	.LBB5_13
// %bb.10:                              // %"$20"
                                        //   in Loop: Header=BB5_9 Depth=1
	tbz	w1, #3, .LBB5_12
// %bb.11:                              // %"$23"
                                        //   in Loop: Header=BB5_9 Depth=1
	ldp	w1, w8, [x1]
	bfi	x1, x8, #32, #32
	b	.LBB5_13
.LBB5_12:                               // %"$22"
                                        //   in Loop: Header=BB5_9 Depth=1
	mov	x0, x1
	bl	evList
	mov	x1, x0
.LBB5_13:                               // %"$19"
                                        //   in Loop: Header=BB5_9 Depth=1
	cmp	x1, x22
	b.eq	.LBB5_17
// %bb.14:                              // %"$24"
                                        //   in Loop: Header=BB5_9 Depth=1
	tst	x1, #0x6
	b.eq	.LBB5_19
// %bb.15:                              // %"$28"
                                        //   in Loop: Header=BB5_9 Depth=1
	bfi	x20, x25, #32, #32
	lsr	x8, x1, #32
	stp	w1, w8, [x23]
	ldp	w0, w8, [x24]
	bfi	x0, x8, #32, #32
	bl	subs
	lsr	x8, x0, #32
	stp	w0, w8, [x24]
	tst	x20, #0xf
	b.eq	.LBB5_9
// %bb.16:                              // %"$30"
	ldp	w1, w8, [x24]
	bfi	x1, x8, #32, #32
.LBB5_17:                               // %"$25"
	ldp	w9, w8, [x23, #8]
	bfi	x9, x8, #32, #32
	str	x9, [x21, :lo12:env]
.LBB5_18:                               // %"$9"
	mov	x0, x1
	mov	sp, x29
	ldp	x20, x19, [sp, #64]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #48]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #32]             // 16-byte Folded Reload
	ldr	x25, [sp, #16]                  // 8-byte Folded Reload
	ldp	x29, x30, [sp], #80             // 16-byte Folded Reload
	ret
.LBB5_19:                               // %"$10"
	mov	x0, x19
	bl	numErr
.Lfunc_end5:
	.size	_sub, .Lfunc_end5-_sub
	.cfi_endproc
                                        // -- End function
	.globl	_inc                            // -- Begin function _inc
	.p2align	4
	.type	_inc,@function
_inc:                                   // @_inc
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-64]!           // 16-byte Folded Spill
	stp	x24, x23, [sp, #16]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #32]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #48]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 64
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w30, -56
	.cfi_offset w29, -64
	mov	x20, x0
	ldp	w24, w8, [x0, #8]
	bfi	x24, x8, #32, #32
	ldp	w19, w8, [x24]
	bfi	x19, x8, #32, #32
	tst	x19, #0x6
	b.ne	.LBB6_4
// %bb.1:                               // %"$4"
	tbz	w19, #3, .LBB6_3
// %bb.2:                               // %"$7"
	ldp	w19, w8, [x19]
	bfi	x19, x8, #32, #32
	b	.LBB6_4
.LBB6_3:                                // %"$6"
	mov	x0, x19
	bl	evList
	mov	x19, x0
.LBB6_4:                                // %"$3"
	adrp	x23, SymTab+8
	add	x23, x23, :lo12:SymTab+8
	cmp	x19, x23
	b.eq	.LBB6_28
// %bb.5:                               // %"$8"
	tst	x19, #0x6
	b.eq	.LBB6_7
// %bb.6:                               // %"$11"
	mov	x0, x19
	bl	incs
	mov	x19, x0
	b	.LBB6_28
.LBB6_7:                                // %"$10"
	add	x8, x23, #208                   // =208
	cmp	x8, x19
	ccmp	x19, x23, #0, hs
	b.hs	.LBB6_29
// %bb.8:                               // %"$15"
	adrp	x21, env
	ldr	x8, [x21, :lo12:env]
	mov	x9, sp
	sub	x22, x9, #16                    // =16
	mov	sp, x22
	lsr	x10, x19, #32
	lsr	x11, x8, #32
	stp	w19, w10, [x9, #-16]
	stp	w8, w11, [x9, #-8]
	str	x22, [x21, :lo12:env]
	tbz	w19, #3, .LBB6_10
// %bb.9:                               // %"$17"
	ldurb	w8, [x19, #-8]
	ubfx	w8, w8, #3, #1
	cbnz	w8, .LBB6_11
	b	.LBB6_12
.LBB6_10:
	mov	w8, wzr
	cbz	w8, .LBB6_12
.LBB6_11:                               // %"$18"
	mov	x0, x20
	mov	x1, x19
	bl	dbTouch
.LBB6_12:                               // %"$19"
	ldp	w8, w9, [x24, #8]
	bfi	x8, x9, #32, #32
	tst	x8, #0xf
	b.eq	.LBB6_16
// %bb.13:                              // %"$20"
	ldp	w8, w9, [x19]
	bfi	x8, x9, #32, #32
	cmp	x8, x23
	b.eq	.LBB6_27
// %bb.14:                              // %"$24"
	tst	x8, #0x6
	b.eq	.LBB6_30
// %bb.15:                              // %"$27"
	mov	x0, x8
	bl	incs
	b	.LBB6_26
.LBB6_16:                               // %"$21"
	ldp	w1, w9, [x8]
	bfi	x1, x9, #32, #32
	tst	x1, #0x6
	b.ne	.LBB6_20
// %bb.17:                              // %"$29"
	tbz	w1, #3, .LBB6_19
// %bb.18:                              // %"$32"
	ldp	w1, w8, [x1]
	bfi	x1, x8, #32, #32
	b	.LBB6_20
.LBB6_19:                               // %"$31"
	mov	x0, x1
	bl	evList
	mov	x1, x0
.LBB6_20:                               // %"$28"
	ldr	x8, [x21, :lo12:env]
	mov	x9, sp
	sub	x10, x9, #16                    // =16
	mov	sp, x10
	lsr	x11, x1, #32
	stp	w1, w11, [x9, #-16]
	lsr	x11, x8, #32
	stp	w8, w11, [x9, #-8]
	str	x10, [x21, :lo12:env]
	ldp	w8, w9, [x19]
	bfi	x8, x9, #32, #32
	cmp	x8, x23
	b.eq	.LBB6_27
// %bb.21:                              // %"$34"
	cmp	x1, x23
	b.ne	.LBB6_23
// %bb.22:
	mov	x8, x1
	b	.LBB6_27
.LBB6_23:                               // %"$36"
	tst	x8, #0x6
	b.eq	.LBB6_30
// %bb.24:                              // %"$39"
	tst	x1, #0x6
	b.eq	.LBB6_31
// %bb.25:                              // %"$41"
	mov	x0, x8
	bl	adds
.LBB6_26:                               // %"$22"
	mov	x8, x0
	lsr	x9, x0, #32
	stp	w8, w9, [x19]
.LBB6_27:                               // %"$22"
	ldp	w10, w9, [x22, #8]
	bfi	x10, x9, #32, #32
	str	x10, [x21, :lo12:env]
	mov	x19, x8
.LBB6_28:                               // %"$2"
	mov	x0, x19
	mov	sp, x29
	ldp	x20, x19, [sp, #48]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #32]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #64             // 16-byte Folded Reload
	ret
.LBB6_29:                               // %"$14"
	mov	x0, x20
	mov	x1, x19
	bl	protErr
.LBB6_30:                               // %"$26"
	mov	x0, x20
	mov	x1, x8
	bl	numErr
.LBB6_31:                               // %"$40"
	mov	x0, x20
	bl	numErr
.Lfunc_end6:
	.size	_inc, .Lfunc_end6-_inc
	.cfi_endproc
                                        // -- End function
	.globl	_dec                            // -- Begin function _dec
	.p2align	4
	.type	_dec,@function
_dec:                                   // @_dec
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-64]!           // 16-byte Folded Spill
	stp	x24, x23, [sp, #16]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #32]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #48]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 64
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w30, -56
	.cfi_offset w29, -64
	mov	x20, x0
	ldp	w24, w8, [x0, #8]
	bfi	x24, x8, #32, #32
	ldp	w19, w8, [x24]
	bfi	x19, x8, #32, #32
	tst	x19, #0x6
	b.ne	.LBB7_4
// %bb.1:                               // %"$4"
	tbz	w19, #3, .LBB7_3
// %bb.2:                               // %"$7"
	ldp	w19, w8, [x19]
	bfi	x19, x8, #32, #32
	b	.LBB7_4
.LBB7_3:                                // %"$6"
	mov	x0, x19
	bl	evList
	mov	x19, x0
.LBB7_4:                                // %"$3"
	adrp	x23, SymTab+8
	add	x23, x23, :lo12:SymTab+8
	cmp	x19, x23
	b.eq	.LBB7_28
// %bb.5:                               // %"$8"
	tst	x19, #0x6
	b.eq	.LBB7_7
// %bb.6:                               // %"$11"
	mov	x0, x19
	bl	decs
	mov	x19, x0
	b	.LBB7_28
.LBB7_7:                                // %"$10"
	add	x8, x23, #208                   // =208
	cmp	x8, x19
	ccmp	x19, x23, #0, hs
	b.hs	.LBB7_29
// %bb.8:                               // %"$15"
	adrp	x21, env
	ldr	x8, [x21, :lo12:env]
	mov	x9, sp
	sub	x22, x9, #16                    // =16
	mov	sp, x22
	lsr	x10, x19, #32
	lsr	x11, x8, #32
	stp	w19, w10, [x9, #-16]
	stp	w8, w11, [x9, #-8]
	str	x22, [x21, :lo12:env]
	tbz	w19, #3, .LBB7_10
// %bb.9:                               // %"$17"
	ldurb	w8, [x19, #-8]
	ubfx	w8, w8, #3, #1
	cbnz	w8, .LBB7_11
	b	.LBB7_12
.LBB7_10:
	mov	w8, wzr
	cbz	w8, .LBB7_12
.LBB7_11:                               // %"$18"
	mov	x0, x20
	mov	x1, x19
	bl	dbTouch
.LBB7_12:                               // %"$19"
	ldp	w8, w9, [x24, #8]
	bfi	x8, x9, #32, #32
	tst	x8, #0xf
	b.eq	.LBB7_16
// %bb.13:                              // %"$20"
	ldp	w8, w9, [x19]
	bfi	x8, x9, #32, #32
	cmp	x8, x23
	b.eq	.LBB7_27
// %bb.14:                              // %"$24"
	tst	x8, #0x6
	b.eq	.LBB7_30
// %bb.15:                              // %"$27"
	mov	x0, x8
	bl	decs
	b	.LBB7_26
.LBB7_16:                               // %"$21"
	ldp	w1, w9, [x8]
	bfi	x1, x9, #32, #32
	tst	x1, #0x6
	b.ne	.LBB7_20
// %bb.17:                              // %"$29"
	tbz	w1, #3, .LBB7_19
// %bb.18:                              // %"$32"
	ldp	w1, w8, [x1]
	bfi	x1, x8, #32, #32
	b	.LBB7_20
.LBB7_19:                               // %"$31"
	mov	x0, x1
	bl	evList
	mov	x1, x0
.LBB7_20:                               // %"$28"
	ldr	x8, [x21, :lo12:env]
	mov	x9, sp
	sub	x10, x9, #16                    // =16
	mov	sp, x10
	lsr	x11, x1, #32
	stp	w1, w11, [x9, #-16]
	lsr	x11, x8, #32
	stp	w8, w11, [x9, #-8]
	str	x10, [x21, :lo12:env]
	ldp	w8, w9, [x19]
	bfi	x8, x9, #32, #32
	cmp	x8, x23
	b.eq	.LBB7_27
// %bb.21:                              // %"$34"
	cmp	x1, x23
	b.ne	.LBB7_23
// %bb.22:
	mov	x8, x1
	b	.LBB7_27
.LBB7_23:                               // %"$36"
	tst	x8, #0x6
	b.eq	.LBB7_30
// %bb.24:                              // %"$39"
	tst	x1, #0x6
	b.eq	.LBB7_31
// %bb.25:                              // %"$41"
	mov	x0, x8
	bl	subs
.LBB7_26:                               // %"$22"
	mov	x8, x0
	lsr	x9, x0, #32
	stp	w8, w9, [x19]
.LBB7_27:                               // %"$22"
	ldp	w10, w9, [x22, #8]
	bfi	x10, x9, #32, #32
	str	x10, [x21, :lo12:env]
	mov	x19, x8
.LBB7_28:                               // %"$2"
	mov	x0, x19
	mov	sp, x29
	ldp	x20, x19, [sp, #48]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #32]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #64             // 16-byte Folded Reload
	ret
.LBB7_29:                               // %"$14"
	mov	x0, x20
	mov	x1, x19
	bl	protErr
.LBB7_30:                               // %"$26"
	mov	x0, x20
	mov	x1, x8
	bl	numErr
.LBB7_31:                               // %"$40"
	mov	x0, x20
	bl	numErr
.Lfunc_end7:
	.size	_dec, .Lfunc_end7-_dec
	.cfi_endproc
                                        // -- End function
	.globl	_mul                            // -- Begin function _mul
	.p2align	4
	.type	_mul,@function
_mul:                                   // @_mul
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-80]!           // 16-byte Folded Spill
	str	x25, [sp, #16]                  // 8-byte Folded Spill
	stp	x24, x23, [sp, #32]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #48]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #64]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 80
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -64
	.cfi_offset w30, -72
	.cfi_offset w29, -80
	mov	x19, x0
	ldp	w20, w8, [x0, #8]
	bfi	x20, x8, #32, #32
	ldp	w1, w8, [x20]
	bfi	x1, x8, #32, #32
	tst	x1, #0x6
	b.ne	.LBB8_4
// %bb.1:                               // %"$3"
	tbz	w1, #3, .LBB8_3
// %bb.2:                               // %"$6"
	ldp	w1, w8, [x1]
	bfi	x1, x8, #32, #32
	b	.LBB8_4
.LBB8_3:                                // %"$5"
	mov	x0, x1
	bl	evList
	mov	x1, x0
.LBB8_4:                                // %"$2"
	adrp	x23, SymTab+8
	add	x23, x23, :lo12:SymTab+8
	cmp	x1, x23
	b.eq	.LBB8_17
// %bb.5:                               // %"$8"
	adrp	x21, env
	ldr	x8, [x21, :lo12:env]
	mov	x9, sp
	sub	x22, x9, #16                    // =16
	mov	sp, x22
	mov	w10, #10
	lsr	x11, x8, #32
	stp	w10, wzr, [x9, #-16]
	stp	w8, w11, [x9, #-8]
	tst	x1, #0x6
	str	x22, [x21, :lo12:env]
	b.eq	.LBB8_18
// %bb.6:                               // %"$11"
	ubfx	x24, x1, #3, #1
	and	x9, x1, #0xfffffffffffffff7
	mov	x10, sp
	sub	x25, x10, #16                   // =16
	mov	sp, x25
	lsr	x11, x1, #32
	adrp	x8, env
	add	x8, x8, :lo12:env
	stp	w9, w11, [x10, #-16]
	ldr	x9, [x8]
	lsr	x11, x9, #32
	stp	w9, w11, [x10, #-8]
	mov	x0, x25
.LBB8_7:                                // %"$12"
                                        // =>This Inner Loop Header: Depth=1
	lsr	x9, x0, #32
	stp	w0, w9, [x8]
	ldp	w20, w8, [x20, #8]
	bfi	x20, x8, #32, #32
	tst	x20, #0xf
	b.ne	.LBB8_15
// %bb.8:                               // %"$13"
                                        //   in Loop: Header=BB8_7 Depth=1
	ldp	w1, w8, [x20]
	bfi	x1, x8, #32, #32
	tst	x1, #0x6
	b.ne	.LBB8_11
// %bb.9:                               // %"$23"
                                        //   in Loop: Header=BB8_7 Depth=1
	tbz	w1, #3, .LBB8_14
// %bb.10:                              // %"$26"
                                        //   in Loop: Header=BB8_7 Depth=1
	ldp	w1, w8, [x1]
	bfi	x1, x8, #32, #32
.LBB8_11:                               // %"$22"
                                        //   in Loop: Header=BB8_7 Depth=1
	cmp	x1, x23
	b.eq	.LBB8_16
.LBB8_12:                               // %"$27"
                                        //   in Loop: Header=BB8_7 Depth=1
	tst	x1, #0x6
	b.eq	.LBB8_18
// %bb.13:                              // %"$30"
                                        //   in Loop: Header=BB8_7 Depth=1
	eor	w8, w24, #0x1
	and	x9, x1, #0xfffffffffffffff7
	tst	w1, #0x8
	csel	w24, w24, w8, eq
	csel	x1, x1, x9, eq
	lsr	x8, x1, #32
	stp	w1, w8, [x22]
	ldp	w0, w8, [x25]
	bfi	x0, x8, #32, #32
	bl	mulu
	mov	x8, x25
	b	.LBB8_7
.LBB8_14:                               // %"$25"
                                        //   in Loop: Header=BB8_7 Depth=1
	mov	x0, x1
	bl	evList
	mov	x1, x0
	cmp	x1, x23
	b.ne	.LBB8_12
	b	.LBB8_16
.LBB8_15:                               // %"$15"
	ldp	w9, w8, [x25]
	bfi	x9, x8, #32, #32
	eor	x8, x9, #0x8
	cmp	x9, #2                          // =2
	csel	x8, x9, x8, eq
	tst	w24, #0x1
	csel	x1, x9, x8, eq
.LBB8_16:                               // %"$14"
	ldp	w9, w8, [x22, #8]
	bfi	x9, x8, #32, #32
	str	x9, [x21, :lo12:env]
.LBB8_17:                               // %"$9"
	mov	x0, x1
	mov	sp, x29
	ldp	x20, x19, [sp, #64]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #48]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #32]             // 16-byte Folded Reload
	ldr	x25, [sp, #16]                  // 8-byte Folded Reload
	ldp	x29, x30, [sp], #80             // 16-byte Folded Reload
	ret
.LBB8_18:                               // %"$10"
	mov	x0, x19
	bl	numErr
.Lfunc_end8:
	.size	_mul, .Lfunc_end8-_mul
	.cfi_endproc
                                        // -- End function
	.globl	_mulDiv                         // -- Begin function _mulDiv
	.p2align	4
	.type	_mulDiv,@function
_mulDiv:                                // @_mulDiv
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-80]!           // 16-byte Folded Spill
	stp	x26, x25, [sp, #16]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #32]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #48]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #64]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 80
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w30, -72
	.cfi_offset w29, -80
	mov	x19, x0
	ldp	w20, w8, [x0, #8]
	bfi	x20, x8, #32, #32
	ldp	w1, w8, [x20]
	bfi	x1, x8, #32, #32
	tst	x1, #0x6
	b.ne	.LBB9_4
// %bb.1:                               // %"$3"
	tbz	w1, #3, .LBB9_3
// %bb.2:                               // %"$6"
	ldp	w1, w8, [x1]
	bfi	x1, x8, #32, #32
	b	.LBB9_4
.LBB9_3:                                // %"$5"
	mov	x0, x1
	bl	evList
	mov	x1, x0
.LBB9_4:                                // %"$2"
	adrp	x25, SymTab+8
	add	x25, x25, :lo12:SymTab+8
	cmp	x1, x25
	b.eq	.LBB9_19
// %bb.5:                               // %"$8"
	adrp	x21, env
	ldr	x8, [x21, :lo12:env]
	mov	x9, sp
	sub	x22, x9, #16                    // =16
	mov	sp, x22
	mov	w10, #10
	lsr	x11, x8, #32
	stp	w10, wzr, [x9, #-16]
	stp	w8, w11, [x9, #-8]
	tst	x1, #0x6
	str	x22, [x21, :lo12:env]
	b.eq	.LBB9_20
// %bb.6:                               // %"$11"
	ubfx	x23, x1, #3, #1
	and	x8, x1, #0xfffffffffffffff7
	mov	x9, sp
	sub	x24, x9, #16                    // =16
	mov	sp, x24
	lsr	x10, x1, #32
	stp	w8, w10, [x9, #-16]
	ldr	x8, [x21, :lo12:env]
	lsr	x10, x8, #32
	stp	w8, w10, [x9, #-8]
	str	x24, [x21, :lo12:env]
	ldp	w26, w8, [x20, #8]
	bfi	x26, x8, #32, #32
.LBB9_7:                                // %"$12"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w1, w8, [x26]
	bfi	x1, x8, #32, #32
	tst	x1, #0x6
	b.ne	.LBB9_10
// %bb.8:                               // %"$14"
                                        //   in Loop: Header=BB9_7 Depth=1
	tbz	w1, #3, .LBB9_14
// %bb.9:                               // %"$17"
                                        //   in Loop: Header=BB9_7 Depth=1
	ldp	w1, w8, [x1]
	bfi	x1, x8, #32, #32
.LBB9_10:                               // %"$13"
                                        //   in Loop: Header=BB9_7 Depth=1
	cmp	x1, x25
	b.eq	.LBB9_18
.LBB9_11:                               // %"$18"
                                        //   in Loop: Header=BB9_7 Depth=1
	tst	x1, #0x6
	b.eq	.LBB9_20
// %bb.12:                              // %"$22"
                                        //   in Loop: Header=BB9_7 Depth=1
	eor	w8, w23, #0x1
	and	x9, x1, #0xfffffffffffffff7
	tst	w1, #0x8
	csel	w23, w23, w8, eq
	csel	x20, x1, x9, eq
	lsr	x8, x20, #32
	stp	w20, w8, [x22]
	ldp	w26, w8, [x26, #8]
	bfi	x26, x8, #32, #32
	tst	x26, #0xf
	b.ne	.LBB9_15
// %bb.13:                              // %"$25"
                                        //   in Loop: Header=BB9_7 Depth=1
	ldp	w0, w8, [x24]
	bfi	x0, x8, #32, #32
	mov	x1, x20
	bl	mulu
	lsr	x8, x0, #32
	stp	w0, w8, [x24]
	b	.LBB9_7
.LBB9_14:                               // %"$16"
                                        //   in Loop: Header=BB9_7 Depth=1
	mov	x0, x1
	bl	evList
	mov	x1, x0
	cmp	x1, x25
	b.ne	.LBB9_11
	b	.LBB9_18
.LBB9_15:                               // %"$26"
	cmp	x20, #2                         // =2
	b.eq	.LBB9_21
// %bb.16:                              // %"$28"
	mov	x0, x20
	bl	shru
	mov	x1, x0
	ldr	x8, [x21, :lo12:env]
	mov	x9, sp
	sub	x10, x9, #16                    // =16
	mov	sp, x10
	lsr	x11, x0, #32
	stp	w1, w11, [x9, #-16]
	lsr	x11, x8, #32
	stp	w8, w11, [x9, #-8]
	str	x10, [x21, :lo12:env]
	ldp	w0, w8, [x24]
	bfi	x0, x8, #32, #32
	bl	addu
	lsr	x8, x0, #32
	stp	w0, w8, [x24]
	mov	x1, x20
	bl	divu
	mov	x1, x0
	tbz	w23, #0, .LBB9_18
// %bb.17:                              // %"$29"
	eor	x8, x1, #0x8
	cmp	x1, #2                          // =2
	csel	x1, x1, x8, eq
.LBB9_18:                               // %"$19"
	ldp	w9, w8, [x22, #8]
	bfi	x9, x8, #32, #32
	str	x9, [x21, :lo12:env]
.LBB9_19:                               // %"$9"
	mov	x0, x1
	mov	sp, x29
	ldp	x20, x19, [sp, #64]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #48]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #32]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #80             // 16-byte Folded Reload
	ret
.LBB9_20:                               // %"$10"
	mov	x0, x19
	bl	numErr
.LBB9_21:                               // %"$27"
	mov	x0, x19
	bl	divErr
.Lfunc_end9:
	.size	_mulDiv, .Lfunc_end9-_mulDiv
	.cfi_endproc
                                        // -- End function
	.globl	_div                            // -- Begin function _div
	.p2align	4
	.type	_div,@function
_div:                                   // @_div
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-80]!           // 16-byte Folded Spill
	str	x25, [sp, #16]                  // 8-byte Folded Spill
	stp	x24, x23, [sp, #32]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #48]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #64]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 80
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -64
	.cfi_offset w30, -72
	.cfi_offset w29, -80
	mov	x19, x0
	ldp	w20, w8, [x0, #8]
	bfi	x20, x8, #32, #32
	ldp	w1, w8, [x20]
	bfi	x1, x8, #32, #32
	tst	x1, #0x6
	b.ne	.LBB10_4
// %bb.1:                               // %"$3"
	tbz	w1, #3, .LBB10_3
// %bb.2:                               // %"$6"
	ldp	w1, w8, [x1]
	bfi	x1, x8, #32, #32
	b	.LBB10_4
.LBB10_3:                               // %"$5"
	mov	x0, x1
	bl	evList
	mov	x1, x0
.LBB10_4:                               // %"$2"
	adrp	x23, SymTab+8
	add	x23, x23, :lo12:SymTab+8
	cmp	x1, x23
	b.eq	.LBB10_18
// %bb.5:                               // %"$8"
	adrp	x21, env
	ldr	x8, [x21, :lo12:env]
	mov	x9, sp
	sub	x22, x9, #16                    // =16
	mov	sp, x22
	mov	w10, #10
	lsr	x11, x8, #32
	stp	w10, wzr, [x9, #-16]
	stp	w8, w11, [x9, #-8]
	tst	x1, #0x6
	str	x22, [x21, :lo12:env]
	b.eq	.LBB10_20
// %bb.6:                               // %"$11"
	ubfx	x24, x1, #3, #1
	and	x9, x1, #0xfffffffffffffff7
	mov	x10, sp
	sub	x25, x10, #16                   // =16
	mov	sp, x25
	lsr	x11, x1, #32
	adrp	x8, env
	add	x8, x8, :lo12:env
	stp	w9, w11, [x10, #-16]
	ldr	x9, [x8]
	lsr	x11, x9, #32
	stp	w9, w11, [x10, #-8]
	mov	x0, x25
.LBB10_7:                               // %"$12"
                                        // =>This Inner Loop Header: Depth=1
	lsr	x9, x0, #32
	stp	w0, w9, [x8]
	ldp	w20, w8, [x20, #8]
	bfi	x20, x8, #32, #32
	tst	x20, #0xf
	b.ne	.LBB10_16
// %bb.8:                               // %"$13"
                                        //   in Loop: Header=BB10_7 Depth=1
	ldp	w1, w8, [x20]
	bfi	x1, x8, #32, #32
	tst	x1, #0x6
	b.ne	.LBB10_11
// %bb.9:                               // %"$23"
                                        //   in Loop: Header=BB10_7 Depth=1
	tbz	w1, #3, .LBB10_15
// %bb.10:                              // %"$26"
                                        //   in Loop: Header=BB10_7 Depth=1
	ldp	w1, w8, [x1]
	bfi	x1, x8, #32, #32
.LBB10_11:                              // %"$22"
                                        //   in Loop: Header=BB10_7 Depth=1
	cmp	x1, x23
	b.eq	.LBB10_17
.LBB10_12:                              // %"$27"
                                        //   in Loop: Header=BB10_7 Depth=1
	cmp	x1, #2                          // =2
	b.eq	.LBB10_19
// %bb.13:                              // %"$30"
                                        //   in Loop: Header=BB10_7 Depth=1
	tst	x1, #0x6
	b.eq	.LBB10_20
// %bb.14:                              // %"$32"
                                        //   in Loop: Header=BB10_7 Depth=1
	eor	w8, w24, #0x1
	and	x9, x1, #0xfffffffffffffff7
	tst	w1, #0x8
	csel	w24, w24, w8, eq
	csel	x1, x1, x9, eq
	lsr	x8, x1, #32
	stp	w1, w8, [x22]
	ldp	w0, w8, [x25]
	bfi	x0, x8, #32, #32
	bl	divu
	mov	x8, x25
	b	.LBB10_7
.LBB10_15:                              // %"$25"
                                        //   in Loop: Header=BB10_7 Depth=1
	mov	x0, x1
	bl	evList
	mov	x1, x0
	cmp	x1, x23
	b.ne	.LBB10_12
	b	.LBB10_17
.LBB10_16:                              // %"$15"
	ldp	w9, w8, [x25]
	bfi	x9, x8, #32, #32
	eor	x8, x9, #0x8
	cmp	x9, #2                          // =2
	csel	x8, x9, x8, eq
	tst	w24, #0x1
	csel	x1, x9, x8, eq
.LBB10_17:                              // %"$14"
	ldp	w9, w8, [x22, #8]
	bfi	x9, x8, #32, #32
	str	x9, [x21, :lo12:env]
.LBB10_18:                              // %"$9"
	mov	x0, x1
	mov	sp, x29
	ldp	x20, x19, [sp, #64]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #48]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #32]             // 16-byte Folded Reload
	ldr	x25, [sp, #16]                  // 8-byte Folded Reload
	ldp	x29, x30, [sp], #80             // 16-byte Folded Reload
	ret
.LBB10_19:                              // %"$29"
	mov	x0, x19
	bl	divErr
.LBB10_20:                              // %"$10"
	mov	x0, x19
	bl	numErr
.Lfunc_end10:
	.size	_div, .Lfunc_end10-_div
	.cfi_endproc
                                        // -- End function
	.globl	_rem                            // -- Begin function _rem
	.p2align	4
	.type	_rem,@function
_rem:                                   // @_rem
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-80]!           // 16-byte Folded Spill
	str	x25, [sp, #16]                  // 8-byte Folded Spill
	stp	x24, x23, [sp, #32]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #48]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #64]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 80
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -64
	.cfi_offset w30, -72
	.cfi_offset w29, -80
	mov	x20, x0
	ldp	w21, w8, [x0, #8]
	bfi	x21, x8, #32, #32
	ldp	w19, w8, [x21]
	bfi	x19, x8, #32, #32
	tst	x19, #0x6
	b.ne	.LBB11_4
// %bb.1:                               // %"$3"
	tbz	w19, #3, .LBB11_3
// %bb.2:                               // %"$6"
	ldp	w19, w8, [x19]
	bfi	x19, x8, #32, #32
	b	.LBB11_4
.LBB11_3:                               // %"$5"
	mov	x0, x19
	bl	evList
	mov	x19, x0
.LBB11_4:                               // %"$2"
	adrp	x24, SymTab+8
	add	x24, x24, :lo12:SymTab+8
	cmp	x19, x24
	b.eq	.LBB11_18
// %bb.5:                               // %"$8"
	adrp	x22, env
	ldr	x8, [x22, :lo12:env]
	mov	x9, sp
	sub	x23, x9, #16                    // =16
	mov	sp, x23
	mov	w10, #10
	lsr	x11, x8, #32
	stp	w10, wzr, [x9, #-16]
	stp	w8, w11, [x9, #-8]
	tst	x19, #0x6
	str	x23, [x22, :lo12:env]
	b.eq	.LBB11_21
// %bb.6:                               // %"$11"
	and	x9, x19, #0xfffffffffffffff7
	mov	x10, sp
	sub	x25, x10, #16                   // =16
	mov	sp, x25
	lsr	x11, x19, #32
	adrp	x8, env
	add	x8, x8, :lo12:env
	stp	w9, w11, [x10, #-16]
	ldr	x9, [x8]
	lsr	x11, x9, #32
	stp	w9, w11, [x10, #-8]
	mov	x0, x25
.LBB11_7:                               // %"$12"
                                        // =>This Inner Loop Header: Depth=1
	lsr	x9, x0, #32
	stp	w0, w9, [x8]
	ldp	w21, w8, [x21, #8]
	bfi	x21, x8, #32, #32
	tst	x21, #0xf
	b.ne	.LBB11_16
// %bb.8:                               // %"$13"
                                        //   in Loop: Header=BB11_7 Depth=1
	ldp	w8, w9, [x21]
	bfi	x8, x9, #32, #32
	tst	x8, #0x6
	b.ne	.LBB11_11
// %bb.9:                               // %"$23"
                                        //   in Loop: Header=BB11_7 Depth=1
	tbz	w8, #3, .LBB11_15
// %bb.10:                              // %"$26"
                                        //   in Loop: Header=BB11_7 Depth=1
	ldp	w8, w9, [x8]
	bfi	x8, x9, #32, #32
.LBB11_11:                              // %"$22"
                                        //   in Loop: Header=BB11_7 Depth=1
	cmp	x8, x24
	b.eq	.LBB11_17
.LBB11_12:                              // %"$27"
                                        //   in Loop: Header=BB11_7 Depth=1
	cmp	x8, #2                          // =2
	b.eq	.LBB11_19
// %bb.13:                              // %"$30"
                                        //   in Loop: Header=BB11_7 Depth=1
	tst	x8, #0x6
	b.eq	.LBB11_20
// %bb.14:                              // %"$32"
                                        //   in Loop: Header=BB11_7 Depth=1
	ldp	w0, w9, [x25]
	bfi	x0, x9, #32, #32
	and	x1, x8, #0xfffffffffffffff7
	lsr	x8, x8, #32
	stp	w1, w8, [x23]
	bl	remu
	mov	x8, x25
	b	.LBB11_7
.LBB11_15:                              // %"$25"
                                        //   in Loop: Header=BB11_7 Depth=1
	mov	x0, x8
	bl	evList
	mov	x8, x0
	cmp	x8, x24
	b.ne	.LBB11_12
	b	.LBB11_17
.LBB11_16:                              // %"$15"
	ldp	w9, w8, [x25]
	bfi	x9, x8, #32, #32
	eor	x8, x9, #0x8
	cmp	x9, #2                          // =2
	csel	x8, x9, x8, eq
	tst	w19, #0x8
	csel	x8, x9, x8, eq
.LBB11_17:                              // %"$14"
	ldp	w10, w9, [x23, #8]
	bfi	x10, x9, #32, #32
	str	x10, [x22, :lo12:env]
	mov	x19, x8
.LBB11_18:                              // %"$9"
	mov	x0, x19
	mov	sp, x29
	ldp	x20, x19, [sp, #64]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #48]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #32]             // 16-byte Folded Reload
	ldr	x25, [sp, #16]                  // 8-byte Folded Reload
	ldp	x29, x30, [sp], #80             // 16-byte Folded Reload
	ret
.LBB11_19:                              // %"$29"
	mov	x0, x20
	bl	divErr
.LBB11_20:                              // %"$31"
	mov	x0, x20
	mov	x1, x8
	bl	numErr
.LBB11_21:                              // %"$10"
	mov	x0, x20
	mov	x1, x19
	bl	numErr
.Lfunc_end11:
	.size	_rem, .Lfunc_end11-_rem
	.cfi_endproc
                                        // -- End function
	.globl	_shr                            // -- Begin function _shr
	.p2align	4
	.type	_shr,@function
_shr:                                   // @_shr
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-48]!           // 16-byte Folded Spill
	stp	x22, x21, [sp, #16]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #32]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 48
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w30, -40
	.cfi_offset w29, -48
	mov	x21, x0
	ldp	w19, w8, [x0, #8]
	bfi	x19, x8, #32, #32
	mov	x1, x19
	bl	evCnt
	mov	x20, x0
	ldp	w9, w8, [x19, #8]
	bfi	x9, x8, #32, #32
	ldp	w19, w8, [x9]
	bfi	x19, x8, #32, #32
	tst	x19, #0x6
	b.eq	.LBB12_4
// %bb.1:                               // %"$2"
	cbz	x20, .LBB12_3
.LBB12_2:                               // %"$8"
	adrp	x8, SymTab+8
	add	x8, x8, :lo12:SymTab+8
	cmp	x19, x8
	b.ne	.LBB12_6
.LBB12_3:
	mov	w8, #1
	tbnz	w8, #0, .LBB12_20
	b	.LBB12_8
.LBB12_4:                               // %"$3"
	tbz	w19, #3, .LBB12_16
// %bb.5:                               // %"$6"
	ldp	w19, w8, [x19]
	bfi	x19, x8, #32, #32
	cbnz	x20, .LBB12_2
	b	.LBB12_3
.LBB12_6:                               // %"$9"
	tst	x19, #0x6
	b.eq	.LBB12_21
// %bb.7:                               // %"$11"
	cmp	x19, #2                         // =2
	cset	w8, eq
	tbnz	w8, #0, .LBB12_20
.LBB12_8:                               // %"$13"
	and	x1, x19, #0xfffffffffffffff7
	adrp	x21, env
	ldr	x8, [x21, :lo12:env]
	mov	x9, sp
	sub	x22, x9, #16                    // =16
	mov	sp, x22
	lsr	x10, x19, #32
	lsr	x11, x8, #32
	stp	w1, w10, [x9, #-16]
	stp	w8, w11, [x9, #-8]
	cmp	x20, #0                         // =0
	str	x22, [x21, :lo12:env]
	b.le	.LBB12_12
.LBB12_9:                               // %"$18"
                                        // =>This Inner Loop Header: Depth=1
	cmp	x20, #63                        // =63
	cset	w8, hi
	tst	w1, #0x4
	csel	w8, wzr, w8, eq
	cbz	w8, .LBB12_17
// %bb.10:                              // %"$21"
                                        //   in Loop: Header=BB12_9 Depth=1
	ldp	w1, w8, [x1, #4]
	bfi	x1, x8, #32, #32
	subs	x20, x20, #64                   // =64
	b.ne	.LBB12_9
	b	.LBB12_19
.LBB12_11:                              // %"$29"
                                        //   in Loop: Header=BB12_12 Depth=1
	mov	x0, xzr
	bl	consNum
	mov	x1, x0
	lsr	x8, x0, #32
	stp	w1, w8, [x22]
	adds	x20, x20, #64                   // =64
	b.eq	.LBB12_19
.LBB12_12:                              // %"$28"
                                        // =>This Inner Loop Header: Depth=1
	cmn	x20, #64                        // =64
	b.ls	.LBB12_11
// %bb.13:                              // %"$30"
	mov	x0, x1
	bl	shlu
.LBB12_14:                              // %"$33"
                                        // =>This Inner Loop Header: Depth=1
	mov	x1, x0
	add	x20, x20, #1                    // =1
	lsr	x8, x0, #32
	stp	w1, w8, [x22]
	cbz	x20, .LBB12_19
// %bb.15:                              // %"$34"
                                        //   in Loop: Header=BB12_14 Depth=1
	mov	x0, x1
	bl	twice
	b	.LBB12_14
.LBB12_16:                              // %"$5"
	mov	x0, x19
	bl	evList
	mov	x19, x0
	cbnz	x20, .LBB12_2
	b	.LBB12_3
.LBB12_17:                              // %"$22"
	mov	x0, x1
	bl	shru
	mov	x1, x0
	lsr	x8, x0, #32
	stp	w1, w8, [x22]
	sub	x20, x20, #1                    // =1
	cbz	x20, .LBB12_19
.LBB12_18:                              // %"$26"
                                        // =>This Inner Loop Header: Depth=1
	mov	x0, x1
	bl	half
	mov	x1, x0
	sub	x20, x20, #1                    // =1
	cbnz	x20, .LBB12_18
.LBB12_19:                              // %"$-9"
	eor	x8, x1, #0x8
	cmp	x1, #2                          // =2
	csel	x8, x1, x8, eq
	tst	w19, #0x8
	csel	x19, x1, x8, eq
	ldp	w9, w8, [x22, #8]
	bfi	x9, x8, #32, #32
	str	x9, [x21, :lo12:env]
.LBB12_20:                              // %"$14"
	mov	x0, x19
	mov	sp, x29
	ldp	x20, x19, [sp, #32]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #48             // 16-byte Folded Reload
	ret
.LBB12_21:                              // %"$10"
	mov	x0, x21
	mov	x1, x19
	bl	numErr
.Lfunc_end12:
	.size	_shr, .Lfunc_end12-_shr
	.cfi_endproc
                                        // -- End function
	.globl	_lt0                            // -- Begin function _lt0
	.p2align	4
	.type	_lt0,@function
_lt0:                                   // @_lt0
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w0, w8, [x9]
	bfi	x0, x8, #32, #32
	tst	x0, #0x6
	b.ne	.LBB13_4
// %bb.1:                               // %"$4"
	tbz	w0, #3, .LBB13_3
// %bb.2:                               // %"$7"
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB13_4
.LBB13_3:                               // %"$6"
	bl	evList
.LBB13_4:                               // %"$3"
	tst	x0, #0x6
	cset	w8, ne
	ubfx	x9, x0, #3, #1
	adrp	x10, SymTab+8
	add	x10, x10, :lo12:SymTab+8
	tst	w8, w9
	csel	x0, x0, x10, ne
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end13:
	.size	_lt0, .Lfunc_end13-_lt0
	.cfi_endproc
                                        // -- End function
	.globl	_le0                            // -- Begin function _le0
	.p2align	4
	.type	_le0,@function
_le0:                                   // @_le0
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w0, w8, [x9]
	bfi	x0, x8, #32, #32
	tst	x0, #0x6
	b.ne	.LBB14_4
// %bb.1:                               // %"$4"
	tbz	w0, #3, .LBB14_3
// %bb.2:                               // %"$7"
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB14_4
.LBB14_3:                               // %"$6"
	bl	evList
.LBB14_4:                               // %"$3"
	tst	x0, #0x6
	cset	w8, ne
	cmp	x0, #2                          // =2
	cset	w9, eq
	ubfx	x10, x0, #3, #1
	orr	w9, w9, w10
	adrp	x10, SymTab+8
	add	x10, x10, :lo12:SymTab+8
	tst	w8, w9
	csel	x0, x0, x10, ne
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end14:
	.size	_le0, .Lfunc_end14-_le0
	.cfi_endproc
                                        // -- End function
	.globl	_ge0                            // -- Begin function _ge0
	.p2align	4
	.type	_ge0,@function
_ge0:                                   // @_ge0
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w0, w8, [x9]
	bfi	x0, x8, #32, #32
	tst	x0, #0x6
	b.ne	.LBB15_4
// %bb.1:                               // %"$4"
	tbz	w0, #3, .LBB15_3
// %bb.2:                               // %"$7"
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB15_4
.LBB15_3:                               // %"$6"
	bl	evList
.LBB15_4:                               // %"$3"
	and	x8, x0, #0x6
	tst	x0, #0x8
	adrp	x9, SymTab+8
	add	x9, x9, :lo12:SymTab+8
	ccmp	x8, #0, #4, eq
	csel	x0, x0, x9, ne
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end15:
	.size	_ge0, .Lfunc_end15-_ge0
	.cfi_endproc
                                        // -- End function
	.globl	_gt0                            // -- Begin function _gt0
	.p2align	4
	.type	_gt0,@function
_gt0:                                   // @_gt0
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w0, w8, [x9]
	bfi	x0, x8, #32, #32
	tst	x0, #0x6
	b.ne	.LBB16_4
// %bb.1:                               // %"$4"
	tbz	w0, #3, .LBB16_3
// %bb.2:                               // %"$7"
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB16_4
.LBB16_3:                               // %"$6"
	bl	evList
.LBB16_4:                               // %"$3"
	and	x8, x0, #0x6
	tst	x0, #0x8
	cset	w9, eq
	cmp	x8, #0                          // =0
	ccmp	x0, #2, #4, ne
	csel	w8, wzr, w9, eq
	adrp	x9, SymTab+8
	add	x9, x9, :lo12:SymTab+8
	cmp	w8, #0                          // =0
	csel	x0, x0, x9, ne
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end16:
	.size	_gt0, .Lfunc_end16-_gt0
	.cfi_endproc
                                        // -- End function
	.globl	_abs                            // -- Begin function _abs
	.p2align	4
	.type	_abs,@function
_abs:                                   // @_abs
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x30, x19, [sp, #-16]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w19, -8
	.cfi_offset w30, -16
	mov	x19, x0
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w1, w8, [x9]
	bfi	x1, x8, #32, #32
	tst	x1, #0x6
	b.ne	.LBB17_4
// %bb.1:                               // %"$3"
	tbz	w1, #3, .LBB17_3
// %bb.2:                               // %"$6"
	ldp	w1, w8, [x1]
	bfi	x1, x8, #32, #32
	b	.LBB17_4
.LBB17_3:                               // %"$5"
	mov	x0, x1
	bl	evList
	mov	x1, x0
.LBB17_4:                               // %"$2"
	adrp	x8, SymTab+8
	add	x8, x8, :lo12:SymTab+8
	cmp	x1, x8
	b.eq	.LBB17_7
// %bb.5:                               // %"$8"
	tst	x1, #0x6
	b.eq	.LBB17_8
// %bb.6:                               // %"$11"
	and	x1, x1, #0xfffffffffffffff7
.LBB17_7:                               // %"$9"
	mov	x0, x1
	ldp	x30, x19, [sp], #16             // 16-byte Folded Reload
	ret
.LBB17_8:                               // %"$10"
	mov	x0, x19
	bl	numErr
.Lfunc_end17:
	.size	_abs, .Lfunc_end17-_abs
	.cfi_endproc
                                        // -- End function
	.globl	_bitQ                           // -- Begin function _bitQ
	.p2align	4
	.type	_bitQ,@function
_bitQ:                                  // @_bitQ
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-80]!           // 16-byte Folded Spill
	str	x25, [sp, #16]                  // 8-byte Folded Spill
	stp	x24, x23, [sp, #32]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #48]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #64]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 80
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -64
	.cfi_offset w30, -72
	.cfi_offset w29, -80
	mov	x19, x0
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w1, w8, [x9]
	bfi	x1, x8, #32, #32
	ldp	w21, w20, [x9, #8]
	tst	x1, #0x6
	b.ne	.LBB18_4
// %bb.1:                               // %"$3"
	tbz	w1, #3, .LBB18_3
// %bb.2:                               // %"$6"
	ldp	w1, w8, [x1]
	bfi	x1, x8, #32, #32
	b	.LBB18_4
.LBB18_3:                               // %"$5"
	mov	x0, x1
	bl	evList
	mov	x1, x0
.LBB18_4:                               // %"$2"
	tst	x1, #0x6
	b.eq	.LBB18_25
// %bb.5:                               // %"$8"
	bfi	x21, x20, #32, #32
	and	x20, x1, #0xfffffffffffffff7
	adrp	x22, env
	ldr	x8, [x22, :lo12:env]
	mov	x9, sp
	sub	x23, x9, #16                    // =16
	mov	sp, x23
	lsr	x10, x1, #32
	lsr	x11, x8, #32
	stp	w20, w10, [x9, #-16]
	stp	w8, w11, [x9, #-8]
	adrp	x24, SymTab+8
	add	x24, x24, :lo12:SymTab+8
	str	x23, [x22, :lo12:env]
.LBB18_6:                               // %"$9"
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB18_14 Depth 2
	tst	x21, #0xf
	b.ne	.LBB18_24
// %bb.7:                               // %"$10"
                                        //   in Loop: Header=BB18_6 Depth=1
	ldp	w1, w8, [x21]
	bfi	x1, x8, #32, #32
	ldp	w21, w25, [x21, #8]
	tst	x1, #0x6
	b.ne	.LBB18_11
// %bb.8:                               // %"$14"
                                        //   in Loop: Header=BB18_6 Depth=1
	tbz	w1, #3, .LBB18_10
// %bb.9:                               // %"$17"
                                        //   in Loop: Header=BB18_6 Depth=1
	ldp	w1, w8, [x1]
	bfi	x1, x8, #32, #32
	b	.LBB18_11
.LBB18_10:                              // %"$16"
                                        //   in Loop: Header=BB18_6 Depth=1
	mov	x0, x1
	bl	evList
	mov	x1, x0
.LBB18_11:                              // %"$13"
                                        //   in Loop: Header=BB18_6 Depth=1
	cmp	x1, x24
	b.eq	.LBB18_23
// %bb.12:                              // %"$18"
                                        //   in Loop: Header=BB18_6 Depth=1
	tst	x1, #0x6
	b.eq	.LBB18_25
// %bb.13:                              // %"$21"
                                        //   in Loop: Header=BB18_6 Depth=1
	bfi	x21, x25, #32, #32
	and	x8, x1, #0xfffffffffffffff7
	mov	x9, x20
	tbz	w9, #2, .LBB18_17
.LBB18_14:                              // %"$23"
                                        //   Parent Loop BB18_6 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	tbz	w8, #2, .LBB18_21
// %bb.15:                              // %"$26"
                                        //   in Loop: Header=BB18_14 Depth=2
	ldp	w11, w10, [x9, #-4]
	bfi	x11, x10, #32, #32
	ldp	w12, w10, [x8, #-4]
	bfi	x12, x10, #32, #32
	bics	xzr, x11, x12
	b.ne	.LBB18_21
// %bb.16:                              // %"$28"
                                        //   in Loop: Header=BB18_14 Depth=2
	ldp	w8, w10, [x8, #4]
	bfi	x8, x10, #32, #32
	ldp	w9, w10, [x9, #4]
	bfi	x9, x10, #32, #32
	tbnz	w9, #2, .LBB18_14
.LBB18_17:                              // %"$24"
                                        //   in Loop: Header=BB18_6 Depth=1
	tbz	w8, #2, .LBB18_19
// %bb.18:                              // %"$29"
                                        //   in Loop: Header=BB18_6 Depth=1
	lsr	x9, x9, #4
	ldp	w8, w10, [x8, #-4]
	bfi	x8, x10, #32, #32
.LBB18_19:                              // %"$30"
                                        //   in Loop: Header=BB18_6 Depth=1
	bics	xzr, x9, x8
	b.eq	.LBB18_6
// %bb.20:
	mov	x20, x24
	b	.LBB18_24
.LBB18_21:                              // %"$25"
	ldp	w9, w8, [x23, #8]
	bfi	x9, x8, #32, #32
	str	x9, [x22, :lo12:env]
	adrp	x0, SymTab+8
	add	x0, x0, :lo12:SymTab+8
.LBB18_22:                              // %"$25"
	mov	sp, x29
	ldp	x20, x19, [sp, #64]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #48]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #32]             // 16-byte Folded Reload
	ldr	x25, [sp, #16]                  // 8-byte Folded Reload
	ldp	x29, x30, [sp], #80             // 16-byte Folded Reload
	ret
.LBB18_23:
	mov	x20, x1
.LBB18_24:                              // %"$11"
	ldp	w9, w8, [x23, #8]
	bfi	x9, x8, #32, #32
	str	x9, [x22, :lo12:env]
	mov	x0, x20
	b	.LBB18_22
.LBB18_25:                              // %"$7"
	mov	x0, x19
	bl	numErr
.Lfunc_end18:
	.size	_bitQ, .Lfunc_end18-_bitQ
	.cfi_endproc
                                        // -- End function
	.globl	_bitAnd                         // -- Begin function _bitAnd
	.p2align	4
	.type	_bitAnd,@function
_bitAnd:                                // @_bitAnd
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-64]!           // 16-byte Folded Spill
	stp	x24, x23, [sp, #16]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #32]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #48]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 64
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w30, -56
	.cfi_offset w29, -64
	mov	x19, x0
	ldp	w20, w8, [x0, #8]
	bfi	x20, x8, #32, #32
	ldp	w1, w8, [x20]
	bfi	x1, x8, #32, #32
	tst	x1, #0x6
	b.ne	.LBB19_4
// %bb.1:                               // %"$3"
	tbz	w1, #3, .LBB19_3
// %bb.2:                               // %"$6"
	ldp	w1, w8, [x1]
	bfi	x1, x8, #32, #32
	b	.LBB19_4
.LBB19_3:                               // %"$5"
	mov	x0, x1
	bl	evList
	mov	x1, x0
.LBB19_4:                               // %"$2"
	adrp	x23, SymTab+8
	add	x23, x23, :lo12:SymTab+8
	cmp	x1, x23
	b.eq	.LBB19_17
// %bb.5:                               // %"$8"
	adrp	x21, env
	ldr	x8, [x21, :lo12:env]
	mov	x9, sp
	sub	x22, x9, #16                    // =16
	mov	sp, x22
	mov	w10, #10
	lsr	x11, x8, #32
	stp	w10, wzr, [x9, #-16]
	stp	w8, w11, [x9, #-8]
	tst	x1, #0x6
	str	x22, [x21, :lo12:env]
	b.eq	.LBB19_18
// %bb.6:                               // %"$11"
	and	x9, x1, #0xfffffffffffffff7
	mov	x10, sp
	sub	x24, x10, #16                   // =16
	mov	sp, x24
	lsr	x11, x1, #32
	adrp	x8, env
	add	x8, x8, :lo12:env
	stp	w9, w11, [x10, #-16]
	ldr	x9, [x8]
	lsr	x11, x9, #32
	stp	w9, w11, [x10, #-8]
	mov	x0, x24
.LBB19_7:                               // %"$12"
                                        // =>This Inner Loop Header: Depth=1
	lsr	x9, x0, #32
	stp	w0, w9, [x8]
	ldp	w20, w8, [x20, #8]
	bfi	x20, x8, #32, #32
	tst	x20, #0xf
	b.ne	.LBB19_15
// %bb.8:                               // %"$13"
                                        //   in Loop: Header=BB19_7 Depth=1
	ldp	w1, w8, [x20]
	bfi	x1, x8, #32, #32
	tst	x1, #0x6
	b.ne	.LBB19_11
// %bb.9:                               // %"$17"
                                        //   in Loop: Header=BB19_7 Depth=1
	tbz	w1, #3, .LBB19_14
// %bb.10:                              // %"$20"
                                        //   in Loop: Header=BB19_7 Depth=1
	ldp	w1, w8, [x1]
	bfi	x1, x8, #32, #32
.LBB19_11:                              // %"$16"
                                        //   in Loop: Header=BB19_7 Depth=1
	cmp	x1, x23
	b.eq	.LBB19_16
.LBB19_12:                              // %"$21"
                                        //   in Loop: Header=BB19_7 Depth=1
	tst	x1, #0x6
	b.eq	.LBB19_18
// %bb.13:                              // %"$24"
                                        //   in Loop: Header=BB19_7 Depth=1
	lsr	x8, x1, #32
	stp	w1, w8, [x22]
	ldp	w0, w8, [x24]
	bfi	x0, x8, #32, #32
	and	x1, x1, #0xfffffffffffffff7
	bl	andu
	mov	x8, x24
	b	.LBB19_7
.LBB19_14:                              // %"$19"
                                        //   in Loop: Header=BB19_7 Depth=1
	mov	x0, x1
	bl	evList
	mov	x1, x0
	cmp	x1, x23
	b.ne	.LBB19_12
	b	.LBB19_16
.LBB19_15:                              // %"$15"
	ldp	w1, w8, [x24]
	bfi	x1, x8, #32, #32
.LBB19_16:                              // %"$14"
	ldp	w9, w8, [x22, #8]
	bfi	x9, x8, #32, #32
	str	x9, [x21, :lo12:env]
.LBB19_17:                              // %"$9"
	mov	x0, x1
	mov	sp, x29
	ldp	x20, x19, [sp, #48]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #32]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #64             // 16-byte Folded Reload
	ret
.LBB19_18:                              // %"$10"
	mov	x0, x19
	bl	numErr
.Lfunc_end19:
	.size	_bitAnd, .Lfunc_end19-_bitAnd
	.cfi_endproc
                                        // -- End function
	.globl	_bitOr                          // -- Begin function _bitOr
	.p2align	4
	.type	_bitOr,@function
_bitOr:                                 // @_bitOr
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-64]!           // 16-byte Folded Spill
	stp	x24, x23, [sp, #16]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #32]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #48]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 64
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w30, -56
	.cfi_offset w29, -64
	mov	x19, x0
	ldp	w20, w8, [x0, #8]
	bfi	x20, x8, #32, #32
	ldp	w1, w8, [x20]
	bfi	x1, x8, #32, #32
	tst	x1, #0x6
	b.ne	.LBB20_4
// %bb.1:                               // %"$3"
	tbz	w1, #3, .LBB20_3
// %bb.2:                               // %"$6"
	ldp	w1, w8, [x1]
	bfi	x1, x8, #32, #32
	b	.LBB20_4
.LBB20_3:                               // %"$5"
	mov	x0, x1
	bl	evList
	mov	x1, x0
.LBB20_4:                               // %"$2"
	adrp	x23, SymTab+8
	add	x23, x23, :lo12:SymTab+8
	cmp	x1, x23
	b.eq	.LBB20_17
// %bb.5:                               // %"$8"
	adrp	x21, env
	ldr	x8, [x21, :lo12:env]
	mov	x9, sp
	sub	x22, x9, #16                    // =16
	mov	sp, x22
	mov	w10, #10
	lsr	x11, x8, #32
	stp	w10, wzr, [x9, #-16]
	stp	w8, w11, [x9, #-8]
	tst	x1, #0x6
	str	x22, [x21, :lo12:env]
	b.eq	.LBB20_18
// %bb.6:                               // %"$11"
	and	x9, x1, #0xfffffffffffffff7
	mov	x10, sp
	sub	x24, x10, #16                   // =16
	mov	sp, x24
	lsr	x11, x1, #32
	adrp	x8, env
	add	x8, x8, :lo12:env
	stp	w9, w11, [x10, #-16]
	ldr	x9, [x8]
	lsr	x11, x9, #32
	stp	w9, w11, [x10, #-8]
	mov	x0, x24
.LBB20_7:                               // %"$12"
                                        // =>This Inner Loop Header: Depth=1
	lsr	x9, x0, #32
	stp	w0, w9, [x8]
	ldp	w20, w8, [x20, #8]
	bfi	x20, x8, #32, #32
	tst	x20, #0xf
	b.ne	.LBB20_15
// %bb.8:                               // %"$13"
                                        //   in Loop: Header=BB20_7 Depth=1
	ldp	w1, w8, [x20]
	bfi	x1, x8, #32, #32
	tst	x1, #0x6
	b.ne	.LBB20_11
// %bb.9:                               // %"$17"
                                        //   in Loop: Header=BB20_7 Depth=1
	tbz	w1, #3, .LBB20_14
// %bb.10:                              // %"$20"
                                        //   in Loop: Header=BB20_7 Depth=1
	ldp	w1, w8, [x1]
	bfi	x1, x8, #32, #32
.LBB20_11:                              // %"$16"
                                        //   in Loop: Header=BB20_7 Depth=1
	cmp	x1, x23
	b.eq	.LBB20_16
.LBB20_12:                              // %"$21"
                                        //   in Loop: Header=BB20_7 Depth=1
	tst	x1, #0x6
	b.eq	.LBB20_18
// %bb.13:                              // %"$24"
                                        //   in Loop: Header=BB20_7 Depth=1
	lsr	x8, x1, #32
	stp	w1, w8, [x22]
	ldp	w0, w8, [x24]
	bfi	x0, x8, #32, #32
	and	x1, x1, #0xfffffffffffffff7
	bl	oru
	mov	x8, x24
	b	.LBB20_7
.LBB20_14:                              // %"$19"
                                        //   in Loop: Header=BB20_7 Depth=1
	mov	x0, x1
	bl	evList
	mov	x1, x0
	cmp	x1, x23
	b.ne	.LBB20_12
	b	.LBB20_16
.LBB20_15:                              // %"$15"
	ldp	w1, w8, [x24]
	bfi	x1, x8, #32, #32
.LBB20_16:                              // %"$14"
	ldp	w9, w8, [x22, #8]
	bfi	x9, x8, #32, #32
	str	x9, [x21, :lo12:env]
.LBB20_17:                              // %"$9"
	mov	x0, x1
	mov	sp, x29
	ldp	x20, x19, [sp, #48]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #32]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #64             // 16-byte Folded Reload
	ret
.LBB20_18:                              // %"$10"
	mov	x0, x19
	bl	numErr
.Lfunc_end20:
	.size	_bitOr, .Lfunc_end20-_bitOr
	.cfi_endproc
                                        // -- End function
	.globl	_bitXor                         // -- Begin function _bitXor
	.p2align	4
	.type	_bitXor,@function
_bitXor:                                // @_bitXor
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-64]!           // 16-byte Folded Spill
	stp	x24, x23, [sp, #16]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #32]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #48]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 64
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w30, -56
	.cfi_offset w29, -64
	mov	x19, x0
	ldp	w20, w8, [x0, #8]
	bfi	x20, x8, #32, #32
	ldp	w1, w8, [x20]
	bfi	x1, x8, #32, #32
	tst	x1, #0x6
	b.ne	.LBB21_4
// %bb.1:                               // %"$3"
	tbz	w1, #3, .LBB21_3
// %bb.2:                               // %"$6"
	ldp	w1, w8, [x1]
	bfi	x1, x8, #32, #32
	b	.LBB21_4
.LBB21_3:                               // %"$5"
	mov	x0, x1
	bl	evList
	mov	x1, x0
.LBB21_4:                               // %"$2"
	adrp	x23, SymTab+8
	add	x23, x23, :lo12:SymTab+8
	cmp	x1, x23
	b.eq	.LBB21_17
// %bb.5:                               // %"$8"
	adrp	x21, env
	ldr	x8, [x21, :lo12:env]
	mov	x9, sp
	sub	x22, x9, #16                    // =16
	mov	sp, x22
	mov	w10, #10
	lsr	x11, x8, #32
	stp	w10, wzr, [x9, #-16]
	stp	w8, w11, [x9, #-8]
	tst	x1, #0x6
	str	x22, [x21, :lo12:env]
	b.eq	.LBB21_18
// %bb.6:                               // %"$11"
	and	x9, x1, #0xfffffffffffffff7
	mov	x10, sp
	sub	x24, x10, #16                   // =16
	mov	sp, x24
	lsr	x11, x1, #32
	adrp	x8, env
	add	x8, x8, :lo12:env
	stp	w9, w11, [x10, #-16]
	ldr	x9, [x8]
	lsr	x11, x9, #32
	stp	w9, w11, [x10, #-8]
	mov	x0, x24
.LBB21_7:                               // %"$12"
                                        // =>This Inner Loop Header: Depth=1
	lsr	x9, x0, #32
	stp	w0, w9, [x8]
	ldp	w20, w8, [x20, #8]
	bfi	x20, x8, #32, #32
	tst	x20, #0xf
	b.ne	.LBB21_15
// %bb.8:                               // %"$13"
                                        //   in Loop: Header=BB21_7 Depth=1
	ldp	w1, w8, [x20]
	bfi	x1, x8, #32, #32
	tst	x1, #0x6
	b.ne	.LBB21_11
// %bb.9:                               // %"$17"
                                        //   in Loop: Header=BB21_7 Depth=1
	tbz	w1, #3, .LBB21_14
// %bb.10:                              // %"$20"
                                        //   in Loop: Header=BB21_7 Depth=1
	ldp	w1, w8, [x1]
	bfi	x1, x8, #32, #32
.LBB21_11:                              // %"$16"
                                        //   in Loop: Header=BB21_7 Depth=1
	cmp	x1, x23
	b.eq	.LBB21_16
.LBB21_12:                              // %"$21"
                                        //   in Loop: Header=BB21_7 Depth=1
	tst	x1, #0x6
	b.eq	.LBB21_18
// %bb.13:                              // %"$24"
                                        //   in Loop: Header=BB21_7 Depth=1
	lsr	x8, x1, #32
	stp	w1, w8, [x22]
	ldp	w0, w8, [x24]
	bfi	x0, x8, #32, #32
	and	x1, x1, #0xfffffffffffffff7
	bl	xoru
	mov	x8, x24
	b	.LBB21_7
.LBB21_14:                              // %"$19"
                                        //   in Loop: Header=BB21_7 Depth=1
	mov	x0, x1
	bl	evList
	mov	x1, x0
	cmp	x1, x23
	b.ne	.LBB21_12
	b	.LBB21_16
.LBB21_15:                              // %"$15"
	ldp	w1, w8, [x24]
	bfi	x1, x8, #32, #32
.LBB21_16:                              // %"$14"
	ldp	w9, w8, [x22, #8]
	bfi	x9, x8, #32, #32
	str	x9, [x21, :lo12:env]
.LBB21_17:                              // %"$9"
	mov	x0, x1
	mov	sp, x29
	ldp	x20, x19, [sp, #48]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #32]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #64             // 16-byte Folded Reload
	ret
.LBB21_18:                              // %"$10"
	mov	x0, x19
	bl	numErr
.Lfunc_end21:
	.size	_bitXor, .Lfunc_end21-_bitXor
	.cfi_endproc
                                        // -- End function
	.globl	_sqrt                           // -- Begin function _sqrt
	.p2align	4
	.type	_sqrt,@function
_sqrt:                                  // @_sqrt
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-96]!           // 16-byte Folded Spill
	stp	x28, x27, [sp, #16]             // 16-byte Folded Spill
	stp	x26, x25, [sp, #32]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #48]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #64]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #80]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	mov	x19, x0
	ldp	w21, w8, [x0, #8]
	bfi	x21, x8, #32, #32
	ldp	w20, w8, [x21]
	bfi	x20, x8, #32, #32
	tst	x20, #0x6
	b.ne	.LBB22_4
// %bb.1:                               // %"$3"
	tbz	w20, #3, .LBB22_3
// %bb.2:                               // %"$6"
	ldp	w20, w8, [x20]
	bfi	x20, x8, #32, #32
	b	.LBB22_4
.LBB22_3:                               // %"$5"
	mov	x0, x20
	bl	evList
	mov	x20, x0
.LBB22_4:                               // %"$2"
	adrp	x23, SymTab+8
	add	x23, x23, :lo12:SymTab+8
	cmp	x20, x23
	b.eq	.LBB22_31
// %bb.5:                               // %"$8"
	tst	x20, #0x6
	b.eq	.LBB22_32
// %bb.6:                               // %"$11"
	tbnz	w20, #3, .LBB22_33
// %bb.7:                               // %"$13"
	adrp	x22, env
	ldr	x8, [x22, :lo12:env]
	mov	x9, sp
	sub	x25, x9, #16                    // =16
	mov	sp, x25
	lsr	x10, x20, #32
	stp	w20, w10, [x9, #-16]
	lsr	x10, x8, #32
	stp	w8, w10, [x9, #-8]
	str	x25, [x22, :lo12:env]
	ldp	w9, w8, [x21, #8]
	bfi	x9, x8, #32, #32
	ldp	w19, w8, [x9]
	bfi	x19, x8, #32, #32
	tst	x19, #0x6
	b.ne	.LBB22_11
// %bb.8:                               // %"$15"
	tbz	w19, #3, .LBB22_10
// %bb.9:                               // %"$18"
	ldp	w19, w8, [x19]
	bfi	x19, x8, #32, #32
	b	.LBB22_11
.LBB22_10:                              // %"$17"
	mov	x0, x19
	bl	evList
	mov	x19, x0
.LBB22_11:                              // %"$14"
	ldr	x8, [x22, :lo12:env]
	mov	x9, sp
	sub	x10, x9, #16                    // =16
	mov	sp, x10
	lsr	x11, x19, #32
	lsr	x12, x8, #32
	stp	w19, w11, [x9, #-16]
	stp	w8, w12, [x9, #-8]
	tst	x19, #0x6
	str	x10, [x22, :lo12:env]
	b.eq	.LBB22_13
// %bb.12:                              // %"$19"
	mov	x0, x20
	mov	x1, x19
	bl	mulu
	mov	x20, x0
	lsr	x8, x0, #32
	stp	w20, w8, [x25]
.LBB22_13:                              // %"$20"
	tbz	w20, #1, .LBB22_17
// %bb.14:                              // %"$21"
	mov	x8, xzr
	lsr	x9, x20, #4
	mov	x10, #288230376151711744
.LBB22_15:                              // %"$24"
                                        // =>This Inner Loop Header: Depth=1
	add	x11, x8, x10
	subs	x12, x9, x11
	add	x11, x11, x10
	csel	x9, x9, x12, lo
	csel	x8, x8, x11, lo
	lsr	x8, x8, #1
	lsr	x10, x10, #2
	cbnz	x10, .LBB22_15
// %bb.16:                              // %"$28"
	cmp	x8, x9
	cinc	x9, x8, lo
	cmp	x19, x23
	csel	x8, x8, x9, eq
	mov	w20, #2
	bfi	x20, x8, #4, #60
	b	.LBB22_30
.LBB22_17:                              // %"$22"
	mov	x0, xzr
	mov	w1, #18
	bl	consNum
	mov	x21, x0
	mov	x8, sp
	sub	x24, x8, #16                    // =16
	mov	sp, x24
	lsr	x9, x0, #32
	adrp	x27, env
	add	x27, x27, :lo12:env
	stp	w21, w9, [x8, #-16]
	ldr	x9, [x27]
	lsr	x10, x9, #32
	stp	w9, w10, [x8, #-8]
	str	x24, [x27]
	mov	x8, sp
	sub	x28, x8, #16                    // =16
	mov	sp, x28
	mov	w9, #2
	stp	w9, wzr, [x8, #-16]
	ldr	x9, [x27]
	lsr	x10, x9, #32
	stp	w9, w10, [x8, #-8]
	str	x28, [x27]
	ldp	w0, w8, [x20, #-4]
	bfi	x0, x8, #32, #32
	bl	boxNum
	mov	x22, x0
	mov	x8, sp
	sub	x26, x8, #16                    // =16
	mov	sp, x26
	lsr	x9, x0, #32
	stp	w22, w9, [x8, #-16]
	ldr	x9, [x27]
	lsr	x10, x9, #32
	stp	w9, w10, [x8, #-8]
	mov	x0, x26
.LBB22_18:                              // %"$32"
                                        // =>This Inner Loop Header: Depth=1
	lsr	x8, x0, #32
	stp	w0, w8, [x27]
	ldp	w20, w8, [x20, #4]
	bfi	x20, x8, #32, #32
	tbz	w20, #2, .LBB22_20
// %bb.19:                              // %"$33"
                                        //   in Loop: Header=BB22_18 Depth=1
	ldp	w0, w8, [x20, #-4]
	bfi	x0, x8, #32, #32
	bl	boxNum
	mov	x23, x0
	lsr	x8, x0, #32
	stp	w23, w8, [x22, #4]
	mov	x0, xzr
	mov	x1, x21
	bl	consNum
	mov	x27, x24
	mov	x21, x0
	mov	x22, x23
	b	.LBB22_18
.LBB22_20:                              // %"$34"
	lsr	x8, x20, #32
	stp	w20, w8, [x22, #4]
	ldp	w22, w8, [x26]
	stp	w22, w8, [x25]
	bfi	x22, x8, #32, #32
	adrp	x23, SymTab+8
	add	x23, x23, :lo12:SymTab+8
.LBB22_21:                              // %"$35"
                                        // =>This Inner Loop Header: Depth=1
	mov	x0, x21
	mov	x1, x22
	bl	cmpu
	cmp	x0, #1                          // =1
	b.ge	.LBB22_24
// %bb.22:                              // %"$36"
                                        //   in Loop: Header=BB22_21 Depth=1
	mov	x0, x21
	bl	twiceBig
	mov	x0, x21
	bl	twiceBig
	b	.LBB22_21
.LBB22_23:                              // %"$40"
                                        //   in Loop: Header=BB22_24 Depth=1
	ldp	w0, w8, [x28]
	bfi	x0, x8, #32, #32
	bl	half
	lsr	x8, x0, #32
	stp	w0, w8, [x28]
	mov	x0, x21
	bl	half
	bl	half
	mov	x21, x0
	lsr	x8, x0, #32
	stp	w21, w8, [x24]
	cmp	x0, #2                          // =2
	b.eq	.LBB22_26
.LBB22_24:                              // %"$38"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w0, w8, [x28]
	bfi	x0, x8, #32, #32
	mov	x1, x21
	bl	addu
	mov	x20, x0
	lsr	x8, x0, #32
	stp	w20, w8, [x26]
	mov	x0, x22
	mov	x1, x20
	bl	cmpu
	tbnz	x0, #63, .LBB22_23
// %bb.25:                              // %"$39"
                                        //   in Loop: Header=BB22_24 Depth=1
	mov	x0, x22
	mov	x1, x20
	bl	subu
	mov	x22, x0
	lsr	x8, x0, #32
	stp	w22, w8, [x25]
	mov	x0, x20
	mov	x1, x21
	bl	addu
	lsr	x8, x0, #32
	stp	w0, w8, [x28]
	b	.LBB22_23
.LBB22_26:                              // %"$42"
	ldp	w20, w8, [x28]
	bfi	x20, x8, #32, #32
	cmp	x19, x23
	b.ne	.LBB22_28
// %bb.27:
	mov	w8, #1
	adrp	x22, env
	tbz	w8, #0, .LBB22_29
	b	.LBB22_30
.LBB22_28:                              // %"$44"
	mov	x0, x20
	mov	x1, x22
	bl	cmpu
	lsr	x8, x0, #63
	eor	w8, w8, #0x1
	adrp	x22, env
	tbnz	w8, #0, .LBB22_30
.LBB22_29:                              // %"$46"
	mov	x0, x20
	mov	w1, #18
	bl	addu
	mov	x20, x0
.LBB22_30:                              // %"$23"
	ldp	w9, w8, [x25, #8]
	bfi	x9, x8, #32, #32
	str	x9, [x22, :lo12:env]
.LBB22_31:                              // %"$9"
	mov	x0, x20
	mov	sp, x29
	ldp	x20, x19, [sp, #80]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #64]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #48]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #32]             // 16-byte Folded Reload
	ldp	x28, x27, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #96             // 16-byte Folded Reload
	ret
.LBB22_32:                              // %"$10"
	mov	x0, x19
	mov	x1, x20
	bl	numErr
.LBB22_33:                              // %"$12"
	mov	x0, x19
	mov	x1, x20
	bl	argErr
.Lfunc_end22:
	.size	_sqrt, .Lfunc_end22-_sqrt
	.cfi_endproc
                                        // -- End function
	.globl	_seed                           // -- Begin function _seed
	.p2align	4
	.type	_seed,@function
_seed:                                  // @_seed
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w0, w8, [x9]
	bfi	x0, x8, #32, #32
	tst	x0, #0x6
	b.ne	.LBB23_4
// %bb.1:                               // %"$3"
	tbz	w0, #3, .LBB23_3
// %bb.2:                               // %"$6"
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB23_4
.LBB23_3:                               // %"$5"
	bl	evList
.LBB23_4:                               // %"$2"
	bl	initSeed
	mov	x8, #32557
	movk	x8, #19605, lsl #16
	movk	x8, #62509, lsl #32
	movk	x8, #22609, lsl #48
	umulh	x9, x0, x8
	mul	x8, x0, x8
	adrp	x10, ($SeedL)
	str	x8, [x10, :lo12:($SeedL)]
	adrp	x10, ($SeedH)
	str	x9, [x10, :lo12:($SeedH)]
	lsr	x8, x8, #29
	and	x8, x8, #0x7fffffff8
	orr	x0, x8, #0x2
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end23:
	.size	_seed, .Lfunc_end23-_seed
	.cfi_endproc
                                        // -- End function
	.globl	_hash                           // -- Begin function _hash
	.p2align	4
	.type	_hash,@function
_hash:                                  // @_hash
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w0, w8, [x9]
	bfi	x0, x8, #32, #32
	tst	x0, #0x6
	b.ne	.LBB24_4
// %bb.1:                               // %"$3"
	tbz	w0, #3, .LBB24_3
// %bb.2:                               // %"$6"
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB24_4
.LBB24_3:                               // %"$5"
	bl	evList
.LBB24_4:                               // %"$2"
	bl	initSeed
	mov	x8, xzr
	mov	w9, #64
	mov	w10, #16386
	movk	w10, #1, lsl #16
.LBB24_5:                               // %"$7"
                                        // =>This Inner Loop Header: Depth=1
	eor	w11, w0, w8
	eor	x12, x8, x10
	tst	w11, #0x1
	csel	x8, x8, x12, eq
	lsr	x0, x0, #1
	lsr	x8, x8, #1
	subs	x9, x9, #1                      // =1
	b.ne	.LBB24_5
// %bb.6:                               // %"$11"
	lsl	x8, x8, #4
	add	x0, x8, #18                     // =18
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end24:
	.size	_hash, .Lfunc_end24-_hash
	.cfi_endproc
                                        // -- End function
	.globl	_rand                           // -- Begin function _rand
	.p2align	4
	.type	_rand,@function
_rand:                                  // @_rand
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x30, x23, [sp, #-48]!           // 16-byte Folded Spill
	stp	x22, x21, [sp, #16]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #32]             // 16-byte Folded Spill
	.cfi_def_cfa_offset 48
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w30, -48
	mov	x19, x0
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w1, w8, [x9]
	bfi	x1, x8, #32, #32
	ldp	w20, w21, [x9, #8]
	tst	x1, #0x6
	b.ne	.LBB25_4
// %bb.1:                               // %"$3"
	tbz	w1, #3, .LBB25_3
// %bb.2:                               // %"$6"
	ldp	w1, w8, [x1]
	bfi	x1, x8, #32, #32
	b	.LBB25_4
.LBB25_3:                               // %"$5"
	mov	x0, x1
	bl	evList
	mov	x1, x0
.LBB25_4:                               // %"$2"
	adrp	x22, ($SeedL)
	adrp	x23, ($SeedH)
	ldr	x8, [x22, :lo12:($SeedL)]
	mov	x9, #32557
	movk	x9, #19605, lsl #16
	movk	x9, #62509, lsl #32
	movk	x9, #22609, lsl #48
	umulh	x10, x8, x9
	mul	x8, x8, x9
	adds	x8, x8, #1                      // =1
	str	x8, [x22, :lo12:($SeedL)]
	cinc	x9, x10, hs
	str	x9, [x23, :lo12:($SeedH)]
	adrp	x9, SymTab+8
	add	x9, x9, :lo12:SymTab+8
	cmp	x1, x9
	b.ne	.LBB25_6
// %bb.5:                               // %"$9"
	lsr	x8, x8, #29
	and	x8, x8, #0x7fffffff8
	orr	x1, x8, #0x2
	b	.LBB25_12
.LBB25_6:                               // %"$8"
	adrp	x9, SymTab+216
	add	x9, x9, :lo12:SymTab+216
	cmp	x1, x9
	b.ne	.LBB25_9
// %bb.7:                               // %"$11"
	cmn	x8, x8
	b.hs	.LBB25_12
// %bb.8:                               // %"$13"
	adrp	x1, SymTab+8
	add	x1, x1, :lo12:SymTab+8
	b	.LBB25_12
.LBB25_9:                               // %"$10"
	bfi	x20, x21, #32, #32
	mov	x0, x19
	bl	xCnt
	mov	x21, x0
	mov	x0, x19
	mov	x1, x20
	bl	evCnt
	ldr	x8, [x23, :lo12:($SeedH)]
	ldr	x9, [x22, :lo12:($SeedL)]
	extr	x8, x8, x9, #32
	sub	x9, x0, x21
	add	x9, x9, #1                      // =1
	udiv	x10, x8, x9
	msub	x8, x10, x9, x8
	adds	x8, x8, x21
	b.mi	.LBB25_11
// %bb.10:                              // %"$16"
	mov	w1, #2
	bfi	x1, x8, #4, #60
	b	.LBB25_12
.LBB25_11:                              // %"$15"
	mov	w9, #10
	sub	x1, x9, x8, lsl #4
.LBB25_12:                              // %"$7"
	mov	x0, x1
	ldp	x20, x19, [sp, #32]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #16]             // 16-byte Folded Reload
	ldp	x30, x23, [sp], #48             // 16-byte Folded Reload
	ret
.Lfunc_end25:
	.size	_rand, .Lfunc_end25-_rand
	.cfi_endproc
                                        // -- End function
	.globl	_name                           // -- Begin function _name
	.p2align	4
	.type	_name,@function
_name:                                  // @_name
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-32]!           // 16-byte Folded Spill
	stp	x20, x19, [sp, #16]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 32
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w30, -24
	.cfi_offset w29, -32
	mov	x19, x0
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w1, w8, [x9]
	bfi	x1, x8, #32, #32
	tst	x1, #0x6
	b.ne	.LBB26_4
// %bb.1:                               // %"$3"
	tbz	w1, #3, .LBB26_3
// %bb.2:                               // %"$6"
	ldp	w1, w8, [x1]
	bfi	x1, x8, #32, #32
	b	.LBB26_4
.LBB26_3:                               // %"$5"
	mov	x0, x1
	bl	evList
	mov	x1, x0
.LBB26_4:                               // %"$2"
	eor	w8, w1, #0x8
	tst	x8, #0xe
	b.ne	.LBB26_13
// %bb.5:                               // %"$8"
	ldp	w0, w8, [x1, #-8]
	bfi	x0, x8, #32, #32
	tbz	w0, #3, .LBB26_9
// %bb.6:                               // %"$9"
	mov	x8, sp
	sub	x19, x8, #32                    // =32
	mov	sp, x19
	mov	w9, #4
	stp	w9, wzr, [x8, #-32]
	stur	wzr, [x8, #-12]
	mov	w9, #2
	mov	x10, x19
	str	w9, [x10, #16]!
	adrp	x20, env
	ldr	x9, [x20, :lo12:env]
	lsr	x11, x9, #32
	stp	w9, w11, [x8, #-8]
	str	x10, [x20, :lo12:env]
	tst	x0, #0x6
	b.ne	.LBB26_8
.LBB26_7:                               // %"$13"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w0, w8, [x0, #8]
	bfi	x0, x8, #32, #32
	tst	x0, #0x6
	b.eq	.LBB26_7
.LBB26_8:                               // %"$14"
	and	x0, x0, #0xfffffffffffffff7
	mov	x1, x19
	bl	packExtNm
	ldp	w0, w8, [x19, #16]
	bfi	x0, x8, #32, #32
	bl	consStr
	ldp	w9, w8, [x19, #24]
	bfi	x9, x8, #32, #32
	str	x9, [x20, :lo12:env]
	b	.LBB26_12
.LBB26_9:                               // %"$15"
                                        // =>This Inner Loop Header: Depth=1
	tst	x0, #0x6
	b.ne	.LBB26_11
// %bb.10:                              // %"$16"
                                        //   in Loop: Header=BB26_9 Depth=1
	ldp	w0, w8, [x0, #8]
	bfi	x0, x8, #32, #32
	b	.LBB26_9
.LBB26_11:                              // %"$17"
	bl	consStr
.LBB26_12:                              // %"$11"
	mov	sp, x29
	ldp	x20, x19, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #32             // 16-byte Folded Reload
	ret
.LBB26_13:                              // %"$7"
	mov	x0, x19
	bl	symErr
.Lfunc_end26:
	.size	_name, .Lfunc_end26-_name
	.cfi_endproc
                                        // -- End function
	.globl	_nsp                            // -- Begin function _nsp
	.p2align	4
	.type	_nsp,@function
_nsp:                                   // @_nsp
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x30, x23, [sp, #-48]!           // 16-byte Folded Spill
	stp	x22, x21, [sp, #16]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #32]             // 16-byte Folded Spill
	.cfi_def_cfa_offset 48
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w30, -48
	mov	x20, x0
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w19, w8, [x9]
	bfi	x19, x8, #32, #32
	tst	x19, #0x6
	b.ne	.LBB27_4
// %bb.1:                               // %"$3"
	tbz	w19, #3, .LBB27_3
// %bb.2:                               // %"$6"
	ldp	w19, w8, [x19]
	bfi	x19, x8, #32, #32
	b	.LBB27_4
.LBB27_3:                               // %"$5"
	mov	x0, x19
	bl	evList
	mov	x19, x0
.LBB27_4:                               // %"$2"
	eor	w8, w19, #0x8
	tst	x8, #0xe
	b.ne	.LBB27_15
// %bb.5:                               // %"$8"
	ldp	w20, w8, [x19, #-8]
	bfi	x20, x8, #32, #32
	tbz	w20, #3, .LBB27_7
// %bb.6:
	adrp	x21, SymTab+8
	add	x21, x21, :lo12:SymTab+8
	b	.LBB27_14
.LBB27_7:                               // %"$12"
                                        // =>This Inner Loop Header: Depth=1
	tst	x20, #0x6
	b.ne	.LBB27_9
// %bb.8:                               // %"$13"
                                        //   in Loop: Header=BB27_7 Depth=1
	ldp	w20, w8, [x20, #8]
	bfi	x20, x8, #32, #32
	b	.LBB27_7
.LBB27_9:                               // %"$14"
	adrp	x8, env+88
	add	x8, x8, :lo12:env+88
	adrp	x21, SymTab+8
	add	x21, x21, :lo12:SymTab+8
.LBB27_10:                              // %"$15"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w22, w9, [x8]
	bfi	x22, x9, #32, #32
	tst	x22, #0xf
	b.ne	.LBB27_14
// %bb.11:                              // %"$16"
                                        //   in Loop: Header=BB27_10 Depth=1
	ldp	w23, w8, [x22]
	bfi	x23, x8, #32, #32
	ldp	w9, w8, [x23]
	bfi	x9, x8, #32, #32
	ldp	w1, w8, [x9, #8]
	bfi	x1, x8, #32, #32
	mov	x0, x20
	bl	isIntern
	cmp	x19, x0
	b.eq	.LBB27_13
// %bb.12:                              // %"$19"
                                        //   in Loop: Header=BB27_10 Depth=1
	add	x8, x22, #8                     // =8
	b	.LBB27_10
.LBB27_13:
	mov	x21, x23
.LBB27_14:                              // %"$11"
	mov	x0, x21
	ldp	x20, x19, [sp, #32]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #16]             // 16-byte Folded Reload
	ldp	x30, x23, [sp], #48             // 16-byte Folded Reload
	ret
.LBB27_15:                              // %"$7"
	mov	x0, x20
	mov	x1, x19
	bl	symErr
.Lfunc_end27:
	.size	_nsp, .Lfunc_end27-_nsp
	.cfi_endproc
                                        // -- End function
	.globl	_spQ                            // -- Begin function _spQ
	.p2align	4
	.type	_spQ,@function
_spQ:                                   // @_spQ
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w0, w8, [x9]
	bfi	x0, x8, #32, #32
	tst	x0, #0x6
	b.ne	.LBB28_4
// %bb.1:                               // %"$3"
	tbz	w0, #3, .LBB28_3
// %bb.2:                               // %"$6"
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB28_4
.LBB28_3:                               // %"$5"
	bl	evList
.LBB28_4:                               // %"$2"
	bl	isBlank
	adrp	x8, SymTab+8
	add	x8, x8, :lo12:SymTab+8
	add	x9, x8, #208                    // =208
	tst	w0, #0x1
	csel	x0, x9, x8, ne
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end28:
	.size	_spQ, .Lfunc_end28-_spQ
	.cfi_endproc
                                        // -- End function
	.globl	_patQ                           // -- Begin function _patQ
	.p2align	4
	.type	_patQ,@function
_patQ:                                  // @_patQ
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x30, x19, [sp, #-16]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w19, -8
	.cfi_offset w30, -16
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w19, w8, [x9]
	bfi	x19, x8, #32, #32
	tst	x19, #0x6
	b.ne	.LBB29_4
// %bb.1:                               // %"$3"
	tbz	w19, #3, .LBB29_3
// %bb.2:                               // %"$6"
	ldp	w19, w8, [x19]
	bfi	x19, x8, #32, #32
	b	.LBB29_4
.LBB29_3:                               // %"$5"
	mov	x0, x19
	bl	evList
	mov	x19, x0
.LBB29_4:                               // %"$2"
	eor	w8, w19, #0x8
	tst	x8, #0xe
	b.eq	.LBB29_6
// %bb.5:
	mov	w8, wzr
	b	.LBB29_7
.LBB29_6:                               // %"$8"
	mov	x0, x19
	bl	firstChar
	cmp	w0, #64                         // =64
	cset	w8, eq
.LBB29_7:                               // %"$7"
	adrp	x9, SymTab+8
	add	x9, x9, :lo12:SymTab+8
	cmp	w8, #0                          // =0
	csel	x0, x19, x9, ne
	ldp	x30, x19, [sp], #16             // 16-byte Folded Reload
	ret
.Lfunc_end29:
	.size	_patQ, .Lfunc_end29-_patQ
	.cfi_endproc
                                        // -- End function
	.globl	_funQ                           // -- Begin function _funQ
	.p2align	4
	.type	_funQ,@function
_funQ:                                  // @_funQ
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w0, w8, [x9]
	bfi	x0, x8, #32, #32
	tst	x0, #0x6
	b.ne	.LBB30_4
// %bb.1:                               // %"$3"
	tbz	w0, #3, .LBB30_3
// %bb.2:                               // %"$6"
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB30_4
.LBB30_3:                               // %"$5"
	bl	evList
.LBB30_4:                               // %"$2"
	bl	funq
	adrp	x8, SymTab+8
	add	x8, x8, :lo12:SymTab+8
	cmp	x0, #0                          // =0
	csel	x0, x0, x8, ne
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end30:
	.size	_funQ, .Lfunc_end30-_funQ
	.cfi_endproc
                                        // -- End function
	.globl	_getd                           // -- Begin function _getd
	.p2align	4
	.type	_getd,@function
_getd:                                  // @_getd
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x30, x19, [sp, #-16]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w19, -8
	.cfi_offset w30, -16
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w0, w8, [x9]
	bfi	x0, x8, #32, #32
	tst	x0, #0x6
	b.ne	.LBB31_4
// %bb.1:                               // %"$3"
	tbz	w0, #3, .LBB31_3
// %bb.2:                               // %"$6"
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB31_4
.LBB31_3:                               // %"$5"
	bl	evList
.LBB31_4:                               // %"$2"
	eor	w8, w0, #0x8
	tst	x8, #0xe
	b.ne	.LBB31_6
// %bb.5:                               // %"$8"
	ldp	w19, w8, [x0]
	bfi	x19, x8, #32, #32
	mov	x0, x19
	bl	funq
	cbnz	x0, .LBB31_7
.LBB31_6:                               // %"$10"
	adrp	x19, SymTab+8
	add	x19, x19, :lo12:SymTab+8
.LBB31_7:                               // %"$7"
	mov	x0, x19
	ldp	x30, x19, [sp], #16             // 16-byte Folded Reload
	ret
.Lfunc_end31:
	.size	_getd, .Lfunc_end31-_getd
	.cfi_endproc
                                        // -- End function
	.globl	_all                            // -- Begin function _all
	.p2align	4
	.type	_all,@function
_all:                                   // @_all
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-32]!                // 8-byte Folded Spill
	stp	x20, x19, [sp, #16]             // 16-byte Folded Spill
	.cfi_def_cfa_offset 32
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w30, -32
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w1, w8, [x9]
	bfi	x1, x8, #32, #32
	tst	x1, #0x6
	b.ne	.LBB32_4
// %bb.1:                               // %"$3"
	tbz	w1, #3, .LBB32_3
// %bb.2:                               // %"$6"
	ldp	w1, w8, [x1]
	bfi	x1, x8, #32, #32
	b	.LBB32_4
.LBB32_3:                               // %"$5"
	mov	x0, x1
	bl	evList
	mov	x1, x0
.LBB32_4:                               // %"$2"
	adrp	x8, SymTab+8
	add	x8, x8, :lo12:SymTab+8
	cmp	x1, x8
	b.ne	.LBB32_7
// %bb.5:                               // %"$9"
	adrp	x8, env+88
	ldr	x20, [x8, :lo12:env+88]
.LBB32_6:                               // %"$10"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w9, w8, [x20]
	bfi	x9, x8, #32, #32
	ldp	w20, w8, [x20, #8]
	bfi	x20, x8, #32, #32
	ldp	w9, w8, [x9]
	bfi	x9, x8, #32, #32
	ldp	w9, w8, [x9, #8]
	bfi	x9, x8, #32, #32
	ldp	w19, w8, [x9]
	bfi	x19, x8, #32, #32
	ldp	w0, w8, [x9, #8]
	bfi	x0, x8, #32, #32
	bl	consTree
	mov	x1, x0
	mov	x0, x19
	bl	consTree
	mov	x1, x0
	tst	x20, #0xf
	b.eq	.LBB32_6
	b	.LBB32_13
.LBB32_7:                               // %"$8"
	adrp	x9, SymTab+216
	add	x9, x9, :lo12:SymTab+216
	cmp	x1, x9
	b.ne	.LBB32_10
// %bb.8:                               // %"$15"
	adrp	x8, gcData
	add	x8, x8, :lo12:gcData
	ldp	x19, x0, [x8]
.LBB32_9:                               // %"$7"
	adrp	x1, SymTab+8
	add	x1, x1, :lo12:SymTab+8
	bl	consTree
	mov	x1, x0
	mov	x0, x19
	b	.LBB32_12
.LBB32_10:                              // %"$14"
	tst	x1, #0x6
	b.eq	.LBB32_14
// %bb.11:                              // %"$17"
	adrp	x8, ($Extern)
	ldr	x0, [x8, :lo12:($Extern)]
	adrp	x1, SymTab+8
	add	x1, x1, :lo12:SymTab+8
.LBB32_12:                              // %"$7"
	bl	consTree
	mov	x1, x0
.LBB32_13:                              // %"$7"
	mov	x0, x1
	ldp	x20, x19, [sp, #16]             // 16-byte Folded Reload
	ldr	x30, [sp], #32                  // 8-byte Folded Reload
	ret
.LBB32_14:                              // %"$16"
	tbz	w1, #3, .LBB32_17
// %bb.15:                              // %"$19"
	ldp	w9, w8, [x1]
	bfi	x9, x8, #32, #32
	ldp	w8, w10, [x9, #8]
	bfi	x8, x10, #32, #32
	tst	x8, #0xf
	b.eq	.LBB32_22
// %bb.16:
	adrp	x1, SymTab+8
	add	x1, x1, :lo12:SymTab+8
	b	.LBB32_13
.LBB32_17:                              // %"$18"
	ldp	w11, w10, [x1]
	bfi	x11, x10, #32, #32
	cmp	x11, x8
	b.ne	.LBB32_19
// %bb.18:                              // %"$24"
	adrp	x9, env+88
	ldr	x9, [x9, :lo12:env+88]
	ldp	w9, w10, [x9]
	bfi	x9, x10, #32, #32
	ldp	w9, w10, [x9]
	bfi	x9, x10, #32, #32
	ldp	w11, w10, [x1, #8]
	bfi	x11, x10, #32, #32
	cmp	x11, x8
	add	x8, x9, #8                      // =8
	csel	x8, x8, x9, ne
	b	.LBB32_25
.LBB32_19:                              // %"$23"
	ldp	w11, w10, [x1]
	bfi	x11, x10, #32, #32
	cmp	x11, x9
	b.ne	.LBB32_23
// %bb.20:                              // %"$29"
	ldp	w10, w9, [x1, #8]
	bfi	x10, x9, #32, #32
	cmp	x10, x8
	b.ne	.LBB32_24
// %bb.21:                              // %"$30"
	adrp	x8, gcData
	add	x8, x8, :lo12:gcData
	b	.LBB32_25
.LBB32_22:                              // %"$20"
	ldp	w19, w9, [x8]
	bfi	x19, x9, #32, #32
	ldp	w0, w9, [x8, #8]
	bfi	x0, x9, #32, #32
	b	.LBB32_9
.LBB32_23:                              // %"$28"
	adrp	x8, ($Extern)
	ldr	x1, [x8, :lo12:($Extern)]
	b	.LBB32_13
.LBB32_24:                              // %"$31"
	adrp	x8, gcData+8
	add	x8, x8, :lo12:gcData+8
.LBB32_25:                              // %"$32"
	ldp	w1, w9, [x8]
	bfi	x1, x9, #32, #32
	b	.LBB32_13
.Lfunc_end32:
	.size	_all, .Lfunc_end32-_all
	.cfi_endproc
                                        // -- End function
	.globl	_symbols                        // -- Begin function _symbols
	.p2align	4
	.type	_symbols,@function
_symbols:                               // @_symbols
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-80]!           // 16-byte Folded Spill
	stp	x26, x25, [sp, #16]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #32]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #48]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #64]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 80
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w30, -72
	.cfi_offset w29, -80
	ldp	w8, w9, [x0, #8]
	bfi	x8, x9, #32, #32
	tst	x8, #0xf
	b.eq	.LBB33_2
// %bb.1:                               // %"$2"
	adrp	x8, env+88
	ldr	x0, [x8, :lo12:env+88]
	b	.LBB33_32
.LBB33_2:                               // %"$3"
	mov	x19, x0
	ldp	w20, w9, [x8]
	bfi	x20, x9, #32, #32
	ldp	w22, w9, [x8, #8]
	bfi	x22, x9, #32, #32
	tst	x20, #0x6
	b.ne	.LBB33_5
// %bb.3:                               // %"$6"
	tbz	w20, #3, .LBB33_23
// %bb.4:                               // %"$9"
	ldp	w20, w8, [x20]
	bfi	x20, x8, #32, #32
.LBB33_5:                               // %"$5"
	tst	x20, #0xf
	b.eq	.LBB33_24
.LBB33_6:                               // %"$11"
	eor	w8, w20, #0x8
	tst	x8, #0xe
	b.ne	.LBB33_44
// %bb.7:                               // %"$38"
	ldp	w9, w8, [x20]
	bfi	x9, x8, #32, #32
	mov	w8, #1
	adrp	x21, SymTab+8
	add	x21, x21, :lo12:SymTab+8
	cmp	x9, x20
	cset	w10, eq
	cmp	x9, x21
	csel	w8, w8, w10, eq
	adrp	x23, SymTab+40
	add	x23, x23, :lo12:SymTab+40
	cbz	w8, .LBB33_10
// %bb.8:                               // %"$40"
	add	x8, x21, #208                   // =208
	cmp	x8, x20
	ccmp	x20, x21, #0, hs
	b.hs	.LBB33_46
// %bb.9:                               // %"$46"
	mov	x0, x21
	mov	x1, x21
	bl	cons
	mov	x1, x0
	add	x0, x21, #32                    // =32
	bl	cons
	lsr	x8, x0, #32
	stp	w0, w8, [x20]
	b	.LBB33_12
.LBB33_10:                              // %"$41"
	ldp	w8, w9, [x20]
	bfi	x8, x9, #32, #32
	tst	x8, #0xf
	b.ne	.LBB33_45
// %bb.11:                              // %"$48"
	ldp	w8, w9, [x8]
	bfi	x8, x9, #32, #32
	cmp	x23, x8
	b.ne	.LBB33_45
.LBB33_12:                              // %"$42"
	adrp	x21, SymTab+8
	add	x21, x21, :lo12:SymTab+8
	mov	x0, x20
	mov	x1, x21
	bl	cons
	mov	x20, x0
	adrp	x8, env
	ldr	x9, [x8, :lo12:env]
	mov	x10, sp
	sub	x24, x10, #16                   // =16
	mov	sp, x24
	lsr	x11, x0, #32
	lsr	x12, x9, #32
	stp	w20, w11, [x10, #-16]
	stp	w9, w12, [x10, #-8]
	mov	x25, x0
	str	x24, [x8, :lo12:env]
	tst	x22, #0xf
	b.ne	.LBB33_21
.LBB33_13:                              // %"$52"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w1, w8, [x22]
	bfi	x1, x8, #32, #32
	ldp	w22, w26, [x22, #8]
	tst	x1, #0x6
	b.ne	.LBB33_17
// %bb.14:                              // %"$55"
                                        //   in Loop: Header=BB33_13 Depth=1
	tbz	w1, #3, .LBB33_16
// %bb.15:                              // %"$58"
                                        //   in Loop: Header=BB33_13 Depth=1
	ldp	w1, w8, [x1]
	bfi	x1, x8, #32, #32
	b	.LBB33_17
.LBB33_16:                              // %"$57"
                                        //   in Loop: Header=BB33_13 Depth=1
	mov	x0, x1
	bl	evList
	mov	x1, x0
.LBB33_17:                              // %"$54"
                                        //   in Loop: Header=BB33_13 Depth=1
	eor	w8, w1, #0x8
	tst	x8, #0xe
	b.ne	.LBB33_43
// %bb.18:                              // %"$60"
                                        //   in Loop: Header=BB33_13 Depth=1
	ldp	w8, w9, [x1]
	bfi	x8, x9, #32, #32
	tst	x8, #0xf
	b.ne	.LBB33_42
// %bb.19:                              // %"$62"
                                        //   in Loop: Header=BB33_13 Depth=1
	ldp	w8, w9, [x8]
	bfi	x8, x9, #32, #32
	cmp	x23, x8
	b.ne	.LBB33_42
// %bb.20:                              // %"$64"
                                        //   in Loop: Header=BB33_13 Depth=1
	bfi	x22, x26, #32, #32
	mov	x0, x1
	mov	x1, x21
	bl	cons
	lsr	x8, x0, #32
	stp	w0, w8, [x25, #8]
	mov	x25, x0
	tst	x22, #0xf
	b.eq	.LBB33_13
.LBB33_21:                              // %"$53"
	adrp	x19, env
	add	x19, x19, :lo12:env
	ldr	x0, [x19, #88]
	str	x20, [x19, #88]
	ldp	w20, w8, [x24, #8]
.LBB33_22:                              // %"$12"
	bfi	x20, x8, #32, #32
	b	.LBB33_31
.LBB33_23:                              // %"$8"
	mov	x0, x20
	bl	evList
	mov	x20, x0
	tst	x20, #0xf
	b.ne	.LBB33_6
.LBB33_24:                              // %"$13.preheader"
	mov	x8, x20
	adrp	x9, SymTab+40
	add	x9, x9, :lo12:SymTab+40
.LBB33_25:                              // %"$13"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w1, w10, [x8]
	eor	w11, w1, #0x8
	bfi	x1, x10, #32, #32
	tst	x11, #0xe
	b.ne	.LBB33_43
// %bb.26:                              // %"$15"
                                        //   in Loop: Header=BB33_25 Depth=1
	ldp	w10, w11, [x1]
	bfi	x10, x11, #32, #32
	tst	x10, #0xf
	b.ne	.LBB33_42
// %bb.27:                              // %"$17"
                                        //   in Loop: Header=BB33_25 Depth=1
	ldp	w10, w11, [x10]
	bfi	x10, x11, #32, #32
	cmp	x9, x10
	b.ne	.LBB33_42
// %bb.28:                              // %"$19"
                                        //   in Loop: Header=BB33_25 Depth=1
	ldp	w8, w10, [x8, #8]
	bfi	x8, x10, #32, #32
	tst	x8, #0xf
	b.eq	.LBB33_25
// %bb.29:                              // %"$21"
	tst	x22, #0xf
	b.eq	.LBB33_33
// %bb.30:                              // %"$22"
	adrp	x19, env+88
	add	x19, x19, :lo12:env+88
	ldr	x0, [x19]
.LBB33_31:                              // %"$12"
	lsr	x8, x20, #32
	stp	w20, w8, [x19]
.LBB33_32:                              // %"$4"
	mov	sp, x29
	ldp	x20, x19, [sp, #64]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #48]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #32]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #80             // 16-byte Folded Reload
	ret
.LBB33_33:                              // %"$23"
	adrp	x19, env
	add	x19, x19, :lo12:env
	ldr	x21, [x19, #88]
	ldr	x8, [x19]
	mov	x9, sp
	sub	x23, x9, #16                    // =16
	mov	sp, x23
	lsr	x10, x21, #32
	lsr	x11, x8, #32
	stp	w21, w10, [x9, #-16]
	stp	w8, w11, [x9, #-8]
	str	x23, [x19]
	str	x20, [x19, #88]
.LBB33_34:                              // %"$25"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w0, w8, [x22]
	bfi	x0, x8, #32, #32
	ldp	w22, w8, [x22, #8]
	bfi	x22, x8, #32, #32
	tst	x22, #0xf
	b.ne	.LBB33_37
// %bb.35:                              // %"$26"
                                        //   in Loop: Header=BB33_34 Depth=1
	tst	x0, #0xf
	b.ne	.LBB33_34
// %bb.36:                              // %"$35"
                                        //   in Loop: Header=BB33_34 Depth=1
	bl	evList
	b	.LBB33_34
.LBB33_37:                              // %"$28"
	tst	x0, #0x6
	b.ne	.LBB33_41
// %bb.38:                              // %"$30"
	tbz	w0, #3, .LBB33_40
// %bb.39:                              // %"$33"
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB33_41
.LBB33_40:                              // %"$32"
	bl	evList
.LBB33_41:                              // %"$27"
	str	x21, [x19, #88]
	ldp	w20, w8, [x23, #8]
	b	.LBB33_22
.LBB33_42:                              // %"$18"
	mov	x0, x19
	bl	symNspErr
.LBB33_43:                              // %"$14"
	mov	x0, x19
	bl	symErr
.LBB33_44:                              // %"$37"
	mov	x0, x19
	mov	x1, x20
	bl	symErr
.LBB33_45:                              // %"$49"
	mov	x0, x19
	mov	x1, x20
	bl	symNspErr
.LBB33_46:                              // %"$45"
	mov	x0, x19
	mov	x1, x20
	bl	protErr
.Lfunc_end33:
	.size	_symbols, .Lfunc_end33-_symbols
	.cfi_endproc
                                        // -- End function
	.globl	_intern                         // -- Begin function _intern
	.p2align	4
	.type	_intern,@function
_intern:                                // @_intern
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-64]!           // 16-byte Folded Spill
	stp	x24, x23, [sp, #16]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #32]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #48]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 64
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w30, -56
	.cfi_offset w29, -64
	mov	x20, x0
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w19, w8, [x9]
	bfi	x19, x8, #32, #32
	ldp	w24, w21, [x9, #8]
	tst	x19, #0x6
	b.ne	.LBB34_4
// %bb.1:                               // %"$3"
	tbz	w19, #3, .LBB34_3
// %bb.2:                               // %"$6"
	ldp	w19, w8, [x19]
	bfi	x19, x8, #32, #32
	b	.LBB34_4
.LBB34_3:                               // %"$5"
	mov	x0, x19
	bl	evList
	mov	x19, x0
.LBB34_4:                               // %"$2"
	eor	w8, w19, #0x8
	tst	x8, #0xe
	b.ne	.LBB34_21
// %bb.5:                               // %"$8"
	adrp	x22, env
	ldr	x8, [x22, :lo12:env]
	mov	x9, sp
	sub	x23, x9, #16                    // =16
	mov	sp, x23
	lsr	x10, x19, #32
	stp	w19, w10, [x9, #-16]
	lsr	x10, x8, #32
	stp	w8, w10, [x9, #-8]
	str	x23, [x22, :lo12:env]
	ldp	w20, w8, [x19, #-8]
	bfi	x20, x8, #32, #32
	tbz	w20, #3, .LBB34_7
// %bb.6:
	adrp	x21, SymTab+8
	add	x21, x21, :lo12:SymTab+8
	b	.LBB34_20
.LBB34_7:                               // %"$12.preheader"
	bfi	x24, x21, #32, #32
	tst	x20, #0x6
	b.ne	.LBB34_9
.LBB34_8:                               // %"$13"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w20, w8, [x20, #8]
	bfi	x20, x8, #32, #32
	tst	x20, #0x6
	b.eq	.LBB34_8
.LBB34_9:                               // %"$14"
	cmp	x20, #2                         // =2
	adrp	x21, SymTab+8
	add	x21, x21, :lo12:SymTab+8
	b.eq	.LBB34_20
// %bb.10:                              // %"$15"
	ldp	w0, w8, [x24]
	bfi	x0, x8, #32, #32
	tst	x0, #0x6
	b.ne	.LBB34_13
// %bb.11:                              // %"$18"
	tbz	w0, #3, .LBB34_15
// %bb.12:                              // %"$21"
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
.LBB34_13:                              // %"$17"
	cmp	x0, x21
	b.ne	.LBB34_16
.LBB34_14:                              // %"$22"
	adrp	x8, env+88
	ldr	x8, [x8, :lo12:env+88]
	ldp	w10, w9, [x8]
	bfi	x10, x9, #32, #32
	ldp	w10, w9, [x10]
	bfi	x10, x9, #32, #32
	ldp	w3, w9, [x10, #8]
	bfi	x3, x9, #32, #32
	ldp	w4, w9, [x8, #8]
	bfi	x4, x9, #32, #32
	b	.LBB34_19
.LBB34_15:                              // %"$20"
	bl	evList
	cmp	x0, x21
	b.eq	.LBB34_14
.LBB34_16:                              // %"$23"
	adrp	x8, SymTab+216
	add	x8, x8, :lo12:SymTab+216
	cmp	x0, x8
	b.ne	.LBB34_18
// %bb.17:                              // %"$25"
	adrp	x8, env+88
	ldr	x8, [x8, :lo12:env+88]
	ldp	w0, w9, [x8]
	bfi	x0, x9, #32, #32
.LBB34_18:                              // %"$27"
	ldp	w9, w8, [x0]
	bfi	x9, x8, #32, #32
	ldp	w3, w8, [x9, #8]
	bfi	x3, x8, #32, #32
	adrp	x4, SymTab+8
	add	x4, x4, :lo12:SymTab+8
.LBB34_19:                              // %"$24"
	mov	x0, x19
	mov	x1, xzr
	mov	x2, x20
	mov	w5, wzr
	bl	intern
	mov	x21, x0
.LBB34_20:                              // %"$9"
	ldp	w9, w8, [x23, #8]
	bfi	x9, x8, #32, #32
	str	x9, [x22, :lo12:env]
	mov	x0, x21
	mov	sp, x29
	ldp	x20, x19, [sp, #48]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #32]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #64             // 16-byte Folded Reload
	ret
.LBB34_21:                              // %"$7"
	mov	x0, x20
	mov	x1, x19
	bl	symErr
.Lfunc_end34:
	.size	_intern, .Lfunc_end34-_intern
	.cfi_endproc
                                        // -- End function
	.globl	_boxQ                           // -- Begin function _boxQ
	.p2align	4
	.type	_boxQ,@function
_boxQ:                                  // @_boxQ
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w0, w8, [x9]
	bfi	x0, x8, #32, #32
	tst	x0, #0x6
	b.ne	.LBB35_4
// %bb.1:                               // %"$3"
	tbz	w0, #3, .LBB35_3
// %bb.2:                               // %"$6"
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB35_4
.LBB35_3:                               // %"$5"
	bl	evList
.LBB35_4:                               // %"$2"
	eor	w8, w0, #0x8
	tst	x8, #0xe
	b.ne	.LBB35_6
// %bb.5:                               // %"$8"
	ldp	w8, w9, [x0, #-8]
	bfi	x8, x9, #32, #32
	tbz	w8, #3, .LBB35_9
.LBB35_6:
	mov	w8, wzr
.LBB35_7:                               // %"$7"
	adrp	x9, SymTab+8
	add	x9, x9, :lo12:SymTab+8
	cmp	w8, #0                          // =0
	csel	x0, x0, x9, ne
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.LBB35_8:                               // %"$11"
                                        //   in Loop: Header=BB35_9 Depth=1
	ldp	w8, w9, [x8, #8]
	bfi	x8, x9, #32, #32
.LBB35_9:                               // %"$10"
                                        // =>This Inner Loop Header: Depth=1
	tst	x8, #0x6
	b.eq	.LBB35_8
// %bb.10:                              // %"$12"
	cmp	x8, #2                          // =2
	cset	w8, eq
	b	.LBB35_7
.Lfunc_end35:
	.size	_boxQ, .Lfunc_end35-_boxQ
	.cfi_endproc
                                        // -- End function
	.globl	_strQ                           // -- Begin function _strQ
	.p2align	4
	.type	_strQ,@function
_strQ:                                  // @_strQ
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-32]!                // 8-byte Folded Spill
	stp	x20, x19, [sp, #16]             // 16-byte Folded Spill
	.cfi_def_cfa_offset 32
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w30, -32
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w19, w8, [x9]
	bfi	x19, x8, #32, #32
	tst	x19, #0x6
	b.ne	.LBB36_4
// %bb.1:                               // %"$3"
	tbz	w19, #3, .LBB36_3
// %bb.2:                               // %"$6"
	ldp	w19, w8, [x19]
	bfi	x19, x8, #32, #32
	b	.LBB36_4
.LBB36_3:                               // %"$5"
	mov	x0, x19
	bl	evList
	mov	x19, x0
.LBB36_4:                               // %"$2"
	eor	w8, w19, #0x8
	tst	x8, #0xe
	adrp	x20, SymTab+8
	add	x20, x20, :lo12:SymTab+8
	b.ne	.LBB36_11
// %bb.5:                               // %"$8"
	ldp	w1, w8, [x19, #-8]
	bfi	x1, x8, #32, #32
	tbz	w1, #3, .LBB36_7
// %bb.6:
	mov	w0, #1
	b	.LBB36_10
.LBB36_7:                               // %"$12"
                                        // =>This Inner Loop Header: Depth=1
	tst	x1, #0x6
	b.ne	.LBB36_9
// %bb.8:                               // %"$13"
                                        //   in Loop: Header=BB36_7 Depth=1
	ldp	w1, w8, [x1, #8]
	bfi	x1, x8, #32, #32
	b	.LBB36_7
.LBB36_9:                               // %"$14"
	adrp	x8, env+88
	ldr	x2, [x8, :lo12:env+88]
	mov	x0, x19
	bl	findSym
.LBB36_10:                              // %"$10"
	tst	w0, #0x1
	csel	x20, x20, x19, ne
.LBB36_11:                              // %"$7"
	mov	x0, x20
	ldp	x20, x19, [sp, #16]             // 16-byte Folded Reload
	ldr	x30, [sp], #32                  // 8-byte Folded Reload
	ret
.Lfunc_end36:
	.size	_strQ, .Lfunc_end36-_strQ
	.cfi_endproc
                                        // -- End function
	.globl	_zap                            // -- Begin function _zap
	.p2align	4
	.type	_zap,@function
_zap:                                   // @_zap
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-32]!                // 8-byte Folded Spill
	stp	x20, x19, [sp, #16]             // 16-byte Folded Spill
	.cfi_def_cfa_offset 32
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w30, -32
	mov	x20, x0
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w19, w8, [x9]
	bfi	x19, x8, #32, #32
	tst	x19, #0x6
	b.ne	.LBB37_4
// %bb.1:                               // %"$3"
	tbz	w19, #3, .LBB37_3
// %bb.2:                               // %"$6"
	ldp	w19, w8, [x19]
	bfi	x19, x8, #32, #32
	b	.LBB37_4
.LBB37_3:                               // %"$5"
	mov	x0, x19
	bl	evList
	mov	x19, x0
.LBB37_4:                               // %"$2"
	eor	w8, w19, #0x8
	tst	x8, #0xe
	b.ne	.LBB37_11
// %bb.5:                               // %"$8"
	ldp	w1, w8, [x19, #-8]
	bfi	x1, x8, #32, #32
	tbz	w1, #3, .LBB37_7
// %bb.6:                               // %"$9"
	mov	x0, x19
	bl	dbZap
	b	.LBB37_10
.LBB37_7:                               // %"$12"
                                        // =>This Inner Loop Header: Depth=1
	tst	x1, #0x6
	b.ne	.LBB37_9
// %bb.8:                               // %"$13"
                                        //   in Loop: Header=BB37_7 Depth=1
	ldp	w1, w8, [x1, #8]
	bfi	x1, x8, #32, #32
	b	.LBB37_7
.LBB37_9:                               // %"$14"
	adrp	x8, env+88
	ldr	x8, [x8, :lo12:env+88]
	ldp	w8, w9, [x8]
	bfi	x8, x9, #32, #32
	ldp	w8, w9, [x8]
	bfi	x8, x9, #32, #32
	ldp	w2, w9, [x8, #8]
	bfi	x2, x9, #32, #32
	mov	x0, x19
	bl	unintern
.LBB37_10:                              // %"$11"
	mov	x0, x19
	ldp	x20, x19, [sp, #16]             // 16-byte Folded Reload
	ldr	x30, [sp], #32                  // 8-byte Folded Reload
	ret
.LBB37_11:                              // %"$7"
	mov	x0, x20
	mov	x1, x19
	bl	symErr
.Lfunc_end37:
	.size	_zap, .Lfunc_end37-_zap
	.cfi_endproc
                                        // -- End function
	.globl	_chop                           // -- Begin function _chop
	.p2align	4
	.type	_chop,@function
_chop:                                  // @_chop
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-64]!           // 16-byte Folded Spill
	stp	x24, x23, [sp, #16]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #32]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #48]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 64
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w30, -56
	.cfi_offset w29, -64
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w19, w8, [x9]
	bfi	x19, x8, #32, #32
	tst	x19, #0x6
	b.ne	.LBB38_4
// %bb.1:                               // %"$3"
	tbz	w19, #3, .LBB38_3
// %bb.2:                               // %"$6"
	ldp	w19, w8, [x19]
	bfi	x19, x8, #32, #32
	b	.LBB38_4
.LBB38_3:                               // %"$5"
	mov	x0, x19
	bl	evList
	mov	x19, x0
.LBB38_4:                               // %"$2"
	tst	x19, #0xf
	cset	w8, eq
	adrp	x9, SymTab+8
	add	x9, x9, :lo12:SymTab+8
	cmp	x19, x9
	cset	w9, eq
	orr	w8, w8, w9
	tbnz	w8, #0, .LBB38_17
// %bb.5:                               // %"$10"
	mov	x0, x19
	bl	xSym
	ldp	w19, w8, [x0, #-8]
	bfi	x19, x8, #32, #32
	tbz	w19, #3, .LBB38_9
// %bb.6:                               // %"$12"
	and	x0, x19, #0xfffffffffffffff7
	tst	x0, #0x6
	b.ne	.LBB38_8
.LBB38_7:                               // %"$16"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w0, w8, [x0, #8]
	bfi	x0, x8, #32, #32
	tst	x0, #0x6
	b.eq	.LBB38_7
.LBB38_8:                               // %"$17"
	bl	chopExtNm
	mov	x19, x0
	b	.LBB38_17
.LBB38_9:
	mov	x8, x19
	tst	x8, #0x6
	b.ne	.LBB38_11
.LBB38_10:                              // %"$19"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w8, w9, [x8, #8]
	bfi	x8, x9, #32, #32
	tst	x8, #0x6
	b.eq	.LBB38_10
.LBB38_11:                              // %"$20"
	mov	x9, sp
	sub	x20, x9, #16                    // =16
	mov	sp, x20
	stp	wzr, wzr, [x9, #-16]
	lsr	x10, x8, #32
	stp	w8, w10, [x9, #-8]
	mov	x0, x20
	bl	symChar
	cbz	w0, .LBB38_16
// %bb.12:                              // %"$21"
	adrp	x22, env
	ldr	x8, [x22, :lo12:env]
	mov	x9, sp
	sub	x23, x9, #16                    // =16
	mov	sp, x23
	lsr	x10, x19, #32
	lsr	x11, x8, #32
	stp	w19, w10, [x9, #-16]
	stp	w8, w11, [x9, #-8]
	str	x23, [x22, :lo12:env]
	bl	mkChar
	adrp	x21, SymTab+8
	add	x21, x21, :lo12:SymTab+8
	mov	x1, x21
	bl	cons
	mov	x19, x0
	ldr	x8, [x22, :lo12:env]
	mov	x9, sp
	sub	x10, x9, #16                    // =16
	mov	sp, x10
	lsr	x11, x0, #32
	lsr	x12, x8, #32
	stp	w19, w11, [x9, #-16]
	stp	w8, w12, [x9, #-8]
	mov	x24, x0
	str	x10, [x22, :lo12:env]
.LBB38_13:                              // %"$24"
                                        // =>This Inner Loop Header: Depth=1
	mov	x0, x20
	bl	symChar
	cbz	w0, .LBB38_15
// %bb.14:                              // %"$25"
                                        //   in Loop: Header=BB38_13 Depth=1
	bl	mkChar
	mov	x1, x21
	bl	cons
	lsr	x8, x0, #32
	stp	w0, w8, [x24, #8]
	mov	x24, x0
	b	.LBB38_13
.LBB38_15:                              // %"$26"
	ldp	w9, w8, [x23, #8]
	bfi	x9, x8, #32, #32
	str	x9, [x22, :lo12:env]
	b	.LBB38_17
.LBB38_16:
	adrp	x19, SymTab+8
	add	x19, x19, :lo12:SymTab+8
.LBB38_17:                              // %"$11"
	mov	x0, x19
	mov	sp, x29
	ldp	x20, x19, [sp, #48]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #32]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #64             // 16-byte Folded Reload
	ret
.Lfunc_end38:
	.size	_chop, .Lfunc_end38-_chop
	.cfi_endproc
                                        // -- End function
	.globl	_pack                           // -- Begin function _pack
	.p2align	4
	.type	_pack,@function
_pack:                                  // @_pack
	.cfi_startproc
// %bb.0:                               // %"$1"
	sub	sp, sp, #80                     // =80
	stp	x20, x19, [sp, #64]             // 16-byte Folded Spill
	.cfi_def_cfa_offset 80
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w30, -32
	adrp	x19, env
	mov	w8, #10
	add	x9, sp, #32                     // =32
	mov	w10, #4
	ldr	x11, [x19, :lo12:env]
	str	x9, [x19, :lo12:env]
	str	x8, [sp, #32]
	stp	x11, x30, [sp, #40]             // 8-byte Folded Spill
	ldp	w20, w8, [x0, #8]
	bfi	x20, x8, #32, #32
	mov	w8, #2
	str	x10, [sp]
	stp	x8, x9, [sp, #16]
	mov	x8, sp
	add	x8, x8, #16                     // =16
	str	x8, [x19, :lo12:env]
	b	.LBB39_3
.LBB39_1:                               // %"$8"
                                        //   in Loop: Header=BB39_3 Depth=1
	bl	evList
.LBB39_2:                               // %"$5"
                                        //   in Loop: Header=BB39_3 Depth=1
	str	x0, [sp, #32]
	mov	x1, sp
	bl	pack
.LBB39_3:                               // %"$2"
                                        // =>This Inner Loop Header: Depth=1
	tst	x20, #0xf
	b.ne	.LBB39_7
// %bb.4:                               // %"$3"
                                        //   in Loop: Header=BB39_3 Depth=1
	ldp	w0, w8, [x20]
	bfi	x0, x8, #32, #32
	ldp	w20, w8, [x20, #8]
	bfi	x20, x8, #32, #32
	tst	x0, #0x6
	b.ne	.LBB39_2
// %bb.5:                               // %"$6"
                                        //   in Loop: Header=BB39_3 Depth=1
	tbz	w0, #3, .LBB39_1
// %bb.6:                               // %"$9"
                                        //   in Loop: Header=BB39_3 Depth=1
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB39_2
.LBB39_7:                               // %"$4"
	ldr	x0, [sp, #16]
	bl	consStr
	ldp	x8, x30, [sp, #40]              // 8-byte Folded Reload
	str	x8, [x19, :lo12:env]
	ldp	x20, x19, [sp, #64]             // 16-byte Folded Reload
	add	sp, sp, #80                     // =80
	ret
.Lfunc_end39:
	.size	_pack, .Lfunc_end39-_pack
	.cfi_endproc
                                        // -- End function
	.globl	_glue                           // -- Begin function _glue
	.p2align	4
	.type	_glue,@function
_glue:                                  // @_glue
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-64]!           // 16-byte Folded Spill
	str	x23, [sp, #16]                  // 8-byte Folded Spill
	stp	x22, x21, [sp, #32]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #48]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 64
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -48
	.cfi_offset w30, -56
	.cfi_offset w29, -64
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w19, w8, [x9]
	bfi	x19, x8, #32, #32
	ldp	w20, w8, [x9, #8]
	bfi	x20, x8, #32, #32
	tst	x19, #0x6
	b.ne	.LBB40_4
// %bb.1:                               // %"$3"
	tbz	w19, #3, .LBB40_3
// %bb.2:                               // %"$6"
	ldp	w19, w8, [x19]
	bfi	x19, x8, #32, #32
	b	.LBB40_4
.LBB40_3:                               // %"$5"
	mov	x0, x19
	bl	evList
	mov	x19, x0
.LBB40_4:                               // %"$2"
	adrp	x22, env
	ldr	x8, [x22, :lo12:env]
	mov	x9, sp
	sub	x23, x9, #16                    // =16
	mov	sp, x23
	lsr	x10, x19, #32
	stp	w19, w10, [x9, #-16]
	lsr	x10, x8, #32
	stp	w8, w10, [x9, #-8]
	str	x23, [x22, :lo12:env]
	ldp	w20, w8, [x20]
	bfi	x20, x8, #32, #32
	tst	x20, #0x6
	b.ne	.LBB40_7
// %bb.5:                               // %"$8"
	tbz	w20, #3, .LBB40_12
// %bb.6:                               // %"$11"
	ldp	w20, w8, [x20]
	bfi	x20, x8, #32, #32
.LBB40_7:                               // %"$7"
	tst	x20, #0xf
	b.ne	.LBB40_13
.LBB40_8:                               // %"$13"
	ldr	x8, [x22, :lo12:env]
	mov	x9, sp
	sub	x10, x9, #16                    // =16
	mov	sp, x10
	lsr	x11, x20, #32
	lsr	x12, x8, #32
	stp	w20, w11, [x9, #-16]
	stp	w8, w12, [x9, #-8]
	str	x10, [x22, :lo12:env]
	mov	x8, sp
	sub	x21, x8, #32                    // =32
	mov	sp, x21
	mov	w9, #4
	stp	w9, wzr, [x8, #-32]
	mov	w9, #2
	mov	x10, x21
	str	w9, [x10, #16]!
	stur	wzr, [x8, #-12]
	ldr	x9, [x22, :lo12:env]
	lsr	x11, x9, #32
	stp	w9, w11, [x8, #-8]
	str	x10, [x22, :lo12:env]
.LBB40_9:                               // %"$15"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w0, w8, [x20]
	bfi	x0, x8, #32, #32
	ldp	w20, w8, [x20, #8]
	bfi	x20, x8, #32, #32
	mov	x1, x21
	bl	pack
	tst	x20, #0xf
	b.ne	.LBB40_11
// %bb.10:                              // %"$16"
                                        //   in Loop: Header=BB40_9 Depth=1
	mov	x0, x19
	mov	x1, x21
	bl	pack
	b	.LBB40_9
.LBB40_11:                              // %"$17"
	ldp	w0, w8, [x21, #16]
	bfi	x0, x8, #32, #32
	bl	consStr
	mov	x20, x0
	b	.LBB40_13
.LBB40_12:                              // %"$10"
	mov	x0, x20
	bl	evList
	mov	x20, x0
	tst	x20, #0xf
	b.eq	.LBB40_8
.LBB40_13:                              // %"$14"
	ldp	w9, w8, [x23, #8]
	bfi	x9, x8, #32, #32
	str	x9, [x22, :lo12:env]
	mov	x0, x20
	mov	sp, x29
	ldp	x20, x19, [sp, #48]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #32]             // 16-byte Folded Reload
	ldr	x23, [sp, #16]                  // 8-byte Folded Reload
	ldp	x29, x30, [sp], #64             // 16-byte Folded Reload
	ret
.Lfunc_end40:
	.size	_glue, .Lfunc_end40-_glue
	.cfi_endproc
                                        // -- End function
	.globl	_text                           // -- Begin function _text
	.p2align	4
	.type	_text,@function
_text:                                  // @_text
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-80]!           // 16-byte Folded Spill
	str	x25, [sp, #16]                  // 8-byte Folded Spill
	stp	x24, x23, [sp, #32]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #48]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #64]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 80
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -64
	.cfi_offset w30, -72
	.cfi_offset w29, -80
	mov	x19, x0
	ldp	w21, w8, [x0, #8]
	bfi	x21, x8, #32, #32
	mov	x0, x21
	bl	evSym
	mov	x1, x0
	adrp	x8, SymTab+8
	add	x8, x8, :lo12:SymTab+8
	cmp	x0, x8
	b.eq	.LBB41_20
// %bb.1:                               // %"$3"
	mov	x0, x19
	bl	xName
	mov	x8, sp
	sub	x19, x8, #32                    // =32
	mov	sp, x19
	stp	wzr, wzr, [x8, #-32]
	lsr	x9, x0, #32
	stur	w9, [x8, #-20]
	mov	x23, x19
	str	w0, [x23, #8]!
	adrp	x22, env
	ldr	x9, [x22, :lo12:env]
	lsr	x10, x9, #32
	stp	w9, w10, [x8, #-16]
	str	x23, [x22, :lo12:env]
	mov	x8, sp
	sub	x20, x8, #32                    // =32
	mov	sp, x20
	mov	x24, xzr
	mov	w9, #4
	stp	w9, wzr, [x8, #-32]
	mov	w9, #2
	mov	x25, x20
	str	w9, [x25, #16]!
	stur	wzr, [x8, #-12]
	ldr	x9, [x22, :lo12:env]
	lsr	x10, x9, #32
	stp	w9, w10, [x8, #-8]
	str	x25, [x22, :lo12:env]
	b	.LBB41_4
.LBB41_2:                               // %"$11"
                                        //   in Loop: Header=BB41_4 Depth=1
	bl	evList
.LBB41_3:                               // %"$8"
                                        //   in Loop: Header=BB41_4 Depth=1
	mov	x8, sp
	sub	x25, x8, #16                    // =16
	mov	sp, x25
	lsr	x9, x0, #32
	stp	w0, w9, [x8, #-16]
	ldr	x9, [x22, :lo12:env]
	lsr	x10, x9, #32
	stp	w9, w10, [x8, #-8]
	str	x25, [x22, :lo12:env]
	add	x24, x24, #1                    // =1
.LBB41_4:                               // %"$5"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w21, w8, [x21, #8]
	bfi	x21, x8, #32, #32
	tst	x21, #0xf
	b.ne	.LBB41_9
// %bb.5:                               // %"$6"
                                        //   in Loop: Header=BB41_4 Depth=1
	ldp	w0, w8, [x21]
	bfi	x0, x8, #32, #32
	tst	x0, #0x6
	b.ne	.LBB41_3
// %bb.6:                               // %"$9"
                                        //   in Loop: Header=BB41_4 Depth=1
	tbz	w0, #3, .LBB41_2
// %bb.7:                               // %"$12"
                                        //   in Loop: Header=BB41_4 Depth=1
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB41_3
.LBB41_8:                               // %"$18"
                                        //   in Loop: Header=BB41_9 Depth=1
	mov	x1, x20
	bl	byteSym
.LBB41_9:                               // %"$13"
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB41_17 Depth 2
	mov	x0, x19
	bl	symByte
	tst	w0, #0xff
	b.eq	.LBB41_19
// %bb.10:                              // %"$14"
                                        //   in Loop: Header=BB41_9 Depth=1
	and	w8, w0, #0xff
	cmp	w8, #64                         // =64
	b.ne	.LBB41_8
// %bb.11:                              // %"$17"
                                        //   in Loop: Header=BB41_9 Depth=1
	mov	x0, x19
	bl	symByte
	and	w8, w0, #0xff
	cmp	w8, #64                         // =64
	b.eq	.LBB41_8
// %bb.12:                              // %"$19"
                                        //   in Loop: Header=BB41_9 Depth=1
	sub	w8, w0, #48                     // =48
	sxtb	w9, w8
	cmp	w9, #1                          // =1
	b.lt	.LBB41_9
// %bb.13:                              // %"$22"
                                        //   in Loop: Header=BB41_9 Depth=1
	and	w9, w8, #0xff
	cmp	w9, #10                         // =10
	b.lo	.LBB41_15
// %bb.14:                              // %"$23"
                                        //   in Loop: Header=BB41_9 Depth=1
	sub	w8, w8, #7                      // =7
.LBB41_15:                              // %"$24"
                                        //   in Loop: Header=BB41_9 Depth=1
	and	x8, x8, #0xff
	cmp	x24, x8
	b.mi	.LBB41_9
// %bb.16:                              // %"$27.preheader"
                                        //   in Loop: Header=BB41_9 Depth=1
	mvn	x8, x8
	add	x9, x8, x24
	mov	x8, x25
	tbnz	x9, #63, .LBB41_18
.LBB41_17:                              // %"$28"
                                        //   Parent Loop BB41_9 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	w8, w10, [x8, #8]
	bfi	x8, x10, #32, #32
	sub	x9, x9, #1                      // =1
	tbz	x9, #63, .LBB41_17
.LBB41_18:                              // %"$29"
                                        //   in Loop: Header=BB41_9 Depth=1
	ldp	w0, w9, [x8]
	bfi	x0, x9, #32, #32
	mov	x1, x20
	bl	pack
	b	.LBB41_9
.LBB41_19:                              // %"$15"
	ldp	w0, w8, [x20, #16]
	bfi	x0, x8, #32, #32
	bl	consStr
	mov	x1, x0
	ldp	w9, w8, [x23, #8]
	bfi	x9, x8, #32, #32
	str	x9, [x22, :lo12:env]
.LBB41_20:                              // %"$4"
	mov	x0, x1
	mov	sp, x29
	ldp	x20, x19, [sp, #64]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #48]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #32]             // 16-byte Folded Reload
	ldr	x25, [sp, #16]                  // 8-byte Folded Reload
	ldp	x29, x30, [sp], #80             // 16-byte Folded Reload
	ret
.Lfunc_end41:
	.size	_text, .Lfunc_end41-_text
	.cfi_endproc
                                        // -- End function
	.globl	_preQ                           // -- Begin function _preQ
	.p2align	4
	.type	_preQ,@function
_preQ:                                  // @_preQ
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-48]!           // 16-byte Folded Spill
	stp	x22, x21, [sp, #16]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #32]             // 16-byte Folded Spill
	mov	x29, sp
	sub	sp, sp, #16                     // =16
	.cfi_def_cfa w29, 48
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w30, -40
	.cfi_offset w29, -48
	mov	x20, x0
	ldp	w19, w8, [x0, #8]
	bfi	x19, x8, #32, #32
	mov	x0, x19
	bl	evSym
	mov	x21, x0
	adrp	x22, env
	ldr	x8, [x22, :lo12:env]
	stp	x0, x8, [x29, #-16]
	sub	x8, x29, #16                    // =16
	str	x8, [x22, :lo12:env]
	ldp	w0, w8, [x19, #8]
	bfi	x0, x8, #32, #32
	bl	evSym
	mov	x19, x0
	adrp	x8, SymTab+8
	add	x8, x8, :lo12:SymTab+8
	cmp	x21, x8
	b.eq	.LBB42_5
// %bb.1:                               // %"$3"
	mov	x0, x20
	mov	x1, x21
	bl	xName
	cmp	x0, #2                          // =2
	b.eq	.LBB42_5
// %bb.2:                               // %"$5"
	mov	x21, x0
	mov	x0, x20
	mov	x1, x19
	bl	xName
	mov	x8, sp
	sub	x20, x8, #16                    // =16
	mov	sp, x20
	stp	wzr, wzr, [x8, #-16]
	lsr	x9, x0, #32
	stp	w0, w9, [x8, #-8]
	mov	x0, x20
	bl	symByte
	tst	w0, #0xff
	b.eq	.LBB42_4
// %bb.3:                               // %"$8"
	mov	w1, w0
	mov	x0, x21
	mov	x2, x20
	bl	preStr
	tbnz	w0, #0, .LBB42_5
.LBB42_4:                               // %"$10"
	adrp	x19, SymTab+8
	add	x19, x19, :lo12:SymTab+8
.LBB42_5:                               // %"$2"
	ldur	x8, [x29, #-8]
	str	x8, [x22, :lo12:env]
	mov	x0, x19
	mov	sp, x29
	ldp	x20, x19, [sp, #32]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #48             // 16-byte Folded Reload
	ret
.Lfunc_end42:
	.size	_preQ, .Lfunc_end42-_preQ
	.cfi_endproc
                                        // -- End function
	.globl	_subQ                           // -- Begin function _subQ
	.p2align	4
	.type	_subQ,@function
_subQ:                                  // @_subQ
	.cfi_startproc
// %bb.0:                               // %"$1"
	sub	sp, sp, #48                     // =48
	stp	x30, x21, [sp, #16]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #32]             // 16-byte Folded Spill
	.cfi_def_cfa_offset 48
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w30, -32
	ldp	w19, w8, [x0, #8]
	bfi	x19, x8, #32, #32
	mov	x0, x19
	bl	evSym
	mov	x20, x0
	adrp	x21, env
	ldr	x8, [x21, :lo12:env]
	stp	x0, x8, [sp]
	mov	x8, sp
	str	x8, [x21, :lo12:env]
	ldp	w0, w8, [x19, #8]
	bfi	x0, x8, #32, #32
	bl	evSym
	mov	x19, x0
	mov	x0, x20
	mov	x1, x19
	bl	subStr
	adrp	x8, SymTab+8
	add	x8, x8, :lo12:SymTab+8
	tst	w0, #0x1
	csel	x0, x19, x8, ne
	ldr	x8, [sp, #8]
	str	x8, [x21, :lo12:env]
	ldp	x20, x19, [sp, #32]             // 16-byte Folded Reload
	ldp	x30, x21, [sp, #16]             // 16-byte Folded Reload
	add	sp, sp, #48                     // =48
	ret
.Lfunc_end43:
	.size	_subQ, .Lfunc_end43-_subQ
	.cfi_endproc
                                        // -- End function
	.globl	_val                            // -- Begin function _val
	.p2align	4
	.type	_val,@function
_val:                                   // @_val
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-32]!                // 8-byte Folded Spill
	stp	x20, x19, [sp, #16]             // 16-byte Folded Spill
	.cfi_def_cfa_offset 32
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w30, -32
	mov	x19, x0
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w20, w8, [x9]
	bfi	x20, x8, #32, #32
	tst	x20, #0x6
	b.ne	.LBB44_4
// %bb.1:                               // %"$3"
	tbz	w20, #3, .LBB44_3
// %bb.2:                               // %"$6"
	ldp	w20, w8, [x20]
	bfi	x20, x8, #32, #32
	b	.LBB44_4
.LBB44_3:                               // %"$5"
	mov	x0, x20
	bl	evList
	mov	x20, x0
.LBB44_4:                               // %"$2"
	tst	x20, #0x6
	b.ne	.LBB44_9
// %bb.5:                               // %"$8"
	tbz	w20, #3, .LBB44_8
// %bb.6:                               // %"$10"
	ldurb	w8, [x20, #-8]
	tbz	w8, #3, .LBB44_8
// %bb.7:                               // %"$11"
	mov	x0, x19
	mov	x1, x20
	bl	dbFetch
.LBB44_8:                               // %"$12"
	ldp	w0, w8, [x20]
	bfi	x0, x8, #32, #32
	ldp	x20, x19, [sp, #16]             // 16-byte Folded Reload
	ldr	x30, [sp], #32                  // 8-byte Folded Reload
	ret
.LBB44_9:                               // %"$7"
	mov	x0, x19
	mov	x1, x20
	bl	varErr
.Lfunc_end44:
	.size	_val, .Lfunc_end44-_val
	.cfi_endproc
                                        // -- End function
	.globl	_set                            // -- Begin function _set
	.p2align	4
	.type	_set,@function
_set:                                   // @_set
	.cfi_startproc
// %bb.0:                               // %"$1"
	sub	sp, sp, #80                     // =80
	stp	x24, x23, [sp, #32]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #48]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #64]             // 16-byte Folded Spill
	.cfi_def_cfa_offset 80
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w30, -64
	mov	x19, x0
	adrp	x21, env
	ldr	x8, [x21, :lo12:env]
	mov	w9, #10
	str	x9, [sp]
	stp	x8, x30, [sp, #8]               // 8-byte Folded Spill
	mov	x8, sp
	str	x8, [x21, :lo12:env]
	ldp	w23, w8, [x0, #8]
	bfi	x23, x8, #32, #32
	adrp	x22, SymTab+8
	add	x22, x22, :lo12:SymTab+8
	b	.LBB45_3
.LBB45_1:                               // %"$17"
                                        //   in Loop: Header=BB45_3 Depth=1
	ldp	w0, w8, [x23]
	bfi	x0, x8, #32, #32
	ldp	w23, w8, [x23, #8]
	bfi	x23, x8, #32, #32
	tst	x0, #0x6
	b.eq	.LBB45_6
.LBB45_2:                               // %"$18"
                                        //   in Loop: Header=BB45_3 Depth=1
	lsr	x8, x0, #32
	stp	w0, w8, [x20]
	tst	x23, #0xf
	b.ne	.LBB45_16
.LBB45_3:                               // %"$2"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w20, w8, [x23]
	bfi	x20, x8, #32, #32
	ldp	w23, w24, [x23, #8]
	tst	x20, #0x6
	b.ne	.LBB45_9
// %bb.4:                               // %"$4"
                                        //   in Loop: Header=BB45_3 Depth=1
	tbz	w20, #3, .LBB45_8
// %bb.5:                               // %"$7"
                                        //   in Loop: Header=BB45_3 Depth=1
	ldp	w20, w8, [x20]
	bfi	x20, x8, #32, #32
	b	.LBB45_9
.LBB45_6:                               // %"$19"
                                        //   in Loop: Header=BB45_3 Depth=1
	tbz	w0, #3, .LBB45_15
// %bb.7:                               // %"$22"
                                        //   in Loop: Header=BB45_3 Depth=1
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB45_2
.LBB45_8:                               // %"$6"
                                        //   in Loop: Header=BB45_3 Depth=1
	mov	x0, x20
	bl	evList
	mov	x20, x0
.LBB45_9:                               // %"$3"
                                        //   in Loop: Header=BB45_3 Depth=1
	tst	x20, #0x6
	b.ne	.LBB45_17
// %bb.10:                              // %"$9"
                                        //   in Loop: Header=BB45_3 Depth=1
	add	x8, x22, #208                   // =208
	cmp	x8, x20
	ccmp	x20, x22, #0, hs
	b.hs	.LBB45_18
// %bb.11:                              // %"$13"
                                        //   in Loop: Header=BB45_3 Depth=1
	bfi	x23, x24, #32, #32
	str	x20, [sp]
	tbz	w20, #3, .LBB45_13
// %bb.12:                              // %"$15"
                                        //   in Loop: Header=BB45_3 Depth=1
	ldurb	w8, [x20, #-8]
	ubfx	w8, w8, #3, #1
	cbz	w8, .LBB45_1
	b	.LBB45_14
.LBB45_13:                              //   in Loop: Header=BB45_3 Depth=1
	mov	w8, wzr
	cbz	w8, .LBB45_1
.LBB45_14:                              // %"$16"
                                        //   in Loop: Header=BB45_3 Depth=1
	mov	x0, x19
	mov	x1, x20
	bl	dbTouch
	b	.LBB45_1
.LBB45_15:                              // %"$21"
                                        //   in Loop: Header=BB45_3 Depth=1
	bl	evList
	b	.LBB45_2
.LBB45_16:                              // %"$24"
	ldp	x8, x30, [sp, #8]               // 8-byte Folded Reload
	str	x8, [x21, :lo12:env]
	ldp	x20, x19, [sp, #64]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #48]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #32]             // 16-byte Folded Reload
	add	sp, sp, #80                     // =80
	ret
.LBB45_17:                              // %"$8"
	mov	x0, x19
	mov	x1, x20
	bl	varErr
.LBB45_18:                              // %"$12"
	mov	x0, x19
	mov	x1, x20
	bl	protErr
.Lfunc_end45:
	.size	_set, .Lfunc_end45-_set
	.cfi_endproc
                                        // -- End function
	.globl	_setq                           // -- Begin function _setq
	.p2align	4
	.type	_setq,@function
_setq:                                  // @_setq
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-48]!                // 8-byte Folded Spill
	stp	x22, x21, [sp, #16]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #32]             // 16-byte Folded Spill
	.cfi_def_cfa_offset 48
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w30, -48
	mov	x19, x0
	ldp	w22, w8, [x0, #8]
	bfi	x22, x8, #32, #32
	adrp	x21, SymTab+8
	add	x21, x21, :lo12:SymTab+8
	b	.LBB46_3
.LBB46_1:                               // %"$12"
                                        //   in Loop: Header=BB46_3 Depth=1
	bl	evList
.LBB46_2:                               // %"$9"
                                        //   in Loop: Header=BB46_3 Depth=1
	lsr	x8, x0, #32
	stp	w0, w8, [x20]
	tst	x22, #0xf
	b.ne	.LBB46_8
.LBB46_3:                               // %"$2"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w20, w8, [x22]
	bfi	x20, x8, #32, #32
	tst	x20, #0x6
	b.ne	.LBB46_9
// %bb.4:                               // %"$4"
                                        //   in Loop: Header=BB46_3 Depth=1
	add	x8, x21, #208                   // =208
	cmp	x8, x20
	ccmp	x20, x21, #0, hs
	b.hs	.LBB46_10
// %bb.5:                               // %"$8"
                                        //   in Loop: Header=BB46_3 Depth=1
	ldp	w9, w8, [x22, #8]
	bfi	x9, x8, #32, #32
	ldp	w0, w8, [x9]
	bfi	x0, x8, #32, #32
	ldp	w22, w8, [x9, #8]
	bfi	x22, x8, #32, #32
	tst	x0, #0x6
	b.ne	.LBB46_2
// %bb.6:                               // %"$10"
                                        //   in Loop: Header=BB46_3 Depth=1
	tbz	w0, #3, .LBB46_1
// %bb.7:                               // %"$13"
                                        //   in Loop: Header=BB46_3 Depth=1
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB46_2
.LBB46_8:                               // %"$15"
	ldp	x20, x19, [sp, #32]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #16]             // 16-byte Folded Reload
	ldr	x30, [sp], #48                  // 8-byte Folded Reload
	ret
.LBB46_9:                               // %"$3"
	mov	x0, x19
	mov	x1, x20
	bl	varErr
.LBB46_10:                              // %"$7"
	mov	x0, x19
	mov	x1, x20
	bl	protErr
.Lfunc_end46:
	.size	_setq, .Lfunc_end46-_setq
	.cfi_endproc
                                        // -- End function
	.globl	_swap                           // -- Begin function _swap
	.p2align	4
	.type	_swap,@function
_swap:                                  // @_swap
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-64]!           // 16-byte Folded Spill
	str	x23, [sp, #16]                  // 8-byte Folded Spill
	stp	x22, x21, [sp, #32]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #48]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 64
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -48
	.cfi_offset w30, -56
	.cfi_offset w29, -64
	mov	x20, x0
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w19, w8, [x9]
	bfi	x19, x8, #32, #32
	ldp	w22, w21, [x9, #8]
	tst	x19, #0x6
	b.ne	.LBB47_4
// %bb.1:                               // %"$3"
	tbz	w19, #3, .LBB47_3
// %bb.2:                               // %"$6"
	ldp	w19, w8, [x19]
	bfi	x19, x8, #32, #32
	b	.LBB47_4
.LBB47_3:                               // %"$5"
	mov	x0, x19
	bl	evList
	mov	x19, x0
.LBB47_4:                               // %"$2"
	tst	x19, #0x6
	b.ne	.LBB47_14
// %bb.5:                               // %"$8"
	adrp	x8, SymTab+8
	add	x8, x8, :lo12:SymTab+8
	add	x9, x8, #208                    // =208
	cmp	x9, x19
	ccmp	x19, x8, #0, hs
	b.hs	.LBB47_15
// %bb.6:                               // %"$12"
	bfi	x22, x21, #32, #32
	adrp	x21, env
	ldr	x8, [x21, :lo12:env]
	mov	x9, sp
	sub	x23, x9, #16                    // =16
	mov	sp, x23
	lsr	x10, x19, #32
	lsr	x11, x8, #32
	stp	w19, w10, [x9, #-16]
	stp	w8, w11, [x9, #-8]
	str	x23, [x21, :lo12:env]
	tbz	w19, #3, .LBB47_9
// %bb.7:                               // %"$14"
	ldurb	w8, [x19, #-8]
	tbz	w8, #3, .LBB47_9
// %bb.8:                               // %"$15"
	mov	x0, x20
	mov	x1, x19
	bl	dbTouch
.LBB47_9:                               // %"$16"
	ldp	w0, w8, [x22]
	bfi	x0, x8, #32, #32
	tst	x0, #0x6
	b.ne	.LBB47_13
// %bb.10:                              // %"$18"
	tbz	w0, #3, .LBB47_12
// %bb.11:                              // %"$21"
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB47_13
.LBB47_12:                              // %"$20"
	bl	evList
.LBB47_13:                              // %"$17"
	ldp	w8, w9, [x19]
	bfi	x8, x9, #32, #32
	lsr	x9, x0, #32
	stp	w0, w9, [x19]
	ldp	w10, w9, [x23, #8]
	bfi	x10, x9, #32, #32
	str	x10, [x21, :lo12:env]
	mov	x0, x8
	mov	sp, x29
	ldp	x20, x19, [sp, #48]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #32]             // 16-byte Folded Reload
	ldr	x23, [sp, #16]                  // 8-byte Folded Reload
	ldp	x29, x30, [sp], #64             // 16-byte Folded Reload
	ret
.LBB47_14:                              // %"$7"
	mov	x0, x20
	mov	x1, x19
	bl	varErr
.LBB47_15:                              // %"$11"
	mov	x0, x20
	mov	x1, x19
	bl	protErr
.Lfunc_end47:
	.size	_swap, .Lfunc_end47-_swap
	.cfi_endproc
                                        // -- End function
	.globl	_xchg                           // -- Begin function _xchg
	.p2align	4
	.type	_xchg,@function
_xchg:                                  // @_xchg
	.cfi_startproc
// %bb.0:                               // %"$1"
	sub	sp, sp, #80                     // =80
	stp	x30, x25, [sp, #16]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #32]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #48]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #64]             // 16-byte Folded Spill
	.cfi_def_cfa_offset 80
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w30, -64
	mov	x19, x0
	adrp	x22, env
	ldr	x8, [x22, :lo12:env]
	mov	w9, #10
	stp	x9, x8, [sp]
	mov	x8, sp
	str	x8, [x22, :lo12:env]
	ldp	w24, w8, [x0, #8]
	bfi	x24, x8, #32, #32
	adrp	x23, SymTab+8
	add	x23, x23, :lo12:SymTab+8
	b	.LBB48_2
.LBB48_1:                               // %"$32"
                                        //   in Loop: Header=BB48_2 Depth=1
	ldp	w0, w8, [x20]
	ldp	w10, w9, [x21]
	stp	w10, w9, [x20]
	stp	w0, w8, [x21]
	tst	x24, #0xf
	b.ne	.LBB48_22
.LBB48_2:                               // %"$2"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w20, w8, [x24]
	bfi	x20, x8, #32, #32
	ldp	w24, w21, [x24, #8]
	tst	x20, #0x6
	b.ne	.LBB48_6
// %bb.3:                               // %"$4"
                                        //   in Loop: Header=BB48_2 Depth=1
	tbz	w20, #3, .LBB48_5
// %bb.4:                               // %"$7"
                                        //   in Loop: Header=BB48_2 Depth=1
	ldp	w20, w8, [x20]
	bfi	x20, x8, #32, #32
	b	.LBB48_6
.LBB48_5:                               // %"$6"
                                        //   in Loop: Header=BB48_2 Depth=1
	mov	x0, x20
	bl	evList
	mov	x20, x0
.LBB48_6:                               // %"$3"
                                        //   in Loop: Header=BB48_2 Depth=1
	tst	x20, #0x6
	b.ne	.LBB48_25
// %bb.7:                               // %"$9"
                                        //   in Loop: Header=BB48_2 Depth=1
	add	x8, x23, #208                   // =208
	cmp	x8, x20
	ccmp	x20, x23, #0, hs
	b.hs	.LBB48_26
// %bb.8:                               // %"$13"
                                        //   in Loop: Header=BB48_2 Depth=1
	bfi	x24, x21, #32, #32
	str	x20, [sp]
	tbz	w20, #3, .LBB48_10
// %bb.9:                               // %"$15"
                                        //   in Loop: Header=BB48_2 Depth=1
	ldurb	w8, [x20, #-8]
	ubfx	w8, w8, #3, #1
	cbnz	w8, .LBB48_11
	b	.LBB48_12
.LBB48_10:                              //   in Loop: Header=BB48_2 Depth=1
	mov	w8, wzr
	cbz	w8, .LBB48_12
.LBB48_11:                              // %"$16"
                                        //   in Loop: Header=BB48_2 Depth=1
	mov	x0, x19
	mov	x1, x20
	bl	dbTouch
.LBB48_12:                              // %"$17"
                                        //   in Loop: Header=BB48_2 Depth=1
	ldp	w21, w8, [x24]
	bfi	x21, x8, #32, #32
	ldp	w24, w25, [x24, #8]
	tst	x21, #0x6
	b.ne	.LBB48_16
// %bb.13:                              // %"$19"
                                        //   in Loop: Header=BB48_2 Depth=1
	tbz	w21, #3, .LBB48_15
// %bb.14:                              // %"$22"
                                        //   in Loop: Header=BB48_2 Depth=1
	ldp	w21, w8, [x21]
	bfi	x21, x8, #32, #32
	b	.LBB48_16
.LBB48_15:                              // %"$21"
                                        //   in Loop: Header=BB48_2 Depth=1
	mov	x0, x21
	bl	evList
	mov	x21, x0
.LBB48_16:                              // %"$18"
                                        //   in Loop: Header=BB48_2 Depth=1
	tst	x21, #0x6
	b.ne	.LBB48_23
// %bb.17:                              // %"$24"
                                        //   in Loop: Header=BB48_2 Depth=1
	add	x8, x23, #208                   // =208
	cmp	x8, x21
	ccmp	x21, x23, #0, hs
	b.hs	.LBB48_24
// %bb.18:                              // %"$28"
                                        //   in Loop: Header=BB48_2 Depth=1
	tbz	w21, #3, .LBB48_20
// %bb.19:                              // %"$30"
                                        //   in Loop: Header=BB48_2 Depth=1
	ldurb	w8, [x21, #-8]
	ubfx	w8, w8, #3, #1
	bfi	x24, x25, #32, #32
	cbz	w8, .LBB48_1
	b	.LBB48_21
.LBB48_20:                              //   in Loop: Header=BB48_2 Depth=1
	mov	w8, wzr
	bfi	x24, x25, #32, #32
	cbz	w8, .LBB48_1
.LBB48_21:                              // %"$31"
                                        //   in Loop: Header=BB48_2 Depth=1
	mov	x0, x19
	mov	x1, x21
	bl	dbTouch
	b	.LBB48_1
.LBB48_22:                              // %"$34"
	bfi	x0, x8, #32, #32
	ldr	x8, [sp, #8]
	str	x8, [x22, :lo12:env]
	ldp	x20, x19, [sp, #64]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #48]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #32]             // 16-byte Folded Reload
	ldp	x30, x25, [sp, #16]             // 16-byte Folded Reload
	add	sp, sp, #80                     // =80
	ret
.LBB48_23:                              // %"$23"
	mov	x0, x19
	mov	x1, x21
	bl	varErr
.LBB48_24:                              // %"$27"
	mov	x0, x19
	mov	x1, x21
	bl	protErr
.LBB48_25:                              // %"$8"
	mov	x0, x19
	mov	x1, x20
	bl	varErr
.LBB48_26:                              // %"$12"
	mov	x0, x19
	mov	x1, x20
	bl	protErr
.Lfunc_end48:
	.size	_xchg, .Lfunc_end48-_xchg
	.cfi_endproc
                                        // -- End function
	.globl	_on                             // -- Begin function _on
	.p2align	4
	.type	_on,@function
_on:                                    // @_on
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	ldp	w8, w9, [x0, #8]
	bfi	x8, x9, #32, #32
	adrp	x9, SymTab+8
	add	x9, x9, :lo12:SymTab+8
	adrp	x10, SymTab+216
	add	x10, x10, :lo12:SymTab+216
	lsr	x11, x10, #32
.LBB49_1:                               // %"$2"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w1, w12, [x8]
	bfi	x1, x12, #32, #32
	tst	x1, #0x6
	b.ne	.LBB49_5
// %bb.2:                               // %"$4"
                                        //   in Loop: Header=BB49_1 Depth=1
	add	x12, x9, #208                   // =208
	cmp	x12, x1
	ccmp	x1, x9, #0, hs
	b.hs	.LBB49_6
// %bb.3:                               // %"$8"
                                        //   in Loop: Header=BB49_1 Depth=1
	ldp	w8, w12, [x8, #8]
	bfi	x8, x12, #32, #32
	stp	w10, w11, [x1]
	tst	x8, #0xf
	b.eq	.LBB49_1
// %bb.4:                               // %"$10"
	adrp	x0, SymTab+216
	add	x0, x0, :lo12:SymTab+216
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.LBB49_5:                               // %"$3"
	bl	varErr
.LBB49_6:                               // %"$7"
	bl	protErr
.Lfunc_end49:
	.size	_on, .Lfunc_end49-_on
	.cfi_endproc
                                        // -- End function
	.globl	_off                            // -- Begin function _off
	.p2align	4
	.type	_off,@function
_off:                                   // @_off
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	ldp	w8, w9, [x0, #8]
	bfi	x8, x9, #32, #32
	adrp	x9, SymTab+8
	add	x9, x9, :lo12:SymTab+8
	lsr	x10, x9, #32
.LBB50_1:                               // %"$2"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w1, w11, [x8]
	bfi	x1, x11, #32, #32
	tst	x1, #0x6
	b.ne	.LBB50_5
// %bb.2:                               // %"$4"
                                        //   in Loop: Header=BB50_1 Depth=1
	add	x11, x9, #208                   // =208
	cmp	x11, x1
	ccmp	x1, x9, #0, hs
	b.hs	.LBB50_6
// %bb.3:                               // %"$8"
                                        //   in Loop: Header=BB50_1 Depth=1
	ldp	w8, w11, [x8, #8]
	bfi	x8, x11, #32, #32
	stp	w9, w10, [x1]
	tst	x8, #0xf
	b.eq	.LBB50_1
// %bb.4:                               // %"$10"
	adrp	x0, SymTab+8
	add	x0, x0, :lo12:SymTab+8
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.LBB50_5:                               // %"$3"
	bl	varErr
.LBB50_6:                               // %"$7"
	bl	protErr
.Lfunc_end50:
	.size	_off, .Lfunc_end50-_off
	.cfi_endproc
                                        // -- End function
	.globl	_onOff                          // -- Begin function _onOff
	.p2align	4
	.type	_onOff,@function
_onOff:                                 // @_onOff
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	adrp	x10, SymTab+8
	add	x10, x10, :lo12:SymTab+8
	b	.LBB51_2
.LBB51_1:                               // %"$11"
                                        //   in Loop: Header=BB51_2 Depth=1
	lsr	x11, x8, #32
	stp	w8, w11, [x1]
	tst	x9, #0xf
	b.ne	.LBB51_6
.LBB51_2:                               // %"$2"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w1, w8, [x9]
	bfi	x1, x8, #32, #32
	tst	x1, #0x6
	b.ne	.LBB51_7
// %bb.3:                               // %"$4"
                                        //   in Loop: Header=BB51_2 Depth=1
	add	x8, x10, #208                   // =208
	cmp	x8, x1
	ccmp	x1, x10, #0, hs
	b.hs	.LBB51_8
// %bb.4:                               // %"$8"
                                        //   in Loop: Header=BB51_2 Depth=1
	ldp	w9, w11, [x9, #8]
	bfi	x9, x11, #32, #32
	ldp	w12, w11, [x1]
	bfi	x12, x11, #32, #32
	cmp	x12, x10
	b.eq	.LBB51_1
// %bb.5:                               // %"$10"
                                        //   in Loop: Header=BB51_2 Depth=1
	mov	x8, x10
	b	.LBB51_1
.LBB51_6:                               // %"$13"
	mov	x0, x8
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.LBB51_7:                               // %"$3"
	bl	varErr
.LBB51_8:                               // %"$7"
	bl	protErr
.Lfunc_end51:
	.size	_onOff, .Lfunc_end51-_onOff
	.cfi_endproc
                                        // -- End function
	.globl	_zero                           // -- Begin function _zero
	.p2align	4
	.type	_zero,@function
_zero:                                  // @_zero
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	ldp	w8, w9, [x0, #8]
	bfi	x8, x9, #32, #32
	adrp	x9, SymTab+8
	add	x9, x9, :lo12:SymTab+8
	mov	w10, #2
.LBB52_1:                               // %"$2"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w1, w11, [x8]
	bfi	x1, x11, #32, #32
	tst	x1, #0x6
	b.ne	.LBB52_5
// %bb.2:                               // %"$4"
                                        //   in Loop: Header=BB52_1 Depth=1
	add	x11, x9, #208                   // =208
	cmp	x11, x1
	ccmp	x1, x9, #0, hs
	b.hs	.LBB52_6
// %bb.3:                               // %"$8"
                                        //   in Loop: Header=BB52_1 Depth=1
	ldp	w8, w11, [x8, #8]
	bfi	x8, x11, #32, #32
	stp	w10, wzr, [x1]
	tst	x8, #0xf
	b.eq	.LBB52_1
// %bb.4:                               // %"$10"
	mov	w0, #2
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.LBB52_5:                               // %"$3"
	bl	varErr
.LBB52_6:                               // %"$7"
	bl	protErr
.Lfunc_end52:
	.size	_zero, .Lfunc_end52-_zero
	.cfi_endproc
                                        // -- End function
	.globl	_one                            // -- Begin function _one
	.p2align	4
	.type	_one,@function
_one:                                   // @_one
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	ldp	w8, w9, [x0, #8]
	bfi	x8, x9, #32, #32
	adrp	x9, SymTab+8
	add	x9, x9, :lo12:SymTab+8
	mov	w10, #18
.LBB53_1:                               // %"$2"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w1, w11, [x8]
	bfi	x1, x11, #32, #32
	tst	x1, #0x6
	b.ne	.LBB53_5
// %bb.2:                               // %"$4"
                                        //   in Loop: Header=BB53_1 Depth=1
	add	x11, x9, #208                   // =208
	cmp	x11, x1
	ccmp	x1, x9, #0, hs
	b.hs	.LBB53_6
// %bb.3:                               // %"$8"
                                        //   in Loop: Header=BB53_1 Depth=1
	ldp	w8, w11, [x8, #8]
	bfi	x8, x11, #32, #32
	stp	w10, wzr, [x1]
	tst	x8, #0xf
	b.eq	.LBB53_1
// %bb.4:                               // %"$10"
	mov	w0, #18
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.LBB53_5:                               // %"$3"
	bl	varErr
.LBB53_6:                               // %"$7"
	bl	protErr
.Lfunc_end53:
	.size	_one, .Lfunc_end53-_one
	.cfi_endproc
                                        // -- End function
	.globl	_default                        // -- Begin function _default
	.p2align	4
	.type	_default,@function
_default:                               // @_default
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-48]!                // 8-byte Folded Spill
	stp	x22, x21, [sp, #16]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #32]             // 16-byte Folded Spill
	.cfi_def_cfa_offset 48
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w30, -48
	mov	x19, x0
	ldp	w8, w9, [x0, #8]
	bfi	x8, x9, #32, #32
	adrp	x21, SymTab+8
	add	x21, x21, :lo12:SymTab+8
	b	.LBB54_4
.LBB54_1:                               // %"$14"
                                        //   in Loop: Header=BB54_4 Depth=1
	bl	evList
.LBB54_2:                               // %"$11"
                                        //   in Loop: Header=BB54_4 Depth=1
	lsr	x8, x0, #32
	stp	w0, w8, [x20]
.LBB54_3:                               // %"$10"
                                        //   in Loop: Header=BB54_4 Depth=1
	ldp	w8, w9, [x22, #8]
	bfi	x8, x9, #32, #32
	tst	x8, #0xf
	b.ne	.LBB54_10
.LBB54_4:                               // %"$2"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w20, w9, [x8]
	bfi	x20, x9, #32, #32
	tst	x20, #0x6
	b.ne	.LBB54_11
// %bb.5:                               // %"$4"
                                        //   in Loop: Header=BB54_4 Depth=1
	add	x9, x21, #208                   // =208
	cmp	x9, x20
	ccmp	x20, x21, #0, hs
	b.hs	.LBB54_12
// %bb.6:                               // %"$8"
                                        //   in Loop: Header=BB54_4 Depth=1
	ldp	w22, w9, [x8, #8]
	bfi	x22, x9, #32, #32
	ldp	w9, w8, [x20]
	bfi	x9, x8, #32, #32
	cmp	x9, x21
	b.ne	.LBB54_3
// %bb.7:                               // %"$9"
                                        //   in Loop: Header=BB54_4 Depth=1
	ldp	w0, w8, [x22]
	bfi	x0, x8, #32, #32
	tst	x0, #0x6
	b.ne	.LBB54_2
// %bb.8:                               // %"$12"
                                        //   in Loop: Header=BB54_4 Depth=1
	tbz	w0, #3, .LBB54_1
// %bb.9:                               // %"$15"
                                        //   in Loop: Header=BB54_4 Depth=1
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB54_2
.LBB54_10:                              // %"$18"
	ldp	w0, w8, [x20]
	bfi	x0, x8, #32, #32
	ldp	x20, x19, [sp, #32]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #16]             // 16-byte Folded Reload
	ldr	x30, [sp], #48                  // 8-byte Folded Reload
	ret
.LBB54_11:                              // %"$3"
	mov	x0, x19
	mov	x1, x20
	bl	varErr
.LBB54_12:                              // %"$7"
	mov	x0, x19
	mov	x1, x20
	bl	protErr
.Lfunc_end54:
	.size	_default, .Lfunc_end54-_default
	.cfi_endproc
                                        // -- End function
	.globl	_push                           // -- Begin function _push
	.p2align	4
	.type	_push,@function
_push:                                  // @_push
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-64]!           // 16-byte Folded Spill
	stp	x24, x23, [sp, #16]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #32]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #48]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 64
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w30, -56
	.cfi_offset w29, -64
	mov	x20, x0
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w19, w8, [x9]
	bfi	x19, x8, #32, #32
	ldp	w21, w24, [x9, #8]
	tst	x19, #0x6
	b.ne	.LBB55_4
// %bb.1:                               // %"$3"
	tbz	w19, #3, .LBB55_3
// %bb.2:                               // %"$6"
	ldp	w19, w8, [x19]
	bfi	x19, x8, #32, #32
	b	.LBB55_4
.LBB55_3:                               // %"$5"
	mov	x0, x19
	bl	evList
	mov	x19, x0
.LBB55_4:                               // %"$2"
	tst	x19, #0x6
	b.ne	.LBB55_16
// %bb.5:                               // %"$8"
	adrp	x8, SymTab+8
	add	x8, x8, :lo12:SymTab+8
	add	x9, x8, #208                    // =208
	cmp	x9, x19
	ccmp	x19, x8, #0, hs
	b.hs	.LBB55_17
// %bb.6:                               // %"$12"
	adrp	x22, env
	ldr	x8, [x22, :lo12:env]
	mov	x9, sp
	sub	x23, x9, #16                    // =16
	mov	sp, x23
	lsr	x10, x19, #32
	lsr	x11, x8, #32
	stp	w19, w10, [x9, #-16]
	stp	w8, w11, [x9, #-8]
	str	x23, [x22, :lo12:env]
	tbz	w19, #3, .LBB55_8
// %bb.7:                               // %"$14"
	ldurb	w8, [x19, #-8]
	ubfx	w8, w8, #3, #1
	bfi	x21, x24, #32, #32
	cbz	w8, .LBB55_12
	b	.LBB55_9
.LBB55_8:
	mov	w8, wzr
	bfi	x21, x24, #32, #32
	cbz	w8, .LBB55_12
.LBB55_9:                               // %"$15"
	mov	x0, x20
	mov	x1, x19
	bl	dbTouch
	b	.LBB55_12
.LBB55_10:                              // %"$21"
                                        //   in Loop: Header=BB55_12 Depth=1
	mov	x0, x20
	bl	evList
	mov	x20, x0
.LBB55_11:                              // %"$18"
                                        //   in Loop: Header=BB55_12 Depth=1
	ldp	w1, w8, [x19]
	bfi	x1, x8, #32, #32
	mov	x0, x20
	bl	cons
	lsr	x8, x0, #32
	stp	w0, w8, [x19]
	tst	x21, #0xf
	b.ne	.LBB55_15
.LBB55_12:                              // %"$17"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w20, w8, [x21]
	bfi	x20, x8, #32, #32
	ldp	w21, w8, [x21, #8]
	bfi	x21, x8, #32, #32
	tst	x20, #0x6
	b.ne	.LBB55_11
// %bb.13:                              // %"$19"
                                        //   in Loop: Header=BB55_12 Depth=1
	tbz	w20, #3, .LBB55_10
// %bb.14:                              // %"$22"
                                        //   in Loop: Header=BB55_12 Depth=1
	ldp	w20, w8, [x20]
	bfi	x20, x8, #32, #32
	b	.LBB55_11
.LBB55_15:                              // %"$24"
	ldp	w9, w8, [x23, #8]
	bfi	x9, x8, #32, #32
	str	x9, [x22, :lo12:env]
	mov	x0, x20
	mov	sp, x29
	ldp	x20, x19, [sp, #48]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #32]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #64             // 16-byte Folded Reload
	ret
.LBB55_16:                              // %"$7"
	mov	x0, x20
	mov	x1, x19
	bl	varErr
.LBB55_17:                              // %"$11"
	mov	x0, x20
	mov	x1, x19
	bl	protErr
.Lfunc_end55:
	.size	_push, .Lfunc_end55-_push
	.cfi_endproc
                                        // -- End function
	.globl	_push1                          // -- Begin function _push1
	.p2align	4
	.type	_push1,@function
_push1:                                 // @_push1
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-80]!           // 16-byte Folded Spill
	str	x25, [sp, #16]                  // 8-byte Folded Spill
	stp	x24, x23, [sp, #32]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #48]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #64]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 80
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -64
	.cfi_offset w30, -72
	.cfi_offset w29, -80
	mov	x20, x0
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w19, w8, [x9]
	bfi	x19, x8, #32, #32
	ldp	w22, w21, [x9, #8]
	tst	x19, #0x6
	b.ne	.LBB56_4
// %bb.1:                               // %"$3"
	tbz	w19, #3, .LBB56_3
// %bb.2:                               // %"$6"
	ldp	w19, w8, [x19]
	bfi	x19, x8, #32, #32
	b	.LBB56_4
.LBB56_3:                               // %"$5"
	mov	x0, x19
	bl	evList
	mov	x19, x0
.LBB56_4:                               // %"$2"
	tst	x19, #0x6
	b.ne	.LBB56_20
// %bb.5:                               // %"$8"
	adrp	x8, SymTab+8
	add	x8, x8, :lo12:SymTab+8
	add	x9, x8, #208                    // =208
	cmp	x9, x19
	ccmp	x19, x8, #0, hs
	b.hs	.LBB56_21
// %bb.6:                               // %"$12"
	adrp	x23, env
	ldr	x8, [x23, :lo12:env]
	mov	x9, sp
	sub	x24, x9, #16                    // =16
	mov	sp, x24
	lsr	x10, x19, #32
	lsr	x11, x8, #32
	stp	w19, w10, [x9, #-16]
	stp	w8, w11, [x9, #-8]
	str	x24, [x23, :lo12:env]
	tbz	w19, #3, .LBB56_8
// %bb.7:                               // %"$14"
	ldurb	w8, [x19, #-8]
	ubfx	w8, w8, #3, #1
	bfi	x22, x21, #32, #32
	cbz	w8, .LBB56_12
	b	.LBB56_9
.LBB56_8:
	mov	w8, wzr
	bfi	x22, x21, #32, #32
	cbz	w8, .LBB56_12
.LBB56_9:                               // %"$15"
	mov	x0, x20
	mov	x1, x19
	bl	dbTouch
	b	.LBB56_12
.LBB56_10:                              // %"$29.critedge"
                                        //   in Loop: Header=BB56_12 Depth=1
	mov	x0, x20
	mov	x1, x21
	bl	cons
	lsr	x8, x0, #32
	stp	w0, w8, [x19]
.LBB56_11:                              // %"$30"
                                        //   in Loop: Header=BB56_12 Depth=1
	tst	x22, #0xf
	b.ne	.LBB56_19
.LBB56_12:                              // %"$17"
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB56_17 Depth 2
	ldp	w20, w8, [x22]
	bfi	x20, x8, #32, #32
	ldp	w22, w8, [x22, #8]
	bfi	x22, x8, #32, #32
	tst	x20, #0x6
	b.ne	.LBB56_16
// %bb.13:                              // %"$19"
                                        //   in Loop: Header=BB56_12 Depth=1
	tbz	w20, #3, .LBB56_15
// %bb.14:                              // %"$22"
                                        //   in Loop: Header=BB56_12 Depth=1
	ldp	w20, w8, [x20]
	bfi	x20, x8, #32, #32
	b	.LBB56_16
.LBB56_15:                              // %"$21"
                                        //   in Loop: Header=BB56_12 Depth=1
	mov	x0, x20
	bl	evList
	mov	x20, x0
.LBB56_16:                              // %"$18"
                                        //   in Loop: Header=BB56_12 Depth=1
	ldp	w21, w8, [x19]
	bfi	x21, x8, #32, #32
	mov	x25, x21
	tst	x25, #0xf
	b.ne	.LBB56_10
.LBB56_17:                              // %"$24"
                                        //   Parent Loop BB56_12 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	w1, w8, [x25]
	bfi	x1, x8, #32, #32
	mov	x0, x20
	bl	equal
	tbnz	w0, #0, .LBB56_11
// %bb.18:                              // %"$27"
                                        //   in Loop: Header=BB56_17 Depth=2
	ldp	w25, w8, [x25, #8]
	bfi	x25, x8, #32, #32
	tst	x25, #0xf
	b.eq	.LBB56_17
	b	.LBB56_10
.LBB56_19:                              // %"$32"
	ldp	w9, w8, [x24, #8]
	bfi	x9, x8, #32, #32
	str	x9, [x23, :lo12:env]
	mov	x0, x20
	mov	sp, x29
	ldp	x20, x19, [sp, #64]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #48]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #32]             // 16-byte Folded Reload
	ldr	x25, [sp, #16]                  // 8-byte Folded Reload
	ldp	x29, x30, [sp], #80             // 16-byte Folded Reload
	ret
.LBB56_20:                              // %"$7"
	mov	x0, x20
	mov	x1, x19
	bl	varErr
.LBB56_21:                              // %"$11"
	mov	x0, x20
	mov	x1, x19
	bl	protErr
.Lfunc_end56:
	.size	_push1, .Lfunc_end56-_push1
	.cfi_endproc
                                        // -- End function
	.globl	_push1q                         // -- Begin function _push1q
	.p2align	4
	.type	_push1q,@function
_push1q:                                // @_push1q
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-64]!           // 16-byte Folded Spill
	stp	x24, x23, [sp, #16]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #32]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #48]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 64
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w30, -56
	.cfi_offset w29, -64
	mov	x20, x0
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w19, w8, [x9]
	bfi	x19, x8, #32, #32
	ldp	w21, w24, [x9, #8]
	tst	x19, #0x6
	b.ne	.LBB57_4
// %bb.1:                               // %"$3"
	tbz	w19, #3, .LBB57_3
// %bb.2:                               // %"$6"
	ldp	w19, w8, [x19]
	bfi	x19, x8, #32, #32
	b	.LBB57_4
.LBB57_3:                               // %"$5"
	mov	x0, x19
	bl	evList
	mov	x19, x0
.LBB57_4:                               // %"$2"
	tst	x19, #0x6
	b.ne	.LBB57_20
// %bb.5:                               // %"$8"
	adrp	x8, SymTab+8
	add	x8, x8, :lo12:SymTab+8
	add	x9, x8, #208                    // =208
	cmp	x9, x19
	ccmp	x19, x8, #0, hs
	b.hs	.LBB57_21
// %bb.6:                               // %"$12"
	adrp	x22, env
	ldr	x8, [x22, :lo12:env]
	mov	x9, sp
	sub	x23, x9, #16                    // =16
	mov	sp, x23
	lsr	x10, x19, #32
	lsr	x11, x8, #32
	stp	w19, w10, [x9, #-16]
	stp	w8, w11, [x9, #-8]
	str	x23, [x22, :lo12:env]
	tbz	w19, #3, .LBB57_8
// %bb.7:                               // %"$14"
	ldurb	w8, [x19, #-8]
	ubfx	w8, w8, #3, #1
	bfi	x21, x24, #32, #32
	cbz	w8, .LBB57_12
	b	.LBB57_9
.LBB57_8:
	mov	w8, wzr
	bfi	x21, x24, #32, #32
	cbz	w8, .LBB57_12
.LBB57_9:                               // %"$15"
	mov	x0, x20
	mov	x1, x19
	bl	dbTouch
	b	.LBB57_12
.LBB57_10:                              // %"$29.critedge"
                                        //   in Loop: Header=BB57_12 Depth=1
	mov	x0, x20
	bl	cons
	lsr	x8, x0, #32
	stp	w0, w8, [x19]
.LBB57_11:                              // %"$30"
                                        //   in Loop: Header=BB57_12 Depth=1
	tst	x21, #0xf
	b.ne	.LBB57_19
.LBB57_12:                              // %"$17"
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB57_17 Depth 2
	ldp	w20, w8, [x21]
	bfi	x20, x8, #32, #32
	ldp	w21, w8, [x21, #8]
	bfi	x21, x8, #32, #32
	tst	x20, #0x6
	b.ne	.LBB57_16
// %bb.13:                              // %"$19"
                                        //   in Loop: Header=BB57_12 Depth=1
	tbz	w20, #3, .LBB57_15
// %bb.14:                              // %"$22"
                                        //   in Loop: Header=BB57_12 Depth=1
	ldp	w20, w8, [x20]
	bfi	x20, x8, #32, #32
	b	.LBB57_16
.LBB57_15:                              // %"$21"
                                        //   in Loop: Header=BB57_12 Depth=1
	mov	x0, x20
	bl	evList
	mov	x20, x0
.LBB57_16:                              // %"$18"
                                        //   in Loop: Header=BB57_12 Depth=1
	ldp	w1, w8, [x19]
	bfi	x1, x8, #32, #32
	mov	x8, x1
	tst	x8, #0xf
	b.ne	.LBB57_10
.LBB57_17:                              // %"$24"
                                        //   Parent Loop BB57_12 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	w10, w9, [x8]
	bfi	x10, x9, #32, #32
	cmp	x20, x10
	b.eq	.LBB57_11
// %bb.18:                              // %"$27"
                                        //   in Loop: Header=BB57_17 Depth=2
	ldp	w8, w9, [x8, #8]
	bfi	x8, x9, #32, #32
	tst	x8, #0xf
	b.eq	.LBB57_17
	b	.LBB57_10
.LBB57_19:                              // %"$32"
	ldp	w9, w8, [x23, #8]
	bfi	x9, x8, #32, #32
	str	x9, [x22, :lo12:env]
	mov	x0, x20
	mov	sp, x29
	ldp	x20, x19, [sp, #48]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #32]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #64             // 16-byte Folded Reload
	ret
.LBB57_20:                              // %"$7"
	mov	x0, x20
	mov	x1, x19
	bl	varErr
.LBB57_21:                              // %"$11"
	mov	x0, x20
	mov	x1, x19
	bl	protErr
.Lfunc_end57:
	.size	_push1q, .Lfunc_end57-_push1q
	.cfi_endproc
                                        // -- End function
	.globl	_pop                            // -- Begin function _pop
	.p2align	4
	.type	_pop,@function
_pop:                                   // @_pop
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-32]!                // 8-byte Folded Spill
	stp	x20, x19, [sp, #16]             // 16-byte Folded Spill
	.cfi_def_cfa_offset 32
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w30, -32
	mov	x20, x0
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w19, w8, [x9]
	bfi	x19, x8, #32, #32
	tst	x19, #0x6
	b.ne	.LBB58_4
// %bb.1:                               // %"$3"
	tbz	w19, #3, .LBB58_3
// %bb.2:                               // %"$6"
	ldp	w19, w8, [x19]
	bfi	x19, x8, #32, #32
	b	.LBB58_4
.LBB58_3:                               // %"$5"
	mov	x0, x19
	bl	evList
	mov	x19, x0
.LBB58_4:                               // %"$2"
	tst	x19, #0x6
	b.ne	.LBB58_12
// %bb.5:                               // %"$8"
	adrp	x8, SymTab+8
	add	x8, x8, :lo12:SymTab+8
	add	x9, x8, #208                    // =208
	cmp	x9, x19
	ccmp	x19, x8, #0, hs
	b.hs	.LBB58_13
// %bb.6:                               // %"$12"
	tbz	w19, #3, .LBB58_9
// %bb.7:                               // %"$14"
	ldurb	w8, [x19, #-8]
	tbz	w8, #3, .LBB58_9
// %bb.8:                               // %"$15"
	mov	x0, x20
	mov	x1, x19
	bl	dbTouch
.LBB58_9:                               // %"$16"
	ldp	w0, w8, [x19]
	bfi	x0, x8, #32, #32
	tst	x0, #0xf
	b.ne	.LBB58_11
// %bb.10:                              // %"$18"
	ldp	w8, w9, [x0, #8]
	stp	w8, w9, [x19]
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
.LBB58_11:                              // %"$19"
	ldp	x20, x19, [sp, #16]             // 16-byte Folded Reload
	ldr	x30, [sp], #32                  // 8-byte Folded Reload
	ret
.LBB58_12:                              // %"$7"
	mov	x0, x20
	mov	x1, x19
	bl	varErr
.LBB58_13:                              // %"$11"
	mov	x0, x20
	mov	x1, x19
	bl	protErr
.Lfunc_end58:
	.size	_pop, .Lfunc_end58-_pop
	.cfi_endproc
                                        // -- End function
	.globl	_popq                           // -- Begin function _popq
	.p2align	4
	.type	_popq,@function
_popq:                                  // @_popq
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w1, w8, [x9]
	bfi	x1, x8, #32, #32
	tst	x1, #0x6
	b.ne	.LBB59_5
// %bb.1:                               // %"$3"
	adrp	x8, SymTab+8
	add	x8, x8, :lo12:SymTab+8
	add	x9, x8, #208                    // =208
	cmp	x9, x1
	ccmp	x1, x8, #0, hs
	b.hs	.LBB59_6
// %bb.2:                               // %"$7"
	ldp	w0, w8, [x1]
	bfi	x0, x8, #32, #32
	tst	x0, #0xf
	b.eq	.LBB59_4
// %bb.3:                               // %"$10"
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.LBB59_4:                               // %"$9"
	ldp	w8, w9, [x0, #8]
	stp	w8, w9, [x1]
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.LBB59_5:                               // %"$2"
	bl	varErr
.LBB59_6:                               // %"$6"
	bl	protErr
.Lfunc_end59:
	.size	_popq, .Lfunc_end59-_popq
	.cfi_endproc
                                        // -- End function
	.globl	_cut                            // -- Begin function _cut
	.p2align	4
	.type	_cut,@function
_cut:                                   // @_cut
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-80]!           // 16-byte Folded Spill
	stp	x26, x25, [sp, #16]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #32]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #48]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #64]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 80
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w30, -72
	.cfi_offset w29, -80
	mov	x22, x0
	ldp	w20, w8, [x0, #8]
	bfi	x20, x8, #32, #32
	mov	x1, x20
	bl	evCnt
	adrp	x21, SymTab+8
	add	x21, x21, :lo12:SymTab+8
	cmp	x0, #1                          // =1
	b.lt	.LBB60_16
// %bb.1:                               // %"$3"
	mov	x19, x0
	ldp	w9, w8, [x20, #8]
	bfi	x9, x8, #32, #32
	ldp	w20, w8, [x9]
	bfi	x20, x8, #32, #32
	tst	x20, #0x6
	b.ne	.LBB60_5
// %bb.2:                               // %"$6"
	tbz	w20, #3, .LBB60_4
// %bb.3:                               // %"$9"
	ldp	w20, w8, [x20]
	bfi	x20, x8, #32, #32
	b	.LBB60_5
.LBB60_4:                               // %"$8"
	mov	x0, x20
	bl	evList
	mov	x20, x0
.LBB60_5:                               // %"$5"
	tst	x20, #0x6
	b.ne	.LBB60_17
// %bb.6:                               // %"$11"
	add	x8, x21, #208                   // =208
	cmp	x8, x20
	ccmp	x20, x21, #0, hs
	b.hs	.LBB60_18
// %bb.7:                               // %"$15"
	tbz	w20, #3, .LBB60_9
// %bb.8:                               // %"$17"
	ldurb	w8, [x20, #-8]
	ubfx	w8, w8, #3, #1
	cbnz	w8, .LBB60_10
	b	.LBB60_11
.LBB60_9:
	mov	w8, wzr
	cbz	w8, .LBB60_11
.LBB60_10:                              // %"$18"
	mov	x0, x22
	mov	x1, x20
	bl	dbTouch
.LBB60_11:                              // %"$19"
	ldp	w21, w8, [x20]
	bfi	x21, x8, #32, #32
	tst	x21, #0xf
	b.ne	.LBB60_16
// %bb.12:                              // %"$21"
	adrp	x23, env
	ldr	x8, [x23, :lo12:env]
	mov	x9, sp
	sub	x24, x9, #16                    // =16
	mov	sp, x24
	lsr	x10, x21, #32
	stp	w21, w10, [x9, #-16]
	lsr	x10, x8, #32
	stp	w8, w10, [x9, #-8]
	str	x24, [x23, :lo12:env]
	ldp	w0, w8, [x21]
	bfi	x0, x8, #32, #32
	ldp	w25, w8, [x21, #8]
	bfi	x25, x8, #32, #32
	adrp	x22, SymTab+8
	add	x22, x22, :lo12:SymTab+8
	mov	x1, x22
	bl	cons
	mov	x21, x0
	ldr	x8, [x23, :lo12:env]
	mov	x9, sp
	sub	x10, x9, #16                    // =16
	mov	sp, x10
	lsr	x11, x0, #32
	lsr	x12, x8, #32
	stp	w21, w11, [x9, #-16]
	stp	w8, w12, [x9, #-8]
	mov	x26, x0
	str	x10, [x23, :lo12:env]
.LBB60_13:                              // %"$23"
                                        // =>This Inner Loop Header: Depth=1
	subs	x8, x19, #1                     // =1
	cset	w9, ne
	tst	x25, #0xf
	csel	x19, x19, x8, ne
	csel	w8, wzr, w9, ne
	cbz	w8, .LBB60_15
// %bb.14:                              // %"$26"
                                        //   in Loop: Header=BB60_13 Depth=1
	ldp	w0, w8, [x25]
	bfi	x0, x8, #32, #32
	ldp	w25, w8, [x25, #8]
	bfi	x25, x8, #32, #32
	mov	x1, x22
	bl	cons
	lsr	x8, x0, #32
	stp	w0, w8, [x26, #8]
	mov	x26, x0
	b	.LBB60_13
.LBB60_15:                              // %"$27"
	lsr	x8, x25, #32
	stp	w25, w8, [x20]
	ldp	w9, w8, [x24, #8]
	bfi	x9, x8, #32, #32
	str	x9, [x23, :lo12:env]
.LBB60_16:                              // %"$4"
	mov	x0, x21
	mov	sp, x29
	ldp	x20, x19, [sp, #64]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #48]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #32]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #80             // 16-byte Folded Reload
	ret
.LBB60_17:                              // %"$10"
	mov	x0, x22
	mov	x1, x20
	bl	varErr
.LBB60_18:                              // %"$14"
	mov	x0, x22
	mov	x1, x20
	bl	protErr
.Lfunc_end60:
	.size	_cut, .Lfunc_end60-_cut
	.cfi_endproc
                                        // -- End function
	.globl	_del                            // -- Begin function _del
	.p2align	4
	.type	_del,@function
_del:                                   // @_del
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-96]!           // 16-byte Folded Spill
	stp	x28, x27, [sp, #16]             // 16-byte Folded Spill
	stp	x26, x25, [sp, #32]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #48]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #64]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #80]             // 16-byte Folded Spill
	mov	x29, sp
	sub	sp, sp, #16                     // =16
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	mov	x22, x0
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w19, w8, [x9]
	bfi	x19, x8, #32, #32
	ldp	w21, w8, [x9, #8]
	bfi	x21, x8, #32, #32
	tst	x19, #0x6
	b.ne	.LBB61_4
// %bb.1:                               // %"$3"
	tbz	w19, #3, .LBB61_3
// %bb.2:                               // %"$6"
	ldp	w19, w8, [x19]
	bfi	x19, x8, #32, #32
	b	.LBB61_4
.LBB61_3:                               // %"$5"
	mov	x0, x19
	bl	evList
	mov	x19, x0
.LBB61_4:                               // %"$2"
	adrp	x25, env
	ldr	x8, [x25, :lo12:env]
	mov	x9, sp
	sub	x27, x9, #16                    // =16
	mov	sp, x27
	lsr	x10, x19, #32
	stp	w19, w10, [x9, #-16]
	lsr	x10, x8, #32
	stp	w8, w10, [x9, #-8]
	str	x27, [x25, :lo12:env]
	ldp	w20, w8, [x21]
	bfi	x20, x8, #32, #32
	ldp	w23, w24, [x21, #8]
	tst	x20, #0x6
	b.ne	.LBB61_8
// %bb.5:                               // %"$8"
	tbz	w20, #3, .LBB61_7
// %bb.6:                               // %"$11"
	ldp	w20, w8, [x20]
	bfi	x20, x8, #32, #32
	b	.LBB61_8
.LBB61_7:                               // %"$10"
	mov	x0, x20
	bl	evList
	mov	x20, x0
.LBB61_8:                               // %"$7"
	tst	x20, #0x6
	b.ne	.LBB61_28
// %bb.9:                               // %"$13"
	adrp	x21, SymTab+8
	add	x21, x21, :lo12:SymTab+8
	add	x8, x21, #208                   // =208
	cmp	x8, x20
	ccmp	x20, x21, #0, hs
	b.hs	.LBB61_29
// %bb.10:                              // %"$17"
	bfi	x23, x24, #32, #32
	ldr	x8, [x25, :lo12:env]
	mov	x9, sp
	sub	x10, x9, #16                    // =16
	mov	sp, x10
	lsr	x11, x20, #32
	stp	w20, w11, [x9, #-16]
	lsr	x11, x8, #32
	stp	w8, w11, [x9, #-8]
	str	x10, [x25, :lo12:env]
	ldp	w23, w8, [x23]
	bfi	x23, x8, #32, #32
	tst	x23, #0x6
	b.ne	.LBB61_13
// %bb.11:                              // %"$19"
	tbz	w23, #3, .LBB61_16
// %bb.12:                              // %"$22"
	ldp	w23, w8, [x23]
	bfi	x23, x8, #32, #32
.LBB61_13:                              // %"$18"
	tbz	w20, #3, .LBB61_17
.LBB61_14:                              // %"$24"
	ldurb	w8, [x20, #-8]
	tbz	w8, #3, .LBB61_17
// %bb.15:                              // %"$25"
	mov	x0, x22
	mov	x1, x20
	bl	dbTouch
	b	.LBB61_17
.LBB61_16:                              // %"$21"
	mov	x0, x23
	bl	evList
	mov	x23, x0
	tbnz	w20, #3, .LBB61_14
.LBB61_17:                              // %"$26"
	ldp	w22, w8, [x20]
	bfi	x22, x8, #32, #32
.LBB61_18:                              // %"$27"
                                        // =>This Inner Loop Header: Depth=1
	tst	x22, #0xf
	b.ne	.LBB61_27
// %bb.19:                              // %"$28"
                                        //   in Loop: Header=BB61_18 Depth=1
	ldp	w24, w8, [x22]
	bfi	x24, x8, #32, #32
	ldp	w22, w8, [x22, #8]
	bfi	x22, x8, #32, #32
	mov	x0, x19
	mov	x1, x24
	bl	equal
	tbz	w0, #0, .LBB61_21
// %bb.20:                              // %"$31"
                                        //   in Loop: Header=BB61_18 Depth=1
	lsr	x8, x22, #32
	stp	w22, w8, [x20]
	cmp	x23, x21
	b.ne	.LBB61_18
	b	.LBB61_27
.LBB61_21:                              // %"$32"
	mov	x0, x24
	mov	x1, x21
	bl	cons
	mov	x26, x0
	ldr	x8, [x25, :lo12:env]
	mov	x9, sp
	sub	x28, x9, #16                    // =16
	mov	sp, x28
	lsr	x11, x0, #32
	lsr	x10, x8, #32
	stur	x11, [x29, #-8]                 // 8-byte Folded Spill
	stp	w26, w11, [x9, #-16]
	stp	w8, w10, [x9, #-8]
	mov	x24, x0
	str	x28, [x25, :lo12:env]
	b	.LBB61_23
.LBB61_22:                              // %"$37"
                                        //   in Loop: Header=BB61_23 Depth=1
	mov	x0, x25
	mov	x1, x21
	bl	cons
	lsr	x8, x0, #32
	stp	w0, w8, [x24, #8]
	mov	x24, x0
.LBB61_23:                              // %"$33"
                                        // =>This Inner Loop Header: Depth=1
	tst	x22, #0xf
	b.ne	.LBB61_26
// %bb.24:                              // %"$34"
                                        //   in Loop: Header=BB61_23 Depth=1
	ldp	w25, w8, [x22]
	bfi	x25, x8, #32, #32
	ldp	w22, w8, [x22, #8]
	bfi	x22, x8, #32, #32
	mov	x0, x19
	mov	x1, x25
	bl	equal
	tbz	w0, #0, .LBB61_22
// %bb.25:                              // %"$36"
                                        //   in Loop: Header=BB61_23 Depth=1
	cmp	x23, x21
	b.ne	.LBB61_23
.LBB61_26:                              // %"$35"
	ldp	w9, w8, [x28, #8]
	bfi	x9, x8, #32, #32
	adrp	x25, env
	str	x9, [x25, :lo12:env]
	lsr	x8, x22, #32
	stp	w22, w8, [x24, #8]
	ldur	x8, [x29, #-8]                  // 8-byte Folded Reload
	stp	w26, w8, [x20]
	mov	x22, x26
.LBB61_27:                              // %"$29"
	ldp	w9, w8, [x27, #8]
	bfi	x9, x8, #32, #32
	str	x9, [x25, :lo12:env]
	mov	x0, x22
	mov	sp, x29
	ldp	x20, x19, [sp, #80]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #64]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #48]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #32]             // 16-byte Folded Reload
	ldp	x28, x27, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #96             // 16-byte Folded Reload
	ret
.LBB61_28:                              // %"$12"
	mov	x0, x22
	mov	x1, x20
	bl	varErr
.LBB61_29:                              // %"$16"
	mov	x0, x22
	mov	x1, x20
	bl	protErr
.Lfunc_end61:
	.size	_del, .Lfunc_end61-_del
	.cfi_endproc
                                        // -- End function
	.globl	_queue                          // -- Begin function _queue
	.p2align	4
	.type	_queue,@function
_queue:                                 // @_queue
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-64]!           // 16-byte Folded Spill
	str	x23, [sp, #16]                  // 8-byte Folded Spill
	stp	x22, x21, [sp, #32]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #48]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 64
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -48
	.cfi_offset w30, -56
	.cfi_offset w29, -64
	mov	x20, x0
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w19, w8, [x9]
	bfi	x19, x8, #32, #32
	ldp	w23, w21, [x9, #8]
	tst	x19, #0x6
	b.ne	.LBB62_4
// %bb.1:                               // %"$3"
	tbz	w19, #3, .LBB62_3
// %bb.2:                               // %"$6"
	ldp	w19, w8, [x19]
	bfi	x19, x8, #32, #32
	b	.LBB62_4
.LBB62_3:                               // %"$5"
	mov	x0, x19
	bl	evList
	mov	x19, x0
.LBB62_4:                               // %"$2"
	tst	x19, #0x6
	b.ne	.LBB62_18
// %bb.5:                               // %"$8"
	adrp	x8, SymTab+8
	add	x8, x8, :lo12:SymTab+8
	add	x9, x8, #208                    // =208
	cmp	x9, x19
	ccmp	x19, x8, #0, hs
	b.hs	.LBB62_19
// %bb.6:                               // %"$12"
	bfi	x23, x21, #32, #32
	adrp	x21, env
	ldr	x8, [x21, :lo12:env]
	mov	x9, sp
	sub	x22, x9, #16                    // =16
	mov	sp, x22
	lsr	x10, x19, #32
	lsr	x11, x8, #32
	stp	w19, w10, [x9, #-16]
	stp	w8, w11, [x9, #-8]
	str	x22, [x21, :lo12:env]
	tbz	w19, #3, .LBB62_9
// %bb.7:                               // %"$14"
	ldurb	w8, [x19, #-8]
	tbz	w8, #3, .LBB62_9
// %bb.8:                               // %"$15"
	mov	x0, x20
	mov	x1, x19
	bl	dbTouch
.LBB62_9:                               // %"$16"
	ldp	w20, w8, [x23]
	bfi	x20, x8, #32, #32
	tst	x20, #0x6
	b.ne	.LBB62_13
// %bb.10:                              // %"$18"
	tbz	w20, #3, .LBB62_12
// %bb.11:                              // %"$21"
	ldp	w20, w8, [x20]
	bfi	x20, x8, #32, #32
	b	.LBB62_13
.LBB62_12:                              // %"$20"
	mov	x0, x20
	bl	evList
	mov	x20, x0
.LBB62_13:                              // %"$17"
	adrp	x1, SymTab+8
	add	x1, x1, :lo12:SymTab+8
	mov	x0, x20
	bl	cons
	ldp	w8, w9, [x19]
	bfi	x8, x9, #32, #32
	tst	x8, #0xf
	b.ne	.LBB62_17
	b	.LBB62_15
.LBB62_14:                              // %"$26"
                                        //   in Loop: Header=BB62_15 Depth=1
	ldp	w8, w9, [x8, #8]
	bfi	x8, x9, #32, #32
.LBB62_15:                              // %"$25"
                                        // =>This Inner Loop Header: Depth=1
	ldrb	w9, [x8, #8]
	tst	w9, #0xf
	b.eq	.LBB62_14
// %bb.16:                              // %"$27"
	add	x19, x8, #8                     // =8
.LBB62_17:                              // %"$24"
	lsr	x8, x0, #32
	stp	w0, w8, [x19]
	ldp	w9, w8, [x22, #8]
	bfi	x9, x8, #32, #32
	str	x9, [x21, :lo12:env]
	mov	x0, x20
	mov	sp, x29
	ldp	x20, x19, [sp, #48]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #32]             // 16-byte Folded Reload
	ldr	x23, [sp, #16]                  // 8-byte Folded Reload
	ldp	x29, x30, [sp], #64             // 16-byte Folded Reload
	ret
.LBB62_18:                              // %"$7"
	mov	x0, x20
	mov	x1, x19
	bl	varErr
.LBB62_19:                              // %"$11"
	mov	x0, x20
	mov	x1, x19
	bl	protErr
.Lfunc_end62:
	.size	_queue, .Lfunc_end62-_queue
	.cfi_endproc
                                        // -- End function
	.globl	_fifo                           // -- Begin function _fifo
	.p2align	4
	.type	_fifo,@function
_fifo:                                  // @_fifo
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-80]!           // 16-byte Folded Spill
	str	x25, [sp, #16]                  // 8-byte Folded Spill
	stp	x24, x23, [sp, #32]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #48]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #64]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 80
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -64
	.cfi_offset w30, -72
	.cfi_offset w29, -80
	mov	x20, x0
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w19, w8, [x9]
	bfi	x19, x8, #32, #32
	ldp	w24, w21, [x9, #8]
	tst	x19, #0x6
	b.ne	.LBB63_4
// %bb.1:                               // %"$3"
	tbz	w19, #3, .LBB63_3
// %bb.2:                               // %"$6"
	ldp	w19, w8, [x19]
	bfi	x19, x8, #32, #32
	b	.LBB63_4
.LBB63_3:                               // %"$5"
	mov	x0, x19
	bl	evList
	mov	x19, x0
.LBB63_4:                               // %"$2"
	tst	x19, #0x6
	b.ne	.LBB63_30
// %bb.5:                               // %"$8"
	adrp	x8, SymTab+8
	add	x8, x8, :lo12:SymTab+8
	add	x9, x8, #208                    // =208
	cmp	x9, x19
	ccmp	x19, x8, #0, hs
	b.hs	.LBB63_31
// %bb.6:                               // %"$12"
	adrp	x22, env
	ldr	x8, [x22, :lo12:env]
	mov	x9, sp
	sub	x23, x9, #16                    // =16
	mov	sp, x23
	lsr	x10, x19, #32
	lsr	x11, x8, #32
	stp	w19, w10, [x9, #-16]
	stp	w8, w11, [x9, #-8]
	str	x23, [x22, :lo12:env]
	tbz	w19, #3, .LBB63_8
// %bb.7:                               // %"$14"
	ldurb	w8, [x19, #-8]
	ubfx	w8, w8, #3, #1
	bfi	x24, x21, #32, #32
	cbnz	w8, .LBB63_9
	b	.LBB63_10
.LBB63_8:
	mov	w8, wzr
	bfi	x24, x21, #32, #32
	cbz	w8, .LBB63_10
.LBB63_9:                               // %"$15"
	mov	x0, x20
	mov	x1, x19
	bl	dbTouch
.LBB63_10:                              // %"$16"
	ldp	w21, w8, [x19]
	bfi	x21, x8, #32, #32
	tst	x24, #0xf
	b.eq	.LBB63_14
// %bb.11:                              // %"$18"
	tst	x21, #0xf
	adrp	x20, SymTab+8
	add	x20, x20, :lo12:SymTab+8
	b.ne	.LBB63_29
// %bb.12:                              // %"$36"
	ldp	w8, w9, [x21, #8]
	bfi	x8, x9, #32, #32
	cmp	x8, x21
	b.ne	.LBB63_19
// %bb.13:                              // %"$39"
	lsr	x8, x20, #32
	stp	w20, w8, [x19]
	ldp	w20, w8, [x21]
	bfi	x20, x8, #32, #32
	b	.LBB63_29
.LBB63_14:                              // %"$19"
	ldp	w20, w8, [x24]
	bfi	x20, x8, #32, #32
	tst	x20, #0x6
	b.ne	.LBB63_17
// %bb.15:                              // %"$21"
	tbz	w20, #3, .LBB63_20
// %bb.16:                              // %"$24"
	ldp	w20, w8, [x20]
	bfi	x20, x8, #32, #32
.LBB63_17:                              // %"$20"
	tst	x21, #0xf
	b.eq	.LBB63_21
.LBB63_18:                              // %"$26"
	mov	x0, x20
	mov	w1, #10
	bl	cons
	mov	x21, x0
	b	.LBB63_24
.LBB63_19:                              // %"$38"
	ldp	w9, w10, [x8, #8]
	stp	w9, w10, [x21, #8]
	ldp	w20, w9, [x8]
	bfi	x20, x9, #32, #32
	b	.LBB63_29
.LBB63_20:                              // %"$23"
	mov	x0, x20
	bl	evList
	mov	x20, x0
	tst	x21, #0xf
	b.ne	.LBB63_18
.LBB63_21:                              // %"$25"
	ldp	w1, w8, [x21, #8]
	bfi	x1, x8, #32, #32
	mov	x0, x20
	bl	cons
	b	.LBB63_24
.LBB63_22:                              // %"$34"
                                        //   in Loop: Header=BB63_24 Depth=1
	mov	x0, x20
	bl	evList
	mov	x20, x0
.LBB63_23:                              // %"$31"
                                        //   in Loop: Header=BB63_24 Depth=1
	ldp	w1, w8, [x25, #8]
	bfi	x1, x8, #32, #32
	mov	x0, x20
	bl	cons
	mov	x21, x25
.LBB63_24:                              // %"$28.preheader"
                                        // =>This Inner Loop Header: Depth=1
	mov	x25, x0
	lsr	x8, x0, #32
	stp	w0, w8, [x21, #8]
	ldp	w24, w8, [x24, #8]
	bfi	x24, x8, #32, #32
	tst	x24, #0xf
	b.ne	.LBB63_28
// %bb.25:                              // %"$29"
                                        //   in Loop: Header=BB63_24 Depth=1
	ldp	w20, w8, [x24]
	bfi	x20, x8, #32, #32
	tst	x20, #0x6
	b.ne	.LBB63_23
// %bb.26:                              // %"$32"
                                        //   in Loop: Header=BB63_24 Depth=1
	tbz	w20, #3, .LBB63_22
// %bb.27:                              // %"$35"
                                        //   in Loop: Header=BB63_24 Depth=1
	ldp	w20, w8, [x20]
	bfi	x20, x8, #32, #32
	b	.LBB63_23
.LBB63_28:                              // %"$30"
	lsr	x8, x25, #32
	stp	w25, w8, [x19]
.LBB63_29:                              // %"$17"
	ldp	w9, w8, [x23, #8]
	bfi	x9, x8, #32, #32
	str	x9, [x22, :lo12:env]
	mov	x0, x20
	mov	sp, x29
	ldp	x20, x19, [sp, #64]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #48]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #32]             // 16-byte Folded Reload
	ldr	x25, [sp, #16]                  // 8-byte Folded Reload
	ldp	x29, x30, [sp], #80             // 16-byte Folded Reload
	ret
.LBB63_30:                              // %"$7"
	mov	x0, x20
	mov	x1, x19
	bl	varErr
.LBB63_31:                              // %"$11"
	mov	x0, x20
	mov	x1, x19
	bl	protErr
.Lfunc_end63:
	.size	_fifo, .Lfunc_end63-_fifo
	.cfi_endproc
                                        // -- End function
	.globl	_idx                            // -- Begin function _idx
	.p2align	4
	.type	_idx,@function
_idx:                                   // @_idx
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-64]!           // 16-byte Folded Spill
	stp	x24, x23, [sp, #16]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #32]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #48]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 64
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w30, -56
	.cfi_offset w29, -64
	mov	x20, x0
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w19, w8, [x9]
	bfi	x19, x8, #32, #32
	ldp	w24, w21, [x9, #8]
	tst	x19, #0x6
	b.ne	.LBB64_4
// %bb.1:                               // %"$3"
	tbz	w19, #3, .LBB64_3
// %bb.2:                               // %"$6"
	ldp	w19, w8, [x19]
	bfi	x19, x8, #32, #32
	b	.LBB64_4
.LBB64_3:                               // %"$5"
	mov	x0, x19
	bl	evList
	mov	x19, x0
.LBB64_4:                               // %"$2"
	tst	x19, #0x6
	b.ne	.LBB64_23
// %bb.5:                               // %"$8"
	adrp	x23, SymTab+8
	add	x23, x23, :lo12:SymTab+8
	add	x8, x23, #208                   // =208
	cmp	x8, x19
	ccmp	x19, x23, #0, hs
	b.hs	.LBB64_24
// %bb.6:                               // %"$12"
	bfi	x24, x21, #32, #32
	tst	x24, #0xf
	b.eq	.LBB64_8
// %bb.7:                               // %"$13"
	ldp	w0, w8, [x19]
	bfi	x0, x8, #32, #32
	adrp	x1, SymTab+8
	add	x1, x1, :lo12:SymTab+8
	bl	consTree
	b	.LBB64_22
.LBB64_8:                               // %"$14"
	adrp	x21, env
	ldr	x8, [x21, :lo12:env]
	mov	x9, sp
	sub	x22, x9, #16                    // =16
	mov	sp, x22
	lsr	x10, x19, #32
	stp	w19, w10, [x9, #-16]
	lsr	x10, x8, #32
	stp	w8, w10, [x9, #-8]
	str	x22, [x21, :lo12:env]
	ldp	w20, w8, [x24]
	bfi	x20, x8, #32, #32
	ldp	w24, w8, [x24, #8]
	bfi	x24, x8, #32, #32
	tst	x20, #0x6
	b.ne	.LBB64_12
// %bb.9:                               // %"$17"
	tbz	w20, #3, .LBB64_11
// %bb.10:                              // %"$20"
	ldp	w20, w8, [x20]
	bfi	x20, x8, #32, #32
	b	.LBB64_12
.LBB64_11:                              // %"$19"
	mov	x0, x20
	bl	evList
	mov	x20, x0
.LBB64_12:                              // %"$16"
	ldr	x8, [x21, :lo12:env]
	mov	x9, sp
	sub	x10, x9, #16                    // =16
	mov	sp, x10
	lsr	x11, x20, #32
	lsr	x12, x8, #32
	stp	w20, w11, [x9, #-16]
	stp	w8, w12, [x9, #-8]
	tst	x24, #0xf
	str	x10, [x21, :lo12:env]
	b.eq	.LBB64_14
// %bb.13:                              // %"$23"
	mov	x0, x19
	mov	x1, x20
	bl	idxGet
	b	.LBB64_21
.LBB64_14:                              // %"$22"
	ldp	w0, w8, [x24]
	bfi	x0, x8, #32, #32
	tst	x0, #0x6
	b.ne	.LBB64_17
// %bb.15:                              // %"$25"
	tbz	w0, #3, .LBB64_19
// %bb.16:                              // %"$28"
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
.LBB64_17:                              // %"$24"
	cmp	x0, x23
	b.ne	.LBB64_20
.LBB64_18:                              // %"$30"
	mov	x0, x19
	mov	x1, x20
	bl	idxDel
	b	.LBB64_21
.LBB64_19:                              // %"$27"
	bl	evList
	cmp	x0, x23
	b.eq	.LBB64_18
.LBB64_20:                              // %"$29"
	mov	x0, x19
	mov	x1, x20
	bl	idxPut
.LBB64_21:                              // %"$21"
	ldp	w9, w8, [x22, #8]
	bfi	x9, x8, #32, #32
	str	x9, [x21, :lo12:env]
.LBB64_22:                              // %"$15"
	mov	sp, x29
	ldp	x20, x19, [sp, #48]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #32]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #64             // 16-byte Folded Reload
	ret
.LBB64_23:                              // %"$7"
	mov	x0, x20
	mov	x1, x19
	bl	varErr
.LBB64_24:                              // %"$11"
	mov	x0, x20
	mov	x1, x19
	bl	protErr
.Lfunc_end64:
	.size	_idx, .Lfunc_end64-_idx
	.cfi_endproc
                                        // -- End function
	.globl	_lup                            // -- Begin function _lup
	.p2align	4
	.type	_lup,@function
_lup:                                   // @_lup
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-96]!           // 16-byte Folded Spill
	stp	x28, x27, [sp, #16]             // 16-byte Folded Spill
	stp	x26, x25, [sp, #32]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #48]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #64]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #80]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w19, w8, [x9]
	bfi	x19, x8, #32, #32
	ldp	w21, w20, [x9, #8]
	tst	x19, #0x6
	b.ne	.LBB65_4
// %bb.1:                               // %"$3"
	tbz	w19, #3, .LBB65_3
// %bb.2:                               // %"$6"
	ldp	w19, w8, [x19]
	bfi	x19, x8, #32, #32
	b	.LBB65_4
.LBB65_3:                               // %"$5"
	mov	x0, x19
	bl	evList
	mov	x19, x0
.LBB65_4:                               // %"$2"
	adrp	x24, env
	ldr	x8, [x24, :lo12:env]
	mov	x9, sp
	sub	x25, x9, #16                    // =16
	mov	sp, x25
	lsr	x22, x19, #32
	lsr	x10, x8, #32
	stp	w19, w22, [x9, #-16]
	stp	w8, w10, [x9, #-8]
	tst	x19, #0xf
	str	x25, [x24, :lo12:env]
	b.ne	.LBB65_19
// %bb.5:                               // %"$8"
	bfi	x21, x20, #32, #32
	ldp	w20, w8, [x21]
	bfi	x20, x8, #32, #32
	ldp	w21, w8, [x21, #8]
	bfi	x21, x8, #32, #32
	tst	x20, #0x6
	b.ne	.LBB65_8
// %bb.6:                               // %"$11"
	tbz	w20, #3, .LBB65_21
// %bb.7:                               // %"$14"
	ldp	w20, w8, [x20]
	bfi	x20, x8, #32, #32
.LBB65_8:                               // %"$10"
	tst	x21, #0xf
	b.eq	.LBB65_22
.LBB65_9:                               // %"$18.preheader"
	adrp	x22, SymTab+216
	add	x22, x22, :lo12:SymTab+216
	adrp	x21, SymTab+8
	add	x21, x21, :lo12:SymTab+8
	b	.LBB65_12
.LBB65_10:                              // %"$21"
                                        //   in Loop: Header=BB65_12 Depth=1
	ldp	w8, w9, [x19, #8]
	bfi	x8, x9, #32, #32
.LBB65_11:                              // %"$19"
                                        //   in Loop: Header=BB65_12 Depth=1
	ldp	w19, w9, [x8]
	bfi	x19, x9, #32, #32
	tst	x19, #0xf
	b.ne	.LBB65_18
.LBB65_12:                              // %"$18"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w8, w9, [x19]
	bfi	x8, x9, #32, #32
	cmp	x8, x22
	b.eq	.LBB65_10
// %bb.13:                              // %"$20"
                                        //   in Loop: Header=BB65_12 Depth=1
	tst	x8, #0xf
	b.eq	.LBB65_15
// %bb.14:                              // %"$23"
                                        //   in Loop: Header=BB65_12 Depth=1
	ldp	w9, w8, [x19, #8]
	bfi	x9, x8, #32, #32
	add	x8, x9, #8                      // =8
	b	.LBB65_11
.LBB65_15:                              // %"$22"
                                        //   in Loop: Header=BB65_12 Depth=1
	ldp	w0, w9, [x8]
	bfi	x0, x9, #32, #32
	mov	x1, x20
	bl	compare
	cbz	x0, .LBB65_25
// %bb.16:                              // %"$24"
                                        //   in Loop: Header=BB65_12 Depth=1
	ldp	w8, w9, [x19, #8]
	bfi	x8, x9, #32, #32
	tbz	x0, #63, .LBB65_11
// %bb.17:                              // %"$27"
                                        //   in Loop: Header=BB65_12 Depth=1
	add	x8, x8, #8                      // =8
	b	.LBB65_11
.LBB65_18:
	mov	x19, x21
.LBB65_19:                              // %"$9"
	ldp	w9, w8, [x25, #8]
	bfi	x9, x8, #32, #32
	str	x9, [x24, :lo12:env]
	mov	x0, x19
.LBB65_20:                              // %"$56"
	mov	sp, x29
	ldp	x20, x19, [sp, #80]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #64]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #48]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #32]             // 16-byte Folded Reload
	ldp	x28, x27, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #96             // 16-byte Folded Reload
	ret
.LBB65_21:                              // %"$13"
	mov	x0, x20
	bl	evList
	mov	x20, x0
	tst	x21, #0xf
	b.ne	.LBB65_9
.LBB65_22:                              // %"$16"
	ldr	x8, [x24, :lo12:env]
	mov	x9, sp
	sub	x10, x9, #16                    // =16
	mov	sp, x10
	lsr	x11, x20, #32
	stp	w20, w11, [x9, #-16]
	lsr	x11, x8, #32
	stp	w8, w11, [x9, #-8]
	str	x10, [x24, :lo12:env]
	ldp	w21, w8, [x21]
	bfi	x21, x8, #32, #32
	tst	x21, #0x6
	b.ne	.LBB65_27
// %bb.23:                              // %"$33"
	tbz	w21, #3, .LBB65_26
// %bb.24:                              // %"$36"
	ldp	w21, w8, [x21]
	bfi	x21, x8, #32, #32
	b	.LBB65_27
.LBB65_25:                              // %"$26"
	ldp	w19, w8, [x19]
	bfi	x19, x8, #32, #32
	b	.LBB65_19
.LBB65_26:                              // %"$35"
	mov	x0, x21
	bl	evList
	mov	x21, x0
.LBB65_27:                              // %"$32"
	adrp	x8, env
	add	x8, x8, :lo12:env
	ldr	x9, [x8]
	mov	x10, sp
	sub	x11, x10, #16                   // =16
	mov	sp, x11
	lsr	x12, x21, #32
	lsr	x13, x9, #32
	stp	w21, w12, [x10, #-16]
	stp	w9, w13, [x10, #-8]
	str	x11, [x8]
	mov	x9, sp
	sub	x26, x9, #16                    // =16
	mov	sp, x26
	stp	w19, w22, [x9, #-16]
	ldr	x10, [x8]
	lsr	x11, x10, #32
	stp	w10, w11, [x9, #-8]
	str	x26, [x8]
	mov	x9, sp
	sub	x27, x9, #16                    // =16
	mov	sp, x27
	mov	x10, x26
	adrp	x22, SymTab+8
	add	x22, x22, :lo12:SymTab+8
	mov	w11, #10
	stp	w11, wzr, [x9, #-16]
	lsr	x11, x10, #32
	stp	w10, w11, [x9, #-8]
	mov	x9, x27
.LBB65_28:                              // %"$38"
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB65_36 Depth 2
                                        //       Child Loop BB65_42 Depth 3
	lsr	x10, x9, #32
	stp	w9, w10, [x8]
	ldp	w23, w8, [x19, #8]
	bfi	x23, x8, #32, #32
	ldp	w28, w8, [x23, #8]
	bfi	x28, x8, #32, #32
	tst	x28, #0xf
	b.ne	.LBB65_36
// %bb.29:                              // %"$39"
                                        //   in Loop: Header=BB65_28 Depth=1
	ldp	w8, w9, [x19]
	bfi	x8, x9, #32, #32
	adrp	x9, SymTab+216
	add	x9, x9, :lo12:SymTab+216
	cmp	x8, x9
	b.eq	.LBB65_36
// %bb.30:                              // %"$41"
                                        //   in Loop: Header=BB65_28 Depth=1
	tst	x8, #0xf
	b.eq	.LBB65_32
// %bb.31:                              //   in Loop: Header=BB65_28 Depth=1
	mov	w8, wzr
	b	.LBB65_33
.LBB65_32:                              // %"$43"
                                        //   in Loop: Header=BB65_28 Depth=1
	ldp	w0, w9, [x8]
	bfi	x0, x9, #32, #32
	mov	x1, x21
	bl	compare
	cmp	x0, #0                          // =0
	cset	w8, gt
.LBB65_33:                              // %"$42"
                                        //   in Loop: Header=BB65_28 Depth=1
	tbnz	w8, #0, .LBB65_36
// %bb.34:                              // %"$44"
                                        //   in Loop: Header=BB65_28 Depth=1
	ldp	w9, w10, [x27]
	mov	x8, x27
	stp	w9, w10, [x23, #8]
	mov	x9, x19
	mov	x19, x28
	b	.LBB65_28
.LBB65_35:                              // %"$60"
                                        //   in Loop: Header=BB65_36 Depth=2
	ldp	w11, w10, [x8, #8]
	bfi	x11, x10, #32, #32
	ldr	w10, [x11, #8]!
	ldr	w12, [x11, #4]
	stp	w10, w12, [x27]
	stp	w19, w9, [x11]
	mov	x19, x8
.LBB65_36:                              // %"$45"
                                        //   Parent Loop BB65_28 Depth=1
                                        // =>  This Loop Header: Depth=2
                                        //       Child Loop BB65_42 Depth 3
	lsr	x28, x19, #32
	stp	w19, w28, [x26]
	ldp	w23, w8, [x19]
	bfi	x23, x8, #32, #32
	tst	x23, #0xf
	b.eq	.LBB65_38
// %bb.37:                              //   in Loop: Header=BB65_36 Depth=2
	mov	w8, wzr
	tbz	w8, #0, .LBB65_42
	b	.LBB65_39
.LBB65_38:                              // %"$47"
                                        //   in Loop: Header=BB65_36 Depth=2
	ldp	w0, w8, [x23]
	bfi	x0, x8, #32, #32
	mov	x1, x20
	bl	compare
	lsr	x8, x0, #63
	eor	w8, w8, #0x1
	tbz	w8, #0, .LBB65_42
.LBB65_39:                              // %"$48"
                                        //   in Loop: Header=BB65_36 Depth=2
	ldp	w0, w8, [x23]
	bfi	x0, x8, #32, #32
	mov	x1, x21
	bl	compare
	cmp	x0, #0                          // =0
	b.gt	.LBB65_41
// %bb.40:                              // %"$50"
                                        //   in Loop: Header=BB65_36 Depth=2
	mov	x0, x23
	mov	x1, x22
	bl	cons
	mov	x22, x0
.LBB65_41:                              // %"$51"
                                        //   in Loop: Header=BB65_36 Depth=2
	ldp	w8, w9, [x19, #8]
	bfi	x8, x9, #32, #32
	ldp	w9, w10, [x8]
	bfi	x9, x10, #32, #32
	tst	x9, #0xf
	b.eq	.LBB65_45
.LBB65_42:                              // %"$55"
                                        //   Parent Loop BB65_28 Depth=1
                                        //     Parent Loop BB65_36 Depth=2
                                        // =>    This Inner Loop Header: Depth=3
	ldp	w8, w9, [x27]
	bfi	x8, x9, #32, #32
	cmp	x8, #10                         // =10
	b.eq	.LBB65_46
// %bb.43:                              // %"$57"
                                        //   in Loop: Header=BB65_42 Depth=3
	lsr	x9, x19, #32
	tbz	w8, #3, .LBB65_35
// %bb.44:                              // %"$58"
                                        //   in Loop: Header=BB65_42 Depth=3
	and	x10, x8, #0xfffffffffffffff7
	ldp	w12, w11, [x10, #8]
	bfi	x12, x11, #32, #32
	ldp	w11, w13, [x12]
	stp	w11, w13, [x27]
	stp	w19, w9, [x12]
	lsr	x8, x8, #32
	stp	w10, w8, [x26]
	mov	x19, x10
	b	.LBB65_42
.LBB65_45:                              // %"$54"
                                        //   in Loop: Header=BB65_28 Depth=1
	ldp	w10, w11, [x27]
	stp	w10, w11, [x8]
	orr	w8, w19, #0x8
	stp	w8, w28, [x27]
	mov	x8, x26
	mov	x19, x9
	b	.LBB65_28
.LBB65_46:                              // %"$56"
	ldp	w9, w8, [x25, #8]
	bfi	x9, x8, #32, #32
	str	x9, [x24, :lo12:env]
	mov	x0, x22
	b	.LBB65_20
.Lfunc_end65:
	.size	_lup, .Lfunc_end65-_lup
	.cfi_endproc
                                        // -- End function
	.globl	_put                            // -- Begin function _put
	.p2align	4
	.type	_put,@function
_put:                                   // @_put
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-80]!           // 16-byte Folded Spill
	str	x25, [sp, #16]                  // 8-byte Folded Spill
	stp	x24, x23, [sp, #32]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #48]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #64]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 80
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -64
	.cfi_offset w30, -72
	.cfi_offset w29, -80
	mov	x19, x0
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w20, w8, [x9]
	bfi	x20, x8, #32, #32
	ldp	w22, w8, [x9, #8]
	bfi	x22, x8, #32, #32
	tst	x20, #0x6
	b.ne	.LBB66_4
// %bb.1:                               // %"$3"
	tbz	w20, #3, .LBB66_3
// %bb.2:                               // %"$6"
	ldp	w20, w8, [x20]
	bfi	x20, x8, #32, #32
	b	.LBB66_4
.LBB66_3:                               // %"$5"
	mov	x0, x20
	bl	evList
	mov	x20, x0
.LBB66_4:                               // %"$2"
	adrp	x8, env
	add	x8, x8, :lo12:env
	ldr	x9, [x8]
	mov	x10, sp
	sub	x23, x10, #16                   // =16
	mov	sp, x23
	lsr	x11, x20, #32
	lsr	x12, x9, #32
	stp	w20, w11, [x10, #-16]
	mov	x0, x23
	stp	w9, w12, [x10, #-8]
.LBB66_5:                               // %"$7"
                                        // =>This Inner Loop Header: Depth=1
	lsr	x9, x0, #32
	stp	w0, w9, [x8]
	ldp	w21, w8, [x22]
	bfi	x21, x8, #32, #32
	ldp	w22, w8, [x22, #8]
	bfi	x22, x8, #32, #32
	tst	x21, #0x6
	b.ne	.LBB66_9
// %bb.6:                               // %"$9"
                                        //   in Loop: Header=BB66_5 Depth=1
	tbz	w21, #3, .LBB66_8
// %bb.7:                               // %"$12"
                                        //   in Loop: Header=BB66_5 Depth=1
	ldp	w21, w8, [x21]
	bfi	x21, x8, #32, #32
	b	.LBB66_9
.LBB66_8:                               // %"$11"
                                        //   in Loop: Header=BB66_5 Depth=1
	mov	x0, x21
	bl	evList
	mov	x21, x0
.LBB66_9:                               // %"$8"
                                        //   in Loop: Header=BB66_5 Depth=1
	ldrb	w8, [x22, #8]
	tst	w8, #0xf
	b.ne	.LBB66_11
// %bb.10:                              // %"$13"
                                        //   in Loop: Header=BB66_5 Depth=1
	mov	x0, x19
	mov	x1, x20
	mov	x2, x21
	bl	getn
	mov	x8, x23
	mov	x20, x0
	b	.LBB66_5
.LBB66_11:                              // %"$14"
	tst	x20, #0x6
	b.ne	.LBB66_27
// %bb.12:                              // %"$16"
	mov	x8, sp
	sub	x9, x8, #16                     // =16
	mov	sp, x9
	lsr	x10, x21, #32
	stp	w21, w10, [x8, #-16]
	adrp	x24, env
	ldr	x10, [x24, :lo12:env]
	lsr	x11, x10, #32
	stp	w10, w11, [x8, #-8]
	str	x9, [x24, :lo12:env]
	ldp	w22, w8, [x22]
	bfi	x22, x8, #32, #32
	tst	x22, #0x6
	b.ne	.LBB66_15
// %bb.13:                              // %"$18"
	tbz	w22, #3, .LBB66_22
// %bb.14:                              // %"$21"
	ldp	w22, w8, [x22]
	bfi	x22, x8, #32, #32
.LBB66_15:                              // %"$17"
	tst	x20, #0xf
	b.eq	.LBB66_23
.LBB66_16:                              // %"$23"
	ldurb	w8, [x20, #-8]
	adrp	x25, SymTab+8
	add	x25, x25, :lo12:SymTab+8
	tbz	w8, #3, .LBB66_19
// %bb.17:                              // %"$25"
	mov	x0, x19
	mov	x1, x20
	cmp	x21, x25
	b.ne	.LBB66_24
// %bb.18:                              // %"$27"
	bl	dbFetch
.LBB66_19:                              // %"$26"
	cmp	x21, #2                         // =2
	b.ne	.LBB66_25
.LBB66_20:                              // %"$30"
	add	x8, x25, #208                   // =208
	cmp	x8, x20
	ccmp	x20, x25, #0, hs
	b.hs	.LBB66_28
// %bb.21:                              // %"$36"
	lsr	x8, x22, #32
	stp	w22, w8, [x20]
	b	.LBB66_26
.LBB66_22:                              // %"$20"
	mov	x0, x22
	bl	evList
	mov	x22, x0
	tst	x20, #0xf
	b.ne	.LBB66_16
.LBB66_23:                              // %"$22"
	mov	x0, x19
	mov	x1, x20
	mov	x2, x21
	mov	x3, x22
	bl	putn
	b	.LBB66_26
.LBB66_24:                              // %"$28"
	bl	dbTouch
	cmp	x21, #2                         // =2
	b.eq	.LBB66_20
.LBB66_25:                              // %"$31"
	mov	x0, x20
	mov	x1, x21
	mov	x2, x22
	bl	put
.LBB66_26:                              // %"$24"
	ldp	w9, w8, [x23, #8]
	bfi	x9, x8, #32, #32
	str	x9, [x24, :lo12:env]
	mov	x0, x22
	mov	sp, x29
	ldp	x20, x19, [sp, #64]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #48]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #32]             // 16-byte Folded Reload
	ldr	x25, [sp, #16]                  // 8-byte Folded Reload
	ldp	x29, x30, [sp], #80             // 16-byte Folded Reload
	ret
.LBB66_27:                              // %"$15"
	mov	x0, x19
	mov	x1, x20
	bl	argErr
.LBB66_28:                              // %"$35"
	mov	x0, x19
	mov	x1, x20
	bl	protErr
.Lfunc_end66:
	.size	_put, .Lfunc_end66-_put
	.cfi_endproc
                                        // -- End function
	.globl	_get                            // -- Begin function _get
	.p2align	4
	.type	_get,@function
_get:                                   // @_get
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-48]!           // 16-byte Folded Spill
	stp	x22, x21, [sp, #16]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #32]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 48
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w30, -40
	.cfi_offset w29, -48
	mov	x19, x0
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w20, w8, [x9]
	bfi	x20, x8, #32, #32
	ldp	w21, w8, [x9, #8]
	bfi	x21, x8, #32, #32
	tst	x20, #0x6
	b.ne	.LBB67_3
// %bb.1:                               // %"$3"
	tbz	w20, #3, .LBB67_5
// %bb.2:                               // %"$6"
	ldp	w20, w8, [x20]
	bfi	x20, x8, #32, #32
.LBB67_3:                               // %"$2"
	tst	x21, #0xf
	b.eq	.LBB67_6
.LBB67_4:
	mov	x0, x20
	b	.LBB67_13
.LBB67_5:                               // %"$5"
	mov	x0, x20
	bl	evList
	mov	x20, x0
	tst	x21, #0xf
	b.ne	.LBB67_4
.LBB67_6:                               // %"$7"
	adrp	x8, env
	add	x8, x8, :lo12:env
	ldr	x9, [x8]
	mov	x10, sp
	sub	x22, x10, #16                   // =16
	mov	sp, x22
	lsr	x11, x20, #32
	lsr	x12, x9, #32
	stp	w20, w11, [x10, #-16]
	mov	x0, x22
	stp	w9, w12, [x10, #-8]
	b	.LBB67_9
.LBB67_7:                               // %"$13"
                                        //   in Loop: Header=BB67_9 Depth=1
	mov	x0, x2
	bl	evList
	mov	x2, x0
.LBB67_8:                               // %"$10"
                                        //   in Loop: Header=BB67_9 Depth=1
	mov	x0, x19
	mov	x1, x20
	bl	getn
	tst	x21, #0xf
	mov	x8, x22
	mov	x20, x0
	b.ne	.LBB67_12
.LBB67_9:                               // %"$9"
                                        // =>This Inner Loop Header: Depth=1
	lsr	x9, x0, #32
	stp	w0, w9, [x8]
	ldp	w2, w8, [x21]
	bfi	x2, x8, #32, #32
	ldp	w21, w8, [x21, #8]
	bfi	x21, x8, #32, #32
	tst	x2, #0x6
	b.ne	.LBB67_8
// %bb.10:                              // %"$11"
                                        //   in Loop: Header=BB67_9 Depth=1
	tbz	w2, #3, .LBB67_7
// %bb.11:                              // %"$14"
                                        //   in Loop: Header=BB67_9 Depth=1
	ldp	w2, w8, [x2]
	bfi	x2, x8, #32, #32
	b	.LBB67_8
.LBB67_12:                              // %"$16"
	ldp	w9, w8, [x22, #8]
	bfi	x9, x8, #32, #32
	adrp	x8, env
	str	x9, [x8, :lo12:env]
.LBB67_13:                              // %"$8"
	mov	sp, x29
	ldp	x20, x19, [sp, #32]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #48             // 16-byte Folded Reload
	ret
.Lfunc_end67:
	.size	_get, .Lfunc_end67-_get
	.cfi_endproc
                                        // -- End function
	.globl	_prop                           // -- Begin function _prop
	.p2align	4
	.type	_prop,@function
_prop:                                  // @_prop
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-64]!           // 16-byte Folded Spill
	str	x23, [sp, #16]                  // 8-byte Folded Spill
	stp	x22, x21, [sp, #32]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #48]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 64
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -48
	.cfi_offset w30, -56
	.cfi_offset w29, -64
	mov	x19, x0
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w20, w8, [x9]
	bfi	x20, x8, #32, #32
	ldp	w23, w8, [x9, #8]
	bfi	x23, x8, #32, #32
	tst	x20, #0x6
	b.ne	.LBB68_4
// %bb.1:                               // %"$3"
	tbz	w20, #3, .LBB68_3
// %bb.2:                               // %"$6"
	ldp	w20, w8, [x20]
	bfi	x20, x8, #32, #32
	b	.LBB68_4
.LBB68_3:                               // %"$5"
	mov	x0, x20
	bl	evList
	mov	x20, x0
.LBB68_4:                               // %"$2"
	adrp	x8, env
	add	x8, x8, :lo12:env
	ldr	x9, [x8]
	mov	x10, sp
	sub	x22, x10, #16                   // =16
	mov	sp, x22
	lsr	x11, x20, #32
	lsr	x12, x9, #32
	stp	w20, w11, [x10, #-16]
	mov	x0, x22
	stp	w9, w12, [x10, #-8]
.LBB68_5:                               // %"$7"
                                        // =>This Inner Loop Header: Depth=1
	lsr	x9, x0, #32
	stp	w0, w9, [x8]
	ldp	w21, w8, [x23]
	bfi	x21, x8, #32, #32
	ldp	w23, w8, [x23, #8]
	bfi	x23, x8, #32, #32
	tst	x21, #0x6
	b.ne	.LBB68_8
// %bb.6:                               // %"$9"
                                        //   in Loop: Header=BB68_5 Depth=1
	tbz	w21, #3, .LBB68_10
// %bb.7:                               // %"$12"
                                        //   in Loop: Header=BB68_5 Depth=1
	ldp	w21, w8, [x21]
	bfi	x21, x8, #32, #32
.LBB68_8:                               // %"$8"
                                        //   in Loop: Header=BB68_5 Depth=1
	tst	x23, #0xf
	b.ne	.LBB68_11
.LBB68_9:                               // %"$13"
                                        //   in Loop: Header=BB68_5 Depth=1
	mov	x0, x19
	mov	x1, x20
	mov	x2, x21
	bl	getn
	mov	x8, x22
	mov	x20, x0
	b	.LBB68_5
.LBB68_10:                              // %"$11"
                                        //   in Loop: Header=BB68_5 Depth=1
	mov	x0, x21
	bl	evList
	mov	x21, x0
	tst	x23, #0xf
	b.eq	.LBB68_9
.LBB68_11:                              // %"$14"
	eor	w8, w20, #0x8
	tst	x8, #0xe
	b.ne	.LBB68_17
// %bb.12:                              // %"$16"
	mov	x8, sp
	sub	x9, x8, #16                     // =16
	mov	sp, x9
	lsr	x10, x21, #32
	stp	w21, w10, [x8, #-16]
	adrp	x23, env
	ldr	x10, [x23, :lo12:env]
	lsr	x11, x10, #32
	stp	w10, w11, [x8, #-8]
	str	x9, [x23, :lo12:env]
	ldurb	w8, [x20, #-8]
	tbz	w8, #3, .LBB68_16
// %bb.13:                              // %"$17"
	adrp	x8, SymTab+8
	add	x8, x8, :lo12:SymTab+8
	mov	x0, x19
	mov	x1, x20
	cmp	x21, x8
	b.ne	.LBB68_15
// %bb.14:                              // %"$19"
	bl	dbFetch
	b	.LBB68_16
.LBB68_15:                              // %"$20"
	bl	dbTouch
.LBB68_16:                              // %"$18"
	mov	x0, x20
	mov	x1, x21
	bl	prop
	ldp	w9, w8, [x22, #8]
	bfi	x9, x8, #32, #32
	str	x9, [x23, :lo12:env]
	mov	sp, x29
	ldp	x20, x19, [sp, #48]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #32]             // 16-byte Folded Reload
	ldr	x23, [sp, #16]                  // 8-byte Folded Reload
	ldp	x29, x30, [sp], #64             // 16-byte Folded Reload
	ret
.LBB68_17:                              // %"$15"
	mov	x0, x19
	mov	x1, x20
	bl	symErr
.Lfunc_end68:
	.size	_prop, .Lfunc_end68-_prop
	.cfi_endproc
                                        // -- End function
	.globl	_semicol                        // -- Begin function _semicol
	.p2align	4
	.type	_semicol,@function
_semicol:                               // @_semicol
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-48]!           // 16-byte Folded Spill
	str	x21, [sp, #16]                  // 8-byte Folded Spill
	stp	x20, x19, [sp, #32]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 48
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -32
	.cfi_offset w30, -40
	.cfi_offset w29, -48
	mov	x19, x0
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w1, w8, [x9]
	bfi	x1, x8, #32, #32
	ldp	w20, w8, [x9, #8]
	bfi	x20, x8, #32, #32
	tst	x1, #0x6
	b.ne	.LBB69_3
// %bb.1:                               // %"$3"
	tbz	w1, #3, .LBB69_5
// %bb.2:                               // %"$6"
	ldp	w1, w8, [x1]
	bfi	x1, x8, #32, #32
.LBB69_3:                               // %"$2"
	tst	x20, #0xf
	b.eq	.LBB69_6
.LBB69_4:
	mov	x0, x1
	b	.LBB69_9
.LBB69_5:                               // %"$5"
	mov	x0, x1
	bl	evList
	mov	x1, x0
	tst	x20, #0xf
	b.ne	.LBB69_4
.LBB69_6:                               // %"$7"
	adrp	x8, env
	add	x8, x8, :lo12:env
	ldr	x9, [x8]
	mov	x10, sp
	sub	x21, x10, #16                   // =16
	mov	sp, x21
	lsr	x11, x1, #32
	lsr	x12, x9, #32
	stp	w1, w11, [x10, #-16]
	mov	x0, x21
	stp	w9, w12, [x10, #-8]
.LBB69_7:                               // %"$9"
                                        // =>This Inner Loop Header: Depth=1
	lsr	x9, x0, #32
	stp	w0, w9, [x8]
	ldp	w2, w8, [x20]
	bfi	x2, x8, #32, #32
	ldp	w20, w8, [x20, #8]
	bfi	x20, x8, #32, #32
	mov	x0, x19
	bl	getn
	tst	x20, #0xf
	mov	x8, x21
	mov	x1, x0
	b.eq	.LBB69_7
// %bb.8:                               // %"$11"
	ldp	w9, w8, [x21, #8]
	bfi	x9, x8, #32, #32
	adrp	x8, env
	str	x9, [x8, :lo12:env]
.LBB69_9:                               // %"$8"
	mov	sp, x29
	ldp	x20, x19, [sp, #32]             // 16-byte Folded Reload
	ldr	x21, [sp, #16]                  // 8-byte Folded Reload
	ldp	x29, x30, [sp], #48             // 16-byte Folded Reload
	ret
.Lfunc_end69:
	.size	_semicol, .Lfunc_end69-_semicol
	.cfi_endproc
                                        // -- End function
	.globl	_setCol                         // -- Begin function _setCol
	.p2align	4
	.type	_setCol,@function
_setCol:                                // @_setCol
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x30, x23, [sp, #-48]!           // 16-byte Folded Spill
	stp	x22, x21, [sp, #16]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #32]             // 16-byte Folded Spill
	.cfi_def_cfa_offset 48
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w30, -48
	mov	x19, x0
	ldp	w22, w8, [x0, #8]
	bfi	x22, x8, #32, #32
	adrp	x8, SymTab+424
	ldr	x20, [x8, :lo12:SymTab+424]
.LBB70_1:                               // %"$2"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w21, w8, [x22]
	bfi	x21, x8, #32, #32
	ldp	w22, w8, [x22, #8]
	bfi	x22, x8, #32, #32
	ldrb	w8, [x22, #8]
	tst	w8, #0xf
	b.ne	.LBB70_3
// %bb.2:                               // %"$3"
                                        //   in Loop: Header=BB70_1 Depth=1
	mov	x0, x19
	mov	x1, x20
	mov	x2, x21
	bl	getn
	mov	x20, x0
	b	.LBB70_1
.LBB70_3:                               // %"$4"
	tst	x20, #0x6
	b.ne	.LBB70_19
// %bb.4:                               // %"$6"
	ldp	w22, w8, [x22]
	bfi	x22, x8, #32, #32
	tst	x22, #0x6
	b.ne	.LBB70_7
// %bb.5:                               // %"$8"
	tbz	w22, #3, .LBB70_14
// %bb.6:                               // %"$11"
	ldp	w22, w8, [x22]
	bfi	x22, x8, #32, #32
.LBB70_7:                               // %"$7"
	tst	x20, #0xf
	b.eq	.LBB70_15
.LBB70_8:                               // %"$13"
	ldurb	w8, [x20, #-8]
	adrp	x23, SymTab+8
	add	x23, x23, :lo12:SymTab+8
	tbz	w8, #3, .LBB70_11
// %bb.9:                               // %"$15"
	mov	x0, x19
	mov	x1, x20
	cmp	x21, x23
	b.ne	.LBB70_16
// %bb.10:                              // %"$17"
	bl	dbFetch
.LBB70_11:                              // %"$16"
	cmp	x21, #2                         // =2
	b.ne	.LBB70_17
.LBB70_12:                              // %"$20"
	add	x8, x23, #208                   // =208
	cmp	x8, x20
	ccmp	x20, x23, #0, hs
	b.hs	.LBB70_20
// %bb.13:                              // %"$26"
	lsr	x8, x22, #32
	stp	w22, w8, [x20]
	b	.LBB70_18
.LBB70_14:                              // %"$10"
	mov	x0, x22
	bl	evList
	mov	x22, x0
	tst	x20, #0xf
	b.ne	.LBB70_8
.LBB70_15:                              // %"$12"
	mov	x0, x19
	mov	x1, x20
	mov	x2, x21
	mov	x3, x22
	bl	putn
	b	.LBB70_18
.LBB70_16:                              // %"$18"
	bl	dbTouch
	cmp	x21, #2                         // =2
	b.eq	.LBB70_12
.LBB70_17:                              // %"$21"
	mov	x0, x20
	mov	x1, x21
	mov	x2, x22
	bl	put
.LBB70_18:                              // %"$14"
	mov	x0, x22
	ldp	x20, x19, [sp, #32]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #16]             // 16-byte Folded Reload
	ldp	x30, x23, [sp], #48             // 16-byte Folded Reload
	ret
.LBB70_19:                              // %"$5"
	mov	x0, x19
	mov	x1, x20
	bl	argErr
.LBB70_20:                              // %"$25"
	mov	x0, x19
	mov	x1, x20
	bl	protErr
.Lfunc_end70:
	.size	_setCol, .Lfunc_end70-_setCol
	.cfi_endproc
                                        // -- End function
	.globl	_col                            // -- Begin function _col
	.p2align	4
	.type	_col,@function
_col:                                   // @_col
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-32]!                // 8-byte Folded Spill
	stp	x20, x19, [sp, #16]             // 16-byte Folded Spill
	.cfi_def_cfa_offset 32
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w30, -32
	mov	x19, x0
	ldp	w20, w8, [x0, #8]
	bfi	x20, x8, #32, #32
	adrp	x8, SymTab+424
	ldr	x1, [x8, :lo12:SymTab+424]
.LBB71_1:                               // %"$2"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w2, w8, [x20]
	bfi	x2, x8, #32, #32
	ldp	w20, w8, [x20, #8]
	bfi	x20, x8, #32, #32
	mov	x0, x19
	bl	getn
	mov	x1, x0
	tst	x20, #0xf
	b.eq	.LBB71_1
// %bb.2:                               // %"$4"
	mov	x0, x1
	ldp	x20, x19, [sp, #16]             // 16-byte Folded Reload
	ldr	x30, [sp], #32                  // 8-byte Folded Reload
	ret
.Lfunc_end71:
	.size	_col, .Lfunc_end71-_col
	.cfi_endproc
                                        // -- End function
	.globl	_propCol                        // -- Begin function _propCol
	.p2align	4
	.type	_propCol,@function
_propCol:                               // @_propCol
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-48]!                // 8-byte Folded Spill
	stp	x22, x21, [sp, #16]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #32]             // 16-byte Folded Spill
	.cfi_def_cfa_offset 48
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w30, -48
	mov	x19, x0
	ldp	w22, w8, [x0, #8]
	bfi	x22, x8, #32, #32
	adrp	x8, SymTab+424
	ldr	x20, [x8, :lo12:SymTab+424]
.LBB72_1:                               // %"$2"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w21, w8, [x22]
	bfi	x21, x8, #32, #32
	ldp	w22, w8, [x22, #8]
	bfi	x22, x8, #32, #32
	tst	x22, #0xf
	b.ne	.LBB72_3
// %bb.2:                               // %"$3"
                                        //   in Loop: Header=BB72_1 Depth=1
	mov	x0, x19
	mov	x1, x20
	mov	x2, x21
	bl	getn
	mov	x20, x0
	b	.LBB72_1
.LBB72_3:                               // %"$4"
	eor	w8, w20, #0x8
	tst	x8, #0xe
	b.ne	.LBB72_9
// %bb.4:                               // %"$6"
	ldurb	w8, [x20, #-8]
	tbz	w8, #3, .LBB72_8
// %bb.5:                               // %"$7"
	adrp	x8, SymTab+8
	add	x8, x8, :lo12:SymTab+8
	mov	x0, x19
	mov	x1, x20
	cmp	x21, x8
	b.ne	.LBB72_7
// %bb.6:                               // %"$9"
	bl	dbFetch
	b	.LBB72_8
.LBB72_7:                               // %"$10"
	bl	dbTouch
.LBB72_8:                               // %"$8"
	mov	x0, x20
	mov	x1, x21
	bl	prop
	ldp	x20, x19, [sp, #32]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #16]             // 16-byte Folded Reload
	ldr	x30, [sp], #48                  // 8-byte Folded Reload
	ret
.LBB72_9:                               // %"$5"
	mov	x0, x19
	mov	x1, x20
	bl	symErr
.Lfunc_end72:
	.size	_propCol, .Lfunc_end72-_propCol
	.cfi_endproc
                                        // -- End function
	.globl	_putl                           // -- Begin function _putl
	.p2align	4
	.type	_putl,@function
_putl:                                  // @_putl
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-80]!           // 16-byte Folded Spill
	stp	x26, x25, [sp, #16]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #32]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #48]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #64]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 80
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w30, -72
	.cfi_offset w29, -80
	mov	x21, x0
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w19, w8, [x9]
	bfi	x19, x8, #32, #32
	ldp	w23, w8, [x9, #8]
	bfi	x23, x8, #32, #32
	tst	x19, #0x6
	b.ne	.LBB73_4
// %bb.1:                               // %"$3"
	tbz	w19, #3, .LBB73_3
// %bb.2:                               // %"$6"
	ldp	w19, w8, [x19]
	bfi	x19, x8, #32, #32
	b	.LBB73_4
.LBB73_3:                               // %"$5"
	mov	x0, x19
	bl	evList
	mov	x19, x0
.LBB73_4:                               // %"$2"
	adrp	x8, env
	add	x8, x8, :lo12:env
	ldr	x9, [x8]
	mov	x10, sp
	sub	x22, x10, #16                   // =16
	mov	sp, x22
	lsr	x11, x19, #32
	lsr	x12, x9, #32
	stp	w19, w11, [x10, #-16]
	mov	x0, x22
	stp	w9, w12, [x10, #-8]
.LBB73_5:                               // %"$7"
                                        // =>This Inner Loop Header: Depth=1
	lsr	x9, x0, #32
	stp	w0, w9, [x8]
	ldp	w20, w8, [x23]
	bfi	x20, x8, #32, #32
	ldp	w23, w8, [x23, #8]
	bfi	x23, x8, #32, #32
	tst	x20, #0x6
	b.ne	.LBB73_8
// %bb.6:                               // %"$9"
                                        //   in Loop: Header=BB73_5 Depth=1
	tbz	w20, #3, .LBB73_10
// %bb.7:                               // %"$12"
                                        //   in Loop: Header=BB73_5 Depth=1
	ldp	w20, w8, [x20]
	bfi	x20, x8, #32, #32
.LBB73_8:                               // %"$8"
                                        //   in Loop: Header=BB73_5 Depth=1
	tst	x23, #0xf
	b.ne	.LBB73_11
.LBB73_9:                               // %"$13"
                                        //   in Loop: Header=BB73_5 Depth=1
	mov	x0, x21
	mov	x1, x19
	mov	x2, x20
	bl	getn
	mov	x8, x22
	mov	x19, x0
	b	.LBB73_5
.LBB73_10:                              // %"$11"
                                        //   in Loop: Header=BB73_5 Depth=1
	mov	x0, x20
	bl	evList
	mov	x20, x0
	tst	x23, #0xf
	b.eq	.LBB73_9
.LBB73_11:                              // %"$14"
	adrp	x23, env
	ldr	x8, [x23, :lo12:env]
	mov	x9, sp
	sub	x10, x9, #16                    // =16
	mov	sp, x10
	lsr	x11, x20, #32
	stp	w20, w11, [x9, #-16]
	lsr	x11, x8, #32
	stp	w8, w11, [x9, #-8]
	eor	w8, w19, #0x8
	tst	x8, #0xe
	str	x10, [x23, :lo12:env]
	b.ne	.LBB73_24
// %bb.12:                              // %"$16"
	ldp	w24, w8, [x19, #-8]
	bfi	x24, x8, #32, #32
	mov	x1, x24
	tbz	w24, #3, .LBB73_15
// %bb.13:                              // %"$17"
	mov	x0, x21
	mov	x1, x19
	bl	dbTouch
	ldp	w9, w8, [x19, #-8]
	bfi	x9, x8, #32, #32
	and	x1, x9, #0xfffffffffffffff7
	b	.LBB73_15
.LBB73_14:                              // %"$20"
                                        //   in Loop: Header=BB73_15 Depth=1
	ldp	w1, w8, [x1, #8]
	bfi	x1, x8, #32, #32
.LBB73_15:                              // %"$19"
                                        // =>This Inner Loop Header: Depth=1
	tst	x1, #0x6
	b.eq	.LBB73_14
// %bb.16:
	adrp	x21, SymTab+8
	add	x21, x21, :lo12:SymTab+8
	mov	x25, x20
	adrp	x26, SymTab+216
	add	x26, x26, :lo12:SymTab+216
	b	.LBB73_18
.LBB73_17:                              // %"$25"
                                        //   in Loop: Header=BB73_18 Depth=1
	bl	cons
	mov	x1, x0
.LBB73_18:                              // %"$22"
                                        // =>This Inner Loop Header: Depth=1
	tst	x25, #0xf
	b.ne	.LBB73_23
// %bb.19:                              // %"$23"
                                        //   in Loop: Header=BB73_18 Depth=1
	ldp	w0, w8, [x25]
	bfi	x0, x8, #32, #32
	ldp	w25, w8, [x25, #8]
	bfi	x25, x8, #32, #32
	tst	x0, #0xf
	b.ne	.LBB73_17
// %bb.20:                              // %"$26"
                                        //   in Loop: Header=BB73_18 Depth=1
	ldp	w9, w8, [x0]
	bfi	x9, x8, #32, #32
	cmp	x9, x21
	b.eq	.LBB73_18
// %bb.21:                              // %"$28"
                                        //   in Loop: Header=BB73_18 Depth=1
	ldp	w9, w8, [x0]
	bfi	x9, x8, #32, #32
	cmp	x9, x26
	b.ne	.LBB73_17
// %bb.22:                              // %"$30"
                                        //   in Loop: Header=BB73_18 Depth=1
	ldp	w0, w8, [x0, #8]
	bfi	x0, x8, #32, #32
	b	.LBB73_17
.LBB73_23:                              // %"$24"
	orr	x8, x1, #0x8
	tst	w24, #0x8
	csel	x8, x1, x8, eq
	lsr	x9, x8, #32
	stp	w8, w9, [x19, #-8]
	ldp	w9, w8, [x22, #8]
	bfi	x9, x8, #32, #32
	str	x9, [x23, :lo12:env]
	mov	x0, x20
	mov	sp, x29
	ldp	x20, x19, [sp, #64]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #48]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #32]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #80             // 16-byte Folded Reload
	ret
.LBB73_24:                              // %"$15"
	mov	x0, x21
	mov	x1, x19
	bl	symErr
.Lfunc_end73:
	.size	_putl, .Lfunc_end73-_putl
	.cfi_endproc
                                        // -- End function
	.globl	_getl                           // -- Begin function _getl
	.p2align	4
	.type	_getl,@function
_getl:                                  // @_getl
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-64]!           // 16-byte Folded Spill
	stp	x24, x23, [sp, #16]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #32]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #48]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 64
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w30, -56
	.cfi_offset w29, -64
	mov	x19, x0
	ldp	w22, w8, [x0, #8]
	bfi	x22, x8, #32, #32
	ldp	w20, w8, [x22]
	bfi	x20, x8, #32, #32
	tst	x20, #0x6
	b.ne	.LBB74_4
// %bb.1:                               // %"$3"
	tbz	w20, #3, .LBB74_3
// %bb.2:                               // %"$6"
	ldp	w20, w8, [x20]
	bfi	x20, x8, #32, #32
	b	.LBB74_4
.LBB74_3:                               // %"$5"
	mov	x0, x20
	bl	evList
	mov	x20, x0
.LBB74_4:                               // %"$2"
	adrp	x8, env
	add	x8, x8, :lo12:env
	ldr	x9, [x8]
	mov	x10, sp
	sub	x21, x10, #16                   // =16
	mov	sp, x21
	lsr	x11, x20, #32
	lsr	x12, x9, #32
	stp	w20, w11, [x10, #-16]
	mov	x0, x21
	stp	w9, w12, [x10, #-8]
	b	.LBB74_7
.LBB74_5:                               // %"$13"
                                        //   in Loop: Header=BB74_7 Depth=1
	mov	x0, x2
	bl	evList
	mov	x2, x0
.LBB74_6:                               // %"$10"
                                        //   in Loop: Header=BB74_7 Depth=1
	mov	x0, x19
	mov	x1, x20
	bl	getn
	mov	x8, x21
	mov	x20, x0
.LBB74_7:                               // %"$7"
                                        // =>This Inner Loop Header: Depth=1
	lsr	x9, x0, #32
	stp	w0, w9, [x8]
	ldp	w22, w8, [x22, #8]
	bfi	x22, x8, #32, #32
	tst	x22, #0xf
	b.ne	.LBB74_11
// %bb.8:                               // %"$8"
                                        //   in Loop: Header=BB74_7 Depth=1
	ldp	w2, w8, [x22]
	bfi	x2, x8, #32, #32
	tst	x2, #0x6
	b.ne	.LBB74_6
// %bb.9:                               // %"$11"
                                        //   in Loop: Header=BB74_7 Depth=1
	tbz	w2, #3, .LBB74_5
// %bb.10:                              // %"$14"
                                        //   in Loop: Header=BB74_7 Depth=1
	ldp	w2, w8, [x2]
	bfi	x2, x8, #32, #32
	b	.LBB74_6
.LBB74_11:                              // %"$9"
	eor	w8, w20, #0x8
	tst	x8, #0xe
	b.ne	.LBB74_20
// %bb.12:                              // %"$16"
	ldp	w23, w8, [x20, #-8]
	bfi	x23, x8, #32, #32
	tbz	w23, #3, .LBB74_14
// %bb.13:                              // %"$17"
	mov	x0, x19
	mov	x1, x20
	bl	dbFetch
	ldp	w9, w8, [x20, #-8]
	bfi	x9, x8, #32, #32
	and	x23, x9, #0xfffffffffffffff7
.LBB74_14:                              // %"$18"
	tst	x23, #0x6
	adrp	x22, env
	b.eq	.LBB74_17
// %bb.15:
	adrp	x19, SymTab+8
	add	x19, x19, :lo12:SymTab+8
.LBB74_16:                              // %"$21"
	ldp	w9, w8, [x21, #8]
	bfi	x9, x8, #32, #32
	str	x9, [x22, :lo12:env]
	mov	x0, x19
	mov	sp, x29
	ldp	x20, x19, [sp, #48]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #32]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #64             // 16-byte Folded Reload
	ret
.LBB74_17:                              // %"$20"
	ldp	w0, w8, [x23]
	bfi	x0, x8, #32, #32
	adrp	x20, SymTab+8
	add	x20, x20, :lo12:SymTab+8
	mov	x1, x20
	bl	cons
	mov	x19, x0
	mov	x8, sp
	sub	x9, x8, #16                     // =16
	mov	sp, x9
	lsr	x10, x0, #32
	stp	w19, w10, [x8, #-16]
	ldr	x10, [x22, :lo12:env]
	lsr	x11, x10, #32
	stp	w10, w11, [x8, #-8]
	str	x9, [x22, :lo12:env]
.LBB74_18:                              // %"$22"
                                        // =>This Inner Loop Header: Depth=1
	mov	x24, x0
	ldp	w23, w8, [x23, #8]
	bfi	x23, x8, #32, #32
	tst	x23, #0xf
	b.ne	.LBB74_16
// %bb.19:                              // %"$23"
                                        //   in Loop: Header=BB74_18 Depth=1
	ldp	w0, w8, [x23]
	bfi	x0, x8, #32, #32
	mov	x1, x20
	bl	cons
	lsr	x8, x0, #32
	stp	w0, w8, [x24, #8]
	b	.LBB74_18
.LBB74_20:                              // %"$15"
	mov	x0, x19
	mov	x1, x20
	bl	symErr
.Lfunc_end74:
	.size	_getl, .Lfunc_end74-_getl
	.cfi_endproc
                                        // -- End function
	.globl	_wipe                           // -- Begin function _wipe
	.p2align	4
	.type	_wipe,@function
_wipe:                                  // @_wipe
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x30, x21, [sp, #-32]!           // 16-byte Folded Spill
	stp	x20, x19, [sp, #16]             // 16-byte Folded Spill
	.cfi_def_cfa_offset 32
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w30, -32
	mov	x19, x0
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w20, w8, [x9]
	bfi	x20, x8, #32, #32
	tst	x20, #0x6
	b.ne	.LBB75_4
// %bb.1:                               // %"$3"
	tbz	w20, #3, .LBB75_3
// %bb.2:                               // %"$6"
	ldp	w20, w8, [x20]
	bfi	x20, x8, #32, #32
	b	.LBB75_4
.LBB75_3:                               // %"$5"
	mov	x0, x20
	bl	evList
	mov	x20, x0
.LBB75_4:                               // %"$2"
	adrp	x8, SymTab+8
	add	x8, x8, :lo12:SymTab+8
	cmp	x20, x8
	b.eq	.LBB75_9
// %bb.5:                               // %"$7"
	tst	x20, #0xf
	b.eq	.LBB75_7
// %bb.6:                               // %"$9"
	mov	x0, x19
	mov	x1, x20
	bl	wipe
	b	.LBB75_9
.LBB75_7:
	mov	x21, x20
.LBB75_8:                               // %"$12"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w1, w8, [x21]
	bfi	x1, x8, #32, #32
	ldp	w21, w8, [x21, #8]
	bfi	x21, x8, #32, #32
	mov	x0, x19
	bl	wipe
	tst	x21, #0xf
	b.eq	.LBB75_8
.LBB75_9:                               // %"$8"
	mov	x0, x20
	ldp	x20, x19, [sp, #16]             // 16-byte Folded Reload
	ldp	x30, x21, [sp], #32             // 16-byte Folded Reload
	ret
.Lfunc_end75:
	.size	_wipe, .Lfunc_end75-_wipe
	.cfi_endproc
                                        // -- End function
	.globl	_meta                           // -- Begin function _meta
	.p2align	4
	.type	_meta,@function
_meta:                                  // @_meta
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-64]!           // 16-byte Folded Spill
	stp	x24, x23, [sp, #16]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #32]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #48]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 64
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w30, -56
	.cfi_offset w29, -64
	mov	x19, x0
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w20, w8, [x9]
	bfi	x20, x8, #32, #32
	ldp	w21, w24, [x9, #8]
	tst	x20, #0x6
	b.ne	.LBB76_4
// %bb.1:                               // %"$3"
	tbz	w20, #3, .LBB76_3
// %bb.2:                               // %"$6"
	ldp	w20, w8, [x20]
	bfi	x20, x8, #32, #32
	b	.LBB76_4
.LBB76_3:                               // %"$5"
	mov	x0, x20
	bl	evList
	mov	x20, x0
.LBB76_4:                               // %"$2"
	adrp	x22, env
	ldr	x8, [x22, :lo12:env]
	mov	x9, sp
	sub	x23, x9, #16                    // =16
	mov	sp, x23
	lsr	x10, x20, #32
	lsr	x11, x8, #32
	stp	w20, w10, [x9, #-16]
	stp	w8, w11, [x9, #-8]
	tst	x20, #0x6
	str	x23, [x22, :lo12:env]
	b.ne	.LBB76_21
// %bb.5:                               // %"$8"
	bfi	x21, x24, #32, #32
	tbz	w20, #3, .LBB76_9
// %bb.6:                               // %"$9"
	ldurb	w8, [x20, #-8]
	tbz	w8, #3, .LBB76_8
// %bb.7:                               // %"$11"
	mov	x0, x19
	mov	x1, x20
	bl	dbFetch
.LBB76_8:                               // %"$12"
	ldp	w20, w8, [x20]
	bfi	x20, x8, #32, #32
.LBB76_9:                               // %"$10"
	ldp	w1, w8, [x21]
	bfi	x1, x8, #32, #32
	tst	x1, #0x6
	b.ne	.LBB76_13
// %bb.10:                              // %"$14"
	tbz	w1, #3, .LBB76_12
// %bb.11:                              // %"$17"
	ldp	w1, w8, [x1]
	bfi	x1, x8, #32, #32
	b	.LBB76_13
.LBB76_12:                              // %"$16"
	mov	x0, x1
	bl	evList
	mov	x1, x0
.LBB76_13:                              // %"$13"
	mov	x0, x20
	bl	meta
	b	.LBB76_16
.LBB76_14:                              // %"$24"
                                        //   in Loop: Header=BB76_16 Depth=1
	mov	x0, x2
	bl	evList
	mov	x2, x0
.LBB76_15:                              // %"$21"
                                        //   in Loop: Header=BB76_16 Depth=1
	mov	x0, x19
	mov	x1, x20
	bl	getn
.LBB76_16:                              // %"$18"
                                        // =>This Inner Loop Header: Depth=1
	mov	x20, x0
	ldp	w21, w8, [x21, #8]
	bfi	x21, x8, #32, #32
	tst	x21, #0xf
	b.ne	.LBB76_20
// %bb.17:                              // %"$19"
                                        //   in Loop: Header=BB76_16 Depth=1
	lsr	x8, x20, #32
	stp	w20, w8, [x23]
	ldp	w2, w8, [x21]
	bfi	x2, x8, #32, #32
	tst	x2, #0x6
	b.ne	.LBB76_15
// %bb.18:                              // %"$22"
                                        //   in Loop: Header=BB76_16 Depth=1
	tbz	w2, #3, .LBB76_14
// %bb.19:                              // %"$25"
                                        //   in Loop: Header=BB76_16 Depth=1
	ldp	w2, w8, [x2]
	bfi	x2, x8, #32, #32
	b	.LBB76_15
.LBB76_20:                              // %"$20"
	ldp	w9, w8, [x23, #8]
	bfi	x9, x8, #32, #32
	str	x9, [x22, :lo12:env]
	mov	x0, x20
	mov	sp, x29
	ldp	x20, x19, [sp, #48]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #32]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #64             // 16-byte Folded Reload
	ret
.LBB76_21:                              // %"$7"
	mov	x0, x19
	mov	x1, x20
	bl	argErr
.Lfunc_end76:
	.size	_meta, .Lfunc_end76-_meta
	.cfi_endproc
                                        // -- End function
	.globl	_lowQ                           // -- Begin function _lowQ
	.p2align	4
	.type	_lowQ,@function
_lowQ:                                  // @_lowQ
	.cfi_startproc
// %bb.0:                               // %"$1"
	adrp	x0, SymTab+8
	add	x0, x0, :lo12:SymTab+8
	ret
.Lfunc_end77:
	.size	_lowQ, .Lfunc_end77-_lowQ
	.cfi_endproc
                                        // -- End function
	.globl	_uppQ                           // -- Begin function _uppQ
	.p2align	4
	.type	_uppQ,@function
_uppQ:                                  // @_uppQ
	.cfi_startproc
// %bb.0:                               // %"$1"
	adrp	x0, SymTab+8
	add	x0, x0, :lo12:SymTab+8
	ret
.Lfunc_end78:
	.size	_uppQ, .Lfunc_end78-_uppQ
	.cfi_endproc
                                        // -- End function
	.globl	_lowc                           // -- Begin function _lowc
	.p2align	4
	.type	_lowc,@function
_lowc:                                  // @_lowc
	.cfi_startproc
// %bb.0:                               // %"$1"
	adrp	x0, SymTab+8
	add	x0, x0, :lo12:SymTab+8
	ret
.Lfunc_end79:
	.size	_lowc, .Lfunc_end79-_lowc
	.cfi_endproc
                                        // -- End function
	.globl	_uppc                           // -- Begin function _uppc
	.p2align	4
	.type	_uppc,@function
_uppc:                                  // @_uppc
	.cfi_startproc
// %bb.0:                               // %"$1"
	adrp	x0, SymTab+8
	add	x0, x0, :lo12:SymTab+8
	ret
.Lfunc_end80:
	.size	_uppc, .Lfunc_end80-_uppc
	.cfi_endproc
                                        // -- End function
	.globl	_fold                           // -- Begin function _fold
	.p2align	4
	.type	_fold,@function
_fold:                                  // @_fold
	.cfi_startproc
// %bb.0:                               // %"$1"
	adrp	x0, SymTab+8
	add	x0, x0, :lo12:SymTab+8
	ret
.Lfunc_end81:
	.size	_fold, .Lfunc_end81-_fold
	.cfi_endproc
                                        // -- End function
	.globl	_read                           // -- Begin function _read
	.p2align	4
	.type	_read,@function
_read:                                  // @_read
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-64]!           // 16-byte Folded Spill
	str	x23, [sp, #16]                  // 8-byte Folded Spill
	stp	x22, x21, [sp, #32]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #48]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 64
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -48
	.cfi_offset w30, -56
	.cfi_offset w29, -64
	ldp	w8, w9, [x0, #8]
	bfi	x8, x9, #32, #32
	tst	x8, #0xf
	b.eq	.LBB82_2
// %bb.1:                               // %"$2"
	mov	w0, wzr
	bl	read1
	b	.LBB82_15
.LBB82_2:                               // %"$3"
	mov	x19, x0
	ldp	w20, w9, [x8]
	bfi	x20, x9, #32, #32
	ldp	w23, w21, [x8, #8]
	tst	x20, #0x6
	b.ne	.LBB82_6
// %bb.3:                               // %"$6"
	tbz	w20, #3, .LBB82_5
// %bb.4:                               // %"$9"
	ldp	w20, w8, [x20]
	bfi	x20, x8, #32, #32
	b	.LBB82_6
.LBB82_5:                               // %"$8"
	mov	x0, x20
	bl	evList
	mov	x20, x0
.LBB82_6:                               // %"$5"
	eor	w8, w20, #0x8
	tst	x8, #0xe
	b.ne	.LBB82_18
// %bb.7:                               // %"$11"
	bfi	x23, x21, #32, #32
	adrp	x21, env
	ldr	x8, [x21, :lo12:env]
	mov	x9, sp
	sub	x22, x9, #16                    // =16
	mov	sp, x22
	lsr	x10, x20, #32
	stp	w20, w10, [x9, #-16]
	lsr	x10, x8, #32
	stp	w8, w10, [x9, #-8]
	str	x22, [x21, :lo12:env]
	ldp	w1, w8, [x23]
	bfi	x1, x8, #32, #32
	tst	x1, #0x6
	b.ne	.LBB82_11
// %bb.8:                               // %"$13"
	tbz	w1, #3, .LBB82_10
// %bb.9:                               // %"$16"
	ldp	w1, w8, [x1]
	bfi	x1, x8, #32, #32
	b	.LBB82_11
.LBB82_10:                              // %"$15"
	mov	x0, x1
	bl	evList
	mov	x1, x0
.LBB82_11:                              // %"$12"
	eor	w8, w1, #0x8
	tst	x8, #0xe
	b.ne	.LBB82_19
// %bb.12:                              // %"$18"
	mov	x0, x1
	bl	firstChar
	mov	w1, w0
	mov	x0, x20
	bl	token
	cbnz	x0, .LBB82_14
// %bb.13:                              // %"$20"
	adrp	x0, SymTab+8
	add	x0, x0, :lo12:SymTab+8
.LBB82_14:                              // %"$21"
	ldp	w9, w8, [x22, #8]
	bfi	x9, x8, #32, #32
	str	x9, [x21, :lo12:env]
.LBB82_15:                              // %"$4"
	adrp	x8, ($Chr)
	ldr	w9, [x8, :lo12:($Chr)]
	cmp	w9, #10                         // =10
	b.ne	.LBB82_17
// %bb.16:                              // %"$23"
	str	wzr, [x8, :lo12:($Chr)]
.LBB82_17:                              // %"$22"
	mov	sp, x29
	ldp	x20, x19, [sp, #48]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #32]             // 16-byte Folded Reload
	ldr	x23, [sp, #16]                  // 8-byte Folded Reload
	ldp	x29, x30, [sp], #64             // 16-byte Folded Reload
	ret
.LBB82_18:                              // %"$10"
	mov	x0, x19
	mov	x1, x20
	bl	symErr
.LBB82_19:                              // %"$17"
	mov	x0, x19
	bl	symErr
.Lfunc_end82:
	.size	_read, .Lfunc_end82-_read
	.cfi_endproc
                                        // -- End function
	.globl	_key                            // -- Begin function _key
	.p2align	4
	.type	_key,@function
_key:                                   // @_key
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-32]!                // 8-byte Folded Spill
	stp	x20, x19, [sp, #16]             // 16-byte Folded Spill
	.cfi_def_cfa_offset 32
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w30, -32
	bl	stdinByte
	cmp	w0, #128                        // =128
	b.lt	.LBB83_10
// %bb.1:                               // %"$3"
	cmp	w0, #255                        // =255
	b.ne	.LBB83_3
// %bb.2:
	mov	w0, #1114112
	b	.LBB83_10
.LBB83_3:                               // %"$5"
	tbz	w0, #5, .LBB83_6
// %bb.4:                               // %"$8"
	tbz	w0, #4, .LBB83_7
// %bb.5:                               // %"$11"
	and	w20, w0, #0x7
	bl	stdinByte
	and	w19, w0, #0x3f
	bfi	w19, w20, #6, #3
	b	.LBB83_8
.LBB83_6:                               // %"$7"
	and	w20, w0, #0x1f
	b	.LBB83_9
.LBB83_7:                               // %"$10"
	and	w19, w0, #0xf
.LBB83_8:                               // %"$12"
	bl	stdinByte
	and	w20, w0, #0x3f
	bfi	w20, w19, #6, #9
.LBB83_9:                               // %"$9"
	bl	stdinByte
	and	w0, w0, #0x3f
	bfi	w0, w20, #6, #15
.LBB83_10:                              // %"$2"
	bl	mkChar
	ldp	x20, x19, [sp, #16]             // 16-byte Folded Reload
	ldr	x30, [sp], #32                  // 8-byte Folded Reload
	ret
.Lfunc_end83:
	.size	_key, .Lfunc_end83-_key
	.cfi_endproc
                                        // -- End function
	.globl	_peek                           // -- Begin function _peek
	.p2align	4
	.type	_peek,@function
_peek:                                  // @_peek
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	adrp	x8, ($Chr)
	ldr	w0, [x8, :lo12:($Chr)]
	cbz	w0, .LBB84_3
// %bb.1:                               // %"$3"
	tbnz	w0, #31, .LBB84_4
.LBB84_2:                               // %"$5"
	bl	mkChar
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.LBB84_3:                               // %"$2"
	adrp	x8, ($Get)
	ldr	x8, [x8, :lo12:($Get)]
	blr	x8
	tbz	w0, #31, .LBB84_2
.LBB84_4:
	adrp	x0, SymTab+8
	add	x0, x0, :lo12:SymTab+8
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end84:
	.size	_peek, .Lfunc_end84-_peek
	.cfi_endproc
                                        // -- End function
	.globl	_char                           // -- Begin function _char
	.p2align	4
	.type	_char,@function
_char:                                  // @_char
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-32]!                // 8-byte Folded Spill
	stp	x20, x19, [sp, #16]             // 16-byte Folded Spill
	.cfi_def_cfa_offset 32
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w30, -32
	ldp	w8, w9, [x0, #8]
	bfi	x8, x9, #32, #32
	tst	x8, #0xf
	b.eq	.LBB85_4
// %bb.1:                               // %"$4"
	adrp	x8, ($Chr)
	ldr	w0, [x8, :lo12:($Chr)]
	adrp	x20, ($Get)
	cbz	w0, .LBB85_10
// %bb.2:                               // %"$6"
	tbnz	w0, #31, .LBB85_11
.LBB85_3:                               // %"$8"
	bl	getChar
	bl	mkChar
	mov	x19, x0
	b	.LBB85_12
.LBB85_4:                               // %"$3"
	mov	x19, x0
	ldp	w1, w9, [x8]
	bfi	x1, x9, #32, #32
	tst	x1, #0x6
	b.ne	.LBB85_7
// %bb.5:                               // %"$11"
	tbz	w1, #3, .LBB85_13
// %bb.6:                               // %"$14"
	ldp	w1, w8, [x1]
	bfi	x1, x8, #32, #32
.LBB85_7:                               // %"$10"
	tbz	w1, #1, .LBB85_14
.LBB85_8:                               // %"$16"
	lsr	x0, x1, #4
	cbz	x0, .LBB85_19
// %bb.9:                               // %"$17"
                                        // kill: def $w0 killed $w0 killed $x0
	b	.LBB85_16
.LBB85_10:                              // %"$5"
	ldr	x8, [x20, :lo12:($Get)]
	blr	x8
	tbz	w0, #31, .LBB85_3
.LBB85_11:
	adrp	x19, SymTab+8
	add	x19, x19, :lo12:SymTab+8
.LBB85_12:                              // %"$9"
	ldr	x8, [x20, :lo12:($Get)]
	blr	x8
	b	.LBB85_20
.LBB85_13:                              // %"$13"
	mov	x0, x1
	bl	evList
	mov	x1, x0
	tbnz	w1, #1, .LBB85_8
.LBB85_14:                              // %"$15"
	adrp	x8, SymTab+216
	add	x8, x8, :lo12:SymTab+216
	cmp	x1, x8
	b.ne	.LBB85_17
// %bb.15:                              // %"$21"
	mov	w0, #1114112
.LBB85_16:                              // %"$2"
	bl	mkChar
	mov	x19, x0
	b	.LBB85_20
.LBB85_17:                              // %"$20"
	eor	w8, w1, #0x8
	tst	x8, #0xe
	b.ne	.LBB85_21
// %bb.18:                              // %"$23"
	mov	x0, x1
	bl	firstChar
                                        // kill: def $w0 killed $w0 def $x0
	sxtw	x8, w0
	mov	w19, #2
	bfi	x19, x8, #4, #60
	b	.LBB85_20
.LBB85_19:
	adrp	x19, SymTab+8
	add	x19, x19, :lo12:SymTab+8
.LBB85_20:                              // %"$2"
	mov	x0, x19
	ldp	x20, x19, [sp, #16]             // 16-byte Folded Reload
	ldr	x30, [sp], #32                  // 8-byte Folded Reload
	ret
.LBB85_21:                              // %"$22"
	mov	x0, x19
	bl	atomErr
.Lfunc_end85:
	.size	_char, .Lfunc_end85-_char
	.cfi_endproc
                                        // -- End function
	.globl	_skip                           // -- Begin function _skip
	.p2align	4
	.type	_skip,@function
_skip:                                  // @_skip
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	ldp	w0, w8, [x0, #8]
	bfi	x0, x8, #32, #32
	bl	evSym
	bl	firstChar
	bl	skipc
	tbnz	w0, #31, .LBB86_2
// %bb.1:                               // %"$3"
	bl	mkChar
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.LBB86_2:
	adrp	x0, SymTab+8
	add	x0, x0, :lo12:SymTab+8
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end86:
	.size	_skip, .Lfunc_end86-_skip
	.cfi_endproc
                                        // -- End function
	.globl	_eol                            // -- Begin function _eol
	.p2align	4
	.type	_eol,@function
_eol:                                   // @_eol
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	adrp	x8, ($Chr)
	ldr	w0, [x8, :lo12:($Chr)]
	cbnz	w0, .LBB87_2
// %bb.1:                               // %"$3"
	adrp	x8, ($Get)
	ldr	x8, [x8, :lo12:($Get)]
	blr	x8
.LBB87_2:                               // %"$4"
	cmp	w0, #10                         // =10
	ccmp	w0, #1, #8, ne
	adrp	x8, SymTab+8
	add	x8, x8, :lo12:SymTab+8
	add	x9, x8, #208                    // =208
	csel	x0, x9, x8, lt
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end87:
	.size	_eol, .Lfunc_end87-_eol
	.cfi_endproc
                                        // -- End function
	.globl	_eof                            // -- Begin function _eof
	.p2align	4
	.type	_eof,@function
_eof:                                   // @_eof
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x30, x19, [sp, #-16]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w19, -8
	.cfi_offset w30, -16
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w0, w8, [x9]
	bfi	x0, x8, #32, #32
	tst	x0, #0x6
	b.ne	.LBB88_4
// %bb.1:                               // %"$4"
	tbz	w0, #3, .LBB88_3
// %bb.2:                               // %"$7"
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB88_4
.LBB88_3:                               // %"$6"
	bl	evList
.LBB88_4:                               // %"$3"
	adrp	x19, SymTab+8
	add	x19, x19, :lo12:SymTab+8
	adrp	x8, ($Chr)
	cmp	x0, x19
	b.ne	.LBB88_7
// %bb.5:                               // %"$8"
	ldr	w8, [x8, :lo12:($Chr)]
	cbz	w8, .LBB88_8
// %bb.6:                               // %"$11"
	add	x9, x19, #208                   // =208
	cmp	w8, #0                          // =0
	csel	x0, x9, x19, lt
	ldp	x30, x19, [sp], #16             // 16-byte Folded Reload
	ret
.LBB88_7:                               // %"$9"
	mov	w9, #-1
	str	w9, [x8, :lo12:($Chr)]
	adrp	x0, SymTab+216
	add	x0, x0, :lo12:SymTab+216
	ldp	x30, x19, [sp], #16             // 16-byte Folded Reload
	ret
.LBB88_8:                               // %"$10"
	adrp	x8, ($Get)
	ldr	x8, [x8, :lo12:($Get)]
	blr	x8
	add	x8, x19, #208                   // =208
	cmp	w0, #0                          // =0
	csel	x0, x8, x19, lt
	ldp	x30, x19, [sp], #16             // 16-byte Folded Reload
	ret
.Lfunc_end88:
	.size	_eof, .Lfunc_end88-_eof
	.cfi_endproc
                                        // -- End function
	.globl	_from                           // -- Begin function _from
	.p2align	4
	.type	_from,@function
_from:                                  // @_from
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-80]!           // 16-byte Folded Spill
	stp	x26, x25, [sp, #16]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #32]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #48]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #64]             // 16-byte Folded Spill
	mov	x29, sp
	sub	sp, sp, #32                     // =32
	.cfi_def_cfa w29, 80
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w30, -72
	.cfi_offset w29, -80
	mov	x19, x0
	ldp	w20, w8, [x0, #8]
	bfi	x20, x8, #32, #32
	mov	x0, x20
	bl	evSym
	mov	x21, x0
	mov	x0, x19
	mov	x1, x21
	bl	xName
	mov	x22, x0
	bl	bufSize
	add	x8, x0, #15                     // =15
	and	x8, x8, #0xfffffffffffffff0
	mov	x9, sp
	sub	x1, x9, x8
	mov	sp, x1
	mov	x0, x22
	bl	bufString
	sub	x22, x29, #32                   // =32
	stp	xzr, x0, [x29, #-16]
	adrp	x23, env
	ldr	x8, [x23, :lo12:env]
	stp	x21, x8, [x29, #-32]
	str	x22, [x23, :lo12:env]
	mov	w24, #1
.LBB89_1:                               // %"$2"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w20, w8, [x20, #8]
	bfi	x20, x8, #32, #32
	tst	x20, #0xf
	b.ne	.LBB89_3
// %bb.2:                               // %"$3"
                                        //   in Loop: Header=BB89_1 Depth=1
	mov	x0, x20
	bl	evSym
	mov	x21, x0
	mov	x0, x19
	mov	x1, x21
	bl	xName
	mov	x22, x0
	bl	bufSize
	add	x8, x0, #15                     // =15
	and	x8, x8, #0xfffffffffffffff0
	mov	x9, sp
	sub	x1, x9, x8
	mov	sp, x1
	mov	x0, x22
	bl	bufString
	mov	x8, sp
	sub	x22, x8, #32                    // =32
	mov	sp, x22
	lsr	x9, x21, #32
	stp	w21, w9, [x8, #-32]
	stp	wzr, wzr, [x8, #-16]
	lsr	x9, x0, #32
	stp	w0, w9, [x8, #-8]
	ldr	x9, [x23, :lo12:env]
	lsr	x10, x9, #32
	stp	w9, w10, [x8, #-24]
	add	x24, x24, #1                    // =1
	str	x22, [x23, :lo12:env]
	b	.LBB89_1
.LBB89_3:                               // %"$4"
	adrp	x19, ($Chr)
	ldr	w8, [x19, :lo12:($Chr)]
	adrp	x20, ($Get)
	cbnz	w8, .LBB89_5
.LBB89_4:                               // %"$5"
	ldr	x8, [x20, :lo12:($Get)]
	blr	x8
.LBB89_5:                               // %"$7"
	ldr	w25, [x19, :lo12:($Chr)]
	tbnz	w25, #31, .LBB89_16
// %bb.6:                               // %"$8"
	mov	x21, x22
	mov	x26, x24
.LBB89_7:                               // %"$11"
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB89_9 Depth 2
	ldp	w9, w8, [x21, #24]
	bfi	x9, x8, #32, #32
	ldp	w10, w8, [x21, #16]
	bfi	x10, x8, #32, #32
	add	x8, x9, x10
	ldrb	w9, [x8]
	cmp	w9, w25, uxtb
	b.eq	.LBB89_11
// %bb.8:                               // %"$13"
                                        //   in Loop: Header=BB89_7 Depth=1
	ldp	w9, w8, [x21, #16]
	bfi	x9, x8, #32, #32
	cbz	x9, .LBB89_12
.LBB89_9:                               // %"$17"
                                        //   Parent Loop BB89_7 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	mov	x8, x21
	ldr	w9, [x8, #16]!
	ldr	w10, [x8, #4]
	bfi	x9, x10, #32, #32
	subs	x9, x9, #1                      // =1
	str	w9, [x8]
	lsr	x9, x9, #32
	str	w9, [x8, #4]
	b.eq	.LBB89_7
// %bb.10:                              // %"$18"
                                        //   in Loop: Header=BB89_9 Depth=2
	bl	memcmp
	cbnz	w0, .LBB89_9
	b	.LBB89_7
.LBB89_11:                              // %"$12"
                                        //   in Loop: Header=BB89_7 Depth=1
	mov	x9, x21
	ldr	w10, [x9, #16]!
	ldr	w11, [x9, #4]
	bfi	x10, x11, #32, #32
	add	x10, x10, #1                    // =1
	str	w10, [x9]
	lsr	x10, x10, #32
	str	w10, [x9, #4]
	ldrb	w8, [x8, #1]
	cbz	w8, .LBB89_14
.LBB89_12:                              // %"$15"
                                        //   in Loop: Header=BB89_7 Depth=1
	subs	x26, x26, #1                    // =1
	b.eq	.LBB89_4
// %bb.13:                              // %"$21"
                                        //   in Loop: Header=BB89_7 Depth=1
	ldp	w21, w8, [x21, #8]
	bfi	x21, x8, #32, #32
	b	.LBB89_7
.LBB89_14:                              // %"$14"
	ldr	x8, [x20, :lo12:($Get)]
	blr	x8
	ldur	x8, [x29, #-24]
	str	x8, [x23, :lo12:env]
	ldp	w0, w8, [x21]
	bfi	x0, x8, #32, #32
.LBB89_15:                              // %"$9"
	mov	sp, x29
	ldp	x20, x19, [sp, #64]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #48]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #32]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #80             // 16-byte Folded Reload
	ret
.LBB89_16:                              // %"$9"
	ldur	x8, [x29, #-24]
	str	x8, [x23, :lo12:env]
	adrp	x0, SymTab+8
	add	x0, x0, :lo12:SymTab+8
	b	.LBB89_15
.Lfunc_end89:
	.size	_from, .Lfunc_end89-_from
	.cfi_endproc
                                        // -- End function
	.globl	_till                           // -- Begin function _till
	.p2align	4
	.type	_till,@function
_till:                                  // @_till
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-80]!           // 16-byte Folded Spill
	stp	x26, x25, [sp, #16]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #32]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #48]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #64]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 80
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w30, -72
	.cfi_offset w29, -80
	mov	x19, x0
	ldp	w22, w8, [x0, #8]
	bfi	x22, x8, #32, #32
	mov	x0, x22
	bl	evSym
	mov	x1, x0
	mov	x0, x19
	bl	xName
	mov	x19, x0
	bl	bufSize
	add	x8, x0, #15                     // =15
	and	x8, x8, #0xfffffffffffffff0
	mov	x9, sp
	sub	x1, x9, x8
	mov	sp, x1
	mov	x0, x19
	bl	bufString
	mov	x19, x0
	adrp	x8, ($Chr)
	ldr	w21, [x8, :lo12:($Chr)]
	cbz	w21, .LBB90_3
// %bb.1:                               // %"$4"
	tbnz	w21, #31, .LBB90_4
.LBB90_2:                               // %"$7"
	mov	x0, x19
	mov	w1, w21
	bl	strchr2
	cmp	x0, #0                          // =0
	cset	w8, ne
	b	.LBB90_5
.LBB90_3:                               // %"$3"
	adrp	x8, ($Get)
	ldr	x8, [x8, :lo12:($Get)]
	blr	x8
	mov	w21, w0
	tbz	w21, #31, .LBB90_2
.LBB90_4:
	mov	w8, #1
.LBB90_5:                               // %"$6"
	adrp	x20, SymTab+8
	add	x20, x20, :lo12:SymTab+8
	tbnz	w8, #0, .LBB90_21
// %bb.6:                               // %"$8"
	ldp	w9, w8, [x22, #8]
	bfi	x9, x8, #32, #32
	ldp	w0, w8, [x9]
	bfi	x0, x8, #32, #32
	tst	x0, #0x6
	b.ne	.LBB90_10
// %bb.7:                               // %"$11"
	tbz	w0, #3, .LBB90_9
// %bb.8:                               // %"$14"
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB90_10
.LBB90_9:                               // %"$13"
	bl	evList
.LBB90_10:                              // %"$10"
	cmp	x0, x20
	adrp	x23, env
	b.ne	.LBB90_16
// %bb.11:                              // %"$16"
	mov	w0, w21
	bl	getChar
	bl	mkChar
	adrp	x21, SymTab+8
	add	x21, x21, :lo12:SymTab+8
	mov	x1, x21
	bl	cons
	mov	x20, x0
	ldr	x8, [x23, :lo12:env]
	mov	x9, sp
	sub	x24, x9, #16                    // =16
	mov	sp, x24
	lsr	x10, x0, #32
	lsr	x11, x8, #32
	stp	w20, w10, [x9, #-16]
	stp	w8, w11, [x9, #-8]
	adrp	x25, ($Get)
	mov	x26, x0
	str	x24, [x23, :lo12:env]
.LBB90_12:                              // %"$17"
                                        // =>This Inner Loop Header: Depth=1
	ldr	x8, [x25, :lo12:($Get)]
	blr	x8
	mov	w22, w0
	cmp	w0, #1                          // =1
	b.ge	.LBB90_14
// %bb.13:                              //   in Loop: Header=BB90_12 Depth=1
	mov	w8, #1
	tbz	w8, #0, .LBB90_15
	b	.LBB90_20
.LBB90_14:                              // %"$19"
                                        //   in Loop: Header=BB90_12 Depth=1
	mov	x0, x19
	mov	w1, w22
	bl	strchr2
	cmp	x0, #0                          // =0
	cset	w8, ne
	tbnz	w8, #0, .LBB90_20
.LBB90_15:                              // %"$20"
                                        //   in Loop: Header=BB90_12 Depth=1
	mov	w0, w22
	bl	mkChar
	mov	x1, x21
	bl	cons
	lsr	x8, x0, #32
	stp	w0, w8, [x26, #8]
	mov	x26, x0
	b	.LBB90_12
.LBB90_16:                              // %"$15"
	mov	x8, sp
	sub	x20, x8, #32                    // =32
	mov	sp, x20
	mov	w9, #4
	stp	w9, wzr, [x8, #-32]
	stur	wzr, [x8, #-12]
	mov	w9, #2
	mov	x24, x20
	str	w9, [x24, #16]!
	ldr	x9, [x23, :lo12:env]
	lsr	x10, x9, #32
	stp	w9, w10, [x8, #-8]
	adrp	x22, ($Get)
	str	x24, [x23, :lo12:env]
.LBB90_17:                              // %"$22"
                                        // =>This Inner Loop Header: Depth=1
	mov	w0, w21
	bl	getChar
	mov	x1, x20
	bl	charSym
	ldr	x8, [x22, :lo12:($Get)]
	blr	x8
	cmp	w0, #1                          // =1
	b.lt	.LBB90_19
// %bb.18:                              // %"$23"
                                        //   in Loop: Header=BB90_17 Depth=1
	mov	w21, w0
	mov	x0, x19
	mov	w1, w21
	bl	strchr2
	cbz	x0, .LBB90_17
.LBB90_19:                              // %"$24"
	ldp	w0, w8, [x20, #16]
	bfi	x0, x8, #32, #32
	bl	consStr
	mov	x20, x0
.LBB90_20:                              // %"$5.sink.split"
	ldp	w9, w8, [x24, #8]
	bfi	x9, x8, #32, #32
	str	x9, [x23, :lo12:env]
.LBB90_21:                              // %"$5"
	mov	x0, x20
	mov	sp, x29
	ldp	x20, x19, [sp, #64]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #48]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #32]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #80             // 16-byte Folded Reload
	ret
.Lfunc_end90:
	.size	_till, .Lfunc_end90-_till
	.cfi_endproc
                                        // -- End function
	.globl	_line                           // -- Begin function _line
	.p2align	4
	.type	_line,@function
_line:                                  // @_line
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-96]!           // 16-byte Folded Spill
	stp	x28, x27, [sp, #16]             // 16-byte Folded Spill
	stp	x26, x25, [sp, #32]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #48]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #64]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #80]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	mov	x20, x0
	adrp	x8, ($Chr)
	ldr	w22, [x8, :lo12:($Chr)]
	cbnz	w22, .LBB91_2
// %bb.1:                               // %"$2"
	adrp	x8, ($Get)
	ldr	x8, [x8, :lo12:($Get)]
	blr	x8
	mov	w22, w0
.LBB91_2:                               // %"$3"
	mov	w0, w22
	bl	eol
	adrp	x19, SymTab+8
	add	x19, x19, :lo12:SymTab+8
	tbnz	w0, #0, .LBB91_17
// %bb.3:                               // %"$5"
	ldp	w9, w8, [x20, #8]
	bfi	x9, x8, #32, #32
	ldp	w0, w8, [x9]
	bfi	x0, x8, #32, #32
	ldp	w21, w8, [x9, #8]
	bfi	x21, x8, #32, #32
	tst	x0, #0x6
	b.ne	.LBB91_6
// %bb.4:                               // %"$9"
	tbz	w0, #3, .LBB91_11
// %bb.5:                               // %"$12"
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
.LBB91_6:                               // %"$8"
	cmp	x0, x19
	b.ne	.LBB91_12
.LBB91_7:                               // %"$14"
	mov	w0, w22
	bl	getChar
	bl	mkChar
	adrp	x1, SymTab+8
	add	x1, x1, :lo12:SymTab+8
	bl	cons
	mov	x19, x0
	adrp	x12, env
	ldr	x8, [x12, :lo12:env]
	mov	x9, sp
	sub	x26, x9, #16                    // =16
	mov	sp, x26
	lsr	x10, x0, #32
	lsr	x11, x8, #32
	stp	w19, w10, [x9, #-16]
	stp	w8, w11, [x9, #-8]
	tst	x21, #0xf
	mov	x27, x0
	str	x26, [x12, :lo12:env]
	b.eq	.LBB91_19
.LBB91_8:                               // %"$27.preheader"
	adrp	x22, ($Get)
	adrp	x20, SymTab+8
	add	x20, x20, :lo12:SymTab+8
.LBB91_9:                               // %"$27"
                                        // =>This Inner Loop Header: Depth=1
	ldr	x8, [x22, :lo12:($Get)]
	blr	x8
	mov	w21, w0
	bl	eol
	tbnz	w0, #0, .LBB91_16
// %bb.10:                              // %"$28"
                                        //   in Loop: Header=BB91_9 Depth=1
	mov	w0, w21
	bl	getChar
	bl	mkChar
	mov	x1, x20
	bl	cons
	lsr	x8, x0, #32
	stp	w0, w8, [x27, #8]
	mov	x27, x0
	b	.LBB91_9
.LBB91_11:                              // %"$11"
	bl	evList
	cmp	x0, x19
	b.eq	.LBB91_7
.LBB91_12:                              // %"$13"
	tst	x21, #0xf
	b.eq	.LBB91_26
// %bb.13:                              // %"$31"
	mov	x8, sp
	sub	x19, x8, #32                    // =32
	mov	sp, x19
	mov	w9, #4
	stp	w9, wzr, [x8, #-32]
	mov	w9, #2
	mov	x26, x19
	str	w9, [x26, #16]!
	stur	wzr, [x8, #-12]
	adrp	x9, env
	ldr	x10, [x9, :lo12:env]
	lsr	x11, x10, #32
	stp	w10, w11, [x8, #-8]
	str	x26, [x9, :lo12:env]
	adrp	x20, ($Get)
.LBB91_14:                              // %"$32"
                                        // =>This Inner Loop Header: Depth=1
	mov	w0, w22
	bl	getChar
	mov	x1, x19
	bl	charSym
	ldr	x8, [x20, :lo12:($Get)]
	blr	x8
	mov	w22, w0
	bl	eol
	tbz	w0, #0, .LBB91_14
// %bb.15:                              // %"$34"
	ldp	w0, w8, [x19, #16]
	bfi	x0, x8, #32, #32
	bl	consStr
	mov	x19, x0
.LBB91_16:                              // %"$7"
	ldp	w9, w8, [x26, #8]
	bfi	x9, x8, #32, #32
	adrp	x8, env
	str	x9, [x8, :lo12:env]
.LBB91_17:                              // %"$6"
	mov	x0, x19
.LBB91_18:                              // %"$6"
	mov	sp, x29
	ldp	x20, x19, [sp, #80]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #64]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #48]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #32]             // 16-byte Folded Reload
	ldp	x28, x27, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #96             // 16-byte Folded Reload
	ret
.LBB91_19:                              // %"$15"
	ldp	w0, w8, [x19]
	bfi	x0, x8, #32, #32
	adrp	x22, SymTab+8
	add	x22, x22, :lo12:SymTab+8
	mov	x1, x22
	bl	cons
	mov	x23, x0
	lsr	x8, x0, #32
	stp	w23, w8, [x19]
	adrp	x28, ($Get)
	mov	x27, x19
.LBB91_20:                              // %"$17"
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB91_21 Depth 2
	mov	x0, x20
	mov	x1, x21
	bl	evCnt
	sub	x25, x0, #1                     // =1
	subs	x25, x25, #1                    // =1
	b.lt	.LBB91_23
.LBB91_21:                              // %"$19"
                                        //   Parent Loop BB91_20 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	x8, [x28, :lo12:($Get)]
	blr	x8
	mov	w24, w0
	bl	eol
	tbnz	w0, #0, .LBB91_16
// %bb.22:                              // %"$22"
                                        //   in Loop: Header=BB91_21 Depth=2
	mov	w0, w24
	bl	getChar
	bl	mkChar
	mov	x1, x22
	bl	cons
	lsr	x8, x0, #32
	stp	w0, w8, [x23, #8]
	mov	x23, x0
	subs	x25, x25, #1                    // =1
	b.ge	.LBB91_21
.LBB91_23:                              // %"$20"
                                        //   in Loop: Header=BB91_20 Depth=1
	ldp	w21, w8, [x21, #8]
	bfi	x21, x8, #32, #32
	tst	x21, #0xf
	b.ne	.LBB91_8
// %bb.24:                              // %"$23"
                                        //   in Loop: Header=BB91_20 Depth=1
	ldr	x8, [x28, :lo12:($Get)]
	blr	x8
	mov	w23, w0
	bl	eol
	tbnz	w0, #0, .LBB91_16
// %bb.25:                              // %"$26"
                                        //   in Loop: Header=BB91_20 Depth=1
	mov	w0, w23
	bl	getChar
	bl	mkChar
	mov	x1, x22
	bl	cons
	mov	x23, x0
	mov	x1, x22
	bl	cons
	lsr	x8, x0, #32
	stp	w0, w8, [x27, #8]
	mov	x27, x0
	b	.LBB91_20
.LBB91_26:                              // %"$30"
	mov	x0, x20
	mov	x1, x21
	bl	evCnt
	mov	x19, x0
	mov	x8, sp
	sub	x23, x8, #32                    // =32
	mov	sp, x23
	mov	w9, #4
	stp	w9, wzr, [x8, #-32]
	mov	w9, #2
	mov	x26, x23
	str	w9, [x26, #16]!
	stur	wzr, [x8, #-12]
	adrp	x27, env
	ldr	x9, [x27, :lo12:env]
	lsr	x10, x9, #32
	stp	w9, w10, [x8, #-8]
	str	x26, [x27, :lo12:env]
	adrp	x28, ($Get)
.LBB91_27:                              // %"$35"
                                        // =>This Inner Loop Header: Depth=1
	mov	w0, w22
	bl	getChar
	mov	x1, x23
	bl	charSym
	ldr	x8, [x28, :lo12:($Get)]
	blr	x8
	mov	w22, w0
	bl	eol
	tbnz	w0, #0, .LBB91_35
// %bb.28:                              // %"$37"
                                        //   in Loop: Header=BB91_27 Depth=1
	subs	x19, x19, #1                    // =1
	b.ne	.LBB91_27
// %bb.29:                              // %"$39"
	ldp	w0, w8, [x26]
	bfi	x0, x8, #32, #32
	bl	consStr
	adrp	x1, SymTab+8
	add	x1, x1, :lo12:SymTab+8
	bl	cons
	mov	x19, x0
	ldr	x8, [x27, :lo12:env]
	mov	x9, sp
	sub	x10, x9, #16                    // =16
	mov	sp, x10
	lsr	x11, x0, #32
	lsr	x12, x8, #32
	stp	w19, w11, [x9, #-16]
	stp	w8, w12, [x9, #-8]
	mov	x24, x0
	str	x10, [x27, :lo12:env]
.LBB91_30:                              // %"$40"
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB91_32 Depth 2
	ldp	w21, w8, [x21, #8]
	bfi	x21, x8, #32, #32
	tst	x21, #0xf
	b.ne	.LBB91_37
// %bb.31:                              // %"$41"
                                        //   in Loop: Header=BB91_30 Depth=1
	mov	x0, x20
	mov	x1, x21
	bl	evCnt
	mov	x25, x0
	mov	w8, #4
	stp	w8, wzr, [x23]
	mov	w8, #2
	stp	w8, wzr, [x23, #16]
.LBB91_32:                              // %"$43"
                                        //   Parent Loop BB91_30 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	mov	w0, w22
	bl	getChar
	mov	x1, x23
	bl	charSym
	ldr	x8, [x28, :lo12:($Get)]
	blr	x8
	mov	w22, w0
	bl	eol
	tbnz	w0, #0, .LBB91_36
// %bb.33:                              // %"$45"
                                        //   in Loop: Header=BB91_32 Depth=2
	subs	x25, x25, #1                    // =1
	b.ne	.LBB91_32
// %bb.34:                              // %"$47"
                                        //   in Loop: Header=BB91_30 Depth=1
	ldp	w0, w8, [x26]
	bfi	x0, x8, #32, #32
	bl	consStr
	adrp	x1, SymTab+8
	add	x1, x1, :lo12:SymTab+8
	bl	cons
	lsr	x8, x0, #32
	stp	w0, w8, [x24, #8]
	mov	x24, x0
	b	.LBB91_30
.LBB91_35:                              // %"$36"
	ldp	w0, w8, [x26]
	bfi	x0, x8, #32, #32
	bl	consStr
	adrp	x1, SymTab+8
	add	x1, x1, :lo12:SymTab+8
	bl	cons
	ldp	w9, w8, [x26, #8]
	bfi	x9, x8, #32, #32
	str	x9, [x27, :lo12:env]
	b	.LBB91_18
.LBB91_36:                              // %"$44"
	ldp	w0, w8, [x26]
	bfi	x0, x8, #32, #32
	bl	consStr
	adrp	x1, SymTab+8
	add	x1, x1, :lo12:SymTab+8
	bl	cons
	lsr	x8, x0, #32
	stp	w0, w8, [x24, #8]
	ldp	w9, w8, [x26, #8]
	bfi	x9, x8, #32, #32
	str	x9, [x27, :lo12:env]
	b	.LBB91_17
.LBB91_37:
	adrp	x20, SymTab+8
	add	x20, x20, :lo12:SymTab+8
.LBB91_38:                              // %"$48"
                                        // =>This Inner Loop Header: Depth=1
	mov	w0, w22
	bl	getChar
	bl	mkChar
	mov	x1, x20
	bl	cons
	mov	x21, x0
	lsr	x8, x0, #32
	stp	w21, w8, [x24, #8]
	ldr	x8, [x28, :lo12:($Get)]
	blr	x8
	mov	w22, w0
	bl	eol
	mov	x24, x21
	tbz	w0, #0, .LBB91_38
	b	.LBB91_16
.Lfunc_end91:
	.size	_line, .Lfunc_end91-_line
	.cfi_endproc
                                        // -- End function
	.globl	_echo                           // -- Begin function _echo
	.p2align	4
	.type	_echo,@function
_echo:                                  // @_echo
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-96]!           // 16-byte Folded Spill
	stp	x28, x27, [sp, #16]             // 16-byte Folded Spill
	stp	x26, x25, [sp, #32]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #48]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #64]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #80]             // 16-byte Folded Spill
	mov	x29, sp
	sub	sp, sp, #16                     // =16
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	mov	x19, x0
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w21, w8, [x9]
	bfi	x21, x8, #32, #32
	ldp	w20, w8, [x9, #8]
	bfi	x20, x8, #32, #32
	tst	x21, #0x6
	b.ne	.LBB92_4
// %bb.1:                               // %"$3"
	tbz	w21, #3, .LBB92_3
// %bb.2:                               // %"$6"
	ldp	w21, w8, [x21]
	bfi	x21, x8, #32, #32
	b	.LBB92_4
.LBB92_3:                               // %"$5"
	mov	x0, x21
	bl	evList
	mov	x21, x0
.LBB92_4:                               // %"$2"
	adrp	x8, SymTab+8
	add	x8, x8, :lo12:SymTab+8
	tst	x20, #0xf
	cset	w9, ne
	cmp	x21, x8
	csel	w8, wzr, w9, ne
	cbz	w8, .LBB92_10
// %bb.5:                               // %"$11"
	adrp	x8, ($Chr)
	ldr	w0, [x8, :lo12:($Chr)]
	cbnz	w0, .LBB92_7
// %bb.6:                               // %"$13"
	adrp	x8, ($Get)
	ldr	x8, [x8, :lo12:($Get)]
	blr	x8
.LBB92_7:                               // %"$15.preheader"
	adrp	x20, ($Put)
	adrp	x21, ($Get)
	adrp	x19, SymTab+216
	add	x19, x19, :lo12:SymTab+216
	tbnz	w0, #31, .LBB92_9
.LBB92_8:                               // %"$16"
                                        // =>This Inner Loop Header: Depth=1
	ldr	x8, [x20, :lo12:($Put)]
	blr	x8
	ldr	x8, [x21, :lo12:($Get)]
	blr	x8
	tbz	w0, #31, .LBB92_8
.LBB92_9:                               // %"$7"
	mov	x0, x19
	b	.LBB92_66
.LBB92_10:                              // %"$10"
	tst	x21, #0x6
	b.eq	.LBB92_16
// %bb.11:                              // %"$19"
	mov	x0, x19
	mov	x1, x21
	bl	xCnt
	mov	x21, x0
	tst	x20, #0xf
	b.ne	.LBB92_62
// %bb.12:                              // %"$20"
	mov	x0, x19
	mov	x1, x20
	bl	evCnt
	mov	x19, x0
	adrp	x20, ($Get)
.LBB92_13:                              // %"$22"
                                        // =>This Inner Loop Header: Depth=1
	subs	x21, x21, #1                    // =1
	b.mi	.LBB92_61
// %bb.14:                              // %"$23"
                                        //   in Loop: Header=BB92_13 Depth=1
	ldr	x8, [x20, :lo12:($Get)]
	blr	x8
	tbz	w0, #31, .LBB92_13
.LBB92_15:                              // %"$25"
	adrp	x0, SymTab+8
	add	x0, x0, :lo12:SymTab+8
	b	.LBB92_66
.LBB92_16:                              // %"$18"
	tst	x21, #0xf
	b.eq	.LBB92_68
// %bb.17:                              // %"$32"
	mov	x26, xzr
	mov	x0, x19
	mov	x1, x21
	bl	xName
	mov	x22, x0
	bl	bufSize
	add	x8, x0, #15                     // =15
	and	x8, x8, #0xfffffffffffffff0
	mov	x9, sp
	sub	x1, x9, x8
	mov	sp, x1
	mov	x0, x22
	bl	bufString
	mov	x8, sp
	sub	x11, x8, #32                    // =32
	mov	sp, x11
	adrp	x24, env
	lsr	x9, x21, #32
	stp	wzr, wzr, [x8, #-16]
	stp	w21, w9, [x8, #-32]
	lsr	x9, x0, #32
	stp	w0, w9, [x8, #-8]
	ldr	x9, [x24, :lo12:env]
	lsr	x10, x9, #32
	stp	w9, w10, [x8, #-24]
	mov	w23, #1
	mov	x22, x11
	stur	x11, [x29, #-16]                // 8-byte Folded Spill
	str	x11, [x24, :lo12:env]
	tst	x20, #0xf
	b.ne	.LBB92_19
.LBB92_18:                              // %"$35"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w0, w8, [x20]
	bfi	x0, x8, #32, #32
	ldp	w20, w8, [x20, #8]
	bfi	x20, x8, #32, #32
	bl	evSym
	mov	x21, x0
	mov	x0, x19
	mov	x1, x21
	bl	xName
	mov	x22, x0
	bl	bufSize
	add	x8, x0, #15                     // =15
	and	x8, x8, #0xfffffffffffffff0
	mov	x9, sp
	sub	x1, x9, x8
	mov	sp, x1
	mov	x0, x22
	bl	bufString
	mov	x8, sp
	sub	x22, x8, #32                    // =32
	mov	sp, x22
	lsr	x9, x21, #32
	stp	w21, w9, [x8, #-32]
	stp	wzr, wzr, [x8, #-16]
	lsr	x9, x0, #32
	stp	w0, w9, [x8, #-8]
	ldr	x9, [x24, :lo12:env]
	lsr	x10, x9, #32
	stp	w9, w10, [x8, #-24]
	add	x23, x23, #1                    // =1
	str	x22, [x24, :lo12:env]
	tst	x20, #0xf
	b.eq	.LBB92_18
.LBB92_19:                              // %"$36"
	adrp	x8, ($Chr)
	ldr	w8, [x8, :lo12:($Chr)]
	cbnz	w8, .LBB92_21
// %bb.20:                              // %"$37"
	adrp	x8, ($Get)
	ldr	x8, [x8, :lo12:($Get)]
	blr	x8
.LBB92_21:                              // %"$39.preheader"
	adrp	x21, ($Put)
.LBB92_22:                              // %"$39"
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB92_27 Depth 2
                                        //       Child Loop BB92_33 Depth 3
                                        //       Child Loop BB92_37 Depth 3
                                        //     Child Loop BB92_51 Depth 2
                                        //     Child Loop BB92_54 Depth 2
	adrp	x8, ($Chr)
	ldr	w19, [x8, :lo12:($Chr)]
	tbnz	w19, #31, .LBB92_67
// %bb.23:                              // %"$40"
                                        //   in Loop: Header=BB92_22 Depth=1
	cbz	x26, .LBB92_25
// %bb.24:                              // %"$42"
                                        //   in Loop: Header=BB92_22 Depth=1
	ldp	w27, w8, [x26, #16]
	bfi	x27, x8, #32, #32
	b	.LBB92_26
.LBB92_25:                              //   in Loop: Header=BB92_22 Depth=1
	mov	x27, xzr
.LBB92_26:                              // %"$46.preheader"
                                        //   in Loop: Header=BB92_22 Depth=1
	stur	x26, [x29, #-8]                 // 8-byte Folded Spill
	mov	x28, x22
	mov	x25, x23
.LBB92_27:                              // %"$46"
                                        //   Parent Loop BB92_22 Depth=1
                                        // =>  This Loop Header: Depth=2
                                        //       Child Loop BB92_33 Depth 3
                                        //       Child Loop BB92_37 Depth 3
	ldp	w9, w8, [x28, #24]
	bfi	x9, x8, #32, #32
	ldp	w10, w8, [x28, #16]
	bfi	x10, x8, #32, #32
	add	x8, x9, x10
	ldrb	w9, [x8]
	cmp	w9, w19, uxtb
	b.ne	.LBB92_31
// %bb.28:                              // %"$47"
                                        //   in Loop: Header=BB92_27 Depth=2
	mov	x9, x28
	ldr	w10, [x9, #16]!
	ldr	w11, [x9, #4]
	bfi	x10, x11, #32, #32
	add	x10, x10, #1                    // =1
	str	w10, [x9]
	lsr	x10, x10, #32
	str	w10, [x9, #4]
	ldrb	w8, [x8, #1]
	cbz	w8, .LBB92_57
// %bb.29:                              // %"$51"
                                        //   in Loop: Header=BB92_27 Depth=2
	cbz	x26, .LBB92_44
// %bb.30:                              // %"$53"
                                        //   in Loop: Header=BB92_27 Depth=2
	ldp	w9, w8, [x26, #16]
	bfi	x9, x8, #32, #32
	ldp	w10, w8, [x28, #16]
	bfi	x10, x8, #32, #32
	cmp	x9, x10
	cset	w8, hs
	tbz	w8, #0, .LBB92_45
	b	.LBB92_46
.LBB92_31:                              // %"$48"
                                        //   in Loop: Header=BB92_27 Depth=2
	ldp	w9, w8, [x28, #16]
	bfi	x9, x8, #32, #32
	cbz	x9, .LBB92_46
// %bb.32:                              // %"$61"
                                        //   in Loop: Header=BB92_27 Depth=2
	ldp	w20, w8, [x28, #24]
	bfi	x20, x8, #32, #32
.LBB92_33:                              // %"$62"
                                        //   Parent Loop BB92_22 Depth=1
                                        //     Parent Loop BB92_27 Depth=2
                                        // =>    This Inner Loop Header: Depth=3
	mov	x8, x28
	ldr	w9, [x8, #16]!
	ldr	w10, [x8, #4]
	bfi	x9, x10, #32, #32
	subs	x9, x9, #1                      // =1
	str	w9, [x8]
	lsr	x9, x9, #32
	str	w9, [x8, #4]
	b.eq	.LBB92_35
// %bb.34:                              // %"$63"
                                        //   in Loop: Header=BB92_33 Depth=3
	bl	memcmp
	add	x20, x20, #1                    // =1
	cbnz	w0, .LBB92_33
.LBB92_35:                              // %"$64"
                                        //   in Loop: Header=BB92_27 Depth=2
	cmp	x28, x26
	b.ne	.LBB92_27
// %bb.36:                              // %"$66"
                                        //   in Loop: Header=BB92_27 Depth=2
	mov	x26, xzr
	mov	x8, x22
	mov	x9, x23
.LBB92_37:                              // %"$68"
                                        //   Parent Loop BB92_22 Depth=1
                                        //     Parent Loop BB92_27 Depth=2
                                        // =>    This Inner Loop Header: Depth=3
	ldp	w11, w10, [x8, #16]
	bfi	x11, x10, #32, #32
	cbz	x11, .LBB92_41
// %bb.38:                              // %"$69"
                                        //   in Loop: Header=BB92_37 Depth=3
	cbz	x26, .LBB92_43
// %bb.39:                              // %"$72"
                                        //   in Loop: Header=BB92_37 Depth=3
	ldp	w11, w10, [x26, #16]
	bfi	x11, x10, #32, #32
	ldp	w12, w10, [x8, #16]
	bfi	x12, x10, #32, #32
	cmp	x11, x12
	cset	w10, hs
	tbnz	w10, #0, .LBB92_41
.LBB92_40:                              // %"$73"
                                        //   in Loop: Header=BB92_37 Depth=3
	mov	x26, x8
.LBB92_41:                              // %"$70"
                                        //   in Loop: Header=BB92_37 Depth=3
	subs	x9, x9, #1                      // =1
	b.eq	.LBB92_27
// %bb.42:                              // %"$75"
                                        //   in Loop: Header=BB92_37 Depth=3
	ldp	w8, w10, [x8, #8]
	bfi	x8, x10, #32, #32
	b	.LBB92_37
.LBB92_43:                              //   in Loop: Header=BB92_37 Depth=3
	mov	w10, wzr
	tbz	w10, #0, .LBB92_40
	b	.LBB92_41
.LBB92_44:                              //   in Loop: Header=BB92_27 Depth=2
	mov	w8, wzr
	tbnz	w8, #0, .LBB92_46
.LBB92_45:                              // %"$54"
                                        //   in Loop: Header=BB92_27 Depth=2
	mov	x26, x28
.LBB92_46:                              // %"$50"
                                        //   in Loop: Header=BB92_27 Depth=2
	subs	x25, x25, #1                    // =1
	b.eq	.LBB92_48
// %bb.47:                              // %"$77"
                                        //   in Loop: Header=BB92_27 Depth=2
	ldp	w28, w8, [x28, #8]
	bfi	x28, x8, #32, #32
	b	.LBB92_27
.LBB92_48:                              // %"$78"
                                        //   in Loop: Header=BB92_22 Depth=1
	cbz	x26, .LBB92_52
// %bb.49:                              // %"$80"
                                        //   in Loop: Header=BB92_22 Depth=1
	ldur	x9, [x29, #-8]                  // 8-byte Folded Reload
	cbz	x9, .LBB92_56
// %bb.50:                              // %"$88"
                                        //   in Loop: Header=BB92_22 Depth=1
	ldp	w19, w8, [x9, #24]
	bfi	x19, x8, #32, #32
	ldp	w9, w8, [x26, #16]
	bfi	x9, x8, #32, #32
	sub	x20, x27, x9
	tbnz	x20, #63, .LBB92_56
.LBB92_51:                              // %"$90"
                                        //   Parent Loop BB92_22 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	x8, [x21, :lo12:($Put)]
	ldrb	w0, [x19], #1
	blr	x8
	sub	x20, x20, #1                    // =1
	tbz	x20, #63, .LBB92_51
	b	.LBB92_56
.LBB92_52:                              // %"$81"
                                        //   in Loop: Header=BB92_22 Depth=1
	ldur	x9, [x29, #-8]                  // 8-byte Folded Reload
	cbz	x9, .LBB92_55
// %bb.53:                              // %"$82"
                                        //   in Loop: Header=BB92_22 Depth=1
	ldp	w20, w8, [x9, #24]
	bfi	x20, x8, #32, #32
.LBB92_54:                              // %"$84"
                                        //   Parent Loop BB92_22 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	x8, [x21, :lo12:($Put)]
	ldrb	w0, [x20], #1
	blr	x8
	subs	x27, x27, #1                    // =1
	b.ne	.LBB92_54
.LBB92_55:                              // %"$83"
                                        //   in Loop: Header=BB92_22 Depth=1
	ldr	x8, [x21, :lo12:($Put)]
	mov	w0, w19
	blr	x8
.LBB92_56:                              // %"$79"
                                        //   in Loop: Header=BB92_22 Depth=1
	adrp	x8, ($Get)
	ldr	x8, [x8, :lo12:($Get)]
	blr	x8
	b	.LBB92_22
.LBB92_57:                              // %"$49"
	ldur	x9, [x29, #-8]                  // 8-byte Folded Reload
	cbz	x9, .LBB92_60
// %bb.58:                              // %"$56"
	ldp	w19, w8, [x9, #24]
	bfi	x19, x8, #32, #32
	ldp	w9, w8, [x28, #16]
	bfi	x9, x8, #32, #32
	sub	x20, x27, x9
	tbnz	x20, #63, .LBB92_60
.LBB92_59:                              // %"$59"
                                        // =>This Inner Loop Header: Depth=1
	ldr	x8, [x21, :lo12:($Put)]
	ldrb	w0, [x19], #1
	blr	x8
	sub	x20, x20, #1                    // =1
	tbz	x20, #63, .LBB92_59
.LBB92_60:                              // %"$57"
	adrp	x8, ($Chr)
	str	wzr, [x8, :lo12:($Chr)]
	ldur	x9, [x29, #-16]                 // 8-byte Folded Reload
	ldp	w9, w8, [x9, #8]
	bfi	x9, x8, #32, #32
	str	x9, [x24, :lo12:env]
	ldp	w0, w8, [x28]
	bfi	x0, x8, #32, #32
	b	.LBB92_66
.LBB92_61:
	mov	x21, x19
.LBB92_62:                              // %"$27.preheader"
	sub	x19, x21, #1                    // =1
	adrp	x20, ($Get)
	adrp	x21, ($Put)
	tbnz	x19, #63, .LBB92_65
.LBB92_63:                              // %"$28"
                                        // =>This Inner Loop Header: Depth=1
	ldr	x8, [x20, :lo12:($Get)]
	blr	x8
	tbnz	w0, #31, .LBB92_15
// %bb.64:                              // %"$31"
                                        //   in Loop: Header=BB92_63 Depth=1
	ldr	x8, [x21, :lo12:($Put)]
	blr	x8
	sub	x19, x19, #1                    // =1
	tbz	x19, #63, .LBB92_63
.LBB92_65:                              // %"$29"
	adrp	x8, ($Chr)
	str	wzr, [x8, :lo12:($Chr)]
	adrp	x0, SymTab+216
	add	x0, x0, :lo12:SymTab+216
.LBB92_66:                              // %"$25"
	mov	sp, x29
	ldp	x20, x19, [sp, #80]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #64]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #48]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #32]             // 16-byte Folded Reload
	ldp	x28, x27, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #96             // 16-byte Folded Reload
	ret
.LBB92_67:                              // %"$41"
	ldur	x9, [x29, #-16]                 // 8-byte Folded Reload
	ldp	w9, w8, [x9, #8]
	bfi	x9, x8, #32, #32
	str	x9, [x24, :lo12:env]
	adrp	x19, SymTab+8
	add	x19, x19, :lo12:SymTab+8
	b	.LBB92_9
.LBB92_68:                              // %"$33"
	mov	x0, x19
	mov	x1, x21
	bl	argErr
.Lfunc_end92:
	.size	_echo, .Lfunc_end92-_echo
	.cfi_endproc
                                        // -- End function
	.globl	_prin                           // -- Begin function _prin
	.p2align	4
	.type	_prin,@function
_prin:                                  // @_prin
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-32]!                // 8-byte Folded Spill
	stp	x20, x19, [sp, #16]             // 16-byte Folded Spill
	.cfi_def_cfa_offset 32
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w30, -32
	ldp	w20, w8, [x0, #8]
	bfi	x20, x8, #32, #32
	b	.LBB93_3
.LBB93_1:                               // %"$6"
                                        //   in Loop: Header=BB93_3 Depth=1
	mov	x0, x19
	bl	evList
	mov	x19, x0
.LBB93_2:                               // %"$3"
                                        //   in Loop: Header=BB93_3 Depth=1
	mov	x0, x19
	bl	prin
	tst	x20, #0xf
	b.ne	.LBB93_6
.LBB93_3:                               // %"$2"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w19, w8, [x20]
	bfi	x19, x8, #32, #32
	ldp	w20, w8, [x20, #8]
	bfi	x20, x8, #32, #32
	tst	x19, #0x6
	b.ne	.LBB93_2
// %bb.4:                               // %"$4"
                                        //   in Loop: Header=BB93_3 Depth=1
	tbz	w19, #3, .LBB93_1
// %bb.5:                               // %"$7"
                                        //   in Loop: Header=BB93_3 Depth=1
	ldp	w19, w8, [x19]
	bfi	x19, x8, #32, #32
	b	.LBB93_2
.LBB93_6:                               // %"$9"
	mov	x0, x19
	ldp	x20, x19, [sp, #16]             // 16-byte Folded Reload
	ldr	x30, [sp], #32                  // 8-byte Folded Reload
	ret
.Lfunc_end93:
	.size	_prin, .Lfunc_end93-_prin
	.cfi_endproc
                                        // -- End function
	.globl	_prinl                          // -- Begin function _prinl
	.p2align	4
	.type	_prinl,@function
_prinl:                                 // @_prinl
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x30, x19, [sp, #-16]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w19, -8
	.cfi_offset w30, -16
	bl	_prin
	mov	x19, x0
	bl	newline
	mov	x0, x19
	ldp	x30, x19, [sp], #16             // 16-byte Folded Reload
	ret
.Lfunc_end94:
	.size	_prinl, .Lfunc_end94-_prinl
	.cfi_endproc
                                        // -- End function
	.globl	_space                          // -- Begin function _space
	.p2align	4
	.type	_space,@function
_space:                                 // @_space
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-32]!                // 8-byte Folded Spill
	stp	x20, x19, [sp, #16]             // 16-byte Folded Spill
	.cfi_def_cfa_offset 32
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w30, -32
	mov	x20, x0
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w19, w8, [x9]
	bfi	x19, x8, #32, #32
	tst	x19, #0x6
	b.ne	.LBB95_4
// %bb.1:                               // %"$3"
	tbz	w19, #3, .LBB95_3
// %bb.2:                               // %"$6"
	ldp	w19, w8, [x19]
	bfi	x19, x8, #32, #32
	b	.LBB95_4
.LBB95_3:                               // %"$5"
	mov	x0, x19
	bl	evList
	mov	x19, x0
.LBB95_4:                               // %"$2"
	adrp	x8, SymTab+8
	add	x8, x8, :lo12:SymTab+8
	cmp	x19, x8
	b.ne	.LBB95_7
// %bb.5:                               // %"$8"
	bl	space
	mov	w19, #18
.LBB95_6:                               // %"$9"
	mov	x0, x19
	ldp	x20, x19, [sp, #16]             // 16-byte Folded Reload
	ldr	x30, [sp], #32                  // 8-byte Folded Reload
	ret
.LBB95_7:                               // %"$7"
	mov	x0, x20
	mov	x1, x19
	bl	xCnt
	sub	x20, x0, #1                     // =1
	tbnz	x20, #63, .LBB95_6
.LBB95_8:                               // %"$11"
                                        // =>This Inner Loop Header: Depth=1
	bl	space
	sub	x20, x20, #1                    // =1
	tbz	x20, #63, .LBB95_8
	b	.LBB95_6
.Lfunc_end95:
	.size	_space, .Lfunc_end95-_space
	.cfi_endproc
                                        // -- End function
	.globl	_print                          // -- Begin function _print
	.p2align	4
	.type	_print,@function
_print:                                 // @_print
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-32]!                // 8-byte Folded Spill
	stp	x20, x19, [sp, #16]             // 16-byte Folded Spill
	.cfi_def_cfa_offset 32
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w30, -32
	ldp	w20, w8, [x0, #8]
	bfi	x20, x8, #32, #32
.LBB96_1:                               // %"$2"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w19, w8, [x20]
	bfi	x19, x8, #32, #32
	ldp	w20, w8, [x20, #8]
	bfi	x20, x8, #32, #32
	tst	x19, #0x6
	b.ne	.LBB96_5
// %bb.2:                               // %"$4"
                                        //   in Loop: Header=BB96_1 Depth=1
	tbz	w19, #3, .LBB96_4
// %bb.3:                               // %"$7"
                                        //   in Loop: Header=BB96_1 Depth=1
	ldp	w19, w8, [x19]
	bfi	x19, x8, #32, #32
	b	.LBB96_5
.LBB96_4:                               // %"$6"
                                        //   in Loop: Header=BB96_1 Depth=1
	mov	x0, x19
	bl	evList
	mov	x19, x0
.LBB96_5:                               // %"$3"
                                        //   in Loop: Header=BB96_1 Depth=1
	mov	x0, x19
	bl	print
	tst	x20, #0xf
	b.ne	.LBB96_7
// %bb.6:                               // %"$8"
                                        //   in Loop: Header=BB96_1 Depth=1
	bl	space
	b	.LBB96_1
.LBB96_7:                               // %"$9"
	mov	x0, x19
	ldp	x20, x19, [sp, #16]             // 16-byte Folded Reload
	ldr	x30, [sp], #32                  // 8-byte Folded Reload
	ret
.Lfunc_end96:
	.size	_print, .Lfunc_end96-_print
	.cfi_endproc
                                        // -- End function
	.globl	_printsp                        // -- Begin function _printsp
	.p2align	4
	.type	_printsp,@function
_printsp:                               // @_printsp
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x30, x19, [sp, #-16]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w19, -8
	.cfi_offset w30, -16
	bl	_print
	mov	x19, x0
	bl	space
	mov	x0, x19
	ldp	x30, x19, [sp], #16             // 16-byte Folded Reload
	ret
.Lfunc_end97:
	.size	_printsp, .Lfunc_end97-_printsp
	.cfi_endproc
                                        // -- End function
	.globl	_println                        // -- Begin function _println
	.p2align	4
	.type	_println,@function
_println:                               // @_println
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x30, x19, [sp, #-16]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w19, -8
	.cfi_offset w30, -16
	bl	_print
	mov	x19, x0
	bl	newline
	mov	x0, x19
	ldp	x30, x19, [sp], #16             // 16-byte Folded Reload
	ret
.Lfunc_end98:
	.size	_println, .Lfunc_end98-_println
	.cfi_endproc
                                        // -- End function
	.globl	_ext                            // -- Begin function _ext
	.p2align	4
	.type	_ext,@function
_ext:                                   // @_ext
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x30, x21, [sp, #-32]!           // 16-byte Folded Spill
	stp	x20, x19, [sp, #16]             // 16-byte Folded Spill
	.cfi_def_cfa_offset 32
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w30, -32
	ldp	w19, w8, [x0, #8]
	bfi	x19, x8, #32, #32
	mov	x1, x19
	bl	evCnt
	adrp	x20, ($ExtN)
	ldr	w21, [x20, :lo12:($ExtN)]
	str	w0, [x20, :lo12:($ExtN)]
	ldp	w19, w8, [x19, #8]
	bfi	x19, x8, #32, #32
.LBB99_1:                               // %"$2"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w0, w8, [x19]
	bfi	x0, x8, #32, #32
	ldp	w19, w8, [x19, #8]
	bfi	x19, x8, #32, #32
	tst	x19, #0xf
	b.ne	.LBB99_4
// %bb.2:                               // %"$3"
                                        //   in Loop: Header=BB99_1 Depth=1
	tst	x0, #0xf
	b.ne	.LBB99_1
// %bb.3:                               // %"$12"
                                        //   in Loop: Header=BB99_1 Depth=1
	bl	evList
	b	.LBB99_1
.LBB99_4:                               // %"$5"
	tst	x0, #0x6
	b.ne	.LBB99_8
// %bb.5:                               // %"$7"
	tbz	w0, #3, .LBB99_7
// %bb.6:                               // %"$10"
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB99_8
.LBB99_7:                               // %"$9"
	bl	evList
.LBB99_8:                               // %"$4"
	str	w21, [x20, :lo12:($ExtN)]
	ldp	x20, x19, [sp, #16]             // 16-byte Folded Reload
	ldp	x30, x21, [sp], #32             // 16-byte Folded Reload
	ret
.Lfunc_end99:
	.size	_ext, .Lfunc_end99-_ext
	.cfi_endproc
                                        // -- End function
	.globl	_plio                           // -- Begin function _plio
	.p2align	4
	.type	_plio,@function
_plio:                                  // @_plio
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-48]!                // 8-byte Folded Spill
	stp	x22, x21, [sp, #16]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #32]             // 16-byte Folded Spill
	.cfi_def_cfa_offset 48
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w30, -48
	mov	x19, x0
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w1, w8, [x9]
	bfi	x1, x8, #32, #32
	ldp	w20, w21, [x9, #8]
	tst	x1, #0x6
	b.ne	.LBB100_4
// %bb.1:                               // %"$3"
	tbz	w1, #3, .LBB100_3
// %bb.2:                               // %"$6"
	ldp	w1, w8, [x1]
	bfi	x1, x8, #32, #32
	b	.LBB100_4
.LBB100_3:                              // %"$5"
	mov	x0, x1
	bl	evList
	mov	x1, x0
.LBB100_4:                              // %"$2"
	tst	x1, #0x6
	b.eq	.LBB100_17
// %bb.5:                               // %"$8"
	bfi	x20, x21, #32, #32
	tbz	w1, #1, .LBB100_7
// %bb.6:                               // %"$9"
	lsr	x21, x1, #4
	b	.LBB100_8
.LBB100_7:                              // %"$10"
	ldp	w21, w8, [x1, #-4]
	bfi	x21, x8, #32, #32
.LBB100_8:                              // %"$11"
	adrp	x8, ($ExtN)
	ldr	w8, [x8, :lo12:($ExtN)]
	adrp	x9, ($Extn)
	str	w8, [x9, :lo12:($Extn)]
	adrp	x22, ($Ptr)
	str	x21, [x22, :lo12:($Ptr)]
	tst	x20, #0xf
	b.eq	.LBB100_11
// %bb.9:                               // %"$13"
	adrp	x8, ($GetBin)
	adrp	x9, getPlio
	add	x9, x9, :lo12:getPlio
	str	x9, [x8, :lo12:($GetBin)]
	bl	binRead
	cbnz	x0, .LBB100_16
// %bb.10:                              // %"$21"
	adrp	x0, SymTab+8
	add	x0, x0, :lo12:SymTab+8
	b	.LBB100_16
.LBB100_11:                             // %"$12"
	mov	x0, x19
	mov	x1, x20
	bl	evCnt
	mov	x19, x0
	ldp	w9, w8, [x20, #8]
	bfi	x9, x8, #32, #32
	ldp	w0, w8, [x9]
	bfi	x0, x8, #32, #32
	tst	x0, #0x6
	b.ne	.LBB100_15
// %bb.12:                              // %"$16"
	tbz	w0, #3, .LBB100_14
// %bb.13:                              // %"$19"
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB100_15
.LBB100_14:                             // %"$18"
	bl	evList
.LBB100_15:                             // %"$15"
	adrp	x8, putPlio
	add	x8, x8, :lo12:putPlio
	adrp	x9, ($PutBin)
	str	x8, [x9, :lo12:($PutBin)]
	add	x8, x21, x19
	adrp	x9, ($End)
	str	x8, [x9, :lo12:($End)]
	bl	binPrint
	ldr	x8, [x22, :lo12:($Ptr)]
	sub	x8, x8, x21
	mov	w0, #2
	bfi	x0, x8, #4, #60
.LBB100_16:                             // %"$14"
	ldp	x20, x19, [sp, #32]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #16]             // 16-byte Folded Reload
	ldr	x30, [sp], #48                  // 8-byte Folded Reload
	ret
.LBB100_17:                             // %"$7"
	mov	x0, x19
	bl	numErr
.Lfunc_end100:
	.size	_plio, .Lfunc_end100-_plio
	.cfi_endproc
                                        // -- End function
	.globl	_rd                             // -- Begin function _rd
	.p2align	4
	.type	_rd,@function
_rd:                                    // @_rd
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-64]!           // 16-byte Folded Spill
	stp	x24, x23, [sp, #16]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #32]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #48]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 64
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w30, -56
	.cfi_offset w29, -64
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w19, w8, [x9]
	bfi	x19, x8, #32, #32
	tst	x19, #0x6
	b.ne	.LBB101_4
// %bb.1:                               // %"$3"
	tbz	w19, #3, .LBB101_3
// %bb.2:                               // %"$6"
	ldp	w19, w8, [x19]
	bfi	x19, x8, #32, #32
	b	.LBB101_4
.LBB101_3:                              // %"$5"
	mov	x0, x19
	bl	evList
	mov	x19, x0
.LBB101_4:                              // %"$2"
	adrp	x21, env
	ldr	x8, [x21, :lo12:env]
	mov	x9, sp
	sub	x22, x9, #16                    // =16
	mov	sp, x22
	lsr	x10, x19, #32
	lsr	x11, x8, #32
	stp	w19, w10, [x9, #-16]
	stp	w8, w11, [x9, #-8]
	tst	x19, #0x6
	str	x22, [x21, :lo12:env]
	b.eq	.LBB101_15
// %bb.5:                               // %"$9"
	mov	x8, sp
	sub	x20, x8, #32                    // =32
	mov	sp, x20
	mov	w9, #3
	stp	w9, wzr, [x8, #-32]
	stur	wzr, [x8, #-12]
	mov	w9, #2
	mov	x23, x20
	str	w9, [x23, #16]!
	ldr	x9, [x21, :lo12:env]
	lsr	x10, x9, #32
	stp	w9, w10, [x8, #-8]
	lsr	x24, x19, #4
	str	x23, [x21, :lo12:env]
	cbz	x24, .LBB101_16
// %bb.6:                               // %"$11"
	tbz	w19, #3, .LBB101_11
.LBB101_7:                              // %"$15"
                                        // =>This Inner Loop Header: Depth=1
	bl	getBinary
	tbnz	w0, #31, .LBB101_18
// %bb.8:                               // %"$17"
                                        //   in Loop: Header=BB101_7 Depth=1
	mov	x1, x20
	bl	byteNum
	subs	x24, x24, #1                    // =1
	b.ne	.LBB101_7
// %bb.9:                               // %"$19"
	ldp	w0, w8, [x23]
	bfi	x0, x8, #32, #32
	tbz	w0, #1, .LBB101_14
// %bb.10:                              // %"$20"
	bl	twice
	b	.LBB101_17
.LBB101_11:                             // %"$23"
                                        // =>This Inner Loop Header: Depth=1
	bl	getBinary
                                        // kill: def $w0 killed $w0 def $x0
	tbnz	w0, #31, .LBB101_18
// %bb.12:                              // %"$25"
                                        //   in Loop: Header=BB101_11 Depth=1
	sxtw	x8, w0
	mov	w19, #2
	bfi	x19, x8, #4, #60
	ldp	w0, w8, [x23]
	bfi	x0, x8, #32, #32
	mov	w1, #4098
	bl	mulu
	mov	x1, x0
	lsr	x8, x0, #32
	stp	w1, w8, [x23]
	mov	x0, x19
	bl	addu
	lsr	x8, x0, #32
	stp	w0, w8, [x23]
	subs	x24, x24, #1                    // =1
	b.ne	.LBB101_11
// %bb.13:                              // %"$27"
	ldp	w0, w8, [x23]
	bfi	x0, x8, #32, #32
	tbnz	w0, #1, .LBB101_17
.LBB101_14:                             // %"$21"
	bl	zapZero
	b	.LBB101_17
.LBB101_15:                             // %"$8"
	adrp	x8, getBinary
	add	x8, x8, :lo12:getBinary
	adrp	x9, ($GetBin)
	str	x8, [x9, :lo12:($GetBin)]
	adrp	x8, ($ExtN)
	ldr	w8, [x8, :lo12:($ExtN)]
	adrp	x9, ($Extn)
	str	w8, [x9, :lo12:($Extn)]
	bl	binRead
	cmp	x0, #0                          // =0
	csel	x0, x0, x19, ne
	b	.LBB101_17
.LBB101_16:
	adrp	x0, SymTab+8
	add	x0, x0, :lo12:SymTab+8
.LBB101_17:                             // %"$7"
	ldp	w9, w8, [x22, #8]
	bfi	x9, x8, #32, #32
	str	x9, [x21, :lo12:env]
	b	.LBB101_19
.LBB101_18:                             // %"$-1"
	ldp	w9, w8, [x22, #8]
	bfi	x9, x8, #32, #32
	str	x9, [x21, :lo12:env]
	adrp	x0, SymTab+8
	add	x0, x0, :lo12:SymTab+8
.LBB101_19:                             // %"$7"
	mov	sp, x29
	ldp	x20, x19, [sp, #48]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #32]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #64             // 16-byte Folded Reload
	ret
.Lfunc_end101:
	.size	_rd, .Lfunc_end101-_rd
	.cfi_endproc
                                        // -- End function
	.globl	_pr                             // -- Begin function _pr
	.p2align	4
	.type	_pr,@function
_pr:                                    // @_pr
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-48]!                // 8-byte Folded Spill
	stp	x22, x21, [sp, #16]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #32]             // 16-byte Folded Spill
	.cfi_def_cfa_offset 48
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w30, -48
	ldp	w20, w8, [x0, #8]
	bfi	x20, x8, #32, #32
	adrp	x21, ($ExtN)
	adrp	x22, ($Extn)
	b	.LBB102_3
.LBB102_1:                              // %"$6"
                                        //   in Loop: Header=BB102_3 Depth=1
	mov	x0, x19
	bl	evList
	mov	x19, x0
.LBB102_2:                              // %"$3"
                                        //   in Loop: Header=BB102_3 Depth=1
	ldr	w8, [x21, :lo12:($ExtN)]
	str	w8, [x22, :lo12:($Extn)]
	mov	x0, x19
	bl	pr
	tst	x20, #0xf
	b.ne	.LBB102_6
.LBB102_3:                              // %"$2"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w19, w8, [x20]
	bfi	x19, x8, #32, #32
	ldp	w20, w8, [x20, #8]
	bfi	x20, x8, #32, #32
	tst	x19, #0x6
	b.ne	.LBB102_2
// %bb.4:                               // %"$4"
                                        //   in Loop: Header=BB102_3 Depth=1
	tbz	w19, #3, .LBB102_1
// %bb.5:                               // %"$7"
                                        //   in Loop: Header=BB102_3 Depth=1
	ldp	w19, w8, [x19]
	bfi	x19, x8, #32, #32
	b	.LBB102_2
.LBB102_6:                              // %"$9"
	mov	x0, x19
	ldp	x20, x19, [sp, #32]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #16]             // 16-byte Folded Reload
	ldr	x30, [sp], #48                  // 8-byte Folded Reload
	ret
.Lfunc_end102:
	.size	_pr, .Lfunc_end102-_pr
	.cfi_endproc
                                        // -- End function
	.globl	_wr                             // -- Begin function _wr
	.p2align	4
	.type	_wr,@function
_wr:                                    // @_wr
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-32]!                // 8-byte Folded Spill
	stp	x20, x19, [sp, #16]             // 16-byte Folded Spill
	.cfi_def_cfa_offset 32
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w30, -32
	ldp	w20, w8, [x0, #8]
	bfi	x20, x8, #32, #32
	b	.LBB103_3
.LBB103_1:                              // %"$6"
                                        //   in Loop: Header=BB103_3 Depth=1
	mov	x0, x19
	bl	evList
	mov	x19, x0
.LBB103_2:                              // %"$3"
                                        //   in Loop: Header=BB103_3 Depth=1
	lsr	x0, x19, #4
                                        // kill: def $w0 killed $w0 killed $x0
	bl	_putUART1
	tst	x20, #0xf
	b.ne	.LBB103_6
.LBB103_3:                              // %"$2"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w19, w8, [x20]
	bfi	x19, x8, #32, #32
	ldp	w20, w8, [x20, #8]
	bfi	x20, x8, #32, #32
	tst	x19, #0x6
	b.ne	.LBB103_2
// %bb.4:                               // %"$4"
                                        //   in Loop: Header=BB103_3 Depth=1
	tbz	w19, #3, .LBB103_1
// %bb.5:                               // %"$7"
                                        //   in Loop: Header=BB103_3 Depth=1
	ldp	w19, w8, [x19]
	bfi	x19, x8, #32, #32
	b	.LBB103_2
.LBB103_6:                              // %"$9"
	mov	x0, x19
	ldp	x20, x19, [sp, #16]             // 16-byte Folded Reload
	ldr	x30, [sp], #32                  // 8-byte Folded Reload
	ret
.Lfunc_end103:
	.size	_wr, .Lfunc_end103-_wr
	.cfi_endproc
                                        // -- End function
	.globl	_any                            // -- Begin function _any
	.p2align	4
	.type	_any,@function
_any:                                   // @_any
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x30, x19, [sp, #-16]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w19, -8
	.cfi_offset w30, -16
	mov	x19, x0
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w1, w8, [x9]
	bfi	x1, x8, #32, #32
	tst	x1, #0x6
	b.ne	.LBB104_4
// %bb.1:                               // %"$4"
	tbz	w1, #3, .LBB104_3
// %bb.2:                               // %"$7"
	ldp	w1, w8, [x1]
	bfi	x1, x8, #32, #32
	b	.LBB104_4
.LBB104_3:                              // %"$6"
	mov	x0, x1
	bl	evList
	mov	x1, x0
.LBB104_4:                              // %"$3"
	eor	w8, w1, #0x8
	tst	x8, #0xe
	b.ne	.LBB104_12
// %bb.5:                               // %"$9"
	adrp	x8, SymTab+8
	add	x8, x8, :lo12:SymTab+8
	cmp	x1, x8
	b.eq	.LBB104_11
// %bb.6:                               // %"$10"
	ldp	w0, w8, [x1, #-8]
	bfi	x0, x8, #32, #32
	tbz	w0, #3, .LBB104_8
// %bb.7:
	adrp	x1, SymTab+8
	add	x1, x1, :lo12:SymTab+8
	b	.LBB104_11
.LBB104_8:                              // %"$14"
                                        // =>This Inner Loop Header: Depth=1
	tst	x0, #0x6
	b.ne	.LBB104_10
// %bb.9:                               // %"$15"
                                        //   in Loop: Header=BB104_8 Depth=1
	ldp	w0, w8, [x0, #8]
	bfi	x0, x8, #32, #32
	b	.LBB104_8
.LBB104_10:                             // %"$16"
	mov	w1, #1
	mov	w2, #32
	mov	w3, #1
	bl	parse
	mov	x1, x0
.LBB104_11:                             // %"$2"
	mov	x0, x1
	ldp	x30, x19, [sp], #16             // 16-byte Folded Reload
	ret
.LBB104_12:                             // %"$8"
	mov	x0, x19
	bl	symErr
.Lfunc_end104:
	.size	_any, .Lfunc_end104-_any
	.cfi_endproc
                                        // -- End function
	.globl	_sym                            // -- Begin function _sym
	.p2align	4
	.type	_sym,@function
_sym:                                   // @_sym
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-32]!           // 16-byte Folded Spill
	str	x19, [sp, #16]                  // 8-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 32
	.cfi_offset w19, -16
	.cfi_offset w30, -24
	.cfi_offset w29, -32
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w19, w8, [x9]
	bfi	x19, x8, #32, #32
	tst	x19, #0x6
	b.ne	.LBB105_4
// %bb.1:                               // %"$3"
	tbz	w19, #3, .LBB105_3
// %bb.2:                               // %"$6"
	ldp	w19, w8, [x19]
	bfi	x19, x8, #32, #32
	b	.LBB105_4
.LBB105_3:                              // %"$5"
	mov	x0, x19
	bl	evList
	mov	x19, x0
.LBB105_4:                              // %"$2"
	mov	x8, sp
	sub	x0, x8, #48                     // =48
	mov	sp, x0
	mov	w9, #4
	stp	w9, wzr, [x8, #-48]
	mov	w9, #2
	stp	w9, wzr, [x8, #-32]
	bl	begString
	mov	x0, x19
	bl	print
	bl	endString
	mov	sp, x29
	ldr	x19, [sp, #16]                  // 8-byte Folded Reload
	ldp	x29, x30, [sp], #32             // 16-byte Folded Reload
	ret
.Lfunc_end105:
	.size	_sym, .Lfunc_end105-_sym
	.cfi_endproc
                                        // -- End function
	.globl	_str                            // -- Begin function _str
	.p2align	4
	.type	_str,@function
_str:                                   // @_str
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-48]!           // 16-byte Folded Spill
	str	x21, [sp, #16]                  // 8-byte Folded Spill
	stp	x20, x19, [sp, #32]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 48
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -32
	.cfi_offset w30, -40
	.cfi_offset w29, -48
	mov	x20, x0
	ldp	w21, w8, [x0, #8]
	bfi	x21, x8, #32, #32
	ldp	w19, w8, [x21]
	bfi	x19, x8, #32, #32
	tst	x19, #0x6
	b.ne	.LBB106_4
// %bb.1:                               // %"$3"
	tbz	w19, #3, .LBB106_3
// %bb.2:                               // %"$6"
	ldp	w19, w8, [x19]
	bfi	x19, x8, #32, #32
	b	.LBB106_4
.LBB106_3:                              // %"$5"
	mov	x0, x19
	bl	evList
	mov	x19, x0
.LBB106_4:                              // %"$2"
	adrp	x8, SymTab+8
	add	x8, x8, :lo12:SymTab+8
	cmp	x19, x8
	b.eq	.LBB106_20
// %bb.5:                               // %"$8"
	tst	x19, #0x6
	b.ne	.LBB106_21
// %bb.6:                               // %"$10"
	tst	x19, #0xf
	b.eq	.LBB106_9
// %bb.7:                               // %"$12"
	ldp	w19, w8, [x19, #-8]
	bfi	x19, x8, #32, #32
	tbz	w19, #3, .LBB106_13
// %bb.8:
	adrp	x19, SymTab+8
	add	x19, x19, :lo12:SymTab+8
	b	.LBB106_20
.LBB106_9:                              // %"$13"
	mov	x8, sp
	sub	x0, x8, #48                     // =48
	mov	sp, x0
	mov	w9, #4
	stp	w9, wzr, [x8, #-48]
	mov	w9, #2
	stp	w9, wzr, [x8, #-32]
	bl	begString
.LBB106_10:                             // %"$14"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w0, w8, [x19]
	bfi	x0, x8, #32, #32
	ldp	w19, w8, [x19, #8]
	bfi	x19, x8, #32, #32
	bl	print
	tst	x19, #0xf
	b.ne	.LBB106_12
// %bb.11:                              // %"$15"
                                        //   in Loop: Header=BB106_10 Depth=1
	bl	space
	b	.LBB106_10
.LBB106_12:                             // %"$16"
	bl	endString
	mov	x19, x0
	b	.LBB106_20
.LBB106_13:                             // %"$17"
	ldp	w0, w8, [x21, #8]
	bfi	x0, x8, #32, #32
	tst	x0, #0xf
	b.eq	.LBB106_17
// %bb.14:                              // %"$21"
	tst	x19, #0x6
	b.ne	.LBB106_16
.LBB106_15:                             // %"$22"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w19, w8, [x19, #8]
	bfi	x19, x8, #32, #32
	tst	x19, #0x6
	b.eq	.LBB106_15
.LBB106_16:                             // %"$23"
	mov	x0, x19
	mov	w1, wzr
	mov	w2, #23818
	mov	x3, xzr
	bl	parse
	mov	x19, x0
	b	.LBB106_20
.LBB106_17:                             // %"$19"
	adrp	x20, env
	ldr	x8, [x20, :lo12:env]
	mov	x9, sp
	sub	x21, x9, #16                    // =16
	mov	sp, x21
	lsr	x10, x19, #32
	lsr	x11, x8, #32
	stp	w19, w10, [x9, #-16]
	stp	w8, w11, [x9, #-8]
	str	x21, [x20, :lo12:env]
	tst	x19, #0x6
	b.ne	.LBB106_19
.LBB106_18:                             // %"$25"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w19, w8, [x19, #8]
	bfi	x19, x8, #32, #32
	tst	x19, #0x6
	b.eq	.LBB106_18
.LBB106_19:                             // %"$26"
	bl	evSym
	mov	x3, x0
	ldr	x8, [x20, :lo12:env]
	mov	x9, sp
	sub	x10, x9, #16                    // =16
	mov	sp, x10
	lsr	x11, x0, #32
	lsr	x12, x8, #32
	stp	w3, w11, [x9, #-16]
	stp	w8, w12, [x9, #-8]
	str	x10, [x20, :lo12:env]
	mov	x0, x19
	mov	w1, wzr
	mov	x2, xzr
	bl	parse
	mov	x19, x0
	ldp	w9, w8, [x21, #8]
	bfi	x9, x8, #32, #32
	str	x9, [x20, :lo12:env]
.LBB106_20:                             // %"$7"
	mov	x0, x19
	mov	sp, x29
	ldp	x20, x19, [sp, #32]             // 16-byte Folded Reload
	ldr	x21, [sp, #16]                  // 8-byte Folded Reload
	ldp	x29, x30, [sp], #48             // 16-byte Folded Reload
	ret
.LBB106_21:                             // %"$11"
	mov	x0, x20
	mov	x1, x19
	bl	argErr
.Lfunc_end106:
	.size	_str, .Lfunc_end106-_str
	.cfi_endproc
                                        // -- End function
	.globl	_apply                          // -- Begin function _apply
	.p2align	4
	.type	_apply,@function
_apply:                                 // @_apply
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-96]!           // 16-byte Folded Spill
	str	x27, [sp, #16]                  // 8-byte Folded Spill
	stp	x26, x25, [sp, #32]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #48]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #64]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #80]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w0, w8, [x9]
	bfi	x0, x8, #32, #32
	ldp	w24, w8, [x9, #8]
	bfi	x24, x8, #32, #32
	tst	x0, #0x6
	b.ne	.LBB107_4
// %bb.1:                               // %"$3"
	tbz	w0, #3, .LBB107_3
// %bb.2:                               // %"$6"
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB107_4
.LBB107_3:                              // %"$5"
	bl	evList
.LBB107_4:                              // %"$2"
	mov	x8, sp
	sub	x19, x8, #48                    // =48
	mov	sp, x19
	adrp	x21, SymTab+8
	add	x21, x21, :lo12:SymTab+8
	lsr	x22, x21, #32
	stp	w21, w22, [x8, #-40]
	mov	w9, #2
	stp	w9, wzr, [x8, #-32]
	mov	x9, x19
	str	w0, [x9, #24]!
	lsr	x10, x0, #32
	stur	w10, [x8, #-20]
	adrp	x23, env
	ldr	x10, [x23, :lo12:env]
	lsr	x11, x10, #32
	stp	w10, w11, [x8, #-16]
	str	x9, [x23, :lo12:env]
	lsr	x10, x9, #32
	stp	w9, w10, [x8, #-48]
	ldp	w20, w8, [x24]
	bfi	x20, x8, #32, #32
	tst	x20, #0x6
	b.ne	.LBB107_8
// %bb.5:                               // %"$8"
	tbz	w20, #3, .LBB107_7
// %bb.6:                               // %"$11"
	ldp	w20, w8, [x20]
	bfi	x20, x8, #32, #32
	b	.LBB107_8
.LBB107_7:                              // %"$10"
	mov	x0, x20
	bl	evList
	mov	x20, x0
.LBB107_8:                              // %"$7"
	adrp	x26, env
	add	x26, x26, :lo12:env
	ldr	x8, [x26]
	mov	x12, sp
	sub	x10, x12, #16                   // =16
	mov	sp, x10
	lsr	x13, x20, #32
	mov	x11, x10
	mov	w27, #2
	mov	x9, x26
	stur	w13, [x12, #-12]
	mov	x25, x19
	str	w20, [x11], #8
	b	.LBB107_11
.LBB107_9:                              // %"$18"
                                        //   in Loop: Header=BB107_11 Depth=1
	bl	evList
.LBB107_10:                             // %"$15"
                                        //   in Loop: Header=BB107_11 Depth=1
	mov	x10, sp
	sub	x9, x10, #48                    // =48
	mov	sp, x9
	stp	w21, w22, [x10, #-40]
	stp	w27, wzr, [x10, #-32]
	mov	x8, x9
	str	w0, [x8, #24]!
	lsr	x11, x0, #32
	stur	w11, [x10, #-20]
	lsr	x11, x9, #32
	stp	w9, w11, [x25, #8]
	ldr	x12, [x26]
	lsr	x13, x12, #32
	mov	x11, x26
	stp	w12, w13, [x10, #-16]
	mov	x10, x8
	mov	x25, x9
.LBB107_11:                             // %"$12"
                                        // =>This Inner Loop Header: Depth=1
	lsr	x12, x8, #32
	stp	w8, w12, [x11]
	lsr	x8, x10, #32
	stp	w10, w8, [x9]
	ldp	w24, w8, [x24, #8]
	bfi	x24, x8, #32, #32
	tst	x24, #0xf
	b.ne	.LBB107_15
// %bb.12:                              // %"$13"
                                        //   in Loop: Header=BB107_11 Depth=1
	ldp	w0, w8, [x24]
	bfi	x0, x8, #32, #32
	tst	x0, #0x6
	b.ne	.LBB107_10
// %bb.13:                              // %"$16"
                                        //   in Loop: Header=BB107_11 Depth=1
	tbz	w0, #3, .LBB107_9
// %bb.14:                              // %"$19"
                                        //   in Loop: Header=BB107_11 Depth=1
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB107_10
.LBB107_15:
	mov	w8, #2
	tst	x20, #0xf
	b.ne	.LBB107_17
.LBB107_16:                             // %"$21"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w9, w10, [x20]
	ldp	w20, w11, [x20, #8]
	bfi	x20, x11, #32, #32
	mov	x11, sp
	sub	x12, x11, #48                   // =48
	mov	sp, x12
	stp	w21, w22, [x11, #-40]
	stp	w8, wzr, [x11, #-32]
	stur	w10, [x11, #-20]
	mov	x10, x12
	str	w9, [x10, #24]!
	lsr	x9, x12, #32
	stp	w12, w9, [x25, #8]
	ldr	x9, [x23, :lo12:env]
	lsr	x13, x9, #32
	stp	w9, w13, [x11, #-16]
	str	x10, [x23, :lo12:env]
	lsr	x9, x10, #32
	mov	x25, x12
	stp	w10, w9, [x11, #-48]
	tst	x20, #0xf
	b.eq	.LBB107_16
.LBB107_17:                             // %"$22"
	mov	x0, x19
	bl	evList
	ldp	w9, w8, [x19, #32]
	bfi	x9, x8, #32, #32
	str	x9, [x23, :lo12:env]
	mov	sp, x29
	ldp	x20, x19, [sp, #80]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #64]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #48]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #32]             // 16-byte Folded Reload
	ldr	x27, [sp, #16]                  // 8-byte Folded Reload
	ldp	x29, x30, [sp], #96             // 16-byte Folded Reload
	ret
.Lfunc_end107:
	.size	_apply, .Lfunc_end107-_apply
	.cfi_endproc
                                        // -- End function
	.globl	_pass                           // -- Begin function _pass
	.p2align	4
	.type	_pass,@function
_pass:                                  // @_pass
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-80]!           // 16-byte Folded Spill
	str	x25, [sp, #16]                  // 8-byte Folded Spill
	stp	x24, x23, [sp, #32]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #48]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #64]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 80
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -64
	.cfi_offset w30, -72
	.cfi_offset w29, -80
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w0, w8, [x9]
	bfi	x0, x8, #32, #32
	ldp	w23, w8, [x9, #8]
	bfi	x23, x8, #32, #32
	tst	x0, #0x6
	b.ne	.LBB108_4
// %bb.1:                               // %"$3"
	tbz	w0, #3, .LBB108_3
// %bb.2:                               // %"$6"
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB108_4
.LBB108_3:                              // %"$5"
	bl	evList
.LBB108_4:                              // %"$2"
	mov	x9, sp
	sub	x19, x9, #48                    // =48
	mov	sp, x19
	adrp	x20, SymTab+8
	add	x20, x20, :lo12:SymTab+8
	mov	w25, #2
	stp	w25, wzr, [x9, #-32]
	lsr	x10, x0, #32
	mov	x8, x19
	adrp	x21, env
	lsr	x22, x20, #32
	stp	w20, w22, [x9, #-40]
	mov	x24, x19
	stur	w10, [x9, #-20]
	str	w0, [x8, #24]!
	b	.LBB108_7
.LBB108_5:                              // %"$13"
                                        //   in Loop: Header=BB108_7 Depth=1
	bl	evList
.LBB108_6:                              // %"$10"
                                        //   in Loop: Header=BB108_7 Depth=1
	mov	x9, sp
	sub	x10, x9, #48                    // =48
	mov	sp, x10
	stp	w20, w22, [x9, #-40]
	stp	w25, wzr, [x9, #-32]
	mov	x8, x10
	str	w0, [x8, #24]!
	lsr	x11, x0, #32
	stur	w11, [x9, #-20]
	lsr	x9, x10, #32
	stp	w10, w9, [x24, #8]
	mov	x24, x10
.LBB108_7:                              // %"$7"
                                        // =>This Inner Loop Header: Depth=1
	ldr	x9, [x21, :lo12:env]
	lsr	x10, x8, #32
	lsr	x11, x9, #32
	stp	w9, w11, [x8, #8]
	str	x8, [x21, :lo12:env]
	stp	w8, w10, [x24]
	tst	x23, #0xf
	b.ne	.LBB108_11
// %bb.8:                               // %"$8"
                                        //   in Loop: Header=BB108_7 Depth=1
	ldp	w0, w8, [x23]
	bfi	x0, x8, #32, #32
	ldp	w23, w8, [x23, #8]
	bfi	x23, x8, #32, #32
	tst	x0, #0x6
	b.ne	.LBB108_6
// %bb.9:                               // %"$11"
                                        //   in Loop: Header=BB108_7 Depth=1
	tbz	w0, #3, .LBB108_5
// %bb.10:                              // %"$14"
                                        //   in Loop: Header=BB108_7 Depth=1
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB108_6
.LBB108_11:                             // %"$15.preheader"
	mov	w8, #2
	adrp	x9, env+96
	add	x9, x9, :lo12:env+96
.LBB108_12:                             // %"$15"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w9, w10, [x9]
	bfi	x9, x10, #32, #32
	tst	x9, #0xf
	b.ne	.LBB108_14
// %bb.13:                              // %"$16"
                                        //   in Loop: Header=BB108_12 Depth=1
	ldp	w10, w11, [x9, #8]
	mov	x12, sp
	sub	x13, x12, #48                   // =48
	mov	sp, x13
	stp	w20, w22, [x12, #-40]
	stp	w8, wzr, [x12, #-32]
	stur	w11, [x12, #-20]
	mov	x11, x13
	str	w10, [x11, #24]!
	lsr	x10, x13, #32
	stp	w13, w10, [x24, #8]
	ldr	x10, [x21, :lo12:env]
	lsr	x14, x10, #32
	stp	w10, w14, [x12, #-16]
	str	x11, [x21, :lo12:env]
	lsr	x10, x11, #32
	mov	x24, x13
	stp	w11, w10, [x12, #-48]
	b	.LBB108_12
.LBB108_14:                             // %"$17"
	mov	x0, x19
	bl	evList
	ldp	w9, w8, [x19, #32]
	bfi	x9, x8, #32, #32
	str	x9, [x21, :lo12:env]
	mov	sp, x29
	ldp	x20, x19, [sp, #64]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #48]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #32]             // 16-byte Folded Reload
	ldr	x25, [sp, #16]                  // 8-byte Folded Reload
	ldp	x29, x30, [sp], #80             // 16-byte Folded Reload
	ret
.Lfunc_end108:
	.size	_pass, .Lfunc_end108-_pass
	.cfi_endproc
                                        // -- End function
	.globl	_maps                           // -- Begin function _maps
	.p2align	4
	.type	_maps,@function
_maps:                                  // @_maps
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-96]!           // 16-byte Folded Spill
	stp	x28, x27, [sp, #16]             // 16-byte Folded Spill
	stp	x26, x25, [sp, #32]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #48]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #64]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #80]             // 16-byte Folded Spill
	mov	x29, sp
	sub	sp, sp, #16                     // =16
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	ldp	w9, w8, [x0, #8]
	stur	x0, [x29, #-16]                 // 8-byte Folded Spill
	bfi	x9, x8, #32, #32
	ldp	w0, w8, [x9]
	bfi	x0, x8, #32, #32
	ldp	w25, w8, [x9, #8]
	bfi	x25, x8, #32, #32
	tst	x0, #0x6
	b.ne	.LBB109_4
// %bb.1:                               // %"$3"
	tbz	w0, #3, .LBB109_3
// %bb.2:                               // %"$6"
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB109_4
.LBB109_3:                              // %"$5"
	bl	evList
.LBB109_4:                              // %"$2"
	mov	x8, sp
	sub	x19, x8, #48                    // =48
	mov	sp, x19
	adrp	x26, SymTab+8
	add	x26, x26, :lo12:SymTab+8
	mov	w9, #2
	stp	w9, wzr, [x8, #-32]
	lsr	x9, x0, #32
	mov	x11, x19
	lsr	x27, x26, #32
	stp	w26, w27, [x8, #-40]
	stur	w9, [x8, #-20]
	str	w0, [x11, #24]!
	sub	x24, sp, #16                    // =16
	mov	sp, x24
	adrp	x23, env
	ldr	x9, [x23, :lo12:env]
	lsr	x10, x9, #32
	stp	w9, w10, [x8, #-16]
	str	x11, [x23, :lo12:env]
	lsr	x9, x11, #32
	stp	w11, w9, [x8, #-48]
	stur	x11, [x29, #-8]                 // 8-byte Folded Spill
	ldp	w21, w8, [x25]
	bfi	x21, x8, #32, #32
	tst	x21, #0x6
	b.ne	.LBB109_8
// %bb.5:                               // %"$8"
	tbz	w21, #3, .LBB109_7
// %bb.6:                               // %"$11"
	ldp	w21, w8, [x21]
	bfi	x21, x8, #32, #32
	b	.LBB109_8
.LBB109_7:                              // %"$10"
	mov	x0, x21
	bl	evList
	mov	x21, x0
.LBB109_8:                              // %"$7"
	eor	w8, w21, #0x8
	tst	x8, #0xe
	b.ne	.LBB109_30
// %bb.9:                               // %"$13"
	ldr	x8, [x23, :lo12:env]
	mov	x9, sp
	sub	x10, x9, #16                    // =16
	mov	sp, x10
	lsr	x11, x21, #32
	lsr	x12, x8, #32
	stp	w21, w11, [x9, #-16]
	stp	w8, w12, [x9, #-8]
	str	x10, [x23, :lo12:env]
	mov	w28, #2
	mov	x9, x19
	mov	x8, x24
	mov	x0, x21
	stp	w21, w11, [x24]
.LBB109_10:                             // %"$14"
                                        // =>This Inner Loop Header: Depth=1
	mov	x10, sp
	sub	x20, x10, #48                   // =48
	mov	sp, x20
	stp	w26, w27, [x10, #-40]
	stp	w28, wzr, [x10, #-32]
	lsr	x11, x0, #32
	stur	w11, [x10, #-20]
	mov	x11, x20
	str	w0, [x11, #24]!
	lsr	x12, x20, #32
	stp	w20, w12, [x9, #8]
	ldr	x9, [x23, :lo12:env]
	lsr	x12, x9, #32
	stp	w9, w12, [x10, #-16]
	str	x11, [x23, :lo12:env]
	lsr	x9, x11, #32
	stp	w11, w9, [x10, #-48]
	ldp	w25, w9, [x25, #8]
	bfi	x25, x9, #32, #32
	tst	x25, #0xf
	b.ne	.LBB109_17
// %bb.11:                              // %"$15"
                                        //   in Loop: Header=BB109_10 Depth=1
	sub	x22, sp, #16                    // =16
	mov	sp, x22
	lsr	x9, x22, #32
	stp	w22, w9, [x8, #8]
	ldp	w0, w8, [x25]
	bfi	x0, x8, #32, #32
	tst	x0, #0x6
	b.ne	.LBB109_15
// %bb.12:                              // %"$18"
                                        //   in Loop: Header=BB109_10 Depth=1
	tbz	w0, #3, .LBB109_14
// %bb.13:                              // %"$21"
                                        //   in Loop: Header=BB109_10 Depth=1
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB109_15
.LBB109_14:                             // %"$20"
                                        //   in Loop: Header=BB109_10 Depth=1
	bl	evList
.LBB109_15:                             // %"$17"
                                        //   in Loop: Header=BB109_10 Depth=1
	ldr	x8, [x23, :lo12:env]
	mov	x9, sp
	sub	x10, x9, #16                    // =16
	mov	sp, x10
	lsr	x11, x0, #32
	lsr	x12, x8, #32
	stp	w0, w11, [x9, #-16]
	stp	w8, w12, [x9, #-8]
	str	x10, [x23, :lo12:env]
	tst	x0, #0xf
	mov	x9, x20
	mov	x8, x22
	stp	w0, w11, [x22]
	b.ne	.LBB109_10
// %bb.16:                              // %"$22"
                                        //   in Loop: Header=BB109_10 Depth=1
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	mov	x9, x20
	mov	x8, x22
	b	.LBB109_10
.LBB109_17:                             // %"$16"
	ldp	w8, w9, [x21, #-8]
	bfi	x8, x9, #32, #32
	tbz	w8, #3, .LBB109_19
// %bb.18:                              // %"$24"
	ldur	x0, [x29, #-16]                 // 8-byte Folded Reload
	mov	x1, x21
	bl	dbFetch
	ldp	w9, w8, [x21, #-8]
	bfi	x9, x8, #32, #32
	and	x8, x9, #0xfffffffffffffff7
.LBB109_19:                             // %"$25"
	ldp	w9, w10, [x19, #8]
	bfi	x9, x10, #32, #32
	tst	x8, #0xf
	mov	x10, x8
	b.ne	.LBB109_21
// %bb.20:                              // %"$26"
	ldp	w10, w11, [x8]
	bfi	x10, x11, #32, #32
.LBB109_21:                             // %"$28"
	lsr	x11, x10, #32
	lsr	x12, x8, #32
	stp	w10, w11, [x9, #24]
	tst	w8, #0xf
	stp	w8, w12, [x24]
	b.eq	.LBB109_28
// %bb.22:
	adrp	x0, SymTab+8
	add	x0, x0, :lo12:SymTab+8
	b	.LBB109_29
.LBB109_23:                             // %"$32"
                                        //   in Loop: Header=BB109_28 Depth=1
	ldp	w8, w10, [x19, #8]
	bfi	x8, x10, #32, #32
	ldp	w10, w11, [x9]
	bfi	x10, x11, #32, #32
	mov	x9, x24
.LBB109_24:                             // %"$34"
                                        //   Parent Loop BB109_28 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	lsr	x11, x10, #32
	stp	w10, w11, [x8, #24]
	ldp	w8, w10, [x8, #8]
	bfi	x8, x10, #32, #32
	tst	x8, #0xf
	b.ne	.LBB109_28
// %bb.25:                              // %"$35"
                                        //   in Loop: Header=BB109_24 Depth=2
	ldp	w9, w10, [x9, #8]
	bfi	x9, x10, #32, #32
	ldp	w10, w11, [x9]
	bfi	x10, x11, #32, #32
	tst	x10, #0xf
	b.ne	.LBB109_24
// %bb.26:                              // %"$38"
                                        //   in Loop: Header=BB109_24 Depth=2
	ldp	w10, w11, [x10, #8]
	stp	w10, w11, [x9]
	bfi	x10, x11, #32, #32
	tst	x10, #0xf
	b.ne	.LBB109_24
// %bb.27:                              // %"$40"
                                        //   in Loop: Header=BB109_24 Depth=2
	ldp	w10, w11, [x10]
	bfi	x10, x11, #32, #32
	b	.LBB109_24
.LBB109_28:                             // %"$31"
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB109_24 Depth 2
	mov	x0, x19
	bl	evList
	ldp	w9, w8, [x24]
	bfi	x9, x8, #32, #32
	ldp	w9, w8, [x9, #8]
	stp	w9, w8, [x24]
	bfi	x9, x8, #32, #32
	tst	x9, #0xf
	b.eq	.LBB109_23
.LBB109_29:                             // %"$30"
	ldur	x9, [x29, #-8]                  // 8-byte Folded Reload
	ldp	w9, w8, [x9, #8]
	bfi	x9, x8, #32, #32
	str	x9, [x23, :lo12:env]
	mov	sp, x29
	ldp	x20, x19, [sp, #80]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #64]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #48]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #32]             // 16-byte Folded Reload
	ldp	x28, x27, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #96             // 16-byte Folded Reload
	ret
.LBB109_30:                             // %"$12"
	ldur	x0, [x29, #-16]                 // 8-byte Folded Reload
	mov	x1, x21
	bl	symErr
.Lfunc_end109:
	.size	_maps, .Lfunc_end109-_maps
	.cfi_endproc
                                        // -- End function
	.globl	_map                            // -- Begin function _map
	.p2align	4
	.type	_map,@function
_map:                                   // @_map
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-80]!           // 16-byte Folded Spill
	stp	x26, x25, [sp, #16]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #32]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #48]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #64]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 80
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w30, -72
	.cfi_offset w29, -80
	ldp	w20, w8, [x0, #8]
	bfi	x20, x8, #32, #32
	ldp	w0, w8, [x20]
	bfi	x0, x8, #32, #32
	tst	x0, #0x6
	b.ne	.LBB110_4
// %bb.1:                               // %"$3"
	tbz	w0, #3, .LBB110_3
// %bb.2:                               // %"$6"
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB110_4
.LBB110_3:                              // %"$5"
	bl	evList
.LBB110_4:                              // %"$2"
	mov	x9, sp
	sub	x19, x9, #48                    // =48
	mov	sp, x19
	adrp	x23, SymTab+8
	add	x23, x23, :lo12:SymTab+8
	mov	w24, #2
	mov	x21, x19
	stp	w24, wzr, [x9, #-32]
	lsr	x25, x23, #32
	stp	w23, w25, [x9, #-40]
	str	w0, [x21, #24]!
	lsr	x10, x0, #32
	adrp	x22, env
	mov	x8, x21
	mov	x26, x19
	stur	w10, [x9, #-20]
	b	.LBB110_7
.LBB110_5:                              // %"$13"
                                        //   in Loop: Header=BB110_7 Depth=1
	bl	evList
.LBB110_6:                              // %"$10"
                                        //   in Loop: Header=BB110_7 Depth=1
	mov	x9, sp
	sub	x10, x9, #48                    // =48
	mov	sp, x10
	stp	w23, w25, [x9, #-40]
	stp	w24, wzr, [x9, #-32]
	mov	x8, x10
	str	w0, [x8, #24]!
	lsr	x11, x0, #32
	stur	w11, [x9, #-20]
	lsr	x9, x10, #32
	stp	w10, w9, [x26, #8]
	mov	x26, x10
.LBB110_7:                              // %"$7"
                                        // =>This Inner Loop Header: Depth=1
	ldr	x9, [x22, :lo12:env]
	lsr	x10, x9, #32
	stp	w9, w10, [x8, #8]
	str	x8, [x22, :lo12:env]
	lsr	x9, x8, #32
	stp	w8, w9, [x26]
	ldp	w20, w8, [x20, #8]
	bfi	x20, x8, #32, #32
	tst	x20, #0xf
	b.ne	.LBB110_11
// %bb.8:                               // %"$8"
                                        //   in Loop: Header=BB110_7 Depth=1
	ldp	w0, w8, [x20]
	bfi	x0, x8, #32, #32
	tst	x0, #0x6
	b.ne	.LBB110_6
// %bb.9:                               // %"$11"
                                        //   in Loop: Header=BB110_7 Depth=1
	tbz	w0, #3, .LBB110_5
// %bb.10:                              // %"$14"
                                        //   in Loop: Header=BB110_7 Depth=1
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB110_6
.LBB110_11:                             // %"$15.preheader"
	adrp	x0, SymTab+8
	add	x0, x0, :lo12:SymTab+8
.LBB110_12:                             // %"$15"
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB110_15 Depth 2
	ldp	w20, w8, [x19, #8]
	bfi	x20, x8, #32, #32
	ldrb	w8, [x20, #24]
	tst	w8, #0xf
	b.ne	.LBB110_17
// %bb.13:                              // %"$16"
                                        //   in Loop: Header=BB110_12 Depth=1
	mov	x0, x19
	bl	evList
	b	.LBB110_15
.LBB110_14:                             // %"$20"
                                        //   in Loop: Header=BB110_15 Depth=2
	ldp	w20, w8, [x20, #8]
	bfi	x20, x8, #32, #32
	tst	x20, #0xf
	b.ne	.LBB110_12
.LBB110_15:                             // %"$18"
                                        //   Parent Loop BB110_12 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	w8, w9, [x20, #24]
	bfi	x8, x9, #32, #32
	tst	x8, #0xf
	b.ne	.LBB110_14
// %bb.16:                              // %"$19"
                                        //   in Loop: Header=BB110_15 Depth=2
	ldp	w9, w8, [x8, #8]
	stp	w9, w8, [x20, #24]
	b	.LBB110_14
.LBB110_17:                             // %"$17"
	ldp	w9, w8, [x21, #8]
	bfi	x9, x8, #32, #32
	str	x9, [x22, :lo12:env]
	mov	sp, x29
	ldp	x20, x19, [sp, #64]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #48]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #32]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #80             // 16-byte Folded Reload
	ret
.Lfunc_end110:
	.size	_map, .Lfunc_end110-_map
	.cfi_endproc
                                        // -- End function
	.globl	_mapc                           // -- Begin function _mapc
	.p2align	4
	.type	_mapc,@function
_mapc:                                  // @_mapc
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-96]!           // 16-byte Folded Spill
	stp	x28, x27, [sp, #16]             // 16-byte Folded Spill
	stp	x26, x25, [sp, #32]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #48]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #64]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #80]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w0, w8, [x9]
	bfi	x0, x8, #32, #32
	ldp	w23, w8, [x9, #8]
	bfi	x23, x8, #32, #32
	tst	x0, #0x6
	b.ne	.LBB111_4
// %bb.1:                               // %"$3"
	tbz	w0, #3, .LBB111_3
// %bb.2:                               // %"$6"
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB111_4
.LBB111_3:                              // %"$5"
	bl	evList
.LBB111_4:                              // %"$2"
	mov	x8, sp
	sub	x19, x8, #48                    // =48
	mov	sp, x19
	adrp	x24, SymTab+8
	add	x24, x24, :lo12:SymTab+8
	mov	w25, #2
	stp	w25, wzr, [x8, #-32]
	lsr	x9, x0, #32
	mov	x20, x19
	lsr	x26, x24, #32
	stp	w24, w26, [x8, #-40]
	stur	w9, [x8, #-20]
	str	w0, [x20, #24]!
	sub	x22, sp, #16                    // =16
	mov	sp, x22
	adrp	x21, env
	ldr	x9, [x21, :lo12:env]
	str	x20, [x21, :lo12:env]
	lsr	x10, x20, #32
	lsr	x11, x9, #32
	stp	w9, w11, [x8, #-16]
	stp	w20, w10, [x8, #-48]
	mov	x28, x19
	mov	x27, x22
.LBB111_5:                              // %"$7"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w0, w8, [x23]
	bfi	x0, x8, #32, #32
	tst	x0, #0x6
	b.ne	.LBB111_9
// %bb.6:                               // %"$9"
                                        //   in Loop: Header=BB111_5 Depth=1
	tbz	w0, #3, .LBB111_8
// %bb.7:                               // %"$12"
                                        //   in Loop: Header=BB111_5 Depth=1
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB111_9
.LBB111_8:                              // %"$11"
                                        //   in Loop: Header=BB111_5 Depth=1
	bl	evList
.LBB111_9:                              // %"$8"
                                        //   in Loop: Header=BB111_5 Depth=1
	ldr	x8, [x21, :lo12:env]
	mov	x9, sp
	sub	x10, x9, #16                    // =16
	mov	sp, x10
	lsr	x11, x0, #32
	lsr	x12, x8, #32
	stp	w0, w11, [x9, #-16]
	stp	w8, w12, [x9, #-8]
	str	x10, [x21, :lo12:env]
	tst	x0, #0xf
	stp	w0, w11, [x27]
	b.ne	.LBB111_11
// %bb.10:                              // %"$13"
                                        //   in Loop: Header=BB111_5 Depth=1
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
.LBB111_11:                             // %"$14"
                                        //   in Loop: Header=BB111_5 Depth=1
	mov	x9, sp
	sub	x8, x9, #48                     // =48
	mov	sp, x8
	stp	w24, w26, [x9, #-40]
	stp	w25, wzr, [x9, #-32]
	lsr	x10, x0, #32
	stur	w10, [x9, #-20]
	mov	x10, x8
	str	w0, [x10, #24]!
	lsr	x11, x8, #32
	stp	w8, w11, [x28, #8]
	ldr	x11, [x21, :lo12:env]
	lsr	x12, x11, #32
	stp	w11, w12, [x9, #-16]
	str	x10, [x21, :lo12:env]
	lsr	x11, x10, #32
	stp	w10, w11, [x9, #-48]
	ldp	w23, w9, [x23, #8]
	bfi	x23, x9, #32, #32
	tst	x23, #0xf
	b.ne	.LBB111_13
// %bb.12:                              // %"$15"
                                        //   in Loop: Header=BB111_5 Depth=1
	sub	x9, sp, #16                     // =16
	mov	sp, x9
	lsr	x10, x9, #32
	stp	w9, w10, [x27, #8]
	mov	x28, x8
	mov	x27, x9
	b	.LBB111_5
.LBB111_13:                             // %"$16"
	ldrb	w8, [x22]
	tst	w8, #0xf
	b.eq	.LBB111_20
// %bb.14:
	adrp	x0, SymTab+8
	add	x0, x0, :lo12:SymTab+8
	b	.LBB111_21
.LBB111_15:                             // %"$20"
                                        //   in Loop: Header=BB111_20 Depth=1
	ldp	w8, w10, [x19, #8]
	bfi	x8, x10, #32, #32
	ldp	w10, w11, [x9]
	bfi	x10, x11, #32, #32
	mov	x9, x22
.LBB111_16:                             // %"$22"
                                        //   Parent Loop BB111_20 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	lsr	x11, x10, #32
	stp	w10, w11, [x8, #24]
	ldp	w8, w10, [x8, #8]
	bfi	x8, x10, #32, #32
	tst	x8, #0xf
	b.ne	.LBB111_20
// %bb.17:                              // %"$23"
                                        //   in Loop: Header=BB111_16 Depth=2
	ldp	w9, w10, [x9, #8]
	bfi	x9, x10, #32, #32
	ldp	w10, w11, [x9]
	bfi	x10, x11, #32, #32
	tst	x10, #0xf
	b.ne	.LBB111_16
// %bb.18:                              // %"$26"
                                        //   in Loop: Header=BB111_16 Depth=2
	ldp	w10, w11, [x10, #8]
	stp	w10, w11, [x9]
	bfi	x10, x11, #32, #32
	tst	x10, #0xf
	b.ne	.LBB111_16
// %bb.19:                              // %"$28"
                                        //   in Loop: Header=BB111_16 Depth=2
	ldp	w10, w11, [x10]
	bfi	x10, x11, #32, #32
	b	.LBB111_16
.LBB111_20:                             // %"$19"
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB111_16 Depth 2
	mov	x0, x19
	bl	evList
	ldp	w9, w8, [x22]
	bfi	x9, x8, #32, #32
	ldp	w9, w8, [x9, #8]
	stp	w9, w8, [x22]
	bfi	x9, x8, #32, #32
	tst	x9, #0xf
	b.eq	.LBB111_15
.LBB111_21:                             // %"$18"
	ldp	w9, w8, [x20, #8]
	bfi	x9, x8, #32, #32
	str	x9, [x21, :lo12:env]
	mov	sp, x29
	ldp	x20, x19, [sp, #80]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #64]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #48]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #32]             // 16-byte Folded Reload
	ldp	x28, x27, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #96             // 16-byte Folded Reload
	ret
.Lfunc_end111:
	.size	_mapc, .Lfunc_end111-_mapc
	.cfi_endproc
                                        // -- End function
	.globl	_maplist                        // -- Begin function _maplist
	.p2align	4
	.type	_maplist,@function
_maplist:                               // @_maplist
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-80]!           // 16-byte Folded Spill
	str	x25, [sp, #16]                  // 8-byte Folded Spill
	stp	x24, x23, [sp, #32]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #48]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #64]             // 16-byte Folded Spill
	mov	x29, sp
	sub	sp, sp, #16                     // =16
	.cfi_def_cfa w29, 80
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -64
	.cfi_offset w30, -72
	.cfi_offset w29, -80
	ldp	w20, w8, [x0, #8]
	bfi	x20, x8, #32, #32
	adrp	x22, env
	adrp	x21, SymTab+8
	add	x21, x21, :lo12:SymTab+8
	ldr	x8, [x22, :lo12:env]
	stp	x21, x8, [x29, #-16]
	sub	x8, x29, #16                    // =16
	str	x8, [x22, :lo12:env]
	ldp	w0, w8, [x20]
	bfi	x0, x8, #32, #32
	tst	x0, #0x6
	b.ne	.LBB112_4
// %bb.1:                               // %"$3"
	tbz	w0, #3, .LBB112_3
// %bb.2:                               // %"$6"
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB112_4
.LBB112_3:                              // %"$5"
	bl	evList
.LBB112_4:                              // %"$2"
	mov	x8, sp
	sub	x19, x8, #48                    // =48
	mov	sp, x19
	lsr	x23, x21, #32
	mov	w24, #2
	stp	w21, w23, [x8, #-40]
	stp	w24, wzr, [x8, #-32]
	lsr	x9, x0, #32
	mov	x25, x19
	stp	w0, w9, [x8, #-24]
	b	.LBB112_7
.LBB112_5:                              // %"$13"
                                        //   in Loop: Header=BB112_7 Depth=1
	bl	evList
.LBB112_6:                              // %"$10"
                                        //   in Loop: Header=BB112_7 Depth=1
	mov	x8, sp
	sub	x9, x8, #48                     // =48
	mov	sp, x9
	stp	w21, w23, [x8, #-40]
	stp	w24, wzr, [x8, #-32]
	lsr	x10, x0, #32
	stp	w0, w10, [x8, #-24]
	lsr	x8, x9, #32
	stp	w9, w8, [x25, #8]
	mov	x25, x9
.LBB112_7:                              // %"$7"
                                        // =>This Inner Loop Header: Depth=1
	add	x8, x25, #24                    // =24
	ldr	x9, [x22, :lo12:env]
	lsr	x10, x9, #32
	stp	w9, w10, [x25, #32]
	str	x8, [x22, :lo12:env]
	lsr	x9, x8, #32
	stp	w8, w9, [x25]
	ldp	w20, w8, [x20, #8]
	bfi	x20, x8, #32, #32
	tst	x20, #0xf
	b.ne	.LBB112_11
// %bb.8:                               // %"$8"
                                        //   in Loop: Header=BB112_7 Depth=1
	ldp	w0, w8, [x20]
	bfi	x0, x8, #32, #32
	tst	x0, #0x6
	b.ne	.LBB112_6
// %bb.9:                               // %"$11"
                                        //   in Loop: Header=BB112_7 Depth=1
	tbz	w0, #3, .LBB112_5
// %bb.10:                              // %"$14"
                                        //   in Loop: Header=BB112_7 Depth=1
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB112_6
.LBB112_11:                             // %"$15.preheader"
	mov	x24, xzr
	adrp	x20, SymTab+8
	add	x20, x20, :lo12:SymTab+8
	mov	x21, x20
	b	.LBB112_13
.LBB112_12:                             //   in Loop: Header=BB112_13 Depth=1
	mov	x24, x0
.LBB112_13:                             // %"$15"
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB112_19 Depth 2
	ldp	w23, w8, [x19, #8]
	bfi	x23, x8, #32, #32
	ldrb	w8, [x23, #24]
	tst	w8, #0xf
	b.ne	.LBB112_21
// %bb.14:                              // %"$16"
                                        //   in Loop: Header=BB112_13 Depth=1
	mov	x0, x19
	bl	evList
	mov	x1, x20
	bl	cons
	cbz	x24, .LBB112_16
// %bb.15:                              // %"$18"
                                        //   in Loop: Header=BB112_13 Depth=1
	add	x8, x24, #8                     // =8
	b	.LBB112_17
.LBB112_16:                             // %"$19"
                                        //   in Loop: Header=BB112_13 Depth=1
	sub	x8, x29, #16                    // =16
	mov	x21, x0
.LBB112_17:                             // %"$20"
                                        //   in Loop: Header=BB112_13 Depth=1
	lsr	x9, x0, #32
	stp	w0, w9, [x8]
	b	.LBB112_19
.LBB112_18:                             // %"$23"
                                        //   in Loop: Header=BB112_19 Depth=2
	ldp	w23, w8, [x23, #8]
	bfi	x23, x8, #32, #32
	tst	x23, #0xf
	b.ne	.LBB112_12
.LBB112_19:                             // %"$21"
                                        //   Parent Loop BB112_13 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	w8, w9, [x23, #24]
	bfi	x8, x9, #32, #32
	tst	x8, #0xf
	b.ne	.LBB112_18
// %bb.20:                              // %"$22"
                                        //   in Loop: Header=BB112_19 Depth=2
	ldp	w9, w8, [x8, #8]
	stp	w9, w8, [x23, #24]
	b	.LBB112_18
.LBB112_21:                             // %"$17"
	ldur	x8, [x29, #-8]
	str	x8, [x22, :lo12:env]
	mov	x0, x21
	mov	sp, x29
	ldp	x20, x19, [sp, #64]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #48]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #32]             // 16-byte Folded Reload
	ldr	x25, [sp, #16]                  // 8-byte Folded Reload
	ldp	x29, x30, [sp], #80             // 16-byte Folded Reload
	ret
.Lfunc_end112:
	.size	_maplist, .Lfunc_end112-_maplist
	.cfi_endproc
                                        // -- End function
	.globl	_mapcar                         // -- Begin function _mapcar
	.p2align	4
	.type	_mapcar,@function
_mapcar:                                // @_mapcar
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-96]!           // 16-byte Folded Spill
	str	x27, [sp, #16]                  // 8-byte Folded Spill
	stp	x26, x25, [sp, #32]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #48]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #64]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #80]             // 16-byte Folded Spill
	mov	x29, sp
	sub	sp, sp, #16                     // =16
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	adrp	x22, env
	adrp	x20, SymTab+8
	add	x20, x20, :lo12:SymTab+8
	ldr	x8, [x22, :lo12:env]
	stp	x20, x8, [x29, #-16]
	sub	x8, x29, #16                    // =16
	str	x8, [x22, :lo12:env]
	ldp	w0, w8, [x9]
	bfi	x0, x8, #32, #32
	ldp	w21, w8, [x9, #8]
	bfi	x21, x8, #32, #32
	tst	x0, #0x6
	b.ne	.LBB113_4
// %bb.1:                               // %"$3"
	tbz	w0, #3, .LBB113_3
// %bb.2:                               // %"$6"
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB113_4
.LBB113_3:                              // %"$5"
	bl	evList
.LBB113_4:                              // %"$2"
	mov	x8, sp
	sub	x19, x8, #48                    // =48
	mov	sp, x19
	lsr	x24, x20, #32
	mov	w25, #2
	stp	w20, w24, [x8, #-40]
	stp	w25, wzr, [x8, #-32]
	lsr	x9, x0, #32
	mov	x10, x19
	stur	w9, [x8, #-20]
	str	w0, [x10, #24]!
	sub	x23, sp, #16                    // =16
	mov	sp, x23
	ldr	x9, [x22, :lo12:env]
	str	x10, [x22, :lo12:env]
	lsr	x11, x10, #32
	lsr	x12, x9, #32
	stp	w9, w12, [x8, #-16]
	stp	w10, w11, [x8, #-48]
	mov	x27, x19
	mov	x26, x23
.LBB113_5:                              // %"$7"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w0, w8, [x21]
	bfi	x0, x8, #32, #32
	tst	x0, #0x6
	b.ne	.LBB113_9
// %bb.6:                               // %"$9"
                                        //   in Loop: Header=BB113_5 Depth=1
	tbz	w0, #3, .LBB113_8
// %bb.7:                               // %"$12"
                                        //   in Loop: Header=BB113_5 Depth=1
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB113_9
.LBB113_8:                              // %"$11"
                                        //   in Loop: Header=BB113_5 Depth=1
	bl	evList
.LBB113_9:                              // %"$8"
                                        //   in Loop: Header=BB113_5 Depth=1
	ldr	x8, [x22, :lo12:env]
	mov	x9, sp
	sub	x10, x9, #16                    // =16
	mov	sp, x10
	lsr	x11, x0, #32
	lsr	x12, x8, #32
	stp	w0, w11, [x9, #-16]
	stp	w8, w12, [x9, #-8]
	str	x10, [x22, :lo12:env]
	tst	x0, #0xf
	stp	w0, w11, [x26]
	b.ne	.LBB113_11
// %bb.10:                              // %"$13"
                                        //   in Loop: Header=BB113_5 Depth=1
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
.LBB113_11:                             // %"$14"
                                        //   in Loop: Header=BB113_5 Depth=1
	mov	x9, sp
	sub	x8, x9, #48                     // =48
	mov	sp, x8
	stp	w20, w24, [x9, #-40]
	stp	w25, wzr, [x9, #-32]
	lsr	x10, x0, #32
	stur	w10, [x9, #-20]
	mov	x10, x8
	str	w0, [x10, #24]!
	lsr	x11, x8, #32
	stp	w8, w11, [x27, #8]
	ldr	x11, [x22, :lo12:env]
	lsr	x12, x11, #32
	stp	w11, w12, [x9, #-16]
	str	x10, [x22, :lo12:env]
	lsr	x11, x10, #32
	stp	w10, w11, [x9, #-48]
	ldp	w21, w9, [x21, #8]
	bfi	x21, x9, #32, #32
	tst	x21, #0xf
	b.ne	.LBB113_13
// %bb.12:                              // %"$15"
                                        //   in Loop: Header=BB113_5 Depth=1
	sub	x9, sp, #16                     // =16
	mov	sp, x9
	lsr	x10, x9, #32
	stp	w9, w10, [x26, #8]
	mov	x27, x8
	mov	x26, x9
	b	.LBB113_5
.LBB113_13:                             // %"$16"
	ldrb	w8, [x23]
	tst	w8, #0xf
	b.eq	.LBB113_16
// %bb.14:
	adrp	x20, SymTab+8
	add	x20, x20, :lo12:SymTab+8
.LBB113_15:                             // %"$18"
	ldur	x8, [x29, #-8]
	str	x8, [x22, :lo12:env]
	mov	x0, x20
	mov	sp, x29
	ldp	x20, x19, [sp, #80]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #64]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #48]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #32]             // 16-byte Folded Reload
	ldr	x27, [sp, #16]                  // 8-byte Folded Reload
	ldp	x29, x30, [sp], #96             // 16-byte Folded Reload
	ret
.LBB113_16:                             // %"$19.preheader"
	mov	x24, xzr
	adrp	x21, SymTab+8
	add	x21, x21, :lo12:SymTab+8
	mov	x20, x21
	b	.LBB113_18
.LBB113_17:                             //   in Loop: Header=BB113_18 Depth=1
	mov	x24, x0
.LBB113_18:                             // %"$19"
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB113_23 Depth 2
	mov	x0, x19
	bl	evList
	mov	x1, x21
	bl	cons
	cbz	x24, .LBB113_20
// %bb.19:                              // %"$20"
                                        //   in Loop: Header=BB113_18 Depth=1
	add	x8, x24, #8                     // =8
	b	.LBB113_21
.LBB113_20:                             // %"$21"
                                        //   in Loop: Header=BB113_18 Depth=1
	sub	x8, x29, #16                    // =16
	mov	x20, x0
.LBB113_21:                             // %"$22"
                                        //   in Loop: Header=BB113_18 Depth=1
	lsr	x9, x0, #32
	stp	w0, w9, [x8]
	ldp	w9, w8, [x23]
	bfi	x9, x8, #32, #32
	ldp	w9, w8, [x9, #8]
	stp	w9, w8, [x23]
	bfi	x9, x8, #32, #32
	tst	x9, #0xf
	b.ne	.LBB113_15
// %bb.22:                              // %"$23"
                                        //   in Loop: Header=BB113_18 Depth=1
	ldp	w8, w10, [x19, #8]
	bfi	x8, x10, #32, #32
	ldp	w10, w11, [x9]
	bfi	x10, x11, #32, #32
	mov	x9, x23
.LBB113_23:                             // %"$25"
                                        //   Parent Loop BB113_18 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	lsr	x11, x10, #32
	stp	w10, w11, [x8, #24]
	ldp	w8, w10, [x8, #8]
	bfi	x8, x10, #32, #32
	tst	x8, #0xf
	b.ne	.LBB113_17
// %bb.24:                              // %"$26"
                                        //   in Loop: Header=BB113_23 Depth=2
	ldp	w9, w10, [x9, #8]
	bfi	x9, x10, #32, #32
	ldp	w10, w11, [x9]
	bfi	x10, x11, #32, #32
	tst	x10, #0xf
	b.ne	.LBB113_23
// %bb.25:                              // %"$29"
                                        //   in Loop: Header=BB113_23 Depth=2
	ldp	w10, w11, [x10, #8]
	stp	w10, w11, [x9]
	bfi	x10, x11, #32, #32
	tst	x10, #0xf
	b.ne	.LBB113_23
// %bb.26:                              // %"$31"
                                        //   in Loop: Header=BB113_23 Depth=2
	ldp	w10, w11, [x10]
	bfi	x10, x11, #32, #32
	b	.LBB113_23
.Lfunc_end113:
	.size	_mapcar, .Lfunc_end113-_mapcar
	.cfi_endproc
                                        // -- End function
	.globl	_mapcon                         // -- Begin function _mapcon
	.p2align	4
	.type	_mapcon,@function
_mapcon:                                // @_mapcon
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-80]!           // 16-byte Folded Spill
	str	x25, [sp, #16]                  // 8-byte Folded Spill
	stp	x24, x23, [sp, #32]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #48]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #64]             // 16-byte Folded Spill
	mov	x29, sp
	sub	sp, sp, #16                     // =16
	.cfi_def_cfa w29, 80
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -64
	.cfi_offset w30, -72
	.cfi_offset w29, -80
	ldp	w20, w8, [x0, #8]
	bfi	x20, x8, #32, #32
	adrp	x21, env
	adrp	x22, SymTab+8
	add	x22, x22, :lo12:SymTab+8
	ldr	x8, [x21, :lo12:env]
	stp	x22, x8, [x29, #-16]
	sub	x8, x29, #16                    // =16
	str	x8, [x21, :lo12:env]
	ldp	w0, w8, [x20]
	bfi	x0, x8, #32, #32
	tst	x0, #0x6
	b.ne	.LBB114_4
// %bb.1:                               // %"$3"
	tbz	w0, #3, .LBB114_3
// %bb.2:                               // %"$6"
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB114_4
.LBB114_3:                              // %"$5"
	bl	evList
.LBB114_4:                              // %"$2"
	mov	x8, sp
	sub	x19, x8, #48                    // =48
	mov	sp, x19
	lsr	x23, x22, #32
	mov	w24, #2
	stp	w22, w23, [x8, #-40]
	stp	w24, wzr, [x8, #-32]
	lsr	x9, x0, #32
	mov	x25, x19
	stp	w0, w9, [x8, #-24]
	b	.LBB114_7
.LBB114_5:                              // %"$13"
                                        //   in Loop: Header=BB114_7 Depth=1
	bl	evList
.LBB114_6:                              // %"$10"
                                        //   in Loop: Header=BB114_7 Depth=1
	mov	x8, sp
	sub	x9, x8, #48                     // =48
	mov	sp, x9
	stp	w22, w23, [x8, #-40]
	stp	w24, wzr, [x8, #-32]
	lsr	x10, x0, #32
	stp	w0, w10, [x8, #-24]
	lsr	x8, x9, #32
	stp	w9, w8, [x25, #8]
	mov	x25, x9
.LBB114_7:                              // %"$7"
                                        // =>This Inner Loop Header: Depth=1
	add	x8, x25, #24                    // =24
	ldr	x9, [x21, :lo12:env]
	lsr	x10, x9, #32
	stp	w9, w10, [x25, #32]
	str	x8, [x21, :lo12:env]
	lsr	x9, x8, #32
	stp	w8, w9, [x25]
	ldp	w20, w8, [x20, #8]
	bfi	x20, x8, #32, #32
	tst	x20, #0xf
	b.ne	.LBB114_11
// %bb.8:                               // %"$8"
                                        //   in Loop: Header=BB114_7 Depth=1
	ldp	w0, w8, [x20]
	bfi	x0, x8, #32, #32
	tst	x0, #0x6
	b.ne	.LBB114_6
// %bb.9:                               // %"$11"
                                        //   in Loop: Header=BB114_7 Depth=1
	tbz	w0, #3, .LBB114_5
// %bb.10:                              // %"$14"
                                        //   in Loop: Header=BB114_7 Depth=1
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB114_6
.LBB114_11:                             // %"$15.preheader"
	mov	x23, xzr
	adrp	x20, SymTab+8
	add	x20, x20, :lo12:SymTab+8
	b	.LBB114_13
.LBB114_12:                             //   in Loop: Header=BB114_13 Depth=1
	mov	x23, x0
.LBB114_13:                             // %"$15"
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB114_17 Depth 2
                                        //     Child Loop BB114_22 Depth 2
	ldp	w22, w8, [x19, #8]
	bfi	x22, x8, #32, #32
	ldrb	w8, [x22, #24]
	tst	w8, #0xf
	b.ne	.LBB114_24
// %bb.14:                              // %"$16"
                                        //   in Loop: Header=BB114_13 Depth=1
	mov	x0, x19
	bl	evList
	tst	x0, #0xf
	b.eq	.LBB114_16
// %bb.15:                              //   in Loop: Header=BB114_13 Depth=1
	mov	x0, x23
	b	.LBB114_22
.LBB114_16:                             // %"$18"
                                        //   in Loop: Header=BB114_13 Depth=1
	cbz	x23, .LBB114_19
.LBB114_17:                             // %"$23"
                                        //   Parent Loop BB114_13 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	mov	x8, x23
	ldp	w23, w9, [x23, #8]
	bfi	x23, x9, #32, #32
	tst	x23, #0xf
	b.eq	.LBB114_17
// %bb.18:                              // %"$25"
                                        //   in Loop: Header=BB114_13 Depth=1
	add	x8, x8, #8                      // =8
	b	.LBB114_20
.LBB114_19:                             // %"$21"
                                        //   in Loop: Header=BB114_13 Depth=1
	sub	x8, x29, #16                    // =16
	mov	x20, x0
.LBB114_20:                             // %"$22"
                                        //   in Loop: Header=BB114_13 Depth=1
	lsr	x9, x0, #32
	stp	w0, w9, [x8]
	b	.LBB114_22
.LBB114_21:                             // %"$28"
                                        //   in Loop: Header=BB114_22 Depth=2
	ldp	w22, w8, [x22, #8]
	bfi	x22, x8, #32, #32
	tst	x22, #0xf
	b.ne	.LBB114_12
.LBB114_22:                             // %"$26"
                                        //   Parent Loop BB114_13 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	w8, w9, [x22, #24]
	bfi	x8, x9, #32, #32
	tst	x8, #0xf
	b.ne	.LBB114_21
// %bb.23:                              // %"$27"
                                        //   in Loop: Header=BB114_22 Depth=2
	ldp	w9, w8, [x8, #8]
	stp	w9, w8, [x22, #24]
	b	.LBB114_21
.LBB114_24:                             // %"$17"
	ldur	x8, [x29, #-8]
	str	x8, [x21, :lo12:env]
	mov	x0, x20
	mov	sp, x29
	ldp	x20, x19, [sp, #64]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #48]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #32]             // 16-byte Folded Reload
	ldr	x25, [sp, #16]                  // 8-byte Folded Reload
	ldp	x29, x30, [sp], #80             // 16-byte Folded Reload
	ret
.Lfunc_end114:
	.size	_mapcon, .Lfunc_end114-_mapcon
	.cfi_endproc
                                        // -- End function
	.globl	_mapcan                         // -- Begin function _mapcan
	.p2align	4
	.type	_mapcan,@function
_mapcan:                                // @_mapcan
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-96]!           // 16-byte Folded Spill
	str	x27, [sp, #16]                  // 8-byte Folded Spill
	stp	x26, x25, [sp, #32]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #48]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #64]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #80]             // 16-byte Folded Spill
	mov	x29, sp
	sub	sp, sp, #16                     // =16
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	adrp	x21, env
	adrp	x20, SymTab+8
	add	x20, x20, :lo12:SymTab+8
	ldr	x8, [x21, :lo12:env]
	stp	x20, x8, [x29, #-16]
	sub	x8, x29, #16                    // =16
	str	x8, [x21, :lo12:env]
	ldp	w0, w8, [x9]
	bfi	x0, x8, #32, #32
	ldp	w23, w8, [x9, #8]
	bfi	x23, x8, #32, #32
	tst	x0, #0x6
	b.ne	.LBB115_4
// %bb.1:                               // %"$3"
	tbz	w0, #3, .LBB115_3
// %bb.2:                               // %"$6"
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB115_4
.LBB115_3:                              // %"$5"
	bl	evList
.LBB115_4:                              // %"$2"
	mov	x8, sp
	sub	x19, x8, #48                    // =48
	mov	sp, x19
	lsr	x24, x20, #32
	mov	w25, #2
	stp	w20, w24, [x8, #-40]
	stp	w25, wzr, [x8, #-32]
	lsr	x9, x0, #32
	mov	x10, x19
	stur	w9, [x8, #-20]
	str	w0, [x10, #24]!
	sub	x22, sp, #16                    // =16
	mov	sp, x22
	ldr	x9, [x21, :lo12:env]
	str	x10, [x21, :lo12:env]
	lsr	x11, x10, #32
	lsr	x12, x9, #32
	stp	w9, w12, [x8, #-16]
	stp	w10, w11, [x8, #-48]
	mov	x27, x19
	mov	x26, x22
.LBB115_5:                              // %"$7"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w0, w8, [x23]
	bfi	x0, x8, #32, #32
	tst	x0, #0x6
	b.ne	.LBB115_9
// %bb.6:                               // %"$9"
                                        //   in Loop: Header=BB115_5 Depth=1
	tbz	w0, #3, .LBB115_8
// %bb.7:                               // %"$12"
                                        //   in Loop: Header=BB115_5 Depth=1
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB115_9
.LBB115_8:                              // %"$11"
                                        //   in Loop: Header=BB115_5 Depth=1
	bl	evList
.LBB115_9:                              // %"$8"
                                        //   in Loop: Header=BB115_5 Depth=1
	ldr	x8, [x21, :lo12:env]
	mov	x9, sp
	sub	x10, x9, #16                    // =16
	mov	sp, x10
	lsr	x11, x0, #32
	lsr	x12, x8, #32
	stp	w0, w11, [x9, #-16]
	stp	w8, w12, [x9, #-8]
	str	x10, [x21, :lo12:env]
	tst	x0, #0xf
	stp	w0, w11, [x26]
	b.ne	.LBB115_11
// %bb.10:                              // %"$13"
                                        //   in Loop: Header=BB115_5 Depth=1
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
.LBB115_11:                             // %"$14"
                                        //   in Loop: Header=BB115_5 Depth=1
	mov	x9, sp
	sub	x8, x9, #48                     // =48
	mov	sp, x8
	stp	w20, w24, [x9, #-40]
	stp	w25, wzr, [x9, #-32]
	lsr	x10, x0, #32
	stur	w10, [x9, #-20]
	mov	x10, x8
	str	w0, [x10, #24]!
	lsr	x11, x8, #32
	stp	w8, w11, [x27, #8]
	ldr	x11, [x21, :lo12:env]
	lsr	x12, x11, #32
	stp	w11, w12, [x9, #-16]
	str	x10, [x21, :lo12:env]
	lsr	x11, x10, #32
	stp	w10, w11, [x9, #-48]
	ldp	w23, w9, [x23, #8]
	bfi	x23, x9, #32, #32
	tst	x23, #0xf
	b.ne	.LBB115_13
// %bb.12:                              // %"$15"
                                        //   in Loop: Header=BB115_5 Depth=1
	sub	x9, sp, #16                     // =16
	mov	sp, x9
	lsr	x10, x9, #32
	stp	w9, w10, [x26, #8]
	mov	x27, x8
	mov	x26, x9
	b	.LBB115_5
.LBB115_13:                             // %"$16"
	ldrb	w8, [x22]
	tst	w8, #0xf
	b.eq	.LBB115_16
// %bb.14:
	adrp	x20, SymTab+8
	add	x20, x20, :lo12:SymTab+8
.LBB115_15:                             // %"$18"
	ldur	x8, [x29, #-8]
	str	x8, [x21, :lo12:env]
	mov	x0, x20
	mov	sp, x29
	ldp	x20, x19, [sp, #80]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #64]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #48]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #32]             // 16-byte Folded Reload
	ldr	x27, [sp, #16]                  // 8-byte Folded Reload
	ldp	x29, x30, [sp], #96             // 16-byte Folded Reload
	ret
.LBB115_16:                             // %"$19.preheader"
	mov	x23, xzr
	adrp	x20, SymTab+8
	add	x20, x20, :lo12:SymTab+8
	b	.LBB115_18
.LBB115_17:                             //   in Loop: Header=BB115_18 Depth=1
	mov	x23, x0
.LBB115_18:                             // %"$19"
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB115_21 Depth 2
                                        //     Child Loop BB115_27 Depth 2
	mov	x0, x19
	bl	evList
	tst	x0, #0xf
	b.eq	.LBB115_20
// %bb.19:                              //   in Loop: Header=BB115_18 Depth=1
	mov	x0, x23
	b	.LBB115_25
.LBB115_20:                             // %"$20"
                                        //   in Loop: Header=BB115_18 Depth=1
	cbz	x23, .LBB115_23
.LBB115_21:                             // %"$25"
                                        //   Parent Loop BB115_18 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	mov	x8, x23
	ldp	w23, w9, [x23, #8]
	bfi	x23, x9, #32, #32
	tst	x23, #0xf
	b.eq	.LBB115_21
// %bb.22:                              // %"$27"
                                        //   in Loop: Header=BB115_18 Depth=1
	add	x8, x8, #8                      // =8
	b	.LBB115_24
.LBB115_23:                             // %"$23"
                                        //   in Loop: Header=BB115_18 Depth=1
	sub	x8, x29, #16                    // =16
	mov	x20, x0
.LBB115_24:                             // %"$24"
                                        //   in Loop: Header=BB115_18 Depth=1
	lsr	x9, x0, #32
	stp	w0, w9, [x8]
.LBB115_25:                             // %"$21"
                                        //   in Loop: Header=BB115_18 Depth=1
	ldp	w9, w8, [x22]
	bfi	x9, x8, #32, #32
	ldp	w9, w8, [x9, #8]
	stp	w9, w8, [x22]
	bfi	x9, x8, #32, #32
	tst	x9, #0xf
	b.ne	.LBB115_15
// %bb.26:                              // %"$28"
                                        //   in Loop: Header=BB115_18 Depth=1
	ldp	w8, w10, [x19, #8]
	bfi	x8, x10, #32, #32
	ldp	w10, w11, [x9]
	bfi	x10, x11, #32, #32
	mov	x9, x22
.LBB115_27:                             // %"$30"
                                        //   Parent Loop BB115_18 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	lsr	x11, x10, #32
	stp	w10, w11, [x8, #24]
	ldp	w8, w10, [x8, #8]
	bfi	x8, x10, #32, #32
	tst	x8, #0xf
	b.ne	.LBB115_17
// %bb.28:                              // %"$31"
                                        //   in Loop: Header=BB115_27 Depth=2
	ldp	w9, w10, [x9, #8]
	bfi	x9, x10, #32, #32
	ldp	w10, w11, [x9]
	bfi	x10, x11, #32, #32
	tst	x10, #0xf
	b.ne	.LBB115_27
// %bb.29:                              // %"$34"
                                        //   in Loop: Header=BB115_27 Depth=2
	ldp	w10, w11, [x10, #8]
	stp	w10, w11, [x9]
	bfi	x10, x11, #32, #32
	tst	x10, #0xf
	b.ne	.LBB115_27
// %bb.30:                              // %"$36"
                                        //   in Loop: Header=BB115_27 Depth=2
	ldp	w10, w11, [x10]
	bfi	x10, x11, #32, #32
	b	.LBB115_27
.Lfunc_end115:
	.size	_mapcan, .Lfunc_end115-_mapcan
	.cfi_endproc
                                        // -- End function
	.globl	_filter                         // -- Begin function _filter
	.p2align	4
	.type	_filter,@function
_filter:                                // @_filter
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-96]!           // 16-byte Folded Spill
	str	x27, [sp, #16]                  // 8-byte Folded Spill
	stp	x26, x25, [sp, #32]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #48]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #64]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #80]             // 16-byte Folded Spill
	mov	x29, sp
	sub	sp, sp, #16                     // =16
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	adrp	x22, env
	adrp	x20, SymTab+8
	add	x20, x20, :lo12:SymTab+8
	ldr	x8, [x22, :lo12:env]
	stp	x20, x8, [x29, #-16]
	sub	x8, x29, #16                    // =16
	str	x8, [x22, :lo12:env]
	ldp	w0, w8, [x9]
	bfi	x0, x8, #32, #32
	ldp	w21, w8, [x9, #8]
	bfi	x21, x8, #32, #32
	tst	x0, #0x6
	b.ne	.LBB116_4
// %bb.1:                               // %"$3"
	tbz	w0, #3, .LBB116_3
// %bb.2:                               // %"$6"
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB116_4
.LBB116_3:                              // %"$5"
	bl	evList
.LBB116_4:                              // %"$2"
	mov	x8, sp
	sub	x19, x8, #48                    // =48
	mov	sp, x19
	lsr	x24, x20, #32
	mov	w25, #2
	stp	w20, w24, [x8, #-40]
	stp	w25, wzr, [x8, #-32]
	lsr	x9, x0, #32
	mov	x10, x19
	stur	w9, [x8, #-20]
	str	w0, [x10, #24]!
	sub	x23, sp, #16                    // =16
	mov	sp, x23
	ldr	x9, [x22, :lo12:env]
	str	x10, [x22, :lo12:env]
	lsr	x11, x10, #32
	lsr	x12, x9, #32
	stp	w9, w12, [x8, #-16]
	stp	w10, w11, [x8, #-48]
	mov	x27, x19
	mov	x26, x23
.LBB116_5:                              // %"$7"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w0, w8, [x21]
	bfi	x0, x8, #32, #32
	tst	x0, #0x6
	b.ne	.LBB116_9
// %bb.6:                               // %"$9"
                                        //   in Loop: Header=BB116_5 Depth=1
	tbz	w0, #3, .LBB116_8
// %bb.7:                               // %"$12"
                                        //   in Loop: Header=BB116_5 Depth=1
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB116_9
.LBB116_8:                              // %"$11"
                                        //   in Loop: Header=BB116_5 Depth=1
	bl	evList
.LBB116_9:                              // %"$8"
                                        //   in Loop: Header=BB116_5 Depth=1
	ldr	x8, [x22, :lo12:env]
	mov	x9, sp
	sub	x10, x9, #16                    // =16
	mov	sp, x10
	lsr	x11, x0, #32
	lsr	x12, x8, #32
	stp	w0, w11, [x9, #-16]
	stp	w8, w12, [x9, #-8]
	str	x10, [x22, :lo12:env]
	tst	x0, #0xf
	stp	w0, w11, [x26]
	b.ne	.LBB116_11
// %bb.10:                              // %"$13"
                                        //   in Loop: Header=BB116_5 Depth=1
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
.LBB116_11:                             // %"$14"
                                        //   in Loop: Header=BB116_5 Depth=1
	mov	x9, sp
	sub	x8, x9, #48                     // =48
	mov	sp, x8
	stp	w20, w24, [x9, #-40]
	stp	w25, wzr, [x9, #-32]
	lsr	x10, x0, #32
	stur	w10, [x9, #-20]
	mov	x10, x8
	str	w0, [x10, #24]!
	lsr	x11, x8, #32
	stp	w8, w11, [x27, #8]
	ldr	x11, [x22, :lo12:env]
	lsr	x12, x11, #32
	stp	w11, w12, [x9, #-16]
	str	x10, [x22, :lo12:env]
	lsr	x11, x10, #32
	stp	w10, w11, [x9, #-48]
	ldp	w21, w9, [x21, #8]
	bfi	x21, x9, #32, #32
	tst	x21, #0xf
	b.ne	.LBB116_13
// %bb.12:                              // %"$15"
                                        //   in Loop: Header=BB116_5 Depth=1
	sub	x9, sp, #16                     // =16
	mov	sp, x9
	lsr	x10, x9, #32
	stp	w9, w10, [x26, #8]
	mov	x27, x8
	mov	x26, x9
	b	.LBB116_5
.LBB116_13:                             // %"$16"
	adrp	x20, SymTab+8
	add	x20, x20, :lo12:SymTab+8
	ldrb	w8, [x23]
	tst	w8, #0xf
	mov	x21, x20
	b.eq	.LBB116_15
.LBB116_14:                             // %"$18"
	ldur	x8, [x29, #-8]
	str	x8, [x22, :lo12:env]
	mov	x0, x21
	mov	sp, x29
	ldp	x20, x19, [sp, #80]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #64]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #48]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #32]             // 16-byte Folded Reload
	ldr	x27, [sp, #16]                  // 8-byte Folded Reload
	ldp	x29, x30, [sp], #96             // 16-byte Folded Reload
	ret
.LBB116_15:                             // %"$19.preheader"
	mov	x24, xzr
	mov	x21, x20
	b	.LBB116_17
.LBB116_16:                             //   in Loop: Header=BB116_17 Depth=1
	mov	x24, x0
.LBB116_17:                             // %"$19"
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB116_25 Depth 2
	mov	x0, x19
	bl	evList
	cmp	x0, x20
	b.ne	.LBB116_19
// %bb.18:                              //   in Loop: Header=BB116_17 Depth=1
	mov	x0, x24
	b	.LBB116_23
.LBB116_19:                             // %"$20"
                                        //   in Loop: Header=BB116_17 Depth=1
	ldp	w9, w8, [x23]
	bfi	x9, x8, #32, #32
	ldp	w0, w8, [x9]
	bfi	x0, x8, #32, #32
	mov	x1, x20
	bl	cons
	cbz	x24, .LBB116_21
// %bb.20:                              // %"$22"
                                        //   in Loop: Header=BB116_17 Depth=1
	add	x8, x24, #8                     // =8
	b	.LBB116_22
.LBB116_21:                             // %"$23"
                                        //   in Loop: Header=BB116_17 Depth=1
	sub	x8, x29, #16                    // =16
	mov	x21, x0
.LBB116_22:                             // %"$24"
                                        //   in Loop: Header=BB116_17 Depth=1
	lsr	x9, x0, #32
	stp	w0, w9, [x8]
.LBB116_23:                             // %"$21"
                                        //   in Loop: Header=BB116_17 Depth=1
	ldp	w9, w8, [x23]
	bfi	x9, x8, #32, #32
	ldp	w9, w8, [x9, #8]
	stp	w9, w8, [x23]
	bfi	x9, x8, #32, #32
	tst	x9, #0xf
	b.ne	.LBB116_14
// %bb.24:                              // %"$25"
                                        //   in Loop: Header=BB116_17 Depth=1
	ldp	w8, w10, [x19, #8]
	bfi	x8, x10, #32, #32
	ldp	w10, w11, [x9]
	bfi	x10, x11, #32, #32
	mov	x9, x23
.LBB116_25:                             // %"$27"
                                        //   Parent Loop BB116_17 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	lsr	x11, x10, #32
	stp	w10, w11, [x8, #24]
	ldp	w8, w10, [x8, #8]
	bfi	x8, x10, #32, #32
	tst	x8, #0xf
	b.ne	.LBB116_16
// %bb.26:                              // %"$28"
                                        //   in Loop: Header=BB116_25 Depth=2
	ldp	w9, w10, [x9, #8]
	bfi	x9, x10, #32, #32
	ldp	w10, w11, [x9]
	bfi	x10, x11, #32, #32
	tst	x10, #0xf
	b.ne	.LBB116_25
// %bb.27:                              // %"$31"
                                        //   in Loop: Header=BB116_25 Depth=2
	ldp	w10, w11, [x10, #8]
	stp	w10, w11, [x9]
	bfi	x10, x11, #32, #32
	tst	x10, #0xf
	b.ne	.LBB116_25
// %bb.28:                              // %"$33"
                                        //   in Loop: Header=BB116_25 Depth=2
	ldp	w10, w11, [x10]
	bfi	x10, x11, #32, #32
	b	.LBB116_25
.Lfunc_end116:
	.size	_filter, .Lfunc_end116-_filter
	.cfi_endproc
                                        // -- End function
	.globl	_extract                        // -- Begin function _extract
	.p2align	4
	.type	_extract,@function
_extract:                               // @_extract
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-96]!           // 16-byte Folded Spill
	str	x27, [sp, #16]                  // 8-byte Folded Spill
	stp	x26, x25, [sp, #32]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #48]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #64]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #80]             // 16-byte Folded Spill
	mov	x29, sp
	sub	sp, sp, #16                     // =16
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	adrp	x22, env
	adrp	x20, SymTab+8
	add	x20, x20, :lo12:SymTab+8
	ldr	x8, [x22, :lo12:env]
	stp	x20, x8, [x29, #-16]
	sub	x8, x29, #16                    // =16
	str	x8, [x22, :lo12:env]
	ldp	w0, w8, [x9]
	bfi	x0, x8, #32, #32
	ldp	w21, w8, [x9, #8]
	bfi	x21, x8, #32, #32
	tst	x0, #0x6
	b.ne	.LBB117_4
// %bb.1:                               // %"$3"
	tbz	w0, #3, .LBB117_3
// %bb.2:                               // %"$6"
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB117_4
.LBB117_3:                              // %"$5"
	bl	evList
.LBB117_4:                              // %"$2"
	mov	x8, sp
	sub	x19, x8, #48                    // =48
	mov	sp, x19
	lsr	x24, x20, #32
	mov	w25, #2
	stp	w20, w24, [x8, #-40]
	stp	w25, wzr, [x8, #-32]
	lsr	x9, x0, #32
	mov	x10, x19
	stur	w9, [x8, #-20]
	str	w0, [x10, #24]!
	sub	x23, sp, #16                    // =16
	mov	sp, x23
	ldr	x9, [x22, :lo12:env]
	str	x10, [x22, :lo12:env]
	lsr	x11, x10, #32
	lsr	x12, x9, #32
	stp	w9, w12, [x8, #-16]
	stp	w10, w11, [x8, #-48]
	mov	x27, x19
	mov	x26, x23
.LBB117_5:                              // %"$7"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w0, w8, [x21]
	bfi	x0, x8, #32, #32
	tst	x0, #0x6
	b.ne	.LBB117_9
// %bb.6:                               // %"$9"
                                        //   in Loop: Header=BB117_5 Depth=1
	tbz	w0, #3, .LBB117_8
// %bb.7:                               // %"$12"
                                        //   in Loop: Header=BB117_5 Depth=1
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB117_9
.LBB117_8:                              // %"$11"
                                        //   in Loop: Header=BB117_5 Depth=1
	bl	evList
.LBB117_9:                              // %"$8"
                                        //   in Loop: Header=BB117_5 Depth=1
	ldr	x8, [x22, :lo12:env]
	mov	x9, sp
	sub	x10, x9, #16                    // =16
	mov	sp, x10
	lsr	x11, x0, #32
	lsr	x12, x8, #32
	stp	w0, w11, [x9, #-16]
	stp	w8, w12, [x9, #-8]
	str	x10, [x22, :lo12:env]
	tst	x0, #0xf
	stp	w0, w11, [x26]
	b.ne	.LBB117_11
// %bb.10:                              // %"$13"
                                        //   in Loop: Header=BB117_5 Depth=1
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
.LBB117_11:                             // %"$14"
                                        //   in Loop: Header=BB117_5 Depth=1
	mov	x9, sp
	sub	x8, x9, #48                     // =48
	mov	sp, x8
	stp	w20, w24, [x9, #-40]
	stp	w25, wzr, [x9, #-32]
	lsr	x10, x0, #32
	stur	w10, [x9, #-20]
	mov	x10, x8
	str	w0, [x10, #24]!
	lsr	x11, x8, #32
	stp	w8, w11, [x27, #8]
	ldr	x11, [x22, :lo12:env]
	lsr	x12, x11, #32
	stp	w11, w12, [x9, #-16]
	str	x10, [x22, :lo12:env]
	lsr	x11, x10, #32
	stp	w10, w11, [x9, #-48]
	ldp	w21, w9, [x21, #8]
	bfi	x21, x9, #32, #32
	tst	x21, #0xf
	b.ne	.LBB117_13
// %bb.12:                              // %"$15"
                                        //   in Loop: Header=BB117_5 Depth=1
	sub	x9, sp, #16                     // =16
	mov	sp, x9
	lsr	x10, x9, #32
	stp	w9, w10, [x26, #8]
	mov	x27, x8
	mov	x26, x9
	b	.LBB117_5
.LBB117_13:                             // %"$16"
	adrp	x20, SymTab+8
	add	x20, x20, :lo12:SymTab+8
	ldrb	w8, [x23]
	tst	w8, #0xf
	mov	x21, x20
	b.eq	.LBB117_15
.LBB117_14:                             // %"$18"
	ldur	x8, [x29, #-8]
	str	x8, [x22, :lo12:env]
	mov	x0, x21
	mov	sp, x29
	ldp	x20, x19, [sp, #80]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #64]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #48]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #32]             // 16-byte Folded Reload
	ldr	x27, [sp, #16]                  // 8-byte Folded Reload
	ldp	x29, x30, [sp], #96             // 16-byte Folded Reload
	ret
.LBB117_15:                             // %"$19.preheader"
	mov	x24, xzr
	mov	x21, x20
	b	.LBB117_17
.LBB117_16:                             //   in Loop: Header=BB117_17 Depth=1
	mov	x24, x0
.LBB117_17:                             // %"$19"
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB117_25 Depth 2
	mov	x0, x19
	bl	evList
	cmp	x0, x20
	b.ne	.LBB117_19
// %bb.18:                              //   in Loop: Header=BB117_17 Depth=1
	mov	x0, x24
	b	.LBB117_23
.LBB117_19:                             // %"$20"
                                        //   in Loop: Header=BB117_17 Depth=1
	mov	x1, x20
	bl	cons
	cbz	x24, .LBB117_21
// %bb.20:                              // %"$22"
                                        //   in Loop: Header=BB117_17 Depth=1
	add	x8, x24, #8                     // =8
	b	.LBB117_22
.LBB117_21:                             // %"$23"
                                        //   in Loop: Header=BB117_17 Depth=1
	sub	x8, x29, #16                    // =16
	mov	x21, x0
.LBB117_22:                             // %"$24"
                                        //   in Loop: Header=BB117_17 Depth=1
	lsr	x9, x0, #32
	stp	w0, w9, [x8]
.LBB117_23:                             // %"$21"
                                        //   in Loop: Header=BB117_17 Depth=1
	ldp	w9, w8, [x23]
	bfi	x9, x8, #32, #32
	ldp	w9, w8, [x9, #8]
	stp	w9, w8, [x23]
	bfi	x9, x8, #32, #32
	tst	x9, #0xf
	b.ne	.LBB117_14
// %bb.24:                              // %"$25"
                                        //   in Loop: Header=BB117_17 Depth=1
	ldp	w8, w10, [x19, #8]
	bfi	x8, x10, #32, #32
	ldp	w10, w11, [x9]
	bfi	x10, x11, #32, #32
	mov	x9, x23
.LBB117_25:                             // %"$27"
                                        //   Parent Loop BB117_17 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	lsr	x11, x10, #32
	stp	w10, w11, [x8, #24]
	ldp	w8, w10, [x8, #8]
	bfi	x8, x10, #32, #32
	tst	x8, #0xf
	b.ne	.LBB117_16
// %bb.26:                              // %"$28"
                                        //   in Loop: Header=BB117_25 Depth=2
	ldp	w9, w10, [x9, #8]
	bfi	x9, x10, #32, #32
	ldp	w10, w11, [x9]
	bfi	x10, x11, #32, #32
	tst	x10, #0xf
	b.ne	.LBB117_25
// %bb.27:                              // %"$31"
                                        //   in Loop: Header=BB117_25 Depth=2
	ldp	w10, w11, [x10, #8]
	stp	w10, w11, [x9]
	bfi	x10, x11, #32, #32
	tst	x10, #0xf
	b.ne	.LBB117_25
// %bb.28:                              // %"$33"
                                        //   in Loop: Header=BB117_25 Depth=2
	ldp	w10, w11, [x10]
	bfi	x10, x11, #32, #32
	b	.LBB117_25
.Lfunc_end117:
	.size	_extract, .Lfunc_end117-_extract
	.cfi_endproc
                                        // -- End function
	.globl	_seek                           // -- Begin function _seek
	.p2align	4
	.type	_seek,@function
_seek:                                  // @_seek
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-80]!           // 16-byte Folded Spill
	stp	x26, x25, [sp, #16]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #32]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #48]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #64]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 80
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w30, -72
	.cfi_offset w29, -80
	ldp	w23, w8, [x0, #8]
	bfi	x23, x8, #32, #32
	ldp	w0, w8, [x23]
	bfi	x0, x8, #32, #32
	tst	x0, #0x6
	b.ne	.LBB118_4
// %bb.1:                               // %"$3"
	tbz	w0, #3, .LBB118_3
// %bb.2:                               // %"$6"
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB118_4
.LBB118_3:                              // %"$5"
	bl	evList
.LBB118_4:                              // %"$2"
	mov	x9, sp
	sub	x20, x9, #48                    // =48
	mov	sp, x20
	adrp	x19, SymTab+8
	add	x19, x19, :lo12:SymTab+8
	mov	w24, #2
	mov	x21, x20
	stp	w24, wzr, [x9, #-32]
	lsr	x25, x19, #32
	stp	w19, w25, [x9, #-40]
	str	w0, [x21, #24]!
	lsr	x10, x0, #32
	adrp	x22, env
	mov	x8, x21
	mov	x26, x20
	stur	w10, [x9, #-20]
	b	.LBB118_7
.LBB118_5:                              // %"$13"
                                        //   in Loop: Header=BB118_7 Depth=1
	bl	evList
.LBB118_6:                              // %"$10"
                                        //   in Loop: Header=BB118_7 Depth=1
	mov	x9, sp
	sub	x10, x9, #48                    // =48
	mov	sp, x10
	stp	w19, w25, [x9, #-40]
	stp	w24, wzr, [x9, #-32]
	mov	x8, x10
	str	w0, [x8, #24]!
	lsr	x11, x0, #32
	stur	w11, [x9, #-20]
	lsr	x9, x10, #32
	stp	w10, w9, [x26, #8]
	mov	x26, x10
.LBB118_7:                              // %"$7"
                                        // =>This Inner Loop Header: Depth=1
	ldr	x9, [x22, :lo12:env]
	lsr	x10, x9, #32
	stp	w9, w10, [x8, #8]
	str	x8, [x22, :lo12:env]
	lsr	x9, x8, #32
	stp	w8, w9, [x26]
	ldp	w23, w8, [x23, #8]
	bfi	x23, x8, #32, #32
	tst	x23, #0xf
	b.ne	.LBB118_15
// %bb.8:                               // %"$8"
                                        //   in Loop: Header=BB118_7 Depth=1
	ldp	w0, w8, [x23]
	bfi	x0, x8, #32, #32
	tst	x0, #0x6
	b.ne	.LBB118_6
// %bb.9:                               // %"$11"
                                        //   in Loop: Header=BB118_7 Depth=1
	tbz	w0, #3, .LBB118_5
// %bb.10:                              // %"$14"
                                        //   in Loop: Header=BB118_7 Depth=1
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB118_6
.LBB118_11:                             // %"$16"
                                        //   in Loop: Header=BB118_15 Depth=1
	mov	x0, x20
	bl	evList
	cmp	x0, x19
	b.eq	.LBB118_13
	b	.LBB118_16
.LBB118_12:                             // %"$23"
                                        //   in Loop: Header=BB118_13 Depth=2
	ldp	w23, w8, [x23, #8]
	bfi	x23, x8, #32, #32
	tst	x23, #0xf
	b.ne	.LBB118_15
.LBB118_13:                             // %"$21"
                                        //   Parent Loop BB118_15 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	w8, w9, [x23, #24]
	bfi	x8, x9, #32, #32
	tst	x8, #0xf
	b.ne	.LBB118_12
// %bb.14:                              // %"$22"
                                        //   in Loop: Header=BB118_13 Depth=2
	ldp	w9, w8, [x8, #8]
	stp	w9, w8, [x23, #24]
	b	.LBB118_12
.LBB118_15:                             // %"$15"
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB118_13 Depth 2
	ldp	w23, w8, [x20, #8]
	bfi	x23, x8, #32, #32
	ldrb	w8, [x23, #24]
	tst	w8, #0xf
	b.eq	.LBB118_11
	b	.LBB118_17
.LBB118_16:                             // %"$20"
	adrp	x8, SymTab+392
	str	x0, [x8, :lo12:SymTab+392]
	ldp	w19, w8, [x23, #24]
	bfi	x19, x8, #32, #32
.LBB118_17:                             // %"$17"
	ldp	w9, w8, [x21, #8]
	bfi	x9, x8, #32, #32
	str	x9, [x22, :lo12:env]
	mov	x0, x19
	mov	sp, x29
	ldp	x20, x19, [sp, #64]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #48]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #32]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #80             // 16-byte Folded Reload
	ret
.Lfunc_end118:
	.size	_seek, .Lfunc_end118-_seek
	.cfi_endproc
                                        // -- End function
	.globl	_find                           // -- Begin function _find
	.p2align	4
	.type	_find,@function
_find:                                  // @_find
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-96]!           // 16-byte Folded Spill
	stp	x28, x27, [sp, #16]             // 16-byte Folded Spill
	stp	x26, x25, [sp, #32]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #48]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #64]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #80]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w0, w8, [x9]
	bfi	x0, x8, #32, #32
	ldp	w20, w8, [x9, #8]
	bfi	x20, x8, #32, #32
	tst	x0, #0x6
	b.ne	.LBB119_4
// %bb.1:                               // %"$3"
	tbz	w0, #3, .LBB119_3
// %bb.2:                               // %"$6"
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB119_4
.LBB119_3:                              // %"$5"
	bl	evList
.LBB119_4:                              // %"$2"
	mov	x8, sp
	sub	x19, x8, #48                    // =48
	mov	sp, x19
	adrp	x24, SymTab+8
	add	x24, x24, :lo12:SymTab+8
	mov	w25, #2
	stp	w25, wzr, [x8, #-32]
	lsr	x9, x0, #32
	mov	x21, x19
	lsr	x26, x24, #32
	stp	w24, w26, [x8, #-40]
	stur	w9, [x8, #-20]
	str	w0, [x21, #24]!
	sub	x23, sp, #16                    // =16
	mov	sp, x23
	adrp	x22, env
	ldr	x9, [x22, :lo12:env]
	str	x21, [x22, :lo12:env]
	lsr	x10, x21, #32
	lsr	x11, x9, #32
	stp	w9, w11, [x8, #-16]
	stp	w21, w10, [x8, #-48]
	mov	x28, x19
	mov	x27, x23
.LBB119_5:                              // %"$7"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w0, w8, [x20]
	bfi	x0, x8, #32, #32
	tst	x0, #0x6
	b.ne	.LBB119_9
// %bb.6:                               // %"$9"
                                        //   in Loop: Header=BB119_5 Depth=1
	tbz	w0, #3, .LBB119_8
// %bb.7:                               // %"$12"
                                        //   in Loop: Header=BB119_5 Depth=1
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB119_9
.LBB119_8:                              // %"$11"
                                        //   in Loop: Header=BB119_5 Depth=1
	bl	evList
.LBB119_9:                              // %"$8"
                                        //   in Loop: Header=BB119_5 Depth=1
	ldr	x8, [x22, :lo12:env]
	mov	x9, sp
	sub	x10, x9, #16                    // =16
	mov	sp, x10
	lsr	x11, x0, #32
	lsr	x12, x8, #32
	stp	w0, w11, [x9, #-16]
	stp	w8, w12, [x9, #-8]
	str	x10, [x22, :lo12:env]
	tst	x0, #0xf
	stp	w0, w11, [x27]
	b.ne	.LBB119_11
// %bb.10:                              // %"$13"
                                        //   in Loop: Header=BB119_5 Depth=1
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
.LBB119_11:                             // %"$14"
                                        //   in Loop: Header=BB119_5 Depth=1
	mov	x9, sp
	sub	x8, x9, #48                     // =48
	mov	sp, x8
	stp	w24, w26, [x9, #-40]
	stp	w25, wzr, [x9, #-32]
	lsr	x10, x0, #32
	stur	w10, [x9, #-20]
	mov	x10, x8
	str	w0, [x10, #24]!
	lsr	x11, x8, #32
	stp	w8, w11, [x28, #8]
	ldr	x11, [x22, :lo12:env]
	lsr	x12, x11, #32
	stp	w11, w12, [x9, #-16]
	str	x10, [x22, :lo12:env]
	lsr	x11, x10, #32
	stp	w10, w11, [x9, #-48]
	ldp	w20, w9, [x20, #8]
	bfi	x20, x9, #32, #32
	tst	x20, #0xf
	b.ne	.LBB119_13
// %bb.12:                              // %"$15"
                                        //   in Loop: Header=BB119_5 Depth=1
	sub	x9, sp, #16                     // =16
	mov	sp, x9
	lsr	x10, x9, #32
	stp	w9, w10, [x27, #8]
	mov	x28, x8
	mov	x27, x9
	b	.LBB119_5
.LBB119_13:                             // %"$16"
	adrp	x20, SymTab+8
	add	x20, x20, :lo12:SymTab+8
	ldrb	w8, [x23]
	tst	w8, #0xf
	b.ne	.LBB119_22
	b	.LBB119_20
.LBB119_14:                             // %"$21"
                                        //   in Loop: Header=BB119_20 Depth=1
	ldp	w9, w8, [x23]
	bfi	x9, x8, #32, #32
	ldp	w9, w8, [x9, #8]
	stp	w9, w8, [x23]
	bfi	x9, x8, #32, #32
	tst	x9, #0xf
	b.ne	.LBB119_22
// %bb.15:                              // %"$24"
                                        //   in Loop: Header=BB119_20 Depth=1
	ldp	w8, w10, [x19, #8]
	bfi	x8, x10, #32, #32
	ldp	w10, w11, [x9]
	bfi	x10, x11, #32, #32
	mov	x9, x23
.LBB119_16:                             // %"$26"
                                        //   Parent Loop BB119_20 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	lsr	x11, x10, #32
	stp	w10, w11, [x8, #24]
	ldp	w8, w10, [x8, #8]
	bfi	x8, x10, #32, #32
	tst	x8, #0xf
	b.ne	.LBB119_20
// %bb.17:                              // %"$27"
                                        //   in Loop: Header=BB119_16 Depth=2
	ldp	w9, w10, [x9, #8]
	bfi	x9, x10, #32, #32
	ldp	w10, w11, [x9]
	bfi	x10, x11, #32, #32
	tst	x10, #0xf
	b.ne	.LBB119_16
// %bb.18:                              // %"$30"
                                        //   in Loop: Header=BB119_16 Depth=2
	ldp	w10, w11, [x10, #8]
	stp	w10, w11, [x9]
	bfi	x10, x11, #32, #32
	tst	x10, #0xf
	b.ne	.LBB119_16
// %bb.19:                              // %"$32"
                                        //   in Loop: Header=BB119_16 Depth=2
	ldp	w10, w11, [x10]
	bfi	x10, x11, #32, #32
	b	.LBB119_16
.LBB119_20:                             // %"$20"
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB119_16 Depth 2
	mov	x0, x19
	bl	evList
	cmp	x0, x20
	b.eq	.LBB119_14
// %bb.21:                              // %"$23"
	adrp	x8, SymTab+392
	str	x0, [x8, :lo12:SymTab+392]
	ldp	w9, w8, [x23]
	bfi	x9, x8, #32, #32
	ldp	w20, w8, [x9]
	bfi	x20, x8, #32, #32
.LBB119_22:                             // %"$19"
	ldp	w9, w8, [x21, #8]
	bfi	x9, x8, #32, #32
	str	x9, [x22, :lo12:env]
	mov	x0, x20
	mov	sp, x29
	ldp	x20, x19, [sp, #80]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #64]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #48]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #32]             // 16-byte Folded Reload
	ldp	x28, x27, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #96             // 16-byte Folded Reload
	ret
.Lfunc_end119:
	.size	_find, .Lfunc_end119-_find
	.cfi_endproc
                                        // -- End function
	.globl	_pick                           // -- Begin function _pick
	.p2align	4
	.type	_pick,@function
_pick:                                  // @_pick
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-96]!           // 16-byte Folded Spill
	stp	x28, x27, [sp, #16]             // 16-byte Folded Spill
	stp	x26, x25, [sp, #32]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #48]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #64]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #80]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w0, w8, [x9]
	bfi	x0, x8, #32, #32
	ldp	w20, w8, [x9, #8]
	bfi	x20, x8, #32, #32
	tst	x0, #0x6
	b.ne	.LBB120_4
// %bb.1:                               // %"$3"
	tbz	w0, #3, .LBB120_3
// %bb.2:                               // %"$6"
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB120_4
.LBB120_3:                              // %"$5"
	bl	evList
.LBB120_4:                              // %"$2"
	mov	x8, sp
	sub	x19, x8, #48                    // =48
	mov	sp, x19
	adrp	x24, SymTab+8
	add	x24, x24, :lo12:SymTab+8
	mov	w25, #2
	stp	w25, wzr, [x8, #-32]
	lsr	x9, x0, #32
	mov	x21, x19
	lsr	x26, x24, #32
	stp	w24, w26, [x8, #-40]
	stur	w9, [x8, #-20]
	str	w0, [x21, #24]!
	sub	x23, sp, #16                    // =16
	mov	sp, x23
	adrp	x22, env
	ldr	x9, [x22, :lo12:env]
	str	x21, [x22, :lo12:env]
	lsr	x10, x21, #32
	lsr	x11, x9, #32
	stp	w9, w11, [x8, #-16]
	stp	w21, w10, [x8, #-48]
	mov	x28, x19
	mov	x27, x23
.LBB120_5:                              // %"$7"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w0, w8, [x20]
	bfi	x0, x8, #32, #32
	tst	x0, #0x6
	b.ne	.LBB120_9
// %bb.6:                               // %"$9"
                                        //   in Loop: Header=BB120_5 Depth=1
	tbz	w0, #3, .LBB120_8
// %bb.7:                               // %"$12"
                                        //   in Loop: Header=BB120_5 Depth=1
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB120_9
.LBB120_8:                              // %"$11"
                                        //   in Loop: Header=BB120_5 Depth=1
	bl	evList
.LBB120_9:                              // %"$8"
                                        //   in Loop: Header=BB120_5 Depth=1
	ldr	x8, [x22, :lo12:env]
	mov	x9, sp
	sub	x10, x9, #16                    // =16
	mov	sp, x10
	lsr	x11, x0, #32
	lsr	x12, x8, #32
	stp	w0, w11, [x9, #-16]
	stp	w8, w12, [x9, #-8]
	str	x10, [x22, :lo12:env]
	tst	x0, #0xf
	stp	w0, w11, [x27]
	b.ne	.LBB120_11
// %bb.10:                              // %"$13"
                                        //   in Loop: Header=BB120_5 Depth=1
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
.LBB120_11:                             // %"$14"
                                        //   in Loop: Header=BB120_5 Depth=1
	mov	x9, sp
	sub	x8, x9, #48                     // =48
	mov	sp, x8
	stp	w24, w26, [x9, #-40]
	stp	w25, wzr, [x9, #-32]
	lsr	x10, x0, #32
	stur	w10, [x9, #-20]
	mov	x10, x8
	str	w0, [x10, #24]!
	lsr	x11, x8, #32
	stp	w8, w11, [x28, #8]
	ldr	x11, [x22, :lo12:env]
	lsr	x12, x11, #32
	stp	w11, w12, [x9, #-16]
	str	x10, [x22, :lo12:env]
	lsr	x11, x10, #32
	stp	w10, w11, [x9, #-48]
	ldp	w20, w9, [x20, #8]
	bfi	x20, x9, #32, #32
	tst	x20, #0xf
	b.ne	.LBB120_13
// %bb.12:                              // %"$15"
                                        //   in Loop: Header=BB120_5 Depth=1
	sub	x9, sp, #16                     // =16
	mov	sp, x9
	lsr	x10, x9, #32
	stp	w9, w10, [x27, #8]
	mov	x28, x8
	mov	x27, x9
	b	.LBB120_5
.LBB120_13:                             // %"$16"
	adrp	x20, SymTab+8
	add	x20, x20, :lo12:SymTab+8
	ldrb	w8, [x23]
	tst	w8, #0xf
	b.ne	.LBB120_22
	b	.LBB120_20
.LBB120_14:                             // %"$21"
                                        //   in Loop: Header=BB120_20 Depth=1
	ldp	w9, w8, [x23]
	bfi	x9, x8, #32, #32
	ldp	w9, w8, [x9, #8]
	stp	w9, w8, [x23]
	bfi	x9, x8, #32, #32
	tst	x9, #0xf
	b.ne	.LBB120_22
// %bb.15:                              // %"$24"
                                        //   in Loop: Header=BB120_20 Depth=1
	ldp	w8, w10, [x19, #8]
	bfi	x8, x10, #32, #32
	ldp	w10, w11, [x9]
	bfi	x10, x11, #32, #32
	mov	x9, x23
.LBB120_16:                             // %"$26"
                                        //   Parent Loop BB120_20 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	lsr	x11, x10, #32
	stp	w10, w11, [x8, #24]
	ldp	w8, w10, [x8, #8]
	bfi	x8, x10, #32, #32
	tst	x8, #0xf
	b.ne	.LBB120_20
// %bb.17:                              // %"$27"
                                        //   in Loop: Header=BB120_16 Depth=2
	ldp	w9, w10, [x9, #8]
	bfi	x9, x10, #32, #32
	ldp	w10, w11, [x9]
	bfi	x10, x11, #32, #32
	tst	x10, #0xf
	b.ne	.LBB120_16
// %bb.18:                              // %"$30"
                                        //   in Loop: Header=BB120_16 Depth=2
	ldp	w10, w11, [x10, #8]
	stp	w10, w11, [x9]
	bfi	x10, x11, #32, #32
	tst	x10, #0xf
	b.ne	.LBB120_16
// %bb.19:                              // %"$32"
                                        //   in Loop: Header=BB120_16 Depth=2
	ldp	w10, w11, [x10]
	bfi	x10, x11, #32, #32
	b	.LBB120_16
.LBB120_20:                             // %"$20"
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB120_16 Depth 2
	mov	x0, x19
	bl	evList
	cmp	x0, x20
	b.eq	.LBB120_14
// %bb.21:
	mov	x20, x0
.LBB120_22:                             // %"$19"
	ldp	w9, w8, [x21, #8]
	bfi	x9, x8, #32, #32
	str	x9, [x22, :lo12:env]
	mov	x0, x20
	mov	sp, x29
	ldp	x20, x19, [sp, #80]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #64]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #48]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #32]             // 16-byte Folded Reload
	ldp	x28, x27, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #96             // 16-byte Folded Reload
	ret
.Lfunc_end120:
	.size	_pick, .Lfunc_end120-_pick
	.cfi_endproc
                                        // -- End function
	.globl	_fully                          // -- Begin function _fully
	.p2align	4
	.type	_fully,@function
_fully:                                 // @_fully
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-96]!           // 16-byte Folded Spill
	stp	x28, x27, [sp, #16]             // 16-byte Folded Spill
	stp	x26, x25, [sp, #32]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #48]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #64]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #80]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w0, w8, [x9]
	bfi	x0, x8, #32, #32
	ldp	w24, w8, [x9, #8]
	bfi	x24, x8, #32, #32
	tst	x0, #0x6
	b.ne	.LBB121_4
// %bb.1:                               // %"$3"
	tbz	w0, #3, .LBB121_3
// %bb.2:                               // %"$6"
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB121_4
.LBB121_3:                              // %"$5"
	bl	evList
.LBB121_4:                              // %"$2"
	mov	x8, sp
	sub	x19, x8, #48                    // =48
	mov	sp, x19
	adrp	x21, SymTab+8
	add	x21, x21, :lo12:SymTab+8
	mov	w25, #2
	stp	w25, wzr, [x8, #-32]
	lsr	x9, x0, #32
	mov	x20, x19
	lsr	x26, x21, #32
	stp	w21, w26, [x8, #-40]
	stur	w9, [x8, #-20]
	str	w0, [x20, #24]!
	sub	x23, sp, #16                    // =16
	mov	sp, x23
	adrp	x22, env
	ldr	x9, [x22, :lo12:env]
	str	x20, [x22, :lo12:env]
	lsr	x10, x20, #32
	lsr	x11, x9, #32
	stp	w9, w11, [x8, #-16]
	stp	w20, w10, [x8, #-48]
	mov	x28, x19
	mov	x27, x23
.LBB121_5:                              // %"$7"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w0, w8, [x24]
	bfi	x0, x8, #32, #32
	tst	x0, #0x6
	b.ne	.LBB121_9
// %bb.6:                               // %"$9"
                                        //   in Loop: Header=BB121_5 Depth=1
	tbz	w0, #3, .LBB121_8
// %bb.7:                               // %"$12"
                                        //   in Loop: Header=BB121_5 Depth=1
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB121_9
.LBB121_8:                              // %"$11"
                                        //   in Loop: Header=BB121_5 Depth=1
	bl	evList
.LBB121_9:                              // %"$8"
                                        //   in Loop: Header=BB121_5 Depth=1
	ldr	x8, [x22, :lo12:env]
	mov	x9, sp
	sub	x10, x9, #16                    // =16
	mov	sp, x10
	lsr	x11, x0, #32
	lsr	x12, x8, #32
	stp	w0, w11, [x9, #-16]
	stp	w8, w12, [x9, #-8]
	str	x10, [x22, :lo12:env]
	tst	x0, #0xf
	stp	w0, w11, [x27]
	b.ne	.LBB121_11
// %bb.10:                              // %"$13"
                                        //   in Loop: Header=BB121_5 Depth=1
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
.LBB121_11:                             // %"$14"
                                        //   in Loop: Header=BB121_5 Depth=1
	mov	x9, sp
	sub	x8, x9, #48                     // =48
	mov	sp, x8
	stp	w21, w26, [x9, #-40]
	stp	w25, wzr, [x9, #-32]
	lsr	x10, x0, #32
	stur	w10, [x9, #-20]
	mov	x10, x8
	str	w0, [x10, #24]!
	lsr	x11, x8, #32
	stp	w8, w11, [x28, #8]
	ldr	x11, [x22, :lo12:env]
	lsr	x12, x11, #32
	stp	w11, w12, [x9, #-16]
	str	x10, [x22, :lo12:env]
	lsr	x11, x10, #32
	stp	w10, w11, [x9, #-48]
	ldp	w24, w9, [x24, #8]
	bfi	x24, x9, #32, #32
	tst	x24, #0xf
	b.ne	.LBB121_13
// %bb.12:                              // %"$15"
                                        //   in Loop: Header=BB121_5 Depth=1
	sub	x9, sp, #16                     // =16
	mov	sp, x9
	lsr	x10, x9, #32
	stp	w9, w10, [x27, #8]
	mov	x28, x8
	mov	x27, x9
	b	.LBB121_5
.LBB121_13:                             // %"$16"
	ldrb	w8, [x23]
	tst	w8, #0xf
	b.eq	.LBB121_15
// %bb.14:
	adrp	x0, SymTab+216
	add	x0, x0, :lo12:SymTab+216
	b	.LBB121_24
.LBB121_15:                             // %"$20.preheader"
	adrp	x24, SymTab+216
	add	x24, x24, :lo12:SymTab+216
.LBB121_16:                             // %"$20"
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB121_19 Depth 2
	mov	x0, x19
	bl	evList
	cmp	x0, x21
	b.eq	.LBB121_24
// %bb.17:                              // %"$21"
                                        //   in Loop: Header=BB121_16 Depth=1
	ldp	w9, w8, [x23]
	bfi	x9, x8, #32, #32
	ldp	w9, w8, [x9, #8]
	stp	w9, w8, [x23]
	bfi	x9, x8, #32, #32
	tst	x9, #0xf
	b.ne	.LBB121_23
// %bb.18:                              // %"$24"
                                        //   in Loop: Header=BB121_16 Depth=1
	ldp	w8, w10, [x19, #8]
	bfi	x8, x10, #32, #32
	ldp	w10, w11, [x9]
	bfi	x10, x11, #32, #32
	mov	x9, x23
.LBB121_19:                             // %"$26"
                                        //   Parent Loop BB121_16 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	lsr	x11, x10, #32
	stp	w10, w11, [x8, #24]
	ldp	w8, w10, [x8, #8]
	bfi	x8, x10, #32, #32
	tst	x8, #0xf
	b.ne	.LBB121_16
// %bb.20:                              // %"$27"
                                        //   in Loop: Header=BB121_19 Depth=2
	ldp	w9, w10, [x9, #8]
	bfi	x9, x10, #32, #32
	ldp	w10, w11, [x9]
	bfi	x10, x11, #32, #32
	tst	x10, #0xf
	b.ne	.LBB121_19
// %bb.21:                              // %"$30"
                                        //   in Loop: Header=BB121_19 Depth=2
	ldp	w10, w11, [x10, #8]
	stp	w10, w11, [x9]
	bfi	x10, x11, #32, #32
	tst	x10, #0xf
	b.ne	.LBB121_19
// %bb.22:                              // %"$32"
                                        //   in Loop: Header=BB121_19 Depth=2
	ldp	w10, w11, [x10]
	bfi	x10, x11, #32, #32
	b	.LBB121_19
.LBB121_23:
	mov	x0, x24
.LBB121_24:                             // %"$19"
	ldp	w9, w8, [x20, #8]
	bfi	x9, x8, #32, #32
	str	x9, [x22, :lo12:env]
	mov	sp, x29
	ldp	x20, x19, [sp, #80]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #64]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #48]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #32]             // 16-byte Folded Reload
	ldp	x28, x27, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #96             // 16-byte Folded Reload
	ret
.Lfunc_end121:
	.size	_fully, .Lfunc_end121-_fully
	.cfi_endproc
                                        // -- End function
	.globl	_cnt                            // -- Begin function _cnt
	.p2align	4
	.type	_cnt,@function
_cnt:                                   // @_cnt
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-96]!           // 16-byte Folded Spill
	stp	x28, x27, [sp, #16]             // 16-byte Folded Spill
	stp	x26, x25, [sp, #32]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #48]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #64]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #80]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w0, w8, [x9]
	bfi	x0, x8, #32, #32
	ldp	w20, w8, [x9, #8]
	bfi	x20, x8, #32, #32
	tst	x0, #0x6
	b.ne	.LBB122_4
// %bb.1:                               // %"$3"
	tbz	w0, #3, .LBB122_3
// %bb.2:                               // %"$6"
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB122_4
.LBB122_3:                              // %"$5"
	bl	evList
.LBB122_4:                              // %"$2"
	mov	x8, sp
	sub	x19, x8, #48                    // =48
	mov	sp, x19
	adrp	x21, SymTab+8
	add	x21, x21, :lo12:SymTab+8
	mov	w25, #2
	stp	w25, wzr, [x8, #-32]
	lsr	x9, x0, #32
	mov	x22, x19
	lsr	x26, x21, #32
	stp	w21, w26, [x8, #-40]
	stur	w9, [x8, #-20]
	str	w0, [x22, #24]!
	sub	x24, sp, #16                    // =16
	mov	sp, x24
	adrp	x23, env
	ldr	x9, [x23, :lo12:env]
	str	x22, [x23, :lo12:env]
	lsr	x10, x22, #32
	lsr	x11, x9, #32
	stp	w9, w11, [x8, #-16]
	stp	w22, w10, [x8, #-48]
	mov	x28, x19
	mov	x27, x24
.LBB122_5:                              // %"$7"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w0, w8, [x20]
	bfi	x0, x8, #32, #32
	tst	x0, #0x6
	b.ne	.LBB122_9
// %bb.6:                               // %"$9"
                                        //   in Loop: Header=BB122_5 Depth=1
	tbz	w0, #3, .LBB122_8
// %bb.7:                               // %"$12"
                                        //   in Loop: Header=BB122_5 Depth=1
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB122_9
.LBB122_8:                              // %"$11"
                                        //   in Loop: Header=BB122_5 Depth=1
	bl	evList
.LBB122_9:                              // %"$8"
                                        //   in Loop: Header=BB122_5 Depth=1
	ldr	x8, [x23, :lo12:env]
	mov	x9, sp
	sub	x10, x9, #16                    // =16
	mov	sp, x10
	lsr	x11, x0, #32
	lsr	x12, x8, #32
	stp	w0, w11, [x9, #-16]
	stp	w8, w12, [x9, #-8]
	str	x10, [x23, :lo12:env]
	tst	x0, #0xf
	stp	w0, w11, [x27]
	b.ne	.LBB122_11
// %bb.10:                              // %"$13"
                                        //   in Loop: Header=BB122_5 Depth=1
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
.LBB122_11:                             // %"$14"
                                        //   in Loop: Header=BB122_5 Depth=1
	mov	x9, sp
	sub	x8, x9, #48                     // =48
	mov	sp, x8
	stp	w21, w26, [x9, #-40]
	stp	w25, wzr, [x9, #-32]
	lsr	x10, x0, #32
	stur	w10, [x9, #-20]
	mov	x10, x8
	str	w0, [x10, #24]!
	lsr	x11, x8, #32
	stp	w8, w11, [x28, #8]
	ldr	x11, [x23, :lo12:env]
	lsr	x12, x11, #32
	stp	w11, w12, [x9, #-16]
	str	x10, [x23, :lo12:env]
	lsr	x11, x10, #32
	stp	w10, w11, [x9, #-48]
	ldp	w20, w9, [x20, #8]
	bfi	x20, x9, #32, #32
	tst	x20, #0xf
	b.ne	.LBB122_13
// %bb.12:                              // %"$15"
                                        //   in Loop: Header=BB122_5 Depth=1
	sub	x9, sp, #16                     // =16
	mov	sp, x9
	lsr	x10, x9, #32
	stp	w9, w10, [x27, #8]
	mov	x28, x8
	mov	x27, x9
	b	.LBB122_5
.LBB122_13:                             // %"$16"
	ldrb	w8, [x24]
	mov	w20, #2
	tst	w8, #0xf
	b.ne	.LBB122_22
	b	.LBB122_19
.LBB122_14:                             // %"$22"
                                        //   in Loop: Header=BB122_19 Depth=1
	ldp	w8, w10, [x19, #8]
	bfi	x8, x10, #32, #32
	ldp	w10, w11, [x9]
	bfi	x10, x11, #32, #32
	mov	x9, x24
.LBB122_15:                             // %"$24"
                                        //   Parent Loop BB122_19 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	lsr	x11, x10, #32
	stp	w10, w11, [x8, #24]
	ldp	w8, w10, [x8, #8]
	bfi	x8, x10, #32, #32
	tst	x8, #0xf
	b.ne	.LBB122_19
// %bb.16:                              // %"$25"
                                        //   in Loop: Header=BB122_15 Depth=2
	ldp	w9, w10, [x9, #8]
	bfi	x9, x10, #32, #32
	ldp	w10, w11, [x9]
	bfi	x10, x11, #32, #32
	tst	x10, #0xf
	b.ne	.LBB122_15
// %bb.17:                              // %"$28"
                                        //   in Loop: Header=BB122_15 Depth=2
	ldp	w10, w11, [x10, #8]
	stp	w10, w11, [x9]
	bfi	x10, x11, #32, #32
	tst	x10, #0xf
	b.ne	.LBB122_15
// %bb.18:                              // %"$30"
                                        //   in Loop: Header=BB122_15 Depth=2
	ldp	w10, w11, [x10]
	bfi	x10, x11, #32, #32
	b	.LBB122_15
.LBB122_19:                             // %"$19"
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB122_15 Depth 2
	mov	x0, x19
	bl	evList
	cmp	x0, x21
	b.eq	.LBB122_21
// %bb.20:                              // %"$20"
                                        //   in Loop: Header=BB122_19 Depth=1
	add	x20, x20, #16                   // =16
.LBB122_21:                             // %"$21"
                                        //   in Loop: Header=BB122_19 Depth=1
	ldp	w9, w8, [x24]
	bfi	x9, x8, #32, #32
	ldp	w9, w8, [x9, #8]
	stp	w9, w8, [x24]
	bfi	x9, x8, #32, #32
	tst	x9, #0xf
	b.eq	.LBB122_14
.LBB122_22:                             // %"$18"
	ldp	w9, w8, [x22, #8]
	bfi	x9, x8, #32, #32
	str	x9, [x23, :lo12:env]
	mov	x0, x20
	mov	sp, x29
	ldp	x20, x19, [sp, #80]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #64]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #48]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #32]             // 16-byte Folded Reload
	ldp	x28, x27, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #96             // 16-byte Folded Reload
	ret
.Lfunc_end122:
	.size	_cnt, .Lfunc_end122-_cnt
	.cfi_endproc
                                        // -- End function
	.globl	_sum                            // -- Begin function _sum
	.p2align	4
	.type	_sum,@function
_sum:                                   // @_sum
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-96]!           // 16-byte Folded Spill
	str	x27, [sp, #16]                  // 8-byte Folded Spill
	stp	x26, x25, [sp, #32]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #48]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #64]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #80]             // 16-byte Folded Spill
	mov	x29, sp
	sub	sp, sp, #16                     // =16
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	adrp	x21, env
	ldr	x8, [x21, :lo12:env]
	mov	w10, #2
	stp	x10, x8, [x29, #-16]
	sub	x8, x29, #16                    // =16
	str	x8, [x21, :lo12:env]
	ldp	w0, w8, [x9]
	bfi	x0, x8, #32, #32
	ldp	w20, w8, [x9, #8]
	bfi	x20, x8, #32, #32
	tst	x0, #0x6
	b.ne	.LBB123_4
// %bb.1:                               // %"$3"
	tbz	w0, #3, .LBB123_3
// %bb.2:                               // %"$6"
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB123_4
.LBB123_3:                              // %"$5"
	bl	evList
.LBB123_4:                              // %"$2"
	mov	x8, sp
	sub	x19, x8, #48                    // =48
	mov	sp, x19
	adrp	x23, SymTab+8
	add	x23, x23, :lo12:SymTab+8
	mov	w24, #2
	stp	w24, wzr, [x8, #-32]
	lsr	x9, x0, #32
	mov	x10, x19
	lsr	x25, x23, #32
	stp	w23, w25, [x8, #-40]
	stur	w9, [x8, #-20]
	str	w0, [x10, #24]!
	sub	x22, sp, #16                    // =16
	mov	sp, x22
	ldr	x9, [x21, :lo12:env]
	str	x10, [x21, :lo12:env]
	lsr	x11, x10, #32
	lsr	x12, x9, #32
	stp	w9, w12, [x8, #-16]
	stp	w10, w11, [x8, #-48]
	mov	x27, x19
	mov	x26, x22
.LBB123_5:                              // %"$7"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w0, w8, [x20]
	bfi	x0, x8, #32, #32
	tst	x0, #0x6
	b.ne	.LBB123_9
// %bb.6:                               // %"$9"
                                        //   in Loop: Header=BB123_5 Depth=1
	tbz	w0, #3, .LBB123_8
// %bb.7:                               // %"$12"
                                        //   in Loop: Header=BB123_5 Depth=1
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB123_9
.LBB123_8:                              // %"$11"
                                        //   in Loop: Header=BB123_5 Depth=1
	bl	evList
.LBB123_9:                              // %"$8"
                                        //   in Loop: Header=BB123_5 Depth=1
	ldr	x8, [x21, :lo12:env]
	mov	x9, sp
	sub	x10, x9, #16                    // =16
	mov	sp, x10
	lsr	x11, x0, #32
	lsr	x12, x8, #32
	stp	w0, w11, [x9, #-16]
	stp	w8, w12, [x9, #-8]
	str	x10, [x21, :lo12:env]
	tst	x0, #0xf
	stp	w0, w11, [x26]
	b.ne	.LBB123_11
// %bb.10:                              // %"$13"
                                        //   in Loop: Header=BB123_5 Depth=1
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
.LBB123_11:                             // %"$14"
                                        //   in Loop: Header=BB123_5 Depth=1
	mov	x9, sp
	sub	x8, x9, #48                     // =48
	mov	sp, x8
	stp	w23, w25, [x9, #-40]
	stp	w24, wzr, [x9, #-32]
	lsr	x10, x0, #32
	stur	w10, [x9, #-20]
	mov	x10, x8
	str	w0, [x10, #24]!
	lsr	x11, x8, #32
	stp	w8, w11, [x27, #8]
	ldr	x11, [x21, :lo12:env]
	lsr	x12, x11, #32
	stp	w11, w12, [x9, #-16]
	str	x10, [x21, :lo12:env]
	lsr	x11, x10, #32
	stp	w10, w11, [x9, #-48]
	ldp	w20, w9, [x20, #8]
	bfi	x20, x9, #32, #32
	tst	x20, #0xf
	b.ne	.LBB123_13
// %bb.12:                              // %"$15"
                                        //   in Loop: Header=BB123_5 Depth=1
	sub	x9, sp, #16                     // =16
	mov	sp, x9
	lsr	x10, x9, #32
	stp	w9, w10, [x26, #8]
	mov	x27, x8
	mov	x26, x9
	b	.LBB123_5
.LBB123_13:                             // %"$16"
	ldrb	w8, [x22]
	mov	w20, #2
	tst	w8, #0xf
	b.ne	.LBB123_22
	b	.LBB123_19
.LBB123_14:                             // %"$22"
                                        //   in Loop: Header=BB123_19 Depth=1
	ldp	w8, w10, [x19, #8]
	bfi	x8, x10, #32, #32
	ldp	w10, w11, [x9]
	bfi	x10, x11, #32, #32
	mov	x9, x22
.LBB123_15:                             // %"$24"
                                        //   Parent Loop BB123_19 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	lsr	x11, x10, #32
	stp	w10, w11, [x8, #24]
	ldp	w8, w10, [x8, #8]
	bfi	x8, x10, #32, #32
	tst	x8, #0xf
	b.ne	.LBB123_19
// %bb.16:                              // %"$25"
                                        //   in Loop: Header=BB123_15 Depth=2
	ldp	w9, w10, [x9, #8]
	bfi	x9, x10, #32, #32
	ldp	w10, w11, [x9]
	bfi	x10, x11, #32, #32
	tst	x10, #0xf
	b.ne	.LBB123_15
// %bb.17:                              // %"$28"
                                        //   in Loop: Header=BB123_15 Depth=2
	ldp	w10, w11, [x10, #8]
	stp	w10, w11, [x9]
	bfi	x10, x11, #32, #32
	tst	x10, #0xf
	b.ne	.LBB123_15
// %bb.18:                              // %"$30"
                                        //   in Loop: Header=BB123_15 Depth=2
	ldp	w10, w11, [x10]
	bfi	x10, x11, #32, #32
	b	.LBB123_15
.LBB123_19:                             // %"$19"
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB123_15 Depth 2
	mov	x0, x19
	bl	evList
	tst	x0, #0x6
	b.eq	.LBB123_21
// %bb.20:                              // %"$20"
                                        //   in Loop: Header=BB123_19 Depth=1
	mov	x1, x0
	ldr	x8, [x21, :lo12:env]
	mov	x9, sp
	sub	x10, x9, #16                    // =16
	mov	sp, x10
	lsr	x11, x0, #32
	mov	x23, x10
	stp	w1, w11, [x9, #-16]
	str	w8, [x23, #8]!
	lsr	x8, x8, #32
	str	w8, [x23, #4]
	str	x10, [x21, :lo12:env]
	mov	x0, x20
	bl	adds
	mov	x20, x0
	stur	x0, [x29, #-16]
	ldp	w9, w8, [x23]
	bfi	x9, x8, #32, #32
	str	x9, [x21, :lo12:env]
.LBB123_21:                             // %"$21"
                                        //   in Loop: Header=BB123_19 Depth=1
	ldp	w9, w8, [x22]
	bfi	x9, x8, #32, #32
	ldp	w9, w8, [x9, #8]
	stp	w9, w8, [x22]
	bfi	x9, x8, #32, #32
	tst	x9, #0xf
	b.eq	.LBB123_14
.LBB123_22:                             // %"$18"
	ldur	x8, [x29, #-8]
	str	x8, [x21, :lo12:env]
	mov	x0, x20
	mov	sp, x29
	ldp	x20, x19, [sp, #80]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #64]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #48]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #32]             // 16-byte Folded Reload
	ldr	x27, [sp, #16]                  // 8-byte Folded Reload
	ldp	x29, x30, [sp], #96             // 16-byte Folded Reload
	ret
.Lfunc_end123:
	.size	_sum, .Lfunc_end123-_sum
	.cfi_endproc
                                        // -- End function
	.globl	_maxi                           // -- Begin function _maxi
	.p2align	4
	.type	_maxi,@function
_maxi:                                  // @_maxi
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-96]!           // 16-byte Folded Spill
	str	x27, [sp, #16]                  // 8-byte Folded Spill
	stp	x26, x25, [sp, #32]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #48]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #64]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #80]             // 16-byte Folded Spill
	mov	x29, sp
	sub	sp, sp, #16                     // =16
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	adrp	x23, env
	adrp	x20, SymTab+8
	add	x20, x20, :lo12:SymTab+8
	ldr	x8, [x23, :lo12:env]
	stp	x20, x8, [x29, #-16]
	sub	x8, x29, #16                    // =16
	str	x8, [x23, :lo12:env]
	ldp	w0, w8, [x9]
	bfi	x0, x8, #32, #32
	ldp	w21, w8, [x9, #8]
	bfi	x21, x8, #32, #32
	tst	x0, #0x6
	b.ne	.LBB124_4
// %bb.1:                               // %"$3"
	tbz	w0, #3, .LBB124_3
// %bb.2:                               // %"$6"
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB124_4
.LBB124_3:                              // %"$5"
	bl	evList
.LBB124_4:                              // %"$2"
	mov	x8, sp
	sub	x19, x8, #48                    // =48
	mov	sp, x19
	lsr	x22, x20, #32
	mov	w25, #2
	stp	w20, w22, [x8, #-40]
	stp	w25, wzr, [x8, #-32]
	lsr	x9, x0, #32
	mov	x10, x19
	stur	w9, [x8, #-20]
	str	w0, [x10, #24]!
	sub	x24, sp, #16                    // =16
	mov	sp, x24
	ldr	x9, [x23, :lo12:env]
	str	x10, [x23, :lo12:env]
	lsr	x11, x10, #32
	lsr	x12, x9, #32
	stp	w9, w12, [x8, #-16]
	stp	w10, w11, [x8, #-48]
	mov	x27, x19
	mov	x26, x24
.LBB124_5:                              // %"$7"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w0, w8, [x21]
	bfi	x0, x8, #32, #32
	tst	x0, #0x6
	b.ne	.LBB124_9
// %bb.6:                               // %"$9"
                                        //   in Loop: Header=BB124_5 Depth=1
	tbz	w0, #3, .LBB124_8
// %bb.7:                               // %"$12"
                                        //   in Loop: Header=BB124_5 Depth=1
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB124_9
.LBB124_8:                              // %"$11"
                                        //   in Loop: Header=BB124_5 Depth=1
	bl	evList
.LBB124_9:                              // %"$8"
                                        //   in Loop: Header=BB124_5 Depth=1
	ldr	x8, [x23, :lo12:env]
	mov	x9, sp
	sub	x10, x9, #16                    // =16
	mov	sp, x10
	lsr	x11, x0, #32
	lsr	x12, x8, #32
	stp	w0, w11, [x9, #-16]
	stp	w8, w12, [x9, #-8]
	str	x10, [x23, :lo12:env]
	tst	x0, #0xf
	stp	w0, w11, [x26]
	b.ne	.LBB124_11
// %bb.10:                              // %"$13"
                                        //   in Loop: Header=BB124_5 Depth=1
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
.LBB124_11:                             // %"$14"
                                        //   in Loop: Header=BB124_5 Depth=1
	mov	x9, sp
	sub	x8, x9, #48                     // =48
	mov	sp, x8
	stp	w20, w22, [x9, #-40]
	stp	w25, wzr, [x9, #-32]
	lsr	x10, x0, #32
	stur	w10, [x9, #-20]
	mov	x10, x8
	str	w0, [x10, #24]!
	lsr	x11, x8, #32
	stp	w8, w11, [x27, #8]
	ldr	x11, [x23, :lo12:env]
	lsr	x12, x11, #32
	stp	w11, w12, [x9, #-16]
	str	x10, [x23, :lo12:env]
	lsr	x11, x10, #32
	stp	w10, w11, [x9, #-48]
	ldp	w21, w9, [x21, #8]
	bfi	x21, x9, #32, #32
	tst	x21, #0xf
	b.ne	.LBB124_13
// %bb.12:                              // %"$15"
                                        //   in Loop: Header=BB124_5 Depth=1
	sub	x9, sp, #16                     // =16
	mov	sp, x9
	lsr	x10, x9, #32
	stp	w9, w10, [x26, #8]
	mov	x27, x8
	mov	x26, x9
	b	.LBB124_5
.LBB124_13:                             // %"$16"
	ldrb	w8, [x24]
	adrp	x20, SymTab+8
	add	x20, x20, :lo12:SymTab+8
	mov	x21, x20
	tst	w8, #0xf
	b.ne	.LBB124_22
	b	.LBB124_19
.LBB124_14:                             // %"$22"
                                        //   in Loop: Header=BB124_19 Depth=1
	ldp	w8, w10, [x19, #8]
	bfi	x8, x10, #32, #32
	ldp	w10, w11, [x9]
	bfi	x10, x11, #32, #32
	mov	x9, x24
.LBB124_15:                             // %"$24"
                                        //   Parent Loop BB124_19 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	lsr	x11, x10, #32
	stp	w10, w11, [x8, #24]
	ldp	w8, w10, [x8, #8]
	bfi	x8, x10, #32, #32
	tst	x8, #0xf
	b.ne	.LBB124_19
// %bb.16:                              // %"$25"
                                        //   in Loop: Header=BB124_15 Depth=2
	ldp	w9, w10, [x9, #8]
	bfi	x9, x10, #32, #32
	ldp	w10, w11, [x9]
	bfi	x10, x11, #32, #32
	tst	x10, #0xf
	b.ne	.LBB124_15
// %bb.17:                              // %"$28"
                                        //   in Loop: Header=BB124_15 Depth=2
	ldp	w10, w11, [x10, #8]
	stp	w10, w11, [x9]
	bfi	x10, x11, #32, #32
	tst	x10, #0xf
	b.ne	.LBB124_15
// %bb.18:                              // %"$30"
                                        //   in Loop: Header=BB124_15 Depth=2
	ldp	w10, w11, [x10]
	bfi	x10, x11, #32, #32
	b	.LBB124_15
.LBB124_19:                             // %"$19"
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB124_15 Depth 2
	mov	x0, x19
	bl	evList
	mov	x22, x0
	mov	x1, x21
	bl	compare
	cmp	x0, #1                          // =1
	b.lt	.LBB124_21
// %bb.20:                              // %"$20"
                                        //   in Loop: Header=BB124_19 Depth=1
	ldp	w9, w8, [x24]
	bfi	x9, x8, #32, #32
	ldp	w20, w8, [x9]
	bfi	x20, x8, #32, #32
	stur	x22, [x29, #-16]
	mov	x21, x22
.LBB124_21:                             // %"$21"
                                        //   in Loop: Header=BB124_19 Depth=1
	ldp	w9, w8, [x24]
	bfi	x9, x8, #32, #32
	ldp	w9, w8, [x9, #8]
	stp	w9, w8, [x24]
	bfi	x9, x8, #32, #32
	tst	x9, #0xf
	b.eq	.LBB124_14
.LBB124_22:                             // %"$18"
	adrp	x8, SymTab+392
	str	x21, [x8, :lo12:SymTab+392]
	ldur	x8, [x29, #-8]
	str	x8, [x23, :lo12:env]
	mov	x0, x20
	mov	sp, x29
	ldp	x20, x19, [sp, #80]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #64]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #48]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #32]             // 16-byte Folded Reload
	ldr	x27, [sp, #16]                  // 8-byte Folded Reload
	ldp	x29, x30, [sp], #96             // 16-byte Folded Reload
	ret
.Lfunc_end124:
	.size	_maxi, .Lfunc_end124-_maxi
	.cfi_endproc
                                        // -- End function
	.globl	_mini                           // -- Begin function _mini
	.p2align	4
	.type	_mini,@function
_mini:                                  // @_mini
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-96]!           // 16-byte Folded Spill
	str	x27, [sp, #16]                  // 8-byte Folded Spill
	stp	x26, x25, [sp, #32]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #48]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #64]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #80]             // 16-byte Folded Spill
	mov	x29, sp
	sub	sp, sp, #16                     // =16
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	adrp	x23, env
	adrp	x8, SymTab+216
	add	x8, x8, :lo12:SymTab+216
	ldr	x10, [x23, :lo12:env]
	stp	x8, x10, [x29, #-16]
	sub	x8, x29, #16                    // =16
	str	x8, [x23, :lo12:env]
	ldp	w0, w8, [x9]
	bfi	x0, x8, #32, #32
	ldp	w21, w8, [x9, #8]
	bfi	x21, x8, #32, #32
	tst	x0, #0x6
	b.ne	.LBB125_4
// %bb.1:                               // %"$3"
	tbz	w0, #3, .LBB125_3
// %bb.2:                               // %"$6"
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB125_4
.LBB125_3:                              // %"$5"
	bl	evList
.LBB125_4:                              // %"$2"
	mov	x8, sp
	sub	x20, x8, #48                    // =48
	mov	sp, x20
	adrp	x19, SymTab+8
	add	x19, x19, :lo12:SymTab+8
	mov	w22, #2
	stp	w22, wzr, [x8, #-32]
	lsr	x9, x0, #32
	mov	x10, x20
	lsr	x25, x19, #32
	stp	w19, w25, [x8, #-40]
	stur	w9, [x8, #-20]
	str	w0, [x10, #24]!
	sub	x24, sp, #16                    // =16
	mov	sp, x24
	ldr	x9, [x23, :lo12:env]
	str	x10, [x23, :lo12:env]
	lsr	x11, x10, #32
	lsr	x12, x9, #32
	stp	w9, w12, [x8, #-16]
	stp	w10, w11, [x8, #-48]
	mov	x27, x20
	mov	x26, x24
.LBB125_5:                              // %"$7"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w0, w8, [x21]
	bfi	x0, x8, #32, #32
	tst	x0, #0x6
	b.ne	.LBB125_9
// %bb.6:                               // %"$9"
                                        //   in Loop: Header=BB125_5 Depth=1
	tbz	w0, #3, .LBB125_8
// %bb.7:                               // %"$12"
                                        //   in Loop: Header=BB125_5 Depth=1
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB125_9
.LBB125_8:                              // %"$11"
                                        //   in Loop: Header=BB125_5 Depth=1
	bl	evList
.LBB125_9:                              // %"$8"
                                        //   in Loop: Header=BB125_5 Depth=1
	ldr	x8, [x23, :lo12:env]
	mov	x9, sp
	sub	x10, x9, #16                    // =16
	mov	sp, x10
	lsr	x11, x0, #32
	lsr	x12, x8, #32
	stp	w0, w11, [x9, #-16]
	stp	w8, w12, [x9, #-8]
	str	x10, [x23, :lo12:env]
	tst	x0, #0xf
	stp	w0, w11, [x26]
	b.ne	.LBB125_11
// %bb.10:                              // %"$13"
                                        //   in Loop: Header=BB125_5 Depth=1
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
.LBB125_11:                             // %"$14"
                                        //   in Loop: Header=BB125_5 Depth=1
	mov	x9, sp
	sub	x8, x9, #48                     // =48
	mov	sp, x8
	stp	w19, w25, [x9, #-40]
	stp	w22, wzr, [x9, #-32]
	lsr	x10, x0, #32
	stur	w10, [x9, #-20]
	mov	x10, x8
	str	w0, [x10, #24]!
	lsr	x11, x8, #32
	stp	w8, w11, [x27, #8]
	ldr	x11, [x23, :lo12:env]
	lsr	x12, x11, #32
	stp	w11, w12, [x9, #-16]
	str	x10, [x23, :lo12:env]
	lsr	x11, x10, #32
	stp	w10, w11, [x9, #-48]
	ldp	w21, w9, [x21, #8]
	bfi	x21, x9, #32, #32
	tst	x21, #0xf
	b.ne	.LBB125_13
// %bb.12:                              // %"$15"
                                        //   in Loop: Header=BB125_5 Depth=1
	sub	x9, sp, #16                     // =16
	mov	sp, x9
	lsr	x10, x9, #32
	stp	w9, w10, [x26, #8]
	mov	x27, x8
	mov	x26, x9
	b	.LBB125_5
.LBB125_13:                             // %"$16"
	add	x21, x19, #208                  // =208
	ldrb	w8, [x24]
	tst	w8, #0xf
	b.ne	.LBB125_22
	b	.LBB125_19
.LBB125_14:                             // %"$22"
                                        //   in Loop: Header=BB125_19 Depth=1
	ldp	w8, w10, [x20, #8]
	bfi	x8, x10, #32, #32
	ldp	w10, w11, [x9]
	bfi	x10, x11, #32, #32
	mov	x9, x24
.LBB125_15:                             // %"$24"
                                        //   Parent Loop BB125_19 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	lsr	x11, x10, #32
	stp	w10, w11, [x8, #24]
	ldp	w8, w10, [x8, #8]
	bfi	x8, x10, #32, #32
	tst	x8, #0xf
	b.ne	.LBB125_19
// %bb.16:                              // %"$25"
                                        //   in Loop: Header=BB125_15 Depth=2
	ldp	w9, w10, [x9, #8]
	bfi	x9, x10, #32, #32
	ldp	w10, w11, [x9]
	bfi	x10, x11, #32, #32
	tst	x10, #0xf
	b.ne	.LBB125_15
// %bb.17:                              // %"$28"
                                        //   in Loop: Header=BB125_15 Depth=2
	ldp	w10, w11, [x10, #8]
	stp	w10, w11, [x9]
	bfi	x10, x11, #32, #32
	tst	x10, #0xf
	b.ne	.LBB125_15
// %bb.18:                              // %"$30"
                                        //   in Loop: Header=BB125_15 Depth=2
	ldp	w10, w11, [x10]
	bfi	x10, x11, #32, #32
	b	.LBB125_15
.LBB125_19:                             // %"$19"
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB125_15 Depth 2
	mov	x0, x20
	bl	evList
	mov	x22, x0
	mov	x1, x21
	bl	compare
	tbz	x0, #63, .LBB125_21
// %bb.20:                              // %"$20"
                                        //   in Loop: Header=BB125_19 Depth=1
	ldp	w9, w8, [x24]
	bfi	x9, x8, #32, #32
	ldp	w19, w8, [x9]
	bfi	x19, x8, #32, #32
	stur	x22, [x29, #-16]
	mov	x21, x22
.LBB125_21:                             // %"$21"
                                        //   in Loop: Header=BB125_19 Depth=1
	ldp	w9, w8, [x24]
	bfi	x9, x8, #32, #32
	ldp	w9, w8, [x9, #8]
	stp	w9, w8, [x24]
	bfi	x9, x8, #32, #32
	tst	x9, #0xf
	b.eq	.LBB125_14
.LBB125_22:                             // %"$18"
	adrp	x8, SymTab+392
	str	x21, [x8, :lo12:SymTab+392]
	ldur	x8, [x29, #-8]
	str	x8, [x23, :lo12:env]
	mov	x0, x19
	mov	sp, x29
	ldp	x20, x19, [sp, #80]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #64]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #48]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #32]             // 16-byte Folded Reload
	ldr	x27, [sp, #16]                  // 8-byte Folded Reload
	ldp	x29, x30, [sp], #96             // 16-byte Folded Reload
	ret
.Lfunc_end125:
	.size	_mini, .Lfunc_end125-_mini
	.cfi_endproc
                                        // -- End function
	.globl	_fish                           // -- Begin function _fish
	.p2align	4
	.type	_fish,@function
_fish:                                  // @_fish
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-64]!           // 16-byte Folded Spill
	str	x23, [sp, #16]                  // 8-byte Folded Spill
	stp	x22, x21, [sp, #32]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #48]             // 16-byte Folded Spill
	mov	x29, sp
	sub	sp, sp, #48                     // =48
	.cfi_def_cfa w29, 64
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -48
	.cfi_offset w30, -56
	.cfi_offset w29, -64
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	adrp	x8, SymTab+8
	add	x8, x8, :lo12:SymTab+8
	adrp	x22, env
	ldr	x10, [x22, :lo12:env]
	stp	x8, x10, [x29, #-16]
	sub	x10, x29, #16                   // =16
	str	x10, [x22, :lo12:env]
	mov	w10, #2
	stp	x8, x10, [x29, #-40]
	ldp	w0, w8, [x9]
	bfi	x0, x8, #32, #32
	ldp	w23, w8, [x9, #8]
	bfi	x23, x8, #32, #32
	tst	x0, #0x6
	b.ne	.LBB126_4
// %bb.1:                               // %"$3"
	tbz	w0, #3, .LBB126_3
// %bb.2:                               // %"$6"
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB126_4
.LBB126_3:                              // %"$5"
	bl	evList
.LBB126_4:                              // %"$2"
	mov	x8, sp
	sub	x19, x8, #48                    // =48
	mov	sp, x19
	sub	x9, x29, #48                    // =48
	lsr	x10, x9, #32
	stp	w9, w10, [x8, #-40]
	mov	w10, #2
	stp	w10, wzr, [x8, #-32]
	lsr	x10, x0, #32
	mov	x11, x19
	str	w0, [x11, #24]!
	stur	w10, [x8, #-20]
	add	x20, x9, #24                    // =24
	stur	x20, [x29, #-48]
	ldr	x9, [x22, :lo12:env]
	lsr	x10, x9, #32
	stp	w9, w10, [x8, #-16]
	str	x11, [x22, :lo12:env]
	lsr	x9, x11, #32
	stp	w11, w9, [x8, #-48]
	ldp	w21, w8, [x23]
	bfi	x21, x8, #32, #32
	ldp	w23, w8, [x23, #8]
	bfi	x23, x8, #32, #32
	tst	x21, #0x6
	b.ne	.LBB126_8
// %bb.5:                               // %"$8"
	tbz	w21, #3, .LBB126_7
// %bb.6:                               // %"$11"
	ldp	w21, w8, [x21]
	bfi	x21, x8, #32, #32
	b	.LBB126_8
.LBB126_7:                              // %"$10"
	mov	x0, x21
	bl	evList
	mov	x21, x0
.LBB126_8:                              // %"$7"
	ldr	x8, [x22, :lo12:env]
	mov	x9, sp
	sub	x10, x9, #16                    // =16
	mov	sp, x10
	lsr	x11, x21, #32
	stp	w21, w11, [x9, #-16]
	lsr	x11, x8, #32
	stp	w8, w11, [x9, #-8]
	str	x10, [x22, :lo12:env]
	ldp	w4, w8, [x23]
	bfi	x4, x8, #32, #32
	tst	x4, #0x6
	b.ne	.LBB126_12
// %bb.9:                               // %"$13"
	tbz	w4, #3, .LBB126_11
// %bb.10:                              // %"$16"
	ldp	w4, w8, [x4]
	bfi	x4, x8, #32, #32
	b	.LBB126_12
.LBB126_11:                             // %"$15"
	mov	x0, x4
	bl	evList
	mov	x4, x0
.LBB126_12:                             // %"$12"
	sub	x3, x29, #16                    // =16
	mov	x0, x19
	mov	x1, x21
	mov	x2, x20
	bl	fish
	ldp	x0, x8, [x29, #-16]
	str	x8, [x22, :lo12:env]
	mov	sp, x29
	ldp	x20, x19, [sp, #48]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #32]             // 16-byte Folded Reload
	ldr	x23, [sp, #16]                  // 8-byte Folded Reload
	ldp	x29, x30, [sp], #64             // 16-byte Folded Reload
	ret
.Lfunc_end126:
	.size	_fish, .Lfunc_end126-_fish
	.cfi_endproc
                                        // -- End function
	.globl	_by                             // -- Begin function _by
	.p2align	4
	.type	_by,@function
_by:                                    // @_by
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-96]!           // 16-byte Folded Spill
	stp	x28, x27, [sp, #16]             // 16-byte Folded Spill
	stp	x26, x25, [sp, #32]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #48]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #64]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #80]             // 16-byte Folded Spill
	mov	x29, sp
	sub	sp, sp, #32                     // =32
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	adrp	x22, env
	adrp	x21, SymTab+8
	add	x21, x21, :lo12:SymTab+8
	ldr	x8, [x22, :lo12:env]
	stp	x21, x8, [x29, #-16]
	sub	x8, x29, #16                    // =16
	str	x8, [x22, :lo12:env]
	ldp	w0, w8, [x9]
	bfi	x0, x8, #32, #32
	ldp	w19, w8, [x9, #8]
	bfi	x19, x8, #32, #32
	tst	x0, #0x6
	b.ne	.LBB127_4
// %bb.1:                               // %"$3"
	tbz	w0, #3, .LBB127_3
// %bb.2:                               // %"$6"
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB127_4
.LBB127_3:                              // %"$5"
	bl	evList
.LBB127_4:                              // %"$2"
	mov	x8, sp
	sub	x24, x8, #48                    // =48
	mov	sp, x24
	lsr	x25, x21, #32
	mov	w9, #2
	stp	w21, w25, [x8, #-40]
	stp	w9, wzr, [x8, #-32]
	lsr	x9, x0, #32
	stp	w0, w9, [x8, #-24]
	sub	x23, sp, #16                    // =16
	mov	sp, x23
	ldp	w20, w8, [x19]
	bfi	x20, x8, #32, #32
	ldp	w26, w8, [x19, #8]
	bfi	x26, x8, #32, #32
	tst	x20, #0x6
	b.ne	.LBB127_8
// %bb.5:                               // %"$8"
	tbz	w20, #3, .LBB127_7
// %bb.6:                               // %"$11"
	ldp	w20, w8, [x20]
	bfi	x20, x8, #32, #32
	b	.LBB127_8
.LBB127_7:                              // %"$10"
	mov	x0, x20
	bl	evList
	mov	x20, x0
.LBB127_8:                              // %"$7"
	ldr	x8, [x22, :lo12:env]
	mov	x9, sp
	sub	x10, x9, #16                    // =16
	mov	sp, x10
	lsr	x12, x20, #32
	lsr	x11, x8, #32
	stur	x12, [x29, #-24]                // 8-byte Folded Spill
	stp	w20, w12, [x9, #-16]
	stp	w8, w11, [x9, #-8]
	str	x10, [x22, :lo12:env]
	add	x8, x24, #24                    // =24
	lsr	x9, x10, #32
	stp	w10, w9, [x24, #32]
	str	x8, [x22, :lo12:env]
	lsr	x9, x8, #32
	mov	w27, #2
	mov	x19, x24
	mov	x28, x23
	stp	w8, w9, [x24]
.LBB127_9:                              // %"$12"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w0, w8, [x26]
	bfi	x0, x8, #32, #32
	tst	x0, #0x6
	b.ne	.LBB127_13
// %bb.10:                              // %"$14"
                                        //   in Loop: Header=BB127_9 Depth=1
	tbz	w0, #3, .LBB127_12
// %bb.11:                              // %"$17"
                                        //   in Loop: Header=BB127_9 Depth=1
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB127_13
.LBB127_12:                             // %"$16"
                                        //   in Loop: Header=BB127_9 Depth=1
	bl	evList
.LBB127_13:                             // %"$13"
                                        //   in Loop: Header=BB127_9 Depth=1
	ldr	x8, [x22, :lo12:env]
	mov	x9, sp
	sub	x10, x9, #16                    // =16
	mov	sp, x10
	lsr	x11, x0, #32
	lsr	x12, x8, #32
	stp	w0, w11, [x9, #-16]
	stp	w8, w12, [x9, #-8]
	str	x10, [x22, :lo12:env]
	tst	x0, #0xf
	stp	w0, w11, [x28]
	b.ne	.LBB127_15
// %bb.14:                              // %"$18"
                                        //   in Loop: Header=BB127_9 Depth=1
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
.LBB127_15:                             // %"$19"
                                        //   in Loop: Header=BB127_9 Depth=1
	mov	x9, sp
	sub	x8, x9, #48                     // =48
	mov	sp, x8
	stp	w21, w25, [x9, #-40]
	stp	w27, wzr, [x9, #-32]
	lsr	x10, x0, #32
	stur	w10, [x9, #-20]
	mov	x10, x8
	str	w0, [x10, #24]!
	lsr	x11, x8, #32
	stp	w8, w11, [x19, #8]
	ldr	x11, [x22, :lo12:env]
	lsr	x12, x11, #32
	stp	w11, w12, [x9, #-16]
	str	x10, [x22, :lo12:env]
	lsr	x11, x10, #32
	stp	w10, w11, [x9, #-48]
	ldp	w26, w9, [x26, #8]
	bfi	x26, x9, #32, #32
	tst	x26, #0xf
	b.ne	.LBB127_17
// %bb.16:                              // %"$20"
                                        //   in Loop: Header=BB127_9 Depth=1
	sub	x9, sp, #16                     // =16
	mov	sp, x9
	lsr	x10, x9, #32
	stp	w9, w10, [x28, #8]
	mov	x19, x8
	mov	x28, x9
	b	.LBB127_9
.LBB127_17:                             // %"$21"
	ldrb	w8, [x23]
	tst	w8, #0xf
	b.eq	.LBB127_19
// %bb.18:
	adrp	x0, SymTab+8
	add	x0, x0, :lo12:SymTab+8
	b	.LBB127_32
.LBB127_19:                             // %"$24.preheader"
	mov	x19, xzr
	adrp	x21, SymTab+8
	add	x21, x21, :lo12:SymTab+8
	mov	x25, x21
	b	.LBB127_21
.LBB127_20:                             //   in Loop: Header=BB127_21 Depth=1
	mov	x19, x0
.LBB127_21:                             // %"$24"
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB127_26 Depth 2
	mov	x0, x24
	bl	evList
	ldp	w9, w8, [x23]
	bfi	x9, x8, #32, #32
	ldp	w1, w8, [x9]
	bfi	x1, x8, #32, #32
	bl	cons
	mov	x1, x21
	bl	cons
	cbz	x19, .LBB127_23
// %bb.22:                              // %"$25"
                                        //   in Loop: Header=BB127_21 Depth=1
	add	x8, x19, #8                     // =8
	b	.LBB127_24
.LBB127_23:                             // %"$26"
                                        //   in Loop: Header=BB127_21 Depth=1
	sub	x8, x29, #16                    // =16
	mov	x25, x0
.LBB127_24:                             // %"$27"
                                        //   in Loop: Header=BB127_21 Depth=1
	lsr	x9, x0, #32
	stp	w0, w9, [x8]
	ldp	w9, w8, [x23]
	bfi	x9, x8, #32, #32
	ldp	w9, w8, [x9, #8]
	stp	w9, w8, [x23]
	bfi	x9, x8, #32, #32
	tst	x9, #0xf
	b.ne	.LBB127_30
// %bb.25:                              // %"$28"
                                        //   in Loop: Header=BB127_21 Depth=1
	ldp	w8, w10, [x24, #8]
	bfi	x8, x10, #32, #32
	ldp	w10, w11, [x9]
	bfi	x10, x11, #32, #32
	mov	x9, x23
.LBB127_26:                             // %"$30"
                                        //   Parent Loop BB127_21 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	lsr	x11, x10, #32
	stp	w10, w11, [x8, #24]
	ldp	w8, w10, [x8, #8]
	bfi	x8, x10, #32, #32
	tst	x8, #0xf
	b.ne	.LBB127_20
// %bb.27:                              // %"$31"
                                        //   in Loop: Header=BB127_26 Depth=2
	ldp	w9, w10, [x9, #8]
	bfi	x9, x10, #32, #32
	ldp	w10, w11, [x9]
	bfi	x10, x11, #32, #32
	tst	x10, #0xf
	b.ne	.LBB127_26
// %bb.28:                              // %"$34"
                                        //   in Loop: Header=BB127_26 Depth=2
	ldp	w10, w11, [x10, #8]
	stp	w10, w11, [x9]
	bfi	x10, x11, #32, #32
	tst	x10, #0xf
	b.ne	.LBB127_26
// %bb.29:                              // %"$36"
                                        //   in Loop: Header=BB127_26 Depth=2
	ldp	w10, w11, [x10]
	bfi	x10, x11, #32, #32
	b	.LBB127_26
.LBB127_30:                             // %"$29"
	ldur	x8, [x29, #-24]                 // 8-byte Folded Reload
	stp	w20, w8, [x24, #24]
	ldp	w9, w8, [x24, #8]
	bfi	x9, x8, #32, #32
	lsr	x8, x25, #32
	stp	w25, w8, [x9, #24]
	mov	x0, x24
	bl	evList
	stur	x0, [x29, #-16]
	mov	x8, x0
.LBB127_31:                             // %"$38"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w10, w9, [x8]
	bfi	x10, x9, #32, #32
	ldp	w10, w9, [x10, #8]
	stp	w10, w9, [x8]
	ldp	w8, w9, [x8, #8]
	bfi	x8, x9, #32, #32
	tst	x8, #0xf
	b.eq	.LBB127_31
.LBB127_32:                             // %"$23"
	ldur	x8, [x29, #-8]
	str	x8, [x22, :lo12:env]
	mov	sp, x29
	ldp	x20, x19, [sp, #80]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #64]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #48]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #32]             // 16-byte Folded Reload
	ldp	x28, x27, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #96             // 16-byte Folded Reload
	ret
.Lfunc_end127:
	.size	_by, .Lfunc_end127-_by
	.cfi_endproc
                                        // -- End function
	.globl	_as                             // -- Begin function _as
	.p2align	4
	.type	_as,@function
_as:                                    // @_as
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x30, x19, [sp, #-16]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w19, -8
	.cfi_offset w30, -16
	ldp	w19, w8, [x0, #8]
	bfi	x19, x8, #32, #32
	ldp	w0, w8, [x19]
	bfi	x0, x8, #32, #32
	tst	x0, #0x6
	b.ne	.LBB128_4
// %bb.1:                               // %"$3"
	tbz	w0, #3, .LBB128_3
// %bb.2:                               // %"$6"
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB128_4
.LBB128_3:                              // %"$5"
	bl	evList
.LBB128_4:                              // %"$2"
	adrp	x8, SymTab+8
	add	x8, x8, :lo12:SymTab+8
	cmp	x0, x8
	b.eq	.LBB128_6
// %bb.5:                               // %"$8"
	ldp	w0, w8, [x19, #8]
	bfi	x0, x8, #32, #32
.LBB128_6:                              // %"$9"
	ldp	x30, x19, [sp], #16             // 16-byte Folded Reload
	ret
.Lfunc_end128:
	.size	_as, .Lfunc_end128-_as
	.cfi_endproc
                                        // -- End function
	.globl	_lit                            // -- Begin function _lit
	.p2align	4
	.type	_lit,@function
_lit:                                   // @_lit
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w1, w8, [x9]
	bfi	x1, x8, #32, #32
	tst	x1, #0x6
	b.ne	.LBB129_4
// %bb.1:                               // %"$3"
	tbz	w1, #3, .LBB129_3
// %bb.2:                               // %"$6"
	ldp	w1, w8, [x1]
	bfi	x1, x8, #32, #32
	b	.LBB129_4
.LBB129_3:                              // %"$5"
	mov	x0, x1
	bl	evList
	mov	x1, x0
.LBB129_4:                              // %"$2"
	and	x8, x1, #0x6
	cmp	x8, #0                          // =0
	adrp	x8, SymTab+8
	add	x8, x8, :lo12:SymTab+8
	ccmp	x1, x8, #4, eq
	adrp	x8, SymTab+216
	add	x8, x8, :lo12:SymTab+216
	ccmp	x1, x8, #4, ne
	b.eq	.LBB129_8
// %bb.5:                               // %"$10"
	tst	x1, #0xf
	b.ne	.LBB129_7
// %bb.6:                               // %"$12"
	ldrb	w8, [x1]
	tst	w8, #0x6
	b.ne	.LBB129_8
.LBB129_7:                              // %"$14"
	adrp	x0, SymTab+200
	add	x0, x0, :lo12:SymTab+200
	bl	cons
	mov	x1, x0
.LBB129_8:                              // %"$15"
	mov	x0, x1
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end129:
	.size	_lit, .Lfunc_end129-_lit
	.cfi_endproc
                                        // -- End function
	.globl	_eval                           // -- Begin function _eval
	.p2align	4
	.type	_eval,@function
_eval:                                  // @_eval
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-64]!           // 16-byte Folded Spill
	str	x23, [sp, #16]                  // 8-byte Folded Spill
	stp	x22, x21, [sp, #32]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #48]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 64
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -48
	.cfi_offset w30, -56
	.cfi_offset w29, -64
	mov	x20, x0
	ldp	w23, w8, [x0, #8]
	bfi	x23, x8, #32, #32
	ldp	w19, w8, [x23]
	bfi	x19, x8, #32, #32
	tst	x19, #0x6
	b.ne	.LBB130_4
// %bb.1:                               // %"$3"
	tbz	w19, #3, .LBB130_3
// %bb.2:                               // %"$6"
	ldp	w19, w8, [x19]
	bfi	x19, x8, #32, #32
	b	.LBB130_4
.LBB130_3:                              // %"$5"
	mov	x0, x19
	bl	evList
	mov	x19, x0
.LBB130_4:                              // %"$2"
	adrp	x21, env
	ldr	x8, [x21, :lo12:env]
	mov	x9, sp
	sub	x22, x9, #16                    // =16
	mov	sp, x22
	lsr	x10, x19, #32
	stp	w19, w10, [x9, #-16]
	lsr	x10, x8, #32
	stp	w8, w10, [x9, #-8]
	str	x22, [x21, :lo12:env]
	ldp	w8, w9, [x23, #8]
	bfi	x8, x9, #32, #32
	tst	x8, #0xf
	b.eq	.LBB130_8
.LBB130_5:                              // %"$8"
	tst	x19, #0x6
	b.ne	.LBB130_12
// %bb.6:                               // %"$25"
	tbz	w19, #3, .LBB130_11
// %bb.7:                               // %"$28"
	ldp	w19, w8, [x19]
	bfi	x19, x8, #32, #32
	b	.LBB130_12
.LBB130_8:                              // %"$7"
	ldp	w1, w9, [x8]
	bfi	x1, x9, #32, #32
	tst	x1, #0x6
	b.ne	.LBB130_14
// %bb.9:                               // %"$10"
	tbz	w1, #3, .LBB130_13
// %bb.10:                              // %"$13"
	ldp	w1, w8, [x1]
	bfi	x1, x8, #32, #32
	b	.LBB130_14
.LBB130_11:                             // %"$27"
	mov	x0, x19
	bl	evList
	mov	x19, x0
.LBB130_12:                             // %"$24"
	ldp	w9, w8, [x22, #8]
	bfi	x9, x8, #32, #32
	str	x9, [x21, :lo12:env]
	mov	x0, x19
	mov	sp, x29
	ldp	x20, x19, [sp, #48]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #32]             // 16-byte Folded Reload
	ldr	x23, [sp, #16]                  // 8-byte Folded Reload
	ldp	x29, x30, [sp], #64             // 16-byte Folded Reload
	ret
.LBB130_13:                             // %"$12"
	mov	x0, x1
	bl	evList
	mov	x1, x0
.LBB130_14:                             // %"$9"
	tbz	w1, #1, .LBB130_22
// %bb.15:                              // %"$15"
	lsr	x8, x1, #4
	cbz	x8, .LBB130_5
// %bb.16:                              // %"$16"
	adrp	x11, env+8
	add	x11, x11, :lo12:env+8
	adrp	x9, SymTab+376
	adrp	x10, SymTab+376
	add	x10, x10, :lo12:SymTab+376
.LBB130_17:                             // %"$18"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w11, w12, [x11]
	bfi	x11, x12, #32, #32
	cbz	x11, .LBB130_5
// %bb.18:                              // %"$19"
                                        //   in Loop: Header=BB130_17 Depth=1
	ldp	w13, w12, [x11, #8]
	bfi	x13, x12, #32, #32
	cmp	x10, x13
	b.ne	.LBB130_20
// %bb.19:                              // %"$22"
                                        //   in Loop: Header=BB130_17 Depth=1
	ldp	w13, w12, [x11]
	bfi	x13, x12, #32, #32
	str	x13, [x9, :lo12:SymTab+376]
	subs	x8, x8, #1                      // =1
	cset	w12, eq
	tbz	w12, #0, .LBB130_21
	b	.LBB130_5
.LBB130_20:                             //   in Loop: Header=BB130_17 Depth=1
	mov	w12, wzr
	tbnz	w12, #0, .LBB130_5
.LBB130_21:                             // %"$23"
                                        //   in Loop: Header=BB130_17 Depth=1
	add	x11, x11, #16                   // =16
	b	.LBB130_17
.LBB130_22:                             // %"$14"
	mov	x0, x20
	bl	cntErr
.Lfunc_end130:
	.size	_eval, .Lfunc_end130-_eval
	.cfi_endproc
                                        // -- End function
	.globl	_run                            // -- Begin function _run
	.p2align	4
	.type	_run,@function
_run:                                   // @_run
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-64]!           // 16-byte Folded Spill
	str	x23, [sp, #16]                  // 8-byte Folded Spill
	stp	x22, x21, [sp, #32]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #48]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 64
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -48
	.cfi_offset w30, -56
	.cfi_offset w29, -64
	mov	x20, x0
	ldp	w23, w8, [x0, #8]
	bfi	x23, x8, #32, #32
	ldp	w19, w8, [x23]
	bfi	x19, x8, #32, #32
	tst	x19, #0x6
	b.ne	.LBB131_3
// %bb.1:                               // %"$3"
	tbz	w19, #3, .LBB131_6
// %bb.2:                               // %"$6"
	ldp	w19, w8, [x19]
	bfi	x19, x8, #32, #32
.LBB131_3:                              // %"$2"
	tst	x19, #0x6
	b.ne	.LBB131_9
.LBB131_4:                              // %"$8"
	tbz	w19, #3, .LBB131_7
// %bb.5:                               // %"$11"
	ldp	w19, w8, [x19]
	bfi	x19, x8, #32, #32
	b	.LBB131_9
.LBB131_6:                              // %"$5"
	mov	x0, x19
	bl	evList
	mov	x19, x0
	tst	x19, #0x6
	b.ne	.LBB131_9
	b	.LBB131_4
.LBB131_7:                              // %"$10"
	adrp	x21, env
	ldr	x8, [x21, :lo12:env]
	mov	x9, sp
	sub	x22, x9, #16                    // =16
	mov	sp, x22
	lsr	x10, x19, #32
	stp	w19, w10, [x9, #-16]
	lsr	x10, x8, #32
	stp	w8, w10, [x9, #-8]
	str	x22, [x21, :lo12:env]
	ldp	w8, w9, [x23, #8]
	bfi	x8, x9, #32, #32
	tst	x8, #0xf
	b.eq	.LBB131_10
.LBB131_8:                              // %"$13"
	mov	x0, x19
	bl	runAt
	mov	x19, x0
	ldp	w9, w8, [x22, #8]
	bfi	x9, x8, #32, #32
	str	x9, [x21, :lo12:env]
.LBB131_9:                              // %"$7"
	mov	x0, x19
	mov	sp, x29
	ldp	x20, x19, [sp, #48]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #32]             // 16-byte Folded Reload
	ldr	x23, [sp, #16]                  // 8-byte Folded Reload
	ldp	x29, x30, [sp], #64             // 16-byte Folded Reload
	ret
.LBB131_10:                             // %"$12"
	ldp	w1, w9, [x8]
	bfi	x1, x9, #32, #32
	tst	x1, #0x6
	b.ne	.LBB131_14
// %bb.11:                              // %"$15"
	tbz	w1, #3, .LBB131_13
// %bb.12:                              // %"$18"
	ldp	w1, w8, [x1]
	bfi	x1, x8, #32, #32
	b	.LBB131_14
.LBB131_13:                             // %"$17"
	mov	x0, x1
	bl	evList
	mov	x1, x0
.LBB131_14:                             // %"$14"
	tbz	w1, #1, .LBB131_23
// %bb.15:                              // %"$20"
	lsr	x8, x1, #4
	cbz	x8, .LBB131_8
// %bb.16:                              // %"$21"
	adrp	x11, env+8
	add	x11, x11, :lo12:env+8
	adrp	x9, SymTab+376
	adrp	x10, SymTab+376
	add	x10, x10, :lo12:SymTab+376
.LBB131_17:                             // %"$23"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w11, w12, [x11]
	bfi	x11, x12, #32, #32
	cbz	x11, .LBB131_8
// %bb.18:                              // %"$24"
                                        //   in Loop: Header=BB131_17 Depth=1
	ldp	w13, w12, [x11, #8]
	bfi	x13, x12, #32, #32
	cmp	x10, x13
	b.ne	.LBB131_20
// %bb.19:                              // %"$27"
                                        //   in Loop: Header=BB131_17 Depth=1
	ldp	w13, w12, [x11]
	bfi	x13, x12, #32, #32
	str	x13, [x9, :lo12:SymTab+376]
	subs	x8, x8, #1                      // =1
	cset	w12, eq
	b	.LBB131_21
.LBB131_20:                             //   in Loop: Header=BB131_17 Depth=1
	mov	w12, wzr
.LBB131_21:                             // %"$26"
                                        //   in Loop: Header=BB131_17 Depth=1
	tbnz	w12, #0, .LBB131_8
// %bb.22:                              // %"$28"
                                        //   in Loop: Header=BB131_17 Depth=1
	add	x11, x11, #16                   // =16
	b	.LBB131_17
.LBB131_23:                             // %"$19"
	mov	x0, x20
	bl	cntErr
.Lfunc_end131:
	.size	_run, .Lfunc_end131-_run
	.cfi_endproc
                                        // -- End function
	.globl	_def                            // -- Begin function _def
	.p2align	4
	.type	_def,@function
_def:                                   // @_def
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-80]!           // 16-byte Folded Spill
	str	x25, [sp, #16]                  // 8-byte Folded Spill
	stp	x24, x23, [sp, #32]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #48]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #64]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 80
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -64
	.cfi_offset w30, -72
	.cfi_offset w29, -80
	mov	x20, x0
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w19, w8, [x9]
	bfi	x19, x8, #32, #32
	ldp	w22, w21, [x9, #8]
	tst	x19, #0x6
	b.ne	.LBB132_4
// %bb.1:                               // %"$3"
	tbz	w19, #3, .LBB132_3
// %bb.2:                               // %"$6"
	ldp	w19, w8, [x19]
	bfi	x19, x8, #32, #32
	b	.LBB132_4
.LBB132_3:                              // %"$5"
	mov	x0, x19
	bl	evList
	mov	x19, x0
.LBB132_4:                              // %"$2"
	eor	w8, w19, #0x8
	tst	x8, #0xe
	b.ne	.LBB132_24
// %bb.5:                               // %"$8"
	bfi	x22, x21, #32, #32
	adrp	x23, env
	ldr	x8, [x23, :lo12:env]
	mov	x9, sp
	sub	x24, x9, #16                    // =16
	mov	sp, x24
	lsr	x10, x19, #32
	stp	w19, w10, [x9, #-16]
	lsr	x10, x8, #32
	stp	w8, w10, [x9, #-8]
	str	x24, [x23, :lo12:env]
	ldp	w21, w8, [x22]
	bfi	x21, x8, #32, #32
	ldp	w22, w8, [x22, #8]
	bfi	x22, x8, #32, #32
	tst	x21, #0x6
	b.ne	.LBB132_9
// %bb.6:                               // %"$10"
	tbz	w21, #3, .LBB132_8
// %bb.7:                               // %"$13"
	ldp	w21, w8, [x21]
	bfi	x21, x8, #32, #32
	b	.LBB132_9
.LBB132_8:                              // %"$12"
	mov	x0, x21
	bl	evList
	mov	x21, x0
.LBB132_9:                              // %"$9"
	ldr	x8, [x23, :lo12:env]
	mov	x9, sp
	sub	x10, x9, #16                    // =16
	mov	sp, x10
	lsr	x25, x21, #32
	lsr	x11, x8, #32
	stp	w21, w25, [x9, #-16]
	stp	w8, w11, [x9, #-8]
	tst	x22, #0xf
	str	x10, [x23, :lo12:env]
	b.eq	.LBB132_14
// %bb.10:                              // %"$15"
	adrp	x8, SymTab+8
	add	x8, x8, :lo12:SymTab+8
	add	x9, x8, #208                    // =208
	cmp	x9, x19
	ccmp	x19, x8, #0, hs
	b.hs	.LBB132_25
// %bb.11:                              // %"$30"
	ldurb	w8, [x19, #-8]
	tbz	w8, #3, .LBB132_13
// %bb.12:                              // %"$31"
	mov	x0, x20
	mov	x1, x19
	bl	dbTouch
.LBB132_13:                             // %"$32"
	stp	w21, w25, [x19]
	b	.LBB132_23
.LBB132_14:                             // %"$14"
	ldp	w22, w8, [x22]
	bfi	x22, x8, #32, #32
	tst	x22, #0x6
	b.ne	.LBB132_18
// %bb.15:                              // %"$18"
	tbz	w22, #3, .LBB132_17
// %bb.16:                              // %"$21"
	ldp	w22, w8, [x22]
	bfi	x22, x8, #32, #32
	b	.LBB132_18
.LBB132_17:                             // %"$20"
	mov	x0, x22
	bl	evList
	mov	x22, x0
.LBB132_18:                             // %"$17"
	ldr	x8, [x23, :lo12:env]
	mov	x9, sp
	sub	x10, x9, #16                    // =16
	mov	sp, x10
	lsr	x11, x22, #32
	stp	w22, w11, [x9, #-16]
	lsr	x11, x8, #32
	stp	w8, w11, [x9, #-8]
	str	x10, [x23, :lo12:env]
	ldurb	w8, [x19, #-8]
	tbz	w8, #3, .LBB132_22
// %bb.19:                              // %"$22"
	adrp	x8, SymTab+8
	add	x8, x8, :lo12:SymTab+8
	mov	x0, x20
	mov	x1, x19
	cmp	x21, x8
	b.ne	.LBB132_21
// %bb.20:                              // %"$24"
	bl	dbFetch
	b	.LBB132_22
.LBB132_21:                             // %"$25"
	bl	dbTouch
.LBB132_22:                             // %"$23"
	mov	x0, x19
	mov	x1, x21
	mov	x2, x22
	bl	put
.LBB132_23:                             // %"$16"
	ldp	w9, w8, [x24, #8]
	bfi	x9, x8, #32, #32
	str	x9, [x23, :lo12:env]
	mov	x0, x19
	mov	sp, x29
	ldp	x20, x19, [sp, #64]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #48]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #32]             // 16-byte Folded Reload
	ldr	x25, [sp, #16]                  // 8-byte Folded Reload
	ldp	x29, x30, [sp], #80             // 16-byte Folded Reload
	ret
.LBB132_24:                             // %"$7"
	mov	x0, x20
	mov	x1, x19
	bl	symErr
.LBB132_25:                             // %"$29"
	mov	x0, x20
	mov	x1, x19
	bl	protErr
.Lfunc_end132:
	.size	_def, .Lfunc_end132-_def
	.cfi_endproc
                                        // -- End function
	.globl	_de                             // -- Begin function _de
	.p2align	4
	.type	_de,@function
_de:                                    // @_de
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x30, x19, [sp, #-16]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w19, -8
	.cfi_offset w30, -16
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w19, w8, [x9]
	bfi	x19, x8, #32, #32
	ldp	w2, w8, [x9, #8]
	bfi	x2, x8, #32, #32
	mov	x1, x19
	bl	redefine
	mov	x0, x19
	ldp	x30, x19, [sp], #16             // 16-byte Folded Reload
	ret
.Lfunc_end133:
	.size	_de, .Lfunc_end133-_de
	.cfi_endproc
                                        // -- End function
	.globl	_dm                             // -- Begin function _dm
	.p2align	4
	.type	_dm,@function
_dm:                                    // @_dm
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x30, x23, [sp, #-48]!           // 16-byte Folded Spill
	stp	x22, x21, [sp, #16]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #32]             // 16-byte Folded Spill
	.cfi_def_cfa_offset 48
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w30, -48
	mov	x23, x0
	ldp	w21, w8, [x0, #8]
	bfi	x21, x8, #32, #32
	ldp	w8, w9, [x21]
	bfi	x8, x9, #32, #32
	ldp	w22, w9, [x21, #8]
	tst	x8, #0xf
	mov	x19, x8
	b.ne	.LBB134_2
// %bb.1:                               // %"$3"
	ldp	w19, w10, [x8]
	bfi	x19, x10, #32, #32
.LBB134_2:                              // %"$4"
	bfi	x22, x9, #32, #32
	tst	x8, #0xf
	b.eq	.LBB134_4
// %bb.3:                               // %"$7"
	adrp	x8, SymTab+504
	ldr	x20, [x8, :lo12:SymTab+504]
	b	.LBB134_8
.LBB134_4:                              // %"$6"
	ldp	w20, w9, [x8, #8]
	bfi	x20, x9, #32, #32
	tst	x20, #0xf
	b.ne	.LBB134_8
// %bb.5:                               // %"$8"
	ldp	w0, w8, [x20, #8]
	bfi	x0, x8, #32, #32
	adrp	x8, SymTab+8
	add	x8, x8, :lo12:SymTab+8
	cmp	x0, x8
	b.ne	.LBB134_7
// %bb.6:                               // %"$10"
	adrp	x8, SymTab+504
	ldr	x0, [x8, :lo12:SymTab+504]
.LBB134_7:                              // %"$12"
	ldp	w1, w8, [x20]
	bfi	x1, x8, #32, #32
	bl	get
	mov	x20, x0
.LBB134_8:                              // %"$5"
	adrp	x8, SymTab+216
	add	x8, x8, :lo12:SymTab+216
	cmp	x19, x8
	b.eq	.LBB134_10
// %bb.9:                               // %"$13"
	adrp	x8, SymTab+184
	ldr	x2, [x8, :lo12:SymTab+184]
	mov	x0, x23
	mov	x1, x19
	bl	redefine
.LBB134_10:                             // %"$14"
	eor	w8, w22, #0x8
	tst	x8, #0xe
	b.ne	.LBB134_17
	b	.LBB134_12
.LBB134_11:                             // %"$22"
                                        //   in Loop: Header=BB134_12 Depth=1
	add	x22, x8, #8                     // =8
.LBB134_12:                             // %"$17"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w8, w9, [x22]
	bfi	x8, x9, #32, #32
	tst	x8, #0xf
	b.eq	.LBB134_14
// %bb.13:                              //   in Loop: Header=BB134_12 Depth=1
	mov	w9, #1
	cbz	w9, .LBB134_15
	b	.LBB134_27
.LBB134_14:                             // %"$19"
                                        //   in Loop: Header=BB134_12 Depth=1
	ldrb	w9, [x8]
	tst	w9, #0xf
	cset	w9, ne
	cbnz	w9, .LBB134_27
.LBB134_15:                             // %"$21"
                                        //   in Loop: Header=BB134_12 Depth=1
	ldp	w10, w9, [x8]
	bfi	x10, x9, #32, #32
	ldp	w10, w9, [x10]
	bfi	x10, x9, #32, #32
	cmp	x19, x10
	b.ne	.LBB134_11
// %bb.16:                              // %"$24"
	ldp	w21, w9, [x8]
	bfi	x21, x9, #32, #32
	ldp	w22, w8, [x21, #8]
	bfi	x22, x8, #32, #32
.LBB134_17:                             // %"$16"
	ldp	w23, w8, [x20]
	bfi	x23, x8, #32, #32
	mov	x8, x23
	tst	x8, #0xf
	b.eq	.LBB134_19
.LBB134_18:
	mov	w9, #1
	cbz	w9, .LBB134_20
	b	.LBB134_22
.LBB134_19:                             // %"$27"
	ldrb	w9, [x8]
	tst	w9, #0xf
	cset	w9, ne
	cbnz	w9, .LBB134_22
.LBB134_20:                             // %"$28"
	ldp	w10, w9, [x8]
	bfi	x10, x9, #32, #32
	ldp	w10, w9, [x10]
	bfi	x10, x9, #32, #32
	cmp	x19, x10
	b.eq	.LBB134_25
// %bb.21:                              // %"$34"
	ldp	w8, w9, [x8, #8]
	bfi	x8, x9, #32, #32
	tst	x8, #0xf
	b.ne	.LBB134_18
	b	.LBB134_19
.LBB134_22:                             // %"$30"
	ldrb	w8, [x21]
	tst	w8, #0xf
	b.ne	.LBB134_24
// %bb.23:                              // %"$32"
	mov	x0, x19
	mov	x1, x22
	bl	cons
	mov	x21, x0
.LBB134_24:                             // %"$33"
	mov	x0, x21
	mov	x1, x23
	bl	cons
	lsr	x8, x0, #32
	stp	w0, w8, [x20]
	b	.LBB134_26
.LBB134_25:                             // %"$35"
	ldp	w8, w9, [x8]
	bfi	x8, x9, #32, #32
	lsr	x9, x22, #32
	stp	w22, w9, [x8, #8]
.LBB134_26:                             // %"$29"
	mov	x0, x19
	ldp	x20, x19, [sp, #32]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #16]             // 16-byte Folded Reload
	ldp	x30, x23, [sp], #48             // 16-byte Folded Reload
	ret
.LBB134_27:                             // %"$20"
	adrp	x2, .L$72
	add	x2, x2, :lo12:.L$72
	mov	x0, x23
	mov	x1, x19
	mov	x3, xzr
	bl	err
.Lfunc_end134:
	.size	_dm, .Lfunc_end134-_dm
	.cfi_endproc
                                        // -- End function
	.globl	_box                            // -- Begin function _box
	.p2align	4
	.type	_box,@function
_box:                                   // @_box
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w1, w8, [x9]
	bfi	x1, x8, #32, #32
	tst	x1, #0x6
	b.ne	.LBB135_4
// %bb.1:                               // %"$3"
	tbz	w1, #3, .LBB135_3
// %bb.2:                               // %"$6"
	ldp	w1, w8, [x1]
	bfi	x1, x8, #32, #32
	b	.LBB135_4
.LBB135_3:                              // %"$5"
	mov	x0, x1
	bl	evList
	mov	x1, x0
.LBB135_4:                              // %"$2"
	mov	w0, #2
	bl	consSym
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end135:
	.size	_box, .Lfunc_end135-_box
	.cfi_endproc
                                        // -- End function
	.globl	_new                            // -- Begin function _new
	.p2align	4
	.type	_new,@function
_new:                                   // @_new
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-64]!           // 16-byte Folded Spill
	stp	x24, x23, [sp, #16]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #32]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #48]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 64
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w30, -56
	.cfi_offset w29, -64
	mov	x20, x0
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w21, w8, [x9]
	bfi	x21, x8, #32, #32
	ldp	w19, w22, [x9, #8]
	tst	x21, #0x6
	b.ne	.LBB136_4
// %bb.1:                               // %"$3"
	tbz	w21, #3, .LBB136_3
// %bb.2:                               // %"$6"
	ldp	w21, w8, [x21]
	bfi	x21, x8, #32, #32
	b	.LBB136_4
.LBB136_3:                              // %"$5"
	mov	x0, x21
	bl	evList
	mov	x21, x0
.LBB136_4:                              // %"$2"
	bfi	x19, x22, #32, #32
	tst	x21, #0xf
	b.eq	.LBB136_7
// %bb.5:                               // %"$8"
	adrp	x8, SymTab+8
	add	x8, x8, :lo12:SymTab+8
	cmp	x21, x8
	b.ne	.LBB136_9
// %bb.6:                               // %"$11"
	mov	w0, #2
	mov	w1, #2
	b	.LBB136_8
.LBB136_7:                              // %"$9"
	mov	w0, #2
	mov	x1, x21
.LBB136_8:                              // %"$7"
	bl	consSym
	mov	x20, x0
	b	.LBB136_13
.LBB136_9:                              // %"$10"
	tbz	w21, #1, .LBB136_11
// %bb.10:                              // %"$12"
	lsr	x1, x21, #4
	b	.LBB136_12
.LBB136_11:
	mov	w1, #1
.LBB136_12:                             // %"$14"
	mov	x0, x20
                                        // kill: def $w1 killed $w1 killed $x1
	bl	newId
	mov	x22, x0
	bl	extern
	mov	x20, x0
	add	x8, x22, x22
	mov	x9, #8
	movk	x9, #32768, lsl #48
	orr	x8, x9, x8, lsr #1
	lsr	x9, x8, #32
	stp	w8, w9, [x0, #-8]
.LBB136_13:                             // %"$7"
	adrp	x22, env
	ldr	x8, [x22, :lo12:env]
	mov	x9, sp
	sub	x23, x9, #16                    // =16
	mov	sp, x23
	lsr	x10, x20, #32
	lsr	x11, x8, #32
	stp	w20, w10, [x9, #-16]
	stp	w8, w11, [x9, #-8]
	tst	x21, #0xf
	str	x23, [x22, :lo12:env]
	b.eq	.LBB136_19
// %bb.14:                              // %"$15"
	ldp	w0, w8, [x19]
	bfi	x0, x8, #32, #32
	ldp	w19, w8, [x19, #8]
	bfi	x19, x8, #32, #32
	tst	x0, #0x6
	b.ne	.LBB136_18
// %bb.15:                              // %"$18"
	tbz	w0, #3, .LBB136_17
// %bb.16:                              // %"$21"
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB136_18
.LBB136_17:                             // %"$20"
	bl	evList
.LBB136_18:                             // %"$17"
	lsr	x8, x0, #32
	stp	w0, w8, [x20]
.LBB136_19:                             // %"$16"
	adrp	x21, ($Ret)
	str	xzr, [x21, :lo12:($Ret)]
	adrp	x1, SymTab+216
	add	x1, x1, :lo12:SymTab+216
	mov	x0, x20
	bl	method
	cbz	x0, .LBB136_21
// %bb.20:                              // %"$24"
	mov	x3, x0
	ldr	x1, [x21, :lo12:($Ret)]
	adrp	x2, SymTab+216
	add	x2, x2, :lo12:SymTab+216
	mov	x0, x20
	mov	x4, x19
	bl	evMethod
	b	.LBB136_22
.LBB136_21:                             // %"$23"
	tst	x19, #0xf
	b.eq	.LBB136_23
.LBB136_22:                             // %"$22"
	ldp	w9, w8, [x23, #8]
	bfi	x9, x8, #32, #32
	str	x9, [x22, :lo12:env]
	mov	x0, x20
	mov	sp, x29
	ldp	x20, x19, [sp, #48]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #32]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #64             // 16-byte Folded Reload
	ret
.LBB136_23:                             // %"$26"
	mov	x8, sp
	sub	x24, x8, #16                    // =16
	mov	sp, x24
	ldr	x9, [x22, :lo12:env]
	lsr	x10, x9, #32
	stp	w9, w10, [x8, #-8]
	str	x24, [x22, :lo12:env]
	b	.LBB136_26
.LBB136_24:                             // %"$36"
                                        //   in Loop: Header=BB136_26 Depth=1
	mov	x0, x2
	bl	evList
	mov	x2, x0
.LBB136_25:                             // %"$33"
                                        //   in Loop: Header=BB136_26 Depth=1
	mov	x0, x20
	mov	x1, x21
	bl	put
	tst	x19, #0xf
	b.ne	.LBB136_22
.LBB136_26:                             // %"$27"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w21, w8, [x19]
	bfi	x21, x8, #32, #32
	ldp	w19, w8, [x19, #8]
	bfi	x19, x8, #32, #32
	tst	x21, #0x6
	b.ne	.LBB136_30
// %bb.27:                              // %"$29"
                                        //   in Loop: Header=BB136_26 Depth=1
	tbz	w21, #3, .LBB136_29
// %bb.28:                              // %"$32"
                                        //   in Loop: Header=BB136_26 Depth=1
	ldp	w21, w8, [x21]
	bfi	x21, x8, #32, #32
	b	.LBB136_30
.LBB136_29:                             // %"$31"
                                        //   in Loop: Header=BB136_26 Depth=1
	mov	x0, x21
	bl	evList
	mov	x21, x0
.LBB136_30:                             // %"$28"
                                        //   in Loop: Header=BB136_26 Depth=1
	lsr	x8, x21, #32
	stp	w21, w8, [x24]
	ldp	w2, w8, [x19]
	bfi	x2, x8, #32, #32
	ldp	w19, w8, [x19, #8]
	bfi	x19, x8, #32, #32
	tst	x2, #0x6
	b.ne	.LBB136_25
// %bb.31:                              // %"$34"
                                        //   in Loop: Header=BB136_26 Depth=1
	tbz	w2, #3, .LBB136_24
// %bb.32:                              // %"$37"
                                        //   in Loop: Header=BB136_26 Depth=1
	ldp	w2, w8, [x2]
	bfi	x2, x8, #32, #32
	b	.LBB136_25
.Lfunc_end136:
	.size	_new, .Lfunc_end136-_new
	.cfi_endproc
                                        // -- End function
	.globl	_type                           // -- Begin function _type
	.p2align	4
	.type	_type,@function
_type:                                  // @_type
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-32]!                // 8-byte Folded Spill
	stp	x20, x19, [sp, #16]             // 16-byte Folded Spill
	.cfi_def_cfa_offset 32
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w30, -32
	mov	x19, x0
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w20, w8, [x9]
	bfi	x20, x8, #32, #32
	tst	x20, #0x6
	b.ne	.LBB137_4
// %bb.1:                               // %"$3"
	tbz	w20, #3, .LBB137_3
// %bb.2:                               // %"$6"
	ldp	w20, w8, [x20]
	bfi	x20, x8, #32, #32
	b	.LBB137_4
.LBB137_3:                              // %"$5"
	mov	x0, x20
	bl	evList
	mov	x20, x0
.LBB137_4:                              // %"$2"
	eor	w8, w20, #0x8
	tst	x8, #0xe
	b.eq	.LBB137_7
// %bb.5:
	adrp	x0, SymTab+8
	add	x0, x0, :lo12:SymTab+8
.LBB137_6:                              // %"$9"
	ldp	x20, x19, [sp, #16]             // 16-byte Folded Reload
	ldr	x30, [sp], #32                  // 8-byte Folded Reload
	ret
.LBB137_7:                              // %"$8"
	ldurb	w8, [x20, #-8]
	tbz	w8, #3, .LBB137_9
// %bb.8:                               // %"$10"
	mov	x0, x19
	mov	x1, x20
	bl	dbFetch
.LBB137_9:                              // %"$11"
	ldp	w8, w9, [x20]
	bfi	x8, x9, #32, #32
	adrp	x0, SymTab+8
	add	x0, x0, :lo12:SymTab+8
	mov	x9, x8
.LBB137_10:                             // %"$12"
                                        // =>This Inner Loop Header: Depth=1
	tst	x9, #0xf
	b.ne	.LBB137_6
// %bb.11:                              // %"$13"
                                        //   in Loop: Header=BB137_10 Depth=1
	ldrb	w10, [x9]
	tst	w10, #0xf
	b.ne	.LBB137_13
// %bb.12:                              // %"$16"
                                        //   in Loop: Header=BB137_10 Depth=1
	ldp	w9, w10, [x9, #8]
	bfi	x9, x10, #32, #32
	cmp	x8, x9
	b.ne	.LBB137_10
	b	.LBB137_6
.LBB137_13:                             // %"$17"
	mov	x10, x9
	adrp	x0, SymTab+8
	add	x0, x0, :lo12:SymTab+8
.LBB137_14:                             // %"$18"
                                        // =>This Inner Loop Header: Depth=1
	ldr	w11, [x10]
	eor	w11, w11, #0x8
	tst	x11, #0xe
	b.ne	.LBB137_6
// %bb.15:                              // %"$19"
                                        //   in Loop: Header=BB137_14 Depth=1
	ldp	w10, w11, [x10, #8]
	bfi	x10, x11, #32, #32
	tst	x10, #0xf
	b.ne	.LBB137_17
// %bb.16:                              // %"$22"
                                        //   in Loop: Header=BB137_14 Depth=1
	cmp	x8, x10
	b.ne	.LBB137_14
	b	.LBB137_6
.LBB137_17:                             // %"$23"
	cmp	x10, x0
	adrp	x8, SymTab+8
	add	x8, x8, :lo12:SymTab+8
	csel	x0, x9, x8, eq
	b	.LBB137_6
.Lfunc_end137:
	.size	_type, .Lfunc_end137-_type
	.cfi_endproc
                                        // -- End function
	.globl	_isa                            // -- Begin function _isa
	.p2align	4
	.type	_isa,@function
_isa:                                   // @_isa
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-64]!           // 16-byte Folded Spill
	str	x23, [sp, #16]                  // 8-byte Folded Spill
	stp	x22, x21, [sp, #32]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #48]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 64
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -48
	.cfi_offset w30, -56
	.cfi_offset w29, -64
	mov	x20, x0
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w19, w8, [x9]
	bfi	x19, x8, #32, #32
	ldp	w21, w8, [x9, #8]
	bfi	x21, x8, #32, #32
	tst	x19, #0x6
	b.ne	.LBB138_4
// %bb.1:                               // %"$3"
	tbz	w19, #3, .LBB138_3
// %bb.2:                               // %"$6"
	ldp	w19, w8, [x19]
	bfi	x19, x8, #32, #32
	b	.LBB138_4
.LBB138_3:                              // %"$5"
	mov	x0, x19
	bl	evList
	mov	x19, x0
.LBB138_4:                              // %"$2"
	adrp	x22, env
	ldr	x8, [x22, :lo12:env]
	mov	x9, sp
	sub	x23, x9, #16                    // =16
	mov	sp, x23
	lsr	x10, x19, #32
	stp	w19, w10, [x9, #-16]
	lsr	x10, x8, #32
	stp	w8, w10, [x9, #-8]
	str	x23, [x22, :lo12:env]
	ldp	w21, w8, [x21]
	bfi	x21, x8, #32, #32
	tst	x21, #0x6
	b.ne	.LBB138_8
// %bb.5:                               // %"$8"
	tbz	w21, #3, .LBB138_7
// %bb.6:                               // %"$11"
	ldp	w21, w8, [x21]
	bfi	x21, x8, #32, #32
	b	.LBB138_8
.LBB138_7:                              // %"$10"
	mov	x0, x21
	bl	evList
	mov	x21, x0
.LBB138_8:                              // %"$7"
	eor	w8, w21, #0x8
	tst	x8, #0xe
	b.eq	.LBB138_11
.LBB138_9:                              // %"$26"
	adrp	x21, SymTab+8
	add	x21, x21, :lo12:SymTab+8
.LBB138_10:                             // %"$14"
	ldp	w9, w8, [x23, #8]
	bfi	x9, x8, #32, #32
	str	x9, [x22, :lo12:env]
	mov	x0, x21
	mov	sp, x29
	ldp	x20, x19, [sp, #48]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #32]             // 16-byte Folded Reload
	ldr	x23, [sp, #16]                  // 8-byte Folded Reload
	ldp	x29, x30, [sp], #64             // 16-byte Folded Reload
	ret
.LBB138_11:                             // %"$13"
	ldurb	w8, [x21, #-8]
	tbz	w8, #3, .LBB138_13
// %bb.12:                              // %"$15"
	mov	x0, x20
	mov	x1, x21
	bl	dbFetch
.LBB138_13:                             // %"$16"
	tst	x19, #0xf
	b.eq	.LBB138_15
// %bb.14:                              // %"$18"
	mov	x0, x19
	mov	x1, x21
	bl	isa
	tbz	w0, #0, .LBB138_9
	b	.LBB138_10
.LBB138_15:                             // %"$20.preheader"
	adrp	x20, SymTab+8
	add	x20, x20, :lo12:SymTab+8
.LBB138_16:                             // %"$20"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w0, w8, [x19]
	bfi	x0, x8, #32, #32
	mov	x1, x21
	bl	isa
	tbz	w0, #0, .LBB138_18
// %bb.17:                              // %"$21"
                                        //   in Loop: Header=BB138_16 Depth=1
	ldp	w19, w8, [x19, #8]
	bfi	x19, x8, #32, #32
	tst	x19, #0xf
	b.eq	.LBB138_16
	b	.LBB138_10
.LBB138_18:
	mov	x21, x20
	b	.LBB138_10
.Lfunc_end138:
	.size	_isa, .Lfunc_end138-_isa
	.cfi_endproc
                                        // -- End function
	.globl	_method                         // -- Begin function _method
	.p2align	4
	.type	_method,@function
_method:                                // @_method
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-64]!           // 16-byte Folded Spill
	str	x23, [sp, #16]                  // 8-byte Folded Spill
	stp	x22, x21, [sp, #32]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #48]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 64
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -48
	.cfi_offset w30, -56
	.cfi_offset w29, -64
	mov	x19, x0
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w20, w8, [x9]
	bfi	x20, x8, #32, #32
	ldp	w21, w8, [x9, #8]
	bfi	x21, x8, #32, #32
	tst	x20, #0x6
	b.ne	.LBB139_4
// %bb.1:                               // %"$3"
	tbz	w20, #3, .LBB139_3
// %bb.2:                               // %"$6"
	ldp	w20, w8, [x20]
	bfi	x20, x8, #32, #32
	b	.LBB139_4
.LBB139_3:                              // %"$5"
	mov	x0, x20
	bl	evList
	mov	x20, x0
.LBB139_4:                              // %"$2"
	adrp	x22, env
	ldr	x8, [x22, :lo12:env]
	mov	x9, sp
	sub	x23, x9, #16                    // =16
	mov	sp, x23
	lsr	x10, x20, #32
	stp	w20, w10, [x9, #-16]
	lsr	x10, x8, #32
	stp	w8, w10, [x9, #-8]
	str	x23, [x22, :lo12:env]
	ldp	w21, w8, [x21]
	bfi	x21, x8, #32, #32
	tst	x21, #0x6
	b.ne	.LBB139_8
// %bb.5:                               // %"$8"
	tbz	w21, #3, .LBB139_7
// %bb.6:                               // %"$11"
	ldp	w21, w8, [x21]
	bfi	x21, x8, #32, #32
	b	.LBB139_8
.LBB139_7:                              // %"$10"
	mov	x0, x21
	bl	evList
	mov	x21, x0
.LBB139_8:                              // %"$7"
	eor	w8, w21, #0x8
	tst	x8, #0xe
	b.ne	.LBB139_12
// %bb.9:                               // %"$13"
	ldurb	w8, [x21, #-8]
	tbz	w8, #3, .LBB139_11
// %bb.10:                              // %"$14"
	mov	x0, x19
	mov	x1, x21
	bl	dbFetch
.LBB139_11:                             // %"$15"
	mov	x0, x21
	mov	x1, x20
	bl	method
	adrp	x8, SymTab+8
	add	x8, x8, :lo12:SymTab+8
	cmp	x0, #0                          // =0
	csel	x0, x0, x8, ne
	ldp	w9, w8, [x23, #8]
	bfi	x9, x8, #32, #32
	str	x9, [x22, :lo12:env]
	mov	sp, x29
	ldp	x20, x19, [sp, #48]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #32]             // 16-byte Folded Reload
	ldr	x23, [sp, #16]                  // 8-byte Folded Reload
	ldp	x29, x30, [sp], #64             // 16-byte Folded Reload
	ret
.LBB139_12:                             // %"$12"
	mov	x0, x19
	mov	x1, x21
	bl	symErr
.Lfunc_end139:
	.size	_method, .Lfunc_end139-_method
	.cfi_endproc
                                        // -- End function
	.globl	_send                           // -- Begin function _send
	.p2align	4
	.type	_send,@function
_send:                                  // @_send
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-80]!           // 16-byte Folded Spill
	str	x25, [sp, #16]                  // 8-byte Folded Spill
	stp	x24, x23, [sp, #32]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #48]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #64]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 80
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -64
	.cfi_offset w30, -72
	.cfi_offset w29, -80
	mov	x19, x0
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w20, w8, [x9]
	bfi	x20, x8, #32, #32
	ldp	w22, w8, [x9, #8]
	bfi	x22, x8, #32, #32
	tst	x20, #0x6
	b.ne	.LBB140_4
// %bb.1:                               // %"$3"
	tbz	w20, #3, .LBB140_3
// %bb.2:                               // %"$6"
	ldp	w20, w8, [x20]
	bfi	x20, x8, #32, #32
	b	.LBB140_4
.LBB140_3:                              // %"$5"
	mov	x0, x20
	bl	evList
	mov	x20, x0
.LBB140_4:                              // %"$2"
	adrp	x23, env
	ldr	x8, [x23, :lo12:env]
	mov	x9, sp
	sub	x24, x9, #16                    // =16
	mov	sp, x24
	lsr	x10, x20, #32
	stp	w20, w10, [x9, #-16]
	lsr	x10, x8, #32
	stp	w8, w10, [x9, #-8]
	str	x24, [x23, :lo12:env]
	ldp	w21, w8, [x22]
	bfi	x21, x8, #32, #32
	tst	x21, #0x6
	b.ne	.LBB140_8
// %bb.5:                               // %"$8"
	tbz	w21, #3, .LBB140_7
// %bb.6:                               // %"$11"
	ldp	w21, w8, [x21]
	bfi	x21, x8, #32, #32
	b	.LBB140_8
.LBB140_7:                              // %"$10"
	mov	x0, x21
	bl	evList
	mov	x21, x0
.LBB140_8:                              // %"$7"
	eor	w8, w21, #0x8
	tst	x8, #0xe
	b.ne	.LBB140_13
// %bb.9:                               // %"$13"
	ldr	x8, [x23, :lo12:env]
	mov	x9, sp
	sub	x10, x9, #16                    // =16
	mov	sp, x10
	lsr	x11, x21, #32
	stp	w21, w11, [x9, #-16]
	lsr	x11, x8, #32
	stp	w8, w11, [x9, #-8]
	str	x10, [x23, :lo12:env]
	ldurb	w8, [x21, #-8]
	tbz	w8, #3, .LBB140_11
// %bb.10:                              // %"$14"
	mov	x0, x19
	mov	x1, x21
	bl	dbFetch
.LBB140_11:                             // %"$15"
	adrp	x25, ($Ret)
	str	xzr, [x25, :lo12:($Ret)]
	mov	x0, x21
	mov	x1, x20
	bl	method
	mov	x3, x0
	cbz	x0, .LBB140_14
// %bb.12:                              // %"$16"
	ldr	x1, [x25, :lo12:($Ret)]
	ldp	w4, w8, [x22, #8]
	bfi	x4, x8, #32, #32
	mov	x0, x21
	mov	x2, x20
	bl	evMethod
	ldp	w9, w8, [x24, #8]
	bfi	x9, x8, #32, #32
	str	x9, [x23, :lo12:env]
	mov	sp, x29
	ldp	x20, x19, [sp, #64]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #48]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #32]             // 16-byte Folded Reload
	ldr	x25, [sp, #16]                  // 8-byte Folded Reload
	ldp	x29, x30, [sp], #80             // 16-byte Folded Reload
	ret
.LBB140_13:                             // %"$12"
	mov	x0, x19
	mov	x1, x21
	bl	symErr
.LBB140_14:                             // %"$17"
	adrp	x2, .L$72
	add	x2, x2, :lo12:.L$72
	mov	x0, x19
	mov	x1, x20
	bl	err
.Lfunc_end140:
	.size	_send, .Lfunc_end140-_send
	.cfi_endproc
                                        // -- End function
	.globl	_try                            // -- Begin function _try
	.p2align	4
	.type	_try,@function
_try:                                   // @_try
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-64]!           // 16-byte Folded Spill
	stp	x24, x23, [sp, #16]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #32]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #48]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 64
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w30, -56
	.cfi_offset w29, -64
	mov	x20, x0
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w19, w8, [x9]
	bfi	x19, x8, #32, #32
	ldp	w23, w8, [x9, #8]
	bfi	x23, x8, #32, #32
	tst	x19, #0x6
	b.ne	.LBB141_4
// %bb.1:                               // %"$3"
	tbz	w19, #3, .LBB141_3
// %bb.2:                               // %"$6"
	ldp	w19, w8, [x19]
	bfi	x19, x8, #32, #32
	b	.LBB141_4
.LBB141_3:                              // %"$5"
	mov	x0, x19
	bl	evList
	mov	x19, x0
.LBB141_4:                              // %"$2"
	adrp	x22, env
	ldr	x8, [x22, :lo12:env]
	mov	x9, sp
	sub	x24, x9, #16                    // =16
	mov	sp, x24
	lsr	x10, x19, #32
	stp	w19, w10, [x9, #-16]
	lsr	x10, x8, #32
	stp	w8, w10, [x9, #-8]
	str	x24, [x22, :lo12:env]
	ldp	w21, w8, [x23]
	bfi	x21, x8, #32, #32
	tst	x21, #0x6
	b.ne	.LBB141_8
// %bb.5:                               // %"$8"
	tbz	w21, #3, .LBB141_7
// %bb.6:                               // %"$11"
	ldp	w21, w8, [x21]
	bfi	x21, x8, #32, #32
	b	.LBB141_8
.LBB141_7:                              // %"$10"
	mov	x0, x21
	bl	evList
	mov	x21, x0
.LBB141_8:                              // %"$7"
	ldr	x8, [x22, :lo12:env]
	mov	x9, sp
	sub	x10, x9, #16                    // =16
	mov	sp, x10
	lsr	x11, x21, #32
	stp	w21, w11, [x9, #-16]
	lsr	x11, x8, #32
	stp	w8, w11, [x9, #-8]
	eor	w8, w21, #0x8
	tst	x8, #0xe
	str	x10, [x22, :lo12:env]
	b.eq	.LBB141_11
.LBB141_9:
	adrp	x0, SymTab+8
	add	x0, x0, :lo12:SymTab+8
.LBB141_10:                             // %"$14"
	ldp	w9, w8, [x24, #8]
	bfi	x9, x8, #32, #32
	str	x9, [x22, :lo12:env]
	mov	sp, x29
	ldp	x20, x19, [sp, #48]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #32]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #64             // 16-byte Folded Reload
	ret
.LBB141_11:                             // %"$13"
	ldurb	w8, [x21, #-8]
	tbz	w8, #3, .LBB141_14
// %bb.12:                              // %"$15"
	mov	x0, x21
	bl	isLife
	tbz	w0, #0, .LBB141_9
// %bb.13:                              // %"$18"
	mov	x0, x20
	mov	x1, x21
	bl	dbFetch
.LBB141_14:                             // %"$16"
	adrp	x20, ($Ret)
	str	xzr, [x20, :lo12:($Ret)]
	mov	x0, x21
	mov	x1, x19
	bl	method
	cbz	x0, .LBB141_9
// %bb.15:                              // %"$19"
	mov	x3, x0
	ldr	x1, [x20, :lo12:($Ret)]
	ldp	w4, w8, [x23, #8]
	bfi	x4, x8, #32, #32
	mov	x0, x21
	mov	x2, x19
	bl	evMethod
	b	.LBB141_10
.Lfunc_end141:
	.size	_try, .Lfunc_end141-_try
	.cfi_endproc
                                        // -- End function
	.globl	_super                          // -- Begin function _super
	.p2align	4
	.type	_super,@function
_super:                                 // @_super
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-64]!                // 8-byte Folded Spill
	stp	x24, x23, [sp, #16]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #32]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #48]             // 16-byte Folded Spill
	.cfi_def_cfa_offset 64
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w30, -64
	mov	x19, x0
	adrp	x21, env+104
	add	x21, x21, :lo12:env+104
	adrp	x8, SymTab+424
	add	x8, x8, :lo12:SymTab+424
	ldp	x9, x20, [x21]
	cmp	x9, #0                          // =0
	csel	x8, x9, x8, ne
	ldp	w8, w9, [x8]
	bfi	x8, x9, #32, #32
	ldp	w22, w9, [x8]
	bfi	x22, x9, #32, #32
.LBB142_1:                              // %"$5"
                                        // =>This Inner Loop Header: Depth=1
	ldrb	w8, [x22]
	tst	w8, #0xf
	b.ne	.LBB142_3
// %bb.2:                               // %"$6"
                                        //   in Loop: Header=BB142_1 Depth=1
	ldp	w22, w8, [x22, #8]
	bfi	x22, x8, #32, #32
	b	.LBB142_1
.LBB142_3:
	adrp	x23, ($Ret)
	tst	x22, #0xf
	b.ne	.LBB142_6
.LBB142_4:                              // %"$10"
                                        // =>This Inner Loop Header: Depth=1
	str	x22, [x23, :lo12:($Ret)]
	ldp	w0, w8, [x22]
	bfi	x0, x8, #32, #32
	mov	x1, x20
	bl	method
	cbnz	x0, .LBB142_7
// %bb.5:                               // %"$11"
                                        //   in Loop: Header=BB142_4 Depth=1
	ldp	w22, w8, [x22, #8]
	bfi	x22, x8, #32, #32
	tst	x22, #0xf
	b.eq	.LBB142_4
.LBB142_6:                              // %"$9"
	adrp	x2, .L$73
	add	x2, x2, :lo12:.L$73
	mov	x0, x19
	mov	x1, x20
	mov	x3, xzr
	bl	err
.LBB142_7:                              // %"$13"
	ldp	x22, x24, [x21]
	ldr	x8, [x23, :lo12:($Ret)]
	stp	x8, x20, [x21]
	mov	x1, x19
	bl	evExpr
	stp	x22, x24, [x21]
	ldp	x20, x19, [sp, #48]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #32]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #16]             // 16-byte Folded Reload
	ldr	x30, [sp], #64                  // 8-byte Folded Reload
	ret
.Lfunc_end142:
	.size	_super, .Lfunc_end142-_super
	.cfi_endproc
                                        // -- End function
	.globl	_extra                          // -- Begin function _extra
	.p2align	4
	.type	_extra,@function
_extra:                                 // @_extra
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x30, x23, [sp, #-48]!           // 16-byte Folded Spill
	stp	x22, x21, [sp, #16]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #32]             // 16-byte Folded Spill
	.cfi_def_cfa_offset 48
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w30, -48
	mov	x19, x0
	adrp	x8, env+112
	ldr	x20, [x8, :lo12:env+112]
	adrp	x8, SymTab+424
	ldr	x0, [x8, :lo12:SymTab+424]
	mov	x1, x20
	bl	extra
	cmp	x0, #0                          // =0
	b.le	.LBB143_2
// %bb.1:                               // %"$3"
	adrp	x21, env+104
	add	x21, x21, :lo12:env+104
	ldp	x22, x23, [x21]
	adrp	x8, ($Ret)
	ldr	x8, [x8, :lo12:($Ret)]
	stp	x8, x20, [x21]
	mov	x1, x19
	bl	evExpr
	stp	x22, x23, [x21]
	ldp	x20, x19, [sp, #32]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #16]             // 16-byte Folded Reload
	ldp	x30, x23, [sp], #48             // 16-byte Folded Reload
	ret
.LBB143_2:                              // %"$2"
	adrp	x2, .L$74
	add	x2, x2, :lo12:.L$74
	mov	x0, x19
	mov	x1, x20
	mov	x3, xzr
	bl	err
.Lfunc_end143:
	.size	_extra, .Lfunc_end143-_extra
	.cfi_endproc
                                        // -- End function
	.globl	_and                            // -- Begin function _and
	.p2align	4
	.type	_and,@function
_and:                                   // @_and
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x30, x21, [sp, #-32]!           // 16-byte Folded Spill
	stp	x20, x19, [sp, #16]             // 16-byte Folded Spill
	.cfi_def_cfa_offset 32
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w30, -32
	ldp	w19, w8, [x0, #8]
	bfi	x19, x8, #32, #32
	adrp	x20, SymTab+8
	add	x20, x20, :lo12:SymTab+8
	adrp	x21, SymTab+376
.LBB144_1:                              // %"$2"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w0, w8, [x19]
	bfi	x0, x8, #32, #32
	tst	x0, #0x6
	b.ne	.LBB144_4
// %bb.2:                               // %"$4"
                                        //   in Loop: Header=BB144_1 Depth=1
	tbz	w0, #3, .LBB144_6
// %bb.3:                               // %"$7"
                                        //   in Loop: Header=BB144_1 Depth=1
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
.LBB144_4:                              // %"$3"
                                        //   in Loop: Header=BB144_1 Depth=1
	cmp	x0, x20
	b.eq	.LBB144_7
.LBB144_5:                              // %"$8"
                                        //   in Loop: Header=BB144_1 Depth=1
	str	x0, [x21, :lo12:SymTab+376]
	ldp	w19, w8, [x19, #8]
	bfi	x19, x8, #32, #32
	tst	x19, #0xf
	b.eq	.LBB144_1
	b	.LBB144_7
.LBB144_6:                              // %"$6"
                                        //   in Loop: Header=BB144_1 Depth=1
	bl	evList
	cmp	x0, x20
	b.ne	.LBB144_5
.LBB144_7:                              // %"$9"
	ldp	x20, x19, [sp, #16]             // 16-byte Folded Reload
	ldp	x30, x21, [sp], #32             // 16-byte Folded Reload
	ret
.Lfunc_end144:
	.size	_and, .Lfunc_end144-_and
	.cfi_endproc
                                        // -- End function
	.globl	_or                             // -- Begin function _or
	.p2align	4
	.type	_or,@function
_or:                                    // @_or
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-32]!                // 8-byte Folded Spill
	stp	x20, x19, [sp, #16]             // 16-byte Folded Spill
	.cfi_def_cfa_offset 32
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w30, -32
	ldp	w19, w8, [x0, #8]
	bfi	x19, x8, #32, #32
	adrp	x20, SymTab+8
	add	x20, x20, :lo12:SymTab+8
.LBB145_1:                              // %"$2"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w0, w8, [x19]
	bfi	x0, x8, #32, #32
	tst	x0, #0x6
	b.ne	.LBB145_4
// %bb.2:                               // %"$4"
                                        //   in Loop: Header=BB145_1 Depth=1
	tbz	w0, #3, .LBB145_6
// %bb.3:                               // %"$7"
                                        //   in Loop: Header=BB145_1 Depth=1
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
.LBB145_4:                              // %"$3"
                                        //   in Loop: Header=BB145_1 Depth=1
	cmp	x0, x20
	b.ne	.LBB145_7
.LBB145_5:                              // %"$8"
                                        //   in Loop: Header=BB145_1 Depth=1
	ldp	w19, w8, [x19, #8]
	bfi	x19, x8, #32, #32
	tst	x19, #0xf
	b.eq	.LBB145_1
	b	.LBB145_8
.LBB145_6:                              // %"$6"
                                        //   in Loop: Header=BB145_1 Depth=1
	bl	evList
	cmp	x0, x20
	b.eq	.LBB145_5
.LBB145_7:                              // %"$10"
	adrp	x8, SymTab+376
	str	x0, [x8, :lo12:SymTab+376]
.LBB145_8:                              // %"$9"
	ldp	x20, x19, [sp, #16]             // 16-byte Folded Reload
	ldr	x30, [sp], #32                  // 8-byte Folded Reload
	ret
.Lfunc_end145:
	.size	_or, .Lfunc_end145-_or
	.cfi_endproc
                                        // -- End function
	.globl	_nand                           // -- Begin function _nand
	.p2align	4
	.type	_nand,@function
_nand:                                  // @_nand
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-32]!                // 8-byte Folded Spill
	stp	x20, x19, [sp, #16]             // 16-byte Folded Spill
	.cfi_def_cfa_offset 32
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w30, -32
	ldp	w20, w8, [x0, #8]
	bfi	x20, x8, #32, #32
	adrp	x19, SymTab+8
	add	x19, x19, :lo12:SymTab+8
.LBB146_1:                              // %"$2"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w0, w8, [x20]
	bfi	x0, x8, #32, #32
	tst	x0, #0x6
	b.ne	.LBB146_4
// %bb.2:                               // %"$4"
                                        //   in Loop: Header=BB146_1 Depth=1
	tbz	w0, #3, .LBB146_6
// %bb.3:                               // %"$7"
                                        //   in Loop: Header=BB146_1 Depth=1
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
.LBB146_4:                              // %"$3"
                                        //   in Loop: Header=BB146_1 Depth=1
	cmp	x0, x19
	b.eq	.LBB146_7
.LBB146_5:                              // %"$8"
                                        //   in Loop: Header=BB146_1 Depth=1
	str	x0, [x19, #368]
	ldp	w20, w8, [x20, #8]
	bfi	x20, x8, #32, #32
	tst	x20, #0xf
	b.eq	.LBB146_1
	b	.LBB146_8
.LBB146_6:                              // %"$6"
                                        //   in Loop: Header=BB146_1 Depth=1
	bl	evList
	cmp	x0, x19
	b.ne	.LBB146_5
.LBB146_7:
	add	x19, x19, #208                  // =208
.LBB146_8:                              // %"$9"
	mov	x0, x19
	ldp	x20, x19, [sp, #16]             // 16-byte Folded Reload
	ldr	x30, [sp], #32                  // 8-byte Folded Reload
	ret
.Lfunc_end146:
	.size	_nand, .Lfunc_end146-_nand
	.cfi_endproc
                                        // -- End function
	.globl	_nor                            // -- Begin function _nor
	.p2align	4
	.type	_nor,@function
_nor:                                   // @_nor
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x30, x21, [sp, #-32]!           // 16-byte Folded Spill
	stp	x20, x19, [sp, #16]             // 16-byte Folded Spill
	.cfi_def_cfa_offset 32
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w30, -32
	ldp	w20, w8, [x0, #8]
	adrp	x19, SymTab+8
	add	x19, x19, :lo12:SymTab+8
	bfi	x20, x8, #32, #32
	adrp	x21, SymTab+216
	add	x21, x21, :lo12:SymTab+216
.LBB147_1:                              // %"$2"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w0, w8, [x20]
	bfi	x0, x8, #32, #32
	tst	x0, #0x6
	b.ne	.LBB147_4
// %bb.2:                               // %"$4"
                                        //   in Loop: Header=BB147_1 Depth=1
	tbz	w0, #3, .LBB147_6
// %bb.3:                               // %"$7"
                                        //   in Loop: Header=BB147_1 Depth=1
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
.LBB147_4:                              // %"$3"
                                        //   in Loop: Header=BB147_1 Depth=1
	cmp	x0, x19
	b.ne	.LBB147_7
.LBB147_5:                              // %"$8"
                                        //   in Loop: Header=BB147_1 Depth=1
	ldp	w20, w8, [x20, #8]
	bfi	x20, x8, #32, #32
	tst	x20, #0xf
	b.eq	.LBB147_1
	b	.LBB147_8
.LBB147_6:                              // %"$6"
                                        //   in Loop: Header=BB147_1 Depth=1
	bl	evList
	cmp	x0, x19
	b.eq	.LBB147_5
.LBB147_7:                              // %"$10"
	str	x0, [x19, #368]
	b	.LBB147_9
.LBB147_8:
	mov	x19, x21
.LBB147_9:                              // %"$9"
	mov	x0, x19
	ldp	x20, x19, [sp, #16]             // 16-byte Folded Reload
	ldp	x30, x21, [sp], #32             // 16-byte Folded Reload
	ret
.Lfunc_end147:
	.size	_nor, .Lfunc_end147-_nor
	.cfi_endproc
                                        // -- End function
	.globl	_xor                            // -- Begin function _xor
	.p2align	4
	.type	_xor,@function
_xor:                                   // @_xor
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-32]!                // 8-byte Folded Spill
	stp	x20, x19, [sp, #16]             // 16-byte Folded Spill
	.cfi_def_cfa_offset 32
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w30, -32
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w0, w8, [x9]
	bfi	x0, x8, #32, #32
	ldp	w20, w8, [x9, #8]
	bfi	x20, x8, #32, #32
	tst	x0, #0x6
	b.ne	.LBB148_4
// %bb.1:                               // %"$3"
	tbz	w0, #3, .LBB148_3
// %bb.2:                               // %"$6"
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB148_4
.LBB148_3:                              // %"$5"
	bl	evList
.LBB148_4:                              // %"$2"
	adrp	x19, SymTab+8
	add	x19, x19, :lo12:SymTab+8
	cmp	x0, x19
	b.ne	.LBB148_10
// %bb.5:                               // %"$7"
	ldp	w0, w8, [x20]
	bfi	x0, x8, #32, #32
	tst	x0, #0x6
	b.ne	.LBB148_8
// %bb.6:                               // %"$11"
	tbz	w0, #3, .LBB148_15
// %bb.7:                               // %"$14"
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
.LBB148_8:                              // %"$10"
	cmp	x0, x19
	b.eq	.LBB148_18
.LBB148_9:                              // %"$16"
	adrp	x0, SymTab+216
	add	x0, x0, :lo12:SymTab+216
	b	.LBB148_18
.LBB148_10:                             // %"$8"
	ldp	w0, w8, [x20]
	bfi	x0, x8, #32, #32
	tst	x0, #0x6
	b.ne	.LBB148_13
// %bb.11:                              // %"$19"
	tbz	w0, #3, .LBB148_16
// %bb.12:                              // %"$22"
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
.LBB148_13:                             // %"$18"
	cmp	x0, x19
	b.ne	.LBB148_17
.LBB148_14:
	add	x0, x19, #208                   // =208
	b	.LBB148_18
.LBB148_15:                             // %"$13"
	bl	evList
	cmp	x0, x19
	b.ne	.LBB148_9
	b	.LBB148_18
.LBB148_16:                             // %"$21"
	bl	evList
	cmp	x0, x19
	b.eq	.LBB148_14
.LBB148_17:                             // %"$24"
	adrp	x0, SymTab+8
	add	x0, x0, :lo12:SymTab+8
.LBB148_18:                             // %"$9"
	ldp	x20, x19, [sp, #16]             // 16-byte Folded Reload
	ldr	x30, [sp], #32                  // 8-byte Folded Reload
	ret
.Lfunc_end148:
	.size	_xor, .Lfunc_end148-_xor
	.cfi_endproc
                                        // -- End function
	.globl	_bool                           // -- Begin function _bool
	.p2align	4
	.type	_bool,@function
_bool:                                  // @_bool
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w0, w8, [x9]
	bfi	x0, x8, #32, #32
	tst	x0, #0x6
	b.ne	.LBB149_4
// %bb.1:                               // %"$3"
	tbz	w0, #3, .LBB149_3
// %bb.2:                               // %"$6"
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB149_4
.LBB149_3:                              // %"$5"
	bl	evList
.LBB149_4:                              // %"$2"
	adrp	x8, SymTab+8
	add	x8, x8, :lo12:SymTab+8
	add	x9, x8, #208                    // =208
	cmp	x0, x8
	csel	x0, x0, x9, eq
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end149:
	.size	_bool, .Lfunc_end149-_bool
	.cfi_endproc
                                        // -- End function
	.globl	_not                            // -- Begin function _not
	.p2align	4
	.type	_not,@function
_not:                                   // @_not
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w0, w8, [x9]
	bfi	x0, x8, #32, #32
	tst	x0, #0x6
	b.ne	.LBB150_4
// %bb.1:                               // %"$3"
	tbz	w0, #3, .LBB150_3
// %bb.2:                               // %"$6"
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB150_4
.LBB150_3:                              // %"$5"
	bl	evList
.LBB150_4:                              // %"$2"
	adrp	x8, SymTab+8
	add	x8, x8, :lo12:SymTab+8
	cmp	x0, x8
	b.ne	.LBB150_6
// %bb.5:
	add	x8, x8, #208                    // =208
	b	.LBB150_7
.LBB150_6:                              // %"$8"
	str	x0, [x8, #368]
.LBB150_7:                              // %"$9"
	mov	x0, x8
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end150:
	.size	_not, .Lfunc_end150-_not
	.cfi_endproc
                                        // -- End function
	.globl	_nil                            // -- Begin function _nil
	.p2align	4
	.type	_nil,@function
_nil:                                   // @_nil
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x30, x19, [sp, #-16]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w19, -8
	.cfi_offset w30, -16
	ldp	w19, w8, [x0, #8]
	bfi	x19, x8, #32, #32
	b	.LBB151_2
.LBB151_1:                              // %"$4"
                                        //   in Loop: Header=BB151_2 Depth=1
	tst	x19, #0xf
	b.ne	.LBB151_4
.LBB151_2:                              // %"$2"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w0, w8, [x19]
	bfi	x0, x8, #32, #32
	ldp	w19, w8, [x19, #8]
	bfi	x19, x8, #32, #32
	tst	x0, #0xf
	b.ne	.LBB151_1
// %bb.3:                               // %"$3"
                                        //   in Loop: Header=BB151_2 Depth=1
	bl	evList
	b	.LBB151_1
.LBB151_4:                              // %"$6"
	adrp	x0, SymTab+8
	add	x0, x0, :lo12:SymTab+8
	ldp	x30, x19, [sp], #16             // 16-byte Folded Reload
	ret
.Lfunc_end151:
	.size	_nil, .Lfunc_end151-_nil
	.cfi_endproc
                                        // -- End function
	.globl	_t                              // -- Begin function _t
	.p2align	4
	.type	_t,@function
_t:                                     // @_t
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x30, x19, [sp, #-16]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w19, -8
	.cfi_offset w30, -16
	ldp	w19, w8, [x0, #8]
	bfi	x19, x8, #32, #32
	b	.LBB152_2
.LBB152_1:                              // %"$4"
                                        //   in Loop: Header=BB152_2 Depth=1
	tst	x19, #0xf
	b.ne	.LBB152_4
.LBB152_2:                              // %"$2"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w0, w8, [x19]
	bfi	x0, x8, #32, #32
	ldp	w19, w8, [x19, #8]
	bfi	x19, x8, #32, #32
	tst	x0, #0xf
	b.ne	.LBB152_1
// %bb.3:                               // %"$3"
                                        //   in Loop: Header=BB152_2 Depth=1
	bl	evList
	b	.LBB152_1
.LBB152_4:                              // %"$6"
	adrp	x0, SymTab+216
	add	x0, x0, :lo12:SymTab+216
	ldp	x30, x19, [sp], #16             // 16-byte Folded Reload
	ret
.Lfunc_end152:
	.size	_t, .Lfunc_end152-_t
	.cfi_endproc
                                        // -- End function
	.globl	_prog                           // -- Begin function _prog
	.p2align	4
	.type	_prog,@function
_prog:                                  // @_prog
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x30, x19, [sp, #-16]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w19, -8
	.cfi_offset w30, -16
	ldp	w19, w8, [x0, #8]
	bfi	x19, x8, #32, #32
.LBB153_1:                              // %"$2"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w0, w8, [x19]
	bfi	x0, x8, #32, #32
	ldp	w19, w8, [x19, #8]
	bfi	x19, x8, #32, #32
	tst	x19, #0xf
	b.ne	.LBB153_4
// %bb.2:                               // %"$3"
                                        //   in Loop: Header=BB153_1 Depth=1
	tst	x0, #0xf
	b.ne	.LBB153_1
// %bb.3:                               // %"$12"
                                        //   in Loop: Header=BB153_1 Depth=1
	bl	evList
	b	.LBB153_1
.LBB153_4:                              // %"$5"
	tst	x0, #0x6
	b.eq	.LBB153_6
// %bb.5:                               // %"$4"
	ldp	x30, x19, [sp], #16             // 16-byte Folded Reload
	ret
.LBB153_6:                              // %"$7"
	tbz	w0, #3, .LBB153_8
// %bb.7:                               // %"$10"
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	ldp	x30, x19, [sp], #16             // 16-byte Folded Reload
	ret
.LBB153_8:                              // %"$9"
	bl	evList
	ldp	x30, x19, [sp], #16             // 16-byte Folded Reload
	ret
.Lfunc_end153:
	.size	_prog, .Lfunc_end153-_prog
	.cfi_endproc
                                        // -- End function
	.globl	_prog1                          // -- Begin function _prog1
	.p2align	4
	.type	_prog1,@function
_prog1:                                 // @_prog1
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-48]!           // 16-byte Folded Spill
	stp	x22, x21, [sp, #16]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #32]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 48
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w30, -40
	.cfi_offset w29, -48
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w19, w8, [x9]
	bfi	x19, x8, #32, #32
	ldp	w20, w8, [x9, #8]
	bfi	x20, x8, #32, #32
	tst	x19, #0x6
	b.ne	.LBB154_4
// %bb.1:                               // %"$3"
	tbz	w19, #3, .LBB154_3
// %bb.2:                               // %"$6"
	ldp	w19, w8, [x19]
	bfi	x19, x8, #32, #32
	b	.LBB154_4
.LBB154_3:                              // %"$5"
	mov	x0, x19
	bl	evList
	mov	x19, x0
.LBB154_4:                              // %"$2"
	adrp	x21, env
	ldr	x8, [x21, :lo12:env]
	mov	x9, sp
	sub	x22, x9, #16                    // =16
	mov	sp, x22
	lsr	x10, x19, #32
	lsr	x11, x8, #32
	stp	w19, w10, [x9, #-16]
	stp	w8, w11, [x9, #-8]
	str	x22, [x21, :lo12:env]
	adrp	x8, SymTab+376
	str	x19, [x8, :lo12:SymTab+376]
	b	.LBB154_6
.LBB154_5:                              // %"$9"
                                        //   in Loop: Header=BB154_6 Depth=1
	tst	x20, #0xf
	b.ne	.LBB154_8
.LBB154_6:                              // %"$7"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w0, w8, [x20]
	bfi	x0, x8, #32, #32
	ldp	w20, w8, [x20, #8]
	bfi	x20, x8, #32, #32
	tst	x0, #0xf
	b.ne	.LBB154_5
// %bb.7:                               // %"$8"
                                        //   in Loop: Header=BB154_6 Depth=1
	bl	evList
	b	.LBB154_5
.LBB154_8:                              // %"$11"
	ldp	w9, w8, [x22, #8]
	bfi	x9, x8, #32, #32
	str	x9, [x21, :lo12:env]
	mov	x0, x19
	mov	sp, x29
	ldp	x20, x19, [sp, #32]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #48             // 16-byte Folded Reload
	ret
.Lfunc_end154:
	.size	_prog1, .Lfunc_end154-_prog1
	.cfi_endproc
                                        // -- End function
	.globl	_prog2                          // -- Begin function _prog2
	.p2align	4
	.type	_prog2,@function
_prog2:                                 // @_prog2
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-48]!           // 16-byte Folded Spill
	stp	x22, x21, [sp, #16]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #32]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 48
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w30, -40
	.cfi_offset w29, -48
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w0, w8, [x9]
	bfi	x0, x8, #32, #32
	ldp	w20, w8, [x9, #8]
	bfi	x20, x8, #32, #32
	tst	x0, #0x6
	b.ne	.LBB155_3
// %bb.1:                               // %"$3"
	tbnz	w0, #3, .LBB155_3
// %bb.2:                               // %"$5"
	bl	evList
.LBB155_3:                              // %"$2"
	ldp	w19, w8, [x20]
	bfi	x19, x8, #32, #32
	ldp	w20, w8, [x20, #8]
	bfi	x20, x8, #32, #32
	tst	x19, #0x6
	b.ne	.LBB155_7
// %bb.4:                               // %"$8"
	tbz	w19, #3, .LBB155_6
// %bb.5:                               // %"$11"
	ldp	w19, w8, [x19]
	bfi	x19, x8, #32, #32
	b	.LBB155_7
.LBB155_6:                              // %"$10"
	mov	x0, x19
	bl	evList
	mov	x19, x0
.LBB155_7:                              // %"$7"
	adrp	x21, env
	ldr	x8, [x21, :lo12:env]
	mov	x9, sp
	sub	x22, x9, #16                    // =16
	mov	sp, x22
	lsr	x10, x19, #32
	lsr	x11, x8, #32
	stp	w19, w10, [x9, #-16]
	stp	w8, w11, [x9, #-8]
	str	x22, [x21, :lo12:env]
	adrp	x8, SymTab+376
	str	x19, [x8, :lo12:SymTab+376]
	b	.LBB155_9
.LBB155_8:                              // %"$14"
                                        //   in Loop: Header=BB155_9 Depth=1
	tst	x20, #0xf
	b.ne	.LBB155_11
.LBB155_9:                              // %"$12"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w0, w8, [x20]
	bfi	x0, x8, #32, #32
	ldp	w20, w8, [x20, #8]
	bfi	x20, x8, #32, #32
	tst	x0, #0xf
	b.ne	.LBB155_8
// %bb.10:                              // %"$13"
                                        //   in Loop: Header=BB155_9 Depth=1
	bl	evList
	b	.LBB155_8
.LBB155_11:                             // %"$16"
	ldp	w9, w8, [x22, #8]
	bfi	x9, x8, #32, #32
	str	x9, [x21, :lo12:env]
	mov	x0, x19
	mov	sp, x29
	ldp	x20, x19, [sp, #32]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #48             // 16-byte Folded Reload
	ret
.Lfunc_end155:
	.size	_prog2, .Lfunc_end155-_prog2
	.cfi_endproc
                                        // -- End function
	.globl	_if                             // -- Begin function _if
	.p2align	4
	.type	_if,@function
_if:                                    // @_if
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x30, x19, [sp, #-16]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w19, -8
	.cfi_offset w30, -16
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w0, w8, [x9]
	bfi	x0, x8, #32, #32
	ldp	w19, w8, [x9, #8]
	bfi	x19, x8, #32, #32
	tst	x0, #0x6
	b.ne	.LBB156_4
// %bb.1:                               // %"$3"
	tbz	w0, #3, .LBB156_3
// %bb.2:                               // %"$6"
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB156_4
.LBB156_3:                              // %"$5"
	bl	evList
.LBB156_4:                              // %"$2"
	adrp	x8, SymTab+8
	add	x8, x8, :lo12:SymTab+8
	cmp	x0, x8
	b.ne	.LBB156_9
// %bb.5:                               // %"$7"
	ldp	w19, w8, [x19, #8]
	bfi	x19, x8, #32, #32
.LBB156_6:                              // %"$10"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w0, w8, [x19]
	bfi	x0, x8, #32, #32
	ldp	w19, w8, [x19, #8]
	bfi	x19, x8, #32, #32
	tst	x19, #0xf
	b.ne	.LBB156_12
// %bb.7:                               // %"$11"
                                        //   in Loop: Header=BB156_6 Depth=1
	tst	x0, #0xf
	b.ne	.LBB156_6
// %bb.8:                               // %"$20"
                                        //   in Loop: Header=BB156_6 Depth=1
	bl	evList
	b	.LBB156_6
.LBB156_9:                              // %"$8"
	adrp	x8, SymTab+376
	str	x0, [x8, :lo12:SymTab+376]
	ldp	w0, w8, [x19]
	bfi	x0, x8, #32, #32
	tst	x0, #0x6
	b.ne	.LBB156_13
.LBB156_10:                             // %"$15"
	tbz	w0, #3, .LBB156_14
// %bb.11:                              // %"$18"
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	ldp	x30, x19, [sp], #16             // 16-byte Folded Reload
	ret
.LBB156_12:                             // %"$13"
	tst	x0, #0x6
	b.eq	.LBB156_10
.LBB156_13:                             // %"$9"
	ldp	x30, x19, [sp], #16             // 16-byte Folded Reload
	ret
.LBB156_14:                             // %"$24"
	bl	evList
	ldp	x30, x19, [sp], #16             // 16-byte Folded Reload
	ret
.Lfunc_end156:
	.size	_if, .Lfunc_end156-_if
	.cfi_endproc
                                        // -- End function
	.globl	_ifn                            // -- Begin function _ifn
	.p2align	4
	.type	_ifn,@function
_ifn:                                   // @_ifn
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x30, x19, [sp, #-16]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w19, -8
	.cfi_offset w30, -16
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w0, w8, [x9]
	bfi	x0, x8, #32, #32
	ldp	w19, w8, [x9, #8]
	bfi	x19, x8, #32, #32
	tst	x0, #0x6
	b.ne	.LBB157_4
// %bb.1:                               // %"$3"
	tbz	w0, #3, .LBB157_3
// %bb.2:                               // %"$6"
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB157_4
.LBB157_3:                              // %"$5"
	bl	evList
.LBB157_4:                              // %"$2"
	adrp	x8, SymTab+8
	add	x8, x8, :lo12:SymTab+8
	cmp	x0, x8
	b.ne	.LBB157_7
// %bb.5:                               // %"$7"
	ldp	w0, w8, [x19]
	bfi	x0, x8, #32, #32
	tst	x0, #0x6
	b.eq	.LBB157_12
.LBB157_6:                              // %"$9"
	ldp	x30, x19, [sp], #16             // 16-byte Folded Reload
	ret
.LBB157_7:                              // %"$8"
	adrp	x8, SymTab+376
	str	x0, [x8, :lo12:SymTab+376]
	ldp	w19, w8, [x19, #8]
	bfi	x19, x8, #32, #32
.LBB157_8:                              // %"$15"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w0, w8, [x19]
	bfi	x0, x8, #32, #32
	ldp	w19, w8, [x19, #8]
	bfi	x19, x8, #32, #32
	tst	x19, #0xf
	b.ne	.LBB157_11
// %bb.9:                               // %"$16"
                                        //   in Loop: Header=BB157_8 Depth=1
	tst	x0, #0xf
	b.ne	.LBB157_8
// %bb.10:                              // %"$25"
                                        //   in Loop: Header=BB157_8 Depth=1
	bl	evList
	b	.LBB157_8
.LBB157_11:                             // %"$18"
	tst	x0, #0x6
	b.ne	.LBB157_6
.LBB157_12:                             // %"$20"
	tbz	w0, #3, .LBB157_14
// %bb.13:                              // %"$14"
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	ldp	x30, x19, [sp], #16             // 16-byte Folded Reload
	ret
.LBB157_14:                             // %"$13"
	bl	evList
	ldp	x30, x19, [sp], #16             // 16-byte Folded Reload
	ret
.Lfunc_end157:
	.size	_ifn, .Lfunc_end157-_ifn
	.cfi_endproc
                                        // -- End function
	.globl	_if2                            // -- Begin function _if2
	.p2align	4
	.type	_if2,@function
_if2:                                   // @_if2
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x30, x21, [sp, #-32]!           // 16-byte Folded Spill
	stp	x20, x19, [sp, #16]             // 16-byte Folded Spill
	.cfi_def_cfa_offset 32
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w30, -32
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w0, w8, [x9]
	bfi	x0, x8, #32, #32
	ldp	w20, w8, [x9, #8]
	bfi	x20, x8, #32, #32
	tst	x0, #0x6
	b.ne	.LBB158_4
// %bb.1:                               // %"$3"
	tbz	w0, #3, .LBB158_3
// %bb.2:                               // %"$6"
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB158_4
.LBB158_3:                              // %"$5"
	bl	evList
.LBB158_4:                              // %"$2"
	adrp	x19, SymTab+8
	add	x19, x19, :lo12:SymTab+8
	cmp	x0, x19
	b.ne	.LBB158_11
// %bb.5:                               // %"$7"
	ldp	w0, w8, [x20]
	bfi	x0, x8, #32, #32
	ldp	w20, w8, [x20, #8]
	bfi	x20, x8, #32, #32
	tst	x0, #0x6
	b.eq	.LBB158_14
// %bb.6:                               // %"$10"
	cmp	x0, x19
	b.ne	.LBB158_19
.LBB158_7:                              // %"$15"
	ldp	w9, w8, [x20, #8]
	bfi	x9, x8, #32, #32
	ldp	w9, w8, [x9, #8]
	bfi	x9, x8, #32, #32
	ldp	w19, w8, [x9, #8]
	bfi	x19, x8, #32, #32
.LBB158_8:                              // %"$18"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w0, w8, [x19]
	bfi	x0, x8, #32, #32
	ldp	w19, w8, [x19, #8]
	bfi	x19, x8, #32, #32
	tst	x19, #0xf
	b.ne	.LBB158_24
// %bb.9:                               // %"$19"
                                        //   in Loop: Header=BB158_8 Depth=1
	tst	x0, #0xf
	b.ne	.LBB158_8
// %bb.10:                              // %"$28"
                                        //   in Loop: Header=BB158_8 Depth=1
	bl	evList
	b	.LBB158_8
.LBB158_11:                             // %"$8"
	adrp	x21, SymTab+376
	str	x0, [x21, :lo12:SymTab+376]
	ldp	w0, w8, [x20]
	bfi	x0, x8, #32, #32
	ldp	w20, w8, [x20, #8]
	bfi	x20, x8, #32, #32
	tst	x0, #0x6
	b.eq	.LBB158_16
// %bb.12:                              // %"$34"
	cmp	x0, x19
	b.ne	.LBB158_22
.LBB158_13:                             // %"$39"
	ldp	w9, w8, [x20, #8]
	b	.LBB158_20
.LBB158_14:                             // %"$11"
	tbz	w0, #3, .LBB158_18
// %bb.15:                              // %"$14"
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	cmp	x0, x19
	b.ne	.LBB158_19
	b	.LBB158_7
.LBB158_16:                             // %"$35"
	tbz	w0, #3, .LBB158_21
// %bb.17:                              // %"$38"
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	cmp	x0, x19
	b.ne	.LBB158_22
	b	.LBB158_13
.LBB158_18:                             // %"$13"
	bl	evList
	cmp	x0, x19
	b.eq	.LBB158_7
.LBB158_19:                             // %"$16"
	adrp	x8, SymTab+376
	str	x0, [x8, :lo12:SymTab+376]
	ldp	w9, w8, [x20, #8]
	bfi	x9, x8, #32, #32
	ldp	w9, w8, [x9, #8]
.LBB158_20:                             // %"$39"
	bfi	x9, x8, #32, #32
	ldp	w0, w8, [x9]
	b	.LBB158_23
.LBB158_21:                             // %"$37"
	bl	evList
	cmp	x0, x19
	b.eq	.LBB158_13
.LBB158_22:                             // %"$40"
	str	x0, [x21, :lo12:SymTab+376]
	ldp	w0, w8, [x20]
.LBB158_23:                             // %"$39"
	bfi	x0, x8, #32, #32
.LBB158_24:                             // %"$21"
	tst	x0, #0x6
	b.ne	.LBB158_28
// %bb.25:                              // %"$23"
	tbz	w0, #3, .LBB158_27
// %bb.26:                              // %"$26"
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB158_28
.LBB158_27:                             // %"$50"
	bl	evList
.LBB158_28:                             // %"$9"
	ldp	x20, x19, [sp, #16]             // 16-byte Folded Reload
	ldp	x30, x21, [sp], #32             // 16-byte Folded Reload
	ret
.Lfunc_end158:
	.size	_if2, .Lfunc_end158-_if2
	.cfi_endproc
                                        // -- End function
	.globl	_when                           // -- Begin function _when
	.p2align	4
	.type	_when,@function
_when:                                  // @_when
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-32]!                // 8-byte Folded Spill
	stp	x20, x19, [sp, #16]             // 16-byte Folded Spill
	.cfi_def_cfa_offset 32
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w30, -32
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w0, w8, [x9]
	bfi	x0, x8, #32, #32
	ldp	w19, w20, [x9, #8]
	tst	x0, #0x6
	b.ne	.LBB159_4
// %bb.1:                               // %"$3"
	tbz	w0, #3, .LBB159_3
// %bb.2:                               // %"$6"
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB159_4
.LBB159_3:                              // %"$5"
	bl	evList
.LBB159_4:                              // %"$2"
	adrp	x8, SymTab+8
	add	x8, x8, :lo12:SymTab+8
	cmp	x0, x8
	b.eq	.LBB159_13
// %bb.5:                               // %"$8"
	bfi	x19, x20, #32, #32
	adrp	x8, SymTab+376
	str	x0, [x8, :lo12:SymTab+376]
.LBB159_6:                              // %"$10"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w0, w8, [x19]
	bfi	x0, x8, #32, #32
	ldp	w19, w8, [x19, #8]
	bfi	x19, x8, #32, #32
	tst	x19, #0xf
	b.ne	.LBB159_9
// %bb.7:                               // %"$11"
                                        //   in Loop: Header=BB159_6 Depth=1
	tst	x0, #0xf
	b.ne	.LBB159_6
// %bb.8:                               // %"$20"
                                        //   in Loop: Header=BB159_6 Depth=1
	bl	evList
	b	.LBB159_6
.LBB159_9:                              // %"$13"
	tst	x0, #0x6
	b.ne	.LBB159_13
// %bb.10:                              // %"$15"
	tbz	w0, #3, .LBB159_12
// %bb.11:                              // %"$18"
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB159_13
.LBB159_12:                             // %"$17"
	bl	evList
.LBB159_13:                             // %"$9"
	ldp	x20, x19, [sp, #16]             // 16-byte Folded Reload
	ldr	x30, [sp], #32                  // 8-byte Folded Reload
	ret
.Lfunc_end159:
	.size	_when, .Lfunc_end159-_when
	.cfi_endproc
                                        // -- End function
	.globl	_unless                         // -- Begin function _unless
	.p2align	4
	.type	_unless,@function
_unless:                                // @_unless
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-32]!                // 8-byte Folded Spill
	stp	x20, x19, [sp, #16]             // 16-byte Folded Spill
	.cfi_def_cfa_offset 32
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w30, -32
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w8, w10, [x9]
	bfi	x8, x10, #32, #32
	ldp	w19, w20, [x9, #8]
	tst	x8, #0x6
	b.ne	.LBB160_4
// %bb.1:                               // %"$3"
	tbz	w8, #3, .LBB160_3
// %bb.2:                               // %"$6"
	ldp	w8, w9, [x8]
	bfi	x8, x9, #32, #32
	b	.LBB160_4
.LBB160_3:                              // %"$5"
	mov	x0, x8
	bl	evList
	mov	x8, x0
.LBB160_4:                              // %"$2"
	adrp	x0, SymTab+8
	add	x0, x0, :lo12:SymTab+8
	cmp	x8, x0
	b.ne	.LBB160_9
// %bb.5:                               // %"$7"
	bfi	x19, x20, #32, #32
.LBB160_6:                              // %"$10"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w0, w8, [x19]
	bfi	x0, x8, #32, #32
	ldp	w19, w8, [x19, #8]
	bfi	x19, x8, #32, #32
	tst	x19, #0xf
	b.ne	.LBB160_10
// %bb.7:                               // %"$11"
                                        //   in Loop: Header=BB160_6 Depth=1
	tst	x0, #0xf
	b.ne	.LBB160_6
// %bb.8:                               // %"$20"
                                        //   in Loop: Header=BB160_6 Depth=1
	bl	evList
	b	.LBB160_6
.LBB160_9:                              // %"$8"
	str	x8, [x0, #368]
	b	.LBB160_14
.LBB160_10:                             // %"$13"
	tst	x0, #0x6
	b.ne	.LBB160_14
// %bb.11:                              // %"$15"
	tbz	w0, #3, .LBB160_13
// %bb.12:                              // %"$18"
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB160_14
.LBB160_13:                             // %"$17"
	bl	evList
.LBB160_14:                             // %"$9"
	ldp	x20, x19, [sp, #16]             // 16-byte Folded Reload
	ldr	x30, [sp], #32                  // 8-byte Folded Reload
	ret
.Lfunc_end160:
	.size	_unless, .Lfunc_end160-_unless
	.cfi_endproc
                                        // -- End function
	.globl	_cond                           // -- Begin function _cond
	.p2align	4
	.type	_cond,@function
_cond:                                  // @_cond
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x30, x21, [sp, #-32]!           // 16-byte Folded Spill
	stp	x20, x19, [sp, #16]             // 16-byte Folded Spill
	.cfi_def_cfa_offset 32
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w30, -32
	mov	x20, x0
	adrp	x19, SymTab+8
	add	x19, x19, :lo12:SymTab+8
	b	.LBB161_3
.LBB161_1:                              // %"$9"
                                        //   in Loop: Header=BB161_3 Depth=1
	bl	evList
.LBB161_2:                              // %"$6"
                                        //   in Loop: Header=BB161_3 Depth=1
	cmp	x0, x19
	b.ne	.LBB161_7
.LBB161_3:                              // %"$2"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w20, w8, [x20, #8]
	bfi	x20, x8, #32, #32
	tst	x20, #0xf
	b.ne	.LBB161_15
// %bb.4:                               // %"$3"
                                        //   in Loop: Header=BB161_3 Depth=1
	ldp	w21, w8, [x20]
	bfi	x21, x8, #32, #32
	ldp	w0, w8, [x21]
	bfi	x0, x8, #32, #32
	tst	x0, #0x6
	b.ne	.LBB161_2
// %bb.5:                               // %"$7"
                                        //   in Loop: Header=BB161_3 Depth=1
	tbz	w0, #3, .LBB161_1
// %bb.6:                               // %"$10"
                                        //   in Loop: Header=BB161_3 Depth=1
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB161_2
.LBB161_7:                              // %"$12"
	adrp	x8, SymTab+376
	str	x0, [x8, :lo12:SymTab+376]
	ldp	w20, w8, [x21, #8]
	bfi	x20, x8, #32, #32
.LBB161_8:                              // %"$13"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w19, w8, [x20]
	bfi	x19, x8, #32, #32
	ldp	w20, w8, [x20, #8]
	bfi	x20, x8, #32, #32
	tst	x20, #0xf
	b.ne	.LBB161_11
// %bb.9:                               // %"$14"
                                        //   in Loop: Header=BB161_8 Depth=1
	tst	x19, #0xf
	b.ne	.LBB161_8
// %bb.10:                              // %"$23"
                                        //   in Loop: Header=BB161_8 Depth=1
	mov	x0, x19
	bl	evList
	b	.LBB161_8
.LBB161_11:                             // %"$16"
	tst	x19, #0x6
	b.ne	.LBB161_15
// %bb.12:                              // %"$18"
	tbz	w19, #3, .LBB161_14
// %bb.13:                              // %"$21"
	ldp	w19, w8, [x19]
	bfi	x19, x8, #32, #32
	b	.LBB161_15
.LBB161_14:                             // %"$20"
	mov	x0, x19
	bl	evList
	mov	x19, x0
.LBB161_15:                             // %"$4"
	mov	x0, x19
	ldp	x20, x19, [sp, #16]             // 16-byte Folded Reload
	ldp	x30, x21, [sp], #32             // 16-byte Folded Reload
	ret
.Lfunc_end161:
	.size	_cond, .Lfunc_end161-_cond
	.cfi_endproc
                                        // -- End function
	.globl	_nond                           // -- Begin function _nond
	.p2align	4
	.type	_nond,@function
_nond:                                  // @_nond
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-48]!                // 8-byte Folded Spill
	stp	x22, x21, [sp, #16]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #32]             // 16-byte Folded Spill
	.cfi_def_cfa_offset 48
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w30, -48
	mov	x20, x0
	adrp	x21, SymTab+376
	adrp	x19, SymTab+8
	add	x19, x19, :lo12:SymTab+8
.LBB162_1:                              // %"$2"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w20, w8, [x20, #8]
	bfi	x20, x8, #32, #32
	tst	x20, #0xf
	b.ne	.LBB162_16
// %bb.2:                               // %"$3"
                                        //   in Loop: Header=BB162_1 Depth=1
	ldp	w22, w8, [x20]
	bfi	x22, x8, #32, #32
	ldp	w0, w8, [x22]
	bfi	x0, x8, #32, #32
	tst	x0, #0x6
	b.ne	.LBB162_5
// %bb.3:                               // %"$7"
                                        //   in Loop: Header=BB162_1 Depth=1
	tbz	w0, #3, .LBB162_7
// %bb.4:                               // %"$10"
                                        //   in Loop: Header=BB162_1 Depth=1
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
.LBB162_5:                              // %"$6"
                                        //   in Loop: Header=BB162_1 Depth=1
	cmp	x0, x19
	b.eq	.LBB162_8
.LBB162_6:                              // %"$11"
                                        //   in Loop: Header=BB162_1 Depth=1
	str	x0, [x21, :lo12:SymTab+376]
	b	.LBB162_1
.LBB162_7:                              // %"$9"
                                        //   in Loop: Header=BB162_1 Depth=1
	bl	evList
	cmp	x0, x19
	b.ne	.LBB162_6
.LBB162_8:                              // %"$12"
	ldp	w20, w8, [x22, #8]
	bfi	x20, x8, #32, #32
.LBB162_9:                              // %"$13"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w19, w8, [x20]
	bfi	x19, x8, #32, #32
	ldp	w20, w8, [x20, #8]
	bfi	x20, x8, #32, #32
	tst	x20, #0xf
	b.ne	.LBB162_12
// %bb.10:                              // %"$14"
                                        //   in Loop: Header=BB162_9 Depth=1
	tst	x19, #0xf
	b.ne	.LBB162_9
// %bb.11:                              // %"$23"
                                        //   in Loop: Header=BB162_9 Depth=1
	mov	x0, x19
	bl	evList
	b	.LBB162_9
.LBB162_12:                             // %"$16"
	tst	x19, #0x6
	b.ne	.LBB162_16
// %bb.13:                              // %"$18"
	tbz	w19, #3, .LBB162_15
// %bb.14:                              // %"$21"
	ldp	w19, w8, [x19]
	bfi	x19, x8, #32, #32
	b	.LBB162_16
.LBB162_15:                             // %"$20"
	mov	x0, x19
	bl	evList
	mov	x19, x0
.LBB162_16:                             // %"$4"
	mov	x0, x19
	ldp	x20, x19, [sp, #32]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #16]             // 16-byte Folded Reload
	ldr	x30, [sp], #48                  // 8-byte Folded Reload
	ret
.Lfunc_end162:
	.size	_nond, .Lfunc_end162-_nond
	.cfi_endproc
                                        // -- End function
	.globl	_case                           // -- Begin function _case
	.p2align	4
	.type	_case,@function
_case:                                  // @_case
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-64]!                // 8-byte Folded Spill
	stp	x24, x23, [sp, #16]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #32]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #48]             // 16-byte Folded Spill
	.cfi_def_cfa_offset 64
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w30, -64
	ldp	w22, w8, [x0, #8]
	bfi	x22, x8, #32, #32
	ldp	w20, w8, [x22]
	bfi	x20, x8, #32, #32
	tst	x20, #0x6
	b.ne	.LBB163_4
// %bb.1:                               // %"$3"
	tbz	w20, #3, .LBB163_3
// %bb.2:                               // %"$6"
	ldp	w20, w8, [x20]
	bfi	x20, x8, #32, #32
	b	.LBB163_4
.LBB163_3:                              // %"$5"
	mov	x0, x20
	bl	evList
	mov	x20, x0
.LBB163_4:                              // %"$2"
	adrp	x8, SymTab+376
	adrp	x19, SymTab+8
	add	x19, x19, :lo12:SymTab+8
	str	x20, [x8, :lo12:SymTab+376]
	adrp	x23, SymTab+216
	add	x23, x23, :lo12:SymTab+216
	b	.LBB163_7
.LBB163_5:                              //   in Loop: Header=BB163_7 Depth=1
	mov	w0, #1
.LBB163_6:                              // %"$11"
                                        //   in Loop: Header=BB163_7 Depth=1
	tbnz	w0, #0, .LBB163_15
.LBB163_7:                              // %"$7"
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB163_12 Depth 2
	ldp	w22, w8, [x22, #8]
	bfi	x22, x8, #32, #32
	tst	x22, #0xf
	b.ne	.LBB163_23
// %bb.8:                               // %"$8"
                                        //   in Loop: Header=BB163_7 Depth=1
	ldp	w24, w8, [x22]
	bfi	x24, x8, #32, #32
	ldp	w21, w8, [x24]
	bfi	x21, x8, #32, #32
	cmp	x21, x23
	b.eq	.LBB163_5
// %bb.9:                               // %"$12"
                                        //   in Loop: Header=BB163_7 Depth=1
	tst	x21, #0xf
	b.eq	.LBB163_12
// %bb.10:                              // %"$13"
                                        //   in Loop: Header=BB163_7 Depth=1
	mov	x0, x21
	mov	x1, x20
	bl	equal
	b	.LBB163_6
.LBB163_11:                             // %"$20"
                                        //   in Loop: Header=BB163_12 Depth=2
	ldp	w21, w8, [x21, #8]
	bfi	x21, x8, #32, #32
.LBB163_12:                             // %"$16"
                                        //   Parent Loop BB163_7 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	tst	x21, #0xf
	b.ne	.LBB163_14
// %bb.13:                              // %"$17"
                                        //   in Loop: Header=BB163_12 Depth=2
	ldp	w1, w8, [x21]
	bfi	x1, x8, #32, #32
	mov	x0, x20
	bl	equal
	tbz	w0, #0, .LBB163_11
	b	.LBB163_5
.LBB163_14:                             //   in Loop: Header=BB163_7 Depth=1
	mov	w0, wzr
	b	.LBB163_6
.LBB163_15:                             // %"$23"
	ldp	w20, w8, [x24, #8]
	bfi	x20, x8, #32, #32
.LBB163_16:                             // %"$24"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w19, w8, [x20]
	bfi	x19, x8, #32, #32
	ldp	w20, w8, [x20, #8]
	bfi	x20, x8, #32, #32
	tst	x20, #0xf
	b.ne	.LBB163_19
// %bb.17:                              // %"$25"
                                        //   in Loop: Header=BB163_16 Depth=1
	tst	x19, #0xf
	b.ne	.LBB163_16
// %bb.18:                              // %"$34"
                                        //   in Loop: Header=BB163_16 Depth=1
	mov	x0, x19
	bl	evList
	b	.LBB163_16
.LBB163_19:                             // %"$27"
	tst	x19, #0x6
	b.ne	.LBB163_23
// %bb.20:                              // %"$29"
	tbz	w19, #3, .LBB163_22
// %bb.21:                              // %"$32"
	ldp	w19, w8, [x19]
	bfi	x19, x8, #32, #32
	b	.LBB163_23
.LBB163_22:                             // %"$31"
	mov	x0, x19
	bl	evList
	mov	x19, x0
.LBB163_23:                             // %"$9"
	mov	x0, x19
	ldp	x20, x19, [sp, #48]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #32]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #16]             // 16-byte Folded Reload
	ldr	x30, [sp], #64                  // 8-byte Folded Reload
	ret
.Lfunc_end163:
	.size	_case, .Lfunc_end163-_case
	.cfi_endproc
                                        // -- End function
	.globl	_casq                           // -- Begin function _casq
	.p2align	4
	.type	_casq,@function
_casq:                                  // @_casq
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x30, x19, [sp, #-16]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w19, -8
	.cfi_offset w30, -16
	ldp	w19, w8, [x0, #8]
	bfi	x19, x8, #32, #32
	ldp	w8, w9, [x19]
	bfi	x8, x9, #32, #32
	tst	x8, #0x6
	b.ne	.LBB164_4
// %bb.1:                               // %"$3"
	tbz	w8, #3, .LBB164_3
// %bb.2:                               // %"$6"
	ldp	w8, w9, [x8]
	bfi	x8, x9, #32, #32
	b	.LBB164_4
.LBB164_3:                              // %"$5"
	mov	x0, x8
	bl	evList
	mov	x8, x0
.LBB164_4:                              // %"$2"
	adrp	x9, SymTab+376
	adrp	x0, SymTab+8
	add	x0, x0, :lo12:SymTab+8
	str	x8, [x9, :lo12:SymTab+376]
	adrp	x9, SymTab+216
	add	x9, x9, :lo12:SymTab+216
	b	.LBB164_6
.LBB164_5:                              //   in Loop: Header=BB164_6 Depth=1
	mov	w11, #1
	cbnz	w11, .LBB164_13
.LBB164_6:                              // %"$7"
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB164_10 Depth 2
	ldp	w19, w10, [x19, #8]
	bfi	x19, x10, #32, #32
	tst	x19, #0xf
	b.ne	.LBB164_18
// %bb.7:                               // %"$8"
                                        //   in Loop: Header=BB164_6 Depth=1
	ldp	w10, w11, [x19]
	bfi	x10, x11, #32, #32
	ldp	w11, w12, [x10]
	bfi	x11, x12, #32, #32
	cmp	x11, x9
	b.eq	.LBB164_5
// %bb.8:                               // %"$12"
                                        //   in Loop: Header=BB164_6 Depth=1
	cmp	x11, x8
	b.eq	.LBB164_5
// %bb.9:                               // %"$14"
                                        //   in Loop: Header=BB164_6 Depth=1
	tst	x11, #0xf
	b.ne	.LBB164_12
.LBB164_10:                             // %"$15"
                                        //   Parent Loop BB164_6 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	w13, w12, [x11]
	bfi	x13, x12, #32, #32
	cmp	x8, x13
	b.eq	.LBB164_5
// %bb.11:                              // %"$18"
                                        //   in Loop: Header=BB164_10 Depth=2
	ldp	w11, w12, [x11, #8]
	bfi	x11, x12, #32, #32
	tst	x11, #0xf
	b.eq	.LBB164_10
.LBB164_12:                             //   in Loop: Header=BB164_6 Depth=1
	mov	w11, wzr
	cbz	w11, .LBB164_6
.LBB164_13:                             // %"$21"
	ldp	w19, w8, [x10, #8]
	bfi	x19, x8, #32, #32
.LBB164_14:                             // %"$22"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w0, w8, [x19]
	bfi	x0, x8, #32, #32
	ldp	w19, w8, [x19, #8]
	bfi	x19, x8, #32, #32
	tst	x19, #0xf
	b.ne	.LBB164_17
// %bb.15:                              // %"$23"
                                        //   in Loop: Header=BB164_14 Depth=1
	tst	x0, #0xf
	b.ne	.LBB164_14
// %bb.16:                              // %"$32"
                                        //   in Loop: Header=BB164_14 Depth=1
	bl	evList
	b	.LBB164_14
.LBB164_17:                             // %"$25"
	tst	x0, #0x6
	b.eq	.LBB164_19
.LBB164_18:                             // %"$9"
	ldp	x30, x19, [sp], #16             // 16-byte Folded Reload
	ret
.LBB164_19:                             // %"$27"
	tbz	w0, #3, .LBB164_21
// %bb.20:                              // %"$30"
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	ldp	x30, x19, [sp], #16             // 16-byte Folded Reload
	ret
.LBB164_21:                             // %"$29"
	bl	evList
	ldp	x30, x19, [sp], #16             // 16-byte Folded Reload
	ret
.Lfunc_end164:
	.size	_casq, .Lfunc_end164-_casq
	.cfi_endproc
                                        // -- End function
	.globl	_state                          // -- Begin function _state
	.p2align	4
	.type	_state,@function
_state:                                 // @_state
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-80]!           // 16-byte Folded Spill
	str	x25, [sp, #16]                  // 8-byte Folded Spill
	stp	x24, x23, [sp, #32]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #48]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #64]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 80
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -64
	.cfi_offset w30, -72
	.cfi_offset w29, -80
	mov	x21, x0
	ldp	w23, w8, [x0, #8]
	bfi	x23, x8, #32, #32
	ldp	w20, w8, [x23]
	bfi	x20, x8, #32, #32
	tst	x20, #0x6
	b.ne	.LBB165_4
// %bb.1:                               // %"$3"
	tbz	w20, #3, .LBB165_3
// %bb.2:                               // %"$6"
	ldp	w20, w8, [x20]
	bfi	x20, x8, #32, #32
	b	.LBB165_4
.LBB165_3:                              // %"$5"
	mov	x0, x20
	bl	evList
	mov	x20, x0
.LBB165_4:                              // %"$2"
	tst	x20, #0x6
	b.ne	.LBB165_29
// %bb.5:                               // %"$8"
	adrp	x19, SymTab+8
	add	x19, x19, :lo12:SymTab+8
	add	x8, x19, #208                   // =208
	cmp	x8, x20
	ccmp	x20, x19, #0, hs
	b.hs	.LBB165_30
// %bb.6:                               // %"$12"
	adrp	x21, env
	ldr	x8, [x21, :lo12:env]
	mov	x9, sp
	sub	x22, x9, #16                    // =16
	mov	sp, x22
	lsr	x10, x20, #32
	lsr	x11, x8, #32
	stp	w20, w10, [x9, #-16]
	stp	w8, w11, [x9, #-8]
	adrp	x24, SymTab+216
	add	x24, x24, :lo12:SymTab+216
	str	x22, [x21, :lo12:env]
	b	.LBB165_9
.LBB165_7:                              // %"$27"
                                        //   in Loop: Header=BB165_9 Depth=1
	ldp	w25, w9, [x8, #8]
	bfi	x25, x9, #32, #32
	ldp	w0, w8, [x25]
	bfi	x0, x8, #32, #32
	tst	x0, #0x6
	b.eq	.LBB165_16
.LBB165_8:                              // %"$29"
                                        //   in Loop: Header=BB165_9 Depth=1
	cmp	x0, x19
	b.ne	.LBB165_20
.LBB165_9:                              // %"$13"
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB165_13 Depth 2
	ldp	w23, w8, [x23, #8]
	bfi	x23, x8, #32, #32
	tst	x23, #0xf
	b.ne	.LBB165_28
// %bb.10:                              // %"$14"
                                        //   in Loop: Header=BB165_9 Depth=1
	ldp	w8, w9, [x23]
	bfi	x8, x9, #32, #32
	ldp	w9, w10, [x8]
	bfi	x9, x10, #32, #32
	cmp	x9, x24
	b.eq	.LBB165_12
// %bb.11:                              // %"$18"
                                        //   in Loop: Header=BB165_9 Depth=1
	ldp	w10, w11, [x20]
	bfi	x10, x11, #32, #32
	cmp	x9, x10
	b.ne	.LBB165_13
.LBB165_12:                             //   in Loop: Header=BB165_9 Depth=1
	mov	w9, #1
	cbz	w9, .LBB165_9
	b	.LBB165_7
.LBB165_13:                             // %"$21"
                                        //   Parent Loop BB165_9 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	tst	x9, #0xf
	b.ne	.LBB165_18
// %bb.14:                              // %"$22"
                                        //   in Loop: Header=BB165_13 Depth=2
	ldp	w12, w11, [x9]
	bfi	x12, x11, #32, #32
	cmp	x10, x12
	b.eq	.LBB165_12
// %bb.15:                              // %"$25"
                                        //   in Loop: Header=BB165_13 Depth=2
	ldp	w9, w11, [x9, #8]
	bfi	x9, x11, #32, #32
	b	.LBB165_13
.LBB165_16:                             // %"$30"
                                        //   in Loop: Header=BB165_9 Depth=1
	tbz	w0, #3, .LBB165_19
// %bb.17:                              // %"$33"
                                        //   in Loop: Header=BB165_9 Depth=1
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB165_8
.LBB165_18:                             //   in Loop: Header=BB165_9 Depth=1
	mov	w9, wzr
	cbz	w9, .LBB165_9
	b	.LBB165_7
.LBB165_19:                             // %"$32"
                                        //   in Loop: Header=BB165_9 Depth=1
	bl	evList
	b	.LBB165_8
.LBB165_20:                             // %"$35"
	adrp	x8, SymTab+376
	str	x0, [x8, :lo12:SymTab+376]
	lsr	x8, x0, #32
	stp	w0, w8, [x20]
	ldp	w20, w8, [x25, #8]
	bfi	x20, x8, #32, #32
.LBB165_21:                             // %"$36"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w19, w8, [x20]
	bfi	x19, x8, #32, #32
	ldp	w20, w8, [x20, #8]
	bfi	x20, x8, #32, #32
	tst	x20, #0xf
	b.ne	.LBB165_24
// %bb.22:                              // %"$37"
                                        //   in Loop: Header=BB165_21 Depth=1
	tst	x19, #0xf
	b.ne	.LBB165_21
// %bb.23:                              // %"$46"
                                        //   in Loop: Header=BB165_21 Depth=1
	mov	x0, x19
	bl	evList
	b	.LBB165_21
.LBB165_24:                             // %"$39"
	tst	x19, #0x6
	b.ne	.LBB165_28
// %bb.25:                              // %"$41"
	tbz	w19, #3, .LBB165_27
// %bb.26:                              // %"$44"
	ldp	w19, w8, [x19]
	bfi	x19, x8, #32, #32
	b	.LBB165_28
.LBB165_27:                             // %"$43"
	mov	x0, x19
	bl	evList
	mov	x19, x0
.LBB165_28:                             // %"$15"
	ldp	w9, w8, [x22, #8]
	bfi	x9, x8, #32, #32
	str	x9, [x21, :lo12:env]
	mov	x0, x19
	mov	sp, x29
	ldp	x20, x19, [sp, #64]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #48]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #32]             // 16-byte Folded Reload
	ldr	x25, [sp, #16]                  // 8-byte Folded Reload
	ldp	x29, x30, [sp], #80             // 16-byte Folded Reload
	ret
.LBB165_29:                             // %"$7"
	mov	x0, x21
	mov	x1, x20
	bl	varErr
.LBB165_30:                             // %"$11"
	mov	x0, x21
	mov	x1, x20
	bl	protErr
.Lfunc_end165:
	.size	_state, .Lfunc_end165-_state
	.cfi_endproc
                                        // -- End function
	.globl	_while                          // -- Begin function _while
	.p2align	4
	.type	_while,@function
_while:                                 // @_while
	.cfi_startproc
// %bb.0:                               // %"$1"
	sub	sp, sp, #80                     // =80
	str	x30, [sp, #16]                  // 8-byte Folded Spill
	stp	x24, x23, [sp, #32]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #48]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #64]             // 16-byte Folded Spill
	.cfi_def_cfa_offset 80
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w30, -64
	mov	x8, x0
	adrp	x24, env
	add	x24, x24, :lo12:env
	mov	x0, sp
	ldp	w8, w9, [x8, #8]
	ldr	x10, [x24]
	bfi	x8, x9, #32, #32
	ldp	w19, w9, [x8]
	ldp	w21, w11, [x8, #8]
	bfi	x19, x9, #32, #32
	bfi	x21, x11, #32, #32
	adrp	x22, SymTab+8
	add	x22, x22, :lo12:SymTab+8
	stp	x22, x10, [sp]
	adrp	x23, SymTab+376
	mov	x20, x22
	b	.LBB166_2
.LBB166_1:                              // %"$17"
                                        //   in Loop: Header=BB166_2 Depth=1
	bl	evList
	mov	x20, x0
.LBB166_2:                              // %"$2"
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB166_7 Depth 2
	lsr	x8, x0, #32
	stp	w0, w8, [x24]
	tst	x19, #0x6
	mov	x0, x19
	b.ne	.LBB166_5
// %bb.3:                               // %"$4"
                                        //   in Loop: Header=BB166_2 Depth=1
	tbz	w19, #3, .LBB166_13
// %bb.4:                               // %"$7"
                                        //   in Loop: Header=BB166_2 Depth=1
	ldp	w0, w8, [x19]
	bfi	x0, x8, #32, #32
.LBB166_5:                              // %"$3"
                                        //   in Loop: Header=BB166_2 Depth=1
	cmp	x0, x22
	b.eq	.LBB166_14
.LBB166_6:                              // %"$8"
                                        //   in Loop: Header=BB166_2 Depth=1
	str	x0, [x23, :lo12:SymTab+376]
	mov	x20, x21
.LBB166_7:                              // %"$10"
                                        //   Parent Loop BB166_2 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	w0, w8, [x20]
	bfi	x0, x8, #32, #32
	ldp	w20, w8, [x20, #8]
	bfi	x20, x8, #32, #32
	tst	x20, #0xf
	b.ne	.LBB166_10
// %bb.8:                               // %"$11"
                                        //   in Loop: Header=BB166_7 Depth=2
	tst	x0, #0xf
	b.ne	.LBB166_7
// %bb.9:                               // %"$20"
                                        //   in Loop: Header=BB166_7 Depth=2
	bl	evList
	b	.LBB166_7
.LBB166_10:                             // %"$13"
                                        //   in Loop: Header=BB166_2 Depth=1
	mov	x24, sp
	tst	x0, #0x6
	mov	x20, x0
	b.ne	.LBB166_2
// %bb.11:                              // %"$15"
                                        //   in Loop: Header=BB166_2 Depth=1
	mov	x24, sp
	tbz	w0, #3, .LBB166_1
// %bb.12:                              // %"$18"
                                        //   in Loop: Header=BB166_2 Depth=1
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	mov	x20, x0
	b	.LBB166_2
.LBB166_13:                             // %"$6"
                                        //   in Loop: Header=BB166_2 Depth=1
	mov	x0, x19
	bl	evList
	cmp	x0, x22
	b.ne	.LBB166_6
.LBB166_14:                             // %"$9"
	ldp	x8, x30, [sp, #8]               // 8-byte Folded Reload
	adrp	x9, env
	str	x8, [x9, :lo12:env]
	mov	x0, x20
	ldp	x20, x19, [sp, #64]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #48]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #32]             // 16-byte Folded Reload
	add	sp, sp, #80                     // =80
	ret
.Lfunc_end166:
	.size	_while, .Lfunc_end166-_while
	.cfi_endproc
                                        // -- End function
	.globl	_until                          // -- Begin function _until
	.p2align	4
	.type	_until,@function
_until:                                 // @_until
	.cfi_startproc
// %bb.0:                               // %"$1"
	sub	sp, sp, #64                     // =64
	stp	x30, x23, [sp, #16]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #32]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #48]             // 16-byte Folded Spill
	.cfi_def_cfa_offset 64
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w30, -48
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	adrp	x23, env
	add	x23, x23, :lo12:env
	ldp	w19, w8, [x9]
	ldp	w21, w10, [x9, #8]
	ldr	x9, [x23]
	bfi	x19, x8, #32, #32
	bfi	x21, x10, #32, #32
	mov	x0, sp
	adrp	x22, SymTab+8
	add	x22, x22, :lo12:SymTab+8
	stp	x22, x9, [sp]
	mov	x20, x22
	b	.LBB167_2
.LBB167_1:                              // %"$17"
                                        //   in Loop: Header=BB167_2 Depth=1
	bl	evList
	mov	x20, x0
.LBB167_2:                              // %"$2"
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB167_7 Depth 2
	lsr	x8, x0, #32
	stp	w0, w8, [x23]
	tst	x19, #0x6
	mov	x0, x19
	b.ne	.LBB167_5
// %bb.3:                               // %"$4"
                                        //   in Loop: Header=BB167_2 Depth=1
	tbz	w19, #3, .LBB167_13
// %bb.4:                               // %"$7"
                                        //   in Loop: Header=BB167_2 Depth=1
	ldp	w0, w8, [x19]
	bfi	x0, x8, #32, #32
.LBB167_5:                              // %"$3"
                                        //   in Loop: Header=BB167_2 Depth=1
	cmp	x0, x22
	b.ne	.LBB167_14
.LBB167_6:                              // %"$10.preheader"
                                        //   in Loop: Header=BB167_2 Depth=1
	mov	x20, x21
.LBB167_7:                              // %"$10"
                                        //   Parent Loop BB167_2 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	w0, w8, [x20]
	bfi	x0, x8, #32, #32
	ldp	w20, w8, [x20, #8]
	bfi	x20, x8, #32, #32
	tst	x20, #0xf
	b.ne	.LBB167_10
// %bb.8:                               // %"$11"
                                        //   in Loop: Header=BB167_7 Depth=2
	tst	x0, #0xf
	b.ne	.LBB167_7
// %bb.9:                               // %"$20"
                                        //   in Loop: Header=BB167_7 Depth=2
	bl	evList
	b	.LBB167_7
.LBB167_10:                             // %"$13"
                                        //   in Loop: Header=BB167_2 Depth=1
	mov	x23, sp
	tst	x0, #0x6
	mov	x20, x0
	b.ne	.LBB167_2
// %bb.11:                              // %"$15"
                                        //   in Loop: Header=BB167_2 Depth=1
	mov	x23, sp
	tbz	w0, #3, .LBB167_1
// %bb.12:                              // %"$18"
                                        //   in Loop: Header=BB167_2 Depth=1
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	mov	x20, x0
	b	.LBB167_2
.LBB167_13:                             // %"$6"
                                        //   in Loop: Header=BB167_2 Depth=1
	mov	x0, x19
	bl	evList
	cmp	x0, x22
	b.eq	.LBB167_6
.LBB167_14:                             // %"$9"
	adrp	x8, SymTab+376
	str	x0, [x8, :lo12:SymTab+376]
	ldr	x8, [sp, #8]
	adrp	x9, env
	str	x8, [x9, :lo12:env]
	mov	x0, x20
	ldp	x20, x19, [sp, #48]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #32]             // 16-byte Folded Reload
	ldp	x30, x23, [sp, #16]             // 16-byte Folded Reload
	add	sp, sp, #64                     // =64
	ret
.Lfunc_end167:
	.size	_until, .Lfunc_end167-_until
	.cfi_endproc
                                        // -- End function
	.globl	_at                             // -- Begin function _at
	.p2align	4
	.type	_at,@function
_at:                                    // @_at
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-32]!                // 8-byte Folded Spill
	stp	x20, x19, [sp, #16]             // 16-byte Folded Spill
	.cfi_def_cfa_offset 32
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w30, -32
	mov	x19, x0
	ldp	w20, w8, [x0, #8]
	bfi	x20, x8, #32, #32
	ldp	w1, w8, [x20]
	bfi	x1, x8, #32, #32
	tst	x1, #0x6
	b.ne	.LBB168_4
// %bb.1:                               // %"$3"
	tbz	w1, #3, .LBB168_3
// %bb.2:                               // %"$6"
	ldp	w1, w8, [x1]
	bfi	x1, x8, #32, #32
	b	.LBB168_4
.LBB168_3:                              // %"$5"
	mov	x0, x1
	bl	evList
	mov	x1, x0
.LBB168_4:                              // %"$2"
	tst	x1, #0xf
	b.ne	.LBB168_17
// %bb.5:                               // %"$8"
	ldp	w0, w8, [x1, #8]
	bfi	x0, x8, #32, #32
	adrp	x8, SymTab+8
	add	x8, x8, :lo12:SymTab+8
	cmp	x0, x8
	b.eq	.LBB168_16
// %bb.6:                               // %"$10"
	ldp	w9, w8, [x1]
	bfi	x9, x8, #32, #32
	add	x8, x9, #16                     // =16
	cmp	x8, x0
	b.hs	.LBB168_8
// %bb.7:                               // %"$13"
	lsr	x9, x8, #32
	stp	w8, w9, [x1]
	adrp	x0, SymTab+8
	add	x0, x0, :lo12:SymTab+8
	b	.LBB168_16
.LBB168_8:                              // %"$12"
	mov	w8, #2
	stp	w8, wzr, [x1]
	ldp	w19, w8, [x20, #8]
	bfi	x19, x8, #32, #32
.LBB168_9:                              // %"$14"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w0, w8, [x19]
	bfi	x0, x8, #32, #32
	ldp	w19, w8, [x19, #8]
	bfi	x19, x8, #32, #32
	tst	x19, #0xf
	b.ne	.LBB168_12
// %bb.10:                              // %"$15"
                                        //   in Loop: Header=BB168_9 Depth=1
	tst	x0, #0xf
	b.ne	.LBB168_9
// %bb.11:                              // %"$24"
                                        //   in Loop: Header=BB168_9 Depth=1
	bl	evList
	b	.LBB168_9
.LBB168_12:                             // %"$17"
	tst	x0, #0x6
	b.ne	.LBB168_16
// %bb.13:                              // %"$19"
	tbz	w0, #3, .LBB168_15
// %bb.14:                              // %"$22"
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB168_16
.LBB168_15:                             // %"$21"
	bl	evList
.LBB168_16:                             // %"$9"
	ldp	x20, x19, [sp, #16]             // 16-byte Folded Reload
	ldr	x30, [sp], #32                  // 8-byte Folded Reload
	ret
.LBB168_17:                             // %"$7"
	mov	x0, x19
	bl	pairErr
.Lfunc_end168:
	.size	_at, .Lfunc_end168-_at
	.cfi_endproc
                                        // -- End function
	.globl	_do                             // -- Begin function _do
	.p2align	4
	.type	_do,@function
_do:                                    // @_do
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-32]!                // 8-byte Folded Spill
	stp	x20, x19, [sp, #16]             // 16-byte Folded Spill
	.cfi_def_cfa_offset 32
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w30, -32
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w0, w8, [x9]
	bfi	x0, x8, #32, #32
	ldp	w19, w20, [x9, #8]
	tst	x0, #0x6
	b.ne	.LBB169_4
// %bb.1:                               // %"$3"
	tbz	w0, #3, .LBB169_3
// %bb.2:                               // %"$6"
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB169_4
.LBB169_3:                              // %"$5"
	bl	evList
.LBB169_4:                              // %"$2"
	adrp	x8, SymTab+8
	add	x8, x8, :lo12:SymTab+8
	cmp	x0, x8
	b.eq	.LBB169_14
// %bb.5:                               // %"$8"
	bfi	x19, x20, #32, #32
	tbz	w0, #1, .LBB169_11
// %bb.6:                               // %"$11"
	lsr	x20, x0, #4
	tbz	w0, #3, .LBB169_12
// %bb.7:
	mov	w8, #1
	tbnz	w8, #0, .LBB169_13
.LBB169_8:                              // %"$17"
                                        // =>This Inner Loop Header: Depth=1
	mov	x0, x19
	bl	loop1
	tbz	w0, #0, .LBB169_14
// %bb.9:                               // %"$18"
                                        //   in Loop: Header=BB169_8 Depth=1
	subs	x20, x20, #1                    // =1
	b.ne	.LBB169_8
// %bb.10:                              // %"$22"
	and	x0, x0, #0xfffffffffffffffe
	b	.LBB169_14
.LBB169_11:                             // %"$10"
	mov	x0, x19
	bl	loop2
	b	.LBB169_14
.LBB169_12:                             // %"$13"
	cmp	x20, #0                         // =0
	cset	w8, eq
	tbz	w8, #0, .LBB169_8
.LBB169_13:
	adrp	x0, SymTab+8
	add	x0, x0, :lo12:SymTab+8
.LBB169_14:                             // %"$7"
	ldp	x20, x19, [sp, #16]             // 16-byte Folded Reload
	ldr	x30, [sp], #32                  // 8-byte Folded Reload
	ret
.Lfunc_end169:
	.size	_do, .Lfunc_end169-_do
	.cfi_endproc
                                        // -- End function
	.globl	_loop                           // -- Begin function _loop
	.p2align	4
	.type	_loop,@function
_loop:                                  // @_loop
	.cfi_startproc
// %bb.0:                               // %"$1"
	ldp	w0, w8, [x0, #8]
	bfi	x0, x8, #32, #32
	b	loop2
.Lfunc_end170:
	.size	_loop, .Lfunc_end170-_loop
	.cfi_endproc
                                        // -- End function
	.globl	_for                            // -- Begin function _for
	.p2align	4
	.type	_for,@function
_for:                                   // @_for
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-96]!           // 16-byte Folded Spill
	stp	x28, x27, [sp, #16]             // 16-byte Folded Spill
	stp	x26, x25, [sp, #32]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #48]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #64]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #80]             // 16-byte Folded Spill
	mov	x29, sp
	sub	sp, sp, #16                     // =16
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w23, w8, [x9]
	bfi	x23, x8, #32, #32
	ldp	w19, w8, [x9, #8]
	bfi	x19, x8, #32, #32
	tst	x23, #0xf
	adrp	x24, env+8
	b.eq	.LBB171_7
// %bb.1:                               // %"$4"
	tst	x23, #0x6
	b.ne	.LBB171_89
// %bb.2:                               // %"$6"
	adrp	x8, SymTab+8
	add	x8, x8, :lo12:SymTab+8
	add	x9, x8, #208                    // =208
	cmp	x9, x23
	ccmp	x23, x8, #0, hs
	b.hs	.LBB171_90
// %bb.3:                               // %"$10"
	ldr	x8, [x24, :lo12:env+8]
	mov	x9, sp
	sub	x22, x9, #32                    // =32
	mov	sp, x22
	lsr	x10, x8, #32
	stp	w8, w10, [x9, #-16]
	str	x22, [x24, :lo12:env+8]
	ldp	w8, w10, [x23]
	stp	w8, w10, [x9, #-32]
	lsr	x8, x23, #32
	stp	w23, w8, [x9, #-24]
	ldp	w21, w8, [x19]
	bfi	x21, x8, #32, #32
	ldp	w19, w8, [x19, #8]
	bfi	x19, x8, #32, #32
	tst	x21, #0x6
	b.eq	.LBB171_15
// %bb.4:                               // %"$11"
	tst	x21, #0x6
	b.eq	.LBB171_27
.LBB171_5:                              // %"$16"
	tbz	w21, #3, .LBB171_17
// %bb.6:
	adrp	x20, SymTab+8
	add	x20, x20, :lo12:SymTab+8
	b	.LBB171_33
.LBB171_7:                              // %"$3"
	ldp	w21, w8, [x23, #8]
	bfi	x21, x8, #32, #32
	tst	x21, #0xf
	b.eq	.LBB171_20
// %bb.8:                               // %"$32"
	tst	x21, #0x6
	b.ne	.LBB171_93
// %bb.9:                               // %"$34"
	adrp	x8, SymTab+8
	add	x8, x8, :lo12:SymTab+8
	add	x9, x8, #208                    // =208
	cmp	x9, x21
	ccmp	x21, x8, #0, hs
	b.hs	.LBB171_94
// %bb.10:                              // %"$38"
	ldp	w22, w9, [x23]
	bfi	x22, x9, #32, #32
	tst	x22, #0x6
	b.ne	.LBB171_91
// %bb.11:                              // %"$40"
	add	x9, x8, #208                    // =208
	cmp	x9, x22
	ccmp	x22, x8, #0, hs
	b.hs	.LBB171_92
// %bb.12:                              // %"$44"
	ldr	x8, [x24, :lo12:env+8]
	mov	x9, sp
	sub	x25, x9, #32                    // =32
	mov	sp, x25
	lsr	x10, x8, #32
	stp	w8, w10, [x9, #-16]
	str	x25, [x24, :lo12:env+8]
	ldp	w8, w10, [x22]
	stp	w8, w10, [x9, #-32]
	lsr	x8, x22, #32
	stp	w22, w8, [x9, #-24]
	ldp	w8, w9, [x21]
	ldr	x10, [x24, :lo12:env+8]
	mov	x11, sp
	sub	x26, x11, #32                   // =32
	mov	sp, x26
	stp	w8, w9, [x11, #-32]
	lsr	x8, x21, #32
	stp	w21, w8, [x11, #-24]
	lsr	x8, x10, #32
	stp	w10, w8, [x11, #-16]
	str	x26, [x24, :lo12:env+8]
	ldp	w23, w8, [x19]
	bfi	x23, x8, #32, #32
	ldp	w19, w8, [x19, #8]
	bfi	x19, x8, #32, #32
	tst	x23, #0x6
	b.ne	.LBB171_43
// %bb.13:                              // %"$46"
	tbz	w23, #3, .LBB171_42
// %bb.14:                              // %"$49"
	ldp	w23, w8, [x23]
	bfi	x23, x8, #32, #32
	b	.LBB171_43
.LBB171_15:                             // %"$12"
	tbz	w21, #3, .LBB171_26
// %bb.16:                              // %"$15"
	ldp	w21, w8, [x21]
	bfi	x21, x8, #32, #32
	tst	x21, #0x6
	b.ne	.LBB171_5
	b	.LBB171_27
.LBB171_17:                             // %"$19"
	mov	w8, #2
	stp	w8, wzr, [x23]
	adrp	x20, SymTab+8
	add	x20, x20, :lo12:SymTab+8
.LBB171_18:                             // %"$21"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w9, w8, [x23]
	bfi	x9, x8, #32, #32
	add	x8, x9, #16                     // =16
	cmp	x8, x21
	b.hi	.LBB171_32
// %bb.19:                              // %"$22"
                                        //   in Loop: Header=BB171_18 Depth=1
	lsr	x9, x8, #32
	stp	w8, w9, [x23]
	mov	x0, x19
	bl	loop1
	mov	x20, x0
	tbnz	w20, #0, .LBB171_18
	b	.LBB171_33
.LBB171_20:                             // %"$31"
	ldp	w22, w8, [x23]
	bfi	x22, x8, #32, #32
	tst	x22, #0xf
	b.eq	.LBB171_35
// %bb.21:                              // %"$56"
	tst	x22, #0x6
	b.ne	.LBB171_91
// %bb.22:                              // %"$58"
	adrp	x25, SymTab+8
	add	x25, x25, :lo12:SymTab+8
	add	x8, x25, #208                   // =208
	cmp	x8, x22
	ccmp	x22, x25, #0, hs
	b.hs	.LBB171_92
// %bb.23:                              // %"$62"
	ldp	w9, w8, [x23, #8]
	bfi	x9, x8, #32, #32
	ldr	x8, [x24, :lo12:env+8]
	mov	x10, sp
	sub	x21, x10, #32                   // =32
	mov	sp, x21
	lsr	x11, x8, #32
	stp	w8, w11, [x10, #-16]
	str	x21, [x24, :lo12:env+8]
	ldp	w8, w11, [x22]
	stp	w8, w11, [x10, #-32]
	lsr	x8, x22, #32
	stp	w22, w8, [x10, #-24]
	ldp	w0, w8, [x9]
	bfi	x0, x8, #32, #32
	ldp	w23, w8, [x9, #8]
	bfi	x23, x8, #32, #32
	tst	x0, #0x6
	b.ne	.LBB171_51
// %bb.24:                              // %"$64"
	tbz	w0, #3, .LBB171_50
// %bb.25:                              // %"$67"
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB171_51
.LBB171_26:                             // %"$14"
	mov	x0, x21
	bl	evList
	mov	x21, x0
	tst	x21, #0x6
	b.ne	.LBB171_5
.LBB171_27:                             // %"$17"
	adrp	x25, env
	ldr	x8, [x25, :lo12:env]
	mov	x9, sp
	sub	x26, x9, #16                    // =16
	mov	sp, x26
	lsr	x10, x21, #32
	lsr	x11, x8, #32
	stp	w21, w10, [x9, #-16]
	stp	w8, w11, [x9, #-8]
	adrp	x20, SymTab+8
	add	x20, x20, :lo12:SymTab+8
	str	x26, [x25, :lo12:env]
.LBB171_28:                             // %"$26"
                                        // =>This Inner Loop Header: Depth=1
	tst	x21, #0xf
	b.ne	.LBB171_30
// %bb.29:                              // %"$27"
                                        //   in Loop: Header=BB171_28 Depth=1
	ldp	w8, w9, [x21]
	ldp	w21, w10, [x21, #8]
	bfi	x21, x10, #32, #32
	stp	w8, w9, [x23]
	mov	x0, x19
	bl	loop1
	mov	x20, x0
	tbnz	w20, #0, .LBB171_28
	b	.LBB171_31
.LBB171_30:                             // %"$29"
	and	x20, x20, #0xfffffffffffffffe
.LBB171_31:                             // %"$28"
	ldp	w9, w8, [x26, #8]
	bfi	x9, x8, #32, #32
	str	x9, [x25, :lo12:env]
	b	.LBB171_33
.LBB171_32:                             // %"$24"
	and	x20, x20, #0xfffffffffffffffe
.LBB171_33:                             // %"$18"
	ldp	w8, w9, [x22]
	stp	w8, w9, [x23]
	ldp	w8, w9, [x22, #16]
.LBB171_34:                             // %"$2"
	bfi	x8, x9, #32, #32
	b	.LBB171_49
.LBB171_35:                             // %"$55"
	ldp	w21, w8, [x22]
	bfi	x21, x8, #32, #32
	tst	x21, #0x6
	b.ne	.LBB171_93
// %bb.36:                              // %"$91"
	adrp	x25, SymTab+8
	add	x25, x25, :lo12:SymTab+8
	add	x8, x25, #208                   // =208
	cmp	x8, x21
	ccmp	x21, x25, #0, hs
	b.hs	.LBB171_94
// %bb.37:                              // %"$95"
	ldp	w22, w8, [x22, #8]
	bfi	x22, x8, #32, #32
	tst	x22, #0x6
	b.ne	.LBB171_91
// %bb.38:                              // %"$97"
	add	x8, x25, #208                   // =208
	cmp	x8, x22
	ccmp	x22, x25, #0, hs
	b.hs	.LBB171_92
// %bb.39:                              // %"$101"
	ldp	w8, w9, [x23, #8]
	bfi	x8, x9, #32, #32
	adrp	x9, env
	add	x9, x9, :lo12:env
	ldr	x10, [x9, #8]
	mov	x11, sp
	sub	x14, x11, #32                   // =32
	mov	sp, x14
	lsr	x12, x10, #32
	str	x14, [x9, #8]
	lsr	x13, x21, #32
	stp	w10, w12, [x11, #-16]
	ldp	w10, w12, [x21]
	stp	w10, w12, [x11, #-32]
	stp	w21, w13, [x11, #-24]
	ldr	x10, [x9]
	mov	x11, sp
	sub	x26, x11, #16                   // =16
	mov	sp, x26
	lsr	x12, x25, #32
	stp	w25, w12, [x11, #-16]
	lsr	x12, x10, #32
	stp	w10, w12, [x11, #-8]
	str	x26, [x9]
	ldp	w10, w11, [x22]
	ldr	x12, [x9, #8]
	mov	x13, sp
	sub	x15, x13, #32                   // =32
	mov	sp, x15
	stp	w10, w11, [x13, #-32]
	lsr	x10, x22, #32
	stp	w22, w10, [x13, #-24]
	lsr	x10, x12, #32
	stp	w12, w10, [x13, #-16]
	str	x15, [x9, #8]
	ldp	w0, w9, [x8]
	bfi	x0, x9, #32, #32
	ldp	w28, w9, [x8, #8]
	bfi	x28, x9, #32, #32
	tst	x0, #0x6
	stp	x15, x14, [x29, #-16]           // 16-byte Folded Spill
	b.ne	.LBB171_70
// %bb.40:                              // %"$103"
	tbz	w0, #3, .LBB171_69
// %bb.41:                              // %"$106"
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB171_70
.LBB171_42:                             // %"$48"
	mov	x0, x23
	bl	evList
	mov	x23, x0
.LBB171_43:                             // %"$45"
	adrp	x27, env
	ldr	x8, [x27, :lo12:env]
	mov	x9, sp
	sub	x28, x9, #16                    // =16
	mov	sp, x28
	lsr	x10, x23, #32
	lsr	x11, x8, #32
	stp	w23, w10, [x9, #-16]
	adrp	x20, SymTab+8
	add	x20, x20, :lo12:SymTab+8
	stp	w8, w11, [x9, #-8]
	mov	w8, #18
	str	x28, [x27, :lo12:env]
.LBB171_44:                             // %"$50"
                                        // =>This Inner Loop Header: Depth=1
	lsr	x9, x8, #32
	stp	w8, w9, [x22]
	tst	x23, #0xf
	b.ne	.LBB171_47
// %bb.45:                              // %"$51"
                                        //   in Loop: Header=BB171_44 Depth=1
	ldp	w8, w9, [x23]
	ldp	w23, w24, [x23, #8]
	stp	w8, w9, [x21]
	mov	x0, x19
	bl	loop1
	mov	x20, x0
	tbz	w20, #0, .LBB171_48
// %bb.46:                              // %"$54"
                                        //   in Loop: Header=BB171_44 Depth=1
	bfi	x23, x24, #32, #32
	ldp	w9, w8, [x22]
	bfi	x9, x8, #32, #32
	add	x8, x9, #16                     // =16
	b	.LBB171_44
.LBB171_47:                             // %"$53"
	and	x20, x20, #0xfffffffffffffffe
.LBB171_48:                             // %"$52"
	ldp	w8, w9, [x26]
	stp	w8, w9, [x21]
	ldp	w9, w8, [x28, #8]
	bfi	x9, x8, #32, #32
	str	x9, [x27, :lo12:env]
	ldp	w8, w9, [x25]
	stp	w8, w9, [x22]
	ldp	w8, w9, [x25, #16]
	bfi	x8, x9, #32, #32
	adrp	x24, env+8
.LBB171_49:                             // %"$2"
	str	x8, [x24, :lo12:env+8]
	mov	x0, x20
	mov	sp, x29
	ldp	x20, x19, [sp, #80]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #64]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #48]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #32]             // 16-byte Folded Reload
	ldp	x28, x27, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #96             // 16-byte Folded Reload
	ret
.LBB171_50:                             // %"$66"
	bl	evList
.LBB171_51:                             // %"$63"
	lsr	x8, x0, #32
	stp	w0, w8, [x22]
	adrp	x8, env
	add	x8, x8, :lo12:env
	ldr	x9, [x8]
	mov	x10, sp
	sub	x26, x10, #16                   // =16
	mov	sp, x26
	lsr	x11, x25, #32
	lsr	x12, x9, #32
	adrp	x27, SymTab+376
	stp	w25, w11, [x10, #-16]
	mov	x0, x26
	mov	x20, x25
	stp	w9, w12, [x10, #-8]
.LBB171_52:                             // %"$68.sink.split"
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB171_53 Depth 2
                                        //     Child Loop BB171_62 Depth 2
	lsr	x9, x0, #32
	stp	w0, w9, [x8]
.LBB171_53:                             // %"$68"
                                        //   Parent Loop BB171_52 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	w0, w8, [x23]
	bfi	x0, x8, #32, #32
	tst	x0, #0x6
	b.ne	.LBB171_57
// %bb.54:                              // %"$70"
                                        //   in Loop: Header=BB171_53 Depth=2
	tbz	w0, #3, .LBB171_56
// %bb.55:                              // %"$73"
                                        //   in Loop: Header=BB171_53 Depth=2
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB171_57
.LBB171_56:                             // %"$72"
                                        //   in Loop: Header=BB171_53 Depth=2
	bl	evList
.LBB171_57:                             // %"$69"
                                        //   in Loop: Header=BB171_53 Depth=2
	cmp	x0, x25
	b.eq	.LBB171_68
// %bb.58:                              // %"$74"
                                        //   in Loop: Header=BB171_53 Depth=2
	str	x0, [x27, :lo12:SymTab+376]
	mov	x0, x19
	bl	loop1
	tbz	w0, #0, .LBB171_67
// %bb.59:                              // %"$76"
                                        //   in Loop: Header=BB171_53 Depth=2
	and	x20, x0, #0xfffffffffffffffe
	lsr	x8, x0, #32
	stp	w20, w8, [x26]
	ldp	w28, w8, [x23, #8]
	bfi	x28, x8, #32, #32
	tst	x28, #0xf
	b.ne	.LBB171_53
	b	.LBB171_62
.LBB171_60:                             // %"$80"
                                        //   in Loop: Header=BB171_62 Depth=2
	tst	x0, #0xf
	b.ne	.LBB171_62
// %bb.61:                              // %"$89"
                                        //   in Loop: Header=BB171_62 Depth=2
	bl	evList
.LBB171_62:                             // %"$79"
                                        //   Parent Loop BB171_52 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	w0, w8, [x28]
	bfi	x0, x8, #32, #32
	ldp	w28, w8, [x28, #8]
	bfi	x28, x8, #32, #32
	tst	x28, #0xf
	b.eq	.LBB171_60
// %bb.63:                              // %"$82"
                                        //   in Loop: Header=BB171_52 Depth=1
	tst	x0, #0x6
	mov	x8, x22
	b.ne	.LBB171_52
// %bb.64:                              // %"$84"
                                        //   in Loop: Header=BB171_52 Depth=1
	tbz	w0, #3, .LBB171_66
// %bb.65:                              // %"$87"
                                        //   in Loop: Header=BB171_52 Depth=1
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	mov	x8, x22
	b	.LBB171_52
.LBB171_66:                             // %"$86"
                                        //   in Loop: Header=BB171_52 Depth=1
	bl	evList
	mov	x8, x22
	b	.LBB171_52
.LBB171_67:
	mov	x20, x0
.LBB171_68:                             // %"$75"
	ldp	w9, w8, [x26, #8]
	bfi	x9, x8, #32, #32
	adrp	x8, env
	str	x9, [x8, :lo12:env]
	ldp	w8, w9, [x21]
	stp	w8, w9, [x22]
	ldp	w8, w9, [x21, #16]
	b	.LBB171_34
.LBB171_69:                             // %"$105"
	bl	evList
.LBB171_70:                             // %"$102"
	adrp	x13, env
	ldr	x8, [x13, :lo12:env]
	mov	x9, sp
	sub	x10, x9, #16                    // =16
	mov	sp, x10
	lsr	x11, x0, #32
	lsr	x12, x8, #32
	stp	w0, w11, [x9, #-16]
	stp	w8, w12, [x9, #-8]
	str	x10, [x13, :lo12:env]
	mov	w8, #18
	adrp	x27, SymTab+376
	mov	x20, x25
	stp	w0, w11, [x22]
	b	.LBB171_74
.LBB171_71:                             // %"$125"
                                        //   in Loop: Header=BB171_74 Depth=1
	bl	evList
.LBB171_72:                             // %"$120"
                                        //   in Loop: Header=BB171_74 Depth=1
	lsr	x8, x0, #32
	stp	w0, w8, [x22]
.LBB171_73:                             // %"$117"
                                        //   in Loop: Header=BB171_74 Depth=1
	ldp	w9, w8, [x21]
	bfi	x9, x8, #32, #32
	add	x8, x9, #16                     // =16
.LBB171_74:                             // %"$107"
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB171_83 Depth 2
	lsr	x9, x8, #32
	stp	w8, w9, [x21]
	ldp	w0, w8, [x28]
	bfi	x0, x8, #32, #32
	tst	x0, #0x6
	b.ne	.LBB171_78
// %bb.75:                              // %"$109"
                                        //   in Loop: Header=BB171_74 Depth=1
	tbz	w0, #3, .LBB171_77
// %bb.76:                              // %"$112"
                                        //   in Loop: Header=BB171_74 Depth=1
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB171_78
.LBB171_77:                             // %"$111"
                                        //   in Loop: Header=BB171_74 Depth=1
	bl	evList
.LBB171_78:                             // %"$108"
                                        //   in Loop: Header=BB171_74 Depth=1
	cmp	x0, x25
	b.eq	.LBB171_88
// %bb.79:                              // %"$113"
                                        //   in Loop: Header=BB171_74 Depth=1
	str	x0, [x27, :lo12:SymTab+376]
	mov	x0, x19
	bl	loop1
	tbz	w0, #0, .LBB171_87
// %bb.80:                              // %"$115"
                                        //   in Loop: Header=BB171_74 Depth=1
	and	x20, x0, #0xfffffffffffffffe
	lsr	x8, x0, #32
	stp	w20, w8, [x26]
	ldp	w23, w8, [x28, #8]
	bfi	x23, x8, #32, #32
	tst	x23, #0xf
	b.ne	.LBB171_73
	b	.LBB171_83
.LBB171_81:                             // %"$119"
                                        //   in Loop: Header=BB171_83 Depth=2
	tst	x0, #0xf
	b.ne	.LBB171_83
// %bb.82:                              // %"$128"
                                        //   in Loop: Header=BB171_83 Depth=2
	bl	evList
.LBB171_83:                             // %"$118"
                                        //   Parent Loop BB171_74 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	w0, w8, [x23]
	bfi	x0, x8, #32, #32
	ldp	w23, w8, [x23, #8]
	bfi	x23, x8, #32, #32
	tst	x23, #0xf
	b.eq	.LBB171_81
// %bb.84:                              // %"$121"
                                        //   in Loop: Header=BB171_74 Depth=1
	tst	x0, #0x6
	b.ne	.LBB171_72
// %bb.85:                              // %"$123"
                                        //   in Loop: Header=BB171_74 Depth=1
	tbz	w0, #3, .LBB171_71
// %bb.86:                              // %"$126"
                                        //   in Loop: Header=BB171_74 Depth=1
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB171_72
.LBB171_87:
	mov	x20, x0
.LBB171_88:                             // %"$114"
	ldp	x9, x10, [x29, #-16]            // 16-byte Folded Reload
	ldp	w8, w9, [x9]
	stp	w8, w9, [x22]
	ldp	w9, w8, [x26, #8]
	bfi	x9, x8, #32, #32
	adrp	x8, env
	str	x9, [x8, :lo12:env]
	ldp	w8, w9, [x10]
	stp	w8, w9, [x21]
	ldp	w8, w9, [x10, #16]
	b	.LBB171_34
.LBB171_89:                             // %"$5"
	mov	x1, x23
	bl	varErr
.LBB171_90:                             // %"$9"
	mov	x1, x23
	bl	protErr
.LBB171_91:                             // %"$39"
	mov	x1, x22
	bl	varErr
.LBB171_92:                             // %"$43"
	mov	x1, x22
	bl	protErr
.LBB171_93:                             // %"$33"
	mov	x1, x21
	bl	varErr
.LBB171_94:                             // %"$37"
	mov	x1, x21
	bl	protErr
.Lfunc_end171:
	.size	_for, .Lfunc_end171-_for
	.cfi_endproc
                                        // -- End function
	.globl	_with                           // -- Begin function _with
	.p2align	4
	.type	_with,@function
_with:                                  // @_with
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-48]!           // 16-byte Folded Spill
	str	x21, [sp, #16]                  // 8-byte Folded Spill
	stp	x20, x19, [sp, #32]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 48
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -32
	.cfi_offset w30, -40
	.cfi_offset w29, -48
	mov	x19, x0
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w1, w8, [x9]
	bfi	x1, x8, #32, #32
	ldp	w20, w21, [x9, #8]
	tst	x1, #0x6
	b.ne	.LBB172_4
// %bb.1:                               // %"$3"
	tbz	w1, #3, .LBB172_3
// %bb.2:                               // %"$6"
	ldp	w1, w8, [x1]
	bfi	x1, x8, #32, #32
	b	.LBB172_4
.LBB172_3:                              // %"$5"
	mov	x0, x1
	bl	evList
	mov	x1, x0
.LBB172_4:                              // %"$2"
	tst	x1, #0x6
	b.ne	.LBB172_16
// %bb.5:                               // %"$8"
	adrp	x8, SymTab+8
	add	x8, x8, :lo12:SymTab+8
	cmp	x1, x8
	b.eq	.LBB172_15
// %bb.6:                               // %"$10"
	bfi	x20, x21, #32, #32
	adrp	x8, SymTab+424
	add	x8, x8, :lo12:SymTab+424
	ldr	x9, [x8]
	adrp	x19, env+8
	ldr	x10, [x19, :lo12:env+8]
	mov	x11, sp
	sub	x21, x11, #32                   // =32
	mov	sp, x21
	lsr	x12, x9, #32
	lsr	x13, x8, #32
	stp	w9, w12, [x11, #-32]
	stp	w8, w13, [x11, #-24]
	lsr	x9, x10, #32
	stp	w10, w9, [x11, #-16]
	str	x21, [x19, :lo12:env+8]
	str	x1, [x8]
.LBB172_7:                              // %"$12"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w1, w8, [x20]
	bfi	x1, x8, #32, #32
	ldp	w20, w8, [x20, #8]
	bfi	x20, x8, #32, #32
	tst	x20, #0xf
	b.ne	.LBB172_10
// %bb.8:                               // %"$13"
                                        //   in Loop: Header=BB172_7 Depth=1
	tst	x1, #0xf
	b.ne	.LBB172_7
// %bb.9:                               // %"$22"
                                        //   in Loop: Header=BB172_7 Depth=1
	mov	x0, x1
	bl	evList
	b	.LBB172_7
.LBB172_10:                             // %"$15"
	tst	x1, #0x6
	b.ne	.LBB172_14
// %bb.11:                              // %"$17"
	tbz	w1, #3, .LBB172_13
// %bb.12:                              // %"$20"
	ldp	w1, w8, [x1]
	bfi	x1, x8, #32, #32
	b	.LBB172_14
.LBB172_13:                             // %"$19"
	mov	x0, x1
	bl	evList
	mov	x1, x0
.LBB172_14:                             // %"$14"
	ldp	w9, w8, [x21]
	adrp	x10, SymTab+424
	bfi	x9, x8, #32, #32
	str	x9, [x10, :lo12:SymTab+424]
	ldp	w9, w8, [x21, #16]
	bfi	x9, x8, #32, #32
	str	x9, [x19, :lo12:env+8]
.LBB172_15:                             // %"$11"
	mov	x0, x1
	mov	sp, x29
	ldp	x20, x19, [sp, #32]             // 16-byte Folded Reload
	ldr	x21, [sp, #16]                  // 8-byte Folded Reload
	ldp	x29, x30, [sp], #48             // 16-byte Folded Reload
	ret
.LBB172_16:                             // %"$7"
	mov	x0, x19
	bl	varErr
.Lfunc_end172:
	.size	_with, .Lfunc_end172-_with
	.cfi_endproc
                                        // -- End function
	.globl	_bind                           // -- Begin function _bind
	.p2align	4
	.type	_bind,@function
_bind:                                  // @_bind
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-64]!           // 16-byte Folded Spill
	stp	x24, x23, [sp, #16]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #32]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #48]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 64
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w30, -56
	.cfi_offset w29, -64
	mov	x20, x0
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w19, w8, [x9]
	bfi	x19, x8, #32, #32
	ldp	w21, w22, [x9, #8]
	tst	x19, #0x6
	b.ne	.LBB173_4
// %bb.1:                               // %"$3"
	tbz	w19, #3, .LBB173_3
// %bb.2:                               // %"$6"
	ldp	w19, w8, [x19]
	bfi	x19, x8, #32, #32
	b	.LBB173_4
.LBB173_3:                              // %"$5"
	mov	x0, x19
	bl	evList
	mov	x19, x0
.LBB173_4:                              // %"$2"
	tst	x19, #0x6
	b.ne	.LBB173_43
// %bb.5:                               // %"$8"
	bfi	x21, x22, #32, #32
	adrp	x9, SymTab+8
	add	x9, x9, :lo12:SymTab+8
	cmp	x19, x9
	b.ne	.LBB173_9
.LBB173_6:                              // %"$12"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w0, w8, [x21]
	bfi	x0, x8, #32, #32
	ldp	w21, w8, [x21, #8]
	bfi	x21, x8, #32, #32
	tst	x21, #0xf
	b.ne	.LBB173_15
// %bb.7:                               // %"$13"
                                        //   in Loop: Header=BB173_6 Depth=1
	tst	x0, #0xf
	b.ne	.LBB173_6
// %bb.8:                               // %"$22"
                                        //   in Loop: Header=BB173_6 Depth=1
	bl	evList
	b	.LBB173_6
.LBB173_9:                              // %"$10"
	tbz	w19, #3, .LBB173_18
// %bb.10:                              // %"$24"
	add	x8, x9, #208                    // =208
	cmp	x8, x19
	ccmp	x19, x9, #0, hs
	b.hs	.LBB173_47
// %bb.11:                              // %"$28"
	ldp	w8, w9, [x19]
	adrp	x20, env+8
	ldr	x10, [x20, :lo12:env+8]
	mov	x11, sp
	sub	x22, x11, #32                   // =32
	mov	sp, x22
	stp	w8, w9, [x11, #-32]
	lsr	x8, x19, #32
	stp	w19, w8, [x11, #-24]
	lsr	x8, x10, #32
	stp	w10, w8, [x11, #-16]
	str	x22, [x20, :lo12:env+8]
.LBB173_12:                             // %"$29"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w0, w8, [x21]
	bfi	x0, x8, #32, #32
	ldp	w21, w8, [x21, #8]
	bfi	x21, x8, #32, #32
	tst	x21, #0xf
	b.ne	.LBB173_33
// %bb.13:                              // %"$30"
                                        //   in Loop: Header=BB173_12 Depth=1
	tst	x0, #0xf
	b.ne	.LBB173_12
// %bb.14:                              // %"$39"
                                        //   in Loop: Header=BB173_12 Depth=1
	bl	evList
	b	.LBB173_12
.LBB173_15:                             // %"$15"
	tst	x0, #0x6
	b.ne	.LBB173_42
// %bb.16:                              // %"$17"
	tbz	w0, #3, .LBB173_36
// %bb.17:                              // %"$20"
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB173_42
.LBB173_18:                             // %"$23"
	adrp	x22, env+8
	ldr	x23, [x22, :lo12:env+8]
	adrp	x10, env+8
	add	x10, x10, :lo12:env+8
	mov	x24, x23
	b	.LBB173_20
.LBB173_19:                             // %"$45"
                                        //   in Loop: Header=BB173_20 Depth=1
	lsr	x12, x11, #32
	stp	w11, w12, [x8]
	tst	x19, #0xf
	b.ne	.LBB173_29
.LBB173_20:                             // %"$40"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w1, w8, [x19]
	bfi	x1, x8, #32, #32
	ldp	w19, w8, [x19, #8]
	bfi	x19, x8, #32, #32
	tst	x1, #0x6
	b.ne	.LBB173_43
// %bb.21:                              // %"$42"
                                        //   in Loop: Header=BB173_20 Depth=1
	tbz	w1, #3, .LBB173_24
// %bb.22:                              // %"$43"
                                        //   in Loop: Header=BB173_20 Depth=1
	add	x8, x9, #208                    // =208
	cmp	x8, x1
	ccmp	x1, x9, #0, hs
	b.hs	.LBB173_44
// %bb.23:                              // %"$49"
                                        //   in Loop: Header=BB173_20 Depth=1
	ldp	w12, w8, [x1]
	bfi	x12, x8, #32, #32
	mov	x13, sp
	sub	x11, x13, #32                   // =32
	mov	sp, x11
	lsr	x8, x12, #32
	lsr	x14, x1, #32
	lsr	x15, x24, #32
	stp	w12, w8, [x13, #-32]
	stp	w24, w15, [x13, #-16]
	mov	x8, x10
	mov	x24, x11
	stp	w1, w14, [x13, #-24]
	b	.LBB173_19
.LBB173_24:                             // %"$44"
                                        //   in Loop: Header=BB173_20 Depth=1
	ldp	w8, w11, [x1]
	bfi	x8, x11, #32, #32
	tst	x8, #0x6
	b.ne	.LBB173_45
// %bb.25:                              // %"$51"
                                        //   in Loop: Header=BB173_20 Depth=1
	add	x11, x9, #208                   // =208
	cmp	x11, x8
	ccmp	x8, x9, #0, hs
	b.hs	.LBB173_46
// %bb.26:                              // %"$55"
                                        //   in Loop: Header=BB173_20 Depth=1
	ldp	w11, w12, [x8]
	mov	x13, sp
	sub	x14, x13, #32                   // =32
	mov	sp, x14
	stp	w11, w12, [x13, #-32]
	lsr	x11, x8, #32
	stp	w8, w11, [x13, #-24]
	lsr	x11, x24, #32
	stp	w24, w11, [x13, #-16]
	str	x14, [x22, :lo12:env+8]
	ldp	w11, w12, [x1, #8]
	bfi	x11, x12, #32, #32
	mov	x24, x14
	b	.LBB173_19
.LBB173_27:                             // %"$59"
                                        //   in Loop: Header=BB173_29 Depth=1
	tst	x0, #0xf
	b.ne	.LBB173_29
// %bb.28:                              // %"$68"
                                        //   in Loop: Header=BB173_29 Depth=1
	bl	evList
.LBB173_29:                             // %"$58"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w0, w8, [x21]
	bfi	x0, x8, #32, #32
	ldp	w21, w8, [x21, #8]
	bfi	x21, x8, #32, #32
	tst	x21, #0xf
	b.eq	.LBB173_27
// %bb.30:                              // %"$61"
	tst	x0, #0x6
	b.ne	.LBB173_40
// %bb.31:                              // %"$63"
	tbz	w0, #3, .LBB173_39
// %bb.32:                              // %"$66"
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB173_40
.LBB173_33:                             // %"$32"
	tst	x0, #0x6
	b.ne	.LBB173_38
// %bb.34:                              // %"$34"
	tbz	w0, #3, .LBB173_37
// %bb.35:                              // %"$37"
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB173_38
.LBB173_36:                             // %"$19"
	bl	evList
	b	.LBB173_42
.LBB173_37:                             // %"$36"
	bl	evList
.LBB173_38:                             // %"$31"
	ldp	w8, w9, [x22]
	stp	w8, w9, [x19]
	ldp	w9, w8, [x22, #16]
	bfi	x9, x8, #32, #32
	str	x9, [x20, :lo12:env+8]
	b	.LBB173_42
.LBB173_39:                             // %"$65"
	bl	evList
.LBB173_40:                             // %"$69"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w9, w8, [x24, #8]
	bfi	x9, x8, #32, #32
	ldp	w8, w10, [x24]
	stp	w8, w10, [x9]
	ldp	w24, w8, [x24, #16]
	bfi	x24, x8, #32, #32
	cmp	x23, x24
	b.ne	.LBB173_40
// %bb.41:                              // %"$71"
	str	x24, [x22, :lo12:env+8]
.LBB173_42:                             // %"$7"
	mov	sp, x29
	ldp	x20, x19, [sp, #48]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #32]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #64             // 16-byte Folded Reload
	ret
.LBB173_43:                             // %"$9"
	mov	x0, x20
	mov	x1, x19
	bl	argErr
.LBB173_44:                             // %"$48"
	mov	x0, x20
	bl	protErr
.LBB173_45:                             // %"$50"
	mov	x0, x20
	mov	x1, x8
	bl	varErr
.LBB173_46:                             // %"$54"
	mov	x0, x20
	mov	x1, x8
	bl	protErr
.LBB173_47:                             // %"$27"
	mov	x0, x20
	mov	x1, x19
	bl	protErr
.Lfunc_end173:
	.size	_bind, .Lfunc_end173-_bind
	.cfi_endproc
                                        // -- End function
	.globl	_job                            // -- Begin function _job
	.p2align	4
	.type	_job,@function
_job:                                   // @_job
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-64]!           // 16-byte Folded Spill
	stp	x24, x23, [sp, #16]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #32]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #48]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 64
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w30, -56
	.cfi_offset w29, -64
	mov	x19, x0
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w0, w8, [x9]
	bfi	x0, x8, #32, #32
	ldp	w24, w8, [x9, #8]
	bfi	x24, x8, #32, #32
	tst	x0, #0x6
	b.ne	.LBB174_4
// %bb.1:                               // %"$3"
	tbz	w0, #3, .LBB174_3
// %bb.2:                               // %"$6"
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB174_4
.LBB174_3:                              // %"$5"
	bl	evList
.LBB174_4:                              // %"$2"
	adrp	x20, env
	add	x20, x20, :lo12:env
	ldr	x8, [x20]
	mov	x9, sp
	sub	x21, x9, #16                    // =16
	mov	sp, x21
	lsr	x10, x0, #32
	stp	w0, w10, [x9, #-16]
	lsr	x10, x8, #32
	stp	w8, w10, [x9, #-8]
	adrp	x8, SymTab+8
	add	x8, x8, :lo12:SymTab+8
	str	x21, [x20]
	ldr	x22, [x20, #8]
	adrp	x9, env+8
	mov	x23, x22
	tst	x0, #0xf
	b.ne	.LBB174_10
.LBB174_5:                              // %"$8"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w10, w11, [x0]
	bfi	x10, x11, #32, #32
	ldp	w1, w11, [x10]
	bfi	x1, x11, #32, #32
	tst	x1, #0x6
	b.ne	.LBB174_18
// %bb.6:                               // %"$11"
                                        //   in Loop: Header=BB174_5 Depth=1
	add	x11, x8, #208                   // =208
	cmp	x11, x1
	ccmp	x1, x8, #0, hs
	b.hs	.LBB174_19
// %bb.7:                               // %"$15"
                                        //   in Loop: Header=BB174_5 Depth=1
	ldp	w0, w11, [x0, #8]
	bfi	x0, x11, #32, #32
	ldp	w11, w12, [x1]
	mov	x13, sp
	sub	x14, x13, #32                   // =32
	mov	sp, x14
	stp	w11, w12, [x13, #-32]
	lsr	x11, x1, #32
	stp	w1, w11, [x13, #-24]
	lsr	x11, x23, #32
	stp	w23, w11, [x13, #-16]
	lsr	x11, x10, #32
	stp	w10, w11, [x13, #-8]
	str	x14, [x9, :lo12:env+8]
	ldp	w11, w10, [x10, #8]
	mov	x23, x14
	stp	w11, w10, [x1]
	tst	x0, #0xf
	b.eq	.LBB174_5
	b	.LBB174_10
.LBB174_8:                              // %"$17"
                                        //   in Loop: Header=BB174_10 Depth=1
	tst	x0, #0xf
	b.ne	.LBB174_10
// %bb.9:                               // %"$26"
                                        //   in Loop: Header=BB174_10 Depth=1
	bl	evList
.LBB174_10:                             // %"$16"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w0, w8, [x24]
	bfi	x0, x8, #32, #32
	ldp	w24, w8, [x24, #8]
	bfi	x24, x8, #32, #32
	tst	x24, #0xf
	b.eq	.LBB174_8
// %bb.11:                              // %"$19"
	tst	x0, #0x6
	b.ne	.LBB174_16
// %bb.12:                              // %"$21"
	tbz	w0, #3, .LBB174_14
// %bb.13:                              // %"$24"
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB174_16
.LBB174_14:                             // %"$23"
	bl	evList
	b	.LBB174_16
.LBB174_15:                             // %"$28"
                                        //   in Loop: Header=BB174_16 Depth=1
	ldp	w9, w8, [x23, #8]
	bfi	x9, x8, #32, #32
	ldp	w10, w8, [x23, #24]
	bfi	x10, x8, #32, #32
	ldp	w8, w11, [x9]
	stp	w8, w11, [x10, #8]
	ldp	w8, w10, [x23]
	stp	w8, w10, [x9]
	ldp	w23, w8, [x23, #16]
	bfi	x23, x8, #32, #32
.LBB174_16:                             // %"$27"
                                        // =>This Inner Loop Header: Depth=1
	cmp	x22, x23
	b.ne	.LBB174_15
// %bb.17:                              // %"$29"
	ldp	w9, w8, [x21, #8]
	bfi	x9, x8, #32, #32
	stp	x9, x23, [x20]
	mov	sp, x29
	ldp	x20, x19, [sp, #48]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #32]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #64             // 16-byte Folded Reload
	ret
.LBB174_18:                             // %"$10"
	mov	x0, x19
	bl	varErr
.LBB174_19:                             // %"$14"
	mov	x0, x19
	bl	protErr
.Lfunc_end174:
	.size	_job, .Lfunc_end174-_job
	.cfi_endproc
                                        // -- End function
	.globl	_let                            // -- Begin function _let
	.p2align	4
	.type	_let,@function
_let:                                   // @_let
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-96]!           // 16-byte Folded Spill
	stp	x28, x27, [sp, #16]             // 16-byte Folded Spill
	stp	x26, x25, [sp, #32]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #48]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #64]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #80]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	mov	x19, x0
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w20, w8, [x9]
	bfi	x20, x8, #32, #32
	ldp	w24, w8, [x9, #8]
	bfi	x24, x8, #32, #32
	tst	x20, #0xf
	adrp	x22, env+8
	b.eq	.LBB175_6
// %bb.1:                               // %"$2"
	tst	x20, #0x6
	b.ne	.LBB175_62
// %bb.2:                               // %"$6"
	adrp	x8, SymTab+8
	add	x8, x8, :lo12:SymTab+8
	add	x9, x8, #208                    // =208
	cmp	x9, x20
	ccmp	x20, x8, #0, hs
	b.hs	.LBB175_63
// %bb.3:                               // %"$10"
	ldp	w8, w9, [x20]
	ldr	x10, [x22, :lo12:env+8]
	mov	x11, sp
	sub	x19, x11, #32                   // =32
	mov	sp, x19
	stp	w8, w9, [x11, #-32]
	lsr	x8, x20, #32
	stp	w20, w8, [x11, #-24]
	lsr	x8, x10, #32
	stp	w10, w8, [x11, #-16]
	str	x19, [x22, :lo12:env+8]
	ldp	w0, w8, [x24]
	bfi	x0, x8, #32, #32
	ldp	w21, w8, [x24, #8]
	bfi	x21, x8, #32, #32
	tst	x0, #0x6
	b.ne	.LBB175_46
// %bb.4:                               // %"$12"
	tbz	w0, #3, .LBB175_45
// %bb.5:                               // %"$15"
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB175_46
.LBB175_6:                              // %"$3"
	ldr	x23, [x22, :lo12:env+8]
	adrp	x26, SymTab+8
	add	x26, x26, :lo12:SymTab+8
	adrp	x27, env+8
	add	x27, x27, :lo12:env+8
	mov	x25, x23
	b	.LBB175_10
.LBB175_7:                              // %"$40"
                                        //   in Loop: Header=BB175_10 Depth=1
	bl	evList
.LBB175_8:                              // %"$37"
                                        //   in Loop: Header=BB175_10 Depth=1
	lsr	x8, x0, #32
	stp	w0, w8, [x21]
	mov	x25, x20
.LBB175_9:                              // %"$30"
                                        //   in Loop: Header=BB175_10 Depth=1
	ldp	w20, w8, [x28, #8]
	bfi	x20, x8, #32, #32
	tst	x20, #0xf
	b.ne	.LBB175_41
.LBB175_10:                             // %"$27"
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB175_18 Depth 2
                                        //       Child Loop BB175_30 Depth 3
	ldp	w21, w8, [x20]
	bfi	x21, x8, #32, #32
	ldp	w28, w8, [x20, #8]
	bfi	x28, x8, #32, #32
	tst	x21, #0xf
	b.eq	.LBB175_16
// %bb.11:                              // %"$28"
                                        //   in Loop: Header=BB175_10 Depth=1
	tst	x21, #0x6
	b.ne	.LBB175_58
// %bb.12:                              // %"$32"
                                        //   in Loop: Header=BB175_10 Depth=1
	add	x8, x26, #208                   // =208
	cmp	x8, x21
	ccmp	x21, x26, #0, hs
	b.hs	.LBB175_59
// %bb.13:                              // %"$36"
                                        //   in Loop: Header=BB175_10 Depth=1
	ldp	w8, w9, [x21]
	mov	x10, sp
	sub	x20, x10, #32                   // =32
	mov	sp, x20
	stp	w8, w9, [x10, #-32]
	lsr	x8, x21, #32
	stp	w21, w8, [x10, #-24]
	lsr	x8, x25, #32
	stp	w25, w8, [x10, #-16]
	str	x20, [x22, :lo12:env+8]
	ldp	w0, w8, [x28]
	bfi	x0, x8, #32, #32
	tst	x0, #0x6
	b.ne	.LBB175_8
// %bb.14:                              // %"$38"
                                        //   in Loop: Header=BB175_10 Depth=1
	tbz	w0, #3, .LBB175_7
// %bb.15:                              // %"$41"
                                        //   in Loop: Header=BB175_10 Depth=1
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB175_8
.LBB175_16:                             // %"$43.preheader"
                                        //   in Loop: Header=BB175_10 Depth=1
	mov	x9, xzr
	b	.LBB175_18
.LBB175_17:                             // %"$44"
                                        //   in Loop: Header=BB175_18 Depth=2
	lsr	x8, x9, #32
	stp	w9, w8, [x10]
	mov	x9, x10
.LBB175_18:                             // %"$43"
                                        //   Parent Loop BB175_10 Depth=1
                                        // =>  This Loop Header: Depth=2
                                        //       Child Loop BB175_30 Depth 3
	mov	x10, x21
	ldp	w21, w8, [x21]
	bfi	x21, x8, #32, #32
	tst	x21, #0xf
	b.eq	.LBB175_17
// %bb.19:                              // %"$45"
                                        //   in Loop: Header=BB175_18 Depth=2
	ldp	w1, w8, [x10]
	bfi	x1, x8, #32, #32
	cmp	x1, x26
	b.eq	.LBB175_24
// %bb.20:                              // %"$46"
                                        //   in Loop: Header=BB175_18 Depth=2
	tst	x1, #0x6
	b.ne	.LBB175_60
// %bb.21:                              // %"$49"
                                        //   in Loop: Header=BB175_18 Depth=2
	add	x8, x26, #208                   // =208
	cmp	x8, x1
	ccmp	x1, x26, #0, hs
	b.hs	.LBB175_61
// %bb.22:                              // %"$53"
                                        //   in Loop: Header=BB175_18 Depth=2
	ldp	w8, w11, [x1]
	mov	x12, sp
	sub	x20, x12, #32                   // =32
	mov	sp, x20
	stp	w8, w11, [x12, #-32]
	lsr	x11, x1, #32
	lsr	x8, x25, #32
	stp	w25, w8, [x12, #-16]
	mov	x8, x27
	mov	x25, x20
	stp	w1, w11, [x12, #-24]
.LBB175_23:                             // %"$54.sink.split"
                                        //   in Loop: Header=BB175_18 Depth=2
	lsr	x11, x20, #32
	stp	w20, w11, [x8]
.LBB175_24:                             // %"$54"
                                        //   in Loop: Header=BB175_18 Depth=2
	mov	x20, x10
	mov	x8, x9
	ldp	w21, w9, [x10, #8]
	bfi	x21, x9, #32, #32
	tst	x21, #0xf
	b.eq	.LBB175_32
// %bb.25:                              // %"$55"
                                        //   in Loop: Header=BB175_18 Depth=2
	cmp	x21, x26
	b.eq	.LBB175_29
// %bb.26:                              // %"$58"
                                        //   in Loop: Header=BB175_18 Depth=2
	tst	x21, #0x6
	b.ne	.LBB175_58
// %bb.27:                              // %"$61"
                                        //   in Loop: Header=BB175_18 Depth=2
	add	x9, x26, #208                   // =208
	cmp	x9, x21
	ccmp	x21, x26, #0, hs
	b.hs	.LBB175_59
// %bb.28:                              // %"$65"
                                        //   in Loop: Header=BB175_18 Depth=2
	ldp	w9, w10, [x21]
	mov	x11, sp
	sub	x12, x11, #32                   // =32
	mov	sp, x12
	stp	w9, w10, [x11, #-32]
	lsr	x9, x21, #32
	stp	w21, w9, [x11, #-24]
	lsr	x9, x25, #32
	stp	w25, w9, [x11, #-16]
	mov	x25, x12
	str	x12, [x22, :lo12:env+8]
.LBB175_29:                             // %"$66"
                                        //   in Loop: Header=BB175_18 Depth=2
	cbz	x8, .LBB175_34
.LBB175_30:                             // %"$68"
                                        //   Parent Loop BB175_10 Depth=1
                                        //     Parent Loop BB175_18 Depth=2
                                        // =>    This Inner Loop Header: Depth=3
	tbz	w8, #3, .LBB175_33
// %bb.31:                              // %"$69"
                                        //   in Loop: Header=BB175_30 Depth=3
	and	x9, x8, #0xfffffffffffffff7
	ldp	w8, w10, [x9, #8]
	bfi	x8, x10, #32, #32
	lsr	x10, x20, #32
	stp	w20, w10, [x9, #8]
	mov	x20, x9
	cbnz	x8, .LBB175_30
	b	.LBB175_34
.LBB175_32:                             // %"$57"
                                        //   in Loop: Header=BB175_18 Depth=2
	lsr	x9, x8, #32
	stp	w8, w9, [x20, #8]
	orr	x9, x20, #0x8
	b	.LBB175_18
.LBB175_33:                             // %"$71"
                                        //   in Loop: Header=BB175_18 Depth=2
	ldp	w9, w10, [x8]
	bfi	x9, x10, #32, #32
	mov	x10, x8
	b	.LBB175_23
.LBB175_34:                             // %"$-1"
                                        //   in Loop: Header=BB175_10 Depth=1
	ldp	w1, w8, [x28]
	bfi	x1, x8, #32, #32
	tst	x1, #0x6
	b.ne	.LBB175_38
// %bb.35:                              // %"$74"
                                        //   in Loop: Header=BB175_10 Depth=1
	tbz	w1, #3, .LBB175_37
// %bb.36:                              // %"$77"
                                        //   in Loop: Header=BB175_10 Depth=1
	ldp	w1, w8, [x1]
	bfi	x1, x8, #32, #32
	b	.LBB175_38
.LBB175_37:                             // %"$76"
                                        //   in Loop: Header=BB175_10 Depth=1
	mov	x0, x1
	bl	evList
	mov	x1, x0
.LBB175_38:                             // %"$73"
                                        //   in Loop: Header=BB175_10 Depth=1
	mov	x0, x20
	bl	setDestruct
	b	.LBB175_9
.LBB175_39:                             // %"$81"
                                        //   in Loop: Header=BB175_41 Depth=1
	tst	x0, #0xf
	b.ne	.LBB175_41
// %bb.40:                              // %"$90"
                                        //   in Loop: Header=BB175_41 Depth=1
	bl	evList
.LBB175_41:                             // %"$80"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w0, w8, [x24]
	bfi	x0, x8, #32, #32
	ldp	w24, w8, [x24, #8]
	bfi	x24, x8, #32, #32
	tst	x24, #0xf
	b.eq	.LBB175_39
// %bb.42:                              // %"$83"
	tst	x0, #0x6
	b.ne	.LBB175_56
// %bb.43:                              // %"$85"
	tbz	w0, #3, .LBB175_55
// %bb.44:                              // %"$88"
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB175_56
.LBB175_45:                             // %"$14"
	bl	evList
.LBB175_46:                             // %"$11"
	lsr	x8, x0, #32
	stp	w0, w8, [x20]
.LBB175_47:                             // %"$16"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w0, w8, [x21]
	bfi	x0, x8, #32, #32
	ldp	w21, w8, [x21, #8]
	bfi	x21, x8, #32, #32
	tst	x21, #0xf
	b.ne	.LBB175_50
// %bb.48:                              // %"$17"
                                        //   in Loop: Header=BB175_47 Depth=1
	tst	x0, #0xf
	b.ne	.LBB175_47
// %bb.49:                              // %"$26"
                                        //   in Loop: Header=BB175_47 Depth=1
	bl	evList
	b	.LBB175_47
.LBB175_50:                             // %"$19"
	tst	x0, #0x6
	b.ne	.LBB175_54
// %bb.51:                              // %"$21"
	tbz	w0, #3, .LBB175_53
// %bb.52:                              // %"$24"
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB175_54
.LBB175_53:                             // %"$23"
	bl	evList
.LBB175_54:                             // %"$18"
	ldp	w8, w9, [x19]
	stp	w8, w9, [x20]
	ldp	w25, w8, [x19, #16]
	bfi	x25, x8, #32, #32
	b	.LBB175_57
.LBB175_55:                             // %"$87"
	bl	evList
.LBB175_56:                             // %"$91"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w9, w8, [x25, #8]
	bfi	x9, x8, #32, #32
	ldp	w8, w10, [x25]
	stp	w8, w10, [x9]
	ldp	w25, w8, [x25, #16]
	bfi	x25, x8, #32, #32
	cmp	x23, x25
	b.ne	.LBB175_56
.LBB175_57:                             // %"$4"
	str	x25, [x22, :lo12:env+8]
	mov	sp, x29
	ldp	x20, x19, [sp, #80]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #64]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #48]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #32]             // 16-byte Folded Reload
	ldp	x28, x27, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #96             // 16-byte Folded Reload
	ret
.LBB175_58:                             // %"$31"
	mov	x0, x19
	mov	x1, x21
	bl	varErr
.LBB175_59:                             // %"$35"
	mov	x0, x19
	mov	x1, x21
	bl	protErr
.LBB175_60:                             // %"$48"
	mov	x0, x19
	bl	varErr
.LBB175_61:                             // %"$52"
	mov	x0, x19
	bl	protErr
.LBB175_62:                             // %"$5"
	mov	x0, x19
	mov	x1, x20
	bl	varErr
.LBB175_63:                             // %"$9"
	mov	x0, x19
	mov	x1, x20
	bl	protErr
.Lfunc_end175:
	.size	_let, .Lfunc_end175-_let
	.cfi_endproc
                                        // -- End function
	.globl	_letQ                           // -- Begin function _letQ
	.p2align	4
	.type	_letQ,@function
_letQ:                                  // @_letQ
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-48]!           // 16-byte Folded Spill
	stp	x22, x21, [sp, #16]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #32]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 48
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w30, -40
	.cfi_offset w29, -48
	ldp	w8, w9, [x0, #8]
	bfi	x8, x9, #32, #32
	ldp	w19, w9, [x8]
	bfi	x19, x9, #32, #32
	tst	x19, #0x6
	b.ne	.LBB176_17
// %bb.1:                               // %"$3"
	adrp	x20, SymTab+8
	add	x20, x20, :lo12:SymTab+8
	add	x9, x20, #208                   // =208
	cmp	x9, x19
	ccmp	x19, x20, #0, hs
	b.hs	.LBB176_18
// %bb.2:                               // %"$7"
	ldp	w22, w9, [x8, #8]
	bfi	x22, x9, #32, #32
	ldp	w0, w8, [x22]
	bfi	x0, x8, #32, #32
	tst	x0, #0x6
	b.ne	.LBB176_5
// %bb.3:                               // %"$9"
	tbz	w0, #3, .LBB176_13
// %bb.4:                               // %"$12"
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
.LBB176_5:                              // %"$8"
	cmp	x0, x20
	b.eq	.LBB176_16
.LBB176_6:                              // %"$14"
	ldp	w8, w9, [x19]
	adrp	x20, env+8
	ldr	x10, [x20, :lo12:env+8]
	mov	x11, sp
	sub	x21, x11, #32                   // =32
	mov	sp, x21
	stp	w8, w9, [x11, #-32]
	lsr	x8, x19, #32
	stp	w19, w8, [x11, #-24]
	lsr	x8, x10, #32
	stp	w10, w8, [x11, #-16]
	lsr	x8, x0, #32
	str	x21, [x20, :lo12:env+8]
	stp	w0, w8, [x19]
	ldp	w22, w8, [x22, #8]
	bfi	x22, x8, #32, #32
.LBB176_7:                              // %"$16"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w0, w8, [x22]
	bfi	x0, x8, #32, #32
	ldp	w22, w8, [x22, #8]
	bfi	x22, x8, #32, #32
	tst	x22, #0xf
	b.ne	.LBB176_10
// %bb.8:                               // %"$17"
                                        //   in Loop: Header=BB176_7 Depth=1
	tst	x0, #0xf
	b.ne	.LBB176_7
// %bb.9:                               // %"$26"
                                        //   in Loop: Header=BB176_7 Depth=1
	bl	evList
	b	.LBB176_7
.LBB176_10:                             // %"$19"
	tst	x0, #0x6
	b.ne	.LBB176_15
// %bb.11:                              // %"$21"
	tbz	w0, #3, .LBB176_14
// %bb.12:                              // %"$24"
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB176_15
.LBB176_13:                             // %"$11"
	bl	evList
	cmp	x0, x20
	b.ne	.LBB176_6
	b	.LBB176_16
.LBB176_14:                             // %"$23"
	bl	evList
.LBB176_15:                             // %"$18"
	ldp	w8, w9, [x21]
	stp	w8, w9, [x19]
	ldp	w9, w8, [x21, #16]
	bfi	x9, x8, #32, #32
	str	x9, [x20, :lo12:env+8]
.LBB176_16:                             // %"$15"
	mov	sp, x29
	ldp	x20, x19, [sp, #32]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #48             // 16-byte Folded Reload
	ret
.LBB176_17:                             // %"$2"
	mov	x1, x19
	bl	varErr
.LBB176_18:                             // %"$6"
	mov	x1, x19
	bl	protErr
.Lfunc_end176:
	.size	_letQ, .Lfunc_end176-_letQ
	.cfi_endproc
                                        // -- End function
	.globl	_use                            // -- Begin function _use
	.p2align	4
	.type	_use,@function
_use:                                   // @_use
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-64]!           // 16-byte Folded Spill
	str	x23, [sp, #16]                  // 8-byte Folded Spill
	stp	x22, x21, [sp, #32]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #48]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 64
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -48
	.cfi_offset w30, -56
	.cfi_offset w29, -64
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w20, w8, [x9]
	bfi	x20, x8, #32, #32
	ldp	w21, w8, [x9, #8]
	bfi	x21, x8, #32, #32
	tst	x20, #0xf
	adrp	x19, env+8
	b.eq	.LBB177_8
// %bb.1:                               // %"$2"
	ldp	w8, w9, [x20]
	ldr	x10, [x19, :lo12:env+8]
	mov	x11, sp
	sub	x22, x11, #32                   // =32
	mov	sp, x22
	stp	w8, w9, [x11, #-32]
	lsr	x8, x20, #32
	stp	w20, w8, [x11, #-24]
	lsr	x8, x10, #32
	stp	w10, w8, [x11, #-16]
	str	x22, [x19, :lo12:env+8]
.LBB177_2:                              // %"$5"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w0, w8, [x21]
	bfi	x0, x8, #32, #32
	ldp	w21, w8, [x21, #8]
	bfi	x21, x8, #32, #32
	tst	x21, #0xf
	b.ne	.LBB177_5
// %bb.3:                               // %"$6"
                                        //   in Loop: Header=BB177_2 Depth=1
	tst	x0, #0xf
	b.ne	.LBB177_2
// %bb.4:                               // %"$15"
                                        //   in Loop: Header=BB177_2 Depth=1
	bl	evList
	b	.LBB177_2
.LBB177_5:                              // %"$8"
	tst	x0, #0x6
	b.ne	.LBB177_17
// %bb.6:                               // %"$10"
	tbz	w0, #3, .LBB177_16
// %bb.7:                               // %"$13"
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB177_17
.LBB177_8:                              // %"$3"
	ldr	x22, [x19, :lo12:env+8]
	mov	x8, x22
.LBB177_9:                              // %"$16"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w10, w9, [x20]
	mov	x11, x10
	bfi	x11, x9, #32, #32
	ldp	w12, w11, [x11]
	mov	x13, sp
	sub	x23, x13, #32                   // =32
	mov	sp, x23
	stp	w12, w11, [x13, #-32]
	stp	w10, w9, [x13, #-24]
	lsr	x9, x8, #32
	stp	w8, w9, [x13, #-16]
	str	x23, [x19, :lo12:env+8]
	ldp	w20, w8, [x20, #8]
	bfi	x20, x8, #32, #32
	tst	x20, #0xf
	mov	x8, x23
	b.eq	.LBB177_9
	b	.LBB177_12
.LBB177_10:                             // %"$20"
                                        //   in Loop: Header=BB177_12 Depth=1
	tst	x0, #0xf
	b.ne	.LBB177_12
// %bb.11:                              // %"$29"
                                        //   in Loop: Header=BB177_12 Depth=1
	bl	evList
.LBB177_12:                             // %"$19"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w0, w8, [x21]
	bfi	x0, x8, #32, #32
	ldp	w21, w8, [x21, #8]
	bfi	x21, x8, #32, #32
	tst	x21, #0xf
	b.eq	.LBB177_10
// %bb.13:                              // %"$22"
	tst	x0, #0x6
	b.ne	.LBB177_19
// %bb.14:                              // %"$24"
	tbz	w0, #3, .LBB177_18
// %bb.15:                              // %"$27"
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB177_19
.LBB177_16:                             // %"$12"
	bl	evList
.LBB177_17:                             // %"$7"
	ldp	w8, w9, [x22]
	stp	w8, w9, [x20]
	ldp	w23, w8, [x22, #16]
	bfi	x23, x8, #32, #32
	b	.LBB177_20
.LBB177_18:                             // %"$26"
	bl	evList
.LBB177_19:                             // %"$30"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w9, w8, [x23, #8]
	bfi	x9, x8, #32, #32
	ldp	w8, w10, [x23]
	stp	w8, w10, [x9]
	ldp	w23, w8, [x23, #16]
	bfi	x23, x8, #32, #32
	cmp	x22, x23
	b.ne	.LBB177_19
.LBB177_20:                             // %"$4"
	str	x23, [x19, :lo12:env+8]
	mov	sp, x29
	ldp	x20, x19, [sp, #48]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #32]             // 16-byte Folded Reload
	ldr	x23, [sp, #16]                  // 8-byte Folded Reload
	ldp	x29, x30, [sp], #64             // 16-byte Folded Reload
	ret
.Lfunc_end177:
	.size	_use, .Lfunc_end177-_use
	.cfi_endproc
                                        // -- End function
	.globl	_buf                            // -- Begin function _buf
	.p2align	4
	.type	_buf,@function
_buf:                                   // @_buf
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-48]!           // 16-byte Folded Spill
	stp	x22, x21, [sp, #16]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #32]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 48
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w30, -40
	.cfi_offset w29, -48
	mov	x20, x0
	ldp	w8, w9, [x0, #8]
	bfi	x8, x9, #32, #32
	ldp	w19, w9, [x8]
	bfi	x19, x9, #32, #32
	tst	x19, #0x6
	b.ne	.LBB178_19
// %bb.1:                               // %"$3"
	adrp	x9, SymTab+8
	add	x9, x9, :lo12:SymTab+8
	add	x10, x9, #208                   // =208
	cmp	x10, x19
	ccmp	x19, x9, #0, hs
	b.hs	.LBB178_20
// %bb.2:                               // %"$7"
	ldp	w8, w9, [x8, #8]
	bfi	x8, x9, #32, #32
	ldp	w1, w9, [x8]
	bfi	x1, x9, #32, #32
	ldp	w21, w22, [x8, #8]
	tst	x1, #0x6
	b.ne	.LBB178_6
// %bb.3:                               // %"$9"
	tbz	w1, #3, .LBB178_5
// %bb.4:                               // %"$12"
	ldp	w1, w8, [x1]
	bfi	x1, x8, #32, #32
	b	.LBB178_6
.LBB178_5:                              // %"$11"
	mov	x0, x1
	bl	evList
	mov	x1, x0
.LBB178_6:                              // %"$8"
	tbz	w1, #1, .LBB178_21
// %bb.7:                               // %"$14"
	bfi	x21, x22, #32, #32
	ldp	w8, w9, [x19]
	adrp	x20, env+8
	ldr	x10, [x20, :lo12:env+8]
	mov	x11, sp
	sub	x22, x11, #32                   // =32
	mov	sp, x22
	stp	w8, w9, [x11, #-32]
	lsr	x8, x19, #32
	stp	w19, w8, [x11, #-24]
	lsr	x8, x10, #32
	stp	w10, w8, [x11, #-16]
	lsr	x8, x1, #4
	str	x22, [x20, :lo12:env+8]
	mov	x9, sp
	add	x8, x8, #15                     // =15
	and	x8, x8, #0x1ffffffffffffff0
	sub	x8, x9, x8
	mov	sp, x8
	tst	x8, #0xf000000000000000
	b.eq	.LBB178_9
// %bb.8:                               // %"$15"
	mov	x0, x8
	bl	boxNum
	b	.LBB178_10
.LBB178_9:                              // %"$16"
	mov	w0, #2
	bfi	x0, x8, #4, #60
.LBB178_10:                             // %"$17"
	lsr	x8, x0, #32
	stp	w0, w8, [x19]
.LBB178_11:                             // %"$18"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w0, w8, [x21]
	bfi	x0, x8, #32, #32
	ldp	w21, w8, [x21, #8]
	bfi	x21, x8, #32, #32
	tst	x21, #0xf
	b.ne	.LBB178_14
// %bb.12:                              // %"$19"
                                        //   in Loop: Header=BB178_11 Depth=1
	tst	x0, #0xf
	b.ne	.LBB178_11
// %bb.13:                              // %"$28"
                                        //   in Loop: Header=BB178_11 Depth=1
	bl	evList
	b	.LBB178_11
.LBB178_14:                             // %"$21"
	tst	x0, #0x6
	b.ne	.LBB178_18
// %bb.15:                              // %"$23"
	tbz	w0, #3, .LBB178_17
// %bb.16:                              // %"$26"
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB178_18
.LBB178_17:                             // %"$25"
	bl	evList
.LBB178_18:                             // %"$20"
	ldp	w8, w9, [x22]
	stp	w8, w9, [x19]
	ldp	w9, w8, [x22, #16]
	bfi	x9, x8, #32, #32
	str	x9, [x20, :lo12:env+8]
	mov	sp, x29
	ldp	x20, x19, [sp, #32]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #48             // 16-byte Folded Reload
	ret
.LBB178_19:                             // %"$2"
	mov	x0, x20
	mov	x1, x19
	bl	varErr
.LBB178_20:                             // %"$6"
	mov	x0, x20
	mov	x1, x19
	bl	protErr
.LBB178_21:                             // %"$13"
	mov	x0, x20
	bl	cntErr
.Lfunc_end178:
	.size	_buf, .Lfunc_end178-_buf
	.cfi_endproc
                                        // -- End function
	.globl	_catch                          // -- Begin function _catch
	.p2align	4
	.type	_catch,@function
_catch:                                 // @_catch
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-48]!           // 16-byte Folded Spill
	str	x21, [sp, #16]                  // 8-byte Folded Spill
	stp	x20, x19, [sp, #32]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 48
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -32
	.cfi_offset w30, -40
	.cfi_offset w29, -48
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	adrp	x8, ($JmpBufSize)
	ldr	x8, [x8, :lo12:($JmpBufSize)]
	mov	x10, sp
	add	x8, x8, #191                    // =191
	and	x8, x8, #0xfffffffffffffff0
	sub	x19, x10, x8
	mov	sp, x19
	ldp	w0, w8, [x9]
	bfi	x0, x8, #32, #32
	ldp	w20, w21, [x9, #8]
	tst	x0, #0x6
	b.ne	.LBB179_4
// %bb.1:                               // %"$3"
	tbz	w0, #3, .LBB179_3
// %bb.2:                               // %"$6"
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB179_4
.LBB179_3:                              // %"$5"
	bl	evList
.LBB179_4:                              // %"$2"
	lsr	x8, x0, #32
	adrp	x1, env
	add	x1, x1, :lo12:env
	mov	w9, #2
	stp	w0, w8, [x19, #8]
	ldr	x8, [x1, #24]
	str	x19, [x1, #24]
	str	x8, [x19]
	stp	w9, wzr, [x19, #16]
	add	x0, x19, #24                    // =24
	mov	w2, #152
	bl	memcpy2
	add	x0, x19, #176                   // =176
	bl	setjmp
	cbz	w0, .LBB179_6
// %bb.5:                               // %"$7"
	adrp	x8, ($Ret)
	ldr	x0, [x8, :lo12:($Ret)]
	b	.LBB179_14
.LBB179_6:                              // %"$8"
	bfi	x20, x21, #32, #32
.LBB179_7:                              // %"$10"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w0, w8, [x20]
	bfi	x0, x8, #32, #32
	ldp	w20, w8, [x20, #8]
	bfi	x20, x8, #32, #32
	tst	x20, #0xf
	b.ne	.LBB179_10
// %bb.8:                               // %"$11"
                                        //   in Loop: Header=BB179_7 Depth=1
	tst	x0, #0xf
	b.ne	.LBB179_7
// %bb.9:                               // %"$20"
                                        //   in Loop: Header=BB179_7 Depth=1
	bl	evList
	b	.LBB179_7
.LBB179_10:                             // %"$13"
	tst	x0, #0x6
	b.ne	.LBB179_14
// %bb.11:                              // %"$15"
	tbz	w0, #3, .LBB179_13
// %bb.12:                              // %"$18"
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB179_14
.LBB179_13:                             // %"$17"
	bl	evList
.LBB179_14:                             // %"$9"
	ldr	x8, [x19]
	adrp	x9, env+24
	str	x8, [x9, :lo12:env+24]
	mov	sp, x29
	ldp	x20, x19, [sp, #32]             // 16-byte Folded Reload
	ldr	x21, [sp, #16]                  // 8-byte Folded Reload
	ldp	x29, x30, [sp], #48             // 16-byte Folded Reload
	ret
.Lfunc_end179:
	.size	_catch, .Lfunc_end179-_catch
	.cfi_endproc
                                        // -- End function
	.globl	_throw                          // -- Begin function _throw
	.p2align	4
	.type	_throw,@function
_throw:                                 // @_throw
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-48]!           // 16-byte Folded Spill
	stp	x22, x21, [sp, #16]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #32]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 48
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w30, -40
	.cfi_offset w29, -48
	mov	x19, x0
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w20, w8, [x9]
	bfi	x20, x8, #32, #32
	ldp	w21, w8, [x9, #8]
	bfi	x21, x8, #32, #32
	tst	x20, #0x6
	b.ne	.LBB180_4
// %bb.1:                               // %"$3"
	tbz	w20, #3, .LBB180_3
// %bb.2:                               // %"$6"
	ldp	w20, w8, [x20]
	bfi	x20, x8, #32, #32
	b	.LBB180_4
.LBB180_3:                              // %"$5"
	mov	x0, x20
	bl	evList
	mov	x20, x0
.LBB180_4:                              // %"$2"
	adrp	x8, env
	ldr	x9, [x8, :lo12:env]
	mov	x10, sp
	sub	x11, x10, #16                   // =16
	mov	sp, x11
	lsr	x12, x20, #32
	stp	w20, w12, [x10, #-16]
	lsr	x12, x9, #32
	stp	w9, w12, [x10, #-8]
	str	x11, [x8, :lo12:env]
	ldp	w21, w8, [x21]
	bfi	x21, x8, #32, #32
	tst	x21, #0x6
	b.ne	.LBB180_8
// %bb.5:                               // %"$8"
	tbz	w21, #3, .LBB180_7
// %bb.6:                               // %"$11"
	ldp	w21, w8, [x21]
	bfi	x21, x8, #32, #32
	b	.LBB180_8
.LBB180_7:                              // %"$10"
	mov	x0, x21
	bl	evList
	mov	x21, x0
.LBB180_8:                              // %"$7"
	adrp	x22, env
	add	x22, x22, :lo12:env
	ldr	x9, [x22]
	mov	x10, sp
	sub	x11, x10, #16                   // =16
	mov	sp, x11
	adrp	x8, SymTab+216
	add	x8, x8, :lo12:SymTab+216
	lsr	x12, x21, #32
	stp	w21, w12, [x10, #-16]
	lsr	x12, x9, #32
	stp	w9, w12, [x10, #-8]
	str	x11, [x22], #24
	b	.LBB180_10
.LBB180_9:                              // %"$16"
                                        //   in Loop: Header=BB180_10 Depth=1
	ldp	w10, w9, [x22, #8]
	bfi	x10, x9, #32, #32
	cmp	x20, x10
	cset	w9, eq
	cbnz	w9, .LBB180_13
.LBB180_10:                             // %"$12"
                                        // =>This Inner Loop Header: Depth=1
	ldr	x22, [x22]
	cbz	x22, .LBB180_14
// %bb.11:                              // %"$13"
                                        //   in Loop: Header=BB180_10 Depth=1
	ldp	w10, w9, [x22, #8]
	bfi	x10, x9, #32, #32
	cmp	x10, x8
	b.ne	.LBB180_9
// %bb.12:                              //   in Loop: Header=BB180_10 Depth=1
	mov	w9, #1
	cbz	w9, .LBB180_10
.LBB180_13:                             // %"$17"
	mov	x0, x22
	bl	unwind
	adrp	x8, ($Ret)
	str	x21, [x8, :lo12:($Ret)]
	add	x0, x22, #176                   // =176
	mov	w1, #1
	bl	longjmp
.LBB180_14:                             // %"$14"
	adrp	x2, .L$75
	add	x2, x2, :lo12:.L$75
	mov	x0, x19
	mov	x1, x20
	mov	x3, xzr
	bl	err
.Lfunc_end180:
	.size	_throw, .Lfunc_end180-_throw
	.cfi_endproc
                                        // -- End function
	.globl	_finally                        // -- Begin function _finally
	.p2align	4
	.type	_finally,@function
_finally:                               // @_finally
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-48]!           // 16-byte Folded Spill
	stp	x22, x21, [sp, #16]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #32]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 48
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w30, -40
	.cfi_offset w29, -48
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	adrp	x8, ($JmpBufSize)
	ldr	x8, [x8, :lo12:($JmpBufSize)]
	mov	x10, sp
	add	x8, x8, #191                    // =191
	and	x8, x8, #0xfffffffffffffff0
	sub	x21, x10, x8
	mov	sp, x21
	adrp	x19, env
	add	x19, x19, :lo12:env
	stp	wzr, wzr, [x21, #8]
	ldr	x8, [x19, #24]
	str	x8, [x21]
	str	x21, [x19, #24]
	ldp	w8, w10, [x9]
	ldp	w22, w11, [x9, #8]
	bfi	x22, x11, #32, #32
	stp	w8, w10, [x21, #16]
	add	x0, x21, #24                    // =24
	mov	x1, x19
	mov	w2, #152
	bl	memcpy2
.LBB181_1:                              // %"$2"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w20, w8, [x22]
	bfi	x20, x8, #32, #32
	ldp	w22, w8, [x22, #8]
	bfi	x22, x8, #32, #32
	tst	x22, #0xf
	b.ne	.LBB181_4
// %bb.2:                               // %"$3"
                                        //   in Loop: Header=BB181_1 Depth=1
	tst	x20, #0xf
	b.ne	.LBB181_1
// %bb.3:                               // %"$12"
                                        //   in Loop: Header=BB181_1 Depth=1
	mov	x0, x20
	bl	evList
	b	.LBB181_1
.LBB181_4:                              // %"$5"
	tst	x20, #0x6
	b.ne	.LBB181_8
// %bb.5:                               // %"$7"
	tbz	w20, #3, .LBB181_7
// %bb.6:                               // %"$10"
	ldp	w20, w8, [x20]
	bfi	x20, x8, #32, #32
	b	.LBB181_8
.LBB181_7:                              // %"$9"
	mov	x0, x20
	bl	evList
	mov	x20, x0
.LBB181_8:                              // %"$4"
	adrp	x8, env
	ldr	x9, [x8, :lo12:env]
	mov	x10, sp
	sub	x22, x10, #16                   // =16
	mov	sp, x22
	lsr	x11, x20, #32
	stp	w20, w11, [x10, #-16]
	lsr	x11, x9, #32
	stp	w9, w11, [x10, #-8]
	str	x22, [x8, :lo12:env]
	ldp	w0, w8, [x21, #16]
	bfi	x0, x8, #32, #32
	tst	x0, #0x6
	b.ne	.LBB181_11
// %bb.9:                               // %"$14"
	tbnz	w0, #3, .LBB181_11
// %bb.10:                              // %"$16"
	bl	evList
.LBB181_11:                             // %"$13"
	ldr	x8, [x21]
	str	x8, [x19, #24]
	ldp	w9, w8, [x22, #8]
	bfi	x9, x8, #32, #32
	str	x9, [x19]
	mov	x0, x20
	mov	sp, x29
	ldp	x20, x19, [sp, #32]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #48             // 16-byte Folded Reload
	ret
.Lfunc_end181:
	.size	_finally, .Lfunc_end181-_finally
	.cfi_endproc
                                        // -- End function
	.globl	_co                             // -- Begin function _co
	.p2align	4
	.type	_co,@function
_co:                                    // @_co
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-80]!           // 16-byte Folded Spill
	str	x25, [sp, #16]                  // 8-byte Folded Spill
	stp	x24, x23, [sp, #32]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #48]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #64]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 80
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -64
	.cfi_offset w30, -72
	.cfi_offset w29, -80
	mov	x19, x0
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w20, w8, [x9]
	bfi	x20, x8, #32, #32
	ldp	w23, w8, [x9, #8]
	bfi	x23, x8, #32, #32
	tst	x20, #0x6
	b.ne	.LBB182_3
// %bb.1:                               // %"$3"
	tbz	w20, #3, .LBB182_11
// %bb.2:                               // %"$6"
	ldp	w20, w8, [x20]
	bfi	x20, x8, #32, #32
.LBB182_3:                              // %"$2"
	tst	x23, #0xf
	b.eq	.LBB182_12
.LBB182_4:                              // %"$8"
	adrp	x8, SymTab+216
	add	x8, x8, :lo12:SymTab+216
	cmp	x20, x8
	b.eq	.LBB182_26
// %bb.5:                               // %"$40"
	adrp	x8, env+40
	ldr	x0, [x8, :lo12:env+40]
	cbz	x0, .LBB182_8
.LBB182_6:                              // %"$44"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w9, w8, [x0]
	bfi	x9, x8, #32, #32
	cmp	x20, x9
	b.eq	.LBB182_9
// %bb.7:                               // %"$45"
                                        //   in Loop: Header=BB182_6 Depth=1
	ldr	x0, [x0, #16]
	cbnz	x0, .LBB182_6
	b	.LBB182_10
.LBB182_8:
	adrp	x20, SymTab+8
	add	x20, x20, :lo12:SymTab+8
	b	.LBB182_10
.LBB182_9:                              // %"$47"
	bl	stop
.LBB182_10:                             // %"$7"
	mov	x0, x20
	b	.LBB182_25
.LBB182_11:                             // %"$5"
	mov	x0, x20
	bl	evList
	mov	x20, x0
	tst	x23, #0xf
	b.ne	.LBB182_4
.LBB182_12:                             // %"$9"
	adrp	x8, env+40
	ldr	x8, [x8, :lo12:env+40]
	adrp	x21, env+32
	add	x21, x21, :lo12:env+32
	cbnz	x8, .LBB182_14
// %bb.13:                              // %"$10"
	adrp	x8, ($JmpBufSize)
	ldr	x8, [x8, :lo12:($JmpBufSize)]
	add	x1, x8, #264                    // =264
	mov	x0, xzr
	bl	alloc
	mov	x8, sp
	stp	xzr, xzr, [x0, #8]
	adrp	x9, SymTab+8
	add	x9, x9, :lo12:SymTab+8
	adrp	x10, ($StkSize)
	str	xzr, [x0, #24]
	add	x11, x9, #208                   // =208
	lsr	x12, x9, #32
	stp	w9, w12, [x0, #32]
	lsr	x9, x11, #32
	stp	w11, w9, [x0]
	ldr	x9, [x10, :lo12:($StkSize)]
	sub	x8, x8, x9, lsl #2
	str	x8, [x0, #40]
	stp	wzr, wzr, [x0, #48]
	stp	x0, x0, [x21]
.LBB182_14:                             // %"$11"
	ldp	x22, x25, [x21]
	mov	x0, x22
	bl	saveCoEnv
	mov	x21, xzr
	b	.LBB182_16
.LBB182_15:                             // %"$19"
                                        //   in Loop: Header=BB182_16 Depth=1
	ldr	x25, [x24, #16]
	cbz	x25, .LBB182_23
.LBB182_16:                             // %"$12"
                                        // =>This Inner Loop Header: Depth=1
	mov	x24, x25
	ldp	w9, w8, [x25]
	bfi	x9, x8, #32, #32
	cmp	x20, x9
	b.eq	.LBB182_20
// %bb.17:                              // %"$14"
                                        //   in Loop: Header=BB182_16 Depth=1
	cbnz	x21, .LBB182_15
// %bb.18:                              // %"$20"
                                        //   in Loop: Header=BB182_16 Depth=1
	ldp	w9, w8, [x24]
	bfi	x9, x8, #32, #32
	cbnz	x9, .LBB182_15
// %bb.19:                              // %"$21"
                                        //   in Loop: Header=BB182_16 Depth=1
	mov	x21, x24
	b	.LBB182_15
.LBB182_20:                             // %"$13"
	ldp	w9, w8, [x24, #48]
	bfi	x9, x8, #32, #32
	cbz	x9, .LBB182_27
// %bb.21:                              // %"$16"
	add	x0, x22, #264                   // =264
	bl	setjmp
	cbnz	w0, .LBB182_24
// %bb.22:                              // %"$18"
	adrp	x8, SymTab+8
	add	x8, x8, :lo12:SymTab+8
	adrp	x9, ($Ret)
	str	x8, [x9, :lo12:($Ret)]
	add	x0, x24, #264                   // =264
	mov	w1, #1
	bl	longjmp
.LBB182_23:                             // %"$23"
	add	x0, x22, #264                   // =264
	bl	setjmp
	cbz	w0, .LBB182_28
.LBB182_24:                             // %"$17"
	mov	x0, x22
	bl	loadCoEnv
.LBB182_25:                             // %"$7"
	mov	sp, x29
	ldp	x20, x19, [sp, #64]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #48]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #32]             // 16-byte Folded Reload
	ldr	x25, [sp, #16]                  // 8-byte Folded Reload
	ldp	x29, x30, [sp], #80             // 16-byte Folded Reload
	ret
.LBB182_26:                             // %"$41"
	adrp	x2, .L$77
	add	x2, x2, :lo12:.L$77
	mov	x0, x19
	mov	x1, xzr
	mov	x3, xzr
	bl	err
.LBB182_27:                             // %"$15"
	mov	x0, x19
	mov	x1, x20
	bl	reentErr
.LBB182_28:                             // %"$25"
	cbz	x21, .LBB182_30
// %bb.29:                              // %"$26"
	mov	sp, x21
	b	.LBB182_31
.LBB182_30:                             // %"$27"
	ldr	x8, [x24, #40]
	mov	sp, x8
	adrp	x8, ($JmpBufSize)
	ldr	x8, [x8, :lo12:($JmpBufSize)]
	mov	x9, sp
	add	x8, x8, #279                    // =279
	and	x8, x8, #0xfffffffffffffff0
	sub	x21, x9, x8
	mov	sp, x21
	str	x21, [x24, #16]
	stp	x24, xzr, [x21, #8]
.LBB182_31:                             // %"$28"
	lsr	x8, x20, #32
	stp	w20, w8, [x21]
	adrp	x20, env
	add	x20, x20, :lo12:env
	ldr	x8, [x20, #32]
	str	x8, [x21, #24]
	lsr	x8, x23, #32
	stp	w23, w8, [x21, #32]
	adrp	x8, ($StkSize)
	ldr	x8, [x8, :lo12:($StkSize)]
	sub	x8, x21, x8
	str	x8, [x21, #40]
	stp	wzr, wzr, [x21, #48]
	ldr	x8, [x20]
	lsr	x9, x8, #32
	stp	w8, w9, [x21, #56]
	ldr	x8, [x20, #8]
	mov	x9, sp
	sub	x10, x9, #32                    // =32
	mov	sp, x10
	mov	w11, #2
	stp	w11, wzr, [x9, #-32]
	adrp	x22, SymTab+8
	add	x22, x22, :lo12:SymTab+8
	add	x11, x22, #368                  // =368
	lsr	x12, x11, #32
	stp	w11, w12, [x9, #-24]
	lsr	x11, x8, #32
	stp	w8, w11, [x9, #-16]
	lsr	x8, x19, #32
	stp	w19, w8, [x9, #-8]
	str	x10, [x20, #8]
	lsr	x8, x10, #32
	stp	w10, w8, [x21, #64]
	ldr	x8, [x20, #24]
	str	x8, [x21, #72]
	ldr	x8, [x20, #48]
	str	x8, [x21, #80]
	ldr	x8, [x20, #56]
	str	x8, [x21, #88]
	ldr	x8, [x20, #64]
	str	x8, [x21, #96]
	ldr	x8, [x20, #72]
	str	x8, [x21, #104]
	add	x0, x21, #112                   // =112
	mov	x1, x20
	mov	w2, #152
	bl	memcpy2
	str	x22, [x20, #96]
	stp	xzr, xzr, [x20, #120]
	str	x21, [x20, #32]
	ldr	x8, [x21, #40]
	add	x8, x8, #1, lsl #12             // =4096
	adrp	x9, ($StkLimit)
	str	x8, [x9, :lo12:($StkLimit)]
.LBB182_32:                             // %"$29"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w0, w8, [x23]
	bfi	x0, x8, #32, #32
	ldp	w23, w8, [x23, #8]
	bfi	x23, x8, #32, #32
	tst	x23, #0xf
	b.ne	.LBB182_35
// %bb.33:                              // %"$30"
                                        //   in Loop: Header=BB182_32 Depth=1
	tst	x0, #0xf
	b.ne	.LBB182_32
// %bb.34:                              // %"$39"
                                        //   in Loop: Header=BB182_32 Depth=1
	bl	evList
	b	.LBB182_32
.LBB182_35:                             // %"$32"
	tst	x0, #0x6
	b.ne	.LBB182_39
// %bb.36:                              // %"$34"
	tbz	w0, #3, .LBB182_38
// %bb.37:                              // %"$37"
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB182_39
.LBB182_38:                             // %"$36"
	bl	evList
.LBB182_39:                             // %"$31"
	adrp	x8, ($Ret)
	str	x0, [x8, :lo12:($Ret)]
	mov	x0, x21
	bl	stop
	ldr	x8, [x21, #24]
	add	x0, x8, #264                    // =264
	mov	w1, #1
	bl	longjmp
.Lfunc_end182:
	.size	_co, .Lfunc_end182-_co
	.cfi_endproc
                                        // -- End function
	.globl	_yield                          // -- Begin function _yield
	.p2align	4
	.type	_yield,@function
_yield:                                 // @_yield
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-96]!           // 16-byte Folded Spill
	stp	x28, x27, [sp, #16]             // 16-byte Folded Spill
	stp	x26, x25, [sp, #32]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #48]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #64]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #80]             // 16-byte Folded Spill
	mov	x29, sp
	sub	sp, sp, #16                     // =16
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	mov	x21, x0
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w24, w8, [x9]
	bfi	x24, x8, #32, #32
	ldp	w19, w8, [x9, #8]
	bfi	x19, x8, #32, #32
	tst	x24, #0x6
	b.ne	.LBB183_4
// %bb.1:                               // %"$3"
	tbz	w24, #3, .LBB183_3
// %bb.2:                               // %"$6"
	ldp	w24, w8, [x24]
	bfi	x24, x8, #32, #32
	b	.LBB183_4
.LBB183_3:                              // %"$5"
	mov	x0, x24
	bl	evList
	mov	x24, x0
.LBB183_4:                              // %"$2"
	adrp	x20, env
	ldr	x8, [x20, :lo12:env]
	mov	x9, sp
	sub	x23, x9, #16                    // =16
	mov	sp, x23
	lsr	x10, x24, #32
	stp	w24, w10, [x9, #-16]
	lsr	x10, x8, #32
	stp	w8, w10, [x9, #-8]
	str	x23, [x20, :lo12:env]
	ldp	w1, w8, [x19]
	bfi	x1, x8, #32, #32
	tst	x1, #0x6
	b.ne	.LBB183_8
// %bb.5:                               // %"$8"
	tbz	w1, #3, .LBB183_7
// %bb.6:                               // %"$11"
	ldp	w1, w8, [x1]
	bfi	x1, x8, #32, #32
	b	.LBB183_8
.LBB183_7:                              // %"$10"
	mov	x0, x1
	bl	evList
	mov	x1, x0
.LBB183_8:                              // %"$7"
	adrp	x8, env+40
	ldr	x22, [x8, :lo12:env+40]
	cbz	x22, .LBB183_60
// %bb.9:                               // %"$13"
	adrp	x8, env+32
	ldr	x19, [x8, :lo12:env+32]
	adrp	x8, SymTab+8
	add	x8, x8, :lo12:SymTab+8
	cmp	x1, x8
	b.ne	.LBB183_13
// %bb.10:                              // %"$15"
	ldr	x22, [x19, #24]
	cbnz	x22, .LBB183_15
// %bb.11:                              // %"$25"
	adrp	x2, .L$80
	add	x2, x2, :lo12:.L$80
	b	.LBB183_61
.LBB183_12:                             // %"$18"
                                        //   in Loop: Header=BB183_13 Depth=1
	ldr	x22, [x22, #16]
	cbz	x22, .LBB183_59
.LBB183_13:                             // %"$17"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w9, w8, [x22]
	bfi	x9, x8, #32, #32
	cmp	x1, x9
	b.ne	.LBB183_12
// %bb.14:                              // %"$20"
	ldp	w9, w8, [x22, #48]
	bfi	x9, x8, #32, #32
	cbz	x9, .LBB183_63
.LBB183_15:                             // %"$14"
	mov	x25, xzr
	adrp	x8, ($Stdin)
	ldr	x26, [x8, :lo12:($Stdin)]
	adrp	x27, ($Stdout)
	ldr	x28, [x27, :lo12:($Stdout)]
	ldp	w9, w8, [x19]
	bfi	x9, x8, #32, #32
	adrp	x8, SymTab+216
	add	x8, x8, :lo12:SymTab+216
	cmp	x9, x8
	stp	x24, x23, [x29, #-16]           // 16-byte Folded Spill
	b.ne	.LBB183_17
// %bb.16:
	mov	x21, x25
	mov	x24, x25
	mov	x23, x25
	mov	x20, x25
	b	.LBB183_39
.LBB183_17:                             // %"$27"
	mov	x21, xzr
	ldr	x8, [x20, :lo12:env]
.LBB183_18:                             // %"$29"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w10, w9, [x19, #56]
	bfi	x10, x9, #32, #32
	cmp	x8, x10
	b.eq	.LBB183_20
// %bb.19:                              // %"$30"
                                        //   in Loop: Header=BB183_18 Depth=1
	mov	x9, x8
	ldr	w10, [x9, #8]!
	ldr	w11, [x9, #4]
	bfi	x10, x11, #32, #32
	lsr	x11, x21, #32
	stp	w21, w11, [x9]
	mov	x21, x8
	mov	x8, x10
	b	.LBB183_18
.LBB183_20:                             // %"$31"
	mov	x24, xzr
	adrp	x8, env
	add	x8, x8, :lo12:env
	str	x21, [x8]
	ldr	x8, [x8, #8]
.LBB183_21:                             // %"$32"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w10, w9, [x19, #64]
	bfi	x10, x9, #32, #32
	cmp	x8, x10
	b.eq	.LBB183_23
// %bb.22:                              // %"$33"
                                        //   in Loop: Header=BB183_21 Depth=1
	ldp	w10, w9, [x8, #8]
	bfi	x10, x9, #32, #32
	ldp	w9, w11, [x10]
	ldp	w13, w12, [x8]
	stp	w13, w12, [x10]
	stp	w9, w11, [x8]
	mov	x9, x8
	ldr	w10, [x9, #16]!
	ldr	w11, [x9, #4]
	bfi	x10, x11, #32, #32
	lsr	x11, x24, #32
	stp	w24, w11, [x9]
	mov	x24, x8
	mov	x8, x10
	b	.LBB183_21
.LBB183_23:                             // %"$34"
	ldp	w9, w8, [x19, #64]
	bfi	x9, x8, #32, #32
	lsr	x8, x24, #32
	stp	w24, w8, [x9, #16]
	adrp	x8, env+8
	add	x8, x8, :lo12:env+8
	str	x9, [x8]
	ldr	x8, [x8, #16]
	mov	x23, x25
.LBB183_24:                             // %"$35"
                                        // =>This Inner Loop Header: Depth=1
	ldr	x9, [x19, #72]
	cmp	x8, x9
	b.eq	.LBB183_26
// %bb.25:                              // %"$36"
                                        //   in Loop: Header=BB183_24 Depth=1
	ldr	x9, [x8]
	str	x23, [x8]
	mov	x23, x8
	mov	x8, x9
	b	.LBB183_24
.LBB183_26:                             // %"$37"
	adrp	x8, env+24
	add	x8, x8, :lo12:env+24
	str	x23, [x8]
	ldr	x8, [x8, #24]
.LBB183_27:                             // %"$38"
                                        // =>This Inner Loop Header: Depth=1
	ldr	x9, [x19, #80]
	cmp	x8, x9
	b.eq	.LBB183_29
// %bb.28:                              // %"$39"
                                        //   in Loop: Header=BB183_27 Depth=1
	ldr	x9, [x8]
	str	x26, [x8]
	mov	x26, x8
	mov	x8, x9
	b	.LBB183_27
.LBB183_29:                             // %"$40"
	adrp	x8, env+48
	add	x8, x8, :lo12:env+48
	str	x26, [x8]
	ldr	x8, [x8, #8]
.LBB183_30:                             // %"$41"
                                        // =>This Inner Loop Header: Depth=1
	ldr	x9, [x19, #88]
	cmp	x8, x9
	b.eq	.LBB183_32
// %bb.31:                              // %"$42"
                                        //   in Loop: Header=BB183_30 Depth=1
	ldr	x9, [x8]
	str	x28, [x8]
	mov	x28, x8
	mov	x8, x9
	b	.LBB183_30
.LBB183_32:                             // %"$43"
	adrp	x8, env+56
	add	x8, x8, :lo12:env+56
	str	x28, [x8]
	ldr	x8, [x8, #8]
	mov	x20, x25
.LBB183_33:                             // %"$44"
                                        // =>This Inner Loop Header: Depth=1
	ldr	x9, [x19, #96]
	cmp	x8, x9
	b.eq	.LBB183_35
// %bb.34:                              // %"$45"
                                        //   in Loop: Header=BB183_33 Depth=1
	ldr	x9, [x8]
	str	x20, [x8]
	mov	x20, x8
	mov	x8, x9
	b	.LBB183_33
.LBB183_35:                             // %"$46"
	adrp	x8, env+64
	add	x8, x8, :lo12:env+64
	str	x20, [x8]
	ldr	x8, [x8, #8]
.LBB183_36:                             // %"$47"
                                        // =>This Inner Loop Header: Depth=1
	ldr	x9, [x19, #104]
	cmp	x8, x9
	b.eq	.LBB183_38
// %bb.37:                              // %"$48"
                                        //   in Loop: Header=BB183_36 Depth=1
	ldr	x9, [x8]
	str	x25, [x8]
	mov	x25, x8
	mov	x8, x9
	b	.LBB183_36
.LBB183_38:                             // %"$49"
	adrp	x8, env+72
	str	x25, [x8, :lo12:env+72]
.LBB183_39:                             // %"$28"
	mov	x0, x19
	bl	saveCoEnv
	add	x0, x19, #264                   // =264
	bl	setjmp
	cbz	w0, .LBB183_62
// %bb.40:                              // %"$51"
	ldp	w9, w8, [x19]
	bfi	x9, x8, #32, #32
	adrp	x8, SymTab+216
	add	x8, x8, :lo12:SymTab+216
	cmp	x9, x8
	b.eq	.LBB183_58
// %bb.41:                              // %"$52"
	adrp	x8, env+72
	ldr	x8, [x8, :lo12:env+72]
	add	x10, x19, #104                  // =104
	mov	x9, x8
	adrp	x12, ($Stdin)
	str	x8, [x10]
	cbz	x25, .LBB183_43
.LBB183_42:                             // %"$55"
                                        // =>This Inner Loop Header: Depth=1
	mov	x11, x25
	mov	x10, x25
	ldr	x25, [x25]
	mov	x8, x9
	mov	x9, x11
	str	x8, [x10]
	cbnz	x25, .LBB183_42
.LBB183_43:                             // %"$56"
	str	x9, [x19, #184]
	adrp	x8, env+64
	ldr	x8, [x8, :lo12:env+64]
	add	x10, x19, #96                   // =96
	mov	x9, x8
	str	x8, [x10]
	cbz	x20, .LBB183_45
.LBB183_44:                             // %"$58"
                                        // =>This Inner Loop Header: Depth=1
	mov	x11, x20
	mov	x10, x20
	ldr	x20, [x20]
	mov	x8, x9
	mov	x9, x11
	str	x8, [x10]
	cbnz	x20, .LBB183_44
.LBB183_45:                             // %"$59"
	str	x9, [x19, #176]
	adrp	x8, env+56
	ldr	x9, [x8, :lo12:env+56]
	add	x10, x19, #88                   // =88
	mov	x8, x9
	adrp	x16, env
.LBB183_46:                             // %"$60"
                                        // =>This Inner Loop Header: Depth=1
	str	x9, [x10]
	ldr	x9, [x27, :lo12:($Stdout)]
	cmp	x28, x9
	b.eq	.LBB183_48
// %bb.47:                              // %"$61"
                                        //   in Loop: Header=BB183_46 Depth=1
	mov	x11, x28
	mov	x10, x28
	ldr	x28, [x28]
	mov	x9, x8
	mov	x8, x11
	b	.LBB183_46
.LBB183_48:                             // %"$62"
	str	x8, [x19, #168]
	adrp	x8, env+48
	ldr	x9, [x8, :lo12:env+48]
	add	x10, x19, #80                   // =80
	mov	x8, x9
.LBB183_49:                             // %"$63"
                                        // =>This Inner Loop Header: Depth=1
	str	x9, [x10]
	ldr	x9, [x12, :lo12:($Stdin)]
	cmp	x26, x9
	b.eq	.LBB183_51
// %bb.50:                              // %"$64"
                                        //   in Loop: Header=BB183_49 Depth=1
	mov	x11, x26
	mov	x10, x26
	ldr	x26, [x26]
	mov	x9, x8
	mov	x8, x11
	b	.LBB183_49
.LBB183_51:                             // %"$65"
	str	x8, [x19, #160]
	adrp	x8, env+24
	ldr	x9, [x8, :lo12:env+24]
	add	x10, x19, #72                   // =72
	mov	x8, x9
	str	x9, [x10]
	cbz	x23, .LBB183_53
.LBB183_52:                             // %"$67"
                                        // =>This Inner Loop Header: Depth=1
	mov	x11, x23
	mov	x10, x23
	ldr	x23, [x23]
	mov	x9, x8
	mov	x8, x11
	str	x9, [x10]
	cbnz	x23, .LBB183_52
.LBB183_53:                             // %"$68"
	mov	x9, x19
	ldr	w10, [x9, #64]!
	str	x8, [x9, #72]
	adrp	x8, env+8
	ldr	x8, [x8, :lo12:env+8]
	ldr	w11, [x9, #4]
	bfi	x10, x11, #32, #32
	lsr	x11, x8, #32
	stp	w8, w11, [x10, #16]
	ldp	w8, w10, [x9]
	bfi	x8, x10, #32, #32
	lsr	x9, x8, #32
	cbz	x24, .LBB183_55
.LBB183_54:                             // %"$70"
                                        // =>This Inner Loop Header: Depth=1
	mov	x10, x24
	ldp	w12, w11, [x24, #8]
	bfi	x12, x11, #32, #32
	ldp	w11, w13, [x12]
	ldp	w15, w14, [x24]
	stp	w15, w14, [x12]
	stp	w11, w13, [x24]
	mov	x11, x24
	ldr	w24, [x11, #16]!
	ldr	w12, [x11, #4]
	stp	w8, w9, [x11]
	bfi	x24, x12, #32, #32
	mov	x8, x10
	lsr	x9, x8, #32
	cbnz	x24, .LBB183_54
.LBB183_55:                             // %"$71"
	stp	w8, w9, [x19, #120]
	ldr	x8, [x16, :lo12:env]
	lsr	x9, x8, #32
	stp	w8, w9, [x19, #56]
	lsr	x9, x8, #32
	cbz	x21, .LBB183_57
.LBB183_56:                             // %"$73"
                                        // =>This Inner Loop Header: Depth=1
	mov	x10, x21
	mov	x11, x21
	ldr	w21, [x11, #8]!
	ldr	w12, [x11, #4]
	stp	w8, w9, [x11]
	bfi	x21, x12, #32, #32
	mov	x8, x10
	lsr	x9, x8, #32
	cbnz	x21, .LBB183_56
.LBB183_57:                             // %"$74"
	stp	w8, w9, [x19, #112]
.LBB183_58:                             // %"$53"
	mov	x0, x19
	bl	loadCoEnv
	ldur	x9, [x29, #-8]                  // 8-byte Folded Reload
	ldp	w9, w8, [x9, #8]
	bfi	x9, x8, #32, #32
	adrp	x8, env
	str	x9, [x8, :lo12:env]
	mov	sp, x29
	ldp	x20, x19, [sp, #80]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #64]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #48]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #32]             // 16-byte Folded Reload
	ldp	x28, x27, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #96             // 16-byte Folded Reload
	ret
.LBB183_59:                             // %"$23"
	adrp	x2, .L$79
	add	x2, x2, :lo12:.L$79
	mov	x0, x21
	mov	x3, xzr
	bl	err
.LBB183_60:                             // %"$12"
	adrp	x2, .L$78
	add	x2, x2, :lo12:.L$78
.LBB183_61:                             // %"$12"
	mov	x0, x21
	mov	x1, xzr
	mov	x3, xzr
	bl	err
.LBB183_62:                             // %"$50"
	adrp	x8, ($Ret)
	ldur	x9, [x29, #-16]                 // 8-byte Folded Reload
	str	x9, [x8, :lo12:($Ret)]
	add	x0, x22, #264                   // =264
	mov	w1, #1
	bl	longjmp
.LBB183_63:                             // %"$21"
	mov	x0, x21
	bl	reentErr
.Lfunc_end183:
	.size	_yield, .Lfunc_end183-_yield
	.cfi_endproc
                                        // -- End function
	.globl	_car                            // -- Begin function _car
	.p2align	4
	.type	_car,@function
_car:                                   // @_car
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x30, x19, [sp, #-16]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w19, -8
	.cfi_offset w30, -16
	mov	x19, x0
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w1, w8, [x9]
	bfi	x1, x8, #32, #32
	tst	x1, #0x6
	b.ne	.LBB184_4
// %bb.1:                               // %"$3"
	tbz	w1, #3, .LBB184_3
// %bb.2:                               // %"$6"
	ldp	w1, w8, [x1]
	bfi	x1, x8, #32, #32
	b	.LBB184_4
.LBB184_3:                              // %"$5"
	mov	x0, x1
	bl	evList
	mov	x1, x0
.LBB184_4:                              // %"$2"
	tst	x1, #0x6
	b.ne	.LBB184_6
// %bb.5:                               // %"$8"
	ldp	w0, w8, [x1]
	bfi	x0, x8, #32, #32
	ldp	x30, x19, [sp], #16             // 16-byte Folded Reload
	ret
.LBB184_6:                              // %"$7"
	mov	x0, x19
	bl	varErr
.Lfunc_end184:
	.size	_car, .Lfunc_end184-_car
	.cfi_endproc
                                        // -- End function
	.globl	_cdr                            // -- Begin function _cdr
	.p2align	4
	.type	_cdr,@function
_cdr:                                   // @_cdr
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x30, x19, [sp, #-16]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w19, -8
	.cfi_offset w30, -16
	mov	x19, x0
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w1, w8, [x9]
	bfi	x1, x8, #32, #32
	tst	x1, #0x6
	b.ne	.LBB185_4
// %bb.1:                               // %"$3"
	tbz	w1, #3, .LBB185_3
// %bb.2:                               // %"$6"
	ldp	w1, w8, [x1]
	bfi	x1, x8, #32, #32
	b	.LBB185_4
.LBB185_3:                              // %"$5"
	mov	x0, x1
	bl	evList
	mov	x1, x0
.LBB185_4:                              // %"$2"
	tst	x1, #0xf
	cset	w8, eq
	adrp	x9, SymTab+8
	add	x9, x9, :lo12:SymTab+8
	cmp	x1, x9
	cset	w9, eq
	orr	w8, w8, w9
	tbz	w8, #0, .LBB185_6
// %bb.5:                               // %"$10"
	ldp	w0, w8, [x1, #8]
	bfi	x0, x8, #32, #32
	ldp	x30, x19, [sp], #16             // 16-byte Folded Reload
	ret
.LBB185_6:                              // %"$9"
	mov	x0, x19
	bl	lstErr
.Lfunc_end185:
	.size	_cdr, .Lfunc_end185-_cdr
	.cfi_endproc
                                        // -- End function
	.globl	_caar                           // -- Begin function _caar
	.p2align	4
	.type	_caar,@function
_caar:                                  // @_caar
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x30, x19, [sp, #-16]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w19, -8
	.cfi_offset w30, -16
	mov	x19, x0
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w1, w8, [x9]
	bfi	x1, x8, #32, #32
	tst	x1, #0x6
	b.ne	.LBB186_4
// %bb.1:                               // %"$3"
	tbz	w1, #3, .LBB186_3
// %bb.2:                               // %"$6"
	ldp	w1, w8, [x1]
	bfi	x1, x8, #32, #32
	b	.LBB186_4
.LBB186_3:                              // %"$5"
	mov	x0, x1
	bl	evList
	mov	x1, x0
.LBB186_4:                              // %"$2"
	tst	x1, #0x6
	b.ne	.LBB186_7
// %bb.5:                               // %"$8"
	ldp	w1, w8, [x1]
	bfi	x1, x8, #32, #32
	tst	x1, #0x6
	b.ne	.LBB186_7
// %bb.6:                               // %"$10"
	ldp	w0, w8, [x1]
	bfi	x0, x8, #32, #32
	ldp	x30, x19, [sp], #16             // 16-byte Folded Reload
	ret
.LBB186_7:                              // %"$7"
	mov	x0, x19
	bl	varErr
.Lfunc_end186:
	.size	_caar, .Lfunc_end186-_caar
	.cfi_endproc
                                        // -- End function
	.globl	_cadr                           // -- Begin function _cadr
	.p2align	4
	.type	_cadr,@function
_cadr:                                  // @_cadr
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x30, x19, [sp, #-16]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w19, -8
	.cfi_offset w30, -16
	mov	x19, x0
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w1, w8, [x9]
	bfi	x1, x8, #32, #32
	tst	x1, #0x6
	b.ne	.LBB187_4
// %bb.1:                               // %"$3"
	tbz	w1, #3, .LBB187_3
// %bb.2:                               // %"$6"
	ldp	w1, w8, [x1]
	bfi	x1, x8, #32, #32
	b	.LBB187_4
.LBB187_3:                              // %"$5"
	mov	x0, x1
	bl	evList
	mov	x1, x0
.LBB187_4:                              // %"$2"
	tst	x1, #0xf
	cset	w8, eq
	adrp	x9, SymTab+8
	add	x9, x9, :lo12:SymTab+8
	cmp	x1, x9
	cset	w9, eq
	orr	w8, w8, w9
	tbz	w8, #0, .LBB187_7
// %bb.5:                               // %"$10"
	ldp	w1, w8, [x1, #8]
	bfi	x1, x8, #32, #32
	tst	x1, #0x6
	b.ne	.LBB187_8
// %bb.6:                               // %"$12"
	ldp	w0, w8, [x1]
	bfi	x0, x8, #32, #32
	ldp	x30, x19, [sp], #16             // 16-byte Folded Reload
	ret
.LBB187_7:                              // %"$9"
	mov	x0, x19
	bl	lstErr
.LBB187_8:                              // %"$11"
	mov	x0, x19
	bl	varErr
.Lfunc_end187:
	.size	_cadr, .Lfunc_end187-_cadr
	.cfi_endproc
                                        // -- End function
	.globl	_cdar                           // -- Begin function _cdar
	.p2align	4
	.type	_cdar,@function
_cdar:                                  // @_cdar
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x30, x19, [sp, #-16]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w19, -8
	.cfi_offset w30, -16
	mov	x19, x0
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w1, w8, [x9]
	bfi	x1, x8, #32, #32
	tst	x1, #0x6
	b.ne	.LBB188_4
// %bb.1:                               // %"$3"
	tbz	w1, #3, .LBB188_3
// %bb.2:                               // %"$6"
	ldp	w1, w8, [x1]
	bfi	x1, x8, #32, #32
	b	.LBB188_4
.LBB188_3:                              // %"$5"
	mov	x0, x1
	bl	evList
	mov	x1, x0
.LBB188_4:                              // %"$2"
	tst	x1, #0x6
	b.ne	.LBB188_7
// %bb.5:                               // %"$8"
	ldp	w1, w8, [x1]
	bfi	x1, x8, #32, #32
	tst	x1, #0xf
	cset	w8, eq
	adrp	x9, SymTab+8
	add	x9, x9, :lo12:SymTab+8
	cmp	x1, x9
	cset	w9, eq
	orr	w8, w8, w9
	tbz	w8, #0, .LBB188_8
// %bb.6:                               // %"$12"
	ldp	w0, w8, [x1, #8]
	bfi	x0, x8, #32, #32
	ldp	x30, x19, [sp], #16             // 16-byte Folded Reload
	ret
.LBB188_7:                              // %"$7"
	mov	x0, x19
	bl	varErr
.LBB188_8:                              // %"$11"
	mov	x0, x19
	bl	lstErr
.Lfunc_end188:
	.size	_cdar, .Lfunc_end188-_cdar
	.cfi_endproc
                                        // -- End function
	.globl	_cddr                           // -- Begin function _cddr
	.p2align	4
	.type	_cddr,@function
_cddr:                                  // @_cddr
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x30, x19, [sp, #-16]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w19, -8
	.cfi_offset w30, -16
	mov	x19, x0
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w1, w8, [x9]
	bfi	x1, x8, #32, #32
	tst	x1, #0x6
	b.ne	.LBB189_4
// %bb.1:                               // %"$3"
	tbz	w1, #3, .LBB189_3
// %bb.2:                               // %"$6"
	ldp	w1, w8, [x1]
	bfi	x1, x8, #32, #32
	b	.LBB189_4
.LBB189_3:                              // %"$5"
	mov	x0, x1
	bl	evList
	mov	x1, x0
.LBB189_4:                              // %"$2"
	tst	x1, #0xf
	cset	w9, eq
	adrp	x8, SymTab+8
	add	x8, x8, :lo12:SymTab+8
	cmp	x1, x8
	cset	w10, eq
	orr	w9, w9, w10
	tbz	w9, #0, .LBB189_7
// %bb.5:                               // %"$10"
	ldp	w1, w9, [x1, #8]
	bfi	x1, x9, #32, #32
	tst	x1, #0xf
	cset	w9, eq
	cmp	x1, x8
	cset	w8, eq
	orr	w8, w9, w8
	tbz	w8, #0, .LBB189_7
// %bb.6:                               // %"$14"
	ldp	w0, w8, [x1, #8]
	bfi	x0, x8, #32, #32
	ldp	x30, x19, [sp], #16             // 16-byte Folded Reload
	ret
.LBB189_7:                              // %"$9"
	mov	x0, x19
	bl	lstErr
.Lfunc_end189:
	.size	_cddr, .Lfunc_end189-_cddr
	.cfi_endproc
                                        // -- End function
	.globl	_caaar                          // -- Begin function _caaar
	.p2align	4
	.type	_caaar,@function
_caaar:                                 // @_caaar
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x30, x19, [sp, #-16]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w19, -8
	.cfi_offset w30, -16
	mov	x19, x0
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w1, w8, [x9]
	bfi	x1, x8, #32, #32
	tst	x1, #0x6
	b.ne	.LBB190_4
// %bb.1:                               // %"$3"
	tbz	w1, #3, .LBB190_3
// %bb.2:                               // %"$6"
	ldp	w1, w8, [x1]
	bfi	x1, x8, #32, #32
	b	.LBB190_4
.LBB190_3:                              // %"$5"
	mov	x0, x1
	bl	evList
	mov	x1, x0
.LBB190_4:                              // %"$2"
	tst	x1, #0x6
	b.ne	.LBB190_8
// %bb.5:                               // %"$8"
	ldp	w1, w8, [x1]
	bfi	x1, x8, #32, #32
	tst	x1, #0x6
	b.ne	.LBB190_8
// %bb.6:                               // %"$10"
	ldp	w1, w8, [x1]
	bfi	x1, x8, #32, #32
	tst	x1, #0x6
	b.ne	.LBB190_8
// %bb.7:                               // %"$12"
	ldp	w0, w8, [x1]
	bfi	x0, x8, #32, #32
	ldp	x30, x19, [sp], #16             // 16-byte Folded Reload
	ret
.LBB190_8:                              // %"$7"
	mov	x0, x19
	bl	varErr
.Lfunc_end190:
	.size	_caaar, .Lfunc_end190-_caaar
	.cfi_endproc
                                        // -- End function
	.globl	_caadr                          // -- Begin function _caadr
	.p2align	4
	.type	_caadr,@function
_caadr:                                 // @_caadr
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x30, x19, [sp, #-16]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w19, -8
	.cfi_offset w30, -16
	mov	x19, x0
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w1, w8, [x9]
	bfi	x1, x8, #32, #32
	tst	x1, #0x6
	b.ne	.LBB191_4
// %bb.1:                               // %"$3"
	tbz	w1, #3, .LBB191_3
// %bb.2:                               // %"$6"
	ldp	w1, w8, [x1]
	bfi	x1, x8, #32, #32
	b	.LBB191_4
.LBB191_3:                              // %"$5"
	mov	x0, x1
	bl	evList
	mov	x1, x0
.LBB191_4:                              // %"$2"
	tst	x1, #0xf
	cset	w8, eq
	adrp	x9, SymTab+8
	add	x9, x9, :lo12:SymTab+8
	cmp	x1, x9
	cset	w9, eq
	orr	w8, w8, w9
	tbz	w8, #0, .LBB191_9
// %bb.5:                               // %"$10"
	ldp	w1, w8, [x1, #8]
	bfi	x1, x8, #32, #32
	tst	x1, #0x6
	b.ne	.LBB191_8
// %bb.6:                               // %"$12"
	ldp	w1, w8, [x1]
	bfi	x1, x8, #32, #32
	tst	x1, #0x6
	b.ne	.LBB191_8
// %bb.7:                               // %"$14"
	ldp	w0, w8, [x1]
	bfi	x0, x8, #32, #32
	ldp	x30, x19, [sp], #16             // 16-byte Folded Reload
	ret
.LBB191_8:                              // %"$11"
	mov	x0, x19
	bl	varErr
.LBB191_9:                              // %"$9"
	mov	x0, x19
	bl	lstErr
.Lfunc_end191:
	.size	_caadr, .Lfunc_end191-_caadr
	.cfi_endproc
                                        // -- End function
	.globl	_cadar                          // -- Begin function _cadar
	.p2align	4
	.type	_cadar,@function
_cadar:                                 // @_cadar
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x30, x19, [sp, #-16]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w19, -8
	.cfi_offset w30, -16
	mov	x19, x0
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w1, w8, [x9]
	bfi	x1, x8, #32, #32
	tst	x1, #0x6
	b.ne	.LBB192_4
// %bb.1:                               // %"$3"
	tbz	w1, #3, .LBB192_3
// %bb.2:                               // %"$6"
	ldp	w1, w8, [x1]
	bfi	x1, x8, #32, #32
	b	.LBB192_4
.LBB192_3:                              // %"$5"
	mov	x0, x1
	bl	evList
	mov	x1, x0
.LBB192_4:                              // %"$2"
	tst	x1, #0x6
	b.ne	.LBB192_8
// %bb.5:                               // %"$8"
	ldp	w1, w8, [x1]
	bfi	x1, x8, #32, #32
	tst	x1, #0xf
	cset	w8, eq
	adrp	x9, SymTab+8
	add	x9, x9, :lo12:SymTab+8
	cmp	x1, x9
	cset	w9, eq
	orr	w8, w8, w9
	tbz	w8, #0, .LBB192_9
// %bb.6:                               // %"$12"
	ldp	w1, w8, [x1, #8]
	bfi	x1, x8, #32, #32
	tst	x1, #0x6
	b.ne	.LBB192_8
// %bb.7:                               // %"$14"
	ldp	w0, w8, [x1]
	bfi	x0, x8, #32, #32
	ldp	x30, x19, [sp], #16             // 16-byte Folded Reload
	ret
.LBB192_8:                              // %"$7"
	mov	x0, x19
	bl	varErr
.LBB192_9:                              // %"$11"
	mov	x0, x19
	bl	lstErr
.Lfunc_end192:
	.size	_cadar, .Lfunc_end192-_cadar
	.cfi_endproc
                                        // -- End function
	.globl	_caddr                          // -- Begin function _caddr
	.p2align	4
	.type	_caddr,@function
_caddr:                                 // @_caddr
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x30, x19, [sp, #-16]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w19, -8
	.cfi_offset w30, -16
	mov	x19, x0
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w1, w8, [x9]
	bfi	x1, x8, #32, #32
	tst	x1, #0x6
	b.ne	.LBB193_4
// %bb.1:                               // %"$3"
	tbz	w1, #3, .LBB193_3
// %bb.2:                               // %"$6"
	ldp	w1, w8, [x1]
	bfi	x1, x8, #32, #32
	b	.LBB193_4
.LBB193_3:                              // %"$5"
	mov	x0, x1
	bl	evList
	mov	x1, x0
.LBB193_4:                              // %"$2"
	tst	x1, #0xf
	cset	w9, eq
	adrp	x8, SymTab+8
	add	x8, x8, :lo12:SymTab+8
	cmp	x1, x8
	cset	w10, eq
	orr	w9, w9, w10
	tbz	w9, #0, .LBB193_8
// %bb.5:                               // %"$10"
	ldp	w1, w9, [x1, #8]
	bfi	x1, x9, #32, #32
	tst	x1, #0xf
	cset	w9, eq
	cmp	x1, x8
	cset	w8, eq
	orr	w8, w9, w8
	tbz	w8, #0, .LBB193_8
// %bb.6:                               // %"$14"
	ldp	w1, w8, [x1, #8]
	bfi	x1, x8, #32, #32
	tst	x1, #0x6
	b.ne	.LBB193_9
// %bb.7:                               // %"$16"
	ldp	w0, w8, [x1]
	bfi	x0, x8, #32, #32
	ldp	x30, x19, [sp], #16             // 16-byte Folded Reload
	ret
.LBB193_8:                              // %"$9"
	mov	x0, x19
	bl	lstErr
.LBB193_9:                              // %"$15"
	mov	x0, x19
	bl	varErr
.Lfunc_end193:
	.size	_caddr, .Lfunc_end193-_caddr
	.cfi_endproc
                                        // -- End function
	.globl	_cdaar                          // -- Begin function _cdaar
	.p2align	4
	.type	_cdaar,@function
_cdaar:                                 // @_cdaar
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x30, x19, [sp, #-16]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w19, -8
	.cfi_offset w30, -16
	mov	x19, x0
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w1, w8, [x9]
	bfi	x1, x8, #32, #32
	tst	x1, #0x6
	b.ne	.LBB194_4
// %bb.1:                               // %"$3"
	tbz	w1, #3, .LBB194_3
// %bb.2:                               // %"$6"
	ldp	w1, w8, [x1]
	bfi	x1, x8, #32, #32
	b	.LBB194_4
.LBB194_3:                              // %"$5"
	mov	x0, x1
	bl	evList
	mov	x1, x0
.LBB194_4:                              // %"$2"
	tst	x1, #0x6
	b.ne	.LBB194_8
// %bb.5:                               // %"$8"
	ldp	w1, w8, [x1]
	bfi	x1, x8, #32, #32
	tst	x1, #0x6
	b.ne	.LBB194_8
// %bb.6:                               // %"$10"
	ldp	w1, w8, [x1]
	bfi	x1, x8, #32, #32
	tst	x1, #0xf
	cset	w8, eq
	adrp	x9, SymTab+8
	add	x9, x9, :lo12:SymTab+8
	cmp	x1, x9
	cset	w9, eq
	orr	w8, w8, w9
	tbz	w8, #0, .LBB194_9
// %bb.7:                               // %"$14"
	ldp	w0, w8, [x1, #8]
	bfi	x0, x8, #32, #32
	ldp	x30, x19, [sp], #16             // 16-byte Folded Reload
	ret
.LBB194_8:                              // %"$7"
	mov	x0, x19
	bl	varErr
.LBB194_9:                              // %"$13"
	mov	x0, x19
	bl	lstErr
.Lfunc_end194:
	.size	_cdaar, .Lfunc_end194-_cdaar
	.cfi_endproc
                                        // -- End function
	.globl	_cdadr                          // -- Begin function _cdadr
	.p2align	4
	.type	_cdadr,@function
_cdadr:                                 // @_cdadr
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x30, x19, [sp, #-16]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w19, -8
	.cfi_offset w30, -16
	mov	x19, x0
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w1, w8, [x9]
	bfi	x1, x8, #32, #32
	tst	x1, #0x6
	b.ne	.LBB195_4
// %bb.1:                               // %"$3"
	tbz	w1, #3, .LBB195_3
// %bb.2:                               // %"$6"
	ldp	w1, w8, [x1]
	bfi	x1, x8, #32, #32
	b	.LBB195_4
.LBB195_3:                              // %"$5"
	mov	x0, x1
	bl	evList
	mov	x1, x0
.LBB195_4:                              // %"$2"
	tst	x1, #0xf
	cset	w9, eq
	adrp	x8, SymTab+8
	add	x8, x8, :lo12:SymTab+8
	cmp	x1, x8
	cset	w10, eq
	orr	w9, w9, w10
	tbz	w9, #0, .LBB195_8
// %bb.5:                               // %"$10"
	ldp	w1, w9, [x1, #8]
	bfi	x1, x9, #32, #32
	tst	x1, #0x6
	b.ne	.LBB195_9
// %bb.6:                               // %"$12"
	ldp	w1, w9, [x1]
	bfi	x1, x9, #32, #32
	tst	x1, #0xf
	cset	w9, eq
	cmp	x1, x8
	cset	w8, eq
	orr	w8, w9, w8
	tbz	w8, #0, .LBB195_8
// %bb.7:                               // %"$16"
	ldp	w0, w8, [x1, #8]
	bfi	x0, x8, #32, #32
	ldp	x30, x19, [sp], #16             // 16-byte Folded Reload
	ret
.LBB195_8:                              // %"$9"
	mov	x0, x19
	bl	lstErr
.LBB195_9:                              // %"$11"
	mov	x0, x19
	bl	varErr
.Lfunc_end195:
	.size	_cdadr, .Lfunc_end195-_cdadr
	.cfi_endproc
                                        // -- End function
	.globl	_cddar                          // -- Begin function _cddar
	.p2align	4
	.type	_cddar,@function
_cddar:                                 // @_cddar
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x30, x19, [sp, #-16]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w19, -8
	.cfi_offset w30, -16
	mov	x19, x0
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w1, w8, [x9]
	bfi	x1, x8, #32, #32
	tst	x1, #0x6
	b.ne	.LBB196_4
// %bb.1:                               // %"$3"
	tbz	w1, #3, .LBB196_3
// %bb.2:                               // %"$6"
	ldp	w1, w8, [x1]
	bfi	x1, x8, #32, #32
	b	.LBB196_4
.LBB196_3:                              // %"$5"
	mov	x0, x1
	bl	evList
	mov	x1, x0
.LBB196_4:                              // %"$2"
	tst	x1, #0x6
	b.ne	.LBB196_9
// %bb.5:                               // %"$8"
	ldp	w1, w8, [x1]
	bfi	x1, x8, #32, #32
	tst	x1, #0xf
	cset	w9, eq
	adrp	x8, SymTab+8
	add	x8, x8, :lo12:SymTab+8
	cmp	x1, x8
	cset	w10, eq
	orr	w9, w9, w10
	tbz	w9, #0, .LBB196_8
// %bb.6:                               // %"$12"
	ldp	w1, w9, [x1, #8]
	bfi	x1, x9, #32, #32
	tst	x1, #0xf
	cset	w9, eq
	cmp	x1, x8
	cset	w8, eq
	orr	w8, w9, w8
	tbz	w8, #0, .LBB196_8
// %bb.7:                               // %"$16"
	ldp	w0, w8, [x1, #8]
	bfi	x0, x8, #32, #32
	ldp	x30, x19, [sp], #16             // 16-byte Folded Reload
	ret
.LBB196_8:                              // %"$11"
	mov	x0, x19
	bl	lstErr
.LBB196_9:                              // %"$7"
	mov	x0, x19
	bl	varErr
.Lfunc_end196:
	.size	_cddar, .Lfunc_end196-_cddar
	.cfi_endproc
                                        // -- End function
	.globl	_cdddr                          // -- Begin function _cdddr
	.p2align	4
	.type	_cdddr,@function
_cdddr:                                 // @_cdddr
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x30, x19, [sp, #-16]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w19, -8
	.cfi_offset w30, -16
	mov	x19, x0
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w1, w8, [x9]
	bfi	x1, x8, #32, #32
	tst	x1, #0x6
	b.ne	.LBB197_4
// %bb.1:                               // %"$3"
	tbz	w1, #3, .LBB197_3
// %bb.2:                               // %"$6"
	ldp	w1, w8, [x1]
	bfi	x1, x8, #32, #32
	b	.LBB197_4
.LBB197_3:                              // %"$5"
	mov	x0, x1
	bl	evList
	mov	x1, x0
.LBB197_4:                              // %"$2"
	tst	x1, #0xf
	cset	w9, eq
	adrp	x8, SymTab+8
	add	x8, x8, :lo12:SymTab+8
	cmp	x1, x8
	cset	w10, eq
	orr	w9, w9, w10
	tbz	w9, #0, .LBB197_8
// %bb.5:                               // %"$10"
	ldp	w1, w9, [x1, #8]
	bfi	x1, x9, #32, #32
	tst	x1, #0xf
	cset	w9, eq
	cmp	x1, x8
	cset	w10, eq
	orr	w9, w9, w10
	tbz	w9, #0, .LBB197_8
// %bb.6:                               // %"$14"
	ldp	w1, w9, [x1, #8]
	bfi	x1, x9, #32, #32
	tst	x1, #0xf
	cset	w9, eq
	cmp	x1, x8
	cset	w8, eq
	orr	w8, w9, w8
	tbz	w8, #0, .LBB197_8
// %bb.7:                               // %"$18"
	ldp	w0, w8, [x1, #8]
	bfi	x0, x8, #32, #32
	ldp	x30, x19, [sp], #16             // 16-byte Folded Reload
	ret
.LBB197_8:                              // %"$9"
	mov	x0, x19
	bl	lstErr
.Lfunc_end197:
	.size	_cdddr, .Lfunc_end197-_cdddr
	.cfi_endproc
                                        // -- End function
	.globl	_caaaar                         // -- Begin function _caaaar
	.p2align	4
	.type	_caaaar,@function
_caaaar:                                // @_caaaar
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x30, x19, [sp, #-16]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w19, -8
	.cfi_offset w30, -16
	mov	x19, x0
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w1, w8, [x9]
	bfi	x1, x8, #32, #32
	tst	x1, #0x6
	b.ne	.LBB198_4
// %bb.1:                               // %"$3"
	tbz	w1, #3, .LBB198_3
// %bb.2:                               // %"$6"
	ldp	w1, w8, [x1]
	bfi	x1, x8, #32, #32
	b	.LBB198_4
.LBB198_3:                              // %"$5"
	mov	x0, x1
	bl	evList
	mov	x1, x0
.LBB198_4:                              // %"$2"
	tst	x1, #0x6
	b.ne	.LBB198_9
// %bb.5:                               // %"$8"
	ldp	w1, w8, [x1]
	bfi	x1, x8, #32, #32
	tst	x1, #0x6
	b.ne	.LBB198_9
// %bb.6:                               // %"$10"
	ldp	w1, w8, [x1]
	bfi	x1, x8, #32, #32
	tst	x1, #0x6
	b.ne	.LBB198_9
// %bb.7:                               // %"$12"
	ldp	w1, w8, [x1]
	bfi	x1, x8, #32, #32
	tst	x1, #0x6
	b.ne	.LBB198_9
// %bb.8:                               // %"$14"
	ldp	w0, w8, [x1]
	bfi	x0, x8, #32, #32
	ldp	x30, x19, [sp], #16             // 16-byte Folded Reload
	ret
.LBB198_9:                              // %"$7"
	mov	x0, x19
	bl	varErr
.Lfunc_end198:
	.size	_caaaar, .Lfunc_end198-_caaaar
	.cfi_endproc
                                        // -- End function
	.globl	_caaadr                         // -- Begin function _caaadr
	.p2align	4
	.type	_caaadr,@function
_caaadr:                                // @_caaadr
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x30, x19, [sp, #-16]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w19, -8
	.cfi_offset w30, -16
	mov	x19, x0
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w1, w8, [x9]
	bfi	x1, x8, #32, #32
	tst	x1, #0x6
	b.ne	.LBB199_4
// %bb.1:                               // %"$3"
	tbz	w1, #3, .LBB199_3
// %bb.2:                               // %"$6"
	ldp	w1, w8, [x1]
	bfi	x1, x8, #32, #32
	b	.LBB199_4
.LBB199_3:                              // %"$5"
	mov	x0, x1
	bl	evList
	mov	x1, x0
.LBB199_4:                              // %"$2"
	tst	x1, #0xf
	cset	w8, eq
	adrp	x9, SymTab+8
	add	x9, x9, :lo12:SymTab+8
	cmp	x1, x9
	cset	w9, eq
	orr	w8, w8, w9
	tbz	w8, #0, .LBB199_10
// %bb.5:                               // %"$10"
	ldp	w1, w8, [x1, #8]
	bfi	x1, x8, #32, #32
	tst	x1, #0x6
	b.ne	.LBB199_9
// %bb.6:                               // %"$12"
	ldp	w1, w8, [x1]
	bfi	x1, x8, #32, #32
	tst	x1, #0x6
	b.ne	.LBB199_9
// %bb.7:                               // %"$14"
	ldp	w1, w8, [x1]
	bfi	x1, x8, #32, #32
	tst	x1, #0x6
	b.ne	.LBB199_9
// %bb.8:                               // %"$16"
	ldp	w0, w8, [x1]
	bfi	x0, x8, #32, #32
	ldp	x30, x19, [sp], #16             // 16-byte Folded Reload
	ret
.LBB199_9:                              // %"$11"
	mov	x0, x19
	bl	varErr
.LBB199_10:                             // %"$9"
	mov	x0, x19
	bl	lstErr
.Lfunc_end199:
	.size	_caaadr, .Lfunc_end199-_caaadr
	.cfi_endproc
                                        // -- End function
	.globl	_caadar                         // -- Begin function _caadar
	.p2align	4
	.type	_caadar,@function
_caadar:                                // @_caadar
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x30, x19, [sp, #-16]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w19, -8
	.cfi_offset w30, -16
	mov	x19, x0
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w1, w8, [x9]
	bfi	x1, x8, #32, #32
	tst	x1, #0x6
	b.ne	.LBB200_4
// %bb.1:                               // %"$3"
	tbz	w1, #3, .LBB200_3
// %bb.2:                               // %"$6"
	ldp	w1, w8, [x1]
	bfi	x1, x8, #32, #32
	b	.LBB200_4
.LBB200_3:                              // %"$5"
	mov	x0, x1
	bl	evList
	mov	x1, x0
.LBB200_4:                              // %"$2"
	tst	x1, #0x6
	b.ne	.LBB200_9
// %bb.5:                               // %"$8"
	ldp	w1, w8, [x1]
	bfi	x1, x8, #32, #32
	tst	x1, #0xf
	cset	w8, eq
	adrp	x9, SymTab+8
	add	x9, x9, :lo12:SymTab+8
	cmp	x1, x9
	cset	w9, eq
	orr	w8, w8, w9
	tbz	w8, #0, .LBB200_10
// %bb.6:                               // %"$12"
	ldp	w1, w8, [x1, #8]
	bfi	x1, x8, #32, #32
	tst	x1, #0x6
	b.ne	.LBB200_9
// %bb.7:                               // %"$14"
	ldp	w1, w8, [x1]
	bfi	x1, x8, #32, #32
	tst	x1, #0x6
	b.ne	.LBB200_9
// %bb.8:                               // %"$16"
	ldp	w0, w8, [x1]
	bfi	x0, x8, #32, #32
	ldp	x30, x19, [sp], #16             // 16-byte Folded Reload
	ret
.LBB200_9:                              // %"$7"
	mov	x0, x19
	bl	varErr
.LBB200_10:                             // %"$11"
	mov	x0, x19
	bl	lstErr
.Lfunc_end200:
	.size	_caadar, .Lfunc_end200-_caadar
	.cfi_endproc
                                        // -- End function
	.globl	_caaddr                         // -- Begin function _caaddr
	.p2align	4
	.type	_caaddr,@function
_caaddr:                                // @_caaddr
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x30, x19, [sp, #-16]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w19, -8
	.cfi_offset w30, -16
	mov	x19, x0
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w1, w8, [x9]
	bfi	x1, x8, #32, #32
	tst	x1, #0x6
	b.ne	.LBB201_4
// %bb.1:                               // %"$3"
	tbz	w1, #3, .LBB201_3
// %bb.2:                               // %"$6"
	ldp	w1, w8, [x1]
	bfi	x1, x8, #32, #32
	b	.LBB201_4
.LBB201_3:                              // %"$5"
	mov	x0, x1
	bl	evList
	mov	x1, x0
.LBB201_4:                              // %"$2"
	tst	x1, #0xf
	cset	w9, eq
	adrp	x8, SymTab+8
	add	x8, x8, :lo12:SymTab+8
	cmp	x1, x8
	cset	w10, eq
	orr	w9, w9, w10
	tbz	w9, #0, .LBB201_9
// %bb.5:                               // %"$10"
	ldp	w1, w9, [x1, #8]
	bfi	x1, x9, #32, #32
	tst	x1, #0xf
	cset	w9, eq
	cmp	x1, x8
	cset	w8, eq
	orr	w8, w9, w8
	tbz	w8, #0, .LBB201_9
// %bb.6:                               // %"$14"
	ldp	w1, w8, [x1, #8]
	bfi	x1, x8, #32, #32
	tst	x1, #0x6
	b.ne	.LBB201_10
// %bb.7:                               // %"$16"
	ldp	w1, w8, [x1]
	bfi	x1, x8, #32, #32
	tst	x1, #0x6
	b.ne	.LBB201_10
// %bb.8:                               // %"$18"
	ldp	w0, w8, [x1]
	bfi	x0, x8, #32, #32
	ldp	x30, x19, [sp], #16             // 16-byte Folded Reload
	ret
.LBB201_9:                              // %"$9"
	mov	x0, x19
	bl	lstErr
.LBB201_10:                             // %"$15"
	mov	x0, x19
	bl	varErr
.Lfunc_end201:
	.size	_caaddr, .Lfunc_end201-_caaddr
	.cfi_endproc
                                        // -- End function
	.globl	_cadaar                         // -- Begin function _cadaar
	.p2align	4
	.type	_cadaar,@function
_cadaar:                                // @_cadaar
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x30, x19, [sp, #-16]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w19, -8
	.cfi_offset w30, -16
	mov	x19, x0
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w1, w8, [x9]
	bfi	x1, x8, #32, #32
	tst	x1, #0x6
	b.ne	.LBB202_4
// %bb.1:                               // %"$3"
	tbz	w1, #3, .LBB202_3
// %bb.2:                               // %"$6"
	ldp	w1, w8, [x1]
	bfi	x1, x8, #32, #32
	b	.LBB202_4
.LBB202_3:                              // %"$5"
	mov	x0, x1
	bl	evList
	mov	x1, x0
.LBB202_4:                              // %"$2"
	tst	x1, #0x6
	b.ne	.LBB202_9
// %bb.5:                               // %"$8"
	ldp	w1, w8, [x1]
	bfi	x1, x8, #32, #32
	tst	x1, #0x6
	b.ne	.LBB202_9
// %bb.6:                               // %"$10"
	ldp	w1, w8, [x1]
	bfi	x1, x8, #32, #32
	tst	x1, #0xf
	cset	w8, eq
	adrp	x9, SymTab+8
	add	x9, x9, :lo12:SymTab+8
	cmp	x1, x9
	cset	w9, eq
	orr	w8, w8, w9
	tbz	w8, #0, .LBB202_10
// %bb.7:                               // %"$14"
	ldp	w1, w8, [x1, #8]
	bfi	x1, x8, #32, #32
	tst	x1, #0x6
	b.ne	.LBB202_9
// %bb.8:                               // %"$16"
	ldp	w0, w8, [x1]
	bfi	x0, x8, #32, #32
	ldp	x30, x19, [sp], #16             // 16-byte Folded Reload
	ret
.LBB202_9:                              // %"$7"
	mov	x0, x19
	bl	varErr
.LBB202_10:                             // %"$13"
	mov	x0, x19
	bl	lstErr
.Lfunc_end202:
	.size	_cadaar, .Lfunc_end202-_cadaar
	.cfi_endproc
                                        // -- End function
	.globl	_cadadr                         // -- Begin function _cadadr
	.p2align	4
	.type	_cadadr,@function
_cadadr:                                // @_cadadr
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x30, x19, [sp, #-16]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w19, -8
	.cfi_offset w30, -16
	mov	x19, x0
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w1, w8, [x9]
	bfi	x1, x8, #32, #32
	tst	x1, #0x6
	b.ne	.LBB203_4
// %bb.1:                               // %"$3"
	tbz	w1, #3, .LBB203_3
// %bb.2:                               // %"$6"
	ldp	w1, w8, [x1]
	bfi	x1, x8, #32, #32
	b	.LBB203_4
.LBB203_3:                              // %"$5"
	mov	x0, x1
	bl	evList
	mov	x1, x0
.LBB203_4:                              // %"$2"
	tst	x1, #0xf
	cset	w9, eq
	adrp	x8, SymTab+8
	add	x8, x8, :lo12:SymTab+8
	cmp	x1, x8
	cset	w10, eq
	orr	w9, w9, w10
	tbz	w9, #0, .LBB203_9
// %bb.5:                               // %"$10"
	ldp	w1, w9, [x1, #8]
	bfi	x1, x9, #32, #32
	tst	x1, #0x6
	b.ne	.LBB203_10
// %bb.6:                               // %"$12"
	ldp	w1, w9, [x1]
	bfi	x1, x9, #32, #32
	tst	x1, #0xf
	cset	w9, eq
	cmp	x1, x8
	cset	w8, eq
	orr	w8, w9, w8
	tbz	w8, #0, .LBB203_9
// %bb.7:                               // %"$16"
	ldp	w1, w8, [x1, #8]
	bfi	x1, x8, #32, #32
	tst	x1, #0x6
	b.ne	.LBB203_10
// %bb.8:                               // %"$18"
	ldp	w0, w8, [x1]
	bfi	x0, x8, #32, #32
	ldp	x30, x19, [sp], #16             // 16-byte Folded Reload
	ret
.LBB203_9:                              // %"$9"
	mov	x0, x19
	bl	lstErr
.LBB203_10:                             // %"$11"
	mov	x0, x19
	bl	varErr
.Lfunc_end203:
	.size	_cadadr, .Lfunc_end203-_cadadr
	.cfi_endproc
                                        // -- End function
	.globl	_caddar                         // -- Begin function _caddar
	.p2align	4
	.type	_caddar,@function
_caddar:                                // @_caddar
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x30, x19, [sp, #-16]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w19, -8
	.cfi_offset w30, -16
	mov	x19, x0
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w1, w8, [x9]
	bfi	x1, x8, #32, #32
	tst	x1, #0x6
	b.ne	.LBB204_4
// %bb.1:                               // %"$3"
	tbz	w1, #3, .LBB204_3
// %bb.2:                               // %"$6"
	ldp	w1, w8, [x1]
	bfi	x1, x8, #32, #32
	b	.LBB204_4
.LBB204_3:                              // %"$5"
	mov	x0, x1
	bl	evList
	mov	x1, x0
.LBB204_4:                              // %"$2"
	tst	x1, #0x6
	b.ne	.LBB204_10
// %bb.5:                               // %"$8"
	ldp	w1, w8, [x1]
	bfi	x1, x8, #32, #32
	tst	x1, #0xf
	cset	w9, eq
	adrp	x8, SymTab+8
	add	x8, x8, :lo12:SymTab+8
	cmp	x1, x8
	cset	w10, eq
	orr	w9, w9, w10
	tbz	w9, #0, .LBB204_9
// %bb.6:                               // %"$12"
	ldp	w1, w9, [x1, #8]
	bfi	x1, x9, #32, #32
	tst	x1, #0xf
	cset	w9, eq
	cmp	x1, x8
	cset	w8, eq
	orr	w8, w9, w8
	tbz	w8, #0, .LBB204_9
// %bb.7:                               // %"$16"
	ldp	w1, w8, [x1, #8]
	bfi	x1, x8, #32, #32
	tst	x1, #0x6
	b.ne	.LBB204_10
// %bb.8:                               // %"$18"
	ldp	w0, w8, [x1]
	bfi	x0, x8, #32, #32
	ldp	x30, x19, [sp], #16             // 16-byte Folded Reload
	ret
.LBB204_9:                              // %"$11"
	mov	x0, x19
	bl	lstErr
.LBB204_10:                             // %"$7"
	mov	x0, x19
	bl	varErr
.Lfunc_end204:
	.size	_caddar, .Lfunc_end204-_caddar
	.cfi_endproc
                                        // -- End function
	.globl	_cadddr                         // -- Begin function _cadddr
	.p2align	4
	.type	_cadddr,@function
_cadddr:                                // @_cadddr
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x30, x19, [sp, #-16]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w19, -8
	.cfi_offset w30, -16
	mov	x19, x0
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w1, w8, [x9]
	bfi	x1, x8, #32, #32
	tst	x1, #0x6
	b.ne	.LBB205_4
// %bb.1:                               // %"$3"
	tbz	w1, #3, .LBB205_3
// %bb.2:                               // %"$6"
	ldp	w1, w8, [x1]
	bfi	x1, x8, #32, #32
	b	.LBB205_4
.LBB205_3:                              // %"$5"
	mov	x0, x1
	bl	evList
	mov	x1, x0
.LBB205_4:                              // %"$2"
	tst	x1, #0xf
	cset	w9, eq
	adrp	x8, SymTab+8
	add	x8, x8, :lo12:SymTab+8
	cmp	x1, x8
	cset	w10, eq
	orr	w9, w9, w10
	tbz	w9, #0, .LBB205_9
// %bb.5:                               // %"$10"
	ldp	w1, w9, [x1, #8]
	bfi	x1, x9, #32, #32
	tst	x1, #0xf
	cset	w9, eq
	cmp	x1, x8
	cset	w10, eq
	orr	w9, w9, w10
	tbz	w9, #0, .LBB205_9
// %bb.6:                               // %"$14"
	ldp	w1, w9, [x1, #8]
	bfi	x1, x9, #32, #32
	tst	x1, #0xf
	cset	w9, eq
	cmp	x1, x8
	cset	w8, eq
	orr	w8, w9, w8
	tbz	w8, #0, .LBB205_9
// %bb.7:                               // %"$18"
	ldp	w1, w8, [x1, #8]
	bfi	x1, x8, #32, #32
	tst	x1, #0x6
	b.ne	.LBB205_10
// %bb.8:                               // %"$20"
	ldp	w0, w8, [x1]
	bfi	x0, x8, #32, #32
	ldp	x30, x19, [sp], #16             // 16-byte Folded Reload
	ret
.LBB205_9:                              // %"$9"
	mov	x0, x19
	bl	lstErr
.LBB205_10:                             // %"$19"
	mov	x0, x19
	bl	varErr
.Lfunc_end205:
	.size	_cadddr, .Lfunc_end205-_cadddr
	.cfi_endproc
                                        // -- End function
	.globl	_cdaaar                         // -- Begin function _cdaaar
	.p2align	4
	.type	_cdaaar,@function
_cdaaar:                                // @_cdaaar
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x30, x19, [sp, #-16]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w19, -8
	.cfi_offset w30, -16
	mov	x19, x0
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w1, w8, [x9]
	bfi	x1, x8, #32, #32
	tst	x1, #0x6
	b.ne	.LBB206_4
// %bb.1:                               // %"$3"
	tbz	w1, #3, .LBB206_3
// %bb.2:                               // %"$6"
	ldp	w1, w8, [x1]
	bfi	x1, x8, #32, #32
	b	.LBB206_4
.LBB206_3:                              // %"$5"
	mov	x0, x1
	bl	evList
	mov	x1, x0
.LBB206_4:                              // %"$2"
	tst	x1, #0x6
	b.ne	.LBB206_9
// %bb.5:                               // %"$8"
	ldp	w1, w8, [x1]
	bfi	x1, x8, #32, #32
	tst	x1, #0x6
	b.ne	.LBB206_9
// %bb.6:                               // %"$10"
	ldp	w1, w8, [x1]
	bfi	x1, x8, #32, #32
	tst	x1, #0x6
	b.ne	.LBB206_9
// %bb.7:                               // %"$12"
	ldp	w1, w8, [x1]
	bfi	x1, x8, #32, #32
	tst	x1, #0xf
	cset	w8, eq
	adrp	x9, SymTab+8
	add	x9, x9, :lo12:SymTab+8
	cmp	x1, x9
	cset	w9, eq
	orr	w8, w8, w9
	tbz	w8, #0, .LBB206_10
// %bb.8:                               // %"$16"
	ldp	w0, w8, [x1, #8]
	bfi	x0, x8, #32, #32
	ldp	x30, x19, [sp], #16             // 16-byte Folded Reload
	ret
.LBB206_9:                              // %"$7"
	mov	x0, x19
	bl	varErr
.LBB206_10:                             // %"$15"
	mov	x0, x19
	bl	lstErr
.Lfunc_end206:
	.size	_cdaaar, .Lfunc_end206-_cdaaar
	.cfi_endproc
                                        // -- End function
	.globl	_cdaadr                         // -- Begin function _cdaadr
	.p2align	4
	.type	_cdaadr,@function
_cdaadr:                                // @_cdaadr
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x30, x19, [sp, #-16]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w19, -8
	.cfi_offset w30, -16
	mov	x19, x0
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w1, w8, [x9]
	bfi	x1, x8, #32, #32
	tst	x1, #0x6
	b.ne	.LBB207_4
// %bb.1:                               // %"$3"
	tbz	w1, #3, .LBB207_3
// %bb.2:                               // %"$6"
	ldp	w1, w8, [x1]
	bfi	x1, x8, #32, #32
	b	.LBB207_4
.LBB207_3:                              // %"$5"
	mov	x0, x1
	bl	evList
	mov	x1, x0
.LBB207_4:                              // %"$2"
	tst	x1, #0xf
	cset	w9, eq
	adrp	x8, SymTab+8
	add	x8, x8, :lo12:SymTab+8
	cmp	x1, x8
	cset	w10, eq
	orr	w9, w9, w10
	tbz	w9, #0, .LBB207_10
// %bb.5:                               // %"$10"
	ldp	w1, w9, [x1, #8]
	bfi	x1, x9, #32, #32
	tst	x1, #0x6
	b.ne	.LBB207_9
// %bb.6:                               // %"$12"
	ldp	w1, w9, [x1]
	bfi	x1, x9, #32, #32
	tst	x1, #0x6
	b.ne	.LBB207_9
// %bb.7:                               // %"$14"
	ldp	w1, w9, [x1]
	bfi	x1, x9, #32, #32
	tst	x1, #0xf
	cset	w9, eq
	cmp	x1, x8
	cset	w8, eq
	orr	w8, w9, w8
	tbz	w8, #0, .LBB207_10
// %bb.8:                               // %"$18"
	ldp	w0, w8, [x1, #8]
	bfi	x0, x8, #32, #32
	ldp	x30, x19, [sp], #16             // 16-byte Folded Reload
	ret
.LBB207_9:                              // %"$11"
	mov	x0, x19
	bl	varErr
.LBB207_10:                             // %"$9"
	mov	x0, x19
	bl	lstErr
.Lfunc_end207:
	.size	_cdaadr, .Lfunc_end207-_cdaadr
	.cfi_endproc
                                        // -- End function
	.globl	_cdadar                         // -- Begin function _cdadar
	.p2align	4
	.type	_cdadar,@function
_cdadar:                                // @_cdadar
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x30, x19, [sp, #-16]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w19, -8
	.cfi_offset w30, -16
	mov	x19, x0
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w1, w8, [x9]
	bfi	x1, x8, #32, #32
	tst	x1, #0x6
	b.ne	.LBB208_4
// %bb.1:                               // %"$3"
	tbz	w1, #3, .LBB208_3
// %bb.2:                               // %"$6"
	ldp	w1, w8, [x1]
	bfi	x1, x8, #32, #32
	b	.LBB208_4
.LBB208_3:                              // %"$5"
	mov	x0, x1
	bl	evList
	mov	x1, x0
.LBB208_4:                              // %"$2"
	tst	x1, #0x6
	b.ne	.LBB208_9
// %bb.5:                               // %"$8"
	ldp	w1, w8, [x1]
	bfi	x1, x8, #32, #32
	tst	x1, #0xf
	cset	w9, eq
	adrp	x8, SymTab+8
	add	x8, x8, :lo12:SymTab+8
	cmp	x1, x8
	cset	w10, eq
	orr	w9, w9, w10
	tbz	w9, #0, .LBB208_10
// %bb.6:                               // %"$12"
	ldp	w1, w9, [x1, #8]
	bfi	x1, x9, #32, #32
	tst	x1, #0x6
	b.ne	.LBB208_9
// %bb.7:                               // %"$14"
	ldp	w1, w9, [x1]
	bfi	x1, x9, #32, #32
	tst	x1, #0xf
	cset	w9, eq
	cmp	x1, x8
	cset	w8, eq
	orr	w8, w9, w8
	tbz	w8, #0, .LBB208_10
// %bb.8:                               // %"$18"
	ldp	w0, w8, [x1, #8]
	bfi	x0, x8, #32, #32
	ldp	x30, x19, [sp], #16             // 16-byte Folded Reload
	ret
.LBB208_9:                              // %"$7"
	mov	x0, x19
	bl	varErr
.LBB208_10:                             // %"$11"
	mov	x0, x19
	bl	lstErr
.Lfunc_end208:
	.size	_cdadar, .Lfunc_end208-_cdadar
	.cfi_endproc
                                        // -- End function
	.globl	_cdaddr                         // -- Begin function _cdaddr
	.p2align	4
	.type	_cdaddr,@function
_cdaddr:                                // @_cdaddr
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x30, x19, [sp, #-16]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w19, -8
	.cfi_offset w30, -16
	mov	x19, x0
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w1, w8, [x9]
	bfi	x1, x8, #32, #32
	tst	x1, #0x6
	b.ne	.LBB209_4
// %bb.1:                               // %"$3"
	tbz	w1, #3, .LBB209_3
// %bb.2:                               // %"$6"
	ldp	w1, w8, [x1]
	bfi	x1, x8, #32, #32
	b	.LBB209_4
.LBB209_3:                              // %"$5"
	mov	x0, x1
	bl	evList
	mov	x1, x0
.LBB209_4:                              // %"$2"
	tst	x1, #0xf
	cset	w9, eq
	adrp	x8, SymTab+8
	add	x8, x8, :lo12:SymTab+8
	cmp	x1, x8
	cset	w10, eq
	orr	w9, w9, w10
	tbz	w9, #0, .LBB209_9
// %bb.5:                               // %"$10"
	ldp	w1, w9, [x1, #8]
	bfi	x1, x9, #32, #32
	tst	x1, #0xf
	cset	w9, eq
	cmp	x1, x8
	cset	w10, eq
	orr	w9, w9, w10
	tbz	w9, #0, .LBB209_9
// %bb.6:                               // %"$14"
	ldp	w1, w9, [x1, #8]
	bfi	x1, x9, #32, #32
	tst	x1, #0x6
	b.ne	.LBB209_10
// %bb.7:                               // %"$16"
	ldp	w1, w9, [x1]
	bfi	x1, x9, #32, #32
	tst	x1, #0xf
	cset	w9, eq
	cmp	x1, x8
	cset	w8, eq
	orr	w8, w9, w8
	tbz	w8, #0, .LBB209_9
// %bb.8:                               // %"$20"
	ldp	w0, w8, [x1, #8]
	bfi	x0, x8, #32, #32
	ldp	x30, x19, [sp], #16             // 16-byte Folded Reload
	ret
.LBB209_9:                              // %"$9"
	mov	x0, x19
	bl	lstErr
.LBB209_10:                             // %"$15"
	mov	x0, x19
	bl	varErr
.Lfunc_end209:
	.size	_cdaddr, .Lfunc_end209-_cdaddr
	.cfi_endproc
                                        // -- End function
	.globl	_cddaar                         // -- Begin function _cddaar
	.p2align	4
	.type	_cddaar,@function
_cddaar:                                // @_cddaar
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x30, x19, [sp, #-16]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w19, -8
	.cfi_offset w30, -16
	mov	x19, x0
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w1, w8, [x9]
	bfi	x1, x8, #32, #32
	tst	x1, #0x6
	b.ne	.LBB210_4
// %bb.1:                               // %"$3"
	tbz	w1, #3, .LBB210_3
// %bb.2:                               // %"$6"
	ldp	w1, w8, [x1]
	bfi	x1, x8, #32, #32
	b	.LBB210_4
.LBB210_3:                              // %"$5"
	mov	x0, x1
	bl	evList
	mov	x1, x0
.LBB210_4:                              // %"$2"
	tst	x1, #0x6
	b.ne	.LBB210_9
// %bb.5:                               // %"$8"
	ldp	w1, w8, [x1]
	bfi	x1, x8, #32, #32
	tst	x1, #0x6
	b.ne	.LBB210_9
// %bb.6:                               // %"$10"
	ldp	w1, w8, [x1]
	bfi	x1, x8, #32, #32
	tst	x1, #0xf
	cset	w9, eq
	adrp	x8, SymTab+8
	add	x8, x8, :lo12:SymTab+8
	cmp	x1, x8
	cset	w10, eq
	orr	w9, w9, w10
	tbz	w9, #0, .LBB210_10
// %bb.7:                               // %"$14"
	ldp	w1, w9, [x1, #8]
	bfi	x1, x9, #32, #32
	tst	x1, #0xf
	cset	w9, eq
	cmp	x1, x8
	cset	w8, eq
	orr	w8, w9, w8
	tbz	w8, #0, .LBB210_10
// %bb.8:                               // %"$18"
	ldp	w0, w8, [x1, #8]
	bfi	x0, x8, #32, #32
	ldp	x30, x19, [sp], #16             // 16-byte Folded Reload
	ret
.LBB210_9:                              // %"$7"
	mov	x0, x19
	bl	varErr
.LBB210_10:                             // %"$13"
	mov	x0, x19
	bl	lstErr
.Lfunc_end210:
	.size	_cddaar, .Lfunc_end210-_cddaar
	.cfi_endproc
                                        // -- End function
	.globl	_cddadr                         // -- Begin function _cddadr
	.p2align	4
	.type	_cddadr,@function
_cddadr:                                // @_cddadr
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x30, x19, [sp, #-16]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w19, -8
	.cfi_offset w30, -16
	mov	x19, x0
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w1, w8, [x9]
	bfi	x1, x8, #32, #32
	tst	x1, #0x6
	b.ne	.LBB211_4
// %bb.1:                               // %"$3"
	tbz	w1, #3, .LBB211_3
// %bb.2:                               // %"$6"
	ldp	w1, w8, [x1]
	bfi	x1, x8, #32, #32
	b	.LBB211_4
.LBB211_3:                              // %"$5"
	mov	x0, x1
	bl	evList
	mov	x1, x0
.LBB211_4:                              // %"$2"
	tst	x1, #0xf
	cset	w9, eq
	adrp	x8, SymTab+8
	add	x8, x8, :lo12:SymTab+8
	cmp	x1, x8
	cset	w10, eq
	orr	w9, w9, w10
	tbz	w9, #0, .LBB211_9
// %bb.5:                               // %"$10"
	ldp	w1, w9, [x1, #8]
	bfi	x1, x9, #32, #32
	tst	x1, #0x6
	b.ne	.LBB211_10
// %bb.6:                               // %"$12"
	ldp	w1, w9, [x1]
	bfi	x1, x9, #32, #32
	tst	x1, #0xf
	cset	w9, eq
	cmp	x1, x8
	cset	w10, eq
	orr	w9, w9, w10
	tbz	w9, #0, .LBB211_9
// %bb.7:                               // %"$16"
	ldp	w1, w9, [x1, #8]
	bfi	x1, x9, #32, #32
	tst	x1, #0xf
	cset	w9, eq
	cmp	x1, x8
	cset	w8, eq
	orr	w8, w9, w8
	tbz	w8, #0, .LBB211_9
// %bb.8:                               // %"$20"
	ldp	w0, w8, [x1, #8]
	bfi	x0, x8, #32, #32
	ldp	x30, x19, [sp], #16             // 16-byte Folded Reload
	ret
.LBB211_9:                              // %"$9"
	mov	x0, x19
	bl	lstErr
.LBB211_10:                             // %"$11"
	mov	x0, x19
	bl	varErr
.Lfunc_end211:
	.size	_cddadr, .Lfunc_end211-_cddadr
	.cfi_endproc
                                        // -- End function
	.globl	_cdddar                         // -- Begin function _cdddar
	.p2align	4
	.type	_cdddar,@function
_cdddar:                                // @_cdddar
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x30, x19, [sp, #-16]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w19, -8
	.cfi_offset w30, -16
	mov	x19, x0
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w1, w8, [x9]
	bfi	x1, x8, #32, #32
	tst	x1, #0x6
	b.ne	.LBB212_4
// %bb.1:                               // %"$3"
	tbz	w1, #3, .LBB212_3
// %bb.2:                               // %"$6"
	ldp	w1, w8, [x1]
	bfi	x1, x8, #32, #32
	b	.LBB212_4
.LBB212_3:                              // %"$5"
	mov	x0, x1
	bl	evList
	mov	x1, x0
.LBB212_4:                              // %"$2"
	tst	x1, #0x6
	b.ne	.LBB212_10
// %bb.5:                               // %"$8"
	ldp	w1, w8, [x1]
	bfi	x1, x8, #32, #32
	tst	x1, #0xf
	cset	w9, eq
	adrp	x8, SymTab+8
	add	x8, x8, :lo12:SymTab+8
	cmp	x1, x8
	cset	w10, eq
	orr	w9, w9, w10
	tbz	w9, #0, .LBB212_9
// %bb.6:                               // %"$12"
	ldp	w1, w9, [x1, #8]
	bfi	x1, x9, #32, #32
	tst	x1, #0xf
	cset	w9, eq
	cmp	x1, x8
	cset	w10, eq
	orr	w9, w9, w10
	tbz	w9, #0, .LBB212_9
// %bb.7:                               // %"$16"
	ldp	w1, w9, [x1, #8]
	bfi	x1, x9, #32, #32
	tst	x1, #0xf
	cset	w9, eq
	cmp	x1, x8
	cset	w8, eq
	orr	w8, w9, w8
	tbz	w8, #0, .LBB212_9
// %bb.8:                               // %"$20"
	ldp	w0, w8, [x1, #8]
	bfi	x0, x8, #32, #32
	ldp	x30, x19, [sp], #16             // 16-byte Folded Reload
	ret
.LBB212_9:                              // %"$11"
	mov	x0, x19
	bl	lstErr
.LBB212_10:                             // %"$7"
	mov	x0, x19
	bl	varErr
.Lfunc_end212:
	.size	_cdddar, .Lfunc_end212-_cdddar
	.cfi_endproc
                                        // -- End function
	.globl	_cddddr                         // -- Begin function _cddddr
	.p2align	4
	.type	_cddddr,@function
_cddddr:                                // @_cddddr
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x30, x19, [sp, #-16]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w19, -8
	.cfi_offset w30, -16
	mov	x19, x0
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w1, w8, [x9]
	bfi	x1, x8, #32, #32
	tst	x1, #0x6
	b.ne	.LBB213_4
// %bb.1:                               // %"$3"
	tbz	w1, #3, .LBB213_3
// %bb.2:                               // %"$6"
	ldp	w1, w8, [x1]
	bfi	x1, x8, #32, #32
	b	.LBB213_4
.LBB213_3:                              // %"$5"
	mov	x0, x1
	bl	evList
	mov	x1, x0
.LBB213_4:                              // %"$2"
	tst	x1, #0xf
	cset	w9, eq
	adrp	x8, SymTab+8
	add	x8, x8, :lo12:SymTab+8
	cmp	x1, x8
	cset	w10, eq
	orr	w9, w9, w10
	tbz	w9, #0, .LBB213_9
// %bb.5:                               // %"$10"
	ldp	w1, w9, [x1, #8]
	bfi	x1, x9, #32, #32
	tst	x1, #0xf
	cset	w9, eq
	cmp	x1, x8
	cset	w10, eq
	orr	w9, w9, w10
	tbz	w9, #0, .LBB213_9
// %bb.6:                               // %"$14"
	ldp	w1, w9, [x1, #8]
	bfi	x1, x9, #32, #32
	tst	x1, #0xf
	cset	w9, eq
	cmp	x1, x8
	cset	w10, eq
	orr	w9, w9, w10
	tbz	w9, #0, .LBB213_9
// %bb.7:                               // %"$18"
	ldp	w1, w9, [x1, #8]
	bfi	x1, x9, #32, #32
	tst	x1, #0xf
	cset	w9, eq
	cmp	x1, x8
	cset	w8, eq
	orr	w8, w9, w8
	tbz	w8, #0, .LBB213_9
// %bb.8:                               // %"$22"
	ldp	w0, w8, [x1, #8]
	bfi	x0, x8, #32, #32
	ldp	x30, x19, [sp], #16             // 16-byte Folded Reload
	ret
.LBB213_9:                              // %"$9"
	mov	x0, x19
	bl	lstErr
.Lfunc_end213:
	.size	_cddddr, .Lfunc_end213-_cddddr
	.cfi_endproc
                                        // -- End function
	.globl	_nth                            // -- Begin function _nth
	.p2align	4
	.type	_nth,@function
_nth:                                   // @_nth
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-64]!           // 16-byte Folded Spill
	stp	x24, x23, [sp, #16]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #32]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #48]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 64
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w30, -56
	.cfi_offset w29, -64
	mov	x20, x0
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w19, w8, [x9]
	bfi	x19, x8, #32, #32
	ldp	w21, w8, [x9, #8]
	bfi	x21, x8, #32, #32
	tst	x19, #0x6
	b.ne	.LBB214_4
// %bb.1:                               // %"$3"
	tbz	w19, #3, .LBB214_3
// %bb.2:                               // %"$6"
	ldp	w19, w8, [x19]
	bfi	x19, x8, #32, #32
	b	.LBB214_4
.LBB214_3:                              // %"$5"
	mov	x0, x19
	bl	evList
	mov	x19, x0
.LBB214_4:                              // %"$2"
	adrp	x22, env
	ldr	x8, [x22, :lo12:env]
	mov	x9, sp
	sub	x23, x9, #16                    // =16
	mov	sp, x23
	lsr	x10, x19, #32
	lsr	x11, x8, #32
	stp	w19, w10, [x9, #-16]
	stp	w8, w11, [x9, #-8]
	adrp	x24, SymTab+8
	add	x24, x24, :lo12:SymTab+8
	str	x23, [x22, :lo12:env]
	tst	x19, #0xf
	b.ne	.LBB214_11
.LBB214_5:                              // %"$8"
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB214_7 Depth 2
	mov	x0, x20
	mov	x1, x21
	bl	evCnt
	cmp	x0, #1                          // =1
	b.mi	.LBB214_10
// %bb.6:                               // %"$13.preheader"
                                        //   in Loop: Header=BB214_5 Depth=1
	sub	x8, x0, #2                      // =2
	tbnz	x8, #63, .LBB214_8
.LBB214_7:                              // %"$14"
                                        //   Parent Loop BB214_5 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	w19, w9, [x19, #8]
	bfi	x19, x9, #32, #32
	sub	x8, x8, #1                      // =1
	tbz	x8, #63, .LBB214_7
.LBB214_8:                              // %"$15"
                                        //   in Loop: Header=BB214_5 Depth=1
	ldp	w21, w8, [x21, #8]
	bfi	x21, x8, #32, #32
	tst	x21, #0xf
	b.ne	.LBB214_11
// %bb.9:                               // %"$16"
                                        //   in Loop: Header=BB214_5 Depth=1
	ldp	w19, w8, [x19]
	bfi	x19, x8, #32, #32
	tst	x19, #0xf
	b.eq	.LBB214_5
	b	.LBB214_11
.LBB214_10:
	mov	x19, x24
.LBB214_11:                             // %"$9"
	ldp	w9, w8, [x23, #8]
	bfi	x9, x8, #32, #32
	str	x9, [x22, :lo12:env]
	mov	x0, x19
	mov	sp, x29
	ldp	x20, x19, [sp, #48]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #32]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #64             // 16-byte Folded Reload
	ret
.Lfunc_end214:
	.size	_nth, .Lfunc_end214-_nth
	.cfi_endproc
                                        // -- End function
	.globl	_con                            // -- Begin function _con
	.p2align	4
	.type	_con,@function
_con:                                   // @_con
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-48]!           // 16-byte Folded Spill
	stp	x22, x21, [sp, #16]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #32]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 48
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w30, -40
	.cfi_offset w29, -48
	mov	x20, x0
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w19, w8, [x9]
	bfi	x19, x8, #32, #32
	ldp	w21, w22, [x9, #8]
	tst	x19, #0x6
	b.ne	.LBB215_4
// %bb.1:                               // %"$3"
	tbz	w19, #3, .LBB215_3
// %bb.2:                               // %"$6"
	ldp	w19, w8, [x19]
	bfi	x19, x8, #32, #32
	b	.LBB215_4
.LBB215_3:                              // %"$5"
	mov	x0, x19
	bl	evList
	mov	x19, x0
.LBB215_4:                              // %"$2"
	tst	x19, #0xf
	b.ne	.LBB215_10
// %bb.5:                               // %"$8"
	bfi	x21, x22, #32, #32
	adrp	x20, env
	ldr	x8, [x20, :lo12:env]
	mov	x9, sp
	sub	x22, x9, #16                    // =16
	mov	sp, x22
	lsr	x10, x19, #32
	stp	w19, w10, [x9, #-16]
	lsr	x10, x8, #32
	stp	w8, w10, [x9, #-8]
	str	x22, [x20, :lo12:env]
	ldp	w0, w8, [x21]
	bfi	x0, x8, #32, #32
	tst	x0, #0x6
	b.ne	.LBB215_9
// %bb.6:                               // %"$10"
	tbz	w0, #3, .LBB215_8
// %bb.7:                               // %"$13"
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB215_9
.LBB215_8:                              // %"$12"
	bl	evList
.LBB215_9:                              // %"$9"
	lsr	x8, x0, #32
	stp	w0, w8, [x19, #8]
	ldp	w9, w8, [x22, #8]
	bfi	x9, x8, #32, #32
	str	x9, [x20, :lo12:env]
	mov	sp, x29
	ldp	x20, x19, [sp, #32]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #48             // 16-byte Folded Reload
	ret
.LBB215_10:                             // %"$7"
	mov	x0, x20
	mov	x1, x19
	bl	pairErr
.Lfunc_end215:
	.size	_con, .Lfunc_end215-_con
	.cfi_endproc
                                        // -- End function
	.globl	_cons                           // -- Begin function _cons
	.p2align	4
	.type	_cons,@function
_cons:                                  // @_cons
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-64]!           // 16-byte Folded Spill
	stp	x24, x23, [sp, #16]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #32]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #48]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 64
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w30, -56
	.cfi_offset w29, -64
	ldp	w21, w8, [x0, #8]
	bfi	x21, x8, #32, #32
	ldp	w0, w8, [x21]
	bfi	x0, x8, #32, #32
	tst	x0, #0x6
	b.ne	.LBB216_4
// %bb.1:                               // %"$3"
	tbz	w0, #3, .LBB216_3
// %bb.2:                               // %"$6"
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB216_4
.LBB216_3:                              // %"$5"
	bl	evList
.LBB216_4:                              // %"$2"
	adrp	x20, SymTab+8
	add	x20, x20, :lo12:SymTab+8
	mov	x1, x20
	bl	cons
	mov	x19, x0
	adrp	x22, env
	ldr	x8, [x22, :lo12:env]
	mov	x9, sp
	sub	x23, x9, #16                    // =16
	mov	sp, x23
	lsr	x10, x0, #32
	lsr	x11, x8, #32
	stp	w19, w10, [x9, #-16]
	stp	w8, w11, [x9, #-8]
	mov	x24, x0
	str	x23, [x22, :lo12:env]
	b	.LBB216_7
.LBB216_5:                              // %"$13"
                                        //   in Loop: Header=BB216_7 Depth=1
	bl	evList
.LBB216_6:                              // %"$10"
                                        //   in Loop: Header=BB216_7 Depth=1
	mov	x1, x20
	bl	cons
	lsr	x8, x0, #32
	stp	w0, w8, [x24, #8]
	mov	x24, x0
.LBB216_7:                              // %"$7"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w21, w8, [x21, #8]
	bfi	x21, x8, #32, #32
	ldrb	w8, [x21, #8]
	tst	w8, #0xf
	b.ne	.LBB216_11
// %bb.8:                               // %"$8"
                                        //   in Loop: Header=BB216_7 Depth=1
	ldp	w0, w8, [x21]
	bfi	x0, x8, #32, #32
	tst	x0, #0x6
	b.ne	.LBB216_6
// %bb.9:                               // %"$11"
                                        //   in Loop: Header=BB216_7 Depth=1
	tbz	w0, #3, .LBB216_5
// %bb.10:                              // %"$14"
                                        //   in Loop: Header=BB216_7 Depth=1
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB216_6
.LBB216_11:                             // %"$9"
	ldp	w0, w8, [x21]
	bfi	x0, x8, #32, #32
	tst	x0, #0x6
	b.ne	.LBB216_15
// %bb.12:                              // %"$16"
	tbz	w0, #3, .LBB216_14
// %bb.13:                              // %"$19"
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB216_15
.LBB216_14:                             // %"$18"
	bl	evList
.LBB216_15:                             // %"$15"
	lsr	x8, x0, #32
	stp	w0, w8, [x24, #8]
	ldp	w9, w8, [x23, #8]
	bfi	x9, x8, #32, #32
	str	x9, [x22, :lo12:env]
	mov	x0, x19
	mov	sp, x29
	ldp	x20, x19, [sp, #48]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #32]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #64             // 16-byte Folded Reload
	ret
.Lfunc_end216:
	.size	_cons, .Lfunc_end216-_cons
	.cfi_endproc
                                        // -- End function
	.globl	_conc                           // -- Begin function _conc
	.p2align	4
	.type	_conc,@function
_conc:                                  // @_conc
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-64]!           // 16-byte Folded Spill
	str	x23, [sp, #16]                  // 8-byte Folded Spill
	stp	x22, x21, [sp, #32]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #48]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 64
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -48
	.cfi_offset w30, -56
	.cfi_offset w29, -64
	ldp	w21, w8, [x0, #8]
	bfi	x21, x8, #32, #32
	ldp	w19, w8, [x21]
	bfi	x19, x8, #32, #32
	tst	x19, #0x6
	b.ne	.LBB217_4
// %bb.1:                               // %"$3"
	tbz	w19, #3, .LBB217_3
// %bb.2:                               // %"$6"
	ldp	w19, w8, [x19]
	bfi	x19, x8, #32, #32
	b	.LBB217_4
.LBB217_3:                              // %"$5"
	mov	x0, x19
	bl	evList
	mov	x19, x0
.LBB217_4:                              // %"$2"
	adrp	x22, env
	ldr	x8, [x22, :lo12:env]
	mov	x9, sp
	sub	x23, x9, #16                    // =16
	mov	sp, x23
	lsr	x10, x19, #32
	lsr	x11, x8, #32
	stp	w19, w10, [x9, #-16]
	stp	w8, w11, [x9, #-8]
	mov	x20, x19
	str	x23, [x22, :lo12:env]
	b	.LBB217_7
.LBB217_5:                              // %"$15"
                                        //   in Loop: Header=BB217_7 Depth=1
	mov	x9, x23
	mov	x8, x0
	mov	x20, x0
.LBB217_6:                              // %"$17"
                                        //   in Loop: Header=BB217_7 Depth=1
	lsr	x10, x0, #32
	stp	w0, w10, [x9]
	mov	x19, x8
.LBB217_7:                              // %"$7"
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB217_12 Depth 2
	ldp	w21, w8, [x21, #8]
	bfi	x21, x8, #32, #32
	tst	x21, #0xf
	b.ne	.LBB217_15
// %bb.8:                               // %"$8"
                                        //   in Loop: Header=BB217_7 Depth=1
	ldp	w0, w8, [x21]
	bfi	x0, x8, #32, #32
	tst	x0, #0x6
	b.ne	.LBB217_11
// %bb.9:                               // %"$11"
                                        //   in Loop: Header=BB217_7 Depth=1
	tbz	w0, #3, .LBB217_14
// %bb.10:                              // %"$14"
                                        //   in Loop: Header=BB217_7 Depth=1
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
.LBB217_11:                             // %"$10"
                                        //   in Loop: Header=BB217_7 Depth=1
	tst	x19, #0xf
	b.ne	.LBB217_5
.LBB217_12:                             // %"$18"
                                        //   Parent Loop BB217_7 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	mov	x8, x19
	ldp	w19, w9, [x19, #8]
	bfi	x19, x9, #32, #32
	tst	x19, #0xf
	b.eq	.LBB217_12
// %bb.13:                              // %"$20"
                                        //   in Loop: Header=BB217_7 Depth=1
	add	x9, x8, #8                      // =8
	b	.LBB217_6
.LBB217_14:                             // %"$13"
                                        //   in Loop: Header=BB217_7 Depth=1
	bl	evList
	tst	x19, #0xf
	b.ne	.LBB217_5
	b	.LBB217_12
.LBB217_15:                             // %"$9"
	ldp	w9, w8, [x23, #8]
	bfi	x9, x8, #32, #32
	str	x9, [x22, :lo12:env]
	mov	x0, x20
	mov	sp, x29
	ldp	x20, x19, [sp, #48]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #32]             // 16-byte Folded Reload
	ldr	x23, [sp, #16]                  // 8-byte Folded Reload
	ldp	x29, x30, [sp], #64             // 16-byte Folded Reload
	ret
.Lfunc_end217:
	.size	_conc, .Lfunc_end217-_conc
	.cfi_endproc
                                        // -- End function
	.globl	_circ                           // -- Begin function _circ
	.p2align	4
	.type	_circ,@function
_circ:                                  // @_circ
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-80]!           // 16-byte Folded Spill
	str	x25, [sp, #16]                  // 8-byte Folded Spill
	stp	x24, x23, [sp, #32]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #48]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #64]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 80
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -64
	.cfi_offset w30, -72
	.cfi_offset w29, -80
	ldp	w21, w8, [x0, #8]
	bfi	x21, x8, #32, #32
	ldp	w0, w8, [x21]
	bfi	x0, x8, #32, #32
	tst	x0, #0x6
	b.ne	.LBB218_4
// %bb.1:                               // %"$3"
	tbz	w0, #3, .LBB218_3
// %bb.2:                               // %"$6"
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB218_4
.LBB218_3:                              // %"$5"
	bl	evList
.LBB218_4:                              // %"$2"
	adrp	x20, SymTab+8
	add	x20, x20, :lo12:SymTab+8
	mov	x1, x20
	bl	cons
	mov	x19, x0
	adrp	x22, env
	ldr	x8, [x22, :lo12:env]
	mov	x9, sp
	sub	x23, x9, #16                    // =16
	mov	sp, x23
	lsr	x24, x0, #32
	lsr	x10, x8, #32
	stp	w19, w24, [x9, #-16]
	stp	w8, w10, [x9, #-8]
	mov	x25, x0
	str	x23, [x22, :lo12:env]
	b	.LBB218_7
.LBB218_5:                              // %"$13"
                                        //   in Loop: Header=BB218_7 Depth=1
	bl	evList
.LBB218_6:                              // %"$10"
                                        //   in Loop: Header=BB218_7 Depth=1
	mov	x1, x20
	bl	cons
	lsr	x8, x0, #32
	stp	w0, w8, [x25, #8]
	mov	x25, x0
.LBB218_7:                              // %"$7"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w21, w8, [x21, #8]
	bfi	x21, x8, #32, #32
	tst	x21, #0xf
	b.ne	.LBB218_11
// %bb.8:                               // %"$8"
                                        //   in Loop: Header=BB218_7 Depth=1
	ldp	w0, w8, [x21]
	bfi	x0, x8, #32, #32
	tst	x0, #0x6
	b.ne	.LBB218_6
// %bb.9:                               // %"$11"
                                        //   in Loop: Header=BB218_7 Depth=1
	tbz	w0, #3, .LBB218_5
// %bb.10:                              // %"$14"
                                        //   in Loop: Header=BB218_7 Depth=1
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB218_6
.LBB218_11:                             // %"$9"
	stp	w19, w24, [x25, #8]
	ldp	w9, w8, [x23, #8]
	bfi	x9, x8, #32, #32
	str	x9, [x22, :lo12:env]
	mov	x0, x19
	mov	sp, x29
	ldp	x20, x19, [sp, #64]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #48]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #32]             // 16-byte Folded Reload
	ldr	x25, [sp, #16]                  // 8-byte Folded Reload
	ldp	x29, x30, [sp], #80             // 16-byte Folded Reload
	ret
.Lfunc_end218:
	.size	_circ, .Lfunc_end218-_circ
	.cfi_endproc
                                        // -- End function
	.globl	_rot                            // -- Begin function _rot
	.p2align	4
	.type	_rot,@function
_rot:                                   // @_rot
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-64]!           // 16-byte Folded Spill
	stp	x24, x23, [sp, #16]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #32]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #48]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 64
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w30, -56
	.cfi_offset w29, -64
	mov	x20, x0
	ldp	w23, w8, [x0, #8]
	bfi	x23, x8, #32, #32
	ldp	w19, w8, [x23]
	bfi	x19, x8, #32, #32
	tst	x19, #0x6
	b.eq	.LBB219_5
// %bb.1:                               // %"$2"
	tst	x19, #0xf
	b.ne	.LBB219_13
.LBB219_2:                              // %"$7"
	ldp	w22, w8, [x19]
	bfi	x22, x8, #32, #32
	ldp	w21, w8, [x19, #8]
	bfi	x21, x8, #32, #32
	ldp	w1, w8, [x23, #8]
	bfi	x1, x8, #32, #32
	tst	x1, #0xf
	b.eq	.LBB219_8
.LBB219_3:                              // %"$18"
                                        // =>This Inner Loop Header: Depth=1
	tst	x21, #0xf
	b.ne	.LBB219_11
// %bb.4:                               // %"$19"
                                        //   in Loop: Header=BB219_3 Depth=1
	ldp	w8, w9, [x21]
	bfi	x8, x9, #32, #32
	lsr	x9, x22, #32
	stp	w22, w9, [x21]
	ldp	w21, w9, [x21, #8]
	bfi	x21, x9, #32, #32
	cmp	x19, x21
	mov	x22, x8
	b.ne	.LBB219_3
	b	.LBB219_12
.LBB219_5:                              // %"$3"
	tbz	w19, #3, .LBB219_7
// %bb.6:                               // %"$6"
	ldp	w19, w8, [x19]
	bfi	x19, x8, #32, #32
	tst	x19, #0xf
	b.ne	.LBB219_13
	b	.LBB219_2
.LBB219_7:                              // %"$5"
	mov	x0, x19
	bl	evList
	mov	x19, x0
	tst	x19, #0xf
	b.ne	.LBB219_13
	b	.LBB219_2
.LBB219_8:                              // %"$9"
	adrp	x23, env
	ldr	x8, [x23, :lo12:env]
	mov	x9, sp
	sub	x10, x9, #16                    // =16
	mov	sp, x10
	lsr	x11, x19, #32
	mov	x24, x10
	stp	w19, w11, [x9, #-16]
	str	w8, [x24, #8]!
	lsr	x8, x8, #32
	str	w8, [x24, #4]
	str	x10, [x23, :lo12:env]
	mov	x0, x20
	bl	evCnt
	ldp	w9, w8, [x24]
	bfi	x9, x8, #32, #32
	str	x9, [x23, :lo12:env]
.LBB219_9:                              // %"$12"
                                        // =>This Inner Loop Header: Depth=1
	sub	x8, x0, #1                      // =1
	cmp	x8, #0                          // =0
	cset	w9, gt
	tst	x21, #0xf
	csel	x0, x0, x8, ne
	csel	w8, wzr, w9, ne
	cbz	w8, .LBB219_11
// %bb.10:                              // %"$15"
                                        //   in Loop: Header=BB219_9 Depth=1
	ldp	w8, w9, [x21]
	bfi	x8, x9, #32, #32
	lsr	x9, x22, #32
	stp	w22, w9, [x21]
	ldp	w21, w9, [x21, #8]
	bfi	x21, x9, #32, #32
	cmp	x19, x21
	mov	x22, x8
	b.ne	.LBB219_9
	b	.LBB219_12
.LBB219_11:
	mov	x8, x22
.LBB219_12:                             // %"$11"
	lsr	x9, x8, #32
	stp	w8, w9, [x19]
.LBB219_13:                             // %"$8"
	mov	x0, x19
	mov	sp, x29
	ldp	x20, x19, [sp, #48]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #32]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #64             // 16-byte Folded Reload
	ret
.Lfunc_end219:
	.size	_rot, .Lfunc_end219-_rot
	.cfi_endproc
                                        // -- End function
	.globl	_list                           // -- Begin function _list
	.p2align	4
	.type	_list,@function
_list:                                  // @_list
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-64]!           // 16-byte Folded Spill
	stp	x24, x23, [sp, #16]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #32]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #48]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 64
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w30, -56
	.cfi_offset w29, -64
	ldp	w21, w8, [x0, #8]
	bfi	x21, x8, #32, #32
	ldp	w0, w8, [x21]
	bfi	x0, x8, #32, #32
	tst	x0, #0x6
	b.ne	.LBB220_4
// %bb.1:                               // %"$3"
	tbz	w0, #3, .LBB220_3
// %bb.2:                               // %"$6"
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB220_4
.LBB220_3:                              // %"$5"
	bl	evList
.LBB220_4:                              // %"$2"
	adrp	x20, SymTab+8
	add	x20, x20, :lo12:SymTab+8
	mov	x1, x20
	bl	cons
	mov	x19, x0
	adrp	x22, env
	ldr	x8, [x22, :lo12:env]
	mov	x9, sp
	sub	x23, x9, #16                    // =16
	mov	sp, x23
	lsr	x10, x0, #32
	lsr	x11, x8, #32
	stp	w19, w10, [x9, #-16]
	stp	w8, w11, [x9, #-8]
	mov	x24, x0
	str	x23, [x22, :lo12:env]
	b	.LBB220_7
.LBB220_5:                              // %"$13"
                                        //   in Loop: Header=BB220_7 Depth=1
	bl	evList
.LBB220_6:                              // %"$10"
                                        //   in Loop: Header=BB220_7 Depth=1
	mov	x1, x20
	bl	cons
	lsr	x8, x0, #32
	stp	w0, w8, [x24, #8]
	mov	x24, x0
.LBB220_7:                              // %"$7"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w21, w8, [x21, #8]
	bfi	x21, x8, #32, #32
	tst	x21, #0xf
	b.ne	.LBB220_11
// %bb.8:                               // %"$8"
                                        //   in Loop: Header=BB220_7 Depth=1
	ldp	w0, w8, [x21]
	bfi	x0, x8, #32, #32
	tst	x0, #0x6
	b.ne	.LBB220_6
// %bb.9:                               // %"$11"
                                        //   in Loop: Header=BB220_7 Depth=1
	tbz	w0, #3, .LBB220_5
// %bb.10:                              // %"$14"
                                        //   in Loop: Header=BB220_7 Depth=1
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB220_6
.LBB220_11:                             // %"$9"
	ldp	w9, w8, [x23, #8]
	bfi	x9, x8, #32, #32
	str	x9, [x22, :lo12:env]
	mov	x0, x19
	mov	sp, x29
	ldp	x20, x19, [sp, #48]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #32]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #64             // 16-byte Folded Reload
	ret
.Lfunc_end220:
	.size	_list, .Lfunc_end220-_list
	.cfi_endproc
                                        // -- End function
	.globl	_need                           // -- Begin function _need
	.p2align	4
	.type	_need,@function
_need:                                  // @_need
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-80]!           // 16-byte Folded Spill
	str	x25, [sp, #16]                  // 8-byte Folded Spill
	stp	x24, x23, [sp, #32]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #48]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #64]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 80
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -64
	.cfi_offset w30, -72
	.cfi_offset w29, -80
	ldp	w19, w8, [x0, #8]
	bfi	x19, x8, #32, #32
	mov	x1, x19
	bl	evCnt
	mov	x20, x0
	ldp	w21, w8, [x19, #8]
	bfi	x21, x8, #32, #32
	ldp	w19, w8, [x21]
	bfi	x19, x8, #32, #32
	tst	x19, #0x6
	b.ne	.LBB221_4
// %bb.1:                               // %"$3"
	tbz	w19, #3, .LBB221_3
// %bb.2:                               // %"$6"
	ldp	w19, w8, [x19]
	bfi	x19, x8, #32, #32
	b	.LBB221_4
.LBB221_3:                              // %"$5"
	mov	x0, x19
	bl	evList
	mov	x19, x0
.LBB221_4:                              // %"$2"
	adrp	x22, env
	ldr	x8, [x22, :lo12:env]
	mov	x9, sp
	sub	x23, x9, #16                    // =16
	mov	sp, x23
	lsr	x10, x19, #32
	stp	w19, w10, [x9, #-16]
	adrp	x10, SymTab+8
	add	x10, x10, :lo12:SymTab+8
	lsr	x11, x8, #32
	stp	w8, w11, [x9, #-8]
	cmp	x19, x10
	cset	w8, eq
	str	x23, [x22, :lo12:env]
	tst	x19, #0xf
	mov	w9, #1
	csel	w8, w9, w8, eq
	cbz	w8, .LBB221_8
// %bb.5:                               // %"$9"
	ldp	w9, w8, [x21, #8]
	bfi	x9, x8, #32, #32
	ldp	w0, w8, [x9]
	bfi	x0, x8, #32, #32
	tst	x0, #0x6
	b.ne	.LBB221_10
// %bb.6:                               // %"$13"
	tbz	w0, #3, .LBB221_9
// %bb.7:                               // %"$16"
	mov	x21, x19
	ldp	w19, w8, [x0]
	bfi	x19, x8, #32, #32
	b	.LBB221_11
.LBB221_8:
	adrp	x21, SymTab+8
	add	x21, x21, :lo12:SymTab+8
	b	.LBB221_11
.LBB221_9:                              // %"$15"
	bl	evList
.LBB221_10:                             // %"$11"
	mov	x21, x19
	mov	x19, x0
.LBB221_11:                             // %"$11"
	ldr	x8, [x22, :lo12:env]
	mov	x9, sp
	sub	x10, x9, #16                    // =16
	mov	sp, x10
	lsr	x11, x19, #32
	lsr	x12, x8, #32
	stp	w19, w11, [x9, #-16]
	stp	w8, w12, [x9, #-8]
	str	x10, [x22, :lo12:env]
	cbz	x20, .LBB221_17
// %bb.12:                              // %"$17"
	subs	x24, x20, #1                    // =1
	b.lt	.LBB221_18
// %bb.13:                              // %"$22.preheader"
	mov	x8, x21
	tst	x8, #0xf
	b.ne	.LBB221_16
.LBB221_14:                             // %"$23"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w8, w9, [x8, #8]
	bfi	x8, x9, #32, #32
	sub	x24, x24, #1                    // =1
	tst	x8, #0xf
	b.eq	.LBB221_14
	b	.LBB221_16
.LBB221_15:                             // %"$26"
                                        //   in Loop: Header=BB221_16 Depth=1
	mov	x0, x19
	mov	x1, x21
	bl	cons
	mov	x21, x0
	lsr	x8, x0, #32
	stp	w21, w8, [x23]
	sub	x24, x24, #1                    // =1
.LBB221_16:                             // %"$25"
                                        // =>This Inner Loop Header: Depth=1
	tbz	x24, #63, .LBB221_15
.LBB221_17:                             // %"$18"
	ldp	w9, w8, [x23, #8]
	bfi	x9, x8, #32, #32
	str	x9, [x22, :lo12:env]
	mov	x0, x21
	mov	sp, x29
	ldp	x20, x19, [sp, #64]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #48]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #32]             // 16-byte Folded Reload
	ldr	x25, [sp, #16]                  // 8-byte Folded Reload
	ldp	x29, x30, [sp], #80             // 16-byte Folded Reload
	ret
.LBB221_18:                             // %"$20"
	tst	x21, #0xf
	b.eq	.LBB221_22
// %bb.19:                              // %"$28"
	adrp	x1, SymTab+8
	add	x1, x1, :lo12:SymTab+8
	mov	x0, x19
	bl	cons
	mov	x21, x0
	lsr	x8, x0, #32
	stp	w21, w8, [x23]
	mov	x24, x0
.LBB221_20:                             // %"$34.preheader"
	add	x25, x20, #1                    // =1
	adrp	x20, SymTab+8
	add	x20, x20, :lo12:SymTab+8
	tbz	x25, #63, .LBB221_17
.LBB221_21:                             // %"$35"
                                        // =>This Inner Loop Header: Depth=1
	mov	x0, x19
	mov	x1, x20
	bl	cons
	lsr	x8, x0, #32
	stp	w0, w8, [x24, #8]
	add	x25, x25, #1                    // =1
	mov	x24, x0
	tbnz	x25, #63, .LBB221_21
	b	.LBB221_17
.LBB221_22:
	mov	x24, x21
.LBB221_23:                             // %"$31"
                                        // =>This Inner Loop Header: Depth=1
	ldrb	w8, [x24, #8]
	tst	w8, #0xf
	b.ne	.LBB221_20
// %bb.24:                              // %"$32"
                                        //   in Loop: Header=BB221_23 Depth=1
	ldp	w24, w8, [x24, #8]
	bfi	x24, x8, #32, #32
	add	x20, x20, #1                    // =1
	b	.LBB221_23
.Lfunc_end221:
	.size	_need, .Lfunc_end221-_need
	.cfi_endproc
                                        // -- End function
	.globl	_range                          // -- Begin function _range
	.p2align	4
	.type	_range,@function
_range:                                 // @_range
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-96]!           // 16-byte Folded Spill
	str	x27, [sp, #16]                  // 8-byte Folded Spill
	stp	x26, x25, [sp, #32]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #48]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #64]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #80]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	mov	x21, x0
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w19, w8, [x9]
	bfi	x19, x8, #32, #32
	ldp	w23, w20, [x9, #8]
	tst	x19, #0x6
	b.ne	.LBB222_4
// %bb.1:                               // %"$3"
	tbz	w19, #3, .LBB222_3
// %bb.2:                               // %"$6"
	ldp	w19, w8, [x19]
	bfi	x19, x8, #32, #32
	b	.LBB222_4
.LBB222_3:                              // %"$5"
	mov	x0, x19
	bl	evList
	mov	x19, x0
.LBB222_4:                              // %"$2"
	tst	x19, #0x6
	b.eq	.LBB222_27
// %bb.5:                               // %"$8"
	bfi	x23, x20, #32, #32
	adrp	x24, SymTab+8
	add	x24, x24, :lo12:SymTab+8
	mov	x0, x19
	mov	x1, x24
	bl	cons
	mov	x20, x0
	adrp	x25, env
	ldr	x8, [x25, :lo12:env]
	mov	x9, sp
	sub	x26, x9, #16                    // =16
	mov	sp, x26
	lsr	x10, x0, #32
	stp	w20, w10, [x9, #-16]
	lsr	x10, x8, #32
	stp	w8, w10, [x9, #-8]
	str	x26, [x25, :lo12:env]
	ldp	w22, w8, [x23]
	bfi	x22, x8, #32, #32
	ldp	w23, w27, [x23, #8]
	tst	x22, #0x6
	b.ne	.LBB222_9
// %bb.6:                               // %"$10"
	tbz	w22, #3, .LBB222_8
// %bb.7:                               // %"$13"
	ldp	w22, w8, [x22]
	bfi	x22, x8, #32, #32
	b	.LBB222_9
.LBB222_8:                              // %"$12"
	mov	x0, x22
	bl	evList
	mov	x22, x0
.LBB222_9:                              // %"$9"
	tst	x22, #0x6
	b.eq	.LBB222_28
// %bb.10:                              // %"$15"
	bfi	x23, x27, #32, #32
	ldr	x8, [x25, :lo12:env]
	mov	x9, sp
	sub	x10, x9, #16                    // =16
	mov	sp, x10
	lsr	x11, x22, #32
	stp	w22, w11, [x9, #-16]
	lsr	x11, x8, #32
	stp	w8, w11, [x9, #-8]
	str	x10, [x25, :lo12:env]
	ldp	w23, w8, [x23]
	bfi	x23, x8, #32, #32
	tst	x23, #0x6
	b.ne	.LBB222_13
// %bb.11:                              // %"$17"
	tbz	w23, #3, .LBB222_16
// %bb.12:                              // %"$20"
	ldp	w23, w8, [x23]
	bfi	x23, x8, #32, #32
.LBB222_13:                             // %"$16"
	cmp	x23, x24
	b.ne	.LBB222_17
.LBB222_14:
	mov	w23, #18
	cmp	x23, #2                         // =2
	b.ne	.LBB222_19
.LBB222_15:
	mov	w8, #1
	b	.LBB222_20
.LBB222_16:                             // %"$19"
	mov	x0, x23
	bl	evList
	mov	x23, x0
	cmp	x23, x24
	b.eq	.LBB222_14
.LBB222_17:                             // %"$22"
	tst	x23, #0x6
	b.eq	.LBB222_30
// %bb.18:                              // %"$25"
	ldr	x8, [x25, :lo12:env]
	mov	x9, sp
	sub	x10, x9, #16                    // =16
	mov	sp, x10
	lsr	x11, x23, #32
	lsr	x12, x8, #32
	stp	w23, w11, [x9, #-16]
	stp	w8, w12, [x9, #-8]
	str	x10, [x25, :lo12:env]
	cmp	x23, #2                         // =2
	b.eq	.LBB222_15
.LBB222_19:                             // %"$27"
	ubfx	x8, x23, #3, #1
.LBB222_20:                             // %"$26"
	cbnz	w8, .LBB222_29
// %bb.21:                              // %"$29"
	mov	x0, x19
	mov	x1, x22
	bl	cmpNum
	mov	x24, x20
	adrp	x21, SymTab+8
	add	x21, x21, :lo12:SymTab+8
	cmp	x0, #1                          // =1
	b.ge	.LBB222_24
.LBB222_22:                             // %"$33"
                                        // =>This Inner Loop Header: Depth=1
	mov	x0, x19
	mov	x1, x23
	bl	adds
	mov	x19, x0
	mov	x1, x22
	bl	cmpNum
	cmp	x0, #0                          // =0
	b.gt	.LBB222_26
// %bb.23:                              // %"$34"
                                        //   in Loop: Header=BB222_22 Depth=1
	mov	x0, x19
	mov	x1, x21
	bl	cons
	lsr	x8, x0, #32
	stp	w0, w8, [x24, #8]
	mov	x24, x0
	b	.LBB222_22
.LBB222_24:                             // %"$36"
                                        // =>This Inner Loop Header: Depth=1
	mov	x0, x19
	mov	x1, x23
	bl	subs
	mov	x19, x0
	mov	x1, x22
	bl	cmpNum
	tbnz	x0, #63, .LBB222_26
// %bb.25:                              // %"$37"
                                        //   in Loop: Header=BB222_24 Depth=1
	mov	x0, x19
	mov	x1, x21
	bl	cons
	lsr	x8, x0, #32
	stp	w0, w8, [x24, #8]
	mov	x24, x0
	b	.LBB222_24
.LBB222_26:                             // %"$32"
	ldp	w9, w8, [x26, #8]
	bfi	x9, x8, #32, #32
	str	x9, [x25, :lo12:env]
	mov	x0, x20
	mov	sp, x29
	ldp	x20, x19, [sp, #80]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #64]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #48]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #32]             // 16-byte Folded Reload
	ldr	x27, [sp, #16]                  // 8-byte Folded Reload
	ldp	x29, x30, [sp], #96             // 16-byte Folded Reload
	ret
.LBB222_27:                             // %"$7"
	mov	x0, x21
	mov	x1, x19
	bl	numErr
.LBB222_28:                             // %"$14"
	mov	x0, x21
	mov	x1, x22
	bl	numErr
.LBB222_29:                             // %"$28"
	mov	x0, x21
	mov	x1, x23
	bl	argErr
.LBB222_30:                             // %"$24"
	mov	x0, x21
	mov	x1, x23
	bl	numErr
.Lfunc_end222:
	.size	_range, .Lfunc_end222-_range
	.cfi_endproc
                                        // -- End function
	.globl	_full                           // -- Begin function _full
	.p2align	4
	.type	_full,@function
_full:                                  // @_full
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w0, w8, [x9]
	bfi	x0, x8, #32, #32
	tst	x0, #0x6
	b.ne	.LBB223_4
// %bb.1:                               // %"$3"
	tbz	w0, #3, .LBB223_3
// %bb.2:                               // %"$6"
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB223_4
.LBB223_3:                              // %"$5"
	bl	evList
.LBB223_4:                              // %"$7.preheader"
	adrp	x8, SymTab+216
	add	x8, x8, :lo12:SymTab+216
	adrp	x9, SymTab+8
	add	x9, x9, :lo12:SymTab+8
	tst	x0, #0xf
	b.ne	.LBB223_8
.LBB223_5:                              // %"$8"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w11, w10, [x0]
	bfi	x11, x10, #32, #32
	cmp	x11, x9
	b.eq	.LBB223_7
// %bb.6:                               // %"$11"
                                        //   in Loop: Header=BB223_5 Depth=1
	ldp	w0, w10, [x0, #8]
	bfi	x0, x10, #32, #32
	tst	x0, #0xf
	b.eq	.LBB223_5
	b	.LBB223_8
.LBB223_7:
	mov	x8, x9
.LBB223_8:                              // %"$9"
	mov	x0, x8
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end223:
	.size	_full, .Lfunc_end223-_full
	.cfi_endproc
                                        // -- End function
	.globl	_make                           // -- Begin function _make
	.p2align	4
	.type	_make,@function
_make:                                  // @_make
	.cfi_startproc
// %bb.0:                               // %"$1"
	sub	sp, sp, #64                     // =64
	stp	x22, x21, [sp, #32]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #48]             // 16-byte Folded Spill
	.cfi_def_cfa_offset 64
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w30, -48
	adrp	x19, env
	add	x19, x19, :lo12:env
	ldp	x20, x21, [x19, #120]
	adrp	x8, SymTab+8
	add	x8, x8, :lo12:SymTab+8
	ldr	x9, [x19]
	str	x8, [sp]
	stp	x9, x30, [sp, #8]               // 8-byte Folded Spill
	mov	x8, sp
	str	x8, [x19]
	stp	x8, x8, [x19, #120]
	ldp	w22, w8, [x0, #8]
	bfi	x22, x8, #32, #32
	b	.LBB224_2
.LBB224_1:                              // %"$4"
                                        //   in Loop: Header=BB224_2 Depth=1
	tst	x22, #0xf
	b.ne	.LBB224_4
.LBB224_2:                              // %"$2"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w0, w8, [x22]
	bfi	x0, x8, #32, #32
	ldp	w22, w8, [x22, #8]
	bfi	x22, x8, #32, #32
	tst	x0, #0xf
	b.ne	.LBB224_1
// %bb.3:                               // %"$3"
                                        //   in Loop: Header=BB224_2 Depth=1
	bl	evList
	b	.LBB224_1
.LBB224_4:                              // %"$6"
	stp	x20, x21, [x19, #120]
	ldp	x0, x8, [sp]
	str	x8, [x19]
	ldp	x20, x19, [sp, #48]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #32]             // 16-byte Folded Reload
	ldr	x30, [sp, #16]                  // 8-byte Folded Reload
	add	sp, sp, #64                     // =64
	ret
.Lfunc_end224:
	.size	_make, .Lfunc_end224-_make
	.cfi_endproc
                                        // -- End function
	.globl	_made                           // -- Begin function _made
	.p2align	4
	.type	_made,@function
_made:                                  // @_made
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-48]!                // 8-byte Folded Spill
	stp	x22, x21, [sp, #16]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #32]             // 16-byte Folded Spill
	.cfi_def_cfa_offset 48
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w30, -48
	adrp	x19, env+120
	ldr	x8, [x19, :lo12:env+120]
	cbz	x8, .LBB225_15
// %bb.1:                               // %"$3"
	ldp	w8, w9, [x0, #8]
	bfi	x8, x9, #32, #32
	tst	x8, #0xf
	adrp	x20, env+128
	b.ne	.LBB225_13
// %bb.2:                               // %"$4"
	ldr	x21, [x20, :lo12:env+128]
	ldp	w0, w9, [x8]
	bfi	x0, x9, #32, #32
	ldp	w22, w9, [x8, #8]
	bfi	x22, x9, #32, #32
	tst	x0, #0x6
	b.ne	.LBB225_6
// %bb.3:                               // %"$7"
	tbz	w0, #3, .LBB225_5
// %bb.4:                               // %"$10"
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB225_6
.LBB225_5:                              // %"$9"
	bl	evList
.LBB225_6:                              // %"$6"
	lsr	x8, x0, #32
	stp	w0, w8, [x21]
	ldp	w0, w8, [x22]
	bfi	x0, x8, #32, #32
	tst	x0, #0x6
	b.ne	.LBB225_9
// %bb.7:                               // %"$12"
	tbz	w0, #3, .LBB225_14
// %bb.8:                               // %"$15"
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
.LBB225_9:                              // %"$11"
	tst	x0, #0xf
	b.eq	.LBB225_12
.LBB225_10:                             // %"$16"
	ldr	x8, [x20, :lo12:env+128]
	ldp	w8, w9, [x8]
	bfi	x8, x9, #32, #32
.LBB225_11:                             // %"$18"
                                        // =>This Inner Loop Header: Depth=1
	mov	x0, x8
	ldp	w8, w9, [x8, #8]
	bfi	x8, x9, #32, #32
	tst	x8, #0xf
	b.eq	.LBB225_11
.LBB225_12:                             // %"$17"
	add	x8, x0, #8                      // =8
	str	x8, [x19, :lo12:env+120]
.LBB225_13:                             // %"$5"
	ldr	x8, [x20, :lo12:env+128]
	ldp	w0, w9, [x8]
	bfi	x0, x9, #32, #32
	ldp	x20, x19, [sp, #32]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #16]             // 16-byte Folded Reload
	ldr	x30, [sp], #48                  // 8-byte Folded Reload
	ret
.LBB225_14:                             // %"$14"
	bl	evList
	tst	x0, #0xf
	b.ne	.LBB225_10
	b	.LBB225_12
.LBB225_15:                             // %"$2"
	bl	makeErr
.Lfunc_end225:
	.size	_made, .Lfunc_end225-_made
	.cfi_endproc
                                        // -- End function
	.globl	_chain                          // -- Begin function _chain
	.p2align	4
	.type	_chain,@function
_chain:                                 // @_chain
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-48]!                // 8-byte Folded Spill
	stp	x22, x21, [sp, #16]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #32]             // 16-byte Folded Spill
	.cfi_def_cfa_offset 48
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w30, -48
	adrp	x19, env+120
	ldr	x8, [x19, :lo12:env+120]
	cbz	x8, .LBB226_12
// %bb.1:
	ldp	w20, w8, [x0, #8]
	bfi	x20, x8, #32, #32
	b	.LBB226_3
.LBB226_2:                              // %"$11"
                                        //   in Loop: Header=BB226_3 Depth=1
	tst	x20, #0xf
	b.ne	.LBB226_11
.LBB226_3:                              // %"$4"
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB226_9 Depth 2
	ldr	x21, [x19, :lo12:env+120]
	ldp	w0, w8, [x20]
	bfi	x0, x8, #32, #32
	ldp	w20, w22, [x20, #8]
	tst	x0, #0x6
	b.ne	.LBB226_7
// %bb.4:                               // %"$6"
                                        //   in Loop: Header=BB226_3 Depth=1
	tbz	w0, #3, .LBB226_6
// %bb.5:                               // %"$9"
                                        //   in Loop: Header=BB226_3 Depth=1
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB226_7
.LBB226_6:                              // %"$8"
                                        //   in Loop: Header=BB226_3 Depth=1
	bl	evList
.LBB226_7:                              // %"$5"
                                        //   in Loop: Header=BB226_3 Depth=1
	bfi	x20, x22, #32, #32
	lsr	x8, x0, #32
	stp	w0, w8, [x21]
	tst	x0, #0xf
	b.ne	.LBB226_2
// %bb.8:                               // %"$12.preheader"
                                        //   in Loop: Header=BB226_3 Depth=1
	mov	x9, x0
.LBB226_9:                              // %"$12"
                                        //   Parent Loop BB226_3 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	mov	x8, x9
	ldp	w9, w10, [x9, #8]
	bfi	x9, x10, #32, #32
	tst	x9, #0xf
	b.eq	.LBB226_9
// %bb.10:                              // %"$14"
                                        //   in Loop: Header=BB226_3 Depth=1
	add	x8, x8, #8                      // =8
	str	x8, [x19, :lo12:env+120]
	b	.LBB226_2
.LBB226_11:                             // %"$16"
	ldp	x20, x19, [sp, #32]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #16]             // 16-byte Folded Reload
	ldr	x30, [sp], #48                  // 8-byte Folded Reload
	ret
.LBB226_12:                             // %"$2"
	bl	makeErr
.Lfunc_end226:
	.size	_chain, .Lfunc_end226-_chain
	.cfi_endproc
                                        // -- End function
	.globl	_link                           // -- Begin function _link
	.p2align	4
	.type	_link,@function
_link:                                  // @_link
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x30, x23, [sp, #-48]!           // 16-byte Folded Spill
	stp	x22, x21, [sp, #16]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #32]             // 16-byte Folded Spill
	.cfi_def_cfa_offset 48
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w30, -48
	adrp	x21, env+120
	ldr	x8, [x21, :lo12:env+120]
	cbz	x8, .LBB227_8
// %bb.1:
	ldp	w22, w8, [x0, #8]
	bfi	x22, x8, #32, #32
	adrp	x19, SymTab+8
	add	x19, x19, :lo12:SymTab+8
	b	.LBB227_4
.LBB227_2:                              // %"$8"
                                        //   in Loop: Header=BB227_4 Depth=1
	mov	x0, x20
	bl	evList
	mov	x20, x0
.LBB227_3:                              // %"$5"
                                        //   in Loop: Header=BB227_4 Depth=1
	ldr	x23, [x21, :lo12:env+120]
	mov	x0, x20
	mov	x1, x19
	bl	cons
	lsr	x8, x0, #32
	stp	w0, w8, [x23]
	add	x8, x0, #8                      // =8
	str	x8, [x21, :lo12:env+120]
	tst	x22, #0xf
	b.ne	.LBB227_7
.LBB227_4:                              // %"$4"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w20, w8, [x22]
	bfi	x20, x8, #32, #32
	ldp	w22, w8, [x22, #8]
	bfi	x22, x8, #32, #32
	tst	x20, #0x6
	b.ne	.LBB227_3
// %bb.5:                               // %"$6"
                                        //   in Loop: Header=BB227_4 Depth=1
	tbz	w20, #3, .LBB227_2
// %bb.6:                               // %"$9"
                                        //   in Loop: Header=BB227_4 Depth=1
	ldp	w20, w8, [x20]
	bfi	x20, x8, #32, #32
	b	.LBB227_3
.LBB227_7:                              // %"$11"
	mov	x0, x20
	ldp	x20, x19, [sp, #32]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #16]             // 16-byte Folded Reload
	ldp	x30, x23, [sp], #48             // 16-byte Folded Reload
	ret
.LBB227_8:                              // %"$2"
	bl	makeErr
.Lfunc_end227:
	.size	_link, .Lfunc_end227-_link
	.cfi_endproc
                                        // -- End function
	.globl	_yoke                           // -- Begin function _yoke
	.p2align	4
	.type	_yoke,@function
_yoke:                                  // @_yoke
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x30, x23, [sp, #-48]!           // 16-byte Folded Spill
	stp	x22, x21, [sp, #16]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #32]             // 16-byte Folded Spill
	.cfi_def_cfa_offset 48
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w30, -48
	adrp	x20, env+120
	ldr	x8, [x20, :lo12:env+120]
	cbz	x8, .LBB228_11
// %bb.1:
	ldp	w21, w8, [x0, #8]
	bfi	x21, x8, #32, #32
	adrp	x22, env+128
	b	.LBB228_4
.LBB228_2:                              // %"$8"
                                        //   in Loop: Header=BB228_4 Depth=1
	mov	x0, x19
	bl	evList
	mov	x19, x0
.LBB228_3:                              // %"$5"
                                        //   in Loop: Header=BB228_4 Depth=1
	ldr	x23, [x22, :lo12:env+128]
	ldp	w1, w8, [x23]
	bfi	x1, x8, #32, #32
	mov	x0, x19
	bl	cons
	lsr	x8, x0, #32
	stp	w0, w8, [x23]
	tst	x21, #0xf
	b.ne	.LBB228_7
.LBB228_4:                              // %"$4"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w19, w8, [x21]
	bfi	x19, x8, #32, #32
	ldp	w21, w8, [x21, #8]
	bfi	x21, x8, #32, #32
	tst	x19, #0x6
	b.ne	.LBB228_3
// %bb.5:                               // %"$6"
                                        //   in Loop: Header=BB228_4 Depth=1
	tbz	w19, #3, .LBB228_2
// %bb.6:                               // %"$9"
                                        //   in Loop: Header=BB228_4 Depth=1
	ldp	w19, w8, [x19]
	bfi	x19, x8, #32, #32
	b	.LBB228_3
.LBB228_7:                              // %"$12"
	ldr	x8, [x20, :lo12:env+120]
.LBB228_8:                              // %"$13"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w9, w10, [x8]
	bfi	x9, x10, #32, #32
	tst	x9, #0xf
	b.ne	.LBB228_10
// %bb.9:                               // %"$14"
                                        //   in Loop: Header=BB228_8 Depth=1
	add	x8, x9, #8                      // =8
	b	.LBB228_8
.LBB228_10:                             // %"$15"
	str	x8, [x20, :lo12:env+120]
	mov	x0, x19
	ldp	x20, x19, [sp, #32]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #16]             // 16-byte Folded Reload
	ldp	x30, x23, [sp], #48             // 16-byte Folded Reload
	ret
.LBB228_11:                             // %"$2"
	bl	makeErr
.Lfunc_end228:
	.size	_yoke, .Lfunc_end228-_yoke
	.cfi_endproc
                                        // -- End function
	.globl	_copy                           // -- Begin function _copy
	.p2align	4
	.type	_copy,@function
_copy:                                  // @_copy
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-64]!           // 16-byte Folded Spill
	stp	x24, x23, [sp, #16]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #32]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #48]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 64
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w30, -56
	.cfi_offset w29, -64
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w19, w8, [x9]
	bfi	x19, x8, #32, #32
	tst	x19, #0x6
	b.ne	.LBB229_3
// %bb.1:                               // %"$3"
	tbz	w19, #3, .LBB229_5
// %bb.2:                               // %"$6"
	ldp	w19, w8, [x19]
	bfi	x19, x8, #32, #32
.LBB229_3:                              // %"$2"
	tst	x19, #0xf
	b.eq	.LBB229_6
.LBB229_4:
	mov	x20, x19
	b	.LBB229_12
.LBB229_5:                              // %"$5"
	mov	x0, x19
	bl	evList
	mov	x19, x0
	tst	x19, #0xf
	b.ne	.LBB229_4
.LBB229_6:                              // %"$8"
	ldp	w0, w8, [x19]
	bfi	x0, x8, #32, #32
	ldp	w1, w8, [x19, #8]
	bfi	x1, x8, #32, #32
	bl	cons
	mov	x20, x0
	adrp	x21, env
	ldr	x8, [x21, :lo12:env]
	mov	x9, sp
	sub	x22, x9, #16                    // =16
	mov	sp, x22
	lsr	x23, x0, #32
	lsr	x10, x8, #32
	stp	w20, w23, [x9, #-16]
	stp	w8, w10, [x9, #-8]
	mov	x24, x0
	str	x22, [x21, :lo12:env]
.LBB229_7:                              // %"$10"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w8, w9, [x24, #8]
	bfi	x8, x9, #32, #32
	tst	x8, #0xf
	b.ne	.LBB229_11
// %bb.8:                               // %"$11"
                                        //   in Loop: Header=BB229_7 Depth=1
	cmp	x8, x19
	b.eq	.LBB229_10
// %bb.9:                               // %"$13"
                                        //   in Loop: Header=BB229_7 Depth=1
	ldp	w0, w9, [x8]
	bfi	x0, x9, #32, #32
	ldp	w1, w9, [x8, #8]
	bfi	x1, x9, #32, #32
	bl	cons
	lsr	x8, x0, #32
	stp	w0, w8, [x24, #8]
	mov	x24, x0
	b	.LBB229_7
.LBB229_10:                             // %"$14"
	stp	w20, w23, [x24, #8]
.LBB229_11:                             // %"$12"
	ldp	w9, w8, [x22, #8]
	bfi	x9, x8, #32, #32
	str	x9, [x21, :lo12:env]
.LBB229_12:                             // %"$9"
	mov	x0, x20
	mov	sp, x29
	ldp	x20, x19, [sp, #48]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #32]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #64             // 16-byte Folded Reload
	ret
.Lfunc_end229:
	.size	_copy, .Lfunc_end229-_copy
	.cfi_endproc
                                        // -- End function
	.globl	_mix                            // -- Begin function _mix
	.p2align	4
	.type	_mix,@function
_mix:                                   // @_mix
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-80]!           // 16-byte Folded Spill
	str	x25, [sp, #16]                  // 8-byte Folded Spill
	stp	x24, x23, [sp, #32]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #48]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #64]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 80
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -64
	.cfi_offset w30, -72
	.cfi_offset w29, -80
	ldp	w20, w8, [x0, #8]
	bfi	x20, x8, #32, #32
	ldp	w19, w8, [x20]
	bfi	x19, x8, #32, #32
	tst	x19, #0x6
	b.ne	.LBB230_4
// %bb.1:                               // %"$3"
	tbz	w19, #3, .LBB230_3
// %bb.2:                               // %"$6"
	ldp	w19, w8, [x19]
	bfi	x19, x8, #32, #32
	b	.LBB230_4
.LBB230_3:                              // %"$5"
	mov	x0, x19
	bl	evList
	mov	x19, x0
.LBB230_4:                              // %"$2"
	adrp	x8, SymTab+8
	add	x8, x8, :lo12:SymTab+8
	cmp	x19, x8
	cset	w8, eq
	tst	x19, #0xf
	mov	w9, #1
	csel	w8, w9, w8, eq
	cbz	w8, .LBB230_7
// %bb.5:                               // %"$10"
	ldp	w22, w8, [x20, #8]
	bfi	x22, x8, #32, #32
	tst	x22, #0xf
	b.eq	.LBB230_8
// %bb.6:
	adrp	x20, SymTab+8
	add	x20, x20, :lo12:SymTab+8
	b	.LBB230_28
.LBB230_7:
	mov	x20, x19
	b	.LBB230_28
.LBB230_8:                              // %"$12"
	adrp	x23, env
	ldr	x8, [x23, :lo12:env]
	mov	x9, sp
	sub	x24, x9, #16                    // =16
	mov	sp, x24
	lsr	x10, x19, #32
	stp	w19, w10, [x9, #-16]
	lsr	x10, x8, #32
	stp	w8, w10, [x9, #-8]
	str	x24, [x23, :lo12:env]
	ldp	w0, w8, [x22]
	bfi	x0, x8, #32, #32
	tbz	w0, #1, .LBB230_12
// %bb.9:                               // %"$14"
	lsr	x8, x0, #4
	sub	x9, x8, #1                      // =1
	mov	x8, x19
	cbz	x9, .LBB230_11
.LBB230_10:                             // %"$18"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w8, w10, [x8, #8]
	bfi	x8, x10, #32, #32
	sub	x9, x9, #1                      // =1
	cbnz	x9, .LBB230_10
.LBB230_11:                             // %"$19"
	add	x9, x8, #8                      // =8
	tst	w0, #0x8
	csel	x8, x8, x9, eq
	ldp	w0, w9, [x8]
	bfi	x0, x9, #32, #32
	b	.LBB230_16
.LBB230_12:                             // %"$15"
	tst	x0, #0x6
	b.ne	.LBB230_16
// %bb.13:                              // %"$24"
	tbz	w0, #3, .LBB230_15
// %bb.14:                              // %"$27"
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB230_16
.LBB230_15:                             // %"$26"
	bl	evList
.LBB230_16:                             // %"$16"
	adrp	x21, SymTab+8
	add	x21, x21, :lo12:SymTab+8
	mov	x1, x21
	bl	cons
	mov	x20, x0
	ldr	x8, [x23, :lo12:env]
	mov	x9, sp
	sub	x10, x9, #16                    // =16
	mov	sp, x10
	lsr	x11, x0, #32
	lsr	x12, x8, #32
	stp	w20, w11, [x9, #-16]
	stp	w8, w12, [x9, #-8]
	mov	x25, x0
	str	x10, [x23, :lo12:env]
	b	.LBB230_19
.LBB230_17:                             // %"$36"
                                        //   in Loop: Header=BB230_19 Depth=1
	add	x9, x8, #8                      // =8
	tst	w0, #0x8
	csel	x8, x8, x9, eq
	ldp	w0, w9, [x8]
	bfi	x0, x9, #32, #32
.LBB230_18:                             // %"$33"
                                        //   in Loop: Header=BB230_19 Depth=1
	mov	x1, x21
	bl	cons
	lsr	x8, x0, #32
	stp	w0, w8, [x25, #8]
	mov	x25, x0
.LBB230_19:                             // %"$28"
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB230_22 Depth 2
	ldp	w22, w8, [x22, #8]
	bfi	x22, x8, #32, #32
	tst	x22, #0xf
	b.ne	.LBB230_27
// %bb.20:                              // %"$29"
                                        //   in Loop: Header=BB230_19 Depth=1
	ldp	w0, w8, [x22]
	bfi	x0, x8, #32, #32
	tbz	w0, #1, .LBB230_23
// %bb.21:                              // %"$31"
                                        //   in Loop: Header=BB230_19 Depth=1
	lsr	x8, x0, #4
	sub	x9, x8, #1                      // =1
	mov	x8, x19
	cbz	x9, .LBB230_17
.LBB230_22:                             // %"$35"
                                        //   Parent Loop BB230_19 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	w8, w10, [x8, #8]
	bfi	x8, x10, #32, #32
	sub	x9, x9, #1                      // =1
	cbnz	x9, .LBB230_22
	b	.LBB230_17
.LBB230_23:                             // %"$32"
                                        //   in Loop: Header=BB230_19 Depth=1
	tst	x0, #0x6
	b.ne	.LBB230_18
// %bb.24:                              // %"$41"
                                        //   in Loop: Header=BB230_19 Depth=1
	tbz	w0, #3, .LBB230_26
// %bb.25:                              // %"$44"
                                        //   in Loop: Header=BB230_19 Depth=1
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB230_18
.LBB230_26:                             // %"$43"
                                        //   in Loop: Header=BB230_19 Depth=1
	bl	evList
	b	.LBB230_18
.LBB230_27:                             // %"$30"
	ldp	w9, w8, [x24, #8]
	bfi	x9, x8, #32, #32
	str	x9, [x23, :lo12:env]
.LBB230_28:                             // %"$7"
	mov	x0, x20
	mov	sp, x29
	ldp	x20, x19, [sp, #64]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #48]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #32]             // 16-byte Folded Reload
	ldr	x25, [sp, #16]                  // 8-byte Folded Reload
	ldp	x29, x30, [sp], #80             // 16-byte Folded Reload
	ret
.Lfunc_end230:
	.size	_mix, .Lfunc_end230-_mix
	.cfi_endproc
                                        // -- End function
	.globl	_append                         // -- Begin function _append
	.p2align	4
	.type	_append,@function
_append:                                // @_append
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-80]!           // 16-byte Folded Spill
	str	x25, [sp, #16]                  // 8-byte Folded Spill
	stp	x24, x23, [sp, #32]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #48]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #64]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 80
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -64
	.cfi_offset w30, -72
	.cfi_offset w29, -80
	mov	x19, x0
	b	.LBB231_3
.LBB231_1:                              // %"$14"
                                        //   in Loop: Header=BB231_3 Depth=1
	bl	evList
.LBB231_2:                              // %"$11"
                                        //   in Loop: Header=BB231_3 Depth=1
	tst	x0, #0xf
	b.eq	.LBB231_10
.LBB231_3:                              // %"$2"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w19, w8, [x19, #8]
	bfi	x19, x8, #32, #32
	ldrb	w8, [x19, #8]
	tst	w8, #0xf
	b.ne	.LBB231_7
// %bb.4:                               // %"$3"
                                        //   in Loop: Header=BB231_3 Depth=1
	ldp	w0, w8, [x19]
	bfi	x0, x8, #32, #32
	tst	x0, #0x6
	b.ne	.LBB231_2
// %bb.5:                               // %"$12"
                                        //   in Loop: Header=BB231_3 Depth=1
	tbz	w0, #3, .LBB231_1
// %bb.6:                               // %"$15"
                                        //   in Loop: Header=BB231_3 Depth=1
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB231_2
.LBB231_7:                              // %"$5"
	ldp	w20, w8, [x19]
	bfi	x20, x8, #32, #32
	tst	x20, #0x6
	b.ne	.LBB231_27
// %bb.8:                               // %"$7"
	tbz	w20, #3, .LBB231_24
// %bb.9:                               // %"$10"
	ldp	w20, w8, [x20]
	bfi	x20, x8, #32, #32
	b	.LBB231_27
.LBB231_10:                             // %"$17"
	adrp	x22, env
	ldr	x8, [x22, :lo12:env]
	mov	x24, sp
	sub	x23, x24, #16                   // =16
	mov	sp, x23
	lsr	x9, x0, #32
	stp	w0, w9, [x24, #-16]
	lsr	x9, x8, #32
	stp	w8, w9, [x24, #-8]
	str	x23, [x22, :lo12:env]
	ldp	w8, w9, [x0]
	bfi	x8, x9, #32, #32
	ldp	w21, w9, [x0, #8]
	bfi	x21, x9, #32, #32
	mov	x0, x8
	mov	x1, x21
	bl	cons
	mov	x20, x0
	lsr	x8, x0, #32
	stp	w20, w8, [x24, #-16]
.LBB231_11:                             // %"$18"
                                        // =>This Inner Loop Header: Depth=1
	mov	x24, x0
	tst	x21, #0xf
	b.ne	.LBB231_14
// %bb.12:                              // %"$19"
                                        //   in Loop: Header=BB231_11 Depth=1
	ldp	w0, w8, [x21]
	bfi	x0, x8, #32, #32
	ldp	w21, w8, [x21, #8]
	bfi	x21, x8, #32, #32
	mov	x1, x21
	bl	cons
	lsr	x8, x0, #32
	stp	w0, w8, [x24, #8]
	b	.LBB231_11
.LBB231_13:                             // %"$31"
                                        //   in Loop: Header=BB231_14 Depth=1
	ldp	w9, w8, [x25, #8]
	bfi	x9, x8, #32, #32
	str	x9, [x22, :lo12:env]
.LBB231_14:                             // %"$21"
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB231_20 Depth 2
	ldp	w19, w8, [x19, #8]
	bfi	x19, x8, #32, #32
	ldrb	w8, [x19, #8]
	tst	w8, #0xf
	b.ne	.LBB231_21
// %bb.15:                              // %"$22"
                                        //   in Loop: Header=BB231_14 Depth=1
	ldp	w21, w8, [x19]
	bfi	x21, x8, #32, #32
	tst	x21, #0x6
	b.ne	.LBB231_19
// %bb.16:                              // %"$25"
                                        //   in Loop: Header=BB231_14 Depth=1
	tbz	w21, #3, .LBB231_18
// %bb.17:                              // %"$28"
                                        //   in Loop: Header=BB231_14 Depth=1
	ldp	w21, w8, [x21]
	bfi	x21, x8, #32, #32
	b	.LBB231_19
.LBB231_18:                             // %"$27"
                                        //   in Loop: Header=BB231_14 Depth=1
	mov	x0, x21
	bl	evList
	mov	x21, x0
.LBB231_19:                             // %"$24"
                                        //   in Loop: Header=BB231_14 Depth=1
	ldr	x8, [x22, :lo12:env]
	mov	x9, sp
	sub	x25, x9, #16                    // =16
	mov	sp, x25
	lsr	x10, x21, #32
	lsr	x11, x8, #32
	stp	w21, w10, [x9, #-16]
	stp	w8, w11, [x9, #-8]
	str	x25, [x22, :lo12:env]
	tst	x21, #0xf
	b.ne	.LBB231_13
.LBB231_20:                             // %"$30"
                                        //   Parent Loop BB231_14 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	w0, w8, [x21]
	bfi	x0, x8, #32, #32
	ldp	w21, w8, [x21, #8]
	bfi	x21, x8, #32, #32
	mov	x1, x21
	bl	cons
	lsr	x8, x0, #32
	stp	w0, w8, [x24, #8]
	mov	x24, x0
	tst	x21, #0xf
	b.eq	.LBB231_20
	b	.LBB231_13
.LBB231_21:                             // %"$23"
	ldp	w0, w8, [x19]
	bfi	x0, x8, #32, #32
	tst	x0, #0x6
	b.ne	.LBB231_26
// %bb.22:                              // %"$33"
	tbz	w0, #3, .LBB231_25
// %bb.23:                              // %"$36"
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB231_26
.LBB231_24:                             // %"$9"
	mov	x0, x20
	bl	evList
	mov	x20, x0
	b	.LBB231_27
.LBB231_25:                             // %"$35"
	bl	evList
.LBB231_26:                             // %"$32"
	lsr	x8, x0, #32
	stp	w0, w8, [x24, #8]
	ldp	w9, w8, [x23, #8]
	bfi	x9, x8, #32, #32
	str	x9, [x22, :lo12:env]
.LBB231_27:                             // %"$4"
	mov	x0, x20
	mov	sp, x29
	ldp	x20, x19, [sp, #64]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #48]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #32]             // 16-byte Folded Reload
	ldr	x25, [sp, #16]                  // 8-byte Folded Reload
	ldp	x29, x30, [sp], #80             // 16-byte Folded Reload
	ret
.Lfunc_end231:
	.size	_append, .Lfunc_end231-_append
	.cfi_endproc
                                        // -- End function
	.globl	_delete                         // -- Begin function _delete
	.p2align	4
	.type	_delete,@function
_delete:                                // @_delete
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-80]!           // 16-byte Folded Spill
	stp	x26, x25, [sp, #16]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #32]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #48]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #64]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 80
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w30, -72
	.cfi_offset w29, -80
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w19, w8, [x9]
	bfi	x19, x8, #32, #32
	ldp	w21, w8, [x9, #8]
	bfi	x21, x8, #32, #32
	tst	x19, #0x6
	b.ne	.LBB232_4
// %bb.1:                               // %"$3"
	tbz	w19, #3, .LBB232_3
// %bb.2:                               // %"$6"
	ldp	w19, w8, [x19]
	bfi	x19, x8, #32, #32
	b	.LBB232_4
.LBB232_3:                              // %"$5"
	mov	x0, x19
	bl	evList
	mov	x19, x0
.LBB232_4:                              // %"$2"
	adrp	x24, env
	ldr	x8, [x24, :lo12:env]
	mov	x9, sp
	sub	x25, x9, #16                    // =16
	mov	sp, x25
	lsr	x10, x19, #32
	stp	w19, w10, [x9, #-16]
	lsr	x10, x8, #32
	stp	w8, w10, [x9, #-8]
	str	x25, [x24, :lo12:env]
	ldp	w20, w8, [x21]
	bfi	x20, x8, #32, #32
	ldp	w21, w8, [x21, #8]
	bfi	x21, x8, #32, #32
	tst	x20, #0x6
	b.ne	.LBB232_8
// %bb.5:                               // %"$8"
	tbz	w20, #3, .LBB232_7
// %bb.6:                               // %"$11"
	ldp	w20, w8, [x20]
	bfi	x20, x8, #32, #32
	b	.LBB232_8
.LBB232_7:                              // %"$10"
	mov	x0, x20
	bl	evList
	mov	x20, x0
.LBB232_8:                              // %"$7"
	ldr	x8, [x24, :lo12:env]
	mov	x9, sp
	sub	x10, x9, #16                    // =16
	mov	sp, x10
	lsr	x11, x20, #32
	stp	w20, w11, [x9, #-16]
	lsr	x11, x8, #32
	stp	w8, w11, [x9, #-8]
	str	x10, [x24, :lo12:env]
	ldp	w21, w8, [x21]
	bfi	x21, x8, #32, #32
	tst	x21, #0x6
	b.ne	.LBB232_12
// %bb.9:                               // %"$13"
	tbz	w21, #3, .LBB232_11
// %bb.10:                              // %"$16"
	ldp	w21, w8, [x21]
	bfi	x21, x8, #32, #32
	b	.LBB232_12
.LBB232_11:                             // %"$15"
	mov	x0, x21
	bl	evList
	mov	x21, x0
.LBB232_12:                             // %"$12"
	adrp	x22, SymTab+8
	add	x22, x22, :lo12:SymTab+8
.LBB232_13:                             // %"$17"
                                        // =>This Inner Loop Header: Depth=1
	tst	x20, #0xf
	b.ne	.LBB232_23
// %bb.14:                              // %"$18"
                                        //   in Loop: Header=BB232_13 Depth=1
	ldp	w1, w8, [x20]
	bfi	x1, x8, #32, #32
	mov	x0, x19
	bl	equal
	tbz	w0, #0, .LBB232_16
// %bb.15:                              // %"$21"
                                        //   in Loop: Header=BB232_13 Depth=1
	ldp	w20, w8, [x20, #8]
	bfi	x20, x8, #32, #32
	cmp	x21, x22
	b.ne	.LBB232_13
	b	.LBB232_23
.LBB232_16:                             // %"$22"
	ldp	w0, w8, [x20]
	bfi	x0, x8, #32, #32
	mov	x1, x22
	bl	cons
	mov	x23, x0
	ldr	x8, [x24, :lo12:env]
	mov	x9, sp
	sub	x10, x9, #16                    // =16
	mov	sp, x10
	lsr	x11, x0, #32
	lsr	x12, x8, #32
	stp	w23, w11, [x9, #-16]
	stp	w8, w12, [x9, #-8]
	mov	x26, x0
	str	x10, [x24, :lo12:env]
	b	.LBB232_18
.LBB232_17:                             // %"$27"
                                        //   in Loop: Header=BB232_18 Depth=1
	ldp	w0, w8, [x20]
	bfi	x0, x8, #32, #32
	mov	x1, x22
	bl	cons
	lsr	x8, x0, #32
	stp	w0, w8, [x26, #8]
	mov	x26, x0
.LBB232_18:                             // %"$23"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w20, w8, [x20, #8]
	bfi	x20, x8, #32, #32
	tst	x20, #0xf
	b.ne	.LBB232_22
// %bb.19:                              // %"$24"
                                        //   in Loop: Header=BB232_18 Depth=1
	ldp	w1, w8, [x20]
	bfi	x1, x8, #32, #32
	mov	x0, x19
	bl	equal
	tbz	w0, #0, .LBB232_17
// %bb.20:                              // %"$28"
                                        //   in Loop: Header=BB232_18 Depth=1
	cmp	x21, x22
	b.ne	.LBB232_18
// %bb.21:                              // %"$31"
	ldp	w20, w8, [x20, #8]
	bfi	x20, x8, #32, #32
.LBB232_22:                             // %"$25"
	lsr	x8, x20, #32
	stp	w20, w8, [x26, #8]
	mov	x20, x23
.LBB232_23:                             // %"$19"
	ldp	w9, w8, [x25, #8]
	bfi	x9, x8, #32, #32
	str	x9, [x24, :lo12:env]
	mov	x0, x20
	mov	sp, x29
	ldp	x20, x19, [sp, #64]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #48]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #32]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #80             // 16-byte Folded Reload
	ret
.Lfunc_end232:
	.size	_delete, .Lfunc_end232-_delete
	.cfi_endproc
                                        // -- End function
	.globl	_delq                           // -- Begin function _delq
	.p2align	4
	.type	_delq,@function
_delq:                                  // @_delq
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-80]!           // 16-byte Folded Spill
	stp	x26, x25, [sp, #16]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #32]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #48]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #64]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 80
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w30, -72
	.cfi_offset w29, -80
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w19, w8, [x9]
	bfi	x19, x8, #32, #32
	ldp	w21, w8, [x9, #8]
	bfi	x21, x8, #32, #32
	tst	x19, #0x6
	b.ne	.LBB233_4
// %bb.1:                               // %"$3"
	tbz	w19, #3, .LBB233_3
// %bb.2:                               // %"$6"
	ldp	w19, w8, [x19]
	bfi	x19, x8, #32, #32
	b	.LBB233_4
.LBB233_3:                              // %"$5"
	mov	x0, x19
	bl	evList
	mov	x19, x0
.LBB233_4:                              // %"$2"
	adrp	x24, env
	ldr	x8, [x24, :lo12:env]
	mov	x9, sp
	sub	x25, x9, #16                    // =16
	mov	sp, x25
	lsr	x10, x19, #32
	stp	w19, w10, [x9, #-16]
	lsr	x10, x8, #32
	stp	w8, w10, [x9, #-8]
	str	x25, [x24, :lo12:env]
	ldp	w20, w8, [x21]
	bfi	x20, x8, #32, #32
	ldp	w21, w8, [x21, #8]
	bfi	x21, x8, #32, #32
	tst	x20, #0x6
	b.ne	.LBB233_8
// %bb.5:                               // %"$8"
	tbz	w20, #3, .LBB233_7
// %bb.6:                               // %"$11"
	ldp	w20, w8, [x20]
	bfi	x20, x8, #32, #32
	b	.LBB233_8
.LBB233_7:                              // %"$10"
	mov	x0, x20
	bl	evList
	mov	x20, x0
.LBB233_8:                              // %"$7"
	ldr	x8, [x24, :lo12:env]
	mov	x9, sp
	sub	x10, x9, #16                    // =16
	mov	sp, x10
	lsr	x11, x20, #32
	stp	w20, w11, [x9, #-16]
	lsr	x11, x8, #32
	stp	w8, w11, [x9, #-8]
	str	x10, [x24, :lo12:env]
	ldp	w21, w8, [x21]
	bfi	x21, x8, #32, #32
	tst	x21, #0x6
	b.ne	.LBB233_12
// %bb.9:                               // %"$13"
	tbz	w21, #3, .LBB233_11
// %bb.10:                              // %"$16"
	ldp	w21, w8, [x21]
	bfi	x21, x8, #32, #32
	b	.LBB233_12
.LBB233_11:                             // %"$15"
	mov	x0, x21
	bl	evList
	mov	x21, x0
.LBB233_12:                             // %"$12"
	adrp	x22, SymTab+8
	add	x22, x22, :lo12:SymTab+8
.LBB233_13:                             // %"$17"
                                        // =>This Inner Loop Header: Depth=1
	tst	x20, #0xf
	b.ne	.LBB233_23
// %bb.14:                              // %"$18"
                                        //   in Loop: Header=BB233_13 Depth=1
	ldp	w9, w8, [x20]
	bfi	x9, x8, #32, #32
	cmp	x19, x9
	b.ne	.LBB233_16
// %bb.15:                              // %"$21"
                                        //   in Loop: Header=BB233_13 Depth=1
	ldp	w20, w8, [x20, #8]
	bfi	x20, x8, #32, #32
	cmp	x21, x22
	b.ne	.LBB233_13
	b	.LBB233_23
.LBB233_16:                             // %"$22"
	ldp	w0, w8, [x20]
	bfi	x0, x8, #32, #32
	mov	x1, x22
	bl	cons
	mov	x23, x0
	ldr	x8, [x24, :lo12:env]
	mov	x9, sp
	sub	x10, x9, #16                    // =16
	mov	sp, x10
	lsr	x11, x0, #32
	lsr	x12, x8, #32
	stp	w23, w11, [x9, #-16]
	stp	w8, w12, [x9, #-8]
	mov	x26, x0
	str	x10, [x24, :lo12:env]
	b	.LBB233_18
.LBB233_17:                             // %"$27"
                                        //   in Loop: Header=BB233_18 Depth=1
	ldp	w0, w8, [x20]
	bfi	x0, x8, #32, #32
	mov	x1, x22
	bl	cons
	lsr	x8, x0, #32
	stp	w0, w8, [x26, #8]
	mov	x26, x0
.LBB233_18:                             // %"$23"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w20, w8, [x20, #8]
	bfi	x20, x8, #32, #32
	tst	x20, #0xf
	b.ne	.LBB233_22
// %bb.19:                              // %"$24"
                                        //   in Loop: Header=BB233_18 Depth=1
	ldp	w9, w8, [x20]
	bfi	x9, x8, #32, #32
	cmp	x19, x9
	b.ne	.LBB233_17
// %bb.20:                              // %"$28"
                                        //   in Loop: Header=BB233_18 Depth=1
	cmp	x21, x22
	b.ne	.LBB233_18
// %bb.21:                              // %"$31"
	ldp	w20, w8, [x20, #8]
	bfi	x20, x8, #32, #32
.LBB233_22:                             // %"$25"
	lsr	x8, x20, #32
	stp	w20, w8, [x26, #8]
	mov	x20, x23
.LBB233_23:                             // %"$19"
	ldp	w9, w8, [x25, #8]
	bfi	x9, x8, #32, #32
	str	x9, [x24, :lo12:env]
	mov	x0, x20
	mov	sp, x29
	ldp	x20, x19, [sp, #64]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #48]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #32]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #80             // 16-byte Folded Reload
	ret
.Lfunc_end233:
	.size	_delq, .Lfunc_end233-_delq
	.cfi_endproc
                                        // -- End function
	.globl	_replace                        // -- Begin function _replace
	.p2align	4
	.type	_replace,@function
_replace:                               // @_replace
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-96]!           // 16-byte Folded Spill
	stp	x28, x27, [sp, #16]             // 16-byte Folded Spill
	stp	x26, x25, [sp, #32]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #48]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #64]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #80]             // 16-byte Folded Spill
	mov	x29, sp
	sub	sp, sp, #16                     // =16
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	ldp	w20, w8, [x0, #8]
	bfi	x20, x8, #32, #32
	ldp	w19, w8, [x20]
	bfi	x19, x8, #32, #32
	tst	x19, #0x6
	b.ne	.LBB234_4
// %bb.1:                               // %"$3"
	tbz	w19, #3, .LBB234_3
// %bb.2:                               // %"$6"
	ldp	w19, w8, [x19]
	bfi	x19, x8, #32, #32
	b	.LBB234_4
.LBB234_3:                              // %"$5"
	mov	x0, x19
	bl	evList
	mov	x19, x0
.LBB234_4:                              // %"$2"
	adrp	x21, env
	ldr	x8, [x21, :lo12:env]
	mov	x9, sp
	sub	x12, x9, #16                    // =16
	mov	sp, x12
	lsr	x10, x19, #32
	lsr	x11, x8, #32
	stp	w19, w10, [x9, #-16]
	stp	w8, w11, [x9, #-8]
	tst	x19, #0xf
	str	x12, [x21, :lo12:env]
	b.ne	.LBB234_28
// %bb.5:                               // %"$8"
	sub	x8, sp, #16                     // =16
	stp	x12, x8, [x29, #-16]            // 16-byte Folded Spill
	mov	sp, x8
	mov	x25, xzr
	adrp	x22, SymTab+8
	add	x22, x22, :lo12:SymTab+8
	b	.LBB234_8
.LBB234_6:                              // %"$21"
                                        //   in Loop: Header=BB234_8 Depth=1
	bl	evList
.LBB234_7:                              // %"$18"
                                        //   in Loop: Header=BB234_8 Depth=1
	mov	x8, sp
	sub	x22, x8, #16                    // =16
	mov	sp, x22
	lsr	x9, x0, #32
	stp	w0, w9, [x8, #-16]
	ldr	x9, [x21, :lo12:env]
	lsr	x10, x9, #32
	stp	w9, w10, [x8, #-8]
	str	x22, [x21, :lo12:env]
	add	x25, x25, #1                    // =1
.LBB234_8:                              // %"$10"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w8, w9, [x20, #8]
	bfi	x8, x9, #32, #32
	tst	x8, #0xf
	b.ne	.LBB234_16
// %bb.9:                               // %"$11"
                                        //   in Loop: Header=BB234_8 Depth=1
	ldp	w0, w9, [x8]
	bfi	x0, x9, #32, #32
	ldp	w20, w9, [x8, #8]
	bfi	x20, x9, #32, #32
	tst	x0, #0x6
	b.ne	.LBB234_13
// %bb.10:                              // %"$14"
                                        //   in Loop: Header=BB234_8 Depth=1
	tbz	w0, #3, .LBB234_12
// %bb.11:                              // %"$17"
                                        //   in Loop: Header=BB234_8 Depth=1
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB234_13
.LBB234_12:                             // %"$16"
                                        //   in Loop: Header=BB234_8 Depth=1
	bl	evList
.LBB234_13:                             // %"$13"
                                        //   in Loop: Header=BB234_8 Depth=1
	mov	x8, sp
	sub	x9, x8, #16                     // =16
	mov	sp, x9
	lsr	x10, x0, #32
	stp	w0, w10, [x8, #-16]
	ldr	x10, [x21, :lo12:env]
	lsr	x11, x10, #32
	stp	w10, w11, [x8, #-8]
	str	x9, [x21, :lo12:env]
	ldp	w0, w8, [x20]
	bfi	x0, x8, #32, #32
	tst	x0, #0x6
	b.ne	.LBB234_7
// %bb.14:                              // %"$19"
                                        //   in Loop: Header=BB234_8 Depth=1
	tbz	w0, #3, .LBB234_6
// %bb.15:                              // %"$22"
                                        //   in Loop: Header=BB234_8 Depth=1
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB234_7
.LBB234_16:                             // %"$12"
	ldp	w20, w8, [x19]
	bfi	x20, x8, #32, #32
	ldp	w27, w8, [x19, #8]
	bfi	x27, x8, #32, #32
	mov	x19, x25
	mov	x23, x22
.LBB234_17:                             // %"$23"
                                        // =>This Inner Loop Header: Depth=1
	subs	x19, x19, #1                    // =1
	b.mi	.LBB234_20
// %bb.18:                              // %"$24"
                                        //   in Loop: Header=BB234_17 Depth=1
	ldp	w21, w24, [x23]
	ldp	w9, w8, [x23, #8]
	bfi	x9, x8, #32, #32
	ldp	w1, w8, [x9]
	bfi	x1, x8, #32, #32
	ldp	w23, w8, [x9, #8]
	bfi	x23, x8, #32, #32
	mov	x0, x20
	bl	equal
	tbz	w0, #0, .LBB234_17
// %bb.19:
	bfi	x21, x24, #32, #32
	mov	x20, x21
.LBB234_20:                             // %"$25"
	adrp	x10, env
	ldr	x8, [x10, :lo12:env]
	lsr	x9, x8, #32
	ldur	x21, [x29, #-8]                 // 8-byte Folded Reload
	stp	w8, w9, [x21, #8]
	str	x21, [x10, :lo12:env]
	adrp	x19, SymTab+8
	add	x19, x19, :lo12:SymTab+8
	mov	x0, x20
	mov	x1, x19
	bl	cons
	mov	x20, x0
	lsr	x8, x0, #32
	stp	w20, w8, [x21]
	b	.LBB234_23
.LBB234_21:                             //   in Loop: Header=BB234_23 Depth=1
	bfi	x21, x23, #32, #32
	mov	x24, x21
.LBB234_22:                             // %"$33"
                                        //   in Loop: Header=BB234_23 Depth=1
	mov	x0, x24
	mov	x1, x19
	bl	cons
	lsr	x8, x0, #32
	stp	w0, w8, [x20, #8]
	mov	x20, x0
.LBB234_23:                             // %"$28"
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB234_25 Depth 2
	tst	x27, #0xf
	b.ne	.LBB234_27
// %bb.24:                              // %"$29"
                                        //   in Loop: Header=BB234_23 Depth=1
	ldp	w24, w8, [x27]
	bfi	x24, x8, #32, #32
	ldp	w27, w8, [x27, #8]
	bfi	x27, x8, #32, #32
	mov	x28, x25
	mov	x26, x22
.LBB234_25:                             // %"$31"
                                        //   Parent Loop BB234_23 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	subs	x28, x28, #1                    // =1
	b.mi	.LBB234_22
// %bb.26:                              // %"$32"
                                        //   in Loop: Header=BB234_25 Depth=2
	ldp	w21, w23, [x26]
	ldp	w9, w8, [x26, #8]
	bfi	x9, x8, #32, #32
	ldp	w1, w8, [x9]
	bfi	x1, x8, #32, #32
	ldp	w26, w8, [x9, #8]
	bfi	x26, x8, #32, #32
	mov	x0, x24
	bl	equal
	tbz	w0, #0, .LBB234_25
	b	.LBB234_21
.LBB234_27:                             // %"$30"
	ldp	x12, x9, [x29, #-16]            // 16-byte Folded Reload
	ldp	w19, w8, [x9]
	bfi	x19, x8, #32, #32
	adrp	x21, env
.LBB234_28:                             // %"$9"
	ldp	w9, w8, [x12, #8]
	bfi	x9, x8, #32, #32
	str	x9, [x21, :lo12:env]
	mov	x0, x19
	mov	sp, x29
	ldp	x20, x19, [sp, #80]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #64]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #48]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #32]             // 16-byte Folded Reload
	ldp	x28, x27, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #96             // 16-byte Folded Reload
	ret
.Lfunc_end234:
	.size	_replace, .Lfunc_end234-_replace
	.cfi_endproc
                                        // -- End function
	.globl	_insert                         // -- Begin function _insert
	.p2align	4
	.type	_insert,@function
_insert:                                // @_insert
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-80]!           // 16-byte Folded Spill
	stp	x26, x25, [sp, #16]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #32]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #48]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #64]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 80
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w30, -72
	.cfi_offset w29, -80
	ldp	w20, w8, [x0, #8]
	bfi	x20, x8, #32, #32
	mov	x1, x20
	bl	evCnt
	mov	x19, x0
	ldp	w21, w8, [x20, #8]
	bfi	x21, x8, #32, #32
	ldp	w20, w8, [x21]
	bfi	x20, x8, #32, #32
	tst	x20, #0x6
	b.ne	.LBB235_4
// %bb.1:                               // %"$3"
	tbz	w20, #3, .LBB235_3
// %bb.2:                               // %"$6"
	ldp	w20, w8, [x20]
	bfi	x20, x8, #32, #32
	b	.LBB235_4
.LBB235_3:                              // %"$5"
	mov	x0, x20
	bl	evList
	mov	x20, x0
.LBB235_4:                              // %"$2"
	adrp	x24, env
	ldr	x8, [x24, :lo12:env]
	mov	x9, sp
	sub	x25, x9, #16                    // =16
	mov	sp, x25
	lsr	x10, x20, #32
	stp	w20, w10, [x9, #-16]
	lsr	x10, x8, #32
	stp	w8, w10, [x9, #-8]
	str	x25, [x24, :lo12:env]
	ldp	w9, w8, [x21, #8]
	bfi	x9, x8, #32, #32
	ldp	w21, w8, [x9]
	bfi	x21, x8, #32, #32
	tst	x21, #0x6
	b.ne	.LBB235_7
// %bb.5:                               // %"$8"
	tbz	w21, #3, .LBB235_10
// %bb.6:                               // %"$11"
	ldp	w21, w8, [x21]
	bfi	x21, x8, #32, #32
.LBB235_7:                              // %"$7"
	tst	x20, #0xf
	b.eq	.LBB235_11
.LBB235_8:
	mov	w8, #1
	cbz	w8, .LBB235_12
.LBB235_9:                              // %"$14"
	mov	x0, x21
	mov	x1, x20
	bl	cons
	mov	x22, x0
	b	.LBB235_16
.LBB235_10:                             // %"$10"
	mov	x0, x21
	bl	evList
	mov	x21, x0
	tst	x20, #0xf
	b.ne	.LBB235_8
.LBB235_11:                             // %"$13"
	sub	x19, x19, #1                    // =1
	cmp	x19, #1                         // =1
	cset	w8, lt
	cbnz	w8, .LBB235_9
.LBB235_12:                             // %"$15"
	ldp	w0, w8, [x20]
	bfi	x0, x8, #32, #32
	adrp	x23, SymTab+8
	add	x23, x23, :lo12:SymTab+8
	mov	x1, x23
	bl	cons
	mov	x22, x0
	ldr	x8, [x24, :lo12:env]
	mov	x9, sp
	sub	x10, x9, #16                    // =16
	mov	sp, x10
	lsr	x11, x0, #32
	lsr	x12, x8, #32
	stp	w22, w11, [x9, #-16]
	stp	w8, w12, [x9, #-8]
	mov	x26, x0
	str	x10, [x24, :lo12:env]
.LBB235_13:                             // %"$17"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w20, w8, [x20, #8]
	bfi	x20, x8, #32, #32
	subs	x8, x19, #1                     // =1
	cset	w9, ne
	tst	x20, #0xf
	csel	x19, x19, x8, ne
	csel	w8, wzr, w9, ne
	cbz	w8, .LBB235_15
// %bb.14:                              // %"$20"
                                        //   in Loop: Header=BB235_13 Depth=1
	ldp	w0, w8, [x20]
	bfi	x0, x8, #32, #32
	mov	x1, x23
	bl	cons
	lsr	x8, x0, #32
	stp	w0, w8, [x26, #8]
	mov	x26, x0
	b	.LBB235_13
.LBB235_15:                             // %"$21"
	mov	x0, x21
	mov	x1, x20
	bl	cons
	lsr	x8, x0, #32
	stp	w0, w8, [x26, #8]
.LBB235_16:                             // %"$16"
	ldp	w9, w8, [x25, #8]
	bfi	x9, x8, #32, #32
	str	x9, [x24, :lo12:env]
	mov	x0, x22
	mov	sp, x29
	ldp	x20, x19, [sp, #64]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #48]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #32]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #80             // 16-byte Folded Reload
	ret
.Lfunc_end235:
	.size	_insert, .Lfunc_end235-_insert
	.cfi_endproc
                                        // -- End function
	.globl	_remove                         // -- Begin function _remove
	.p2align	4
	.type	_remove,@function
_remove:                                // @_remove
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-80]!           // 16-byte Folded Spill
	str	x25, [sp, #16]                  // 8-byte Folded Spill
	stp	x24, x23, [sp, #32]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #48]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #64]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 80
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -64
	.cfi_offset w30, -72
	.cfi_offset w29, -80
	ldp	w19, w8, [x0, #8]
	bfi	x19, x8, #32, #32
	mov	x1, x19
	bl	evCnt
	mov	x20, x0
	ldp	w9, w8, [x19, #8]
	bfi	x9, x8, #32, #32
	ldp	w19, w8, [x9]
	bfi	x19, x8, #32, #32
	tst	x19, #0x6
	b.ne	.LBB236_4
// %bb.1:                               // %"$3"
	tbz	w19, #3, .LBB236_3
// %bb.2:                               // %"$6"
	ldp	w19, w8, [x19]
	bfi	x19, x8, #32, #32
	b	.LBB236_4
.LBB236_3:                              // %"$5"
	mov	x0, x19
	bl	evList
	mov	x19, x0
.LBB236_4:                              // %"$2"
	adrp	x22, env
	ldr	x8, [x22, :lo12:env]
	mov	x9, sp
	sub	x23, x9, #16                    // =16
	mov	sp, x23
	lsr	x10, x19, #32
	lsr	x11, x8, #32
	stp	w19, w10, [x9, #-16]
	sub	x10, x20, #1                    // =1
	lsr	x12, x10, #63
	tst	x19, #0xf
	stp	w8, w11, [x9, #-8]
	mov	w8, #1
	csel	x24, x20, x10, ne
	csel	w8, w8, w12, ne
	str	x23, [x22, :lo12:env]
	tbz	w8, #0, .LBB236_6
// %bb.5:
	mov	x20, x19
	b	.LBB236_14
.LBB236_6:                              // %"$10"
	cbz	x24, .LBB236_11
// %bb.7:                               // %"$12"
	ldp	w0, w8, [x19]
	bfi	x0, x8, #32, #32
	adrp	x21, SymTab+8
	add	x21, x21, :lo12:SymTab+8
	mov	x1, x21
	bl	cons
	mov	x20, x0
	ldr	x8, [x22, :lo12:env]
	mov	x9, sp
	sub	x10, x9, #16                    // =16
	mov	sp, x10
	lsr	x11, x0, #32
	lsr	x12, x8, #32
	stp	w20, w11, [x9, #-16]
	stp	w8, w12, [x9, #-8]
	sub	x25, x24, #1                    // =1
	mov	x24, x0
	str	x10, [x22, :lo12:env]
.LBB236_8:                              // %"$14"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w19, w8, [x19, #8]
	bfi	x19, x8, #32, #32
	tst	x19, #0xf
	b.ne	.LBB236_13
// %bb.9:                               // %"$15"
                                        //   in Loop: Header=BB236_8 Depth=1
	cbz	x25, .LBB236_12
// %bb.10:                              // %"$18"
                                        //   in Loop: Header=BB236_8 Depth=1
	ldp	w0, w8, [x19]
	bfi	x0, x8, #32, #32
	mov	x1, x21
	bl	cons
	lsr	x8, x0, #32
	stp	w0, w8, [x24, #8]
	sub	x25, x25, #1                    // =1
	mov	x24, x0
	b	.LBB236_8
.LBB236_11:                             // %"$13"
	ldp	w20, w8, [x19, #8]
	bfi	x20, x8, #32, #32
	b	.LBB236_14
.LBB236_12:                             // %"$19"
	ldp	w19, w8, [x19, #8]
	bfi	x19, x8, #32, #32
.LBB236_13:                             // %"$16"
	lsr	x8, x19, #32
	stp	w19, w8, [x24, #8]
.LBB236_14:                             // %"$7"
	ldp	w9, w8, [x23, #8]
	bfi	x9, x8, #32, #32
	str	x9, [x22, :lo12:env]
	mov	x0, x20
	mov	sp, x29
	ldp	x20, x19, [sp, #64]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #48]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #32]             // 16-byte Folded Reload
	ldr	x25, [sp, #16]                  // 8-byte Folded Reload
	ldp	x29, x30, [sp], #80             // 16-byte Folded Reload
	ret
.Lfunc_end236:
	.size	_remove, .Lfunc_end236-_remove
	.cfi_endproc
                                        // -- End function
	.globl	_place                          // -- Begin function _place
	.p2align	4
	.type	_place,@function
_place:                                 // @_place
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-80]!           // 16-byte Folded Spill
	stp	x26, x25, [sp, #16]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #32]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #48]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #64]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 80
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w30, -72
	.cfi_offset w29, -80
	ldp	w19, w8, [x0, #8]
	bfi	x19, x8, #32, #32
	mov	x1, x19
	bl	evCnt
	mov	x20, x0
	ldp	w21, w8, [x19, #8]
	bfi	x21, x8, #32, #32
	ldp	w19, w8, [x21]
	bfi	x19, x8, #32, #32
	tst	x19, #0x6
	b.ne	.LBB237_4
// %bb.1:                               // %"$3"
	tbz	w19, #3, .LBB237_3
// %bb.2:                               // %"$6"
	ldp	w19, w8, [x19]
	bfi	x19, x8, #32, #32
	b	.LBB237_4
.LBB237_3:                              // %"$5"
	mov	x0, x19
	bl	evList
	mov	x19, x0
.LBB237_4:                              // %"$2"
	adrp	x24, env
	ldr	x8, [x24, :lo12:env]
	mov	x9, sp
	sub	x25, x9, #16                    // =16
	mov	sp, x25
	lsr	x10, x19, #32
	stp	w19, w10, [x9, #-16]
	lsr	x10, x8, #32
	stp	w8, w10, [x9, #-8]
	str	x25, [x24, :lo12:env]
	ldp	w9, w8, [x21, #8]
	bfi	x9, x8, #32, #32
	ldp	w22, w8, [x9]
	bfi	x22, x8, #32, #32
	tst	x22, #0x6
	b.ne	.LBB237_7
// %bb.5:                               // %"$8"
	tbz	w22, #3, .LBB237_11
// %bb.6:                               // %"$11"
	ldp	w22, w8, [x22]
	bfi	x22, x8, #32, #32
.LBB237_7:                              // %"$7"
	tst	x19, #0xf
	b.eq	.LBB237_12
.LBB237_8:                              // %"$14"
	ldp	w21, w8, [x22]
	bfi	x21, x8, #32, #32
	tst	x21, #0x6
	b.ne	.LBB237_22
// %bb.9:                               // %"$16"
	tbz	w21, #3, .LBB237_18
// %bb.10:                              // %"$19"
	ldp	w21, w8, [x21]
	bfi	x21, x8, #32, #32
	b	.LBB237_22
.LBB237_11:                             // %"$10"
	mov	x0, x22
	bl	evList
	mov	x22, x0
	tst	x19, #0xf
	b.ne	.LBB237_8
.LBB237_12:                             // %"$13"
	sub	x8, x20, #1                     // =1
	cmp	x8, #0                          // =0
	b.gt	.LBB237_14
// %bb.13:                              // %"$21"
	ldp	w1, w8, [x19, #8]
	bfi	x1, x8, #32, #32
	mov	x0, x22
	bl	cons
	mov	x21, x0
	b	.LBB237_22
.LBB237_14:                             // %"$20"
	ldp	w0, w8, [x19]
	bfi	x0, x8, #32, #32
	adrp	x23, SymTab+8
	add	x23, x23, :lo12:SymTab+8
	mov	x1, x23
	bl	cons
	mov	x21, x0
	ldr	x8, [x24, :lo12:env]
	mov	x9, sp
	sub	x10, x9, #16                    // =16
	mov	sp, x10
	lsr	x11, x0, #32
	lsr	x12, x8, #32
	stp	w21, w11, [x9, #-16]
	stp	w8, w12, [x9, #-8]
	sub	x26, x20, #2                    // =2
	mov	x20, x0
	str	x10, [x24, :lo12:env]
.LBB237_15:                             // %"$22"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w19, w8, [x19, #8]
	bfi	x19, x8, #32, #32
	tst	x19, #0xf
	b.ne	.LBB237_19
// %bb.16:                              // %"$23"
                                        //   in Loop: Header=BB237_15 Depth=1
	cbz	x26, .LBB237_20
// %bb.17:                              // %"$26"
                                        //   in Loop: Header=BB237_15 Depth=1
	ldp	w0, w8, [x19]
	bfi	x0, x8, #32, #32
	mov	x1, x23
	bl	cons
	lsr	x8, x0, #32
	stp	w0, w8, [x20, #8]
	sub	x26, x26, #1                    // =1
	mov	x20, x0
	b	.LBB237_15
.LBB237_18:                             // %"$18"
	mov	x0, x21
	bl	evList
	mov	x21, x0
	b	.LBB237_22
.LBB237_19:                             // %"$25"
	mov	x0, x22
	mov	x1, x19
	b	.LBB237_21
.LBB237_20:                             // %"$27"
	ldp	w1, w8, [x19, #8]
	bfi	x1, x8, #32, #32
	mov	x0, x22
.LBB237_21:                             // %"$24"
	bl	cons
	lsr	x8, x0, #32
	stp	w0, w8, [x20, #8]
.LBB237_22:                             // %"$12"
	ldp	w9, w8, [x25, #8]
	bfi	x9, x8, #32, #32
	str	x9, [x24, :lo12:env]
	mov	x0, x21
	mov	sp, x29
	ldp	x20, x19, [sp, #64]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #48]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #32]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #80             // 16-byte Folded Reload
	ret
.Lfunc_end237:
	.size	_place, .Lfunc_end237-_place
	.cfi_endproc
                                        // -- End function
	.globl	_strip                          // -- Begin function _strip
	.p2align	4
	.type	_strip,@function
_strip:                                 // @_strip
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w0, w8, [x9]
	bfi	x0, x8, #32, #32
	tst	x0, #0x6
	b.ne	.LBB238_4
// %bb.1:                               // %"$3"
	tbz	w0, #3, .LBB238_3
// %bb.2:                               // %"$6"
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB238_4
.LBB238_3:                              // %"$5"
	bl	evList
.LBB238_4:                              // %"$7.preheader"
	adrp	x9, SymTab+200
	add	x9, x9, :lo12:SymTab+200
.LBB238_5:                              // %"$7"
                                        // =>This Inner Loop Header: Depth=1
	mov	x8, x0
	tst	x0, #0xf
	b.eq	.LBB238_7
// %bb.6:                               //   in Loop: Header=BB238_5 Depth=1
	mov	w10, wzr
	cbnz	w10, .LBB238_8
	b	.LBB238_9
.LBB238_7:                              // %"$9"
                                        //   in Loop: Header=BB238_5 Depth=1
	ldp	w11, w10, [x8]
	bfi	x11, x10, #32, #32
	cmp	x9, x11
	cset	w10, eq
	cbz	w10, .LBB238_9
.LBB238_8:                              // %"$10"
                                        //   in Loop: Header=BB238_5 Depth=1
	ldp	w0, w10, [x8, #8]
	bfi	x0, x10, #32, #32
	cmp	x0, x8
	b.ne	.LBB238_5
.LBB238_9:                              // %"$11"
	mov	x0, x8
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end238:
	.size	_strip, .Lfunc_end238-_strip
	.cfi_endproc
                                        // -- End function
	.globl	_split                          // -- Begin function _split
	.p2align	4
	.type	_split,@function
_split:                                 // @_split
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-96]!           // 16-byte Folded Spill
	stp	x28, x27, [sp, #16]             // 16-byte Folded Spill
	stp	x26, x25, [sp, #32]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #48]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #64]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #80]             // 16-byte Folded Spill
	mov	x29, sp
	sub	sp, sp, #32                     // =32
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	ldp	w21, w8, [x0, #8]
	bfi	x21, x8, #32, #32
	ldp	w19, w8, [x21]
	bfi	x19, x8, #32, #32
	tst	x19, #0x6
	b.ne	.LBB239_4
// %bb.1:                               // %"$3"
	tbz	w19, #3, .LBB239_3
// %bb.2:                               // %"$6"
	ldp	w19, w8, [x19]
	bfi	x19, x8, #32, #32
	b	.LBB239_4
.LBB239_3:                              // %"$5"
	mov	x0, x19
	bl	evList
	mov	x19, x0
.LBB239_4:                              // %"$2"
	adrp	x20, env
	ldr	x8, [x20, :lo12:env]
	mov	x9, sp
	sub	x12, x9, #16                    // =16
	mov	sp, x12
	lsr	x10, x19, #32
	lsr	x11, x8, #32
	stp	w19, w10, [x9, #-16]
	stp	w8, w11, [x9, #-8]
	tst	x19, #0xf
	str	x12, [x20, :lo12:env]
	b.ne	.LBB239_28
// %bb.5:                               // %"$10.preheader"
	stur	x12, [x29, #-24]                // 8-byte Folded Spill
	mov	x27, xzr
	adrp	x22, SymTab+8
	add	x22, x22, :lo12:SymTab+8
	mov	x26, x22
	b	.LBB239_8
.LBB239_6:                              // %"$16"
                                        //   in Loop: Header=BB239_8 Depth=1
	bl	evList
.LBB239_7:                              // %"$13"
                                        //   in Loop: Header=BB239_8 Depth=1
	mov	x8, sp
	sub	x26, x8, #16                    // =16
	mov	sp, x26
	lsr	x9, x0, #32
	stp	w0, w9, [x8, #-16]
	ldr	x9, [x20, :lo12:env]
	lsr	x10, x9, #32
	stp	w9, w10, [x8, #-8]
	str	x26, [x20, :lo12:env]
	add	x27, x27, #1                    // =1
.LBB239_8:                              // %"$10"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w21, w8, [x21, #8]
	bfi	x21, x8, #32, #32
	tst	x21, #0xf
	b.ne	.LBB239_12
// %bb.9:                               // %"$11"
                                        //   in Loop: Header=BB239_8 Depth=1
	ldp	w0, w8, [x21]
	bfi	x0, x8, #32, #32
	tst	x0, #0x6
	b.ne	.LBB239_7
// %bb.10:                              // %"$14"
                                        //   in Loop: Header=BB239_8 Depth=1
	tbz	w0, #3, .LBB239_6
// %bb.11:                              // %"$17"
                                        //   in Loop: Header=BB239_8 Depth=1
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB239_7
.LBB239_12:                             // %"$12"
	mov	x8, sp
	sub	x11, x8, #16                    // =16
	mov	sp, x11
	lsr	x12, x22, #32
	stp	w22, w12, [x8, #-16]
	ldr	x9, [x20, :lo12:env]
	lsr	x10, x9, #32
	stp	w9, w10, [x8, #-8]
	stp	x11, x12, [x29, #-16]           // 16-byte Folded Spill
	str	x11, [x20, :lo12:env]
	mov	x8, sp
	sub	x28, x8, #16                    // =16
	mov	sp, x28
	stp	w22, w12, [x8, #-16]
	ldr	x9, [x20, :lo12:env]
	lsr	x10, x9, #32
	stp	w9, w10, [x8, #-8]
	str	x28, [x20, :lo12:env]
	mov	x20, x22
	mov	x23, x22
	b	.LBB239_16
.LBB239_13:                             // %"$24"
                                        //   in Loop: Header=BB239_16 Depth=1
	add	x8, x23, #8                     // =8
.LBB239_14:                             // %"$25"
                                        //   in Loop: Header=BB239_16 Depth=1
	lsr	x9, x0, #32
	stp	w0, w9, [x8]
.LBB239_15:                             // %"$21"
                                        //   in Loop: Header=BB239_16 Depth=1
	tst	x19, #0xf
	mov	x23, x0
	b.ne	.LBB239_25
.LBB239_16:                             // %"$18"
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB239_17 Depth 2
	ldp	w21, w8, [x19]
	bfi	x21, x8, #32, #32
	ldp	w19, w8, [x19, #8]
	bfi	x19, x8, #32, #32
	mov	x24, x27
	mov	x25, x26
.LBB239_17:                             // %"$19"
                                        //   Parent Loop BB239_16 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	subs	x24, x24, #1                    // =1
	b.mi	.LBB239_21
// %bb.18:                              // %"$20"
                                        //   in Loop: Header=BB239_17 Depth=2
	ldp	w1, w8, [x25]
	bfi	x1, x8, #32, #32
	ldp	w25, w8, [x25, #8]
	bfi	x25, x8, #32, #32
	mov	x0, x21
	bl	equal
	tbz	w0, #0, .LBB239_17
// %bb.19:                              // %"$27"
                                        //   in Loop: Header=BB239_16 Depth=1
	ldp	w0, w8, [x28]
	bfi	x0, x8, #32, #32
	mov	x1, x22
	bl	cons
	cmp	x20, x22
	b.ne	.LBB239_23
// %bb.20:                              // %"$28"
                                        //   in Loop: Header=BB239_16 Depth=1
	ldur	x8, [x29, #-16]                 // 8-byte Folded Reload
	b	.LBB239_24
.LBB239_21:                             // %"$22"
                                        //   in Loop: Header=BB239_16 Depth=1
	mov	x0, x21
	mov	x1, x22
	bl	cons
	cmp	x23, x22
	b.ne	.LBB239_13
// %bb.22:                              // %"$23"
                                        //   in Loop: Header=BB239_16 Depth=1
	mov	x8, x28
	b	.LBB239_14
.LBB239_23:                             // %"$29"
                                        //   in Loop: Header=BB239_16 Depth=1
	add	x8, x20, #8                     // =8
.LBB239_24:                             // %"$30"
                                        //   in Loop: Header=BB239_16 Depth=1
	lsr	x9, x0, #32
	mov	x20, x0
	stp	w0, w9, [x8]
	mov	x0, x22
	ldur	x8, [x29, #-8]                  // 8-byte Folded Reload
	stp	w22, w8, [x28]
	b	.LBB239_15
.LBB239_25:                             // %"$32"
	ldp	w0, w8, [x28]
	bfi	x0, x8, #32, #32
	mov	x1, x22
	bl	cons
	mov	x19, x0
	cmp	x20, x22
	b.eq	.LBB239_27
// %bb.26:                              // %"$34"
	lsr	x8, x19, #32
	stp	w19, w8, [x20, #8]
	ldur	x9, [x29, #-16]                 // 8-byte Folded Reload
	ldp	w19, w8, [x9]
	bfi	x19, x8, #32, #32
.LBB239_27:                             // %"$9"
	adrp	x20, env
	ldur	x12, [x29, #-24]                // 8-byte Folded Reload
.LBB239_28:                             // %"$9"
	ldp	w9, w8, [x12, #8]
	bfi	x9, x8, #32, #32
	str	x9, [x20, :lo12:env]
	mov	x0, x19
	mov	sp, x29
	ldp	x20, x19, [sp, #80]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #64]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #48]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #32]             // 16-byte Folded Reload
	ldp	x28, x27, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #96             // 16-byte Folded Reload
	ret
.Lfunc_end239:
	.size	_split, .Lfunc_end239-_split
	.cfi_endproc
                                        // -- End function
	.globl	_reverse                        // -- Begin function _reverse
	.p2align	4
	.type	_reverse,@function
_reverse:                               // @_reverse
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-48]!           // 16-byte Folded Spill
	str	x21, [sp, #16]                  // 8-byte Folded Spill
	stp	x20, x19, [sp, #32]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 48
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -32
	.cfi_offset w30, -40
	.cfi_offset w29, -48
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w19, w8, [x9]
	bfi	x19, x8, #32, #32
	tst	x19, #0x6
	b.ne	.LBB240_4
// %bb.1:                               // %"$3"
	tbz	w19, #3, .LBB240_3
// %bb.2:                               // %"$6"
	ldp	w19, w8, [x19]
	bfi	x19, x8, #32, #32
	b	.LBB240_4
.LBB240_3:                              // %"$5"
	mov	x0, x19
	bl	evList
	mov	x19, x0
.LBB240_4:                              // %"$2"
	adrp	x20, env
	ldr	x8, [x20, :lo12:env]
	mov	x9, sp
	sub	x21, x9, #16                    // =16
	mov	sp, x21
	lsr	x10, x19, #32
	lsr	x11, x8, #32
	stp	w19, w10, [x9, #-16]
	stp	w8, w11, [x9, #-8]
	adrp	x1, SymTab+8
	add	x1, x1, :lo12:SymTab+8
	str	x21, [x20, :lo12:env]
	tst	x19, #0xf
	b.ne	.LBB240_6
.LBB240_5:                              // %"$8"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w0, w8, [x19]
	bfi	x0, x8, #32, #32
	ldp	w19, w8, [x19, #8]
	bfi	x19, x8, #32, #32
	bl	cons
	mov	x1, x0
	tst	x19, #0xf
	b.eq	.LBB240_5
.LBB240_6:                              // %"$9"
	ldp	w9, w8, [x21, #8]
	bfi	x9, x8, #32, #32
	str	x9, [x20, :lo12:env]
	mov	x0, x1
	mov	sp, x29
	ldp	x20, x19, [sp, #32]             // 16-byte Folded Reload
	ldr	x21, [sp, #16]                  // 8-byte Folded Reload
	ldp	x29, x30, [sp], #48             // 16-byte Folded Reload
	ret
.Lfunc_end240:
	.size	_reverse, .Lfunc_end240-_reverse
	.cfi_endproc
                                        // -- End function
	.globl	_flip                           // -- Begin function _flip
	.p2align	4
	.type	_flip,@function
_flip:                                  // @_flip
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-64]!           // 16-byte Folded Spill
	stp	x24, x23, [sp, #16]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #32]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #48]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 64
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w30, -56
	.cfi_offset w29, -64
	mov	x21, x0
	ldp	w20, w8, [x0, #8]
	bfi	x20, x8, #32, #32
	ldp	w19, w8, [x20]
	bfi	x19, x8, #32, #32
	tst	x19, #0x6
	b.eq	.LBB241_6
// %bb.1:                               // %"$2"
	tst	x19, #0xf
	b.ne	.LBB241_9
.LBB241_2:                              // %"$8"
	ldp	w22, w8, [x19, #8]
	bfi	x22, x8, #32, #32
	tst	x22, #0xf
	b.ne	.LBB241_9
// %bb.3:                               // %"$11"
	ldp	w20, w8, [x20, #8]
	bfi	x20, x8, #32, #32
	tst	x20, #0xf
	b.eq	.LBB241_11
// %bb.4:                               // %"$14"
	adrp	x8, SymTab+8
	add	x8, x8, :lo12:SymTab+8
	lsr	x9, x8, #32
	stp	w8, w9, [x19, #8]
.LBB241_5:                              // %"$15"
                                        // =>This Inner Loop Header: Depth=1
	mov	x0, x22
	mov	x8, x22
	ldr	w22, [x8, #8]!
	ldr	w9, [x8, #4]
	bfi	x22, x9, #32, #32
	lsr	x9, x19, #32
	stp	w19, w9, [x8]
	tst	x22, #0xf
	mov	x19, x0
	b.eq	.LBB241_5
	b	.LBB241_10
.LBB241_6:                              // %"$3"
	tbz	w19, #3, .LBB241_8
// %bb.7:                               // %"$6"
	ldp	w19, w8, [x19]
	bfi	x19, x8, #32, #32
	tst	x19, #0xf
	b.ne	.LBB241_9
	b	.LBB241_2
.LBB241_8:                              // %"$5"
	mov	x0, x19
	bl	evList
	mov	x19, x0
	tst	x19, #0xf
	b.eq	.LBB241_2
.LBB241_9:
	mov	x0, x19
.LBB241_10:                             // %"$9"
	mov	sp, x29
	ldp	x20, x19, [sp, #48]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #32]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #64             // 16-byte Folded Reload
	ret
.LBB241_11:                             // %"$13"
	adrp	x23, env
	ldr	x8, [x23, :lo12:env]
	mov	x9, sp
	sub	x10, x9, #16                    // =16
	mov	sp, x10
	lsr	x11, x19, #32
	mov	x24, x10
	stp	w19, w11, [x9, #-16]
	str	w8, [x24, #8]!
	lsr	x8, x8, #32
	str	w8, [x24, #4]
	str	x10, [x23, :lo12:env]
	mov	x0, x21
	mov	x1, x20
	bl	evCnt
	ldp	w9, w8, [x24]
	bfi	x9, x8, #32, #32
	str	x9, [x23, :lo12:env]
	sub	x8, x0, #1                      // =1
	cmp	x8, #1                          // =1
	b.lt	.LBB241_9
// %bb.12:                              // %"$22.preheader"
	mov	x0, x19
	b	.LBB241_14
.LBB241_13:                             //   in Loop: Header=BB241_14 Depth=1
	mov	w9, #1
	mov	x22, x20
	cbnz	w9, .LBB241_10
.LBB241_14:                             // %"$22"
                                        // =>This Inner Loop Header: Depth=1
	mov	x9, x0
	mov	x0, x22
	mov	x10, x22
	ldr	w11, [x10, #8]!
	ldr	w12, [x10, #4]
	stp	w11, w12, [x19, #8]
	lsr	x11, x9, #32
	stp	w9, w11, [x10]
	subs	x8, x8, #1                      // =1
	b.eq	.LBB241_13
// %bb.15:                              // %"$24"
                                        //   in Loop: Header=BB241_14 Depth=1
	ldp	w20, w9, [x19, #8]
	bfi	x20, x9, #32, #32
	tst	x20, #0xf
	cset	w9, ne
	mov	x22, x20
	cbz	w9, .LBB241_14
	b	.LBB241_10
.Lfunc_end241:
	.size	_flip, .Lfunc_end241-_flip
	.cfi_endproc
                                        // -- End function
	.globl	_trim                           // -- Begin function _trim
	.p2align	4
	.type	_trim,@function
_trim:                                  // @_trim
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-32]!           // 16-byte Folded Spill
	stp	x20, x19, [sp, #16]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 32
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w30, -24
	.cfi_offset w29, -32
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w0, w8, [x9]
	bfi	x0, x8, #32, #32
	tst	x0, #0x6
	b.ne	.LBB242_4
// %bb.1:                               // %"$3"
	tbz	w0, #3, .LBB242_3
// %bb.2:                               // %"$6"
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB242_4
.LBB242_3:                              // %"$5"
	bl	evList
.LBB242_4:                              // %"$2"
	adrp	x19, env
	ldr	x8, [x19, :lo12:env]
	mov	x9, sp
	sub	x10, x9, #16                    // =16
	mov	sp, x10
	lsr	x11, x0, #32
	mov	x20, x10
	stp	w0, w11, [x9, #-16]
	str	w8, [x20, #8]!
	lsr	x8, x8, #32
	str	w8, [x20, #4]
	str	x10, [x19, :lo12:env]
	bl	trim
	ldp	w9, w8, [x20]
	bfi	x9, x8, #32, #32
	str	x9, [x19, :lo12:env]
	mov	sp, x29
	ldp	x20, x19, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #32             // 16-byte Folded Reload
	ret
.Lfunc_end242:
	.size	_trim, .Lfunc_end242-_trim
	.cfi_endproc
                                        // -- End function
	.globl	_clip                           // -- Begin function _clip
	.p2align	4
	.type	_clip,@function
_clip:                                  // @_clip
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-48]!           // 16-byte Folded Spill
	str	x21, [sp, #16]                  // 8-byte Folded Spill
	stp	x20, x19, [sp, #32]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 48
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -32
	.cfi_offset w30, -40
	.cfi_offset w29, -48
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w19, w8, [x9]
	bfi	x19, x8, #32, #32
	tst	x19, #0x6
	b.ne	.LBB243_4
// %bb.1:                               // %"$3"
	tbz	w19, #3, .LBB243_3
// %bb.2:                               // %"$6"
	ldp	w19, w8, [x19]
	bfi	x19, x8, #32, #32
	tst	x19, #0xf
	b.ne	.LBB243_5
	b	.LBB243_6
.LBB243_3:                              // %"$5"
	mov	x0, x19
	bl	evList
	mov	x19, x0
.LBB243_4:                              // %"$7"
	tst	x19, #0xf
	b.eq	.LBB243_6
.LBB243_5:
	mov	w0, wzr
	tbnz	w0, #0, .LBB243_7
	b	.LBB243_8
.LBB243_6:                              // %"$9"
	ldp	w0, w8, [x19]
	bfi	x0, x8, #32, #32
	bl	isBlank
	tbz	w0, #0, .LBB243_8
.LBB243_7:                              // %"$10"
	ldp	w19, w8, [x19, #8]
	bfi	x19, x8, #32, #32
	tst	x19, #0xf
	b.ne	.LBB243_5
	b	.LBB243_6
.LBB243_8:                              // %"$11"
	adrp	x20, env
	ldr	x8, [x20, :lo12:env]
	mov	x9, sp
	sub	x10, x9, #16                    // =16
	mov	sp, x10
	lsr	x11, x19, #32
	mov	x21, x10
	stp	w19, w11, [x9, #-16]
	str	w8, [x21, #8]!
	lsr	x8, x8, #32
	str	w8, [x21, #4]
	str	x10, [x20, :lo12:env]
	mov	x0, x19
	bl	trim
	ldp	w9, w8, [x21]
	bfi	x9, x8, #32, #32
	str	x9, [x20, :lo12:env]
	mov	sp, x29
	ldp	x20, x19, [sp, #32]             // 16-byte Folded Reload
	ldr	x21, [sp, #16]                  // 8-byte Folded Reload
	ldp	x29, x30, [sp], #48             // 16-byte Folded Reload
	ret
.Lfunc_end243:
	.size	_clip, .Lfunc_end243-_clip
	.cfi_endproc
                                        // -- End function
	.globl	_head                           // -- Begin function _head
	.p2align	4
	.type	_head,@function
_head:                                  // @_head
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-80]!           // 16-byte Folded Spill
	str	x25, [sp, #16]                  // 8-byte Folded Spill
	stp	x24, x23, [sp, #32]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #48]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #64]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 80
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -64
	.cfi_offset w30, -72
	.cfi_offset w29, -80
	mov	x20, x0
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w19, w8, [x9]
	bfi	x19, x8, #32, #32
	ldp	w23, w21, [x9, #8]
	tst	x19, #0x6
	b.ne	.LBB244_4
// %bb.1:                               // %"$3"
	tbz	w19, #3, .LBB244_3
// %bb.2:                               // %"$6"
	ldp	w19, w8, [x19]
	bfi	x19, x8, #32, #32
	b	.LBB244_4
.LBB244_3:                              // %"$5"
	mov	x0, x19
	bl	evList
	mov	x19, x0
.LBB244_4:                              // %"$2"
	adrp	x8, SymTab+8
	add	x8, x8, :lo12:SymTab+8
	cmp	x19, x8
	b.eq	.LBB244_27
// %bb.5:                               // %"$8"
	bfi	x23, x21, #32, #32
	tst	x19, #0xf
	b.eq	.LBB244_10
// %bb.6:                               // %"$10"
	mov	x0, x20
	mov	x1, x19
	bl	xCnt
	cbz	x0, .LBB244_26
// %bb.7:                               // %"$25"
	mov	x20, x0
	ldp	w21, w8, [x23]
	bfi	x21, x8, #32, #32
	tst	x21, #0x6
	b.eq	.LBB244_13
// %bb.8:                               // %"$27"
	tst	x21, #0xf
	b.eq	.LBB244_24
.LBB244_9:
	mov	x19, x21
	b	.LBB244_27
.LBB244_10:                             // %"$11"
	adrp	x21, env
	ldr	x8, [x21, :lo12:env]
	mov	x9, sp
	sub	x22, x9, #16                    // =16
	mov	sp, x22
	lsr	x10, x19, #32
	stp	w19, w10, [x9, #-16]
	lsr	x10, x8, #32
	stp	w8, w10, [x9, #-8]
	str	x22, [x21, :lo12:env]
	ldp	w20, w8, [x23]
	bfi	x20, x8, #32, #32
	tst	x20, #0x6
	b.ne	.LBB244_16
// %bb.11:                              // %"$13"
	tbz	w20, #3, .LBB244_15
// %bb.12:                              // %"$16"
	ldp	w20, w8, [x20]
	bfi	x20, x8, #32, #32
	b	.LBB244_16
.LBB244_13:                             // %"$28"
	tbz	w21, #3, .LBB244_23
// %bb.14:                              // %"$31"
	ldp	w21, w8, [x21]
	bfi	x21, x8, #32, #32
	tst	x21, #0xf
	b.ne	.LBB244_9
	b	.LBB244_24
.LBB244_15:                             // %"$15"
	mov	x0, x20
	bl	evList
	mov	x20, x0
.LBB244_16:                             // %"$17.preheader"
	mov	x24, x19
	adrp	x23, SymTab+8
	add	x23, x23, :lo12:SymTab+8
	tst	x20, #0xf
	b.ne	.LBB244_19
	b	.LBB244_18
.LBB244_17:                             // %"$23"
	ldp	w20, w8, [x20, #8]
	bfi	x20, x8, #32, #32
	tst	x20, #0xf
	b.ne	.LBB244_19
.LBB244_18:                             // %"$19"
	ldp	w0, w8, [x24]
	bfi	x0, x8, #32, #32
	ldp	w1, w8, [x20]
	bfi	x1, x8, #32, #32
	bl	equal
	eor	w8, w0, #0x1
	tbz	w8, #0, .LBB244_20
	b	.LBB244_21
.LBB244_19:
	mov	w8, #1
	tbnz	w8, #0, .LBB244_21
.LBB244_20:                             // %"$20"
	ldp	w24, w8, [x24, #8]
	bfi	x24, x8, #32, #32
	tst	x24, #0xf
	b.eq	.LBB244_17
	b	.LBB244_22
.LBB244_21:
	mov	x19, x23
.LBB244_22:                             // %"$21"
	ldp	w9, w8, [x22, #8]
	bfi	x9, x8, #32, #32
	str	x9, [x21, :lo12:env]
	b	.LBB244_27
.LBB244_23:                             // %"$30"
	mov	x0, x21
	bl	evList
	mov	x21, x0
	tst	x21, #0xf
	b.ne	.LBB244_9
.LBB244_24:                             // %"$33"
	tbnz	x20, #63, .LBB244_28
// %bb.25:
	mov	w8, wzr
	tbz	w8, #0, .LBB244_31
.LBB244_26:
	adrp	x19, SymTab+8
	add	x19, x19, :lo12:SymTab+8
.LBB244_27:                             // %"$7"
	mov	x0, x19
	mov	sp, x29
	ldp	x20, x19, [sp, #64]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #48]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #32]             // 16-byte Folded Reload
	ldr	x25, [sp, #16]                  // 8-byte Folded Reload
	ldp	x29, x30, [sp], #80             // 16-byte Folded Reload
	ret
.LBB244_28:                             // %"$36"
	mov	x8, xzr
	mov	x9, x21
	tst	x9, #0xf
	b.ne	.LBB244_30
.LBB244_29:                             // %"$38"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w9, w10, [x9, #8]
	bfi	x9, x10, #32, #32
	add	x8, x8, #1                      // =1
	tst	x9, #0xf
	b.eq	.LBB244_29
.LBB244_30:                             // %"$39"
	add	x20, x20, x8
	cmp	x20, #1                         // =1
	cset	w8, lt
	tbnz	w8, #0, .LBB244_26
.LBB244_31:                             // %"$40"
	adrp	x23, env
	ldr	x8, [x23, :lo12:env]
	mov	x9, sp
	sub	x24, x9, #16                    // =16
	mov	sp, x24
	lsr	x10, x21, #32
	stp	w21, w10, [x9, #-16]
	lsr	x10, x8, #32
	stp	w8, w10, [x9, #-8]
	str	x24, [x23, :lo12:env]
	ldp	w0, w8, [x21]
	bfi	x0, x8, #32, #32
	adrp	x22, SymTab+8
	add	x22, x22, :lo12:SymTab+8
	mov	x1, x22
	bl	cons
	mov	x19, x0
	ldr	x8, [x23, :lo12:env]
	mov	x9, sp
	sub	x10, x9, #16                    // =16
	mov	sp, x10
	lsr	x11, x0, #32
	lsr	x12, x8, #32
	stp	w19, w11, [x9, #-16]
	stp	w8, w12, [x9, #-8]
	mov	x25, x0
	str	x10, [x23, :lo12:env]
	subs	x20, x20, #1                    // =1
	b.ne	.LBB244_34
	b	.LBB244_33
.LBB244_32:                             // %"$45"
	ldp	w0, w8, [x21]
	bfi	x0, x8, #32, #32
	mov	x1, x22
	bl	cons
	lsr	x8, x0, #32
	stp	w0, w8, [x25, #8]
	mov	x25, x0
	subs	x20, x20, #1                    // =1
	b.ne	.LBB244_34
.LBB244_33:
	mov	w8, wzr
	cbnz	w8, .LBB244_32
	b	.LBB244_35
.LBB244_34:                             // %"$44"
	ldp	w21, w8, [x21, #8]
	bfi	x21, x8, #32, #32
	tst	x21, #0xf
	cset	w8, eq
	cbnz	w8, .LBB244_32
.LBB244_35:                             // %"$46"
	ldp	w9, w8, [x24, #8]
	bfi	x9, x8, #32, #32
	str	x9, [x23, :lo12:env]
	b	.LBB244_27
.Lfunc_end244:
	.size	_head, .Lfunc_end244-_head
	.cfi_endproc
                                        // -- End function
	.globl	_tail                           // -- Begin function _tail
	.p2align	4
	.type	_tail,@function
_tail:                                  // @_tail
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-64]!           // 16-byte Folded Spill
	str	x23, [sp, #16]                  // 8-byte Folded Spill
	stp	x22, x21, [sp, #32]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #48]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 64
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -48
	.cfi_offset w30, -56
	.cfi_offset w29, -64
	mov	x20, x0
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w19, w8, [x9]
	bfi	x19, x8, #32, #32
	ldp	w23, w21, [x9, #8]
	tst	x19, #0x6
	b.ne	.LBB245_4
// %bb.1:                               // %"$3"
	tbz	w19, #3, .LBB245_3
// %bb.2:                               // %"$6"
	ldp	w19, w8, [x19]
	bfi	x19, x8, #32, #32
	b	.LBB245_4
.LBB245_3:                              // %"$5"
	mov	x0, x19
	bl	evList
	mov	x19, x0
.LBB245_4:                              // %"$2"
	adrp	x8, SymTab+8
	add	x8, x8, :lo12:SymTab+8
	cmp	x19, x8
	b.eq	.LBB245_30
// %bb.5:                               // %"$8"
	bfi	x23, x21, #32, #32
	tst	x19, #0xf
	b.eq	.LBB245_18
// %bb.6:                               // %"$10"
	mov	x0, x20
	mov	x1, x19
	bl	xCnt
	cbz	x0, .LBB245_21
// %bb.7:                               // %"$25"
	mov	x20, x0
	ldp	w19, w8, [x23]
	bfi	x19, x8, #32, #32
	tst	x19, #0x6
	b.ne	.LBB245_10
// %bb.8:                               // %"$28"
	tbz	w19, #3, .LBB245_22
// %bb.9:                               // %"$31"
	ldp	w19, w8, [x19]
	bfi	x19, x8, #32, #32
.LBB245_10:                             // %"$27"
	tst	x19, #0xf
	b.ne	.LBB245_30
.LBB245_11:                             // %"$33"
	tbnz	x20, #63, .LBB245_17
// %bb.12:
	mov	x8, x19
.LBB245_13:                             // %"$41"
                                        // =>This Inner Loop Header: Depth=1
	subs	x20, x20, #1                    // =1
	b.eq	.LBB245_16
// %bb.14:                              // %"$42"
                                        //   in Loop: Header=BB245_13 Depth=1
	ldp	w8, w9, [x8, #8]
	bfi	x8, x9, #32, #32
	tst	x8, #0xf
	b.eq	.LBB245_13
	b	.LBB245_16
.LBB245_15:                             // %"$46"
                                        //   in Loop: Header=BB245_16 Depth=1
	ldp	w19, w9, [x19, #8]
	bfi	x19, x9, #32, #32
.LBB245_16:                             // %"$45"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w8, w9, [x8, #8]
	bfi	x8, x9, #32, #32
	tst	x8, #0xf
	b.eq	.LBB245_15
	b	.LBB245_30
.LBB245_17:                             // %"$37"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w19, w8, [x19, #8]
	bfi	x19, x8, #32, #32
	adds	x20, x20, #1                    // =1
	b.lo	.LBB245_17
	b	.LBB245_30
.LBB245_18:                             // %"$11"
	adrp	x21, env
	ldr	x8, [x21, :lo12:env]
	mov	x9, sp
	sub	x22, x9, #16                    // =16
	mov	sp, x22
	lsr	x10, x19, #32
	stp	w19, w10, [x9, #-16]
	lsr	x10, x8, #32
	stp	w8, w10, [x9, #-8]
	str	x22, [x21, :lo12:env]
	ldp	w20, w8, [x23]
	bfi	x20, x8, #32, #32
	tst	x20, #0x6
	b.ne	.LBB245_24
// %bb.19:                              // %"$13"
	tbz	w20, #3, .LBB245_23
// %bb.20:                              // %"$16"
	ldp	w20, w8, [x20]
	bfi	x20, x8, #32, #32
	b	.LBB245_24
.LBB245_21:
	adrp	x19, SymTab+8
	add	x19, x19, :lo12:SymTab+8
	b	.LBB245_30
.LBB245_22:                             // %"$30"
	mov	x0, x19
	bl	evList
	mov	x19, x0
	tst	x19, #0xf
	b.ne	.LBB245_30
	b	.LBB245_11
.LBB245_23:                             // %"$15"
	mov	x0, x20
	bl	evList
	mov	x20, x0
.LBB245_24:                             // %"$17.preheader"
	adrp	x23, SymTab+8
	add	x23, x23, :lo12:SymTab+8
.LBB245_25:                             // %"$17"
                                        // =>This Inner Loop Header: Depth=1
	tst	x20, #0xf
	b.ne	.LBB245_28
// %bb.26:                              // %"$18"
                                        //   in Loop: Header=BB245_25 Depth=1
	mov	x0, x20
	mov	x1, x19
	bl	equal
	tbnz	w0, #0, .LBB245_29
// %bb.27:                              // %"$21"
                                        //   in Loop: Header=BB245_25 Depth=1
	ldp	w20, w8, [x20, #8]
	bfi	x20, x8, #32, #32
	tst	x20, #0xf
	b.eq	.LBB245_25
.LBB245_28:
	mov	x19, x23
.LBB245_29:                             // %"$19"
	ldp	w9, w8, [x22, #8]
	bfi	x9, x8, #32, #32
	str	x9, [x21, :lo12:env]
.LBB245_30:                             // %"$7"
	mov	x0, x19
	mov	sp, x29
	ldp	x20, x19, [sp, #48]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #32]             // 16-byte Folded Reload
	ldr	x23, [sp, #16]                  // 8-byte Folded Reload
	ldp	x29, x30, [sp], #64             // 16-byte Folded Reload
	ret
.Lfunc_end245:
	.size	_tail, .Lfunc_end245-_tail
	.cfi_endproc
                                        // -- End function
	.globl	_stem                           // -- Begin function _stem
	.p2align	4
	.type	_stem,@function
_stem:                                  // @_stem
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-80]!           // 16-byte Folded Spill
	stp	x26, x25, [sp, #16]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #32]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #48]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #64]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 80
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w30, -72
	.cfi_offset w29, -80
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w19, w8, [x9]
	bfi	x19, x8, #32, #32
	ldp	w20, w8, [x9, #8]
	bfi	x20, x8, #32, #32
	tst	x19, #0x6
	b.ne	.LBB246_4
// %bb.1:                               // %"$3"
	tbz	w19, #3, .LBB246_3
// %bb.2:                               // %"$6"
	ldp	w19, w8, [x19]
	bfi	x19, x8, #32, #32
	b	.LBB246_4
.LBB246_3:                              // %"$5"
	mov	x0, x19
	bl	evList
	mov	x19, x0
.LBB246_4:                              // %"$2"
	adrp	x21, env
	ldr	x8, [x21, :lo12:env]
	mov	x9, sp
	sub	x22, x9, #16                    // =16
	mov	sp, x22
	lsr	x10, x19, #32
	lsr	x11, x8, #32
	stp	w19, w10, [x9, #-16]
	stp	w8, w11, [x9, #-8]
	tst	x20, #0xf
	str	x22, [x21, :lo12:env]
	b.eq	.LBB246_6
// %bb.5:
	mov	x20, x19
	b	.LBB246_19
.LBB246_6:                              // %"$10.preheader"
	mov	w23, #1
.LBB246_7:                              // %"$10"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w0, w8, [x20]
	bfi	x0, x8, #32, #32
	tst	x0, #0x6
	b.ne	.LBB246_11
// %bb.8:                               // %"$12"
                                        //   in Loop: Header=BB246_7 Depth=1
	tbz	w0, #3, .LBB246_10
// %bb.9:                               // %"$15"
                                        //   in Loop: Header=BB246_7 Depth=1
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB246_11
.LBB246_10:                             // %"$14"
                                        //   in Loop: Header=BB246_7 Depth=1
	bl	evList
.LBB246_11:                             // %"$11"
                                        //   in Loop: Header=BB246_7 Depth=1
	mov	x8, sp
	sub	x24, x8, #16                    // =16
	mov	sp, x24
	lsr	x9, x0, #32
	stp	w0, w9, [x8, #-16]
	ldr	x9, [x21, :lo12:env]
	lsr	x10, x9, #32
	stp	w9, w10, [x8, #-8]
	str	x24, [x21, :lo12:env]
	ldp	w20, w8, [x20, #8]
	bfi	x20, x8, #32, #32
	tst	x20, #0xf
	b.ne	.LBB246_13
// %bb.12:                              // %"$16"
                                        //   in Loop: Header=BB246_7 Depth=1
	add	x23, x23, #1                    // =1
	b	.LBB246_7
.LBB246_13:                             // %"$19.preheader"
	mov	x20, x19
	mov	x25, x24
	mov	x26, x23
	b	.LBB246_16
.LBB246_14:                             // %"$20"
                                        //   in Loop: Header=BB246_16 Depth=1
	subs	x26, x26, #1                    // =1
	b.eq	.LBB246_18
// %bb.15:                              // %"$23"
                                        //   in Loop: Header=BB246_16 Depth=1
	ldp	w25, w8, [x25, #8]
	bfi	x25, x8, #32, #32
.LBB246_16:                             // %"$19"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w0, w8, [x19]
	bfi	x0, x8, #32, #32
	ldp	w1, w8, [x25]
	bfi	x1, x8, #32, #32
	bl	equal
	tbz	w0, #0, .LBB246_14
// %bb.17:                              // %"$22"
                                        //   in Loop: Header=BB246_16 Depth=1
	ldp	w20, w8, [x19, #8]
	bfi	x20, x8, #32, #32
.LBB246_18:                             // %"$21"
                                        //   in Loop: Header=BB246_16 Depth=1
	ldp	w19, w8, [x19, #8]
	bfi	x19, x8, #32, #32
	tst	x19, #0xf
	mov	x25, x24
	mov	x26, x23
	b.eq	.LBB246_16
.LBB246_19:                             // %"$9"
	ldp	w9, w8, [x22, #8]
	bfi	x9, x8, #32, #32
	str	x9, [x21, :lo12:env]
	mov	x0, x20
	mov	sp, x29
	ldp	x20, x19, [sp, #64]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #48]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #32]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #80             // 16-byte Folded Reload
	ret
.Lfunc_end246:
	.size	_stem, .Lfunc_end246-_stem
	.cfi_endproc
                                        // -- End function
	.globl	_fin                            // -- Begin function _fin
	.p2align	4
	.type	_fin,@function
_fin:                                   // @_fin
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w0, w8, [x9]
	bfi	x0, x8, #32, #32
	tst	x0, #0x6
	b.ne	.LBB247_5
// %bb.1:                               // %"$3"
	tbz	w0, #3, .LBB247_3
// %bb.2:                               // %"$6"
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB247_5
.LBB247_3:                              // %"$5"
	bl	evList
	b	.LBB247_5
.LBB247_4:                              // %"$8"
                                        //   in Loop: Header=BB247_5 Depth=1
	ldp	w0, w8, [x0, #8]
	bfi	x0, x8, #32, #32
.LBB247_5:                              // %"$7"
                                        // =>This Inner Loop Header: Depth=1
	tst	x0, #0xf
	b.eq	.LBB247_4
// %bb.6:                               // %"$9"
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end247:
	.size	_fin, .Lfunc_end247-_fin
	.cfi_endproc
                                        // -- End function
	.globl	_last                           // -- Begin function _last
	.p2align	4
	.type	_last,@function
_last:                                  // @_last
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w0, w8, [x9]
	bfi	x0, x8, #32, #32
	tst	x0, #0x6
	b.eq	.LBB248_3
// %bb.1:                               // %"$2"
	tst	x0, #0xf
	b.eq	.LBB248_6
.LBB248_2:                              // %"$9"
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.LBB248_3:                              // %"$3"
	tbz	w0, #3, .LBB248_5
// %bb.4:                               // %"$6"
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	tst	x0, #0xf
	b.ne	.LBB248_2
	b	.LBB248_6
.LBB248_5:                              // %"$5"
	bl	evList
	tst	x0, #0xf
	b.ne	.LBB248_2
.LBB248_6:                              // %"$10"
                                        // =>This Inner Loop Header: Depth=1
	mov	x8, x0
	ldp	w0, w9, [x0, #8]
	bfi	x0, x9, #32, #32
	tst	x0, #0xf
	b.eq	.LBB248_6
// %bb.7:                               // %"$12"
	ldp	w0, w9, [x8]
	bfi	x0, x9, #32, #32
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end248:
	.size	_last, .Lfunc_end248-_last
	.cfi_endproc
                                        // -- End function
	.globl	_eq                             // -- Begin function _eq
	.p2align	4
	.type	_eq,@function
_eq:                                    // @_eq
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-64]!           // 16-byte Folded Spill
	stp	x24, x23, [sp, #16]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #32]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #48]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 64
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w30, -56
	.cfi_offset w29, -64
	ldp	w21, w8, [x0, #8]
	bfi	x21, x8, #32, #32
	ldp	w19, w8, [x21]
	bfi	x19, x8, #32, #32
	tst	x19, #0x6
	b.ne	.LBB249_4
// %bb.1:                               // %"$3"
	tbz	w19, #3, .LBB249_3
// %bb.2:                               // %"$6"
	ldp	w19, w8, [x19]
	bfi	x19, x8, #32, #32
	b	.LBB249_4
.LBB249_3:                              // %"$5"
	mov	x0, x19
	bl	evList
	mov	x19, x0
.LBB249_4:                              // %"$2"
	adrp	x22, env
	ldr	x8, [x22, :lo12:env]
	mov	x9, sp
	sub	x23, x9, #16                    // =16
	mov	sp, x23
	lsr	x10, x19, #32
	lsr	x11, x8, #32
	stp	w19, w10, [x9, #-16]
	stp	w8, w11, [x9, #-8]
	adrp	x20, SymTab+216
	add	x20, x20, :lo12:SymTab+216
	adrp	x24, SymTab+8
	add	x24, x24, :lo12:SymTab+8
	str	x23, [x22, :lo12:env]
	b	.LBB249_7
.LBB249_5:                              // %"$14"
                                        //   in Loop: Header=BB249_7 Depth=1
	bl	evList
.LBB249_6:                              // %"$11"
                                        //   in Loop: Header=BB249_7 Depth=1
	cmp	x19, x0
	b.ne	.LBB249_11
.LBB249_7:                              // %"$7"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w21, w8, [x21, #8]
	bfi	x21, x8, #32, #32
	tst	x21, #0xf
	b.ne	.LBB249_12
// %bb.8:                               // %"$8"
                                        //   in Loop: Header=BB249_7 Depth=1
	ldp	w0, w8, [x21]
	bfi	x0, x8, #32, #32
	tst	x0, #0x6
	b.ne	.LBB249_6
// %bb.9:                               // %"$12"
                                        //   in Loop: Header=BB249_7 Depth=1
	tbz	w0, #3, .LBB249_5
// %bb.10:                              // %"$15"
                                        //   in Loop: Header=BB249_7 Depth=1
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB249_6
.LBB249_11:
	mov	x20, x24
.LBB249_12:                             // %"$9"
	ldp	w9, w8, [x23, #8]
	bfi	x9, x8, #32, #32
	str	x9, [x22, :lo12:env]
	mov	x0, x20
	mov	sp, x29
	ldp	x20, x19, [sp, #48]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #32]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #64             // 16-byte Folded Reload
	ret
.Lfunc_end249:
	.size	_eq, .Lfunc_end249-_eq
	.cfi_endproc
                                        // -- End function
	.globl	_neq                            // -- Begin function _neq
	.p2align	4
	.type	_neq,@function
_neq:                                   // @_neq
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-64]!           // 16-byte Folded Spill
	stp	x24, x23, [sp, #16]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #32]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #48]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 64
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w30, -56
	.cfi_offset w29, -64
	ldp	w21, w8, [x0, #8]
	bfi	x21, x8, #32, #32
	ldp	w19, w8, [x21]
	bfi	x19, x8, #32, #32
	tst	x19, #0x6
	b.ne	.LBB250_4
// %bb.1:                               // %"$3"
	tbz	w19, #3, .LBB250_3
// %bb.2:                               // %"$6"
	ldp	w19, w8, [x19]
	bfi	x19, x8, #32, #32
	b	.LBB250_4
.LBB250_3:                              // %"$5"
	mov	x0, x19
	bl	evList
	mov	x19, x0
.LBB250_4:                              // %"$2"
	adrp	x22, env
	ldr	x8, [x22, :lo12:env]
	mov	x9, sp
	sub	x23, x9, #16                    // =16
	mov	sp, x23
	lsr	x10, x19, #32
	lsr	x11, x8, #32
	stp	w19, w10, [x9, #-16]
	stp	w8, w11, [x9, #-8]
	adrp	x20, SymTab+8
	add	x20, x20, :lo12:SymTab+8
	adrp	x24, SymTab+216
	add	x24, x24, :lo12:SymTab+216
	str	x23, [x22, :lo12:env]
	b	.LBB250_7
.LBB250_5:                              // %"$14"
                                        //   in Loop: Header=BB250_7 Depth=1
	bl	evList
.LBB250_6:                              // %"$11"
                                        //   in Loop: Header=BB250_7 Depth=1
	cmp	x19, x0
	b.ne	.LBB250_11
.LBB250_7:                              // %"$7"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w21, w8, [x21, #8]
	bfi	x21, x8, #32, #32
	tst	x21, #0xf
	b.ne	.LBB250_12
// %bb.8:                               // %"$8"
                                        //   in Loop: Header=BB250_7 Depth=1
	ldp	w0, w8, [x21]
	bfi	x0, x8, #32, #32
	tst	x0, #0x6
	b.ne	.LBB250_6
// %bb.9:                               // %"$12"
                                        //   in Loop: Header=BB250_7 Depth=1
	tbz	w0, #3, .LBB250_5
// %bb.10:                              // %"$15"
                                        //   in Loop: Header=BB250_7 Depth=1
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB250_6
.LBB250_11:
	mov	x20, x24
.LBB250_12:                             // %"$9"
	ldp	w9, w8, [x23, #8]
	bfi	x9, x8, #32, #32
	str	x9, [x22, :lo12:env]
	mov	x0, x20
	mov	sp, x29
	ldp	x20, x19, [sp, #48]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #32]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #64             // 16-byte Folded Reload
	ret
.Lfunc_end250:
	.size	_neq, .Lfunc_end250-_neq
	.cfi_endproc
                                        // -- End function
	.globl	_equal                          // -- Begin function _equal
	.p2align	4
	.type	_equal,@function
_equal:                                 // @_equal
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-64]!           // 16-byte Folded Spill
	stp	x24, x23, [sp, #16]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #32]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #48]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 64
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w30, -56
	.cfi_offset w29, -64
	ldp	w21, w8, [x0, #8]
	bfi	x21, x8, #32, #32
	ldp	w19, w8, [x21]
	bfi	x19, x8, #32, #32
	tst	x19, #0x6
	b.ne	.LBB251_4
// %bb.1:                               // %"$3"
	tbz	w19, #3, .LBB251_3
// %bb.2:                               // %"$6"
	ldp	w19, w8, [x19]
	bfi	x19, x8, #32, #32
	b	.LBB251_4
.LBB251_3:                              // %"$5"
	mov	x0, x19
	bl	evList
	mov	x19, x0
.LBB251_4:                              // %"$2"
	adrp	x22, env
	ldr	x8, [x22, :lo12:env]
	mov	x9, sp
	sub	x23, x9, #16                    // =16
	mov	sp, x23
	lsr	x10, x19, #32
	lsr	x11, x8, #32
	stp	w19, w10, [x9, #-16]
	stp	w8, w11, [x9, #-8]
	adrp	x20, SymTab+216
	add	x20, x20, :lo12:SymTab+216
	adrp	x24, SymTab+8
	add	x24, x24, :lo12:SymTab+8
	str	x23, [x22, :lo12:env]
	b	.LBB251_7
.LBB251_5:                              // %"$14"
                                        //   in Loop: Header=BB251_7 Depth=1
	mov	x0, x1
	bl	evList
	mov	x1, x0
.LBB251_6:                              // %"$11"
                                        //   in Loop: Header=BB251_7 Depth=1
	mov	x0, x19
	bl	equal
	tbz	w0, #0, .LBB251_11
.LBB251_7:                              // %"$7"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w21, w8, [x21, #8]
	bfi	x21, x8, #32, #32
	tst	x21, #0xf
	b.ne	.LBB251_12
// %bb.8:                               // %"$8"
                                        //   in Loop: Header=BB251_7 Depth=1
	ldp	w1, w8, [x21]
	bfi	x1, x8, #32, #32
	tst	x1, #0x6
	b.ne	.LBB251_6
// %bb.9:                               // %"$12"
                                        //   in Loop: Header=BB251_7 Depth=1
	tbz	w1, #3, .LBB251_5
// %bb.10:                              // %"$15"
                                        //   in Loop: Header=BB251_7 Depth=1
	ldp	w1, w8, [x1]
	bfi	x1, x8, #32, #32
	b	.LBB251_6
.LBB251_11:
	mov	x20, x24
.LBB251_12:                             // %"$9"
	ldp	w9, w8, [x23, #8]
	bfi	x9, x8, #32, #32
	str	x9, [x22, :lo12:env]
	mov	x0, x20
	mov	sp, x29
	ldp	x20, x19, [sp, #48]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #32]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #64             // 16-byte Folded Reload
	ret
.Lfunc_end251:
	.size	_equal, .Lfunc_end251-_equal
	.cfi_endproc
                                        // -- End function
	.globl	_nequal                         // -- Begin function _nequal
	.p2align	4
	.type	_nequal,@function
_nequal:                                // @_nequal
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-64]!           // 16-byte Folded Spill
	stp	x24, x23, [sp, #16]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #32]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #48]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 64
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w30, -56
	.cfi_offset w29, -64
	ldp	w21, w8, [x0, #8]
	bfi	x21, x8, #32, #32
	ldp	w19, w8, [x21]
	bfi	x19, x8, #32, #32
	tst	x19, #0x6
	b.ne	.LBB252_4
// %bb.1:                               // %"$3"
	tbz	w19, #3, .LBB252_3
// %bb.2:                               // %"$6"
	ldp	w19, w8, [x19]
	bfi	x19, x8, #32, #32
	b	.LBB252_4
.LBB252_3:                              // %"$5"
	mov	x0, x19
	bl	evList
	mov	x19, x0
.LBB252_4:                              // %"$2"
	adrp	x22, env
	ldr	x8, [x22, :lo12:env]
	mov	x9, sp
	sub	x23, x9, #16                    // =16
	mov	sp, x23
	lsr	x10, x19, #32
	lsr	x11, x8, #32
	stp	w19, w10, [x9, #-16]
	stp	w8, w11, [x9, #-8]
	adrp	x20, SymTab+8
	add	x20, x20, :lo12:SymTab+8
	adrp	x24, SymTab+216
	add	x24, x24, :lo12:SymTab+216
	str	x23, [x22, :lo12:env]
	b	.LBB252_7
.LBB252_5:                              // %"$14"
                                        //   in Loop: Header=BB252_7 Depth=1
	mov	x0, x1
	bl	evList
	mov	x1, x0
.LBB252_6:                              // %"$11"
                                        //   in Loop: Header=BB252_7 Depth=1
	mov	x0, x19
	bl	equal
	tbz	w0, #0, .LBB252_11
.LBB252_7:                              // %"$7"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w21, w8, [x21, #8]
	bfi	x21, x8, #32, #32
	tst	x21, #0xf
	b.ne	.LBB252_12
// %bb.8:                               // %"$8"
                                        //   in Loop: Header=BB252_7 Depth=1
	ldp	w1, w8, [x21]
	bfi	x1, x8, #32, #32
	tst	x1, #0x6
	b.ne	.LBB252_6
// %bb.9:                               // %"$12"
                                        //   in Loop: Header=BB252_7 Depth=1
	tbz	w1, #3, .LBB252_5
// %bb.10:                              // %"$15"
                                        //   in Loop: Header=BB252_7 Depth=1
	ldp	w1, w8, [x1]
	bfi	x1, x8, #32, #32
	b	.LBB252_6
.LBB252_11:
	mov	x20, x24
.LBB252_12:                             // %"$9"
	ldp	w9, w8, [x23, #8]
	bfi	x9, x8, #32, #32
	str	x9, [x22, :lo12:env]
	mov	x0, x20
	mov	sp, x29
	ldp	x20, x19, [sp, #48]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #32]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #64             // 16-byte Folded Reload
	ret
.Lfunc_end252:
	.size	_nequal, .Lfunc_end252-_nequal
	.cfi_endproc
                                        // -- End function
	.globl	_eq0                            // -- Begin function _eq0
	.p2align	4
	.type	_eq0,@function
_eq0:                                   // @_eq0
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w0, w8, [x9]
	bfi	x0, x8, #32, #32
	tst	x0, #0x6
	b.ne	.LBB253_4
// %bb.1:                               // %"$3"
	tbz	w0, #3, .LBB253_3
// %bb.2:                               // %"$6"
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB253_4
.LBB253_3:                              // %"$5"
	bl	evList
.LBB253_4:                              // %"$2"
	adrp	x8, SymTab+8
	add	x8, x8, :lo12:SymTab+8
	cmp	x0, #2                          // =2
	csel	x0, x0, x8, eq
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end253:
	.size	_eq0, .Lfunc_end253-_eq0
	.cfi_endproc
                                        // -- End function
	.globl	_eq1                            // -- Begin function _eq1
	.p2align	4
	.type	_eq1,@function
_eq1:                                   // @_eq1
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w0, w8, [x9]
	bfi	x0, x8, #32, #32
	tst	x0, #0x6
	b.ne	.LBB254_4
// %bb.1:                               // %"$3"
	tbz	w0, #3, .LBB254_3
// %bb.2:                               // %"$6"
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB254_4
.LBB254_3:                              // %"$5"
	bl	evList
.LBB254_4:                              // %"$2"
	adrp	x8, SymTab+8
	add	x8, x8, :lo12:SymTab+8
	cmp	x0, #18                         // =18
	csel	x0, x0, x8, eq
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end254:
	.size	_eq1, .Lfunc_end254-_eq1
	.cfi_endproc
                                        // -- End function
	.globl	_eqT                            // -- Begin function _eqT
	.p2align	4
	.type	_eqT,@function
_eqT:                                   // @_eqT
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w0, w8, [x9]
	bfi	x0, x8, #32, #32
	tst	x0, #0x6
	b.ne	.LBB255_4
// %bb.1:                               // %"$3"
	tbz	w0, #3, .LBB255_3
// %bb.2:                               // %"$6"
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB255_4
.LBB255_3:                              // %"$5"
	bl	evList
.LBB255_4:                              // %"$2"
	adrp	x8, SymTab+8
	add	x8, x8, :lo12:SymTab+8
	add	x9, x8, #208                    // =208
	cmp	x0, x9
	csel	x0, x0, x8, eq
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end255:
	.size	_eqT, .Lfunc_end255-_eqT
	.cfi_endproc
                                        // -- End function
	.globl	_neq0                           // -- Begin function _neq0
	.p2align	4
	.type	_neq0,@function
_neq0:                                  // @_neq0
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w0, w8, [x9]
	bfi	x0, x8, #32, #32
	tst	x0, #0x6
	b.ne	.LBB256_4
// %bb.1:                               // %"$3"
	tbz	w0, #3, .LBB256_3
// %bb.2:                               // %"$6"
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB256_4
.LBB256_3:                              // %"$5"
	bl	evList
.LBB256_4:                              // %"$2"
	adrp	x8, SymTab+8
	add	x8, x8, :lo12:SymTab+8
	add	x9, x8, #208                    // =208
	cmp	x0, #2                          // =2
	csel	x0, x8, x9, eq
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end256:
	.size	_neq0, .Lfunc_end256-_neq0
	.cfi_endproc
                                        // -- End function
	.globl	_neqT                           // -- Begin function _neqT
	.p2align	4
	.type	_neqT,@function
_neqT:                                  // @_neqT
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w0, w8, [x9]
	bfi	x0, x8, #32, #32
	tst	x0, #0x6
	b.ne	.LBB257_4
// %bb.1:                               // %"$3"
	tbz	w0, #3, .LBB257_3
// %bb.2:                               // %"$6"
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB257_4
.LBB257_3:                              // %"$5"
	bl	evList
.LBB257_4:                              // %"$2"
	adrp	x8, SymTab+8
	add	x8, x8, :lo12:SymTab+8
	add	x9, x8, #208                    // =208
	cmp	x0, x9
	csel	x0, x8, x9, eq
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end257:
	.size	_neqT, .Lfunc_end257-_neqT
	.cfi_endproc
                                        // -- End function
	.globl	_lt                             // -- Begin function _lt
	.p2align	4
	.type	_lt,@function
_lt:                                    // @_lt
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-64]!           // 16-byte Folded Spill
	stp	x24, x23, [sp, #16]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #32]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #48]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 64
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w30, -56
	.cfi_offset w29, -64
	ldp	w22, w8, [x0, #8]
	bfi	x22, x8, #32, #32
	ldp	w19, w8, [x22]
	bfi	x19, x8, #32, #32
	tst	x19, #0x6
	b.ne	.LBB258_4
// %bb.1:                               // %"$3"
	tbz	w19, #3, .LBB258_3
// %bb.2:                               // %"$6"
	ldp	w19, w8, [x19]
	bfi	x19, x8, #32, #32
	b	.LBB258_4
.LBB258_3:                              // %"$5"
	mov	x0, x19
	bl	evList
	mov	x19, x0
.LBB258_4:                              // %"$2"
	adrp	x8, env
	add	x8, x8, :lo12:env
	ldr	x9, [x8]
	mov	x10, sp
	sub	x23, x10, #16                   // =16
	mov	sp, x23
	adrp	x20, SymTab+216
	add	x20, x20, :lo12:SymTab+216
	lsr	x11, x19, #32
	stp	w19, w11, [x10, #-16]
	lsr	x11, x9, #32
	adrp	x24, SymTab+8
	add	x24, x24, :lo12:SymTab+8
	mov	x21, x23
	stp	w9, w11, [x10, #-8]
	b	.LBB258_7
.LBB258_5:                              // %"$14"
                                        //   in Loop: Header=BB258_7 Depth=1
	mov	x0, x21
	bl	evList
	mov	x21, x0
.LBB258_6:                              // %"$11"
                                        //   in Loop: Header=BB258_7 Depth=1
	mov	x0, x19
	mov	x1, x21
	bl	compare
	mov	x8, x23
	mov	x19, x21
	tbz	x0, #63, .LBB258_11
.LBB258_7:                              // %"$7"
                                        // =>This Inner Loop Header: Depth=1
	lsr	x9, x21, #32
	stp	w21, w9, [x8]
	ldp	w22, w8, [x22, #8]
	bfi	x22, x8, #32, #32
	tst	x22, #0xf
	b.ne	.LBB258_12
// %bb.8:                               // %"$8"
                                        //   in Loop: Header=BB258_7 Depth=1
	ldp	w21, w8, [x22]
	bfi	x21, x8, #32, #32
	tst	x21, #0x6
	b.ne	.LBB258_6
// %bb.9:                               // %"$12"
                                        //   in Loop: Header=BB258_7 Depth=1
	tbz	w21, #3, .LBB258_5
// %bb.10:                              // %"$15"
                                        //   in Loop: Header=BB258_7 Depth=1
	ldp	w21, w8, [x21]
	bfi	x21, x8, #32, #32
	b	.LBB258_6
.LBB258_11:
	mov	x20, x24
.LBB258_12:                             // %"$9"
	ldp	w9, w8, [x23, #8]
	bfi	x9, x8, #32, #32
	adrp	x8, env
	str	x9, [x8, :lo12:env]
	mov	x0, x20
	mov	sp, x29
	ldp	x20, x19, [sp, #48]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #32]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #64             // 16-byte Folded Reload
	ret
.Lfunc_end258:
	.size	_lt, .Lfunc_end258-_lt
	.cfi_endproc
                                        // -- End function
	.globl	_le                             // -- Begin function _le
	.p2align	4
	.type	_le,@function
_le:                                    // @_le
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-64]!           // 16-byte Folded Spill
	stp	x24, x23, [sp, #16]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #32]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #48]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 64
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w30, -56
	.cfi_offset w29, -64
	ldp	w22, w8, [x0, #8]
	bfi	x22, x8, #32, #32
	ldp	w19, w8, [x22]
	bfi	x19, x8, #32, #32
	tst	x19, #0x6
	b.ne	.LBB259_4
// %bb.1:                               // %"$3"
	tbz	w19, #3, .LBB259_3
// %bb.2:                               // %"$6"
	ldp	w19, w8, [x19]
	bfi	x19, x8, #32, #32
	b	.LBB259_4
.LBB259_3:                              // %"$5"
	mov	x0, x19
	bl	evList
	mov	x19, x0
.LBB259_4:                              // %"$2"
	adrp	x8, env
	add	x8, x8, :lo12:env
	ldr	x9, [x8]
	mov	x10, sp
	sub	x23, x10, #16                   // =16
	mov	sp, x23
	adrp	x20, SymTab+216
	add	x20, x20, :lo12:SymTab+216
	lsr	x11, x19, #32
	stp	w19, w11, [x10, #-16]
	lsr	x11, x9, #32
	adrp	x24, SymTab+8
	add	x24, x24, :lo12:SymTab+8
	mov	x21, x23
	stp	w9, w11, [x10, #-8]
	b	.LBB259_7
.LBB259_5:                              // %"$14"
                                        //   in Loop: Header=BB259_7 Depth=1
	mov	x0, x21
	bl	evList
	mov	x21, x0
.LBB259_6:                              // %"$11"
                                        //   in Loop: Header=BB259_7 Depth=1
	mov	x0, x19
	mov	x1, x21
	bl	compare
	cmp	x0, #1                          // =1
	mov	x8, x23
	mov	x19, x21
	b.ge	.LBB259_11
.LBB259_7:                              // %"$7"
                                        // =>This Inner Loop Header: Depth=1
	lsr	x9, x21, #32
	stp	w21, w9, [x8]
	ldp	w22, w8, [x22, #8]
	bfi	x22, x8, #32, #32
	tst	x22, #0xf
	b.ne	.LBB259_12
// %bb.8:                               // %"$8"
                                        //   in Loop: Header=BB259_7 Depth=1
	ldp	w21, w8, [x22]
	bfi	x21, x8, #32, #32
	tst	x21, #0x6
	b.ne	.LBB259_6
// %bb.9:                               // %"$12"
                                        //   in Loop: Header=BB259_7 Depth=1
	tbz	w21, #3, .LBB259_5
// %bb.10:                              // %"$15"
                                        //   in Loop: Header=BB259_7 Depth=1
	ldp	w21, w8, [x21]
	bfi	x21, x8, #32, #32
	b	.LBB259_6
.LBB259_11:
	mov	x20, x24
.LBB259_12:                             // %"$9"
	ldp	w9, w8, [x23, #8]
	bfi	x9, x8, #32, #32
	adrp	x8, env
	str	x9, [x8, :lo12:env]
	mov	x0, x20
	mov	sp, x29
	ldp	x20, x19, [sp, #48]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #32]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #64             // 16-byte Folded Reload
	ret
.Lfunc_end259:
	.size	_le, .Lfunc_end259-_le
	.cfi_endproc
                                        // -- End function
	.globl	_gt                             // -- Begin function _gt
	.p2align	4
	.type	_gt,@function
_gt:                                    // @_gt
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-64]!           // 16-byte Folded Spill
	stp	x24, x23, [sp, #16]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #32]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #48]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 64
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w30, -56
	.cfi_offset w29, -64
	ldp	w22, w8, [x0, #8]
	bfi	x22, x8, #32, #32
	ldp	w19, w8, [x22]
	bfi	x19, x8, #32, #32
	tst	x19, #0x6
	b.ne	.LBB260_4
// %bb.1:                               // %"$3"
	tbz	w19, #3, .LBB260_3
// %bb.2:                               // %"$6"
	ldp	w19, w8, [x19]
	bfi	x19, x8, #32, #32
	b	.LBB260_4
.LBB260_3:                              // %"$5"
	mov	x0, x19
	bl	evList
	mov	x19, x0
.LBB260_4:                              // %"$2"
	adrp	x8, env
	add	x8, x8, :lo12:env
	ldr	x9, [x8]
	mov	x10, sp
	sub	x23, x10, #16                   // =16
	mov	sp, x23
	adrp	x20, SymTab+216
	add	x20, x20, :lo12:SymTab+216
	lsr	x11, x19, #32
	stp	w19, w11, [x10, #-16]
	lsr	x11, x9, #32
	adrp	x24, SymTab+8
	add	x24, x24, :lo12:SymTab+8
	mov	x21, x23
	stp	w9, w11, [x10, #-8]
	b	.LBB260_7
.LBB260_5:                              // %"$14"
                                        //   in Loop: Header=BB260_7 Depth=1
	mov	x0, x21
	bl	evList
	mov	x21, x0
.LBB260_6:                              // %"$11"
                                        //   in Loop: Header=BB260_7 Depth=1
	mov	x0, x19
	mov	x1, x21
	bl	compare
	cmp	x0, #0                          // =0
	mov	x8, x23
	mov	x19, x21
	b.le	.LBB260_11
.LBB260_7:                              // %"$7"
                                        // =>This Inner Loop Header: Depth=1
	lsr	x9, x21, #32
	stp	w21, w9, [x8]
	ldp	w22, w8, [x22, #8]
	bfi	x22, x8, #32, #32
	tst	x22, #0xf
	b.ne	.LBB260_12
// %bb.8:                               // %"$8"
                                        //   in Loop: Header=BB260_7 Depth=1
	ldp	w21, w8, [x22]
	bfi	x21, x8, #32, #32
	tst	x21, #0x6
	b.ne	.LBB260_6
// %bb.9:                               // %"$12"
                                        //   in Loop: Header=BB260_7 Depth=1
	tbz	w21, #3, .LBB260_5
// %bb.10:                              // %"$15"
                                        //   in Loop: Header=BB260_7 Depth=1
	ldp	w21, w8, [x21]
	bfi	x21, x8, #32, #32
	b	.LBB260_6
.LBB260_11:
	mov	x20, x24
.LBB260_12:                             // %"$9"
	ldp	w9, w8, [x23, #8]
	bfi	x9, x8, #32, #32
	adrp	x8, env
	str	x9, [x8, :lo12:env]
	mov	x0, x20
	mov	sp, x29
	ldp	x20, x19, [sp, #48]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #32]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #64             // 16-byte Folded Reload
	ret
.Lfunc_end260:
	.size	_gt, .Lfunc_end260-_gt
	.cfi_endproc
                                        // -- End function
	.globl	_ge                             // -- Begin function _ge
	.p2align	4
	.type	_ge,@function
_ge:                                    // @_ge
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-64]!           // 16-byte Folded Spill
	stp	x24, x23, [sp, #16]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #32]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #48]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 64
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w30, -56
	.cfi_offset w29, -64
	ldp	w22, w8, [x0, #8]
	bfi	x22, x8, #32, #32
	ldp	w19, w8, [x22]
	bfi	x19, x8, #32, #32
	tst	x19, #0x6
	b.ne	.LBB261_4
// %bb.1:                               // %"$3"
	tbz	w19, #3, .LBB261_3
// %bb.2:                               // %"$6"
	ldp	w19, w8, [x19]
	bfi	x19, x8, #32, #32
	b	.LBB261_4
.LBB261_3:                              // %"$5"
	mov	x0, x19
	bl	evList
	mov	x19, x0
.LBB261_4:                              // %"$2"
	adrp	x8, env
	add	x8, x8, :lo12:env
	ldr	x9, [x8]
	mov	x10, sp
	sub	x23, x10, #16                   // =16
	mov	sp, x23
	adrp	x20, SymTab+216
	add	x20, x20, :lo12:SymTab+216
	lsr	x11, x19, #32
	stp	w19, w11, [x10, #-16]
	lsr	x11, x9, #32
	adrp	x24, SymTab+8
	add	x24, x24, :lo12:SymTab+8
	mov	x21, x23
	stp	w9, w11, [x10, #-8]
	b	.LBB261_7
.LBB261_5:                              // %"$14"
                                        //   in Loop: Header=BB261_7 Depth=1
	mov	x0, x21
	bl	evList
	mov	x21, x0
.LBB261_6:                              // %"$11"
                                        //   in Loop: Header=BB261_7 Depth=1
	mov	x0, x19
	mov	x1, x21
	bl	compare
	mov	x8, x23
	mov	x19, x21
	tbnz	x0, #63, .LBB261_11
.LBB261_7:                              // %"$7"
                                        // =>This Inner Loop Header: Depth=1
	lsr	x9, x21, #32
	stp	w21, w9, [x8]
	ldp	w22, w8, [x22, #8]
	bfi	x22, x8, #32, #32
	tst	x22, #0xf
	b.ne	.LBB261_12
// %bb.8:                               // %"$8"
                                        //   in Loop: Header=BB261_7 Depth=1
	ldp	w21, w8, [x22]
	bfi	x21, x8, #32, #32
	tst	x21, #0x6
	b.ne	.LBB261_6
// %bb.9:                               // %"$12"
                                        //   in Loop: Header=BB261_7 Depth=1
	tbz	w21, #3, .LBB261_5
// %bb.10:                              // %"$15"
                                        //   in Loop: Header=BB261_7 Depth=1
	ldp	w21, w8, [x21]
	bfi	x21, x8, #32, #32
	b	.LBB261_6
.LBB261_11:
	mov	x20, x24
.LBB261_12:                             // %"$9"
	ldp	w9, w8, [x23, #8]
	bfi	x9, x8, #32, #32
	adrp	x8, env
	str	x9, [x8, :lo12:env]
	mov	x0, x20
	mov	sp, x29
	ldp	x20, x19, [sp, #48]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #32]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #64             // 16-byte Folded Reload
	ret
.Lfunc_end261:
	.size	_ge, .Lfunc_end261-_ge
	.cfi_endproc
                                        // -- End function
	.globl	_max                            // -- Begin function _max
	.p2align	4
	.type	_max,@function
_max:                                   // @_max
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-48]!           // 16-byte Folded Spill
	stp	x22, x21, [sp, #16]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #32]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 48
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w30, -40
	.cfi_offset w29, -48
	ldp	w21, w8, [x0, #8]
	bfi	x21, x8, #32, #32
	ldp	w19, w8, [x21]
	bfi	x19, x8, #32, #32
	tst	x19, #0x6
	b.ne	.LBB262_4
// %bb.1:                               // %"$3"
	tbz	w19, #3, .LBB262_3
// %bb.2:                               // %"$6"
	ldp	w19, w8, [x19]
	bfi	x19, x8, #32, #32
	b	.LBB262_4
.LBB262_3:                              // %"$5"
	mov	x0, x19
	bl	evList
	mov	x19, x0
.LBB262_4:                              // %"$2"
	adrp	x8, env
	add	x8, x8, :lo12:env
	ldr	x9, [x8]
	mov	x10, sp
	sub	x22, x10, #16                   // =16
	mov	sp, x22
	lsr	x11, x19, #32
	lsr	x12, x9, #32
	stp	w19, w11, [x10, #-16]
	mov	x20, x22
	stp	w9, w12, [x10, #-8]
.LBB262_5:                              // %"$7.sink.split"
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB262_8 Depth 2
	lsr	x9, x20, #32
	stp	w20, w9, [x8]
	b	.LBB262_8
.LBB262_6:                              // %"$13"
                                        //   in Loop: Header=BB262_8 Depth=2
	mov	x0, x20
	bl	evList
	mov	x20, x0
.LBB262_7:                              // %"$10"
                                        //   in Loop: Header=BB262_8 Depth=2
	mov	x0, x20
	mov	x1, x19
	bl	compare
	cmp	x0, #0                          // =0
	b.gt	.LBB262_12
.LBB262_8:                              // %"$7"
                                        //   Parent Loop BB262_5 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	w21, w8, [x21, #8]
	bfi	x21, x8, #32, #32
	tst	x21, #0xf
	b.ne	.LBB262_13
// %bb.9:                               // %"$8"
                                        //   in Loop: Header=BB262_8 Depth=2
	ldp	w20, w8, [x21]
	bfi	x20, x8, #32, #32
	tst	x20, #0x6
	b.ne	.LBB262_7
// %bb.10:                              // %"$11"
                                        //   in Loop: Header=BB262_8 Depth=2
	tbz	w20, #3, .LBB262_6
// %bb.11:                              // %"$14"
                                        //   in Loop: Header=BB262_8 Depth=2
	ldp	w20, w8, [x20]
	bfi	x20, x8, #32, #32
	b	.LBB262_7
.LBB262_12:                             //   in Loop: Header=BB262_5 Depth=1
	mov	x8, x22
	mov	x19, x20
	b	.LBB262_5
.LBB262_13:                             // %"$9"
	ldp	w9, w8, [x22, #8]
	bfi	x9, x8, #32, #32
	adrp	x8, env
	str	x9, [x8, :lo12:env]
	mov	x0, x19
	mov	sp, x29
	ldp	x20, x19, [sp, #32]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #48             // 16-byte Folded Reload
	ret
.Lfunc_end262:
	.size	_max, .Lfunc_end262-_max
	.cfi_endproc
                                        // -- End function
	.globl	_min                            // -- Begin function _min
	.p2align	4
	.type	_min,@function
_min:                                   // @_min
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-48]!           // 16-byte Folded Spill
	stp	x22, x21, [sp, #16]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #32]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 48
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w30, -40
	.cfi_offset w29, -48
	ldp	w21, w8, [x0, #8]
	bfi	x21, x8, #32, #32
	ldp	w19, w8, [x21]
	bfi	x19, x8, #32, #32
	tst	x19, #0x6
	b.ne	.LBB263_4
// %bb.1:                               // %"$3"
	tbz	w19, #3, .LBB263_3
// %bb.2:                               // %"$6"
	ldp	w19, w8, [x19]
	bfi	x19, x8, #32, #32
	b	.LBB263_4
.LBB263_3:                              // %"$5"
	mov	x0, x19
	bl	evList
	mov	x19, x0
.LBB263_4:                              // %"$2"
	adrp	x8, env
	add	x8, x8, :lo12:env
	ldr	x9, [x8]
	mov	x10, sp
	sub	x22, x10, #16                   // =16
	mov	sp, x22
	lsr	x11, x19, #32
	lsr	x12, x9, #32
	stp	w19, w11, [x10, #-16]
	mov	x20, x22
	stp	w9, w12, [x10, #-8]
.LBB263_5:                              // %"$7.sink.split"
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB263_8 Depth 2
	lsr	x9, x20, #32
	stp	w20, w9, [x8]
	b	.LBB263_8
.LBB263_6:                              // %"$13"
                                        //   in Loop: Header=BB263_8 Depth=2
	mov	x0, x20
	bl	evList
	mov	x20, x0
.LBB263_7:                              // %"$10"
                                        //   in Loop: Header=BB263_8 Depth=2
	mov	x0, x20
	mov	x1, x19
	bl	compare
	tbnz	x0, #63, .LBB263_12
.LBB263_8:                              // %"$7"
                                        //   Parent Loop BB263_5 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	w21, w8, [x21, #8]
	bfi	x21, x8, #32, #32
	tst	x21, #0xf
	b.ne	.LBB263_13
// %bb.9:                               // %"$8"
                                        //   in Loop: Header=BB263_8 Depth=2
	ldp	w20, w8, [x21]
	bfi	x20, x8, #32, #32
	tst	x20, #0x6
	b.ne	.LBB263_7
// %bb.10:                              // %"$11"
                                        //   in Loop: Header=BB263_8 Depth=2
	tbz	w20, #3, .LBB263_6
// %bb.11:                              // %"$14"
                                        //   in Loop: Header=BB263_8 Depth=2
	ldp	w20, w8, [x20]
	bfi	x20, x8, #32, #32
	b	.LBB263_7
.LBB263_12:                             //   in Loop: Header=BB263_5 Depth=1
	mov	x8, x22
	mov	x19, x20
	b	.LBB263_5
.LBB263_13:                             // %"$9"
	ldp	w9, w8, [x22, #8]
	bfi	x9, x8, #32, #32
	adrp	x8, env
	str	x9, [x8, :lo12:env]
	mov	x0, x19
	mov	sp, x29
	ldp	x20, x19, [sp, #32]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #48             // 16-byte Folded Reload
	ret
.Lfunc_end263:
	.size	_min, .Lfunc_end263-_min
	.cfi_endproc
                                        // -- End function
	.globl	_atom                           // -- Begin function _atom
	.p2align	4
	.type	_atom,@function
_atom:                                  // @_atom
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w0, w8, [x9]
	bfi	x0, x8, #32, #32
	tst	x0, #0x6
	b.ne	.LBB264_4
// %bb.1:                               // %"$3"
	tbz	w0, #3, .LBB264_3
// %bb.2:                               // %"$6"
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB264_4
.LBB264_3:                              // %"$5"
	bl	evList
.LBB264_4:                              // %"$2"
	adrp	x8, SymTab+8
	add	x8, x8, :lo12:SymTab+8
	add	x9, x8, #208                    // =208
	tst	x0, #0xf
	csel	x0, x9, x8, ne
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end264:
	.size	_atom, .Lfunc_end264-_atom
	.cfi_endproc
                                        // -- End function
	.globl	_pair                           // -- Begin function _pair
	.p2align	4
	.type	_pair,@function
_pair:                                  // @_pair
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w0, w8, [x9]
	bfi	x0, x8, #32, #32
	tst	x0, #0x6
	b.ne	.LBB265_4
// %bb.1:                               // %"$3"
	tbz	w0, #3, .LBB265_3
// %bb.2:                               // %"$6"
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB265_4
.LBB265_3:                              // %"$5"
	bl	evList
.LBB265_4:                              // %"$2"
	adrp	x8, SymTab+8
	add	x8, x8, :lo12:SymTab+8
	tst	x0, #0xf
	csel	x0, x0, x8, eq
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end265:
	.size	_pair, .Lfunc_end265-_pair
	.cfi_endproc
                                        // -- End function
	.globl	_circQ                          // -- Begin function _circQ
	.p2align	4
	.type	_circQ,@function
_circQ:                                 // @_circQ
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w0, w8, [x9]
	bfi	x0, x8, #32, #32
	tst	x0, #0x6
	b.ne	.LBB266_4
// %bb.1:                               // %"$3"
	tbz	w0, #3, .LBB266_3
// %bb.2:                               // %"$6"
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB266_4
.LBB266_3:                              // %"$5"
	bl	evList
.LBB266_4:                              // %"$2"
	bl	circ
	adrp	x8, SymTab+8
	add	x8, x8, :lo12:SymTab+8
	cmp	x0, #0                          // =0
	csel	x0, x0, x8, ne
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end266:
	.size	_circQ, .Lfunc_end266-_circQ
	.cfi_endproc
                                        // -- End function
	.globl	_lstQ                           // -- Begin function _lstQ
	.p2align	4
	.type	_lstQ,@function
_lstQ:                                  // @_lstQ
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w0, w8, [x9]
	bfi	x0, x8, #32, #32
	tst	x0, #0x6
	b.ne	.LBB267_4
// %bb.1:                               // %"$4"
	tbz	w0, #3, .LBB267_3
// %bb.2:                               // %"$7"
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB267_4
.LBB267_3:                              // %"$6"
	bl	evList
.LBB267_4:                              // %"$3"
	adrp	x8, SymTab+8
	add	x8, x8, :lo12:SymTab+8
	and	x9, x0, #0xf
	cmp	x0, x8
	ccmp	x9, #0, #4, ne
	add	x9, x8, #208                    // =208
	csel	x0, x9, x8, eq
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end267:
	.size	_lstQ, .Lfunc_end267-_lstQ
	.cfi_endproc
                                        // -- End function
	.globl	_numQ                           // -- Begin function _numQ
	.p2align	4
	.type	_numQ,@function
_numQ:                                  // @_numQ
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w0, w8, [x9]
	bfi	x0, x8, #32, #32
	tst	x0, #0x6
	b.ne	.LBB268_4
// %bb.1:                               // %"$3"
	tbz	w0, #3, .LBB268_3
// %bb.2:                               // %"$6"
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB268_4
.LBB268_3:                              // %"$5"
	bl	evList
.LBB268_4:                              // %"$2"
	adrp	x8, SymTab+8
	add	x8, x8, :lo12:SymTab+8
	tst	x0, #0x6
	csel	x0, x0, x8, ne
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end268:
	.size	_numQ, .Lfunc_end268-_numQ
	.cfi_endproc
                                        // -- End function
	.globl	_symQ                           // -- Begin function _symQ
	.p2align	4
	.type	_symQ,@function
_symQ:                                  // @_symQ
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w0, w8, [x9]
	bfi	x0, x8, #32, #32
	tst	x0, #0x6
	b.ne	.LBB269_4
// %bb.1:                               // %"$3"
	tbz	w0, #3, .LBB269_3
// %bb.2:                               // %"$6"
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB269_4
.LBB269_3:                              // %"$5"
	bl	evList
.LBB269_4:                              // %"$2"
	eor	w8, w0, #0x8
	adrp	x9, SymTab+8
	add	x9, x9, :lo12:SymTab+8
	add	x10, x9, #208                   // =208
	tst	x8, #0xe
	csel	x0, x10, x9, eq
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end269:
	.size	_symQ, .Lfunc_end269-_symQ
	.cfi_endproc
                                        // -- End function
	.globl	_flgQ                           // -- Begin function _flgQ
	.p2align	4
	.type	_flgQ,@function
_flgQ:                                  // @_flgQ
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w0, w8, [x9]
	bfi	x0, x8, #32, #32
	tst	x0, #0x6
	b.ne	.LBB270_4
// %bb.1:                               // %"$4"
	tbz	w0, #3, .LBB270_3
// %bb.2:                               // %"$7"
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB270_4
.LBB270_3:                              // %"$6"
	bl	evList
.LBB270_4:                              // %"$3"
	adrp	x8, SymTab+8
	add	x8, x8, :lo12:SymTab+8
	add	x9, x8, #208                    // =208
	cmp	x0, x8
	ccmp	x0, x9, #4, ne
	csel	x0, x9, x8, eq
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end270:
	.size	_flgQ, .Lfunc_end270-_flgQ
	.cfi_endproc
                                        // -- End function
	.globl	_member                         // -- Begin function _member
	.p2align	4
	.type	_member,@function
_member:                                // @_member
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-64]!           // 16-byte Folded Spill
	stp	x24, x23, [sp, #16]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #32]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #48]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 64
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w30, -56
	.cfi_offset w29, -64
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w19, w8, [x9]
	bfi	x19, x8, #32, #32
	ldp	w20, w8, [x9, #8]
	bfi	x20, x8, #32, #32
	tst	x19, #0x6
	b.ne	.LBB271_4
// %bb.1:                               // %"$3"
	tbz	w19, #3, .LBB271_3
// %bb.2:                               // %"$6"
	ldp	w19, w8, [x19]
	bfi	x19, x8, #32, #32
	b	.LBB271_4
.LBB271_3:                              // %"$5"
	mov	x0, x19
	bl	evList
	mov	x19, x0
.LBB271_4:                              // %"$2"
	adrp	x22, env
	ldr	x8, [x22, :lo12:env]
	mov	x9, sp
	sub	x23, x9, #16                    // =16
	mov	sp, x23
	lsr	x10, x19, #32
	stp	w19, w10, [x9, #-16]
	lsr	x10, x8, #32
	stp	w8, w10, [x9, #-8]
	str	x23, [x22, :lo12:env]
	ldp	w20, w8, [x20]
	bfi	x20, x8, #32, #32
	tst	x20, #0x6
	b.ne	.LBB271_8
// %bb.5:                               // %"$8"
	tbz	w20, #3, .LBB271_7
// %bb.6:                               // %"$11"
	ldp	w20, w8, [x20]
	bfi	x20, x8, #32, #32
	b	.LBB271_8
.LBB271_7:                              // %"$10"
	mov	x0, x20
	bl	evList
	mov	x20, x0
.LBB271_8:                              // %"$7"
	mov	x21, x20
	adrp	x24, SymTab+8
	add	x24, x24, :lo12:SymTab+8
.LBB271_9:                              // %"$12"
                                        // =>This Inner Loop Header: Depth=1
	tst	x21, #0xf
	b.ne	.LBB271_13
// %bb.10:                              // %"$13"
                                        //   in Loop: Header=BB271_9 Depth=1
	ldp	w1, w8, [x21]
	bfi	x1, x8, #32, #32
	mov	x0, x19
	bl	equal
	tbnz	w0, #0, .LBB271_14
// %bb.11:                              // %"$19"
                                        //   in Loop: Header=BB271_9 Depth=1
	ldp	w21, w8, [x21, #8]
	bfi	x21, x8, #32, #32
	cmp	x20, x21
	b.ne	.LBB271_9
// %bb.12:
	mov	x21, x24
	b	.LBB271_14
.LBB271_13:                             // %"$15"
	mov	x0, x19
	mov	x1, x21
	bl	equal
	adrp	x8, SymTab+8
	add	x8, x8, :lo12:SymTab+8
	tst	w0, #0x1
	csel	x21, x21, x8, ne
.LBB271_14:                             // %"$14"
	ldp	w9, w8, [x23, #8]
	bfi	x9, x8, #32, #32
	str	x9, [x22, :lo12:env]
	mov	x0, x21
	mov	sp, x29
	ldp	x20, x19, [sp, #48]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #32]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #64             // 16-byte Folded Reload
	ret
.Lfunc_end271:
	.size	_member, .Lfunc_end271-_member
	.cfi_endproc
                                        // -- End function
	.globl	_memq                           // -- Begin function _memq
	.p2align	4
	.type	_memq,@function
_memq:                                  // @_memq
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-48]!           // 16-byte Folded Spill
	stp	x22, x21, [sp, #16]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #32]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 48
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w30, -40
	.cfi_offset w29, -48
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w19, w8, [x9]
	bfi	x19, x8, #32, #32
	ldp	w22, w8, [x9, #8]
	bfi	x22, x8, #32, #32
	tst	x19, #0x6
	b.ne	.LBB272_4
// %bb.1:                               // %"$3"
	tbz	w19, #3, .LBB272_3
// %bb.2:                               // %"$6"
	ldp	w19, w8, [x19]
	bfi	x19, x8, #32, #32
	b	.LBB272_4
.LBB272_3:                              // %"$5"
	mov	x0, x19
	bl	evList
	mov	x19, x0
.LBB272_4:                              // %"$2"
	adrp	x20, env
	ldr	x8, [x20, :lo12:env]
	mov	x9, sp
	sub	x21, x9, #16                    // =16
	mov	sp, x21
	lsr	x10, x19, #32
	stp	w19, w10, [x9, #-16]
	lsr	x10, x8, #32
	stp	w8, w10, [x9, #-8]
	str	x21, [x20, :lo12:env]
	ldp	w0, w8, [x22]
	bfi	x0, x8, #32, #32
	tst	x0, #0x6
	b.ne	.LBB272_8
// %bb.5:                               // %"$8"
	tbz	w0, #3, .LBB272_7
// %bb.6:                               // %"$11"
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB272_8
.LBB272_7:                              // %"$10"
	bl	evList
.LBB272_8:                              // %"$7"
	mov	x8, x0
	adrp	x9, SymTab+8
	add	x9, x9, :lo12:SymTab+8
.LBB272_9:                              // %"$12"
                                        // =>This Inner Loop Header: Depth=1
	tst	x8, #0xf
	b.ne	.LBB272_13
// %bb.10:                              // %"$13"
                                        //   in Loop: Header=BB272_9 Depth=1
	ldp	w11, w10, [x8]
	bfi	x11, x10, #32, #32
	cmp	x19, x11
	b.eq	.LBB272_14
// %bb.11:                              // %"$19"
                                        //   in Loop: Header=BB272_9 Depth=1
	ldp	w8, w10, [x8, #8]
	bfi	x8, x10, #32, #32
	cmp	x0, x8
	b.ne	.LBB272_9
// %bb.12:
	mov	x8, x9
	b	.LBB272_14
.LBB272_13:                             // %"$15"
	cmp	x19, x8
	adrp	x9, SymTab+8
	add	x9, x9, :lo12:SymTab+8
	csel	x8, x8, x9, eq
.LBB272_14:                             // %"$14"
	ldp	w10, w9, [x21, #8]
	bfi	x10, x9, #32, #32
	str	x10, [x20, :lo12:env]
	mov	x0, x8
	mov	sp, x29
	ldp	x20, x19, [sp, #32]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #48             // 16-byte Folded Reload
	ret
.Lfunc_end272:
	.size	_memq, .Lfunc_end272-_memq
	.cfi_endproc
                                        // -- End function
	.globl	_mmeq                           // -- Begin function _mmeq
	.p2align	4
	.type	_mmeq,@function
_mmeq:                                  // @_mmeq
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-48]!           // 16-byte Folded Spill
	stp	x22, x21, [sp, #16]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #32]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 48
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w30, -40
	.cfi_offset w29, -48
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w19, w8, [x9]
	bfi	x19, x8, #32, #32
	ldp	w22, w8, [x9, #8]
	bfi	x22, x8, #32, #32
	tst	x19, #0x6
	b.ne	.LBB273_4
// %bb.1:                               // %"$3"
	tbz	w19, #3, .LBB273_3
// %bb.2:                               // %"$6"
	ldp	w19, w8, [x19]
	bfi	x19, x8, #32, #32
	b	.LBB273_4
.LBB273_3:                              // %"$5"
	mov	x0, x19
	bl	evList
	mov	x19, x0
.LBB273_4:                              // %"$2"
	adrp	x20, env
	ldr	x8, [x20, :lo12:env]
	mov	x9, sp
	sub	x21, x9, #16                    // =16
	mov	sp, x21
	lsr	x10, x19, #32
	stp	w19, w10, [x9, #-16]
	lsr	x10, x8, #32
	stp	w8, w10, [x9, #-8]
	str	x21, [x20, :lo12:env]
	ldp	w0, w8, [x22]
	bfi	x0, x8, #32, #32
	tst	x0, #0x6
	b.ne	.LBB273_8
// %bb.5:                               // %"$8"
	tbz	w0, #3, .LBB273_7
// %bb.6:                               // %"$11"
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB273_8
.LBB273_7:                              // %"$10"
	bl	evList
.LBB273_8:                              // %"$12"
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB273_10 Depth 2
	tst	x19, #0xf
	b.ne	.LBB273_14
// %bb.9:                               // %"$13"
                                        //   in Loop: Header=BB273_8 Depth=1
	ldp	w9, w8, [x19]
	bfi	x9, x8, #32, #32
	ldp	w19, w8, [x19, #8]
	bfi	x19, x8, #32, #32
	mov	x8, x0
.LBB273_10:                             // %"$15"
                                        //   Parent Loop BB273_8 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	tst	x8, #0xf
	b.ne	.LBB273_13
// %bb.11:                              // %"$16"
                                        //   in Loop: Header=BB273_10 Depth=2
	ldp	w11, w10, [x8]
	bfi	x11, x10, #32, #32
	cmp	x9, x11
	b.eq	.LBB273_15
// %bb.12:                              // %"$19"
                                        //   in Loop: Header=BB273_10 Depth=2
	ldp	w8, w10, [x8, #8]
	bfi	x8, x10, #32, #32
	cmp	x0, x8
	b.ne	.LBB273_10
	b	.LBB273_14
.LBB273_13:                             // %"$17"
                                        //   in Loop: Header=BB273_8 Depth=1
	cmp	x9, x8
	b.ne	.LBB273_8
.LBB273_14:                             // %"$20"
	ldp	w9, w8, [x21, #8]
	bfi	x9, x8, #32, #32
	str	x9, [x20, :lo12:env]
	adrp	x0, SymTab+8
	add	x0, x0, :lo12:SymTab+8
	b	.LBB273_16
.LBB273_15:                             // %"$18"
	ldp	w10, w9, [x21, #8]
	bfi	x10, x9, #32, #32
	str	x10, [x20, :lo12:env]
	mov	x0, x8
.LBB273_16:                             // %"$18"
	mov	sp, x29
	ldp	x20, x19, [sp, #32]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #48             // 16-byte Folded Reload
	ret
.Lfunc_end273:
	.size	_mmeq, .Lfunc_end273-_mmeq
	.cfi_endproc
                                        // -- End function
	.globl	_sect                           // -- Begin function _sect
	.p2align	4
	.type	_sect,@function
_sect:                                  // @_sect
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-96]!           // 16-byte Folded Spill
	str	x27, [sp, #16]                  // 8-byte Folded Spill
	stp	x26, x25, [sp, #32]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #48]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #64]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #80]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w19, w8, [x9]
	bfi	x19, x8, #32, #32
	ldp	w20, w8, [x9, #8]
	bfi	x20, x8, #32, #32
	tst	x19, #0x6
	b.ne	.LBB274_4
// %bb.1:                               // %"$3"
	tbz	w19, #3, .LBB274_3
// %bb.2:                               // %"$6"
	ldp	w19, w8, [x19]
	bfi	x19, x8, #32, #32
	b	.LBB274_4
.LBB274_3:                              // %"$5"
	mov	x0, x19
	bl	evList
	mov	x19, x0
.LBB274_4:                              // %"$2"
	adrp	x23, env
	ldr	x8, [x23, :lo12:env]
	mov	x9, sp
	sub	x24, x9, #16                    // =16
	mov	sp, x24
	lsr	x10, x19, #32
	stp	w19, w10, [x9, #-16]
	lsr	x10, x8, #32
	stp	w8, w10, [x9, #-8]
	str	x24, [x23, :lo12:env]
	ldp	w20, w8, [x20]
	bfi	x20, x8, #32, #32
	tst	x20, #0x6
	b.ne	.LBB274_8
// %bb.5:                               // %"$8"
	tbz	w20, #3, .LBB274_7
// %bb.6:                               // %"$11"
	ldp	w20, w8, [x20]
	bfi	x20, x8, #32, #32
	b	.LBB274_8
.LBB274_7:                              // %"$10"
	mov	x0, x20
	bl	evList
	mov	x20, x0
.LBB274_8:                              // %"$7"
	ldr	x8, [x23, :lo12:env]
	mov	x9, sp
	sub	x10, x9, #16                    // =16
	mov	sp, x10
	lsr	x11, x20, #32
	lsr	x12, x8, #32
	stp	w20, w11, [x9, #-16]
	stp	w8, w12, [x9, #-8]
	str	x10, [x23, :lo12:env]
	mov	x8, sp
	sub	x25, x8, #16                    // =16
	mov	sp, x25
	mov	x26, xzr
	adrp	x21, SymTab+8
	add	x21, x21, :lo12:SymTab+8
	lsr	x9, x21, #32
	stp	w21, w9, [x8, #-16]
	ldr	x9, [x23, :lo12:env]
	lsr	x10, x9, #32
	stp	w9, w10, [x8, #-8]
	str	x25, [x23, :lo12:env]
	b	.LBB274_11
.LBB274_9:                              // %"$24"
                                        //   in Loop: Header=BB274_11 Depth=1
	mov	x8, x25
.LBB274_10:                             // %"$25"
                                        //   in Loop: Header=BB274_11 Depth=1
	lsr	x9, x0, #32
	stp	w0, w9, [x8]
	mov	x26, x0
.LBB274_11:                             // %"$12"
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB274_13 Depth 2
	tst	x19, #0xf
	b.ne	.LBB274_17
// %bb.12:                              // %"$13"
                                        //   in Loop: Header=BB274_11 Depth=1
	ldp	w22, w8, [x19]
	bfi	x22, x8, #32, #32
	ldp	w19, w8, [x19, #8]
	bfi	x19, x8, #32, #32
	mov	x27, x20
	tst	x27, #0xf
	b.ne	.LBB274_11
.LBB274_13:                             // %"$16"
                                        //   Parent Loop BB274_11 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	w1, w8, [x27]
	bfi	x1, x8, #32, #32
	mov	x0, x22
	bl	equal
	tbnz	w0, #0, .LBB274_15
// %bb.14:                              // %"$19"
                                        //   in Loop: Header=BB274_13 Depth=2
	ldp	w27, w8, [x27, #8]
	bfi	x27, x8, #32, #32
	tst	x27, #0xf
	b.eq	.LBB274_13
	b	.LBB274_11
.LBB274_15:                             // %"$21"
                                        //   in Loop: Header=BB274_11 Depth=1
	mov	x0, x22
	mov	x1, x21
	bl	cons
	cbz	x26, .LBB274_9
// %bb.16:                              // %"$23"
                                        //   in Loop: Header=BB274_11 Depth=1
	add	x8, x26, #8                     // =8
	b	.LBB274_10
.LBB274_17:                             // %"$14"
	ldp	w0, w8, [x25]
	bfi	x0, x8, #32, #32
	ldp	w9, w8, [x24, #8]
	bfi	x9, x8, #32, #32
	str	x9, [x23, :lo12:env]
	mov	sp, x29
	ldp	x20, x19, [sp, #80]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #64]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #48]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #32]             // 16-byte Folded Reload
	ldr	x27, [sp, #16]                  // 8-byte Folded Reload
	ldp	x29, x30, [sp], #96             // 16-byte Folded Reload
	ret
.Lfunc_end274:
	.size	_sect, .Lfunc_end274-_sect
	.cfi_endproc
                                        // -- End function
	.globl	_diff                           // -- Begin function _diff
	.p2align	4
	.type	_diff,@function
_diff:                                  // @_diff
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-96]!           // 16-byte Folded Spill
	str	x27, [sp, #16]                  // 8-byte Folded Spill
	stp	x26, x25, [sp, #32]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #48]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #64]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #80]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w19, w8, [x9]
	bfi	x19, x8, #32, #32
	ldp	w20, w8, [x9, #8]
	bfi	x20, x8, #32, #32
	tst	x19, #0x6
	b.ne	.LBB275_4
// %bb.1:                               // %"$3"
	tbz	w19, #3, .LBB275_3
// %bb.2:                               // %"$6"
	ldp	w19, w8, [x19]
	bfi	x19, x8, #32, #32
	b	.LBB275_4
.LBB275_3:                              // %"$5"
	mov	x0, x19
	bl	evList
	mov	x19, x0
.LBB275_4:                              // %"$2"
	adrp	x23, env
	ldr	x8, [x23, :lo12:env]
	mov	x9, sp
	sub	x24, x9, #16                    // =16
	mov	sp, x24
	lsr	x10, x19, #32
	stp	w19, w10, [x9, #-16]
	lsr	x10, x8, #32
	stp	w8, w10, [x9, #-8]
	str	x24, [x23, :lo12:env]
	ldp	w20, w8, [x20]
	bfi	x20, x8, #32, #32
	tst	x20, #0x6
	b.ne	.LBB275_8
// %bb.5:                               // %"$8"
	tbz	w20, #3, .LBB275_7
// %bb.6:                               // %"$11"
	ldp	w20, w8, [x20]
	bfi	x20, x8, #32, #32
	b	.LBB275_8
.LBB275_7:                              // %"$10"
	mov	x0, x20
	bl	evList
	mov	x20, x0
.LBB275_8:                              // %"$7"
	ldr	x8, [x23, :lo12:env]
	mov	x9, sp
	sub	x10, x9, #16                    // =16
	mov	sp, x10
	lsr	x11, x20, #32
	lsr	x12, x8, #32
	stp	w20, w11, [x9, #-16]
	stp	w8, w12, [x9, #-8]
	str	x10, [x23, :lo12:env]
	mov	x8, sp
	sub	x25, x8, #16                    // =16
	mov	sp, x25
	mov	x26, xzr
	adrp	x21, SymTab+8
	add	x21, x21, :lo12:SymTab+8
	lsr	x9, x21, #32
	stp	w21, w9, [x8, #-16]
	ldr	x9, [x23, :lo12:env]
	lsr	x10, x9, #32
	stp	w9, w10, [x8, #-8]
	str	x25, [x23, :lo12:env]
	b	.LBB275_10
.LBB275_9:                              // %"$21.critedge"
                                        //   in Loop: Header=BB275_10 Depth=1
	mov	x0, x22
	mov	x1, x21
	bl	cons
	add	x8, x26, #8                     // =8
	cmp	x26, #0                         // =0
	csel	x8, x25, x8, eq
	lsr	x9, x0, #32
	stp	w0, w9, [x8]
	mov	x26, x0
.LBB275_10:                             // %"$12"
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB275_12 Depth 2
	tst	x19, #0xf
	b.ne	.LBB275_14
// %bb.11:                              // %"$13"
                                        //   in Loop: Header=BB275_10 Depth=1
	ldp	w22, w8, [x19]
	bfi	x22, x8, #32, #32
	ldp	w19, w8, [x19, #8]
	bfi	x19, x8, #32, #32
	mov	x27, x20
	tst	x27, #0xf
	b.ne	.LBB275_9
.LBB275_12:                             // %"$16"
                                        //   Parent Loop BB275_10 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	w1, w8, [x27]
	bfi	x1, x8, #32, #32
	mov	x0, x22
	bl	equal
	tbnz	w0, #0, .LBB275_10
// %bb.13:                              // %"$19"
                                        //   in Loop: Header=BB275_12 Depth=2
	ldp	w27, w8, [x27, #8]
	bfi	x27, x8, #32, #32
	tst	x27, #0xf
	b.eq	.LBB275_12
	b	.LBB275_9
.LBB275_14:                             // %"$14"
	ldp	w0, w8, [x25]
	bfi	x0, x8, #32, #32
	ldp	w9, w8, [x24, #8]
	bfi	x9, x8, #32, #32
	str	x9, [x23, :lo12:env]
	mov	sp, x29
	ldp	x20, x19, [sp, #80]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #64]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #48]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #32]             // 16-byte Folded Reload
	ldr	x27, [sp, #16]                  // 8-byte Folded Reload
	ldp	x29, x30, [sp], #96             // 16-byte Folded Reload
	ret
.Lfunc_end275:
	.size	_diff, .Lfunc_end275-_diff
	.cfi_endproc
                                        // -- End function
	.globl	_index                          // -- Begin function _index
	.p2align	4
	.type	_index,@function
_index:                                 // @_index
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-80]!           // 16-byte Folded Spill
	str	x25, [sp, #16]                  // 8-byte Folded Spill
	stp	x24, x23, [sp, #32]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #48]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #64]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 80
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -64
	.cfi_offset w30, -72
	.cfi_offset w29, -80
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w19, w8, [x9]
	bfi	x19, x8, #32, #32
	ldp	w20, w8, [x9, #8]
	bfi	x20, x8, #32, #32
	tst	x19, #0x6
	b.ne	.LBB276_4
// %bb.1:                               // %"$3"
	tbz	w19, #3, .LBB276_3
// %bb.2:                               // %"$6"
	ldp	w19, w8, [x19]
	bfi	x19, x8, #32, #32
	b	.LBB276_4
.LBB276_3:                              // %"$5"
	mov	x0, x19
	bl	evList
	mov	x19, x0
.LBB276_4:                              // %"$2"
	adrp	x22, env
	ldr	x8, [x22, :lo12:env]
	mov	x9, sp
	sub	x23, x9, #16                    // =16
	mov	sp, x23
	lsr	x10, x19, #32
	stp	w19, w10, [x9, #-16]
	lsr	x10, x8, #32
	stp	w8, w10, [x9, #-8]
	str	x23, [x22, :lo12:env]
	ldp	w20, w8, [x20]
	bfi	x20, x8, #32, #32
	tst	x20, #0x6
	b.ne	.LBB276_8
// %bb.5:                               // %"$8"
	tbz	w20, #3, .LBB276_7
// %bb.6:                               // %"$11"
	ldp	w20, w8, [x20]
	bfi	x20, x8, #32, #32
	b	.LBB276_8
.LBB276_7:                              // %"$10"
	mov	x0, x20
	bl	evList
	mov	x20, x0
.LBB276_8:                              // %"$7"
	mov	w24, #1
	mov	x25, x20
	adrp	x21, SymTab+8
	add	x21, x21, :lo12:SymTab+8
.LBB276_9:                              // %"$12"
                                        // =>This Inner Loop Header: Depth=1
	tst	x25, #0xf
	b.ne	.LBB276_13
// %bb.10:                              // %"$13"
                                        //   in Loop: Header=BB276_9 Depth=1
	ldp	w1, w8, [x25]
	bfi	x1, x8, #32, #32
	mov	x0, x19
	bl	equal
	tbnz	w0, #0, .LBB276_12
// %bb.11:                              // %"$16"
                                        //   in Loop: Header=BB276_9 Depth=1
	ldp	w25, w8, [x25, #8]
	bfi	x25, x8, #32, #32
	add	x24, x24, #1                    // =1
	cmp	x20, x25
	b.ne	.LBB276_9
	b	.LBB276_13
.LBB276_12:                             // %"$17"
	mov	w21, #2
	bfi	x21, x24, #4, #60
.LBB276_13:                             // %"$14"
	ldp	w9, w8, [x23, #8]
	bfi	x9, x8, #32, #32
	str	x9, [x22, :lo12:env]
	mov	x0, x21
	mov	sp, x29
	ldp	x20, x19, [sp, #64]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #48]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #32]             // 16-byte Folded Reload
	ldr	x25, [sp, #16]                  // 8-byte Folded Reload
	ldp	x29, x30, [sp], #80             // 16-byte Folded Reload
	ret
.Lfunc_end276:
	.size	_index, .Lfunc_end276-_index
	.cfi_endproc
                                        // -- End function
	.globl	_offset                         // -- Begin function _offset
	.p2align	4
	.type	_offset,@function
_offset:                                // @_offset
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-64]!           // 16-byte Folded Spill
	stp	x24, x23, [sp, #16]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #32]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #48]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 64
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w30, -56
	.cfi_offset w29, -64
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w19, w8, [x9]
	bfi	x19, x8, #32, #32
	ldp	w20, w8, [x9, #8]
	bfi	x20, x8, #32, #32
	tst	x19, #0x6
	b.ne	.LBB277_4
// %bb.1:                               // %"$3"
	tbz	w19, #3, .LBB277_3
// %bb.2:                               // %"$6"
	ldp	w19, w8, [x19]
	bfi	x19, x8, #32, #32
	b	.LBB277_4
.LBB277_3:                              // %"$5"
	mov	x0, x19
	bl	evList
	mov	x19, x0
.LBB277_4:                              // %"$2"
	adrp	x22, env
	ldr	x8, [x22, :lo12:env]
	mov	x9, sp
	sub	x23, x9, #16                    // =16
	mov	sp, x23
	lsr	x10, x19, #32
	stp	w19, w10, [x9, #-16]
	lsr	x10, x8, #32
	stp	w8, w10, [x9, #-8]
	str	x23, [x22, :lo12:env]
	ldp	w20, w8, [x20]
	bfi	x20, x8, #32, #32
	tst	x20, #0x6
	b.ne	.LBB277_8
// %bb.5:                               // %"$8"
	tbz	w20, #3, .LBB277_7
// %bb.6:                               // %"$11"
	ldp	w20, w8, [x20]
	bfi	x20, x8, #32, #32
	b	.LBB277_8
.LBB277_7:                              // %"$10"
	mov	x0, x20
	bl	evList
	mov	x20, x0
.LBB277_8:                              // %"$12.preheader"
	mov	w24, #1
	adrp	x21, SymTab+8
	add	x21, x21, :lo12:SymTab+8
	tst	x20, #0xf
	b.ne	.LBB277_12
.LBB277_9:                              // %"$13"
                                        // =>This Inner Loop Header: Depth=1
	mov	x0, x19
	mov	x1, x20
	bl	equal
	tbnz	w0, #0, .LBB277_11
// %bb.10:                              // %"$16"
                                        //   in Loop: Header=BB277_9 Depth=1
	ldp	w20, w8, [x20, #8]
	bfi	x20, x8, #32, #32
	add	x24, x24, #1                    // =1
	tst	x20, #0xf
	b.eq	.LBB277_9
	b	.LBB277_12
.LBB277_11:                             // %"$17"
	mov	w21, #2
	bfi	x21, x24, #4, #60
.LBB277_12:                             // %"$14"
	ldp	w9, w8, [x23, #8]
	bfi	x9, x8, #32, #32
	str	x9, [x22, :lo12:env]
	mov	x0, x21
	mov	sp, x29
	ldp	x20, x19, [sp, #48]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #32]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #64             // 16-byte Folded Reload
	ret
.Lfunc_end277:
	.size	_offset, .Lfunc_end277-_offset
	.cfi_endproc
                                        // -- End function
	.globl	_prior                          // -- Begin function _prior
	.p2align	4
	.type	_prior,@function
_prior:                                 // @_prior
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-48]!           // 16-byte Folded Spill
	stp	x22, x21, [sp, #16]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #32]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 48
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w30, -40
	.cfi_offset w29, -48
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w19, w8, [x9]
	bfi	x19, x8, #32, #32
	ldp	w22, w8, [x9, #8]
	bfi	x22, x8, #32, #32
	tst	x19, #0x6
	b.ne	.LBB278_4
// %bb.1:                               // %"$3"
	tbz	w19, #3, .LBB278_3
// %bb.2:                               // %"$6"
	ldp	w19, w8, [x19]
	bfi	x19, x8, #32, #32
	b	.LBB278_4
.LBB278_3:                              // %"$5"
	mov	x0, x19
	bl	evList
	mov	x19, x0
.LBB278_4:                              // %"$2"
	adrp	x20, env
	ldr	x8, [x20, :lo12:env]
	mov	x9, sp
	sub	x21, x9, #16                    // =16
	mov	sp, x21
	lsr	x10, x19, #32
	stp	w19, w10, [x9, #-16]
	lsr	x10, x8, #32
	stp	w8, w10, [x9, #-8]
	str	x21, [x20, :lo12:env]
	ldp	w0, w8, [x22]
	bfi	x0, x8, #32, #32
	tst	x0, #0x6
	b.ne	.LBB278_7
// %bb.5:                               // %"$8"
	tbz	w0, #3, .LBB278_9
// %bb.6:                               // %"$11"
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
.LBB278_7:                              // %"$7"
	tst	x19, #0xf
	b.eq	.LBB278_10
.LBB278_8:
	mov	w8, wzr
	cbnz	w8, .LBB278_11
	b	.LBB278_14
.LBB278_9:                              // %"$10"
	bl	evList
	tst	x19, #0xf
	b.ne	.LBB278_8
.LBB278_10:                             // %"$13"
	cmp	x19, x0
	cset	w8, ne
	cbz	w8, .LBB278_14
.LBB278_11:                             // %"$16"
                                        // =>This Inner Loop Header: Depth=1
	tst	x0, #0xf
	b.ne	.LBB278_14
// %bb.12:                              // %"$17"
                                        //   in Loop: Header=BB278_11 Depth=1
	mov	x8, x0
	ldp	w0, w9, [x0, #8]
	bfi	x0, x9, #32, #32
	cmp	x0, x19
	b.ne	.LBB278_11
// %bb.13:                              // %"$19"
	ldp	w10, w9, [x21, #8]
	bfi	x10, x9, #32, #32
	str	x10, [x20, :lo12:env]
	mov	x0, x8
	b	.LBB278_15
.LBB278_14:                             // %"$15"
	ldp	w9, w8, [x21, #8]
	bfi	x9, x8, #32, #32
	str	x9, [x20, :lo12:env]
	adrp	x0, SymTab+8
	add	x0, x0, :lo12:SymTab+8
.LBB278_15:                             // %"$19"
	mov	sp, x29
	ldp	x20, x19, [sp, #32]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #48             // 16-byte Folded Reload
	ret
.Lfunc_end278:
	.size	_prior, .Lfunc_end278-_prior
	.cfi_endproc
                                        // -- End function
	.globl	_length                         // -- Begin function _length
	.p2align	4
	.type	_length,@function
_length:                                // @_length
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-32]!           // 16-byte Folded Spill
	stp	x20, x19, [sp, #16]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 32
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w30, -24
	.cfi_offset w29, -32
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w0, w8, [x9]
	bfi	x0, x8, #32, #32
	tst	x0, #0x6
	b.eq	.LBB279_3
// %bb.1:                               // %"$2"
	tst	x0, #0x6
	b.eq	.LBB279_6
.LBB279_2:                              // %"$9"
	mov	x1, #-2
	mov	w2, wzr
	mov	w3, wzr
	mov	x4, xzr
	bl	fmtNum
	mov	x19, x0
	b	.LBB279_21
.LBB279_3:                              // %"$3"
	tbz	w0, #3, .LBB279_5
// %bb.4:                               // %"$6"
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	tst	x0, #0x6
	b.ne	.LBB279_2
	b	.LBB279_6
.LBB279_5:                              // %"$5"
	bl	evList
	tst	x0, #0x6
	b.ne	.LBB279_2
.LBB279_6:                              // %"$8"
	tst	x0, #0xf
	b.eq	.LBB279_12
// %bb.7:                               // %"$10"
	adrp	x8, SymTab+8
	add	x8, x8, :lo12:SymTab+8
	cmp	x0, x8
	b.eq	.LBB279_9
// %bb.8:                               // %"$27"
	ldp	w8, w9, [x0, #-8]
	bfi	x8, x9, #32, #32
	tbz	w8, #3, .LBB279_10
.LBB279_9:
	mov	w19, #2
	b	.LBB279_21
.LBB279_10:                             // %"$31"
                                        // =>This Inner Loop Header: Depth=1
	tst	x8, #0x6
	b.ne	.LBB279_22
// %bb.11:                              // %"$32"
                                        //   in Loop: Header=BB279_10 Depth=1
	ldp	w8, w9, [x8, #8]
	bfi	x8, x9, #32, #32
	b	.LBB279_10
.LBB279_12:                             // %"$12.preheader"
	mov	w19, #18
	mov	x8, x0
.LBB279_13:                             // %"$12"
                                        // =>This Inner Loop Header: Depth=1
	ldr	w9, [x8]
	orr	w9, w9, #0x1
	str	w9, [x8]
	ldp	w8, w9, [x8, #8]
	bfi	x8, x9, #32, #32
	tst	x8, #0xf
	b.ne	.LBB279_16
// %bb.14:                              // %"$13"
                                        //   in Loop: Header=BB279_13 Depth=1
	ldrb	w9, [x8]
	tbnz	w9, #0, .LBB279_18
// %bb.15:                              // %"$19"
                                        //   in Loop: Header=BB279_13 Depth=1
	add	x19, x19, #16                   // =16
	b	.LBB279_13
.LBB279_16:                             // %"$16"
                                        // =>This Inner Loop Header: Depth=1
	ldr	w9, [x0]
	and	w9, w9, #0xfffffffe
	str	w9, [x0]
	ldp	w0, w9, [x0, #8]
	bfi	x0, x9, #32, #32
	cmp	x8, x0
	b.ne	.LBB279_16
	b	.LBB279_21
.LBB279_17:                             // %"$22"
                                        //   in Loop: Header=BB279_18 Depth=1
	ldr	w9, [x0]
	and	w9, w9, #0xfffffffe
	str	w9, [x0]
	ldp	w0, w9, [x0, #8]
	bfi	x0, x9, #32, #32
.LBB279_18:                             // %"$21"
                                        // =>This Inner Loop Header: Depth=1
	cmp	x8, x0
	b.ne	.LBB279_17
// %bb.19:
	adrp	x19, SymTab+216
	add	x19, x19, :lo12:SymTab+216
.LBB279_20:                             // %"$24"
                                        // =>This Inner Loop Header: Depth=1
	ldr	w9, [x0]
	and	w9, w9, #0xfffffffe
	str	w9, [x0]
	ldp	w0, w9, [x0, #8]
	bfi	x0, x9, #32, #32
	cmp	x8, x0
	b.ne	.LBB279_20
.LBB279_21:                             // %"$7"
	mov	x0, x19
	mov	sp, x29
	ldp	x20, x19, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #32             // 16-byte Folded Reload
	ret
.LBB279_22:                             // %"$33"
	mov	x9, sp
	sub	x20, x9, #16                    // =16
	mov	sp, x20
	stp	wzr, wzr, [x9, #-16]
	lsr	x10, x8, #32
	mov	w19, #2
	stp	w8, w10, [x9, #-8]
.LBB279_23:                             // %"$34"
                                        // =>This Inner Loop Header: Depth=1
	mov	x0, x20
	bl	symChar
	cbz	w0, .LBB279_21
// %bb.24:                              // %"$35"
                                        //   in Loop: Header=BB279_23 Depth=1
	add	x19, x19, #16                   // =16
	b	.LBB279_23
.Lfunc_end279:
	.size	_length, .Lfunc_end279-_length
	.cfi_endproc
                                        // -- End function
	.globl	_size                           // -- Begin function _size
	.p2align	4
	.type	_size,@function
_size:                                  // @_size
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-48]!                // 8-byte Folded Spill
	stp	x22, x21, [sp, #16]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #32]             // 16-byte Folded Spill
	.cfi_def_cfa_offset 48
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w30, -48
	mov	x20, x0
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w19, w8, [x9]
	bfi	x19, x8, #32, #32
	tst	x19, #0x6
	b.ne	.LBB280_3
// %bb.1:                               // %"$3"
	tbz	w19, #3, .LBB280_6
// %bb.2:                               // %"$6"
	ldp	w19, w8, [x19]
	bfi	x19, x8, #32, #32
.LBB280_3:                              // %"$2"
	tbz	w19, #1, .LBB280_7
.LBB280_4:                              // %"$9"
	lsr	x8, x19, #3
	mov	w0, #18
	lsr	x8, x8, #8
	cbz	x8, .LBB280_29
.LBB280_5:                              // %"$11"
                                        // =>This Inner Loop Header: Depth=1
	add	x0, x0, #16                     // =16
	lsr	x8, x8, #8
	cbnz	x8, .LBB280_5
	b	.LBB280_29
.LBB280_6:                              // %"$5"
	mov	x0, x19
	bl	evList
	mov	x19, x0
	tbnz	w19, #1, .LBB280_4
.LBB280_7:                              // %"$8"
	tbz	w19, #2, .LBB280_11
// %bb.8:                               // %"$14"
	and	x8, x19, #0xfffffffffffffff7
	mov	w0, #130
.LBB280_9:                              // %"$15"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w9, w10, [x8, #4]
	bfi	x9, x10, #32, #32
	tbnz	w9, #1, .LBB280_14
// %bb.10:                              // %"$16"
                                        //   in Loop: Header=BB280_9 Depth=1
	add	x0, x0, #128                    // =128
	mov	x8, x9
	b	.LBB280_9
.LBB280_11:                             // %"$13"
	tst	x19, #0xf
	b.eq	.LBB280_16
// %bb.12:                              // %"$23"
	adrp	x8, SymTab+8
	add	x8, x8, :lo12:SymTab+8
	cmp	x19, x8
	b.ne	.LBB280_17
// %bb.13:
	mov	w0, #2
	b	.LBB280_29
.LBB280_14:                             // %"$17"
	ldp	w8, w10, [x8, #-4]
	bfi	x8, x10, #32, #32
	lsr	x9, x9, #4
	cmn	x8, x8
	add	x8, x9, x9
	cinc	x8, x8, hs
	cbz	x8, .LBB280_29
.LBB280_15:                             // %"$20"
                                        // =>This Inner Loop Header: Depth=1
	add	x0, x0, #16                     // =16
	lsr	x8, x8, #8
	cbnz	x8, .LBB280_15
	b	.LBB280_29
.LBB280_16:                             // %"$24"
	mov	x0, x19
	bl	size
	mov	x8, x0
	mov	w0, #2
	bfi	x0, x8, #4, #60
	b	.LBB280_29
.LBB280_17:                             // %"$25"
	ldp	w8, w9, [x19, #-8]
	bfi	x8, x9, #32, #32
	tbz	w8, #3, .LBB280_19
// %bb.18:                              // %"$28"
	mov	x0, x20
	mov	x1, x19
	bl	dbFetch
	ldp	w0, w8, [x19]
	bfi	x0, x8, #32, #32
	bl	binSize
	add	x21, x0, #7                     // =7
	ldp	w9, w8, [x19, #-8]
	bfi	x9, x8, #32, #32
	and	x22, x9, #0xfffffffffffffff7
	b	.LBB280_23
.LBB280_19:                             // %"$35"
                                        // =>This Inner Loop Header: Depth=1
	tst	x8, #0x6
	b.ne	.LBB280_26
// %bb.20:                              // %"$36"
                                        //   in Loop: Header=BB280_19 Depth=1
	ldp	w8, w9, [x8, #8]
	bfi	x8, x9, #32, #32
	b	.LBB280_19
.LBB280_21:                             // %"$33"
                                        //   in Loop: Header=BB280_23 Depth=1
	ldp	w0, w8, [x19]
	bfi	x0, x8, #32, #32
	bl	binSize
	mov	x20, x0
	ldp	w0, w8, [x19, #8]
	bfi	x0, x8, #32, #32
	bl	binSize
.LBB280_22:                             // %"$34"
                                        //   in Loop: Header=BB280_23 Depth=1
	add	x8, x20, x0
	add	x21, x21, x8
.LBB280_23:                             // %"$29"
                                        // =>This Inner Loop Header: Depth=1
	tst	x22, #0xf
	b.ne	.LBB280_28
// %bb.24:                              // %"$30"
                                        //   in Loop: Header=BB280_23 Depth=1
	ldp	w19, w8, [x22]
	bfi	x19, x8, #32, #32
	ldp	w22, w8, [x22, #8]
	bfi	x22, x8, #32, #32
	tst	x19, #0xf
	b.eq	.LBB280_21
// %bb.25:                              // %"$32"
                                        //   in Loop: Header=BB280_23 Depth=1
	mov	x0, x19
	bl	binSize
	mov	x20, x0
	mov	w0, #2
	b	.LBB280_22
.LBB280_26:                             // %"$37"
	cmp	x8, #2                          // =2
	b.ne	.LBB280_30
// %bb.27:
	mov	x0, x8
	b	.LBB280_29
.LBB280_28:                             // %"$31"
	mov	w0, #2
	bfi	x0, x21, #4, #60
.LBB280_29:                             // %"$7"
	ldp	x20, x19, [sp, #32]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #16]             // 16-byte Folded Reload
	ldr	x30, [sp], #48                  // 8-byte Folded Reload
	ret
.LBB280_30:                             // %"$38"
	tbz	w8, #1, .LBB280_33
// %bb.31:                              // %"$41"
	lsr	x8, x8, #4
	mov	w0, #18
	lsr	x8, x8, #8
	cbz	x8, .LBB280_29
.LBB280_32:                             // %"$43"
                                        // =>This Inner Loop Header: Depth=1
	add	x0, x0, #16                     // =16
	lsr	x8, x8, #8
	cbnz	x8, .LBB280_32
	b	.LBB280_29
.LBB280_33:                             // %"$45.preheader"
	mov	w0, #130
.LBB280_34:                             // %"$45"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w8, w9, [x8, #4]
	bfi	x8, x9, #32, #32
	tbnz	w8, #1, .LBB280_36
// %bb.35:                              // %"$46"
                                        //   in Loop: Header=BB280_34 Depth=1
	add	x0, x0, #128                    // =128
	b	.LBB280_34
.LBB280_36:                             // %"$47"
	lsr	x8, x8, #4
	cbz	x8, .LBB280_29
.LBB280_37:                             // %"$50"
                                        // =>This Inner Loop Header: Depth=1
	add	x0, x0, #16                     // =16
	lsr	x8, x8, #8
	cbnz	x8, .LBB280_37
	b	.LBB280_29
.Lfunc_end280:
	.size	_size, .Lfunc_end280-_size
	.cfi_endproc
                                        // -- End function
	.globl	_bytes                          // -- Begin function _bytes
	.p2align	4
	.type	_bytes,@function
_bytes:                                 // @_bytes
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w0, w8, [x9]
	bfi	x0, x8, #32, #32
	tst	x0, #0x6
	b.ne	.LBB281_4
// %bb.1:                               // %"$3"
	tbz	w0, #3, .LBB281_3
// %bb.2:                               // %"$6"
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB281_4
.LBB281_3:                              // %"$5"
	bl	evList
.LBB281_4:                              // %"$2"
	bl	binSize
	mov	w8, #2
	bfi	x8, x0, #4, #60
	mov	x0, x8
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end281:
	.size	_bytes, .Lfunc_end281-_bytes
	.cfi_endproc
                                        // -- End function
	.globl	_assoc                          // -- Begin function _assoc
	.p2align	4
	.type	_assoc,@function
_assoc:                                 // @_assoc
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-64]!           // 16-byte Folded Spill
	stp	x24, x23, [sp, #16]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #32]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #48]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 64
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w30, -56
	.cfi_offset w29, -64
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w19, w8, [x9]
	bfi	x19, x8, #32, #32
	ldp	w20, w8, [x9, #8]
	bfi	x20, x8, #32, #32
	tst	x19, #0x6
	b.ne	.LBB282_4
// %bb.1:                               // %"$3"
	tbz	w19, #3, .LBB282_3
// %bb.2:                               // %"$6"
	ldp	w19, w8, [x19]
	bfi	x19, x8, #32, #32
	b	.LBB282_4
.LBB282_3:                              // %"$5"
	mov	x0, x19
	bl	evList
	mov	x19, x0
.LBB282_4:                              // %"$2"
	adrp	x22, env
	ldr	x8, [x22, :lo12:env]
	mov	x9, sp
	sub	x23, x9, #16                    // =16
	mov	sp, x23
	lsr	x10, x19, #32
	stp	w19, w10, [x9, #-16]
	lsr	x10, x8, #32
	stp	w8, w10, [x9, #-8]
	str	x23, [x22, :lo12:env]
	ldp	w20, w8, [x20]
	bfi	x20, x8, #32, #32
	tst	x20, #0x6
	b.ne	.LBB282_8
// %bb.5:                               // %"$8"
	tbz	w20, #3, .LBB282_7
// %bb.6:                               // %"$11"
	ldp	w20, w8, [x20]
	bfi	x20, x8, #32, #32
	b	.LBB282_8
.LBB282_7:                              // %"$10"
	mov	x0, x20
	bl	evList
	mov	x20, x0
.LBB282_8:                              // %"$12.preheader"
	adrp	x24, SymTab+8
	add	x24, x24, :lo12:SymTab+8
	tst	x20, #0xf
	b.ne	.LBB282_13
.LBB282_9:                              // %"$13"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w21, w8, [x20]
	bfi	x21, x8, #32, #32
	tst	x21, #0xf
	b.eq	.LBB282_11
// %bb.10:                              //   in Loop: Header=BB282_9 Depth=1
	mov	w0, wzr
	tbz	w0, #0, .LBB282_12
	b	.LBB282_14
.LBB282_11:                             // %"$17"
                                        //   in Loop: Header=BB282_9 Depth=1
	ldp	w1, w8, [x21]
	bfi	x1, x8, #32, #32
	mov	x0, x19
	bl	equal
	tbnz	w0, #0, .LBB282_14
.LBB282_12:                             // %"$18"
                                        //   in Loop: Header=BB282_9 Depth=1
	ldp	w20, w8, [x20, #8]
	bfi	x20, x8, #32, #32
	tst	x20, #0xf
	b.eq	.LBB282_9
.LBB282_13:
	mov	x21, x24
.LBB282_14:                             // %"$14"
	ldp	w9, w8, [x23, #8]
	bfi	x9, x8, #32, #32
	str	x9, [x22, :lo12:env]
	mov	x0, x21
	mov	sp, x29
	ldp	x20, x19, [sp, #48]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #32]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #64             // 16-byte Folded Reload
	ret
.Lfunc_end282:
	.size	_assoc, .Lfunc_end282-_assoc
	.cfi_endproc
                                        // -- End function
	.globl	_rassoc                         // -- Begin function _rassoc
	.p2align	4
	.type	_rassoc,@function
_rassoc:                                // @_rassoc
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-64]!           // 16-byte Folded Spill
	stp	x24, x23, [sp, #16]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #32]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #48]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 64
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w30, -56
	.cfi_offset w29, -64
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w19, w8, [x9]
	bfi	x19, x8, #32, #32
	ldp	w20, w8, [x9, #8]
	bfi	x20, x8, #32, #32
	tst	x19, #0x6
	b.ne	.LBB283_4
// %bb.1:                               // %"$3"
	tbz	w19, #3, .LBB283_3
// %bb.2:                               // %"$6"
	ldp	w19, w8, [x19]
	bfi	x19, x8, #32, #32
	b	.LBB283_4
.LBB283_3:                              // %"$5"
	mov	x0, x19
	bl	evList
	mov	x19, x0
.LBB283_4:                              // %"$2"
	adrp	x22, env
	ldr	x8, [x22, :lo12:env]
	mov	x9, sp
	sub	x23, x9, #16                    // =16
	mov	sp, x23
	lsr	x10, x19, #32
	stp	w19, w10, [x9, #-16]
	lsr	x10, x8, #32
	stp	w8, w10, [x9, #-8]
	str	x23, [x22, :lo12:env]
	ldp	w20, w8, [x20]
	bfi	x20, x8, #32, #32
	tst	x20, #0x6
	b.ne	.LBB283_8
// %bb.5:                               // %"$8"
	tbz	w20, #3, .LBB283_7
// %bb.6:                               // %"$11"
	ldp	w20, w8, [x20]
	bfi	x20, x8, #32, #32
	b	.LBB283_8
.LBB283_7:                              // %"$10"
	mov	x0, x20
	bl	evList
	mov	x20, x0
.LBB283_8:                              // %"$12.preheader"
	adrp	x24, SymTab+8
	add	x24, x24, :lo12:SymTab+8
	tst	x20, #0xf
	b.ne	.LBB283_13
.LBB283_9:                              // %"$13"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w21, w8, [x20]
	bfi	x21, x8, #32, #32
	tst	x21, #0xf
	b.eq	.LBB283_11
// %bb.10:                              //   in Loop: Header=BB283_9 Depth=1
	mov	w0, wzr
	tbz	w0, #0, .LBB283_12
	b	.LBB283_14
.LBB283_11:                             // %"$17"
                                        //   in Loop: Header=BB283_9 Depth=1
	ldp	w1, w8, [x21, #8]
	bfi	x1, x8, #32, #32
	mov	x0, x19
	bl	equal
	tbnz	w0, #0, .LBB283_14
.LBB283_12:                             // %"$18"
                                        //   in Loop: Header=BB283_9 Depth=1
	ldp	w20, w8, [x20, #8]
	bfi	x20, x8, #32, #32
	tst	x20, #0xf
	b.eq	.LBB283_9
.LBB283_13:
	mov	x21, x24
.LBB283_14:                             // %"$14"
	ldp	w9, w8, [x23, #8]
	bfi	x9, x8, #32, #32
	str	x9, [x22, :lo12:env]
	mov	x0, x21
	mov	sp, x29
	ldp	x20, x19, [sp, #48]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #32]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #64             // 16-byte Folded Reload
	ret
.Lfunc_end283:
	.size	_rassoc, .Lfunc_end283-_rassoc
	.cfi_endproc
                                        // -- End function
	.globl	_asoq                           // -- Begin function _asoq
	.p2align	4
	.type	_asoq,@function
_asoq:                                  // @_asoq
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-48]!           // 16-byte Folded Spill
	stp	x22, x21, [sp, #16]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #32]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 48
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w30, -40
	.cfi_offset w29, -48
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w19, w8, [x9]
	bfi	x19, x8, #32, #32
	ldp	w22, w8, [x9, #8]
	bfi	x22, x8, #32, #32
	tst	x19, #0x6
	b.ne	.LBB284_4
// %bb.1:                               // %"$3"
	tbz	w19, #3, .LBB284_3
// %bb.2:                               // %"$6"
	ldp	w19, w8, [x19]
	bfi	x19, x8, #32, #32
	b	.LBB284_4
.LBB284_3:                              // %"$5"
	mov	x0, x19
	bl	evList
	mov	x19, x0
.LBB284_4:                              // %"$2"
	adrp	x20, env
	ldr	x8, [x20, :lo12:env]
	mov	x9, sp
	sub	x21, x9, #16                    // =16
	mov	sp, x21
	lsr	x10, x19, #32
	stp	w19, w10, [x9, #-16]
	lsr	x10, x8, #32
	stp	w8, w10, [x9, #-8]
	str	x21, [x20, :lo12:env]
	ldp	w0, w8, [x22]
	bfi	x0, x8, #32, #32
	tst	x0, #0x6
	b.ne	.LBB284_8
// %bb.5:                               // %"$8"
	tbz	w0, #3, .LBB284_7
// %bb.6:                               // %"$11"
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB284_8
.LBB284_7:                              // %"$10"
	bl	evList
.LBB284_8:                              // %"$12.preheader"
	adrp	x9, SymTab+8
	add	x9, x9, :lo12:SymTab+8
	tst	x0, #0xf
	b.ne	.LBB284_13
.LBB284_9:                              // %"$13"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w8, w10, [x0]
	bfi	x8, x10, #32, #32
	tst	x8, #0xf
	b.eq	.LBB284_11
// %bb.10:                              //   in Loop: Header=BB284_9 Depth=1
	mov	w10, wzr
	tbz	w10, #0, .LBB284_12
	b	.LBB284_14
.LBB284_11:                             // %"$17"
                                        //   in Loop: Header=BB284_9 Depth=1
	ldp	w11, w10, [x8]
	bfi	x11, x10, #32, #32
	cmp	x19, x11
	cset	w10, eq
	tbnz	w10, #0, .LBB284_14
.LBB284_12:                             // %"$18"
                                        //   in Loop: Header=BB284_9 Depth=1
	ldp	w0, w8, [x0, #8]
	bfi	x0, x8, #32, #32
	tst	x0, #0xf
	b.eq	.LBB284_9
.LBB284_13:
	mov	x8, x9
.LBB284_14:                             // %"$14"
	ldp	w10, w9, [x21, #8]
	bfi	x10, x9, #32, #32
	str	x10, [x20, :lo12:env]
	mov	x0, x8
	mov	sp, x29
	ldp	x20, x19, [sp, #32]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #48             // 16-byte Folded Reload
	ret
.Lfunc_end284:
	.size	_asoq, .Lfunc_end284-_asoq
	.cfi_endproc
                                        // -- End function
	.globl	_rank                           // -- Begin function _rank
	.p2align	4
	.type	_rank,@function
_rank:                                  // @_rank
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-64]!           // 16-byte Folded Spill
	stp	x24, x23, [sp, #16]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #32]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #48]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 64
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w30, -56
	.cfi_offset w29, -64
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w19, w8, [x9]
	bfi	x19, x8, #32, #32
	ldp	w23, w8, [x9, #8]
	bfi	x23, x8, #32, #32
	tst	x19, #0x6
	b.ne	.LBB285_4
// %bb.1:                               // %"$3"
	tbz	w19, #3, .LBB285_3
// %bb.2:                               // %"$6"
	ldp	w19, w8, [x19]
	bfi	x19, x8, #32, #32
	b	.LBB285_4
.LBB285_3:                              // %"$5"
	mov	x0, x19
	bl	evList
	mov	x19, x0
.LBB285_4:                              // %"$2"
	adrp	x21, env
	ldr	x8, [x21, :lo12:env]
	mov	x9, sp
	sub	x22, x9, #16                    // =16
	mov	sp, x22
	lsr	x10, x19, #32
	stp	w19, w10, [x9, #-16]
	lsr	x10, x8, #32
	stp	w8, w10, [x9, #-8]
	str	x22, [x21, :lo12:env]
	ldp	w20, w8, [x23]
	bfi	x20, x8, #32, #32
	ldp	w23, w8, [x23, #8]
	bfi	x23, x8, #32, #32
	tst	x20, #0x6
	b.ne	.LBB285_8
// %bb.5:                               // %"$8"
	tbz	w20, #3, .LBB285_7
// %bb.6:                               // %"$11"
	ldp	w20, w8, [x20]
	bfi	x20, x8, #32, #32
	b	.LBB285_8
.LBB285_7:                              // %"$10"
	mov	x0, x20
	bl	evList
	mov	x20, x0
.LBB285_8:                              // %"$7"
	ldr	x8, [x21, :lo12:env]
	mov	x9, sp
	sub	x10, x9, #16                    // =16
	mov	sp, x10
	lsr	x11, x20, #32
	stp	w20, w11, [x9, #-16]
	lsr	x11, x8, #32
	stp	w8, w11, [x9, #-8]
	str	x10, [x21, :lo12:env]
	ldp	w0, w8, [x23]
	bfi	x0, x8, #32, #32
	tst	x0, #0x6
	b.ne	.LBB285_12
// %bb.9:                               // %"$13"
	tbz	w0, #3, .LBB285_11
// %bb.10:                              // %"$16"
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB285_12
.LBB285_11:                             // %"$15"
	bl	evList
.LBB285_12:                             // %"$12"
	adrp	x8, SymTab+8
	add	x8, x8, :lo12:SymTab+8
	adrp	x24, SymTab+8
	add	x24, x24, :lo12:SymTab+8
	cmp	x0, x8
	b.ne	.LBB285_15
.LBB285_13:                             // %"$20"
                                        // =>This Inner Loop Header: Depth=1
	mov	x23, x24
	mov	x24, x20
	ldp	w9, w8, [x20]
	bfi	x9, x8, #32, #32
	ldp	w0, w8, [x9]
	bfi	x0, x8, #32, #32
	mov	x1, x19
	bl	compare
	cmp	x0, #0                          // =0
	b.gt	.LBB285_17
// %bb.14:                              // %"$21"
                                        //   in Loop: Header=BB285_13 Depth=1
	ldp	w20, w8, [x24, #8]
	bfi	x20, x8, #32, #32
	tst	x20, #0xf
	mov	x23, x24
	b.eq	.LBB285_13
	b	.LBB285_17
.LBB285_15:                             // %"$24"
                                        // =>This Inner Loop Header: Depth=1
	mov	x23, x24
	mov	x24, x20
	ldp	w9, w8, [x20]
	bfi	x9, x8, #32, #32
	ldp	w0, w8, [x9]
	bfi	x0, x8, #32, #32
	mov	x1, x19
	bl	compare
	tbnz	x0, #63, .LBB285_17
// %bb.16:                              // %"$25"
                                        //   in Loop: Header=BB285_15 Depth=1
	ldp	w20, w8, [x24, #8]
	bfi	x20, x8, #32, #32
	tst	x20, #0xf
	mov	x23, x24
	b.eq	.LBB285_15
.LBB285_17:                             // %"$19"
	ldp	w0, w8, [x23]
	bfi	x0, x8, #32, #32
	ldp	w9, w8, [x22, #8]
	bfi	x9, x8, #32, #32
	str	x9, [x21, :lo12:env]
	mov	sp, x29
	ldp	x20, x19, [sp, #48]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #32]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #64             // 16-byte Folded Reload
	ret
.Lfunc_end285:
	.size	_rank, .Lfunc_end285-_rank
	.cfi_endproc
                                        // -- End function
	.globl	_match                          // -- Begin function _match
	.p2align	4
	.type	_match,@function
_match:                                 // @_match
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-48]!           // 16-byte Folded Spill
	stp	x22, x21, [sp, #16]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #32]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 48
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w30, -40
	.cfi_offset w29, -48
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w19, w8, [x9]
	bfi	x19, x8, #32, #32
	ldp	w22, w8, [x9, #8]
	bfi	x22, x8, #32, #32
	tst	x19, #0x6
	b.ne	.LBB286_4
// %bb.1:                               // %"$3"
	tbz	w19, #3, .LBB286_3
// %bb.2:                               // %"$6"
	ldp	w19, w8, [x19]
	bfi	x19, x8, #32, #32
	b	.LBB286_4
.LBB286_3:                              // %"$5"
	mov	x0, x19
	bl	evList
	mov	x19, x0
.LBB286_4:                              // %"$2"
	adrp	x20, env
	ldr	x8, [x20, :lo12:env]
	mov	x9, sp
	sub	x21, x9, #16                    // =16
	mov	sp, x21
	lsr	x10, x19, #32
	stp	w19, w10, [x9, #-16]
	lsr	x10, x8, #32
	stp	w8, w10, [x9, #-8]
	str	x21, [x20, :lo12:env]
	ldp	w1, w8, [x22]
	bfi	x1, x8, #32, #32
	tst	x1, #0x6
	b.ne	.LBB286_8
// %bb.5:                               // %"$8"
	tbz	w1, #3, .LBB286_7
// %bb.6:                               // %"$11"
	ldp	w1, w8, [x1]
	bfi	x1, x8, #32, #32
	b	.LBB286_8
.LBB286_7:                              // %"$10"
	mov	x0, x1
	bl	evList
	mov	x1, x0
.LBB286_8:                              // %"$7"
	ldr	x8, [x20, :lo12:env]
	mov	x9, sp
	sub	x10, x9, #16                    // =16
	mov	sp, x10
	lsr	x11, x1, #32
	lsr	x12, x8, #32
	stp	w1, w11, [x9, #-16]
	stp	w8, w12, [x9, #-8]
	str	x10, [x20, :lo12:env]
	mov	x0, x19
	bl	match
	tbz	w0, #0, .LBB286_10
// %bb.9:
	adrp	x0, SymTab+216
	add	x0, x0, :lo12:SymTab+216
	b	.LBB286_11
.LBB286_10:                             // %"$13"
	adrp	x0, SymTab+8
	add	x0, x0, :lo12:SymTab+8
.LBB286_11:                             // %"$14"
	ldp	w9, w8, [x21, #8]
	bfi	x9, x8, #32, #32
	str	x9, [x20, :lo12:env]
	mov	sp, x29
	ldp	x20, x19, [sp, #32]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #48             // 16-byte Folded Reload
	ret
.Lfunc_end286:
	.size	_match, .Lfunc_end286-_match
	.cfi_endproc
                                        // -- End function
	.globl	_fill                           // -- Begin function _fill
	.p2align	4
	.type	_fill,@function
_fill:                                  // @_fill
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-48]!           // 16-byte Folded Spill
	stp	x22, x21, [sp, #16]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #32]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 48
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w30, -40
	.cfi_offset w29, -48
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w19, w8, [x9]
	bfi	x19, x8, #32, #32
	ldp	w22, w8, [x9, #8]
	bfi	x22, x8, #32, #32
	tst	x19, #0x6
	b.ne	.LBB287_4
// %bb.1:                               // %"$3"
	tbz	w19, #3, .LBB287_3
// %bb.2:                               // %"$6"
	ldp	w19, w8, [x19]
	bfi	x19, x8, #32, #32
	b	.LBB287_4
.LBB287_3:                              // %"$5"
	mov	x0, x19
	bl	evList
	mov	x19, x0
.LBB287_4:                              // %"$2"
	adrp	x20, env
	ldr	x8, [x20, :lo12:env]
	mov	x9, sp
	sub	x21, x9, #16                    // =16
	mov	sp, x21
	lsr	x10, x19, #32
	stp	w19, w10, [x9, #-16]
	lsr	x10, x8, #32
	stp	w8, w10, [x9, #-8]
	str	x21, [x20, :lo12:env]
	ldp	w1, w8, [x22]
	bfi	x1, x8, #32, #32
	tst	x1, #0x6
	b.ne	.LBB287_8
// %bb.5:                               // %"$8"
	tbz	w1, #3, .LBB287_7
// %bb.6:                               // %"$11"
	ldp	w1, w8, [x1]
	bfi	x1, x8, #32, #32
	b	.LBB287_8
.LBB287_7:                              // %"$10"
	mov	x0, x1
	bl	evList
	mov	x1, x0
.LBB287_8:                              // %"$7"
	ldr	x8, [x20, :lo12:env]
	mov	x9, sp
	sub	x10, x9, #16                    // =16
	mov	sp, x10
	lsr	x11, x1, #32
	lsr	x12, x8, #32
	stp	w1, w11, [x9, #-16]
	stp	w8, w12, [x9, #-8]
	str	x10, [x20, :lo12:env]
	mov	x0, x19
	bl	fill
	cmp	x0, #0                          // =0
	csel	x0, x0, x19, ne
	ldp	w9, w8, [x21, #8]
	bfi	x9, x8, #32, #32
	str	x9, [x20, :lo12:env]
	mov	sp, x29
	ldp	x20, x19, [sp, #32]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #48             // 16-byte Folded Reload
	ret
.Lfunc_end287:
	.size	_fill, .Lfunc_end287-_fill
	.cfi_endproc
                                        // -- End function
	.globl	_prove                          // -- Begin function _prove
	.p2align	4
	.type	_prove,@function
_prove:                                 // @_prove
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-96]!           // 16-byte Folded Spill
	stp	x28, x27, [sp, #16]             // 16-byte Folded Spill
	stp	x26, x25, [sp, #32]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #48]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #64]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #80]             // 16-byte Folded Spill
	mov	x29, sp
	sub	sp, sp, #64                     // =64
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	ldp	w19, w8, [x0, #8]
	bfi	x19, x8, #32, #32
	ldp	w20, w8, [x19]
	bfi	x20, x8, #32, #32
	tst	x20, #0x6
	b.ne	.LBB288_4
// %bb.1:                               // %"$3"
	tbz	w20, #3, .LBB288_3
// %bb.2:                               // %"$6"
	ldp	w20, w8, [x20]
	bfi	x20, x8, #32, #32
	b	.LBB288_4
.LBB288_3:                              // %"$5"
	mov	x0, x20
	bl	evList
	mov	x20, x0
.LBB288_4:                              // %"$2"
	tst	x20, #0xf
	adrp	x26, SymTab+8
	add	x26, x26, :lo12:SymTab+8
	b.ne	.LBB288_79
// %bb.5:                               // %"$8"
	adrp	x21, env
	ldr	x8, [x21, :lo12:env]
	mov	x9, sp
	sub	x11, x9, #16                    // =16
	mov	sp, x11
	lsr	x10, x20, #32
	stp	w20, w10, [x9, #-16]
	lsr	x10, x8, #32
	stp	w8, w10, [x9, #-8]
	stur	x11, [x29, #-32]                // 8-byte Folded Spill
	str	x11, [x21, :lo12:env]
	ldp	w9, w8, [x19, #8]
	bfi	x9, x8, #32, #32
	ldp	w25, w8, [x9]
	bfi	x25, x8, #32, #32
	tst	x25, #0x6
	b.ne	.LBB288_8
// %bb.6:                               // %"$11"
	tbz	w25, #3, .LBB288_10
// %bb.7:                               // %"$14"
	ldp	w25, w8, [x25]
	bfi	x25, x8, #32, #32
.LBB288_8:                              // %"$10"
	cmp	x25, x26
	b.ne	.LBB288_11
.LBB288_9:
	mov	x25, xzr
	b	.LBB288_12
.LBB288_10:                             // %"$13"
	mov	x0, x25
	bl	evList
	mov	x25, x0
	cmp	x25, x26
	b.eq	.LBB288_9
.LBB288_11:                             // %"$16"
	ldr	x8, [x21, :lo12:env]
	mov	x9, sp
	sub	x10, x9, #16                    // =16
	mov	sp, x10
	lsr	x11, x25, #32
	lsr	x12, x8, #32
	stp	w25, w11, [x9, #-16]
	stp	w8, w12, [x9, #-8]
	str	x10, [x21, :lo12:env]
.LBB288_12:                             // %"$17"
	ldp	w9, w8, [x20]
	bfi	x9, x8, #32, #32
	ldp	w10, w8, [x9]
	bfi	x10, x8, #32, #32
	ldp	w9, w8, [x9, #8]
	stp	w9, w8, [x20]
	ldp	w22, w8, [x10]
	bfi	x22, x8, #32, #32
	ldp	w9, w8, [x10, #8]
	bfi	x9, x8, #32, #32
	ldp	w8, w10, [x9]
	ldp	w9, w11, [x9, #8]
	bfi	x9, x11, #32, #32
	mov	x11, sp
	sub	x23, x11, #16                   // =16
	mov	sp, x23
	stp	w8, w10, [x11, #-16]
	ldr	x8, [x21, :lo12:env]
	lsr	x10, x8, #32
	stp	w8, w10, [x11, #-8]
	str	x23, [x21, :lo12:env]
	ldp	w8, w10, [x9]
	ldp	w9, w11, [x9, #8]
	bfi	x9, x11, #32, #32
	mov	x11, sp
	mov	x13, x21
	sub	x21, x11, #16                   // =16
	mov	sp, x21
	stp	w8, w10, [x11, #-16]
	ldr	x8, [x13, :lo12:env]
	lsr	x10, x8, #32
	stp	w8, w10, [x11, #-8]
	str	x21, [x13, :lo12:env]
	ldp	w8, w10, [x9]
	ldp	w9, w11, [x9, #8]
	bfi	x9, x11, #32, #32
	mov	x11, sp
	sub	x19, x11, #16                   // =16
	mov	sp, x19
	stp	w8, w10, [x11, #-16]
	ldr	x8, [x13, :lo12:env]
	lsr	x10, x8, #32
	stp	w8, w10, [x11, #-8]
	str	x19, [x13, :lo12:env]
	ldp	w8, w10, [x9]
	ldp	w9, w11, [x9, #8]
	mov	x12, sp
	sub	x28, x12, #16                   // =16
	mov	sp, x28
	stp	w8, w10, [x12, #-16]
	ldr	x8, [x13, :lo12:env]
	lsr	x10, x8, #32
	stp	w8, w10, [x12, #-8]
	str	x28, [x13, :lo12:env]
	mov	x8, sp
	sub	x12, x8, #16                    // =16
	mov	sp, x12
	stp	w9, w11, [x8, #-16]
	ldr	x9, [x13, :lo12:env]
	lsr	x10, x9, #32
	stp	w9, w10, [x8, #-8]
	str	x12, [x13, :lo12:env]
	mov	x8, sp
	sub	x27, x8, #16                    // =16
	mov	sp, x27
	lsr	x9, x26, #32
	stur	x9, [x29, #-16]                 // 8-byte Folded Spill
	stp	w26, w9, [x8, #-16]
	ldr	x9, [x13, :lo12:env]
	lsr	x10, x9, #32
	stp	w9, w10, [x8, #-8]
	str	x27, [x13, :lo12:env]
	ldr	x14, [x26, #368]
	mov	x8, sp
	sub	x9, x8, #16                     // =16
	mov	sp, x9
	lsr	x10, x14, #32
	lsr	x11, x27, #32
	stp	w14, w10, [x8, #-16]
	stp	w27, w11, [x8, #-8]
	adrp	x8, ($Penv)
	ldr	x10, [x8, :lo12:($Penv)]
	stp	x10, x14, [x29, #-48]           // 16-byte Folded Spill
	adrp	x10, ($Pnl)
	ldr	x11, [x10, :lo12:($Pnl)]
	stur	x11, [x29, #-56]                // 8-byte Folded Spill
	str	x9, [x13, :lo12:env]
	stur	x12, [x29, #-8]                 // 8-byte Folded Spill
	str	x12, [x8, :lo12:($Penv)]
	str	x23, [x10, :lo12:($Pnl)]
	stur	x25, [x29, #-24]                // 8-byte Folded Spill
	b	.LBB288_14
.LBB288_13:                             // %"$47"
                                        //   in Loop: Header=BB288_14 Depth=1
	ldp	w8, w9, [x28]
	ldr	w10, [x28]
	bfi	x8, x9, #32, #32
	ldp	w9, w8, [x8]
	stp	w9, w8, [x19]
	ldr	w8, [x28, #4]
	bfi	x10, x8, #32, #32
	ldp	w9, w8, [x10, #8]
	stp	w9, w8, [x28]
	ldp	w9, w8, [x23]
	bfi	x9, x8, #32, #32
	ldp	w9, w8, [x9, #8]
	stp	w9, w8, [x23]
.LBB288_14:                             // %"$18"
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB288_39 Depth 2
                                        //     Child Loop BB288_33 Depth 2
                                        //     Child Loop BB288_57 Depth 2
                                        //     Child Loop BB288_20 Depth 2
                                        //     Child Loop BB288_27 Depth 2
                                        //     Child Loop BB288_46 Depth 2
	ldrb	w8, [x19]
	tst	w8, #0xf
	b.eq	.LBB288_16
// %bb.15:                              // %"$20"
                                        //   in Loop: Header=BB288_14 Depth=1
	ldrb	w8, [x28]
	tst	w8, #0xf
	cset	w8, eq
	cbnz	w8, .LBB288_17
	b	.LBB288_69
.LBB288_16:                             //   in Loop: Header=BB288_14 Depth=1
	mov	w8, #1
	cbz	w8, .LBB288_69
.LBB288_17:                             // %"$21"
                                        //   in Loop: Header=BB288_14 Depth=1
	ldrb	w8, [x21]
	tst	w8, #0xf
	b.eq	.LBB288_24
// %bb.18:                              // %"$24"
                                        //   in Loop: Header=BB288_14 Depth=1
	ldp	w24, w8, [x19]
	bfi	x24, x8, #32, #32
	tst	x24, #0xf
	b.ne	.LBB288_13
// %bb.19:                              // %"$46"
                                        //   in Loop: Header=BB288_14 Depth=1
	ldp	w8, w9, [x24]
	bfi	x8, x9, #32, #32
	adrp	x9, SymTab+216
	add	x9, x9, :lo12:SymTab+216
	cmp	x8, x9
	b.ne	.LBB288_31
.LBB288_20:                             // %"$50"
                                        //   Parent Loop BB288_14 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	w8, w9, [x20]
	bfi	x8, x9, #32, #32
	tst	x8, #0xf
	b.eq	.LBB288_22
// %bb.21:                              //   in Loop: Header=BB288_20 Depth=2
	mov	w8, wzr
	cbnz	w8, .LBB288_23
	b	.LBB288_36
.LBB288_22:                             // %"$52"
                                        //   in Loop: Header=BB288_20 Depth=2
	ldp	w8, w9, [x8]
	bfi	x8, x9, #32, #32
	ldp	w8, w9, [x8]
	bfi	x8, x9, #32, #32
	ldp	w10, w9, [x23]
	bfi	x10, x9, #32, #32
	ldp	w10, w9, [x10]
	bfi	x10, x9, #32, #32
	cmp	x8, x10
	cset	w8, hs
	cbz	w8, .LBB288_36
.LBB288_23:                             // %"$53"
                                        //   in Loop: Header=BB288_20 Depth=2
	ldp	w9, w8, [x20]
	bfi	x9, x8, #32, #32
	ldp	w9, w8, [x9, #8]
	stp	w9, w8, [x20]
	b	.LBB288_20
.LBB288_24:                             // %"$25"
                                        //   in Loop: Header=BB288_14 Depth=1
	ldp	w9, w8, [x19]
	ldp	w11, w10, [x21]
	bfi	x9, x8, #32, #32
	bfi	x11, x10, #32, #32
	ldur	x10, [x29, #-8]                 // 8-byte Folded Reload
	ldp	w8, w10, [x10]
	stp	w8, w10, [x27]
	ldp	w10, w8, [x23]
	bfi	x10, x8, #32, #32
	ldp	w0, w8, [x10]
	bfi	x0, x8, #32, #32
	ldp	w9, w8, [x9]
	bfi	x9, x8, #32, #32
	ldp	w1, w8, [x9, #8]
	bfi	x1, x8, #32, #32
	ldp	w9, w8, [x11]
	bfi	x9, x8, #32, #32
	ldp	w3, w8, [x9]
	bfi	x3, x8, #32, #32
	mov	x2, x22
	bl	unify
	tbz	w0, #0, .LBB288_29
// %bb.25:                              // %"$27"
                                        //   in Loop: Header=BB288_14 Depth=1
	cbz	x25, .LBB288_49
// %bb.26:                              // %"$31"
                                        //   in Loop: Header=BB288_14 Depth=1
	ldp	w9, w8, [x19]
	bfi	x9, x8, #32, #32
	ldp	w24, w8, [x9]
	bfi	x24, x8, #32, #32
	ldp	w8, w9, [x24]
	bfi	x8, x9, #32, #32
	mov	x9, x25
	tst	x9, #0xf
	b.ne	.LBB288_49
.LBB288_27:                             // %"$34"
                                        //   Parent Loop BB288_14 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	w11, w10, [x9]
	bfi	x11, x10, #32, #32
	cmp	x8, x11
	b.eq	.LBB288_45
// %bb.28:                              // %"$37"
                                        //   in Loop: Header=BB288_27 Depth=2
	ldp	w9, w10, [x9, #8]
	bfi	x9, x10, #32, #32
	tst	x9, #0xf
	b.eq	.LBB288_27
	b	.LBB288_49
.LBB288_29:                             // %"$26"
                                        //   in Loop: Header=BB288_14 Depth=1
	ldp	w9, w8, [x21]
	bfi	x9, x8, #32, #32
	ldp	w9, w8, [x9, #8]
	stp	w9, w8, [x21]
	tst	x9, #0xf
	b.eq	.LBB288_14
.LBB288_30:                             // %"$29"
                                        //   in Loop: Header=BB288_14 Depth=1
	ldp	w9, w8, [x20]
	bfi	x9, x8, #32, #32
	ldp	w10, w8, [x9]
	ldp	w9, w11, [x9, #8]
	bfi	x10, x8, #32, #32
	stp	w9, w11, [x20]
	ldp	w9, w8, [x10, #8]
	bfi	x9, x8, #32, #32
	ldp	w11, w8, [x9, #8]
	ldp	w12, w9, [x9]
	bfi	x11, x8, #32, #32
	ldp	w22, w8, [x10]
	stp	w12, w9, [x23]
	ldp	w10, w9, [x11, #8]
	ldp	w12, w11, [x11]
	bfi	x10, x9, #32, #32
	stp	w12, w11, [x21]
	ldp	w11, w9, [x10, #8]
	ldp	w12, w10, [x10]
	bfi	x11, x9, #32, #32
	stp	w12, w10, [x19]
	ldp	w9, w10, [x11]
	ldp	w11, w12, [x11, #8]
	stp	w9, w10, [x28]
	bfi	x22, x8, #32, #32
	ldur	x8, [x29, #-8]                  // 8-byte Folded Reload
	stp	w11, w12, [x8]
	b	.LBB288_14
.LBB288_31:                             // %"$48"
                                        //   in Loop: Header=BB288_14 Depth=1
	ldp	w8, w9, [x8]
	bfi	x8, x9, #32, #32
	tbz	w8, #1, .LBB288_37
// %bb.32:                              // %"$56"
                                        //   in Loop: Header=BB288_14 Depth=1
	ldp	w9, w8, [x24]
	bfi	x9, x8, #32, #32
	ldp	w25, w8, [x9, #8]
	bfi	x25, x8, #32, #32
.LBB288_33:                             // %"$57"
                                        //   Parent Loop BB288_14 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	w0, w8, [x25]
	bfi	x0, x8, #32, #32
	ldp	w25, w8, [x25, #8]
	bfi	x25, x8, #32, #32
	tst	x25, #0xf
	b.ne	.LBB288_42
// %bb.34:                              // %"$58"
                                        //   in Loop: Header=BB288_33 Depth=2
	tst	x0, #0xf
	b.ne	.LBB288_33
// %bb.35:                              // %"$67"
                                        //   in Loop: Header=BB288_33 Depth=2
	bl	evList
	b	.LBB288_33
.LBB288_36:                             // %"$54"
                                        //   in Loop: Header=BB288_14 Depth=1
	ldp	w8, w9, [x24, #8]
	stp	w8, w9, [x19]
	b	.LBB288_14
.LBB288_37:                             // %"$55"
                                        //   in Loop: Header=BB288_14 Depth=1
	adrp	x9, SymTab+536
	add	x9, x9, :lo12:SymTab+536
	cmp	x8, x9
	b.ne	.LBB288_52
// %bb.38:                              // %"$72"
                                        //   in Loop: Header=BB288_14 Depth=1
	ldp	w9, w8, [x24]
	bfi	x9, x8, #32, #32
	ldp	w9, w8, [x9, #8]
	bfi	x9, x8, #32, #32
	ldp	w25, w8, [x9, #8]
	bfi	x25, x8, #32, #32
.LBB288_39:                             // %"$74"
                                        //   Parent Loop BB288_14 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	w0, w8, [x25]
	bfi	x0, x8, #32, #32
	ldp	w25, w8, [x25, #8]
	bfi	x25, x8, #32, #32
	tst	x25, #0xf
	b.ne	.LBB288_53
// %bb.40:                              // %"$75"
                                        //   in Loop: Header=BB288_39 Depth=2
	tst	x0, #0xf
	b.ne	.LBB288_39
// %bb.41:                              // %"$84"
                                        //   in Loop: Header=BB288_39 Depth=2
	bl	evList
	b	.LBB288_39
.LBB288_42:                             // %"$60"
                                        //   in Loop: Header=BB288_14 Depth=1
	tst	x0, #0x6
	b.ne	.LBB288_56
// %bb.43:                              // %"$62"
                                        //   in Loop: Header=BB288_14 Depth=1
	tbz	w0, #3, .LBB288_55
// %bb.44:                              // %"$65"
                                        //   in Loop: Header=BB288_14 Depth=1
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB288_56
.LBB288_45:                             // %"$39"
                                        //   in Loop: Header=BB288_14 Depth=1
	ldp	w0, w8, [x24]
	bfi	x0, x8, #32, #32
	adrp	x1, SymTab+216
	add	x1, x1, :lo12:SymTab+216
	bl	get
	mov	x25, x0
	mov	w26, #1
.LBB288_46:                             // %"$41"
                                        //   Parent Loop BB288_14 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	w9, w8, [x21]
	bfi	x9, x8, #32, #32
	ldp	w0, w8, [x9]
	bfi	x0, x8, #32, #32
	ldp	w1, w8, [x25]
	bfi	x1, x8, #32, #32
	bl	equal
	tbnz	w0, #0, .LBB288_48
// %bb.47:                              // %"$42"
                                        //   in Loop: Header=BB288_46 Depth=2
	ldp	w25, w8, [x25, #8]
	bfi	x25, x8, #32, #32
	add	x26, x26, #1                    // =1
	b	.LBB288_46
.LBB288_48:                             // %"$43"
                                        //   in Loop: Header=BB288_14 Depth=1
	mov	x0, x26
	bl	outWord
	bl	space
	mov	x0, x24
	bl	uniFill
	bl	print
	bl	newline
	adrp	x26, SymTab+8
	add	x26, x26, :lo12:SymTab+8
	ldur	x25, [x29, #-24]                // 8-byte Folded Reload
.LBB288_49:                             // %"$32"
                                        //   in Loop: Header=BB288_14 Depth=1
	ldp	w9, w8, [x21]
	bfi	x9, x8, #32, #32
	ldp	w24, w8, [x9, #8]
	bfi	x24, x8, #32, #32
	tst	x24, #0xf
	b.ne	.LBB288_51
// %bb.50:                              // %"$44"
                                        //   in Loop: Header=BB288_14 Depth=1
	ldp	w25, w8, [x23]
	ldp	w26, w9, [x19]
	bfi	x25, x8, #32, #32
	bfi	x26, x9, #32, #32
	ldp	w0, w8, [x28]
	bfi	x0, x8, #32, #32
	ldp	w1, w8, [x27]
	bfi	x1, x8, #32, #32
	bl	cons
	mov	x1, x0
	mov	x0, x26
	adrp	x26, SymTab+8
	add	x26, x26, :lo12:SymTab+8
	bl	cons
	mov	x1, x0
	mov	x0, x24
	bl	cons
	mov	x1, x0
	mov	x0, x25
	ldur	x25, [x29, #-24]                // 8-byte Folded Reload
	bl	cons
	mov	x1, x0
	mov	x0, x22
	bl	cons
	ldp	w1, w8, [x20]
	bfi	x1, x8, #32, #32
	bl	cons
	lsr	x8, x0, #32
	stp	w0, w8, [x20]
.LBB288_51:                             // %"$45"
                                        //   in Loop: Header=BB288_14 Depth=1
	ldp	w1, w8, [x23]
	bfi	x1, x8, #32, #32
	mov	x0, x22
	bl	cons
	lsr	x8, x0, #32
	stp	w0, w8, [x23]
	ldp	w9, w8, [x19]
	bfi	x9, x8, #32, #32
	ldp	w0, w8, [x9, #8]
	bfi	x0, x8, #32, #32
	ldp	w1, w8, [x28]
	bfi	x1, x8, #32, #32
	bl	cons
	ldp	w9, w8, [x21]
	bfi	x9, x8, #32, #32
	lsr	x8, x0, #32
	stp	w0, w8, [x28]
	ldp	w9, w8, [x9]
	bfi	x9, x8, #32, #32
	ldp	w9, w8, [x9, #8]
	stp	w9, w8, [x19]
	ldur	x8, [x29, #-16]                 // 8-byte Folded Reload
	stp	w26, w8, [x21]
	add	x22, x22, #16                   // =16
	b	.LBB288_14
.LBB288_52:                             // %"$71"
                                        //   in Loop: Header=BB288_14 Depth=1
	ldp	w9, w8, [x24]
	bfi	x9, x8, #32, #32
	ldp	w0, w8, [x9]
	bfi	x0, x8, #32, #32
	adrp	x1, SymTab+216
	add	x1, x1, :lo12:SymTab+216
	bl	get
	lsr	x8, x0, #32
	stp	w0, w8, [x21]
	tst	x0, #0xf
	b.eq	.LBB288_14
	b	.LBB288_30
.LBB288_53:                             // %"$77"
                                        //   in Loop: Header=BB288_14 Depth=1
	tst	x0, #0x6
	b.eq	.LBB288_60
// %bb.54:                              //   in Loop: Header=BB288_14 Depth=1
	ldur	x25, [x29, #-24]                // 8-byte Folded Reload
	b	.LBB288_63
.LBB288_55:                             // %"$64"
                                        //   in Loop: Header=BB288_14 Depth=1
	bl	evList
.LBB288_56:                             // %"$59"
                                        //   in Loop: Header=BB288_14 Depth=1
	ldur	x25, [x29, #-24]                // 8-byte Folded Reload
	lsr	x8, x0, #32
	stp	w0, w8, [x27]
	ldp	w9, w8, [x24]
	bfi	x9, x8, #32, #32
	ldp	w9, w8, [x9]
	bfi	x9, x8, #32, #32
	lsr	x8, x9, #4
	sub	x8, x8, #1                      // =1
	mov	x9, x23
.LBB288_57:                             // %"$68"
                                        //   Parent Loop BB288_14 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	w9, w10, [x9]
	bfi	x9, x10, #32, #32
	subs	x8, x8, #1                      // =1
	b.lt	.LBB288_59
// %bb.58:                              // %"$69"
                                        //   in Loop: Header=BB288_57 Depth=2
	add	x9, x9, #8                      // =8
	b	.LBB288_57
.LBB288_59:                             // %"$70"
                                        //   in Loop: Header=BB288_14 Depth=1
	ldp	w0, w8, [x9]
	bfi	x0, x8, #32, #32
	ldp	w1, w8, [x23]
	bfi	x1, x8, #32, #32
	bl	cons
	lsr	x8, x0, #32
	stp	w0, w8, [x23]
	ldp	w0, w8, [x24, #8]
	bfi	x0, x8, #32, #32
	ldp	w1, w8, [x28]
	bfi	x1, x8, #32, #32
	bl	cons
	lsr	x8, x0, #32
	stp	w0, w8, [x28]
	ldp	w9, w8, [x27]
	stp	w9, w8, [x19]
	b	.LBB288_14
.LBB288_60:                             // %"$79"
                                        //   in Loop: Header=BB288_14 Depth=1
	ldur	x25, [x29, #-24]                // 8-byte Folded Reload
	tbz	w0, #3, .LBB288_62
// %bb.61:                              // %"$82"
                                        //   in Loop: Header=BB288_14 Depth=1
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB288_63
.LBB288_62:                             // %"$81"
                                        //   in Loop: Header=BB288_14 Depth=1
	bl	evList
.LBB288_63:                             // %"$76"
                                        //   in Loop: Header=BB288_14 Depth=1
	lsr	x8, x0, #32
	stp	w0, w8, [x27]
	cmp	x0, x26
	b.ne	.LBB288_66
// %bb.64:                              //   in Loop: Header=BB288_14 Depth=1
	mov	w0, wzr
	tbz	w0, #0, .LBB288_67
.LBB288_65:                             // %"$86"
                                        //   in Loop: Header=BB288_14 Depth=1
	ldp	w8, w9, [x24, #8]
	bfi	x8, x9, #32, #32
	mov	x9, x19
	b	.LBB288_68
.LBB288_66:                             // %"$85"
                                        //   in Loop: Header=BB288_14 Depth=1
	ldp	w9, w8, [x23]
	bfi	x9, x8, #32, #32
	ldp	w0, w8, [x9]
	bfi	x0, x8, #32, #32
	ldp	w9, w8, [x24]
	bfi	x9, x8, #32, #32
	ldp	w9, w8, [x9, #8]
	bfi	x9, x8, #32, #32
	ldp	w1, w8, [x9]
	bfi	x1, x8, #32, #32
	ldp	w3, w8, [x27]
	bfi	x3, x8, #32, #32
	mov	x2, x0
	bl	unify
	tbnz	w0, #0, .LBB288_65
.LBB288_67:                             // %"$87"
                                        //   in Loop: Header=BB288_14 Depth=1
	ldp	w9, w8, [x20]
	bfi	x9, x8, #32, #32
	ldp	w10, w8, [x9]
	bfi	x10, x8, #32, #32
	ldp	w9, w8, [x9, #8]
	stp	w9, w8, [x20]
	ldp	w22, w8, [x10]
	bfi	x22, x8, #32, #32
	ldp	w9, w8, [x10, #8]
	bfi	x9, x8, #32, #32
	ldp	w8, w10, [x9]
	ldp	w9, w11, [x9, #8]
	bfi	x9, x11, #32, #32
	stp	w8, w10, [x23]
	ldp	w8, w10, [x9]
	ldp	w9, w11, [x9, #8]
	bfi	x9, x11, #32, #32
	stp	w8, w10, [x21]
	ldp	w8, w10, [x9]
	ldp	w9, w11, [x9, #8]
	bfi	x9, x11, #32, #32
	stp	w8, w10, [x19]
	ldp	w10, w11, [x9]
	ldp	w8, w12, [x9, #8]
	bfi	x8, x12, #32, #32
	stp	w10, w11, [x28]
	ldur	x9, [x29, #-8]                  // 8-byte Folded Reload
.LBB288_68:                             // %"$88"
                                        //   in Loop: Header=BB288_14 Depth=1
	lsr	x10, x8, #32
	stp	w8, w10, [x9]
	b	.LBB288_14
.LBB288_69:                             // %"$22"
	ldp	x9, x8, [x29, #-16]             // 16-byte Folded Reload
	stp	w26, w9, [x27]
	adrp	x21, env
	b	.LBB288_71
.LBB288_70:                             // %"$95"
                                        //   in Loop: Header=BB288_71 Depth=1
	add	x8, x20, #8                     // =8
.LBB288_71:                             // %"$91"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w20, w9, [x8]
	bfi	x20, x9, #32, #32
	ldrb	w8, [x20, #8]
	tst	w8, #0xf
	b.ne	.LBB288_74
// %bb.72:                              // %"$92"
                                        //   in Loop: Header=BB288_71 Depth=1
	ldp	w9, w8, [x20]
	bfi	x9, x8, #32, #32
	ldp	w8, w10, [x9]
	bfi	x8, x10, #32, #32
	ldp	w10, w9, [x8]
	bfi	x10, x9, #32, #32
	cmp	x10, #2                         // =2
	b.ne	.LBB288_70
// %bb.73:                              // %"$94"
                                        //   in Loop: Header=BB288_71 Depth=1
	ldp	w19, w9, [x8, #8]
	bfi	x19, x9, #32, #32
	mov	w0, #2
	mov	x1, x19
	bl	lookup
	mov	x1, x0
	mov	x0, x19
	bl	cons
	ldp	w1, w8, [x27]
	bfi	x1, x8, #32, #32
	bl	cons
	lsr	x8, x0, #32
	stp	w0, w8, [x27]
	b	.LBB288_70
.LBB288_74:                             // %"$93"
	adrp	x8, ($Pnl)
	ldur	x9, [x29, #-56]                 // 8-byte Folded Reload
	str	x9, [x8, :lo12:($Pnl)]
	adrp	x8, ($Penv)
	ldur	x9, [x29, #-48]                 // 8-byte Folded Reload
	str	x9, [x8, :lo12:($Penv)]
	adrp	x8, SymTab+376
	ldur	x9, [x29, #-40]                 // 8-byte Folded Reload
	str	x9, [x8, :lo12:SymTab+376]
	ldp	w26, w8, [x27]
	bfi	x26, x8, #32, #32
	tst	x26, #0xf
	b.eq	.LBB288_78
// %bb.75:                              // %"$97"
	ldur	x8, [x29, #-8]                  // 8-byte Folded Reload
	ldrb	w8, [x8]
	tst	w8, #0xf
	b.eq	.LBB288_77
// %bb.76:                              // %"$99"
	adrp	x26, SymTab+8
	add	x26, x26, :lo12:SymTab+8
	b	.LBB288_78
.LBB288_77:
	adrp	x26, SymTab+216
	add	x26, x26, :lo12:SymTab+216
.LBB288_78:                             // %"$96"
	ldur	x9, [x29, #-32]                 // 8-byte Folded Reload
	ldp	w9, w8, [x9, #8]
	bfi	x9, x8, #32, #32
	str	x9, [x21, :lo12:env]
.LBB288_79:                             // %"$9"
	mov	x0, x26
	mov	sp, x29
	ldp	x20, x19, [sp, #80]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #64]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #48]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #32]             // 16-byte Folded Reload
	ldp	x28, x27, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #96             // 16-byte Folded Reload
	ret
.Lfunc_end288:
	.size	_prove, .Lfunc_end288-_prove
	.cfi_endproc
                                        // -- End function
	.globl	_arrow                          // -- Begin function _arrow
	.p2align	4
	.type	_arrow,@function
_arrow:                                 // @_arrow
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	ldp	w8, w9, [x0, #8]
	bfi	x8, x9, #32, #32
	adrp	x9, ($Pnl)
	ldr	x9, [x9, :lo12:($Pnl)]
	ldp	w9, w10, [x9]
	bfi	x9, x10, #32, #32
	ldp	w11, w10, [x8, #8]
	bfi	x11, x10, #32, #32
	ldp	w10, w12, [x11]
	bfi	x10, x12, #32, #32
	tbz	w10, #1, .LBB289_3
// %bb.1:                               // %"$2"
	lsr	x10, x10, #4
	sub	x10, x10, #1                    // =1
	subs	x10, x10, #1                    // =1
	b.lt	.LBB289_3
.LBB289_2:                              // %"$5"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w9, w11, [x9, #8]
	bfi	x9, x11, #32, #32
	subs	x10, x10, #1                    // =1
	b.ge	.LBB289_2
.LBB289_3:                              // %"$3"
	ldp	w0, w10, [x9]
	bfi	x0, x10, #32, #32
	ldp	w1, w9, [x8]
	bfi	x1, x9, #32, #32
	bl	lookup
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end289:
	.size	_arrow, .Lfunc_end289-_arrow
	.cfi_endproc
                                        // -- End function
	.globl	_unify                          // -- Begin function _unify
	.p2align	4
	.type	_unify,@function
_unify:                                 // @_unify
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-32]!           // 16-byte Folded Spill
	stp	x20, x19, [sp, #16]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 32
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w30, -24
	.cfi_offset w29, -32
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w1, w8, [x9]
	bfi	x1, x8, #32, #32
	tst	x1, #0x6
	b.ne	.LBB290_4
// %bb.1:                               // %"$3"
	tbz	w1, #3, .LBB290_3
// %bb.2:                               // %"$6"
	ldp	w1, w8, [x1]
	bfi	x1, x8, #32, #32
	b	.LBB290_4
.LBB290_3:                              // %"$5"
	mov	x0, x1
	bl	evList
	mov	x1, x0
.LBB290_4:                              // %"$2"
	adrp	x19, env
	ldr	x8, [x19, :lo12:env]
	mov	x9, sp
	sub	x20, x9, #16                    // =16
	mov	sp, x20
	lsr	x10, x1, #32
	stp	w1, w10, [x9, #-16]
	lsr	x10, x8, #32
	stp	w8, w10, [x9, #-8]
	str	x20, [x19, :lo12:env]
	adrp	x8, ($Pnl)
	ldr	x8, [x8, :lo12:($Pnl)]
	ldp	w8, w9, [x8]
	bfi	x8, x9, #32, #32
	ldp	w10, w9, [x8, #8]
	bfi	x10, x9, #32, #32
	ldp	w0, w9, [x10]
	bfi	x0, x9, #32, #32
	ldp	w2, w9, [x8]
	bfi	x2, x9, #32, #32
	mov	x3, x1
	bl	unify
	tbz	w0, #0, .LBB290_6
// %bb.5:                               // %"$7"
	adrp	x8, ($Penv)
	ldr	x8, [x8, :lo12:($Penv)]
	ldp	w0, w9, [x8]
	bfi	x0, x9, #32, #32
	b	.LBB290_7
.LBB290_6:
	adrp	x0, SymTab+8
	add	x0, x0, :lo12:SymTab+8
.LBB290_7:                              // %"$9"
	ldp	w9, w8, [x20, #8]
	bfi	x9, x8, #32, #32
	str	x9, [x19, :lo12:env]
	mov	sp, x29
	ldp	x20, x19, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #32             // 16-byte Folded Reload
	ret
.Lfunc_end290:
	.size	_unify, .Lfunc_end290-_unify
	.cfi_endproc
                                        // -- End function
	.globl	_group                          // -- Begin function _group
	.p2align	4
	.type	_group,@function
_group:                                 // @_group
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-96]!           // 16-byte Folded Spill
	str	x27, [sp, #16]                  // 8-byte Folded Spill
	stp	x26, x25, [sp, #32]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #48]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #64]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #80]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w19, w8, [x9]
	bfi	x19, x8, #32, #32
	tst	x19, #0x6
	b.ne	.LBB291_4
// %bb.1:                               // %"$3"
	tbz	w19, #3, .LBB291_3
// %bb.2:                               // %"$6"
	ldp	w19, w8, [x19]
	bfi	x19, x8, #32, #32
	b	.LBB291_4
.LBB291_3:                              // %"$5"
	mov	x0, x19
	bl	evList
	mov	x19, x0
.LBB291_4:                              // %"$2"
	adrp	x24, env
	ldr	x8, [x24, :lo12:env]
	mov	x9, sp
	sub	x25, x9, #16                    // =16
	mov	sp, x25
	lsr	x10, x19, #32
	lsr	x11, x8, #32
	stp	w19, w10, [x9, #-16]
	stp	w8, w11, [x9, #-8]
	tst	x19, #0xf
	str	x25, [x24, :lo12:env]
	b.eq	.LBB291_6
// %bb.5:
	adrp	x20, SymTab+8
	add	x20, x20, :lo12:SymTab+8
	b	.LBB291_15
.LBB291_6:                              // %"$8"
	ldp	w9, w8, [x19]
	bfi	x9, x8, #32, #32
	ldp	w0, w8, [x9, #8]
	bfi	x0, x8, #32, #32
	adrp	x21, SymTab+8
	add	x21, x21, :lo12:SymTab+8
	mov	x1, x21
	bl	cons
	ldp	w9, w8, [x19]
	bfi	x9, x8, #32, #32
	ldp	w20, w8, [x9]
	bfi	x20, x8, #32, #32
	mov	x1, x0
	bl	cons
	mov	x1, x0
	mov	x0, x20
	bl	cons
	mov	x1, x21
	bl	cons
	mov	x20, x0
	ldr	x8, [x24, :lo12:env]
	mov	x9, sp
	sub	x10, x9, #16                    // =16
	mov	sp, x10
	lsr	x11, x0, #32
	lsr	x12, x8, #32
	stp	w20, w11, [x9, #-16]
	stp	w8, w12, [x9, #-8]
	str	x10, [x24, :lo12:env]
	b	.LBB291_8
.LBB291_7:                              // %"$16"
                                        //   in Loop: Header=BB291_8 Depth=1
	ldp	w9, w8, [x27, #8]
	bfi	x9, x8, #32, #32
	ldp	w10, w8, [x9]
	bfi	x10, x8, #32, #32
	lsr	x8, x23, #32
	stp	w23, w8, [x10, #8]
	stp	w23, w8, [x9]
.LBB291_8:                              // %"$10"
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB291_10 Depth 2
	ldp	w19, w8, [x19, #8]
	bfi	x19, x8, #32, #32
	tst	x19, #0xf
	b.ne	.LBB291_13
// %bb.9:                               // %"$11"
                                        //   in Loop: Header=BB291_8 Depth=1
	ldp	w9, w8, [x19]
	bfi	x9, x8, #32, #32
	ldp	w22, w8, [x9]
	bfi	x22, x8, #32, #32
	ldp	w0, w8, [x9, #8]
	bfi	x0, x8, #32, #32
	mov	x1, x21
	bl	cons
	mov	x23, x0
	mov	x8, x20
.LBB291_10:                             // %"$13"
                                        //   Parent Loop BB291_8 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	mov	x26, x8
	ldr	w8, [x8, #4]
	ldr	w27, [x26]
	bfi	x27, x8, #32, #32
	ldp	w1, w8, [x27]
	bfi	x1, x8, #32, #32
	mov	x0, x22
	bl	equal
	tbnz	w0, #0, .LBB291_7
// %bb.11:                              // %"$14"
                                        //   in Loop: Header=BB291_10 Depth=2
	ldp	w8, w9, [x26, #8]
	bfi	x8, x9, #32, #32
	tst	x8, #0xf
	b.eq	.LBB291_10
// %bb.12:                              // %"$18"
                                        //   in Loop: Header=BB291_8 Depth=1
	mov	x0, x23
	mov	x1, x23
	bl	cons
	mov	x1, x0
	mov	x0, x22
	bl	cons
	mov	x1, x21
	bl	cons
	lsr	x8, x0, #32
	stp	w0, w8, [x26, #8]
	b	.LBB291_8
.LBB291_13:
	mov	x8, x20
.LBB291_14:                             // %"$19"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w10, w9, [x8]
	bfi	x10, x9, #32, #32
	ldr	w9, [x10, #8]!
	ldr	w11, [x10, #4]
	bfi	x9, x11, #32, #32
	ldp	w9, w11, [x9, #8]
	stp	w9, w11, [x10]
	ldp	w8, w9, [x8, #8]
	bfi	x8, x9, #32, #32
	tst	x8, #0xf
	b.eq	.LBB291_14
.LBB291_15:                             // %"$9"
	ldp	w9, w8, [x25, #8]
	bfi	x9, x8, #32, #32
	str	x9, [x24, :lo12:env]
	mov	x0, x20
	mov	sp, x29
	ldp	x20, x19, [sp, #80]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #64]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #48]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #32]             // 16-byte Folded Reload
	ldr	x27, [sp, #16]                  // 8-byte Folded Reload
	ldp	x29, x30, [sp], #96             // 16-byte Folded Reload
	ret
.Lfunc_end291:
	.size	_group, .Lfunc_end291-_group
	.cfi_endproc
                                        // -- End function
	.globl	_sort                           // -- Begin function _sort
	.p2align	4
	.type	_sort,@function
_sort:                                  // @_sort
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-96]!           // 16-byte Folded Spill
	stp	x28, x27, [sp, #16]             // 16-byte Folded Spill
	stp	x26, x25, [sp, #32]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #48]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #64]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #80]             // 16-byte Folded Spill
	mov	x29, sp
	sub	sp, sp, #32                     // =32
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w26, w8, [x9]
	bfi	x26, x8, #32, #32
	ldp	w20, w21, [x9, #8]
	tst	x26, #0x6
	b.ne	.LBB292_3
// %bb.1:                               // %"$3"
	tbz	w26, #3, .LBB292_5
// %bb.2:                               // %"$6"
	ldp	w26, w8, [x26]
	bfi	x26, x8, #32, #32
.LBB292_3:                              // %"$2"
	tst	x26, #0xf
	b.eq	.LBB292_6
.LBB292_4:                              // %"$7"
	mov	x0, x26
	mov	sp, x29
	ldp	x20, x19, [sp, #80]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #64]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #48]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #32]             // 16-byte Folded Reload
	ldp	x28, x27, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #96             // 16-byte Folded Reload
	ret
.LBB292_5:                              // %"$5"
	mov	x0, x26
	bl	evList
	mov	x26, x0
	tst	x26, #0xf
	b.ne	.LBB292_4
.LBB292_6:                              // %"$8"
	bfi	x20, x21, #32, #32
	tst	x20, #0xf
	adrp	x21, SymTab+8
	add	x21, x21, :lo12:SymTab+8
	b.eq	.LBB292_39
// %bb.7:                               // %"$12.preheader"
	lsr	x22, x21, #32
	mov	x19, x21
	b	.LBB292_9
.LBB292_8:                              // %"$22"
                                        //   in Loop: Header=BB292_9 Depth=1
	tst	x21, #0xf
	ldur	x26, [x29, #-8]                 // 8-byte Folded Reload
	b.ne	.LBB292_4
.LBB292_9:                              // %"$12"
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB292_16 Depth 2
	tst	x21, #0xf
	b.eq	.LBB292_12
// %bb.10:                              //   in Loop: Header=BB292_9 Depth=1
	mov	w8, wzr
	cbz	w8, .LBB292_13
.LBB292_11:                             // %"$15"
                                        //   in Loop: Header=BB292_9 Depth=1
	ldp	w23, w8, [x21, #8]
	bfi	x23, x8, #32, #32
	mov	x24, x26
	mov	x26, x21
	b	.LBB292_14
.LBB292_12:                             // %"$14"
                                        //   in Loop: Header=BB292_9 Depth=1
	ldp	w0, w8, [x26]
	bfi	x0, x8, #32, #32
	ldp	w1, w8, [x21]
	bfi	x1, x8, #32, #32
	bl	compare
	lsr	x8, x0, #63
	eor	w8, w8, #0x1
	cbnz	w8, .LBB292_11
.LBB292_13:                             // %"$16"
                                        //   in Loop: Header=BB292_9 Depth=1
	ldp	w24, w8, [x26, #8]
	bfi	x24, x8, #32, #32
	mov	x23, x21
.LBB292_14:                             // %"$17"
                                        //   in Loop: Header=BB292_9 Depth=1
	mov	x21, x19
	mov	x25, xzr
	mov	x9, x26
	str	w21, [x26, #8]!
	ldp	w20, w8, [x9]
	bfi	x20, x8, #32, #32
	stur	x9, [x29, #-8]                  // 8-byte Folded Spill
	str	w22, [x9, #12]
	b	.LBB292_16
.LBB292_15:                             // %"$46"
                                        //   in Loop: Header=BB292_16 Depth=2
	mov	x26, x24
	str	w19, [x26, #8]!
	str	w22, [x24, #12]
	ldp	w20, w8, [x24]
	mov	x21, x0
	bfi	x20, x8, #32, #32
	mov	x24, x28
	mov	x23, x27
.LBB292_16:                             // %"$18"
                                        //   Parent Loop BB292_9 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	tst	x24, #0xf
	b.eq	.LBB292_18
// %bb.17:                              // %"$20"
                                        //   in Loop: Header=BB292_16 Depth=2
	tst	x23, #0xf
	cset	w8, eq
	cbnz	w8, .LBB292_19
	b	.LBB292_8
.LBB292_18:                             //   in Loop: Header=BB292_16 Depth=2
	mov	w8, #1
	cbz	w8, .LBB292_8
.LBB292_19:                             // %"$21"
                                        //   in Loop: Header=BB292_16 Depth=2
	tst	x23, #0xf
	b.eq	.LBB292_22
// %bb.20:                              // %"$25"
                                        //   in Loop: Header=BB292_16 Depth=2
	ldp	w28, w8, [x24, #8]
	bfi	x28, x8, #32, #32
	ldp	w0, w8, [x24]
	bfi	x0, x8, #32, #32
	mov	x1, x20
	bl	compare
	tbnz	x0, #63, .LBB292_25
// %bb.21:                              //   in Loop: Header=BB292_16 Depth=2
	mov	x27, x23
	b	.LBB292_34
.LBB292_22:                             // %"$24"
                                        //   in Loop: Header=BB292_16 Depth=2
	tst	x24, #0xf
	b.eq	.LBB292_27
// %bb.23:                              // %"$29"
                                        //   in Loop: Header=BB292_16 Depth=2
	ldp	w27, w8, [x23, #8]
	bfi	x27, x8, #32, #32
	ldp	w0, w8, [x23]
	bfi	x0, x8, #32, #32
	mov	x1, x20
	bl	compare
	mov	x28, x24
	tbz	x0, #63, .LBB292_33
// %bb.24:                              // %"$30"
                                        //   in Loop: Header=BB292_16 Depth=2
	mov	x24, x23
	b	.LBB292_26
.LBB292_25:                             // %"$26"
                                        //   in Loop: Header=BB292_16 Depth=2
	mov	x27, x23
.LBB292_26:                             // %"$23"
                                        //   in Loop: Header=BB292_16 Depth=2
	mov	x8, x25
	mov	x25, x26
	mov	x0, x24
	cbnz	x8, .LBB292_35
	b	.LBB292_15
.LBB292_27:                             // %"$28"
                                        //   in Loop: Header=BB292_16 Depth=2
	ldp	w0, w8, [x24]
	bfi	x0, x8, #32, #32
	mov	x1, x20
	bl	compare
	tbnz	x0, #63, .LBB292_31
// %bb.28:                              // %"$32"
                                        //   in Loop: Header=BB292_16 Depth=2
	ldp	w0, w8, [x23]
	bfi	x0, x8, #32, #32
	mov	x1, x20
	bl	compare
	tbnz	x0, #63, .LBB292_30
// %bb.29:                              // %"$40"
                                        //   in Loop: Header=BB292_16 Depth=2
	ldp	w0, w8, [x24]
	bfi	x0, x8, #32, #32
	ldp	w1, w8, [x23]
	bfi	x1, x8, #32, #32
	bl	compare
	tbz	x0, #63, .LBB292_32
.LBB292_30:                             // %"$41"
                                        //   in Loop: Header=BB292_16 Depth=2
	ldp	w28, w8, [x24, #8]
	bfi	x28, x8, #32, #32
	mov	x27, x23
	b	.LBB292_34
.LBB292_31:                             // %"$33"
                                        //   in Loop: Header=BB292_16 Depth=2
	ldp	w0, w8, [x23]
	bfi	x0, x8, #32, #32
	mov	x1, x20
	bl	compare
	tbnz	x0, #63, .LBB292_36
.LBB292_32:                             // %"$42"
                                        //   in Loop: Header=BB292_16 Depth=2
	ldp	w27, w8, [x23, #8]
	mov	x28, x24
	bfi	x27, x8, #32, #32
.LBB292_33:                             // %"$23"
                                        //   in Loop: Header=BB292_16 Depth=2
	mov	x24, x23
.LBB292_34:                             // %"$23"
                                        //   in Loop: Header=BB292_16 Depth=2
	mov	x8, x26
	mov	x0, x24
	cbz	x8, .LBB292_15
.LBB292_35:                             // %"$44"
                                        //   in Loop: Header=BB292_16 Depth=2
	lsr	x9, x24, #32
	stp	w24, w9, [x8]
	mov	x0, x21
	b	.LBB292_15
.LBB292_36:                             // %"$35"
                                        //   in Loop: Header=BB292_16 Depth=2
	ldp	w0, w8, [x24]
	bfi	x0, x8, #32, #32
	ldp	w1, w8, [x23]
	bfi	x1, x8, #32, #32
	bl	compare
	tbnz	x0, #63, .LBB292_38
// %bb.37:                              // %"$38"
                                        //   in Loop: Header=BB292_16 Depth=2
	ldp	w27, w8, [x23, #8]
	mov	x28, x24
	mov	x24, x23
	bfi	x27, x8, #32, #32
	b	.LBB292_26
.LBB292_38:                             // %"$37"
                                        //   in Loop: Header=BB292_16 Depth=2
	ldp	w28, w8, [x24, #8]
	mov	x27, x23
	bfi	x28, x8, #32, #32
	b	.LBB292_26
.LBB292_39:                             // %"$10"
	mov	x8, sp
	sub	x11, x8, #16                    // =16
	mov	sp, x11
	lsr	x9, x26, #32
	stp	w26, w9, [x8, #-16]
	adrp	x12, env
	ldr	x9, [x12, :lo12:env]
	lsr	x10, x9, #32
	stp	w9, w10, [x8, #-8]
	stur	x11, [x29, #-24]                // 8-byte Folded Spill
	str	x11, [x12, :lo12:env]
	mov	x8, sp
	sub	x22, x8, #16                    // =16
	mov	sp, x22
	lsr	x13, x21, #32
	stp	w21, w13, [x8, #-16]
	ldr	x9, [x12, :lo12:env]
	lsr	x10, x9, #32
	stp	w9, w10, [x8, #-8]
	str	x22, [x12, :lo12:env]
	mov	x8, sp
	sub	x25, x8, #16                    // =16
	mov	sp, x25
	mov	w9, #10
	stp	w9, wzr, [x8, #-16]
	ldr	x10, [x12, :lo12:env]
	lsr	x11, x10, #32
	stp	w10, w11, [x8, #-8]
	str	x25, [x12, :lo12:env]
	mov	x8, sp
	sub	x26, x8, #16                    // =16
	mov	sp, x26
	stp	w9, wzr, [x8, #-16]
	ldr	x9, [x12, :lo12:env]
	lsr	x10, x9, #32
	stp	w9, w10, [x8, #-8]
	str	x26, [x12, :lo12:env]
	mov	x8, sp
	sub	x27, x8, #32                    // =32
	mov	sp, x27
	stur	x13, [x29, #-8]                 // 8-byte Folded Spill
	stp	w21, w13, [x8, #-24]
	mov	w9, #2
	stp	w9, wzr, [x8, #-16]
	mov	x8, sp
	sub	x28, x8, #32                    // =32
	mov	sp, x28
	lsr	x10, x27, #32
	stp	w27, w10, [x8, #-24]
	stp	w9, wzr, [x8, #-16]
	ldp	w0, w8, [x20]
	bfi	x0, x8, #32, #32
	tst	x0, #0x6
	b.ne	.LBB292_43
// %bb.40:                              // %"$51"
	tbz	w0, #3, .LBB292_42
// %bb.41:                              // %"$54"
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB292_43
.LBB292_42:                             // %"$53"
	bl	evList
.LBB292_43:                             // %"$50"
	mov	x8, sp
	sub	x19, x8, #48                    // =48
	mov	sp, x19
	lsr	x9, x28, #32
	mov	w10, #2
	stp	w28, w9, [x8, #-40]
	stp	w10, wzr, [x8, #-32]
	mov	x9, x19
	str	w0, [x9, #24]!
	lsr	x10, x0, #32
	stur	w10, [x8, #-20]
	add	x10, x27, #24                   // =24
	lsr	x11, x10, #32
	stp	w10, w11, [x27]
	add	x10, x28, #24                   // =24
	lsr	x11, x10, #32
	stp	w10, w11, [x28]
	adrp	x12, env
	ldr	x10, [x12, :lo12:env]
	lsr	x11, x10, #32
	stp	w10, w11, [x8, #-16]
	str	x9, [x12, :lo12:env]
	lsr	x10, x9, #32
	stp	w9, w10, [x8, #-48]
	stur	x22, [x29, #-16]                // 8-byte Folded Spill
	b	.LBB292_45
.LBB292_44:                             // %"$68"
                                        //   in Loop: Header=BB292_45 Depth=1
	ldur	x22, [x29, #-16]                // 8-byte Folded Reload
	ldrb	w8, [x22]
	tst	w8, #0xf
	b.ne	.LBB292_74
.LBB292_45:                             // %"$55"
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB292_52 Depth 2
	ldur	x9, [x29, #-24]                 // 8-byte Folded Reload
	ldp	w8, w9, [x9]
	stp	w8, w9, [x25]
	ldp	w8, w9, [x22]
	stp	w8, w9, [x26]
	tst	w8, #0xf
	b.eq	.LBB292_48
// %bb.46:                              //   in Loop: Header=BB292_45 Depth=1
	mov	w8, wzr
	cbz	w8, .LBB292_49
.LBB292_47:                             // %"$61"
                                        //   in Loop: Header=BB292_45 Depth=1
	ldp	w22, w8, [x26]
	bfi	x22, x8, #32, #32
	ldp	w8, w9, [x22, #8]
	bfi	x8, x9, #32, #32
	mov	x9, x26
	b	.LBB292_50
.LBB292_48:                             // %"$57"
                                        //   in Loop: Header=BB292_45 Depth=1
	ldp	w9, w8, [x25]
	ldp	w11, w10, [x26]
	bfi	x9, x8, #32, #32
	bfi	x11, x10, #32, #32
	ldp	w8, w9, [x9]
	ldp	w10, w11, [x11]
	stp	w8, w9, [x28, #24]
	stp	w10, w11, [x27, #24]
	mov	x0, x19
	bl	evList
	cmp	x0, x21
	cset	w8, eq
	cbnz	w8, .LBB292_47
.LBB292_49:                             // %"$62"
                                        //   in Loop: Header=BB292_45 Depth=1
	ldp	w22, w8, [x25]
	bfi	x22, x8, #32, #32
	ldp	w8, w9, [x22, #8]
	bfi	x8, x9, #32, #32
	mov	x9, x25
.LBB292_50:                             // %"$63"
                                        //   in Loop: Header=BB292_45 Depth=1
	mov	x20, xzr
	lsr	x10, x8, #32
	stp	w8, w10, [x9]
	ldp	w24, w8, [x22]
	lsr	x9, x22, #32
	ldur	x10, [x29, #-24]                // 8-byte Folded Reload
	stp	w22, w9, [x10]
	ldp	x9, x10, [x29, #-16]            // 16-byte Folded Reload
	stp	w21, w10, [x9]
	str	w21, [x22, #8]!
	bfi	x24, x8, #32, #32
	str	w10, [x22, #4]
	b	.LBB292_52
.LBB292_51:                             // %"$113"
                                        //   in Loop: Header=BB292_52 Depth=2
	lsr	x8, x23, #32
	stp	w23, w8, [x22]
	mov	x22, x23
	str	w21, [x22, #8]!
	ldur	x8, [x29, #-8]                  // 8-byte Folded Reload
	str	w8, [x23, #12]
	ldp	w24, w8, [x23]
	bfi	x24, x8, #32, #32
.LBB292_52:                             // %"$64"
                                        //   Parent Loop BB292_45 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldrb	w8, [x25]
	tst	w8, #0xf
	b.eq	.LBB292_54
// %bb.53:                              // %"$66"
                                        //   in Loop: Header=BB292_52 Depth=2
	ldrb	w8, [x26]
	tst	w8, #0xf
	cset	w8, eq
	cbnz	w8, .LBB292_55
	b	.LBB292_44
.LBB292_54:                             //   in Loop: Header=BB292_52 Depth=2
	mov	w8, #1
	cbz	w8, .LBB292_44
.LBB292_55:                             // %"$67"
                                        //   in Loop: Header=BB292_52 Depth=2
	ldrb	w8, [x26]
	tst	w8, #0xf
	b.eq	.LBB292_57
// %bb.56:                              // %"$71"
                                        //   in Loop: Header=BB292_52 Depth=2
	ldp	w23, w8, [x25]
	bfi	x23, x8, #32, #32
	ldp	w9, w8, [x23, #8]
	stp	w9, w8, [x25]
	b	.LBB292_59
.LBB292_57:                             // %"$70"
                                        //   in Loop: Header=BB292_52 Depth=2
	ldrb	w8, [x25]
	tst	w8, #0xf
	b.eq	.LBB292_62
// %bb.58:                              // %"$78"
                                        //   in Loop: Header=BB292_52 Depth=2
	ldp	w23, w8, [x26]
	bfi	x23, x8, #32, #32
	ldp	w9, w8, [x23, #8]
	stp	w9, w8, [x26]
.LBB292_59:                             // %"$69"
                                        //   in Loop: Header=BB292_52 Depth=2
	ldp	w8, w9, [x23]
	stp	w8, w9, [x28, #24]
	lsr	x8, x24, #32
	stp	w24, w8, [x27, #24]
	mov	x0, x19
	bl	evList
	cmp	x0, x21
	csetm	x8, ne
	tst	x8, #0x8000000000000000
	csel	x8, x22, x20, eq
	csel	x20, x20, x22, eq
	mov	x22, x8
.LBB292_60:                             // %"$69"
                                        //   in Loop: Header=BB292_52 Depth=2
	cbnz	x22, .LBB292_51
// %bb.61:                              // %"$112"
                                        //   in Loop: Header=BB292_52 Depth=2
	ldur	x22, [x29, #-16]                // 8-byte Folded Reload
	b	.LBB292_51
.LBB292_62:                             // %"$77"
                                        //   in Loop: Header=BB292_52 Depth=2
	ldp	w9, w8, [x25]
	bfi	x9, x8, #32, #32
	ldp	w8, w9, [x9]
	stp	w8, w9, [x28, #24]
	mov	x23, x21
	lsr	x21, x24, #32
	stp	w24, w21, [x27, #24]
	mov	x0, x19
	bl	evList
	cmp	x0, x23
	csetm	x8, ne
	tbnz	x8, #63, .LBB292_67
// %bb.63:                              // %"$87"
                                        //   in Loop: Header=BB292_52 Depth=2
	ldp	w9, w8, [x26]
	bfi	x9, x8, #32, #32
	ldp	w8, w9, [x9]
	stp	w8, w9, [x28, #24]
	stp	w24, w21, [x27, #24]
	mov	x0, x19
	bl	evList
	cmp	x0, x23
	csetm	x8, ne
	mov	x21, x23
	tbnz	x8, #63, .LBB292_66
// %bb.64:                              // %"$104"
                                        //   in Loop: Header=BB292_52 Depth=2
	ldp	w9, w8, [x25]
	ldp	w11, w10, [x26]
	bfi	x9, x8, #32, #32
	bfi	x11, x10, #32, #32
	ldp	w8, w9, [x9]
	ldp	w10, w11, [x11]
	stp	w8, w9, [x28, #24]
	stp	w10, w11, [x27, #24]
	mov	x0, x19
	bl	evList
	cmp	x0, x21
	csetm	x8, ne
	tbnz	x8, #63, .LBB292_66
// %bb.65:                              // %"$109"
                                        //   in Loop: Header=BB292_52 Depth=2
	ldp	w23, w8, [x26]
	bfi	x23, x8, #32, #32
	ldp	w9, w8, [x23, #8]
	stp	w9, w8, [x26]
	b	.LBB292_60
.LBB292_66:                             // %"$105"
                                        //   in Loop: Header=BB292_52 Depth=2
	ldp	w23, w8, [x25]
	bfi	x23, x8, #32, #32
	ldp	w9, w8, [x23, #8]
	stp	w9, w8, [x25]
	b	.LBB292_60
.LBB292_67:                             // %"$88"
                                        //   in Loop: Header=BB292_52 Depth=2
	ldp	w9, w8, [x26]
	bfi	x9, x8, #32, #32
	ldp	w8, w9, [x9]
	stp	w8, w9, [x28, #24]
	stp	w24, w21, [x27, #24]
	mov	x0, x19
	bl	evList
	cmp	x0, x23
	csetm	x8, ne
	mov	x21, x23
	tbnz	x8, #63, .LBB292_69
// %bb.68:                              // %"$92"
                                        //   in Loop: Header=BB292_52 Depth=2
	ldp	w23, w8, [x26]
	bfi	x23, x8, #32, #32
	ldp	w8, w9, [x23, #8]
	bfi	x8, x9, #32, #32
	mov	x9, x26
	mov	x0, x22
	b	.LBB292_73
.LBB292_69:                             // %"$93"
                                        //   in Loop: Header=BB292_52 Depth=2
	ldp	w9, w8, [x25]
	ldp	w11, w10, [x26]
	bfi	x9, x8, #32, #32
	bfi	x11, x10, #32, #32
	ldp	w8, w9, [x9]
	ldp	w10, w11, [x11]
	stp	w8, w9, [x28, #24]
	stp	w10, w11, [x27, #24]
	mov	x0, x19
	bl	evList
	cmp	x0, x21
	csetm	x8, ne
	tbnz	x8, #63, .LBB292_71
// %bb.70:                              // %"$99"
                                        //   in Loop: Header=BB292_52 Depth=2
	ldp	w23, w8, [x26]
	bfi	x23, x8, #32, #32
	ldp	w8, w10, [x23, #8]
	mov	x9, x26
	b	.LBB292_72
.LBB292_71:                             // %"$98"
                                        //   in Loop: Header=BB292_52 Depth=2
	ldp	w23, w8, [x25]
	bfi	x23, x8, #32, #32
	ldp	w8, w10, [x23, #8]
	mov	x9, x25
.LBB292_72:                             // %"$94"
                                        //   in Loop: Header=BB292_52 Depth=2
	bfi	x8, x10, #32, #32
	mov	x0, x20
	mov	x20, x22
.LBB292_73:                             // %"$94"
                                        //   in Loop: Header=BB292_52 Depth=2
	lsr	x10, x8, #32
	stp	w8, w10, [x9]
	mov	x22, x0
	b	.LBB292_60
.LBB292_74:                             // %"$116"
	ldur	x9, [x29, #-24]                 // 8-byte Folded Reload
	ldp	w26, w8, [x9]
	bfi	x26, x8, #32, #32
	ldp	w9, w8, [x9, #8]
	bfi	x9, x8, #32, #32
	adrp	x8, env
	str	x9, [x8, :lo12:env]
	b	.LBB292_4
.Lfunc_end292:
	.size	_sort, .Lfunc_end292-_sort
	.cfi_endproc
                                        // -- End function
	.globl	_protect                        // -- Begin function _protect
	.p2align	4
	.type	_protect,@function
_protect:                               // @_protect
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-32]!                // 8-byte Folded Spill
	stp	x20, x19, [sp, #16]             // 16-byte Folded Spill
	.cfi_def_cfa_offset 32
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w30, -32
	ldp	w20, w8, [x0, #8]
	bfi	x20, x8, #32, #32
	adrp	x19, env+136
	ldr	w8, [x19, :lo12:env+136]
	add	w8, w8, #1                      // =1
	str	w8, [x19, :lo12:env+136]
.LBB293_1:                              // %"$2"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w0, w8, [x20]
	bfi	x0, x8, #32, #32
	ldp	w20, w8, [x20, #8]
	bfi	x20, x8, #32, #32
	tst	x20, #0xf
	b.ne	.LBB293_4
// %bb.2:                               // %"$3"
                                        //   in Loop: Header=BB293_1 Depth=1
	tst	x0, #0xf
	b.ne	.LBB293_1
// %bb.3:                               // %"$12"
                                        //   in Loop: Header=BB293_1 Depth=1
	bl	evList
	b	.LBB293_1
.LBB293_4:                              // %"$5"
	tst	x0, #0x6
	b.ne	.LBB293_8
// %bb.5:                               // %"$7"
	tbz	w0, #3, .LBB293_7
// %bb.6:                               // %"$10"
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB293_8
.LBB293_7:                              // %"$9"
	bl	evList
.LBB293_8:                              // %"$4"
	ldr	w8, [x19, :lo12:env+136]
	sub	w8, w8, #1                      // =1
	str	w8, [x19, :lo12:env+136]
	ldp	x20, x19, [sp, #16]             // 16-byte Folded Reload
	ldr	x30, [sp], #32                  // 8-byte Folded Reload
	ret
.Lfunc_end293:
	.size	_protect, .Lfunc_end293-_protect
	.cfi_endproc
                                        // -- End function
	.globl	_heap                           // -- Begin function _heap
	.p2align	4
	.type	_heap,@function
_heap:                                  // @_heap
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w0, w8, [x9]
	bfi	x0, x8, #32, #32
	tst	x0, #0x6
	b.ne	.LBB294_4
// %bb.1:                               // %"$3"
	tbz	w0, #3, .LBB294_3
// %bb.2:                               // %"$6"
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB294_4
.LBB294_3:                              // %"$5"
	bl	evList
.LBB294_4:                              // %"$2"
	adrp	x8, SymTab+8
	add	x8, x8, :lo12:SymTab+8
	cmp	x0, x8
	b.ne	.LBB294_8
// %bb.5:                               // %"$7"
	adrp	x8, ($Heaps)
	ldr	x9, [x8, :lo12:($Heaps)]
	mov	w8, #1
.LBB294_6:                              // %"$10"
                                        // =>This Inner Loop Header: Depth=1
	add	x9, x9, #256, lsl #12           // =1048576
	ldp	w9, w10, [x9]
	bfi	x9, x10, #32, #32
	cbz	x9, .LBB294_12
// %bb.7:                               // %"$11"
                                        //   in Loop: Header=BB294_6 Depth=1
	add	x8, x8, #1                      // =1
	b	.LBB294_6
.LBB294_8:                              // %"$13.preheader"
	mov	x8, xzr
	adrp	x9, ($Avail)
	add	x9, x9, :lo12:($Avail)
.LBB294_9:                              // %"$13"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w9, w10, [x9]
	bfi	x9, x10, #32, #32
	cbz	x9, .LBB294_11
// %bb.10:                              // %"$14"
                                        //   in Loop: Header=BB294_9 Depth=1
	add	x8, x8, #1                      // =1
	b	.LBB294_9
.LBB294_11:                             // %"$15"
	lsr	x8, x8, #16
.LBB294_12:                             // %"$9"
	mov	w0, #2
	bfi	x0, x8, #4, #60
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end294:
	.size	_heap, .Lfunc_end294-_heap
	.cfi_endproc
                                        // -- End function
	.globl	_stack                          // -- Begin function _stack
	.p2align	4
	.type	_stack,@function
_stack:                                 // @_stack
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x30, x19, [sp, #-16]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w19, -8
	.cfi_offset w30, -16
	ldp	w1, w8, [x0, #8]
	bfi	x1, x8, #32, #32
	adrp	x8, env+40
	ldr	x19, [x8, :lo12:env+40]
	tst	x1, #0xf
	b.eq	.LBB295_2
// %bb.1:
	mov	w8, #1
	cbnz	w8, .LBB295_4
	b	.LBB295_10
.LBB295_2:                              // %"$3"
	cbz	x19, .LBB295_9
// %bb.3:                               // %"$5"
	ldr	x8, [x19, #16]
	cmp	x8, #0                          // =0
	cset	w8, ne
	cbz	w8, .LBB295_10
.LBB295_4:                              // %"$6"
	adrp	x8, ($StkSize)
	ldr	x8, [x8, :lo12:($StkSize)]
	lsr	x8, x8, #6
	and	x8, x8, #0x3fffffffffffff0
	orr	x1, x8, #0x2
	b	.LBB295_6
.LBB295_5:                              // %"$13"
                                        //   in Loop: Header=BB295_6 Depth=1
	ldr	x19, [x19, #16]
.LBB295_6:                              // %"$9"
                                        // =>This Inner Loop Header: Depth=1
	cbz	x19, .LBB295_13
// %bb.7:                               // %"$10"
                                        //   in Loop: Header=BB295_6 Depth=1
	ldp	w0, w8, [x19]
	bfi	x0, x8, #32, #32
	cbz	x0, .LBB295_5
// %bb.8:                               // %"$12"
                                        //   in Loop: Header=BB295_6 Depth=1
	bl	cons
	mov	x1, x0
	b	.LBB295_5
.LBB295_9:
	mov	w8, wzr
	cbnz	w8, .LBB295_4
.LBB295_10:                             // %"$7"
	bl	evCnt
	adrp	x10, ($StkSize)
	ldr	x8, [x10, :lo12:($StkSize)]
	lsl	x9, x0, #10
	str	x9, [x10, :lo12:($StkSize)]
	cbz	x19, .LBB295_12
// %bb.11:                              // %"$14"
	ldr	x10, [x19, #40]
	sub	x8, x8, x9
	add	x8, x10, x8
	str	x8, [x19, #40]
.LBB295_12:                             // %"$15"
	mov	w1, #2
	bfi	x1, x0, #4, #60
.LBB295_13:                             // %"$8"
	mov	x0, x1
	ldp	x30, x19, [sp], #16             // 16-byte Folded Reload
	ret
.Lfunc_end295:
	.size	_stack, .Lfunc_end295-_stack
	.cfi_endproc
                                        // -- End function
	.globl	_byte                           // -- Begin function _byte
	.p2align	4
	.type	_byte,@function
_byte:                                  // @_byte
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x30, x21, [sp, #-32]!           // 16-byte Folded Spill
	stp	x20, x19, [sp, #16]             // 16-byte Folded Spill
	.cfi_def_cfa_offset 32
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w30, -32
	mov	x19, x0
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w1, w8, [x9]
	bfi	x1, x8, #32, #32
	ldp	w21, w20, [x9, #8]
	tst	x1, #0x6
	b.ne	.LBB296_4
// %bb.1:                               // %"$3"
	tbz	w1, #3, .LBB296_3
// %bb.2:                               // %"$6"
	ldp	w1, w8, [x1]
	bfi	x1, x8, #32, #32
	b	.LBB296_4
.LBB296_3:                              // %"$5"
	mov	x0, x1
	bl	evList
	mov	x1, x0
.LBB296_4:                              // %"$2"
	tst	x1, #0x6
	b.eq	.LBB296_16
// %bb.5:                               // %"$8"
	bfi	x21, x20, #32, #32
	tbz	w1, #1, .LBB296_10
// %bb.6:                               // %"$9"
	lsr	x20, x1, #4
	tst	x21, #0xf
	b.ne	.LBB296_11
.LBB296_7:                              // %"$13"
	ldp	w1, w8, [x21]
	bfi	x1, x8, #32, #32
	tst	x1, #0x6
	b.ne	.LBB296_13
// %bb.8:                               // %"$16"
	tbz	w1, #3, .LBB296_12
// %bb.9:                               // %"$19"
	ldp	w1, w8, [x1]
	bfi	x1, x8, #32, #32
	b	.LBB296_13
.LBB296_10:                             // %"$10"
	ldp	w20, w8, [x1, #-4]
	bfi	x20, x8, #32, #32
	tst	x21, #0xf
	b.eq	.LBB296_7
.LBB296_11:                             // %"$12"
	ldrb	w8, [x20]
	mov	w1, #2
	bfi	x1, x8, #4, #8
	b	.LBB296_15
.LBB296_12:                             // %"$18"
	mov	x0, x1
	bl	evList
	mov	x1, x0
.LBB296_13:                             // %"$15"
	tbz	w1, #1, .LBB296_17
// %bb.14:                              // %"$21"
	lsr	x8, x1, #4
	neg	w9, w8
	tst	x1, #0x8
	csel	x8, x9, x8, ne
	strb	w8, [x20]
.LBB296_15:                             // %"$14"
	mov	x0, x1
	ldp	x20, x19, [sp, #16]             // 16-byte Folded Reload
	ldp	x30, x21, [sp], #32             // 16-byte Folded Reload
	ret
.LBB296_16:                             // %"$7"
	mov	x0, x19
	bl	numErr
.LBB296_17:                             // %"$20"
	mov	x0, x19
	bl	cntErr
.Lfunc_end296:
	.size	_byte, .Lfunc_end296-_byte
	.cfi_endproc
                                        // -- End function
	.globl	_ptr32                          // -- Begin function _ptr32
	.p2align	4
	.type	_ptr32,@function
_ptr32:                                 // @_ptr32
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x30, x21, [sp, #-32]!           // 16-byte Folded Spill
	stp	x20, x19, [sp, #16]             // 16-byte Folded Spill
	.cfi_def_cfa_offset 32
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w30, -32
	mov	x19, x0
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w1, w8, [x9]
	bfi	x1, x8, #32, #32
	ldp	w21, w20, [x9, #8]
	tst	x1, #0x6
	b.ne	.LBB297_4
// %bb.1:                               // %"$3"
	tbz	w1, #3, .LBB297_3
// %bb.2:                               // %"$6"
	ldp	w1, w8, [x1]
	bfi	x1, x8, #32, #32
	b	.LBB297_4
.LBB297_3:                              // %"$5"
	mov	x0, x1
	bl	evList
	mov	x1, x0
.LBB297_4:                              // %"$2"
	tst	x1, #0x6
	b.eq	.LBB297_16
// %bb.5:                               // %"$8"
	bfi	x21, x20, #32, #32
	tbz	w1, #1, .LBB297_10
// %bb.6:                               // %"$9"
	lsr	x20, x1, #4
	tst	x21, #0xf
	b.ne	.LBB297_11
.LBB297_7:                              // %"$13"
	ldp	w1, w8, [x21]
	bfi	x1, x8, #32, #32
	tst	x1, #0x6
	b.ne	.LBB297_13
// %bb.8:                               // %"$16"
	tbz	w1, #3, .LBB297_12
// %bb.9:                               // %"$19"
	ldp	w1, w8, [x1]
	bfi	x1, x8, #32, #32
	b	.LBB297_13
.LBB297_10:                             // %"$10"
	ldp	w20, w8, [x1, #-4]
	bfi	x20, x8, #32, #32
	tst	x21, #0xf
	b.eq	.LBB297_7
.LBB297_11:                             // %"$12"
	ldr	w8, [x20]
	mov	w1, #2
	bfi	x1, x8, #4, #32
	b	.LBB297_15
.LBB297_12:                             // %"$18"
	mov	x0, x1
	bl	evList
	mov	x1, x0
.LBB297_13:                             // %"$15"
	tbz	w1, #1, .LBB297_17
// %bb.14:                              // %"$21"
	lsr	x8, x1, #4
	neg	w9, w8
	tst	x1, #0x8
	csel	x8, x9, x8, ne
	str	w8, [x20]
.LBB297_15:                             // %"$14"
	mov	x0, x1
	ldp	x20, x19, [sp, #16]             // 16-byte Folded Reload
	ldp	x30, x21, [sp], #32             // 16-byte Folded Reload
	ret
.LBB297_16:                             // %"$7"
	mov	x0, x19
	bl	numErr
.LBB297_17:                             // %"$20"
	mov	x0, x19
	bl	cntErr
.Lfunc_end297:
	.size	_ptr32, .Lfunc_end297-_ptr32
	.cfi_endproc
                                        // -- End function
	.globl	_ptr64                          // -- Begin function _ptr64
	.p2align	4
	.type	_ptr64,@function
_ptr64:                                 // @_ptr64
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x30, x21, [sp, #-32]!           // 16-byte Folded Spill
	stp	x20, x19, [sp, #16]             // 16-byte Folded Spill
	.cfi_def_cfa_offset 32
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w30, -32
	mov	x19, x0
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w1, w8, [x9]
	bfi	x1, x8, #32, #32
	ldp	w21, w20, [x9, #8]
	tst	x1, #0x6
	b.ne	.LBB298_4
// %bb.1:                               // %"$3"
	tbz	w1, #3, .LBB298_3
// %bb.2:                               // %"$6"
	ldp	w1, w8, [x1]
	bfi	x1, x8, #32, #32
	b	.LBB298_4
.LBB298_3:                              // %"$5"
	mov	x0, x1
	bl	evList
	mov	x1, x0
.LBB298_4:                              // %"$2"
	tst	x1, #0x6
	b.eq	.LBB298_18
// %bb.5:                               // %"$8"
	bfi	x21, x20, #32, #32
	tbz	w1, #1, .LBB298_10
// %bb.6:                               // %"$9"
	lsr	x20, x1, #4
	tst	x21, #0xf
	b.ne	.LBB298_11
.LBB298_7:                              // %"$13"
	ldp	w1, w8, [x21]
	bfi	x1, x8, #32, #32
	tst	x1, #0x6
	b.ne	.LBB298_15
// %bb.8:                               // %"$19"
	tbz	w1, #3, .LBB298_14
// %bb.9:                               // %"$22"
	ldp	w1, w8, [x1]
	bfi	x1, x8, #32, #32
	b	.LBB298_15
.LBB298_10:                             // %"$10"
	ldp	w20, w8, [x1, #-4]
	bfi	x20, x8, #32, #32
	tst	x21, #0xf
	b.eq	.LBB298_7
.LBB298_11:                             // %"$12"
	ldp	w0, w8, [x20]
	bfi	x0, x8, #32, #32
	tst	x0, #0xf000000000000000
	b.eq	.LBB298_13
// %bb.12:                              // %"$15"
	bl	boxNum
	mov	x1, x0
	b	.LBB298_17
.LBB298_13:                             // %"$16"
	mov	w1, #2
	bfi	x1, x0, #4, #60
	b	.LBB298_17
.LBB298_14:                             // %"$21"
	mov	x0, x1
	bl	evList
	mov	x1, x0
.LBB298_15:                             // %"$18"
	tbz	w1, #1, .LBB298_19
// %bb.16:                              // %"$24"
	lsr	x8, x1, #4
	tst	x1, #0x8
	cneg	x8, x8, ne
	lsr	x9, x8, #32
	stp	w8, w9, [x20]
.LBB298_17:                             // %"$14"
	mov	x0, x1
	ldp	x20, x19, [sp, #16]             // 16-byte Folded Reload
	ldp	x30, x21, [sp], #32             // 16-byte Folded Reload
	ret
.LBB298_18:                             // %"$7"
	mov	x0, x19
	bl	numErr
.LBB298_19:                             // %"$23"
	mov	x0, x19
	bl	cntErr
.Lfunc_end298:
	.size	_ptr64, .Lfunc_end298-_ptr64
	.cfi_endproc
                                        // -- End function
	.globl	_env                            // -- Begin function _env
	.p2align	4
	.type	_env,@function
_env:                                   // @_env
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-64]!           // 16-byte Folded Spill
	stp	x24, x23, [sp, #16]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #32]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #48]             // 16-byte Folded Spill
	mov	x29, sp
	sub	sp, sp, #16                     // =16
	.cfi_def_cfa w29, 64
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w30, -56
	.cfi_offset w29, -64
	ldp	w22, w8, [x0, #8]
	bfi	x22, x8, #32, #32
	adrp	x21, env
	adrp	x23, SymTab+8
	add	x23, x23, :lo12:SymTab+8
	ldr	x8, [x21, :lo12:env]
	stp	x23, x8, [x29, #-16]
	sub	x8, x29, #16                    // =16
	str	x8, [x21, :lo12:env]
	tst	x22, #0xf
	b.eq	.LBB299_8
// %bb.1:                               // %"$2"
	adrp	x19, SymTab+8
	add	x19, x19, :lo12:SymTab+8
	adrp	x8, env+8
	add	x8, x8, :lo12:env+8
	b	.LBB299_4
.LBB299_2:                              // %"$11"
                                        //   in Loop: Header=BB299_4 Depth=1
	ldp	w1, w8, [x0]
	bfi	x1, x8, #32, #32
	bl	cons
	mov	x1, x19
	bl	cons
	mov	x19, x0
	stur	x0, [x29, #-16]
.LBB299_3:                              // %"$10"
                                        //   in Loop: Header=BB299_4 Depth=1
	add	x8, x20, #16                    // =16
.LBB299_4:                              // %"$5"
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB299_6 Depth 2
	ldp	w20, w9, [x8]
	bfi	x20, x9, #32, #32
	cbz	x20, .LBB299_25
// %bb.5:                               // %"$6"
                                        //   in Loop: Header=BB299_4 Depth=1
	ldp	w0, w8, [x20, #8]
	bfi	x0, x8, #32, #32
	mov	x8, x19
	tst	x8, #0xf
	b.ne	.LBB299_2
.LBB299_6:                              // %"$9"
                                        //   Parent Loop BB299_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	w10, w9, [x8]
	bfi	x10, x9, #32, #32
	ldp	w10, w9, [x10]
	bfi	x10, x9, #32, #32
	cmp	x0, x10
	b.eq	.LBB299_3
// %bb.7:                               // %"$12"
                                        //   in Loop: Header=BB299_6 Depth=2
	ldp	w8, w9, [x8, #8]
	bfi	x8, x9, #32, #32
	tst	x8, #0xf
	b.eq	.LBB299_6
	b	.LBB299_2
.LBB299_8:                              // %"$3"
	mov	x8, sp
	sub	x24, x8, #16                    // =16
	mov	sp, x24
	lsr	x9, x23, #32
	stp	w23, w9, [x8, #-16]
	ldr	x9, [x21, :lo12:env]
	lsr	x10, x9, #32
	stp	w9, w10, [x8, #-8]
	str	x24, [x21, :lo12:env]
	mov	x19, x23
	b	.LBB299_12
.LBB299_9:                              // %"$33"
                                        //   in Loop: Header=BB299_12 Depth=1
	mov	x0, x1
	bl	evList
	mov	x1, x0
.LBB299_10:                             // %"$30"
                                        //   in Loop: Header=BB299_12 Depth=1
	mov	x0, x20
	bl	cons
	mov	x1, x19
	bl	cons
	mov	x19, x0
	stur	x0, [x29, #-16]
.LBB299_11:                             // %"$19"
                                        //   in Loop: Header=BB299_12 Depth=1
	tst	x22, #0xf
	b.ne	.LBB299_25
.LBB299_12:                             // %"$13"
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB299_23 Depth 2
	ldp	w20, w8, [x22]
	bfi	x20, x8, #32, #32
	ldp	w22, w8, [x22, #8]
	bfi	x22, x8, #32, #32
	tst	x20, #0x6
	b.ne	.LBB299_16
// %bb.13:                              // %"$15"
                                        //   in Loop: Header=BB299_12 Depth=1
	tbz	w20, #3, .LBB299_15
// %bb.14:                              // %"$18"
                                        //   in Loop: Header=BB299_12 Depth=1
	ldp	w20, w8, [x20]
	bfi	x20, x8, #32, #32
	b	.LBB299_16
.LBB299_15:                             // %"$17"
                                        //   in Loop: Header=BB299_12 Depth=1
	mov	x0, x20
	bl	evList
	mov	x20, x0
.LBB299_16:                             // %"$14"
                                        //   in Loop: Header=BB299_12 Depth=1
	lsr	x8, x20, #32
	stp	w20, w8, [x24]
	tst	x20, #0xf
	b.eq	.LBB299_23
// %bb.17:                              // %"$20"
                                        //   in Loop: Header=BB299_12 Depth=1
	cmp	x20, x23
	b.eq	.LBB299_11
// %bb.18:                              // %"$29"
                                        //   in Loop: Header=BB299_12 Depth=1
	ldp	w1, w8, [x22]
	bfi	x1, x8, #32, #32
	ldp	w22, w8, [x22, #8]
	bfi	x22, x8, #32, #32
	tst	x1, #0x6
	b.ne	.LBB299_10
// %bb.19:                              // %"$31"
                                        //   in Loop: Header=BB299_12 Depth=1
	tbz	w1, #3, .LBB299_9
// %bb.20:                              // %"$34"
                                        //   in Loop: Header=BB299_12 Depth=1
	ldp	w1, w8, [x1]
	bfi	x1, x8, #32, #32
	b	.LBB299_10
.LBB299_21:                             // %"$24"
                                        //   in Loop: Header=BB299_23 Depth=2
	mov	x8, x0
.LBB299_22:                             // %"$25"
                                        //   in Loop: Header=BB299_23 Depth=2
	ldp	w1, w9, [x8]
	bfi	x1, x9, #32, #32
	bl	cons
	mov	x1, x19
	bl	cons
	mov	x19, x0
	stur	x0, [x29, #-16]
	tst	x20, #0xf
	b.ne	.LBB299_11
.LBB299_23:                             // %"$22"
                                        //   Parent Loop BB299_12 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	w0, w8, [x20]
	bfi	x0, x8, #32, #32
	ldp	w20, w8, [x20, #8]
	bfi	x20, x8, #32, #32
	tst	x0, #0xf
	b.ne	.LBB299_21
// %bb.24:                              // %"$23"
                                        //   in Loop: Header=BB299_23 Depth=2
	add	x8, x0, #8                      // =8
	ldp	w0, w9, [x0]
	bfi	x0, x9, #32, #32
	b	.LBB299_22
.LBB299_25:                             // %"$4"
	ldur	x8, [x29, #-8]
	str	x8, [x21, :lo12:env]
	mov	x0, x19
	mov	sp, x29
	ldp	x20, x19, [sp, #48]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #32]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #64             // 16-byte Folded Reload
	ret
.Lfunc_end299:
	.size	_env, .Lfunc_end299-_env
	.cfi_endproc
                                        // -- End function
	.globl	_usec                           // -- Begin function _usec
	.p2align	4
	.type	_usec,@function
_usec:                                  // @_usec
	.cfi_startproc
// %bb.0:                               // %"$1"
	//APP
	mrs	x8, CNTVCT_EL0
	//NO_APP
	adrp	x9, ($USec)
	ldr	x9, [x9, :lo12:($USec)]
	sub	x8, x8, x9
	mov	w0, #2
	bfi	x0, x8, #4, #60
	ret
.Lfunc_end300:
	.size	_usec, .Lfunc_end300-_usec
	.cfi_endproc
                                        // -- End function
	.globl	_quit                           // -- Begin function _quit
	.p2align	4
	.type	_quit,@function
_quit:                                  // @_quit
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-32]!           // 16-byte Folded Spill
	stp	x20, x19, [sp, #16]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 32
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w30, -24
	.cfi_offset w29, -32
	mov	x19, x0
	ldp	w20, w8, [x0, #8]
	bfi	x20, x8, #32, #32
	mov	x0, x20
	bl	evSym
	mov	x1, x0
	mov	x0, x19
	bl	xName
	mov	x19, x0
	bl	bufSize
	add	x8, x0, #15                     // =15
	and	x8, x8, #0xfffffffffffffff0
	mov	x9, sp
	sub	x1, x9, x8
	mov	sp, x1
	mov	x0, x19
	bl	bufString
	mov	x19, x0
	ldp	w8, w9, [x20, #8]
	bfi	x8, x9, #32, #32
	tst	x8, #0xf
	b.eq	.LBB301_2
// %bb.1:
	mov	x1, xzr
	b	.LBB301_6
.LBB301_2:                              // %"$3"
	ldp	w1, w9, [x8]
	bfi	x1, x9, #32, #32
	tst	x1, #0x6
	b.ne	.LBB301_6
// %bb.3:                               // %"$6"
	tbz	w1, #3, .LBB301_5
// %bb.4:                               // %"$9"
	ldp	w1, w8, [x1]
	bfi	x1, x8, #32, #32
	b	.LBB301_6
.LBB301_5:                              // %"$8"
	mov	x0, x1
	bl	evList
	mov	x1, x0
.LBB301_6:                              // %"$4"
	adrp	x2, .L$86
	add	x2, x2, :lo12:.L$86
	mov	x0, xzr
	mov	x3, x19
	bl	err
.Lfunc_end301:
	.size	_quit, .Lfunc_end301-_quit
	.cfi_endproc
                                        // -- End function
	.globl	_args                           // -- Begin function _args
	.p2align	4
	.type	_args,@function
_args:                                  // @_args
	.cfi_startproc
// %bb.0:                               // %"$1"
	adrp	x8, SymTab+8
	add	x8, x8, :lo12:SymTab+8
	adrp	x9, env+96
	add	x10, x8, #208                   // =208
	ldrb	w9, [x9, :lo12:env+96]
	tst	w9, #0xf
	csel	x0, x10, x8, eq
	ret
.Lfunc_end302:
	.size	_args, .Lfunc_end302-_args
	.cfi_endproc
                                        // -- End function
	.globl	_next                           // -- Begin function _next
	.p2align	4
	.type	_next,@function
_next:                                  // @_next
	.cfi_startproc
// %bb.0:                               // %"$1"
	adrp	x8, env+96
	ldr	x9, [x8, :lo12:env+96]
	ldp	w11, w10, [x9]
	bfi	x11, x10, #32, #32
	str	x11, [x8, :lo12:env+96]
	ldp	w0, w8, [x9, #8]
	bfi	x0, x8, #32, #32
	ret
.Lfunc_end303:
	.size	_next, .Lfunc_end303-_next
	.cfi_endproc
                                        // -- End function
	.globl	_arg                            // -- Begin function _arg
	.p2align	4
	.type	_arg,@function
_arg:                                   // @_arg
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	ldp	w1, w8, [x0, #8]
	bfi	x1, x8, #32, #32
	bl	evCnt
	cmp	x0, #1                          // =1
	b.ge	.LBB304_2
// %bb.1:
	adrp	x0, SymTab+8
	add	x0, x0, :lo12:SymTab+8
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.LBB304_2:                              // %"$5.preheader"
	adrp	x8, env+96
	add	x8, x8, :lo12:env+96
.LBB304_3:                              // %"$5"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w8, w9, [x8]
	bfi	x8, x9, #32, #32
	sub	x0, x0, #1                      // =1
	cmp	x0, #0                          // =0
	b.gt	.LBB304_3
// %bb.4:                               // %"$7"
	ldp	w0, w9, [x8, #8]
	bfi	x0, x9, #32, #32
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end304:
	.size	_arg, .Lfunc_end304-_arg
	.cfi_endproc
                                        // -- End function
	.globl	_rest                           // -- Begin function _rest
	.p2align	4
	.type	_rest,@function
_rest:                                  // @_rest
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-64]!           // 16-byte Folded Spill
	stp	x24, x23, [sp, #16]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #32]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #48]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 64
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w30, -56
	.cfi_offset w29, -64
	adrp	x8, env+96
	ldr	x21, [x8, :lo12:env+96]
	tst	x21, #0xf
	b.eq	.LBB305_2
// %bb.1:
	mov	x19, x21
	b	.LBB305_6
.LBB305_2:                              // %"$3"
	ldp	w0, w8, [x21, #8]
	bfi	x0, x8, #32, #32
	adrp	x20, SymTab+8
	add	x20, x20, :lo12:SymTab+8
	mov	x1, x20
	bl	cons
	mov	x19, x0
	adrp	x22, env
	ldr	x8, [x22, :lo12:env]
	mov	x9, sp
	sub	x23, x9, #16                    // =16
	mov	sp, x23
	lsr	x10, x0, #32
	lsr	x11, x8, #32
	stp	w19, w10, [x9, #-16]
	stp	w8, w11, [x9, #-8]
	mov	x24, x0
	str	x23, [x22, :lo12:env]
.LBB305_3:                              // %"$5"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w21, w8, [x21]
	bfi	x21, x8, #32, #32
	tst	x21, #0xf
	b.ne	.LBB305_5
// %bb.4:                               // %"$6"
                                        //   in Loop: Header=BB305_3 Depth=1
	ldp	w0, w8, [x21, #8]
	bfi	x0, x8, #32, #32
	mov	x1, x20
	bl	cons
	lsr	x8, x0, #32
	stp	w0, w8, [x24, #8]
	mov	x24, x0
	b	.LBB305_3
.LBB305_5:                              // %"$7"
	ldp	w9, w8, [x23, #8]
	bfi	x9, x8, #32, #32
	str	x9, [x22, :lo12:env]
.LBB305_6:                              // %"$4"
	mov	x0, x19
	mov	sp, x29
	ldp	x20, x19, [sp, #48]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #32]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #64             // 16-byte Folded Reload
	ret
.Lfunc_end305:
	.size	_rest, .Lfunc_end305-_rest
	.cfi_endproc
                                        // -- End function
	.globl	_adr                            // -- Begin function _adr
	.p2align	4
	.type	_adr,@function
_adr:                                   // @_adr
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w0, w8, [x9]
	bfi	x0, x8, #32, #32
	tst	x0, #0x6
	b.ne	.LBB306_3
// %bb.1:                               // %"$4"
	tbz	w0, #3, .LBB306_5
// %bb.2:                               // %"$7"
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
.LBB306_3:                              // %"$3"
	tbz	w0, #1, .LBB306_6
.LBB306_4:                              // %"$9"
	lsr	x8, x0, #4
	b	.LBB306_11
.LBB306_5:                              // %"$6"
	bl	evList
	tbnz	w0, #1, .LBB306_4
.LBB306_6:                              // %"$8"
	tbz	w0, #2, .LBB306_8
// %bb.7:                               // %"$11"
	ldp	w8, w9, [x0, #-4]
	bfi	x8, x9, #32, #32
	b	.LBB306_11
.LBB306_8:                              // %"$10"
	tst	x0, #0xf000000000000000
	b.eq	.LBB306_10
// %bb.9:                               // %"$12"
	bl	boxNum
	mov	x8, x0
	b	.LBB306_11
.LBB306_10:                             // %"$13"
	mov	w8, #2
	bfi	x8, x0, #4, #60
.LBB306_11:                             // %"$2"
	mov	x0, x8
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end306:
	.size	_adr, .Lfunc_end306-_adr
	.cfi_endproc
                                        // -- End function
	.globl	_trail                          // -- Begin function _trail
	.p2align	4
	.type	_trail,@function
_trail:                                 // @_trail
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x30, x23, [sp, #-48]!           // 16-byte Folded Spill
	stp	x22, x21, [sp, #16]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #32]             // 16-byte Folded Spill
	.cfi_def_cfa_offset 48
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w30, -48
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w19, w8, [x9]
	bfi	x19, x8, #32, #32
	tst	x19, #0x6
	b.ne	.LBB307_4
// %bb.1:                               // %"$3"
	tbz	w19, #3, .LBB307_3
// %bb.2:                               // %"$6"
	ldp	w19, w8, [x19]
	bfi	x19, x8, #32, #32
	b	.LBB307_4
.LBB307_3:                              // %"$5"
	mov	x0, x19
	bl	evList
	mov	x19, x0
.LBB307_4:                              // %"$2"
	adrp	x21, SymTab+8
	add	x21, x21, :lo12:SymTab+8
	adrp	x8, env+8
	add	x8, x8, :lo12:env+8
	mov	x1, x21
	adrp	x22, SymTab+376
	add	x22, x22, :lo12:SymTab+376
	b	.LBB307_7
.LBB307_5:                              // %"$11"
                                        //   in Loop: Header=BB307_7 Depth=1
	cmp	x19, x21
	b.ne	.LBB307_11
.LBB307_6:                              // %"$10"
                                        //   in Loop: Header=BB307_7 Depth=1
	add	x8, x23, #16                    // =16
.LBB307_7:                              // %"$7"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w23, w9, [x8]
	bfi	x23, x9, #32, #32
	cbz	x23, .LBB307_12
// %bb.8:                               // %"$8"
                                        //   in Loop: Header=BB307_7 Depth=1
	ldp	w20, w8, [x23, #8]
	bfi	x20, x8, #32, #32
	cmp	x20, x22
	b.ne	.LBB307_5
// %bb.9:                               // %"$12"
                                        //   in Loop: Header=BB307_7 Depth=1
	ldp	w0, w8, [x23, #24]
	bfi	x0, x8, #32, #32
	cbz	x0, .LBB307_6
// %bb.10:                              // %"$13"
                                        //   in Loop: Header=BB307_7 Depth=1
	bl	cons
	mov	x1, x0
	add	x8, x23, #16                    // =16
	b	.LBB307_7
.LBB307_11:                             // %"$16"
                                        //   in Loop: Header=BB307_7 Depth=1
	ldp	w0, w8, [x20]
	bfi	x0, x8, #32, #32
	bl	cons
	mov	x1, x0
	mov	x0, x20
	bl	cons
	mov	x1, x0
	ldp	w8, w9, [x23]
	stp	w8, w9, [x20]
	b	.LBB307_6
.LBB307_12:
	mov	x8, x1
.LBB307_13:                             // %"$17"
                                        // =>This Inner Loop Header: Depth=1
	tst	x8, #0xf
	b.ne	.LBB307_16
// %bb.14:                              // %"$18"
                                        //   in Loop: Header=BB307_13 Depth=1
	ldp	w9, w10, [x8]
	bfi	x9, x10, #32, #32
	ldp	w8, w10, [x8, #8]
	bfi	x8, x10, #32, #32
	tst	x9, #0xf
	b.eq	.LBB307_13
// %bb.15:                              // %"$20"
                                        //   in Loop: Header=BB307_13 Depth=1
	ldp	w10, w11, [x8]
	ldp	w8, w12, [x8, #8]
	bfi	x8, x12, #32, #32
	stp	w10, w11, [x9]
	b	.LBB307_13
.LBB307_16:                             // %"$19"
	mov	x0, x1
	ldp	x20, x19, [sp, #32]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #16]             // 16-byte Folded Reload
	ldp	x30, x23, [sp], #48             // 16-byte Folded Reload
	ret
.Lfunc_end307:
	.size	_trail, .Lfunc_end307-_trail
	.cfi_endproc
                                        // -- End function
	.globl	_up                             // -- Begin function _up
	.p2align	4
	.type	_up,@function
_up:                                    // @_up
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x30, x19, [sp, #-16]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w19, -8
	.cfi_offset w30, -16
	ldp	w10, w8, [x0, #8]
	bfi	x10, x8, #32, #32
	ldp	w19, w8, [x10]
	bfi	x19, x8, #32, #32
	adrp	x8, env+8
	ldr	x8, [x8, :lo12:env+8]
	tst	x19, #0x6
	b.eq	.LBB308_2
// %bb.1:                               // %"$2"
	lsr	x9, x19, #4
	ldp	w10, w11, [x10, #8]
	bfi	x10, x11, #32, #32
	ldp	w19, w11, [x10]
	bfi	x19, x11, #32, #32
	b	.LBB308_3
.LBB308_2:
	mov	w9, #1
.LBB308_3:                              // %"$3"
	adrp	x11, SymTab+8
	add	x11, x11, :lo12:SymTab+8
	cmp	x19, x11
	b.ne	.LBB308_9
// %bb.4:                               // %"$4"
	adrp	x0, SymTab+8
	add	x0, x0, :lo12:SymTab+8
	cbz	x9, .LBB308_8
// %bb.5:                               // %"$10.preheader"
	adrp	x10, SymTab+376
	add	x10, x10, :lo12:SymTab+376
	cbz	x8, .LBB308_8
.LBB308_6:                              // %"$11"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w12, w11, [x8, #8]
	bfi	x12, x11, #32, #32
	subs	x11, x9, #1                     // =1
	cset	w13, eq
	cmp	x10, x12
	csel	x9, x9, x11, ne
	csel	w11, wzr, w13, ne
	cbnz	w11, .LBB308_19
// %bb.7:                               // %"$16"
                                        //   in Loop: Header=BB308_6 Depth=1
	ldp	w8, w11, [x8, #16]
	bfi	x8, x11, #32, #32
	cbnz	x8, .LBB308_6
.LBB308_8:                              // %"$6"
	ldp	x30, x19, [sp], #16             // 16-byte Folded Reload
	ret
.LBB308_9:                              // %"$5"
	cbz	x9, .LBB308_14
// %bb.10:                              // %"$23.preheader"
	mov	x11, x19
	cbz	x8, .LBB308_13
.LBB308_11:                             // %"$24"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w13, w12, [x8, #8]
	bfi	x13, x12, #32, #32
	subs	x12, x9, #1                     // =1
	cset	w14, eq
	cmp	x19, x13
	csel	x9, x9, x12, ne
	csel	x11, x11, x8, ne
	csel	w12, wzr, w14, ne
	tbnz	w12, #0, .LBB308_13
// %bb.12:                              // %"$28"
                                        //   in Loop: Header=BB308_11 Depth=1
	ldp	w8, w12, [x8, #16]
	bfi	x8, x12, #32, #32
	cbnz	x8, .LBB308_11
.LBB308_13:
	mov	x19, x11
.LBB308_14:                             // %"$22"
	ldp	w8, w9, [x10, #8]
	bfi	x8, x9, #32, #32
	tst	x8, #0xf
	b.eq	.LBB308_16
// %bb.15:                              // %"$29"
	ldp	w0, w8, [x19]
	bfi	x0, x8, #32, #32
	ldp	x30, x19, [sp], #16             // 16-byte Folded Reload
	ret
.LBB308_16:                             // %"$30"
	ldp	w0, w9, [x8]
	bfi	x0, x9, #32, #32
	tst	x0, #0x6
	b.ne	.LBB308_22
// %bb.17:                              // %"$33"
	tbz	w0, #3, .LBB308_21
// %bb.18:                              // %"$36"
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB308_22
.LBB308_19:                             // %"$17"
	ldp	w0, w9, [x8, #24]
	bfi	x0, x9, #32, #32
	cbnz	x0, .LBB308_8
// %bb.20:                              // %"$19"
	adrp	x0, SymTab+8
	add	x0, x0, :lo12:SymTab+8
	ldp	x30, x19, [sp], #16             // 16-byte Folded Reload
	ret
.LBB308_21:                             // %"$35"
	bl	evList
.LBB308_22:                             // %"$32"
	lsr	x8, x0, #32
	stp	w0, w8, [x19]
	ldp	x30, x19, [sp], #16             // 16-byte Folded Reload
	ret
.Lfunc_end308:
	.size	_up, .Lfunc_end308-_up
	.cfi_endproc
                                        // -- End function
	.globl	_kern                           // -- Begin function _kern
	.p2align	4
	.type	_kern,@function
_kern:                                  // @_kern
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	bl	loadKern
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end309:
	.size	_kern, .Lfunc_end309-_kern
	.cfi_endproc
                                        // -- End function
	.globl	_isb                            // -- Begin function _isb
	.p2align	4
	.type	_isb,@function
_isb:                                   // @_isb
	.cfi_startproc
// %bb.0:                               // %"$1"
	//APP
	isb
	//NO_APP
	adrp	x0, SymTab+8
	add	x0, x0, :lo12:SymTab+8
	ret
.Lfunc_end310:
	.size	_isb, .Lfunc_end310-_isb
	.cfi_endproc
                                        // -- End function
	.globl	_wfi                            // -- Begin function _wfi
	.p2align	4
	.type	_wfi,@function
_wfi:                                   // @_wfi
	.cfi_startproc
// %bb.0:                               // %"$1"
	//APP
	wfi
	//NO_APP
	adrp	x0, SymTab+8
	add	x0, x0, :lo12:SymTab+8
	ret
.Lfunc_end311:
	.size	_wfi, .Lfunc_end311-_wfi
	.cfi_endproc
                                        // -- End function
	.globl	_wfe                            // -- Begin function _wfe
	.p2align	4
	.type	_wfe,@function
_wfe:                                   // @_wfe
	.cfi_startproc
// %bb.0:                               // %"$1"
	//APP
	wfe
	//NO_APP
	adrp	x0, SymTab+8
	add	x0, x0, :lo12:SymTab+8
	ret
.Lfunc_end312:
	.size	_wfe, .Lfunc_end312-_wfe
	.cfi_endproc
                                        // -- End function
	.globl	_daif                           // -- Begin function _daif
	.p2align	4
	.type	_daif,@function
_daif:                                  // @_daif
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w0, w8, [x9]
	bfi	x0, x8, #32, #32
	tst	x0, #0x6
	b.ne	.LBB313_3
// %bb.1:                               // %"$4"
	tbz	w0, #3, .LBB313_5
// %bb.2:                               // %"$7"
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
.LBB313_3:                              // %"$3"
	tbz	w0, #1, .LBB313_6
.LBB313_4:                              // %"$9"
	lsr	x8, x0, #4
	//APP
	msr	DAIF, x8
	//NO_APP
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.LBB313_5:                              // %"$6"
	bl	evList
	tbnz	w0, #1, .LBB313_4
.LBB313_6:                              // %"$8"
	tbz	w0, #2, .LBB313_8
// %bb.7:                               // %"$11"
	ldp	w9, w8, [x0, #-4]
	bfi	x9, x8, #32, #32
	//APP
	msr	DAIF, x9
	//NO_APP
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.LBB313_8:                              // %"$10"
	//APP
	mrs	x8, CNTV_CVAL_EL0
	//NO_APP
	tst	x8, #0xf000000000000000
	b.eq	.LBB313_10
// %bb.9:                               // %"$12"
	mov	x0, x8
	bl	boxNum
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.LBB313_10:                             // %"$13"
	mov	w0, #2
	bfi	x0, x8, #4, #60
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end313:
	.size	_daif, .Lfunc_end313-_daif
	.cfi_endproc
                                        // -- End function
	.globl	_daif2                          // -- Begin function _daif2
	.p2align	4
	.type	_daif2,@function
_daif2:                                 // @_daif2
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w0, w8, [x9]
	bfi	x0, x8, #32, #32
	tst	x0, #0x6
	b.ne	.LBB314_4
// %bb.1:                               // %"$3"
	tbz	w0, #3, .LBB314_3
// %bb.2:                               // %"$6"
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB314_4
.LBB314_3:                              // %"$5"
	bl	evList
.LBB314_4:                              // %"$2"
	adrp	x8, SymTab+8
	add	x8, x8, :lo12:SymTab+8
	cmp	x0, x8
	b.ne	.LBB314_6
// %bb.5:                               // %"$7"
	//APP
	msr	DAIFSet, #2
	//NO_APP
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.LBB314_6:                              // %"$8"
	//APP
	msr	DAIFClr, #2
	//NO_APP
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end314:
	.size	_daif2, .Lfunc_end314-_daif2
	.cfi_endproc
                                        // -- End function
	.globl	"_cnt-frq"                      // -- Begin function _cnt-frq
	.p2align	4
	.type	"_cnt-frq",@function
"_cnt-frq":                             // @_cnt-frq
	.cfi_startproc
// %bb.0:                               // %"$1"
	//APP
	mrs	x8, CNTFRQ_EL0
	//NO_APP
	mov	w0, #2
	bfi	x0, x8, #4, #60
	ret
.Lfunc_end315:
	.size	"_cnt-frq", .Lfunc_end315-"_cnt-frq"
	.cfi_endproc
                                        // -- End function
	.globl	"_cntv-ctl"                     // -- Begin function _cntv-ctl
	.p2align	4
	.type	"_cntv-ctl",@function
"_cntv-ctl":                            // @_cntv-ctl
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w0, w8, [x9]
	bfi	x0, x8, #32, #32
	tst	x0, #0x6
	b.ne	.LBB316_3
// %bb.1:                               // %"$4"
	tbz	w0, #3, .LBB316_5
// %bb.2:                               // %"$7"
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
.LBB316_3:                              // %"$3"
	tbz	w0, #1, .LBB316_6
.LBB316_4:                              // %"$9"
	lsr	x8, x0, #4
	//APP
	msr	CNTV_CTL_EL0, x8
	//NO_APP
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.LBB316_5:                              // %"$6"
	bl	evList
	tbnz	w0, #1, .LBB316_4
.LBB316_6:                              // %"$8"
	tbz	w0, #2, .LBB316_8
// %bb.7:                               // %"$11"
	ldp	w9, w8, [x0, #-4]
	bfi	x9, x8, #32, #32
	//APP
	msr	CNTV_CTL_EL0, x9
	//NO_APP
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.LBB316_8:                              // %"$10"
	//APP
	mrs	x8, CNTV_CTL_EL0
	//NO_APP
	tst	x8, #0xf000000000000000
	b.eq	.LBB316_10
// %bb.9:                               // %"$12"
	mov	x0, x8
	bl	boxNum
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.LBB316_10:                             // %"$13"
	mov	w0, #2
	bfi	x0, x8, #4, #60
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end316:
	.size	"_cntv-ctl", .Lfunc_end316-"_cntv-ctl"
	.cfi_endproc
                                        // -- End function
	.globl	"_cntv-cval"                    // -- Begin function _cntv-cval
	.p2align	4
	.type	"_cntv-cval",@function
"_cntv-cval":                           // @_cntv-cval
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w0, w8, [x9]
	bfi	x0, x8, #32, #32
	tst	x0, #0x6
	b.ne	.LBB317_3
// %bb.1:                               // %"$4"
	tbz	w0, #3, .LBB317_5
// %bb.2:                               // %"$7"
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
.LBB317_3:                              // %"$3"
	tbz	w0, #1, .LBB317_6
.LBB317_4:                              // %"$9"
	lsr	x8, x0, #4
	//APP
	msr	CNTV_CVAL_EL0, x8
	//NO_APP
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.LBB317_5:                              // %"$6"
	bl	evList
	tbnz	w0, #1, .LBB317_4
.LBB317_6:                              // %"$8"
	tbz	w0, #2, .LBB317_8
// %bb.7:                               // %"$11"
	ldp	w9, w8, [x0, #-4]
	bfi	x9, x8, #32, #32
	//APP
	msr	CNTV_CVAL_EL0, x9
	//NO_APP
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.LBB317_8:                              // %"$10"
	//APP
	mrs	x8, CNTV_CVAL_EL0
	//NO_APP
	tst	x8, #0xf000000000000000
	b.eq	.LBB317_10
// %bb.9:                               // %"$12"
	mov	x0, x8
	bl	boxNum
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.LBB317_10:                             // %"$13"
	mov	w0, #2
	bfi	x0, x8, #4, #60
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end317:
	.size	"_cntv-cval", .Lfunc_end317-"_cntv-cval"
	.cfi_endproc
                                        // -- End function
	.globl	"_cntv-tval"                    // -- Begin function _cntv-tval
	.p2align	4
	.type	"_cntv-tval",@function
"_cntv-tval":                           // @_cntv-tval
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w0, w8, [x9]
	bfi	x0, x8, #32, #32
	tst	x0, #0x6
	b.ne	.LBB318_3
// %bb.1:                               // %"$4"
	tbz	w0, #3, .LBB318_5
// %bb.2:                               // %"$7"
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
.LBB318_3:                              // %"$3"
	tbz	w0, #1, .LBB318_6
.LBB318_4:                              // %"$9"
	lsr	x8, x0, #4
	//APP
	msr	CNTV_TVAL_EL0, x8
	//NO_APP
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.LBB318_5:                              // %"$6"
	bl	evList
	tbnz	w0, #1, .LBB318_4
.LBB318_6:                              // %"$8"
	tbz	w0, #2, .LBB318_8
// %bb.7:                               // %"$11"
	ldp	w9, w8, [x0, #-4]
	bfi	x9, x8, #32, #32
	//APP
	msr	CNTV_TVAL_EL0, x9
	//NO_APP
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.LBB318_8:                              // %"$10"
	//APP
	mrs	x8, CNTV_TVAL_EL0
	//NO_APP
	tst	x8, #0xf000000000000000
	b.eq	.LBB318_10
// %bb.9:                               // %"$12"
	mov	x0, x8
	bl	boxNum
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.LBB318_10:                             // %"$13"
	mov	w0, #2
	bfi	x0, x8, #4, #60
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end318:
	.size	"_cntv-tval", .Lfunc_end318-"_cntv-tval"
	.cfi_endproc
                                        // -- End function
	.globl	_cntvct                         // -- Begin function _cntvct
	.p2align	4
	.type	_cntvct,@function
_cntvct:                                // @_cntvct
	.cfi_startproc
// %bb.0:                               // %"$1"
	//APP
	mrs	x8, CNTVCT_EL0
	//NO_APP
	tst	x8, #0xf000000000000000
	b.eq	.LBB319_2
// %bb.1:                               // %"$2"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	mov	x0, x8
	bl	boxNum
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.LBB319_2:                              // %"$3"
	mov	w0, #2
	bfi	x0, x8, #4, #60
	ret
.Lfunc_end319:
	.size	_cntvct, .Lfunc_end319-_cntvct
	.cfi_endproc
                                        // -- End function
	.globl	"_cntp-ctl"                     // -- Begin function _cntp-ctl
	.p2align	4
	.type	"_cntp-ctl",@function
"_cntp-ctl":                            // @_cntp-ctl
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w0, w8, [x9]
	bfi	x0, x8, #32, #32
	tst	x0, #0x6
	b.ne	.LBB320_3
// %bb.1:                               // %"$4"
	tbz	w0, #3, .LBB320_5
// %bb.2:                               // %"$7"
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
.LBB320_3:                              // %"$3"
	tbz	w0, #1, .LBB320_6
.LBB320_4:                              // %"$9"
	lsr	x8, x0, #4
	//APP
	msr	CNTP_CTL_EL0, x8
	//NO_APP
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.LBB320_5:                              // %"$6"
	bl	evList
	tbnz	w0, #1, .LBB320_4
.LBB320_6:                              // %"$8"
	tbz	w0, #2, .LBB320_8
// %bb.7:                               // %"$11"
	ldp	w9, w8, [x0, #-4]
	bfi	x9, x8, #32, #32
	//APP
	msr	CNTP_CTL_EL0, x9
	//NO_APP
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.LBB320_8:                              // %"$10"
	//APP
	mrs	x8, CNTP_CTL_EL0
	//NO_APP
	tst	x8, #0xf000000000000000
	b.eq	.LBB320_10
// %bb.9:                               // %"$12"
	mov	x0, x8
	bl	boxNum
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.LBB320_10:                             // %"$13"
	mov	w0, #2
	bfi	x0, x8, #4, #60
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end320:
	.size	"_cntp-ctl", .Lfunc_end320-"_cntp-ctl"
	.cfi_endproc
                                        // -- End function
	.globl	"_cntp-cval"                    // -- Begin function _cntp-cval
	.p2align	4
	.type	"_cntp-cval",@function
"_cntp-cval":                           // @_cntp-cval
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w0, w8, [x9]
	bfi	x0, x8, #32, #32
	tst	x0, #0x6
	b.ne	.LBB321_3
// %bb.1:                               // %"$4"
	tbz	w0, #3, .LBB321_5
// %bb.2:                               // %"$7"
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
.LBB321_3:                              // %"$3"
	tbz	w0, #1, .LBB321_6
.LBB321_4:                              // %"$9"
	lsr	x8, x0, #4
	//APP
	msr	CNTP_CVAL_EL0, x8
	//NO_APP
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.LBB321_5:                              // %"$6"
	bl	evList
	tbnz	w0, #1, .LBB321_4
.LBB321_6:                              // %"$8"
	tbz	w0, #2, .LBB321_8
// %bb.7:                               // %"$11"
	ldp	w9, w8, [x0, #-4]
	bfi	x9, x8, #32, #32
	//APP
	msr	CNTP_CVAL_EL0, x9
	//NO_APP
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.LBB321_8:                              // %"$10"
	//APP
	mrs	x8, CNTP_CVAL_EL0
	//NO_APP
	tst	x8, #0xf000000000000000
	b.eq	.LBB321_10
// %bb.9:                               // %"$12"
	mov	x0, x8
	bl	boxNum
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.LBB321_10:                             // %"$13"
	mov	w0, #2
	bfi	x0, x8, #4, #60
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end321:
	.size	"_cntp-cval", .Lfunc_end321-"_cntp-cval"
	.cfi_endproc
                                        // -- End function
	.globl	"_cntp-tval"                    // -- Begin function _cntp-tval
	.p2align	4
	.type	"_cntp-tval",@function
"_cntp-tval":                           // @_cntp-tval
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w0, w8, [x9]
	bfi	x0, x8, #32, #32
	tst	x0, #0x6
	b.ne	.LBB322_3
// %bb.1:                               // %"$4"
	tbz	w0, #3, .LBB322_5
// %bb.2:                               // %"$7"
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
.LBB322_3:                              // %"$3"
	tbz	w0, #1, .LBB322_6
.LBB322_4:                              // %"$9"
	lsr	x8, x0, #4
	//APP
	msr	CNTP_TVAL_EL0, x8
	//NO_APP
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.LBB322_5:                              // %"$6"
	bl	evList
	tbnz	w0, #1, .LBB322_4
.LBB322_6:                              // %"$8"
	tbz	w0, #2, .LBB322_8
// %bb.7:                               // %"$11"
	ldp	w9, w8, [x0, #-4]
	bfi	x9, x8, #32, #32
	//APP
	msr	CNTP_TVAL_EL0, x9
	//NO_APP
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.LBB322_8:                              // %"$10"
	//APP
	mrs	x8, CNTP_TVAL_EL0
	//NO_APP
	tst	x8, #0xf000000000000000
	b.eq	.LBB322_10
// %bb.9:                               // %"$12"
	mov	x0, x8
	bl	boxNum
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.LBB322_10:                             // %"$13"
	mov	w0, #2
	bfi	x0, x8, #4, #60
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end322:
	.size	"_cntp-tval", .Lfunc_end322-"_cntp-tval"
	.cfi_endproc
                                        // -- End function
	.globl	_cntpct                         // -- Begin function _cntpct
	.p2align	4
	.type	_cntpct,@function
_cntpct:                                // @_cntpct
	.cfi_startproc
// %bb.0:                               // %"$1"
	//APP
	mrs	x8, CNTPCT_EL0
	//NO_APP
	tst	x8, #0xf000000000000000
	b.eq	.LBB323_2
// %bb.1:                               // %"$2"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	mov	x0, x8
	bl	boxNum
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.LBB323_2:                              // %"$3"
	mov	w0, #2
	bfi	x0, x8, #4, #60
	ret
.Lfunc_end323:
	.size	_cntpct, .Lfunc_end323-_cntpct
	.cfi_endproc
                                        // -- End function
	.globl	_version                        // -- Begin function _version
	.p2align	4
	.type	_version,@function
_version:                               // @_version
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x30, x21, [sp, #-32]!           // 16-byte Folded Spill
	stp	x20, x19, [sp, #16]             // 16-byte Folded Spill
	.cfi_def_cfa_offset 32
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w30, -32
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w0, w8, [x9]
	bfi	x0, x8, #32, #32
	tst	x0, #0x6
	b.ne	.LBB324_4
// %bb.1:                               // %"$3"
	tbz	w0, #3, .LBB324_3
// %bb.2:                               // %"$6"
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB324_4
.LBB324_3:                              // %"$5"
	bl	evList
.LBB324_4:                              // %"$2"
	adrp	x8, SymTab+8
	add	x8, x8, :lo12:SymTab+8
	cmp	x0, x8
	adrp	x21, ($Version)
	add	x21, x21, :lo12:($Version)
	b.ne	.LBB324_6
// %bb.5:                               // %"$7"
	ldr	x8, [x21]
	lsr	x0, x8, #4
	bl	outWord
	adrp	x19, ($Put)
	ldr	x8, [x19, :lo12:($Put)]
	mov	w0, #46
	blr	x8
	ldr	x8, [x21, #8]
	lsr	x0, x8, #4
	bl	outWord
	ldr	x8, [x19, :lo12:($Put)]
	mov	w0, #46
	blr	x8
	ldr	x8, [x21, #16]
	lsr	x0, x8, #4
	bl	outWord
	bl	newline
.LBB324_6:                              // %"$8"
	ldp	x19, x20, [x21]
	ldr	x0, [x21, #16]
	adrp	x1, SymTab+8
	add	x1, x1, :lo12:SymTab+8
	bl	cons
	mov	x1, x0
	mov	x0, x20
	bl	cons
	mov	x1, x0
	mov	x0, x19
	bl	cons
	ldp	x20, x19, [sp, #16]             // 16-byte Folded Reload
	ldp	x30, x21, [sp], #32             // 16-byte Folded Reload
	ret
.Lfunc_end324:
	.size	_version, .Lfunc_end324-_version
	.cfi_endproc
                                        // -- End function
	.globl	evList                          // -- Begin function evList
	.p2align	4
	.type	evList,@function
evList:                                 // @evList
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-64]!           // 16-byte Folded Spill
	stp	x24, x23, [sp, #16]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #32]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #48]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 64
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w30, -56
	.cfi_offset w29, -64
	mov	x19, x0
	ldp	w20, w8, [x0]
	bfi	x20, x8, #32, #32
	tst	x20, #0x6
	b.ne	.LBB325_21
// %bb.1:                               // %"$3"
	tbz	w20, #3, .LBB325_8
// %bb.2:                               // %"$7.preheader"
	adrp	x22, ($Signal)
.LBB325_3:                              // %"$7"
                                        // =>This Inner Loop Header: Depth=1
	mov	x21, x20
	ldr	w8, [x22, :lo12:($Signal)]
	cbz	w8, .LBB325_5
// %bb.4:                               // %"$8"
                                        //   in Loop: Header=BB325_3 Depth=1
	mov	x0, x19
	bl	sighandler
.LBB325_5:                              // %"$9"
                                        //   in Loop: Header=BB325_3 Depth=1
	ldp	w20, w8, [x21]
	bfi	x20, x8, #32, #32
	tst	x20, #0x6
	b.ne	.LBB325_16
// %bb.6:                               // %"$10"
                                        //   in Loop: Header=BB325_3 Depth=1
	tst	x20, #0xf
	b.eq	.LBB325_18
// %bb.7:                               // %"$13"
                                        //   in Loop: Header=BB325_3 Depth=1
	ldp	w9, w8, [x20]
	bfi	x9, x8, #32, #32
	cmp	x20, x9
	b.ne	.LBB325_3
	b	.LBB325_15
.LBB325_8:                              // %"$5"
	mov	x8, sp
	adrp	x9, ($StkLimit)
	ldr	x9, [x9, :lo12:($StkLimit)]
	cmp	x9, x8
	b.hi	.LBB325_22
// %bb.9:                               // %"$18"
	mov	x0, x20
	bl	evList
	adrp	x22, env
	ldr	x8, [x22, :lo12:env]
	mov	x9, sp
	sub	x23, x9, #16                    // =16
	mov	sp, x23
	lsr	x10, x0, #32
	lsr	x11, x8, #32
	stp	w0, w10, [x9, #-16]
	stp	w8, w11, [x9, #-8]
	adrp	x24, ($Signal)
	str	x23, [x22, :lo12:env]
.LBB325_10:                             // %"$19"
                                        // =>This Inner Loop Header: Depth=1
	mov	x21, x0
	ldr	w8, [x24, :lo12:($Signal)]
	cbz	w8, .LBB325_12
// %bb.11:                              // %"$20"
                                        //   in Loop: Header=BB325_10 Depth=1
	mov	x0, x19
	bl	sighandler
.LBB325_12:                             // %"$21"
                                        //   in Loop: Header=BB325_10 Depth=1
	tst	x21, #0x6
	b.ne	.LBB325_17
// %bb.13:                              // %"$22"
                                        //   in Loop: Header=BB325_10 Depth=1
	tst	x21, #0xf
	b.eq	.LBB325_19
// %bb.14:                              // %"$25"
                                        //   in Loop: Header=BB325_10 Depth=1
	ldp	w0, w8, [x21]
	bfi	x0, x8, #32, #32
	ldp	w9, w8, [x0]
	bfi	x9, x8, #32, #32
	cmp	x0, x9
	mov	x20, x21
	b.ne	.LBB325_10
.LBB325_15:                             // %"$16"
	mov	x0, x21
	mov	x1, x19
	bl	undefined
.LBB325_16:                             // %"$12"
	and	x8, x20, #0xfffffffffffffffd
	mov	x0, x19
	mov	x1, x21
	blr	x8
	mov	x19, x0
	b	.LBB325_21
.LBB325_17:                             // %"$24"
	and	x8, x21, #0xfffffffffffffffd
	mov	x0, x19
	mov	x1, x20
	blr	x8
	b	.LBB325_20
.LBB325_18:                             // %"$14"
	mov	x0, x20
	mov	x1, x19
	bl	evExpr
	mov	x19, x0
	b	.LBB325_21
.LBB325_19:                             // %"$26"
	mov	x0, x21
	mov	x1, x19
	bl	evExpr
.LBB325_20:                             // %"$23"
	mov	x19, x0
	ldp	w9, w8, [x23, #8]
	bfi	x9, x8, #32, #32
	str	x9, [x22, :lo12:env]
.LBB325_21:                             // %"$2"
	mov	x0, x19
	mov	sp, x29
	ldp	x20, x19, [sp, #48]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #32]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #64             // 16-byte Folded Reload
	ret
.LBB325_22:                             // %"$17"
	mov	x0, x19
	bl	stkErr
.Lfunc_end325:
	.size	evList, .Lfunc_end325-evList
	.cfi_endproc
                                        // -- End function
	.globl	outWord                         // -- Begin function outWord
	.p2align	4
	.type	outWord,@function
outWord:                                // @outWord
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-32]!                // 8-byte Folded Spill
	stp	x20, x19, [sp, #16]             // 16-byte Folded Spill
	.cfi_def_cfa_offset 32
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w30, -32
	mov	x19, x0
	cmp	x0, #10                         // =10
	b.lo	.LBB326_2
// %bb.1:                               // %"$2"
	mov	x8, #-3689348814741910324
	movk	x8, #52429
	umulh	x8, x19, x8
	lsr	x20, x8, #3
	mov	x0, x20
	bl	outWord
	mov	w8, #10
	msub	x19, x20, x8, x19
.LBB326_2:                              // %"$3"
	add	w0, w19, #48                    // =48
	adrp	x8, ($Put)
	ldr	x8, [x8, :lo12:($Put)]
	blr	x8
	ldp	x20, x19, [sp, #16]             // 16-byte Folded Reload
	ldr	x30, [sp], #32                  // 8-byte Folded Reload
	ret
.Lfunc_end326:
	.size	outWord, .Lfunc_end326-outWord
	.cfi_endproc
                                        // -- End function
	.globl	newline                         // -- Begin function newline
	.p2align	4
	.type	newline,@function
newline:                                // @newline
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	adrp	x8, ($Put)
	ldr	x8, [x8, :lo12:($Put)]
	mov	w0, #10
	blr	x8
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end327:
	.size	newline, .Lfunc_end327-newline
	.cfi_endproc
                                        // -- End function
	.globl	cons                            // -- Begin function cons
	.p2align	4
	.type	cons,@function
cons:                                   // @cons
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-80]!           // 16-byte Folded Spill
	str	x25, [sp, #16]                  // 8-byte Folded Spill
	stp	x24, x23, [sp, #32]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #48]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #64]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 80
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -64
	.cfi_offset w30, -72
	.cfi_offset w29, -80
	mov	x19, x1
	mov	x20, x0
	adrp	x22, ($Avail)
	ldr	x0, [x22, :lo12:($Avail)]
	lsr	x23, x20, #32
	lsr	x21, x1, #32
	cbnz	x0, .LBB328_2
// %bb.1:                               // %"$2"
	adrp	x24, env
	ldr	x8, [x24, :lo12:env]
	mov	x9, sp
	sub	x10, x9, #16                    // =16
	mov	sp, x10
	stp	w20, w23, [x9, #-16]
	mov	x25, x10
	str	w8, [x25, #8]!
	lsr	x8, x8, #32
	str	w8, [x25, #4]
	mov	x8, sp
	sub	x9, x8, #16                     // =16
	mov	sp, x9
	stp	w19, w21, [x8, #-16]
	lsr	x11, x10, #32
	stp	w10, w11, [x8, #-8]
	str	x9, [x24, :lo12:env]
	bl	gc
	ldp	w9, w8, [x25]
	bfi	x9, x8, #32, #32
	str	x9, [x24, :lo12:env]
	ldr	x0, [x22, :lo12:($Avail)]
.LBB328_2:                              // %"$3"
	ldp	w9, w8, [x0]
	bfi	x9, x8, #32, #32
	str	x9, [x22, :lo12:($Avail)]
	stp	w20, w23, [x0]
	stp	w19, w21, [x0, #8]
	mov	sp, x29
	ldp	x20, x19, [sp, #64]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #48]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #32]             // 16-byte Folded Reload
	ldr	x25, [sp, #16]                  // 8-byte Folded Reload
	ldp	x29, x30, [sp], #80             // 16-byte Folded Reload
	ret
.Lfunc_end328:
	.size	cons, .Lfunc_end328-cons
	.cfi_endproc
                                        // -- End function
	.globl	gc                              // -- Begin function gc
	.p2align	4
	.type	gc,@function
gc:                                     // @gc
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x30, x25, [sp, #-64]!           // 16-byte Folded Spill
	stp	x24, x23, [sp, #16]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #32]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #48]             // 16-byte Folded Spill
	.cfi_def_cfa_offset 64
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w30, -64
	adrp	x20, SymTab+8
	add	x20, x20, :lo12:SymTab+8
	mov	w8, #10
	str	x8, [x20, #160]
	ldr	x8, [x20]
	orr	x8, x8, #0x1
	str	x8, [x20]
	add	x8, x20, #32                    // =32
	adrp	x9, SymTab+6088
	add	x9, x9, :lo12:SymTab+6088
.LBB329_1:                              // %"$2"
                                        // =>This Inner Loop Header: Depth=1
	ldr	w10, [x8]
	orr	w10, w10, #0x1
	str	w10, [x8]
	cmp	x9, x8
	b.eq	.LBB329_3
// %bb.2:                               // %"$3"
                                        //   in Loop: Header=BB329_1 Depth=1
	add	x8, x8, #16                     // =16
	b	.LBB329_1
.LBB329_3:                              // %"$4"
	adrp	x19, ($Heaps)
	ldr	x8, [x19, :lo12:($Heaps)]
	mov	w9, #65536
.LBB329_4:                              // %"$6"
                                        // =>This Inner Loop Header: Depth=1
	ldr	w10, [x8, #8]!
	orr	w10, w10, #0x1
	str	w10, [x8], #8
	subs	x9, x9, #1                      // =1
	b.ne	.LBB329_4
// %bb.5:                               // %"$8"
                                        //   in Loop: Header=BB329_4 Depth=1
	ldp	w8, w9, [x8]
	bfi	x8, x9, #32, #32
	mov	w9, #65536
	cbnz	x8, .LBB329_4
// %bb.6:                               // %"$10"
	adrp	x21, gcData
	add	x21, x21, :lo12:gcData
	adrp	x22, gcData+408
	add	x22, x22, :lo12:gcData+408
.LBB329_7:                              // %"$11"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w0, w8, [x21]
	bfi	x0, x8, #32, #32
	bl	mark
	cmp	x22, x21
	b.eq	.LBB329_9
// %bb.8:                               // %"$12"
                                        //   in Loop: Header=BB329_7 Depth=1
	add	x21, x21, #8                    // =8
	b	.LBB329_7
.LBB329_9:                              // %"$13"
	adrp	x21, env
	add	x21, x21, :lo12:env
	ldr	x0, [x21, #88]
	bl	mark
.LBB329_10:                             // %"$14"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w21, w8, [x21]
	bfi	x21, x8, #32, #32
	cbz	x21, .LBB329_12
// %bb.11:                              // %"$15"
                                        //   in Loop: Header=BB329_10 Depth=1
	ldp	w0, w8, [x21], #8
	bfi	x0, x8, #32, #32
	bl	mark
	b	.LBB329_10
.LBB329_12:                             // %"$16"
	adrp	x8, env+8
	add	x8, x8, :lo12:env+8
.LBB329_13:                             // %"$17"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w21, w9, [x8]
	bfi	x21, x9, #32, #32
	cbz	x21, .LBB329_15
// %bb.14:                              // %"$18"
                                        //   in Loop: Header=BB329_13 Depth=1
	ldp	w0, w8, [x21]
	bfi	x0, x8, #32, #32
	bl	mark
	ldp	w0, w8, [x21, #8]
	bfi	x0, x8, #32, #32
	bl	mark
	add	x8, x21, #16                    // =16
	b	.LBB329_13
.LBB329_15:                             // %"$20.preheader"
	adrp	x21, env+24
	add	x21, x21, :lo12:env+24
	b	.LBB329_17
.LBB329_16:                             // %"$24"
                                        //   in Loop: Header=BB329_17 Depth=1
	ldp	w0, w8, [x21, #16]
	bfi	x0, x8, #32, #32
	bl	mark
	ldp	w0, w8, [x21, #112]
	bfi	x0, x8, #32, #32
	bl	mark
.LBB329_17:                             // %"$20"
                                        // =>This Inner Loop Header: Depth=1
	ldr	x21, [x21]
	cbz	x21, .LBB329_20
// %bb.18:                              // %"$21"
                                        //   in Loop: Header=BB329_17 Depth=1
	ldp	w9, w8, [x21, #8]
	bfi	x9, x8, #32, #32
	cbz	x9, .LBB329_16
// %bb.19:                              // %"$23"
                                        //   in Loop: Header=BB329_17 Depth=1
	ldp	w0, w8, [x21, #8]
	bfi	x0, x8, #32, #32
	bl	mark
	b	.LBB329_16
.LBB329_20:                             // %"$25.preheader"
	adrp	x8, env+40
	add	x8, x8, :lo12:env+40
	b	.LBB329_22
.LBB329_21:                             // %"$31"
                                        //   in Loop: Header=BB329_22 Depth=1
	add	x8, x21, #16                    // =16
.LBB329_22:                             // %"$25"
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB329_27 Depth 2
                                        //     Child Loop BB329_30 Depth 2
                                        //     Child Loop BB329_34 Depth 2
	ldr	x21, [x8]
	cbz	x21, .LBB329_37
// %bb.23:                              // %"$26"
                                        //   in Loop: Header=BB329_22 Depth=1
	ldp	w9, w8, [x21]
	bfi	x9, x8, #32, #32
	cbz	x9, .LBB329_25
// %bb.24:                              // %"$29"
                                        //   in Loop: Header=BB329_22 Depth=1
	ldp	w9, w8, [x21, #48]
	bfi	x9, x8, #32, #32
	cmp	x9, #0                          // =0
	cset	w8, ne
	cbz	w8, .LBB329_21
	b	.LBB329_26
.LBB329_25:                             //   in Loop: Header=BB329_22 Depth=1
	mov	w8, wzr
	cbz	w8, .LBB329_21
.LBB329_26:                             // %"$30"
                                        //   in Loop: Header=BB329_22 Depth=1
	ldp	w0, w8, [x21]
	bfi	x0, x8, #32, #32
	bl	mark
	ldp	w0, w8, [x21, #32]
	bfi	x0, x8, #32, #32
	bl	mark
	ldp	w0, w8, [x21, #48]
	bfi	x0, x8, #32, #32
	bl	mark
	add	x22, x21, #112                  // =112
	ldp	w0, w8, [x21, #200]
	bfi	x0, x8, #32, #32
	bl	mark
.LBB329_27:                             // %"$32"
                                        //   Parent Loop BB329_22 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	w22, w8, [x22]
	bfi	x22, x8, #32, #32
	cbz	x22, .LBB329_29
// %bb.28:                              // %"$33"
                                        //   in Loop: Header=BB329_27 Depth=2
	ldp	w0, w8, [x22], #8
	bfi	x0, x8, #32, #32
	bl	mark
	b	.LBB329_27
.LBB329_29:                             // %"$34"
                                        //   in Loop: Header=BB329_22 Depth=1
	add	x8, x21, #120                   // =120
.LBB329_30:                             // %"$35"
                                        //   Parent Loop BB329_22 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	w22, w9, [x8]
	bfi	x22, x9, #32, #32
	cbz	x22, .LBB329_32
// %bb.31:                              // %"$36"
                                        //   in Loop: Header=BB329_30 Depth=2
	ldp	w0, w8, [x22]
	bfi	x0, x8, #32, #32
	bl	mark
	ldp	w0, w8, [x22, #8]
	bfi	x0, x8, #32, #32
	bl	mark
	add	x8, x22, #16                    // =16
	b	.LBB329_30
.LBB329_32:                             // %"$37"
                                        //   in Loop: Header=BB329_22 Depth=1
	add	x22, x21, #136                  // =136
	b	.LBB329_34
.LBB329_33:                             // %"$42"
                                        //   in Loop: Header=BB329_34 Depth=2
	ldp	w0, w8, [x22, #16]
	bfi	x0, x8, #32, #32
	bl	mark
	ldp	w0, w8, [x22, #112]
	bfi	x0, x8, #32, #32
	bl	mark
.LBB329_34:                             // %"$38"
                                        //   Parent Loop BB329_22 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	x22, [x22]
	cbz	x22, .LBB329_21
// %bb.35:                              // %"$39"
                                        //   in Loop: Header=BB329_34 Depth=2
	ldp	w9, w8, [x22, #8]
	bfi	x9, x8, #32, #32
	cbz	x9, .LBB329_33
// %bb.36:                              // %"$41"
                                        //   in Loop: Header=BB329_34 Depth=2
	ldp	w0, w8, [x22, #8]
	bfi	x0, x8, #32, #32
	bl	mark
	b	.LBB329_33
.LBB329_37:                             // %"$27"
	mov	x24, xzr
	adrp	x21, ($Extern)
	ldr	x23, [x21, :lo12:($Extern)]
	mov	x22, #-10
.LBB329_38:                             // %"$44"
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB329_39 Depth 2
                                        //       Child Loop BB329_49 Depth 3
                                        //       Child Loop BB329_45 Depth 3
	mov	x9, x23
	ldr	w8, [x9, #8]!
	ldr	w10, [x9, #4]
	bfi	x8, x10, #32, #32
	and	x8, x8, #0xfffffffffffffffe
	str	w8, [x9]
	mov	x10, x8
	ldr	w11, [x10, #8]!
	ldr	w9, [x10, #4]
	bfi	x11, x9, #32, #32
	and	x9, x11, #0xfffffffffffffffe
	str	w9, [x10]
	tst	x11, #0xe
	b.eq	.LBB329_51
.LBB329_39:                             // %"$47"
                                        //   Parent Loop BB329_38 Depth=1
                                        // =>  This Loop Header: Depth=2
                                        //       Child Loop BB329_49 Depth 3
                                        //       Child Loop BB329_45 Depth 3
	ldp	w0, w8, [x23]
	bfi	x0, x8, #32, #32
	ldrb	w8, [x0]
	tbz	w8, #0, .LBB329_43
// %bb.40:                              // %"$48"
                                        //   in Loop: Header=BB329_39 Depth=2
	ldp	w8, w9, [x0, #-8]
	bfi	x8, x9, #32, #32
	tst	x8, #0x6
	b.eq	.LBB329_48
.LBB329_41:                             // %"$51"
                                        //   in Loop: Header=BB329_39 Depth=2
	cmn	x8, x8
	b.lo	.LBB329_43
// %bb.42:                              // %"$55"
                                        //   in Loop: Header=BB329_39 Depth=2
	bl	mark
.LBB329_43:                             // %"$49"
                                        //   in Loop: Header=BB329_39 Depth=2
	ldp	w8, w9, [x23, #8]
	bfi	x8, x9, #32, #32
	ldp	w9, w10, [x8]
	bfi	x9, x10, #32, #32
	tst	x9, #0xf
	b.eq	.LBB329_52
// %bb.44:                              //   in Loop: Header=BB329_39 Depth=2
	mov	x8, x24
	cbz	x8, .LBB329_53
.LBB329_45:                             // %"$62"
                                        //   Parent Loop BB329_38 Depth=1
                                        //     Parent Loop BB329_39 Depth=2
                                        // =>    This Inner Loop Header: Depth=3
	tbz	w8, #3, .LBB329_47
// %bb.46:                              // %"$63"
                                        //   in Loop: Header=BB329_45 Depth=3
	and	x9, x8, #0xfffffffffffffff7
	ldp	w10, w8, [x9, #8]
	bfi	x10, x8, #32, #32
	ldp	w8, w11, [x10]
	bfi	x8, x11, #32, #32
	lsr	x11, x23, #32
	stp	w23, w11, [x10]
	mov	x23, x9
	cbnz	x8, .LBB329_45
	b	.LBB329_53
.LBB329_47:                             // %"$65"
                                        //   in Loop: Header=BB329_39 Depth=2
	ldp	w10, w9, [x8, #8]
	bfi	x10, x9, #32, #32
	ldr	w24, [x10, #8]!
	ldr	w9, [x10, #4]
	bfi	x24, x9, #32, #32
	lsr	x9, x23, #32
	stp	w23, w9, [x10]
	mov	x23, x8
	b	.LBB329_39
.LBB329_48:                             // %"$50"
                                        //   in Loop: Header=BB329_39 Depth=2
	and	x8, x8, x22
.LBB329_49:                             // %"$52"
                                        //   Parent Loop BB329_38 Depth=1
                                        //     Parent Loop BB329_39 Depth=2
                                        // =>    This Inner Loop Header: Depth=3
	ldp	w8, w9, [x8, #8]
	bfi	x8, x9, #32, #32
	tst	x8, #0x6
	b.ne	.LBB329_41
// %bb.50:                              // %"$53"
                                        //   in Loop: Header=BB329_49 Depth=3
	and	x8, x8, #0xfffffffffffffffe
	b	.LBB329_49
.LBB329_51:                             // %"$45"
                                        //   in Loop: Header=BB329_38 Depth=1
	lsr	x10, x24, #32
	stp	w24, w10, [x8, #8]
	mov	x24, x23
	mov	x23, x9
	b	.LBB329_38
.LBB329_52:                             // %"$59"
                                        //   in Loop: Header=BB329_38 Depth=1
	lsr	x10, x24, #32
	stp	w24, w10, [x8]
	orr	x24, x23, #0x8
	mov	x23, x9
	b	.LBB329_38
.LBB329_53:                             // %"$-1"
	adrp	x8, SymTab+168
	adrp	x9, SymTab+168
	add	x9, x9, :lo12:SymTab+168
	ldrb	w10, [x9, #176]!
	str	x9, [x8, :lo12:SymTab+168]
	tbz	w10, #0, .LBB329_55
// %bb.54:                              // %"$67"
	mov	w8, #26
	stp	x8, x20, [x20, #328]
.LBB329_55:                             // %"$68"
	mov	x10, xzr
	ldr	x9, [x21, :lo12:($Extern)]
	adrp	x8, ($ExtCnt)
.LBB329_56:                             // %"$70"
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB329_57 Depth 2
                                        //       Child Loop BB329_67 Depth 3
                                        //       Child Loop BB329_71 Depth 3
	ldp	w11, w12, [x9, #8]
	bfi	x11, x12, #32, #32
	ldp	w12, w13, [x11, #8]
	bfi	x12, x13, #32, #32
	tst	x12, #0xf
	b.eq	.LBB329_74
.LBB329_57:                             // %"$73"
                                        //   Parent Loop BB329_56 Depth=1
                                        // =>  This Loop Header: Depth=2
                                        //       Child Loop BB329_67 Depth 3
                                        //       Child Loop BB329_71 Depth 3
	ldp	w12, w11, [x9]
	bfi	x12, x11, #32, #32
	ldrb	w11, [x12]
	tbz	w11, #0, .LBB329_69
// %bb.58:                              // %"$74"
                                        //   in Loop: Header=BB329_57 Depth=2
	ldr	x11, [x8, :lo12:($ExtCnt)]
	sub	x11, x11, #1                    // =1
	str	x11, [x8, :lo12:($ExtCnt)]
	ldp	w11, w12, [x9, #8]
	bfi	x11, x12, #32, #32
	tst	x11, #0xf
	b.eq	.LBB329_60
// %bb.59:                              //   in Loop: Header=BB329_57 Depth=2
	mov	x12, x11
	mov	x11, x9
	b	.LBB329_62
.LBB329_60:                             // %"$77"
                                        //   in Loop: Header=BB329_57 Depth=2
	ldrb	w12, [x11]
	tst	w12, #0xf
	b.eq	.LBB329_63
// %bb.61:                              // %"$78"
                                        //   in Loop: Header=BB329_57 Depth=2
	orr	w12, w11, #0x1
	lsr	x13, x11, #32
	stp	w12, w13, [x9, #8]
	ldp	w12, w9, [x11, #8]
	bfi	x12, x9, #32, #32
.LBB329_62:                             // %"$-4.sink.split"
                                        //   in Loop: Header=BB329_57 Depth=2
	orr	w9, w12, #0x1
	lsr	x13, x12, #32
	stp	w9, w13, [x11, #8]
	mov	x9, x12
	b	.LBB329_70
.LBB329_63:                             // %"$79"
                                        //   in Loop: Header=BB329_57 Depth=2
	ldrb	w12, [x11, #8]
	tst	w12, #0xf
	b.ne	.LBB329_76
// %bb.64:                              // %"$81"
                                        //   in Loop: Header=BB329_57 Depth=2
	ldp	w12, w13, [x11, #8]
	bfi	x12, x13, #32, #32
	ldp	w11, w13, [x12, #8]
	bfi	x11, x13, #32, #32
	ldrb	w13, [x11]
	tst	w13, #0xf
	b.eq	.LBB329_66
// %bb.65:                              // %"$82"
                                        //   in Loop: Header=BB329_57 Depth=2
	ldp	w13, w12, [x12]
	stp	w13, w12, [x9]
	ldp	w13, w12, [x9, #8]
	bfi	x13, x12, #32, #32
	ldp	w12, w11, [x11, #8]
	stp	w12, w11, [x13, #8]
	b	.LBB329_69
.LBB329_66:                             // %"$83"
                                        //   in Loop: Header=BB329_57 Depth=2
	ldp	w14, w13, [x11]
	bfi	x14, x13, #32, #32
.LBB329_67:                             // %"$84"
                                        //   Parent Loop BB329_56 Depth=1
                                        //     Parent Loop BB329_57 Depth=2
                                        // =>    This Inner Loop Header: Depth=3
	mov	x11, x14
	mov	x13, x12
	ldp	w14, w12, [x14, #8]
	bfi	x14, x12, #32, #32
	ldp	w14, w12, [x14]
	bfi	x14, x12, #32, #32
	tst	x14, #0xf
	mov	x12, x11
	b.eq	.LBB329_67
// %bb.68:                              // %"$87"
                                        //   in Loop: Header=BB329_57 Depth=2
	ldp	w12, w14, [x11]
	stp	w12, w14, [x9]
	ldp	w13, w12, [x13, #8]
	bfi	x13, x12, #32, #32
	ldp	w11, w12, [x11, #8]
	bfi	x11, x12, #32, #32
	ldp	w12, w11, [x11, #8]
	stp	w12, w11, [x13]
.LBB329_69:                             // %"$-3"
                                        //   in Loop: Header=BB329_57 Depth=2
	ldp	w11, w12, [x9, #8]
	bfi	x11, x12, #32, #32
	ldp	w12, w13, [x11]
	bfi	x12, x13, #32, #32
	tst	x12, #0xf
	b.eq	.LBB329_75
.LBB329_70:                             // %"$91.preheader"
                                        //   in Loop: Header=BB329_57 Depth=2
	mov	x11, x9
	mov	x9, x10
	cbz	x9, .LBB329_77
.LBB329_71:                             // %"$93"
                                        //   Parent Loop BB329_56 Depth=1
                                        //     Parent Loop BB329_57 Depth=2
                                        // =>    This Inner Loop Header: Depth=3
	tbz	w9, #3, .LBB329_73
// %bb.72:                              // %"$94"
                                        //   in Loop: Header=BB329_71 Depth=3
	and	x10, x9, #0xfffffffffffffff7
	ldp	w12, w9, [x10, #8]
	bfi	x12, x9, #32, #32
	ldp	w9, w13, [x12]
	bfi	x9, x13, #32, #32
	str	w11, [x12]
	lsr	x11, x11, #32
	str	w11, [x12, #4]
	mov	x11, x10
	cbnz	x9, .LBB329_71
	b	.LBB329_77
.LBB329_73:                             // %"$96"
                                        //   in Loop: Header=BB329_57 Depth=2
	ldp	w12, w10, [x9, #8]
	bfi	x12, x10, #32, #32
	ldr	w10, [x12, #8]!
	ldr	w13, [x12, #4]
	bfi	x10, x13, #32, #32
	str	w11, [x12]
	lsr	x11, x11, #32
	str	w11, [x12, #4]
	b	.LBB329_57
.LBB329_74:                             // %"$71"
                                        //   in Loop: Header=BB329_56 Depth=1
	lsr	x13, x10, #32
	stp	w10, w13, [x11, #8]
	mov	x10, x9
	mov	x9, x12
	b	.LBB329_56
.LBB329_75:                             // %"$90"
                                        //   in Loop: Header=BB329_56 Depth=1
	lsr	x13, x10, #32
	stp	w10, w13, [x11]
	orr	x10, x9, #0x8
	mov	x9, x12
	b	.LBB329_56
.LBB329_76:                             // %"$80"
                                        //   in Loop: Header=BB329_56 Depth=1
	orr	w12, w11, #0x1
	lsr	x13, x11, #32
	stp	w12, w13, [x9, #8]
	ldp	w9, w12, [x11]
	ldr	w13, [x11, #8]!
	bfi	x9, x12, #32, #32
	orr	w12, w13, #0x1
	str	w12, [x11]
	b	.LBB329_56
.LBB329_77:                             // %"$-5"
	str	x11, [x21, :lo12:($Extern)]
	ldr	x21, [x19, :lo12:($Heaps)]
	adrp	x8, ($GcCount)
	ldr	x19, [x8, :lo12:($GcCount)]
	cbz	x19, .LBB329_86
// %bb.78:                              // %"$112.preheader"
	mov	x8, xzr
	mov	w9, #1048560
	b	.LBB329_80
.LBB329_79:                             // %"$117"
                                        //   in Loop: Header=BB329_80 Depth=1
	add	x10, x21, #256, lsl #12         // =1048576
	ldp	w21, w11, [x10]
	bfi	x21, x11, #32, #32
	cbz	x21, .LBB329_84
.LBB329_80:                             // %"$112"
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB329_82 Depth 2
	add	x10, x21, x9
	ldrb	w11, [x10, #8]
	tbz	w11, #0, .LBB329_82
.LBB329_81:                             // %"$114"
                                        //   in Loop: Header=BB329_80 Depth=1
	lsr	x11, x8, #32
	stp	w8, w11, [x10]
	sub	x19, x19, #1                    // =1
	mov	x8, x10
.LBB329_82:                             // %"$115"
                                        //   Parent Loop BB329_80 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	cmp	x10, x21
	b.eq	.LBB329_79
// %bb.83:                              // %"$116"
                                        //   in Loop: Header=BB329_82 Depth=2
	sub	x10, x10, #16                   // =16
	ldrb	w11, [x10, #8]
	tbnz	w11, #0, .LBB329_81
	b	.LBB329_82
.LBB329_84:                             // %"$119"
	adrp	x9, ($Avail)
	str	x8, [x9, :lo12:($Avail)]
	tbnz	x19, #63, .LBB329_95
.LBB329_85:                             // %"$121"
                                        // =>This Inner Loop Header: Depth=1
	bl	heapAlloc
	sub	x19, x19, #16, lsl #12          // =65536
	tbz	x19, #63, .LBB329_85
	b	.LBB329_95
.LBB329_86:                             // %"$98"
	mov	x23, xzr
	adrp	x19, ($Heaps)
	add	x19, x19, :lo12:($Heaps)
	mov	w22, #1048560
	adrp	x20, .L$28
	add	x20, x20, :lo12:.L$28
	b	.LBB329_88
.LBB329_87:                             // %"$108"
                                        //   in Loop: Header=BB329_88 Depth=1
	add	x8, x21, #256, lsl #12          // =1048576
	ldp	w25, w24, [x8]
	mov	x21, x25
	bfi	x21, x24, #32, #32
	bl	newline
	mov	x0, x20
	bl	outString
	mov	x0, x19
	bl	outWord
	bl	newline
	stp	w25, w24, [x19]
	cbz	x21, .LBB329_94
.LBB329_88:                             // %"$101"
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB329_90 Depth 2
	add	x9, x21, x22
	mov	x8, x23
	mov	w10, #65536
	ldrb	w11, [x9, #8]
	tbz	w11, #0, .LBB329_90
.LBB329_89:                             // %"$103"
                                        //   in Loop: Header=BB329_88 Depth=1
	lsr	x11, x8, #32
	stp	w8, w11, [x9]
	sub	x10, x10, #1                    // =1
	mov	x8, x9
.LBB329_90:                             // %"$104"
                                        //   Parent Loop BB329_88 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	cmp	x9, x21
	b.eq	.LBB329_92
// %bb.91:                              // %"$105"
                                        //   in Loop: Header=BB329_90 Depth=2
	sub	x9, x9, #16                     // =16
	ldrb	w11, [x9, #8]
	tbnz	w11, #0, .LBB329_89
	b	.LBB329_90
.LBB329_92:                             // %"$106"
                                        //   in Loop: Header=BB329_88 Depth=1
	cbz	x10, .LBB329_87
// %bb.93:                              // %"$107"
                                        //   in Loop: Header=BB329_88 Depth=1
	add	x19, x21, #256, lsl #12         // =1048576
	ldp	w21, w9, [x19]
	bfi	x21, x9, #32, #32
	mov	x23, x8
	cbnz	x21, .LBB329_88
.LBB329_94:                             // %"$111"
	adrp	x8, ($Avail)
	str	x23, [x8, :lo12:($Avail)]
.LBB329_95:                             // %"$100"
	ldp	x20, x19, [sp, #48]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #32]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #16]             // 16-byte Folded Reload
	ldp	x30, x25, [sp], #64             // 16-byte Folded Reload
	ret
.Lfunc_end329:
	.size	gc, .Lfunc_end329-gc
	.cfi_endproc
                                        // -- End function
	.globl	mark                            // -- Begin function mark
	.p2align	4
	.type	mark,@function
mark:                                   // @mark
	.cfi_startproc
// %bb.0:                               // %"$1"
	mov	x8, xzr
.LBB330_1:                              // %"$3"
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB330_9 Depth 2
                                        //     Child Loop BB330_3 Depth 2
	mov	x9, x0
	tbnz	w9, #1, .LBB330_3
// %bb.2:                               // %"$4"
                                        //   in Loop: Header=BB330_1 Depth=1
	and	x10, x9, #0xfffffffffffffff0
	ldp	w12, w11, [x10, #8]
	bfi	x12, x11, #32, #32
	tbnz	w12, #0, .LBB330_7
.LBB330_3:                              // %"$13"
                                        //   Parent Loop BB330_1 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ands	x10, x8, #0xfffffffffffffff0
	b.eq	.LBB330_12
// %bb.4:                               // %"$15"
                                        //   in Loop: Header=BB330_3 Depth=2
	ldp	w11, w12, [x10]
	bfi	x11, x12, #32, #32
	lsr	x12, x9, #32
	tbnz	w11, #0, .LBB330_6
// %bb.5:                               // %"$16"
                                        //   in Loop: Header=BB330_3 Depth=2
	ldr	w11, [x10, #8]!
	ldr	w13, [x10, #4]
	bfi	x11, x13, #32, #32
	stp	w9, w12, [x10]
	mov	x9, x8
	mov	x8, x11
	b	.LBB330_3
.LBB330_6:                              // %"$18"
                                        //   in Loop: Header=BB330_1 Depth=1
	stp	w9, w12, [x10]
	ldr	w0, [x10, #8]!
	ldr	w9, [x10, #4]
	bfi	x0, x9, #32, #32
	lsr	x13, x11, #32
	and	w9, w11, #0xfffffffe
	stp	w9, w13, [x10]
	b	.LBB330_1
.LBB330_7:                              // %"$6"
                                        //   in Loop: Header=BB330_1 Depth=1
	and	x11, x12, #0xfffffffffffffffe
	lsr	x12, x12, #32
	stp	w11, w12, [x10, #8]
	tbz	w9, #2, .LBB330_11
// %bb.8:                               // %"$9"
                                        //   in Loop: Header=BB330_1 Depth=1
	tbnz	w11, #1, .LBB330_3
.LBB330_9:                              // %"$10"
                                        //   Parent Loop BB330_1 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	w10, w12, [x11, #4]
	bfi	x10, x12, #32, #32
	tbz	w10, #0, .LBB330_3
// %bb.10:                              // %"$12"
                                        //   in Loop: Header=BB330_9 Depth=2
	and	x12, x10, #0xfffffffffffffffe
	lsr	x10, x10, #32
	stp	w12, w10, [x11, #4]
	mov	x11, x12
	tbz	w11, #1, .LBB330_9
	b	.LBB330_3
.LBB330_11:                             // %"$7"
                                        //   in Loop: Header=BB330_1 Depth=1
	ldp	w0, w11, [x10]
	bfi	x0, x11, #32, #32
	lsr	x11, x8, #32
	orr	w8, w8, #0x1
	stp	w8, w11, [x10]
	mov	x8, x9
	b	.LBB330_1
.LBB330_12:                             // %"$14"
	ret
.Lfunc_end330:
	.size	mark, .Lfunc_end330-mark
	.cfi_endproc
                                        // -- End function
	.globl	outString                       // -- Begin function outString
	.p2align	4
	.type	outString,@function
outString:                              // @outString
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-32]!                // 8-byte Folded Spill
	stp	x20, x19, [sp, #16]             // 16-byte Folded Spill
	.cfi_def_cfa_offset 32
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w30, -32
	mov	x19, x0
	adrp	x20, ($Put)
	ldrb	w0, [x19]
	cbz	w0, .LBB331_2
.LBB331_1:                              // %"$3"
                                        // =>This Inner Loop Header: Depth=1
	ldr	x8, [x20, :lo12:($Put)]
	blr	x8
	add	x19, x19, #1                    // =1
	ldrb	w0, [x19]
	cbnz	w0, .LBB331_1
.LBB331_2:                              // %"$4"
	ldp	x20, x19, [sp, #16]             // 16-byte Folded Reload
	ldr	x30, [sp], #32                  // 8-byte Folded Reload
	ret
.Lfunc_end331:
	.size	outString, .Lfunc_end331-outString
	.cfi_endproc
                                        // -- End function
	.globl	heapAlloc                       // -- Begin function heapAlloc
	.p2align	4
	.type	heapAlloc,@function
heapAlloc:                              // @heapAlloc
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	mov	x0, xzr
	mov	w1, #8
	movk	w1, #16, lsl #16
	bl	alloc
	adrp	x10, ($Heaps)
	mov	w11, #1048560
	add	x12, x0, #256, lsl #12          // =1048576
	ldr	x13, [x10, :lo12:($Heaps)]
	adrp	x8, ($Avail)
	ldr	x9, [x8, :lo12:($Avail)]
	lsr	x14, x13, #32
	stp	w13, w14, [x12]
	str	x0, [x10, :lo12:($Heaps)]
	add	x11, x0, x11
	mov	x10, #-1048576
.LBB332_1:                              // %"$2"
                                        // =>This Inner Loop Header: Depth=1
	mov	x12, x9
	mov	x9, x11
	lsr	x11, x12, #32
	stp	w12, w11, [x9]
	sub	x11, x9, #16                    // =16
	adds	x10, x10, #16                   // =16
	b.ne	.LBB332_1
// %bb.2:                               // %"$4"
	str	x9, [x8, :lo12:($Avail)]
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end332:
	.size	heapAlloc, .Lfunc_end332-heapAlloc
	.cfi_endproc
                                        // -- End function
	.globl	alloc                           // -- Begin function alloc
	.p2align	4
	.type	alloc,@function
alloc:                                  // @alloc
	.cfi_startproc
// %bb.0:                               // %"$1"
	adrp	x8, ($Limit)
	ldr	x0, [x8, :lo12:($Limit)]
	add	x9, x0, x1, lsl #3
	str	x9, [x8, :lo12:($Limit)]
	ret
.Lfunc_end333:
	.size	alloc, .Lfunc_end333-alloc
	.cfi_endproc
                                        // -- End function
	.globl	sighandler                      // -- Begin function sighandler
	.p2align	4
	.type	sighandler,@function
sighandler:                             // @sighandler
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x30, x23, [sp, #-48]!           // 16-byte Folded Spill
	stp	x22, x21, [sp, #16]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #32]             // 16-byte Folded Spill
	.cfi_def_cfa_offset 48
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w30, -48
	adrp	x19, env+136
	ldr	w8, [x19, :lo12:env+136]
	cbnz	w8, .LBB334_7
// %bb.1:                               // %"$2"
	mov	w21, #1
	adrp	x20, ($Signal)
	add	x20, x20, :lo12:($Signal)
	str	w21, [x19, :lo12:env+136]
	adrp	x22, ($Signal)
	adrp	x23, SymTab+648
	add	x23, x23, :lo12:SymTab+648
.LBB334_2:                              // %"$5"
                                        // =>This Inner Loop Header: Depth=1
	ldr	w8, [x20, x21, lsl #2]
	cbz	w8, .LBB334_4
// %bb.3:                               // %"$6"
                                        //   in Loop: Header=BB334_2 Depth=1
	sub	w8, w8, #1                      // =1
	lsl	x9, x21, #4
	str	w8, [x20, x21, lsl #2]
	ldr	w8, [x20]
	sub	w8, w8, #1                      // =1
	str	w8, [x20]
	sub	x8, x9, #14                     // =14
	str	x8, [x23]
	ldr	x0, [x23, #16]
	bl	execAt
.LBB334_4:                              // %"$7"
                                        //   in Loop: Header=BB334_2 Depth=1
	add	x21, x21, #1                    // =1
	cmp	x21, #1024                      // =1024
	b.ne	.LBB334_2
// %bb.5:                               // %"$9"
                                        //   in Loop: Header=BB334_2 Depth=1
	ldr	w8, [x22, :lo12:($Signal)]
	mov	w21, #1
	cbnz	w8, .LBB334_2
// %bb.6:                               // %"$11"
	str	wzr, [x19, :lo12:env+136]
.LBB334_7:                              // %"$3"
	ldp	x20, x19, [sp, #32]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #16]             // 16-byte Folded Reload
	ldp	x30, x23, [sp], #48             // 16-byte Folded Reload
	ret
.Lfunc_end334:
	.size	sighandler, .Lfunc_end334-sighandler
	.cfi_endproc
                                        // -- End function
	.globl	evExpr                          // -- Begin function evExpr
	.p2align	4
	.type	evExpr,@function
evExpr:                                 // @evExpr
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-96]!           // 16-byte Folded Spill
	str	x27, [sp, #16]                  // 8-byte Folded Spill
	stp	x26, x25, [sp, #32]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #48]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #64]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #80]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	mov	x19, x0
	mov	x9, sp
	adrp	x10, ($StkLimit)
	ldr	x10, [x10, :lo12:($StkLimit)]
	cmp	x10, x9
	b.hi	.LBB335_83
// %bb.1:                               // %"$3"
	mov	x8, x1
	ldp	w24, w9, [x1, #8]
	ldp	w20, w10, [x19]
	bfi	x24, x9, #32, #32
	bfi	x20, x10, #32, #32
	adrp	x22, SymTab+376
	add	x22, x22, :lo12:SymTab+376
	ldr	x9, [x22]
	adrp	x21, env+8
	ldr	x10, [x21, :lo12:env+8]
	mov	x11, sp
	sub	x23, x11, #32                   // =32
	mov	sp, x23
	lsr	x12, x9, #32
	lsr	x13, x22, #32
	stp	w9, w12, [x11, #-32]
	stp	w22, w13, [x11, #-24]
	lsr	x12, x10, #32
	adrp	x25, SymTab+8
	add	x25, x25, :lo12:SymTab+8
	sub	x9, x11, #8                     // =8
	stp	w10, w12, [x11, #-16]
.LBB335_2:                              // %"$4.sink.split"
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB335_3 Depth 2
                                        //       Child Loop BB335_9 Depth 3
	lsr	x10, x8, #32
	stp	w8, w10, [x9]
	str	x23, [x21, :lo12:env+8]
.LBB335_3:                              // %"$4"
                                        //   Parent Loop BB335_2 Depth=1
                                        // =>  This Loop Header: Depth=2
                                        //       Child Loop BB335_9 Depth 3
	tst	x20, #0xf
	b.ne	.LBB335_23
// %bb.4:                               // %"$5"
                                        //   in Loop: Header=BB335_3 Depth=2
	ldp	w0, w8, [x24]
	bfi	x0, x8, #32, #32
	ldp	w24, w8, [x24, #8]
	bfi	x24, x8, #32, #32
	tst	x0, #0x6
	b.ne	.LBB335_8
// %bb.5:                               // %"$8"
                                        //   in Loop: Header=BB335_3 Depth=2
	tbz	w0, #3, .LBB335_7
// %bb.6:                               // %"$11"
                                        //   in Loop: Header=BB335_3 Depth=2
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB335_8
.LBB335_7:                              // %"$10"
                                        //   in Loop: Header=BB335_3 Depth=2
	bl	evList
.LBB335_8:                              // %"$7"
                                        //   in Loop: Header=BB335_3 Depth=2
	ldp	w1, w8, [x20]
	bfi	x1, x8, #32, #32
	ldp	w20, w8, [x20, #8]
	bfi	x20, x8, #32, #32
	tst	x1, #0xf
	b.ne	.LBB335_19
.LBB335_9:                              // %"$21"
                                        //   Parent Loop BB335_2 Depth=1
                                        //     Parent Loop BB335_3 Depth=2
                                        // =>    This Inner Loop Header: Depth=3
	tst	x0, #0xf
	b.eq	.LBB335_11
// %bb.10:                              //   in Loop: Header=BB335_9 Depth=3
	mov	x10, x25
	b	.LBB335_12
.LBB335_11:                             // %"$22"
                                        //   in Loop: Header=BB335_9 Depth=3
	ldp	w10, w8, [x0]
	bfi	x10, x8, #32, #32
	ldp	w0, w8, [x0, #8]
	bfi	x0, x8, #32, #32
.LBB335_12:                             // %"$24"
                                        //   in Loop: Header=BB335_9 Depth=3
	ldp	w8, w9, [x1]
	bfi	x8, x9, #32, #32
	tst	x8, #0x6
	b.ne	.LBB335_79
// %bb.13:                              // %"$26"
                                        //   in Loop: Header=BB335_9 Depth=3
	add	x9, x25, #208                   // =208
	cmp	x9, x8
	ccmp	x8, x25, #0, hs
	b.hs	.LBB335_80
// %bb.14:                              // %"$30"
                                        //   in Loop: Header=BB335_9 Depth=3
	ldp	w1, w9, [x1, #8]
	bfi	x1, x9, #32, #32
	mov	x11, sp
	sub	x9, x11, #32                    // =32
	mov	sp, x9
	lsr	x12, x10, #32
	lsr	x13, x8, #32
	stp	w10, w12, [x11, #-32]
	stp	w8, w13, [x11, #-24]
	lsr	x8, x23, #32
	stp	w23, w8, [x11, #-16]
	tst	x1, #0xf
	mov	x23, x9
	str	x9, [x21, :lo12:env+8]
	b.eq	.LBB335_9
// %bb.15:                              // %"$32"
                                        //   in Loop: Header=BB335_3 Depth=2
	cmp	x1, x25
	mov	x23, x9
	b.eq	.LBB335_3
// %bb.16:                              // %"$33"
                                        //   in Loop: Header=BB335_2 Depth=1
	tst	x1, #0x6
	b.ne	.LBB335_81
// %bb.17:                              // %"$36"
                                        //   in Loop: Header=BB335_2 Depth=1
	add	x8, x25, #208                   // =208
	cmp	x8, x1
	ccmp	x1, x25, #0, hs
	b.hs	.LBB335_82
// %bb.18:                              // %"$40"
                                        //   in Loop: Header=BB335_2 Depth=1
	sub	x10, sp, #32                    // =32
	mov	sp, x10
	mov	x23, x9
	b	.LBB335_22
.LBB335_19:                             // %"$12"
                                        //   in Loop: Header=BB335_2 Depth=1
	tst	x1, #0x6
	b.ne	.LBB335_81
// %bb.20:                              // %"$16"
                                        //   in Loop: Header=BB335_2 Depth=1
	add	x8, x25, #208                   // =208
	cmp	x8, x1
	ccmp	x1, x25, #0, hs
	b.hs	.LBB335_82
// %bb.21:                              // %"$20"
                                        //   in Loop: Header=BB335_2 Depth=1
	sub	x10, sp, #32                    // =32
	mov	sp, x10
.LBB335_22:                             // %"$14.sink.split"
                                        //   in Loop: Header=BB335_2 Depth=1
	lsr	x8, x0, #32
	lsr	x11, x1, #32
	add	x9, x10, #16                    // =16
	stp	w0, w8, [x10]
	mov	x8, x23
	mov	x23, x10
	stp	w1, w11, [x10, #8]
	b	.LBB335_2
.LBB335_23:                             // %"$6"
	cmp	x20, x22
	b.ne	.LBB335_28
// %bb.24:                              // %"$41"
	tst	x24, #0xf
	b.eq	.LBB335_48
// %bb.25:                              // %"$45"
	adrp	x8, env+96
	ldr	x20, [x8, :lo12:env+96]
	str	x25, [x8, :lo12:env+96]
.LBB335_26:                             // %"$74"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w9, w8, [x23, #8]
	bfi	x9, x8, #32, #32
	ldp	w8, w10, [x9]
	ldp	w12, w11, [x23]
	stp	w12, w11, [x9]
	stp	w8, w10, [x23]
	cmp	x22, x9
	b.eq	.LBB335_41
// %bb.27:                              // %"$75"
                                        //   in Loop: Header=BB335_26 Depth=1
	ldp	w23, w8, [x23, #16]
	bfi	x23, x8, #32, #32
	b	.LBB335_26
.LBB335_28:                             // %"$42"
	cmp	x20, x25
	b.eq	.LBB335_33
// %bb.29:                              // %"$88"
	tst	x20, #0x6
	b.ne	.LBB335_84
// %bb.30:                              // %"$91"
	add	x8, x25, #208                   // =208
	cmp	x8, x20
	ccmp	x20, x25, #0, hs
	b.hs	.LBB335_85
// %bb.31:                              // %"$95"
	ldp	w8, w9, [x20]
	mov	x10, sp
	sub	x11, x10, #32                   // =32
	mov	sp, x11
	stp	w8, w9, [x10, #-32]
	lsr	x8, x20, #32
	stp	w20, w8, [x10, #-24]
	lsr	x8, x23, #32
	stp	w23, w8, [x10, #-16]
	str	x11, [x21, :lo12:env+8]
	lsr	x8, x24, #32
	stp	w24, w8, [x20]
	b	.LBB335_33
.LBB335_32:                             // %"$97"
                                        //   in Loop: Header=BB335_33 Depth=1
	ldp	w23, w8, [x23, #16]
	bfi	x23, x8, #32, #32
.LBB335_33:                             // %"$96"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w9, w8, [x23, #8]
	bfi	x9, x8, #32, #32
	ldp	w8, w10, [x9]
	ldp	w12, w11, [x23]
	stp	w12, w11, [x9]
	stp	w8, w10, [x23]
	cmp	x22, x9
	b.ne	.LBB335_32
// %bb.34:                              // %"$98"
	ldp	w19, w8, [x19, #8]
	bfi	x19, x8, #32, #32
.LBB335_35:                             // %"$99"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w0, w8, [x19]
	bfi	x0, x8, #32, #32
	ldp	w19, w8, [x19, #8]
	bfi	x19, x8, #32, #32
	tst	x19, #0xf
	b.ne	.LBB335_38
// %bb.36:                              // %"$100"
                                        //   in Loop: Header=BB335_35 Depth=1
	tst	x0, #0xf
	b.ne	.LBB335_35
// %bb.37:                              // %"$109"
                                        //   in Loop: Header=BB335_35 Depth=1
	bl	evList
	b	.LBB335_35
.LBB335_38:                             // %"$102"
	tst	x0, #0x6
	b.ne	.LBB335_75
// %bb.39:                              // %"$104"
	tbz	w0, #3, .LBB335_51
// %bb.40:                              // %"$107"
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB335_75
.LBB335_41:                             // %"$76"
	ldp	w19, w8, [x19, #8]
	bfi	x19, x8, #32, #32
.LBB335_42:                             // %"$77"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w0, w8, [x19]
	bfi	x0, x8, #32, #32
	ldp	w19, w8, [x19, #8]
	bfi	x19, x8, #32, #32
	tst	x19, #0xf
	b.ne	.LBB335_45
// %bb.43:                              // %"$78"
                                        //   in Loop: Header=BB335_42 Depth=1
	tst	x0, #0xf
	b.ne	.LBB335_42
// %bb.44:                              // %"$87"
                                        //   in Loop: Header=BB335_42 Depth=1
	bl	evList
	b	.LBB335_42
.LBB335_45:                             // %"$80"
	tst	x0, #0x6
	b.ne	.LBB335_53
// %bb.46:                              // %"$82"
	tbz	w0, #3, .LBB335_52
// %bb.47:                              // %"$85"
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB335_53
.LBB335_48:                             // %"$44"
	ldp	w0, w8, [x24]
	bfi	x0, x8, #32, #32
	tst	x0, #0x6
	b.ne	.LBB335_55
// %bb.49:                              // %"$48"
	tbz	w0, #3, .LBB335_54
// %bb.50:                              // %"$51"
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB335_55
.LBB335_51:                             // %"$106"
	bl	evList
	b	.LBB335_75
.LBB335_52:                             // %"$84"
	bl	evList
.LBB335_53:                             // %"$46"
	adrp	x8, env+96
	add	x8, x8, :lo12:env+96
	b	.LBB335_74
.LBB335_54:                             // %"$50"
	bl	evList
.LBB335_55:                             // %"$47"
	mov	x8, sp
	sub	x20, x8, #32                    // =32
	mov	sp, x20
	sub	x8, x8, #24                     // =24
	adrp	x27, env
	mov	x26, x20
	b	.LBB335_58
.LBB335_56:                             // %"$58"
                                        //   in Loop: Header=BB335_58 Depth=1
	mov	x0, x8
	bl	evList
	mov	x8, x0
.LBB335_57:                             // %"$55"
                                        //   in Loop: Header=BB335_58 Depth=1
	mov	x9, sp
	sub	x0, x9, #32                     // =32
	mov	sp, x0
	lsr	x10, x8, #32
	stp	w8, w10, [x9, #-24]
	mov	x8, x26
	mov	x26, x0
.LBB335_58:                             // %"$52"
                                        // =>This Inner Loop Header: Depth=1
	lsr	x9, x0, #32
	stp	w0, w9, [x8]
	add	x8, x26, #8                     // =8
	ldr	x9, [x27, :lo12:env]
	lsr	x10, x9, #32
	stp	w9, w10, [x26, #16]
	str	x8, [x27, :lo12:env]
	ldp	w24, w8, [x24, #8]
	bfi	x24, x8, #32, #32
	tst	x24, #0xf
	b.ne	.LBB335_62
// %bb.59:                              // %"$53"
                                        //   in Loop: Header=BB335_58 Depth=1
	ldp	w8, w9, [x24]
	bfi	x8, x9, #32, #32
	tst	x8, #0x6
	b.ne	.LBB335_57
// %bb.60:                              // %"$56"
                                        //   in Loop: Header=BB335_58 Depth=1
	tbz	w8, #3, .LBB335_56
// %bb.61:                              // %"$59"
                                        //   in Loop: Header=BB335_58 Depth=1
	ldp	w8, w9, [x8]
	bfi	x8, x9, #32, #32
	b	.LBB335_57
.LBB335_62:                             // %"$54"
	adrp	x8, env+96
	ldr	x24, [x8, :lo12:env+96]
	lsr	x9, x25, #32
	stp	w25, w9, [x26]
	str	x20, [x8, :lo12:env+96]
.LBB335_63:                             // %"$60"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w9, w8, [x23, #8]
	bfi	x9, x8, #32, #32
	ldp	w8, w10, [x9]
	ldp	w12, w11, [x23]
	stp	w12, w11, [x9]
	stp	w8, w10, [x23]
	cmp	x22, x9
	b.eq	.LBB335_65
// %bb.64:                              // %"$61"
                                        //   in Loop: Header=BB335_63 Depth=1
	ldp	w23, w8, [x23, #16]
	bfi	x23, x8, #32, #32
	b	.LBB335_63
.LBB335_65:                             // %"$62"
	ldp	w19, w8, [x19, #8]
	bfi	x19, x8, #32, #32
.LBB335_66:                             // %"$63"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w0, w8, [x19]
	bfi	x0, x8, #32, #32
	ldp	w19, w8, [x19, #8]
	bfi	x19, x8, #32, #32
	tst	x19, #0xf
	b.ne	.LBB335_69
// %bb.67:                              // %"$64"
                                        //   in Loop: Header=BB335_66 Depth=1
	tst	x0, #0xf
	b.ne	.LBB335_66
// %bb.68:                              // %"$73"
                                        //   in Loop: Header=BB335_66 Depth=1
	bl	evList
	b	.LBB335_66
.LBB335_69:                             // %"$66"
	tst	x0, #0x6
	b.ne	.LBB335_73
// %bb.70:                              // %"$68"
	tbz	w0, #3, .LBB335_72
// %bb.71:                              // %"$71"
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB335_73
.LBB335_72:                             // %"$70"
	bl	evList
.LBB335_73:                             // %"$65"
	adrp	x8, env
	add	x8, x8, :lo12:env
	str	x24, [x8, #96]
	ldp	w20, w9, [x20, #16]
	bfi	x20, x9, #32, #32
.LBB335_74:                             // %"$46"
	lsr	x9, x20, #32
	stp	w20, w9, [x8]
.LBB335_75:                             // %"$43"
	adrp	x8, env+8
	add	x8, x8, :lo12:env+8
.LBB335_76:                             // %"$110"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w8, w9, [x8]
	bfi	x8, x9, #32, #32
	ldp	w10, w9, [x8, #8]
	bfi	x10, x9, #32, #32
	ldp	w9, w11, [x8]
	stp	w9, w11, [x10]
	cmp	x22, x10
	b.eq	.LBB335_78
// %bb.77:                              // %"$111"
                                        //   in Loop: Header=BB335_76 Depth=1
	add	x8, x8, #16                     // =16
	b	.LBB335_76
.LBB335_78:                             // %"$112"
	ldp	w8, w9, [x8, #16]
	bfi	x8, x9, #32, #32
	str	x8, [x21, :lo12:env+8]
	mov	sp, x29
	ldp	x20, x19, [sp, #80]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #64]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #48]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #32]             // 16-byte Folded Reload
	ldr	x27, [sp, #16]                  // 8-byte Folded Reload
	ldp	x29, x30, [sp], #96             // 16-byte Folded Reload
	ret
.LBB335_79:                             // %"$25"
	mov	x0, x19
	mov	x1, x8
	bl	varErr
.LBB335_80:                             // %"$29"
	mov	x0, x19
	mov	x1, x8
	bl	protErr
.LBB335_81:                             // %"$15"
	mov	x0, x19
	bl	varErr
.LBB335_82:                             // %"$19"
	mov	x0, x19
	bl	protErr
.LBB335_83:                             // %"$2"
	mov	x0, x19
	bl	stkErr
.LBB335_84:                             // %"$90"
	mov	x0, x19
	mov	x1, x20
	bl	varErr
.LBB335_85:                             // %"$94"
	mov	x0, x19
	mov	x1, x20
	bl	protErr
.Lfunc_end335:
	.size	evExpr, .Lfunc_end335-evExpr
	.cfi_endproc
                                        // -- End function
	.globl	undefined                       // -- Begin function undefined
	.p2align	4
	.type	undefined,@function
undefined:                              // @undefined
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	mov	x8, x0
	adrp	x2, .L$30
	add	x2, x2, :lo12:.L$30
	mov	x0, x1
	mov	x1, x8
	mov	x3, xzr
	bl	err
.Lfunc_end336:
	.size	undefined, .Lfunc_end336-undefined
	.cfi_endproc
                                        // -- End function
	.globl	stkErr                          // -- Begin function stkErr
	.p2align	4
	.type	stkErr,@function
stkErr:                                 // @stkErr
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	adrp	x8, ($StkLimit)
	str	xzr, [x8, :lo12:($StkLimit)]
	adrp	x2, .L$8
	add	x2, x2, :lo12:.L$8
	mov	x1, xzr
	mov	x3, xzr
	bl	err
.Lfunc_end337:
	.size	stkErr, .Lfunc_end337-stkErr
	.cfi_endproc
                                        // -- End function
	.globl	err                             // -- Begin function err
	.p2align	4
	.type	err,@function
err:                                    // @err
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-48]!           // 16-byte Folded Spill
	stp	x22, x21, [sp, #16]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #32]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 48
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w30, -40
	.cfi_offset w29, -48
	adrp	x20, SymTab+8
	add	x20, x20, :lo12:SymTab+8
	cmp	x0, #0                          // =0
	csel	x8, x0, x20, ne
	str	x8, [x20, #528]
	cbz	x1, .LBB338_2
// %bb.1:                               // %"$5"
	mov	x8, sp
	sub	x9, x8, #16                     // =16
	mov	sp, x9
	lsr	x10, x1, #32
	stp	w1, w10, [x8, #-16]
	adrp	x10, env
	ldr	x11, [x10, :lo12:env]
	lsr	x12, x11, #32
	stp	w11, w12, [x8, #-8]
	str	x9, [x10, :lo12:env]
.LBB338_2:                              // %"$6"
	ldrb	w8, [x2]
	cbz	w8, .LBB338_9
// %bb.3:                               // %"$7"
	mov	x0, x2
	bl	mkStr
	adrp	x21, SymTab+568
	str	x0, [x21, :lo12:SymTab+568]
	adrp	x19, env+24
	add	x19, x19, :lo12:env+24
.LBB338_4:                              // %"$9"
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB338_7 Depth 2
	ldr	x19, [x19]
	cbz	x19, .LBB338_9
// %bb.5:                               // %"$10"
                                        //   in Loop: Header=BB338_4 Depth=1
	ldp	w22, w8, [x19, #8]
	bfi	x22, x8, #32, #32
	cbz	x22, .LBB338_4
// %bb.6:                               // %"$14"
                                        //   in Loop: Header=BB338_4 Depth=1
	tst	x22, #0xf
	b.ne	.LBB338_4
.LBB338_7:                              // %"$15"
                                        //   Parent Loop BB338_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	w0, w8, [x22]
	bfi	x0, x8, #32, #32
	ldr	x1, [x21, :lo12:SymTab+568]
	bl	subStr
	tbnz	w0, #0, .LBB338_11
// %bb.8:                               // %"$18"
                                        //   in Loop: Header=BB338_7 Depth=2
	ldp	w22, w8, [x22, #8]
	bfi	x22, x8, #32, #32
	tst	x22, #0xf
	b.eq	.LBB338_7
	b	.LBB338_4
.LBB338_9:                              // %"$8"
	adrp	x0, .L$7
	add	x0, x0, :lo12:.L$7
	bl	outString
	//APP
	wfe
	//NO_APP
.LBB338_10:                             // %"$22"
                                        // =>This Inner Loop Header: Depth=1
	b	.LBB338_10
.LBB338_11:                             // %"$17"
	mov	x0, x19
	bl	unwind
	ldp	w8, w9, [x22]
	bfi	x8, x9, #32, #32
	cmp	x8, x20
	b.ne	.LBB338_13
// %bb.12:                              // %"$19"
	ldr	x8, [x21, :lo12:SymTab+568]
.LBB338_13:                             // %"$21"
	adrp	x9, ($Ret)
	str	x8, [x9, :lo12:($Ret)]
	add	x0, x19, #176                   // =176
	mov	w1, #1
	bl	longjmp
.Lfunc_end338:
	.size	err, .Lfunc_end338-err
	.cfi_endproc
                                        // -- End function
	.globl	mkStr                           // -- Begin function mkStr
	.p2align	4
	.type	mkStr,@function
mkStr:                                  // @mkStr
	.cfi_startproc
// %bb.0:                               // %"$1"
	cbz	x0, .LBB339_4
// %bb.1:                               // %"$2"
	stp	x29, x30, [sp, #-48]!           // 16-byte Folded Spill
	str	x21, [sp, #16]                  // 8-byte Folded Spill
	stp	x20, x19, [sp, #32]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 48
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -32
	.cfi_offset w30, -40
	.cfi_offset w29, -48
	mov	x20, x0
	mov	x8, sp
	sub	x19, x8, #32                    // =32
	mov	sp, x19
	mov	w9, #4
	stp	w9, wzr, [x8, #-32]
	stur	wzr, [x8, #-12]
	mov	w9, #2
	mov	x10, x19
	str	w9, [x10, #16]!
	adrp	x21, env
	ldr	x9, [x21, :lo12:env]
	lsr	x11, x9, #32
	stp	w9, w11, [x8, #-8]
	str	x10, [x21, :lo12:env]
	ldrb	w0, [x20]
	cbz	w0, .LBB339_3
.LBB339_2:                              // %"$6"
                                        // =>This Inner Loop Header: Depth=1
	mov	x1, x19
	bl	byteSym
	add	x20, x20, #1                    // =1
	ldrb	w0, [x20]
	cbnz	w0, .LBB339_2
.LBB339_3:                              // %"$7"
	ldp	w0, w8, [x19, #16]
	bfi	x0, x8, #32, #32
	bl	consStr
	ldp	w9, w8, [x19, #24]
	bfi	x9, x8, #32, #32
	str	x9, [x21, :lo12:env]
	mov	sp, x29
	ldp	x20, x19, [sp, #32]             // 16-byte Folded Reload
	ldr	x21, [sp, #16]                  // 8-byte Folded Reload
	ldp	x29, x30, [sp], #48             // 16-byte Folded Reload
	ret
.LBB339_4:
	adrp	x0, SymTab+8
	add	x0, x0, :lo12:SymTab+8
	ret
.Lfunc_end339:
	.size	mkStr, .Lfunc_end339-mkStr
	.cfi_endproc
                                        // -- End function
	.globl	subStr                          // -- Begin function subStr
	.p2align	4
	.type	subStr,@function
subStr:                                 // @subStr
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-64]!           // 16-byte Folded Spill
	stp	x24, x23, [sp, #16]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #32]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #48]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 64
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w30, -56
	.cfi_offset w29, -64
	adrp	x8, SymTab+8
	add	x8, x8, :lo12:SymTab+8
	cmp	x0, x8
	b.eq	.LBB340_2
// %bb.1:                               // %"$3"
	mov	x20, x1
	mov	x1, x0
	mov	x0, xzr
	bl	xName
	cmp	x0, #2                          // =2
	b.ne	.LBB340_4
.LBB340_2:
	mov	w0, #1
.LBB340_3:                              // %"$2"
	mov	sp, x29
	ldp	x20, x19, [sp, #48]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #32]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #64             // 16-byte Folded Reload
	ret
.LBB340_4:                              // %"$4"
	mov	x19, x0
	mov	x0, xzr
	mov	x1, x20
	bl	xName
	mov	x21, x0
	mov	x8, sp
	sub	x20, x8, #16                    // =16
	mov	sp, x20
	stp	wzr, wzr, [x8, #-16]
.LBB340_5:                              // %"$5"
                                        // =>This Inner Loop Header: Depth=1
	lsr	x8, x21, #32
	stp	w21, w8, [x20, #8]
	mov	x0, x20
	bl	symByte
	tst	w0, #0xff
	b.eq	.LBB340_8
// %bb.6:                               // %"$6"
                                        //   in Loop: Header=BB340_5 Depth=1
	mov	w1, w0
	ldp	w22, w24, [x20]
	ldp	w21, w23, [x20, #8]
	mov	x0, x19
	mov	x2, x20
	bl	preStr
	tbnz	w0, #0, .LBB340_2
// %bb.7:                               // %"$9"
                                        //   in Loop: Header=BB340_5 Depth=1
	bfi	x22, x24, #32, #32
	bfi	x21, x23, #32, #32
	lsr	x8, x22, #32
	stp	w22, w8, [x20]
	b	.LBB340_5
.LBB340_8:
	mov	w0, wzr
	b	.LBB340_3
.Lfunc_end340:
	.size	subStr, .Lfunc_end340-subStr
	.cfi_endproc
                                        // -- End function
	.globl	unwind                          // -- Begin function unwind
	.p2align	4
	.type	unwind,@function
unwind:                                 // @unwind
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x30, x27, [sp, #-80]!           // 16-byte Folded Spill
	stp	x26, x25, [sp, #16]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #32]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #48]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #64]             // 16-byte Folded Spill
	.cfi_def_cfa_offset 80
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w30, -80
	mov	x19, x0
	adrp	x20, env+32
	add	x20, x20, :lo12:env+32
	ldp	x0, x8, [x20]
	cmp	x0, #0                          // =0
	ccmp	x0, x8, #4, ne
	b.eq	.LBB341_2
// %bb.1:                               // %"$4"
	bl	stop
	ldr	x8, [x20, #8]
	str	x8, [x20]
.LBB341_2:                              // %"$3"
	adrp	x8, env+8
	add	x8, x8, :lo12:env+8
	ldr	x26, [x8, #16]
	adrp	x24, env+72
	adrp	x23, env+64
	ldr	x25, [x8]
	adrp	x22, env+56
	adrp	x21, env+48
	adrp	x27, env+24
	adrp	x20, env
	add	x20, x20, :lo12:env
	cbz	x26, .LBB341_23
.LBB341_3:                              // %"$9"
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB341_8 Depth 2
                                        //     Child Loop BB341_10 Depth 2
                                        //     Child Loop BB341_12 Depth 2
                                        //     Child Loop BB341_15 Depth 2
	cbz	x25, .LBB341_5
.LBB341_4:                              // %"$11"
                                        //   in Loop: Header=BB341_3 Depth=1
	ldp	w9, w8, [x26, #32]
	bfi	x9, x8, #32, #32
	cmp	x25, x9
	cset	w8, ne
	tbnz	w8, #0, .LBB341_6
	b	.LBB341_8
.LBB341_5:                              //   in Loop: Header=BB341_3 Depth=1
	mov	w8, wzr
	tbz	w8, #0, .LBB341_8
.LBB341_6:                              // %"$12"
                                        //   in Loop: Header=BB341_3 Depth=1
	ldp	w9, w8, [x25, #8]
	bfi	x9, x8, #32, #32
	ldp	w8, w10, [x25]
	stp	w8, w10, [x9]
	ldp	w25, w8, [x25, #16]
	bfi	x25, x8, #32, #32
	cbnz	x25, .LBB341_4
	b	.LBB341_5
.LBB341_7:                              // %"$15"
                                        //   in Loop: Header=BB341_8 Depth=2
	bl	popCtlFiles
.LBB341_8:                              // %"$14"
                                        //   Parent Loop BB341_3 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	x8, [x24, :lo12:env+72]
	ldr	x9, [x26, #96]
	cmp	x8, x9
	b.ne	.LBB341_7
	b	.LBB341_10
.LBB341_9:                              // %"$18"
                                        //   in Loop: Header=BB341_10 Depth=2
	bl	popErrFiles
.LBB341_10:                             // %"$17"
                                        //   Parent Loop BB341_3 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	x8, [x23, :lo12:env+64]
	ldr	x9, [x26, #88]
	cmp	x8, x9
	b.ne	.LBB341_9
// %bb.11:                              // %"$19"
                                        //   in Loop: Header=BB341_3 Depth=1
	ldr	x8, [x22, :lo12:env+56]
	ldr	x9, [x26, #80]
	cmp	x8, x9
	b.eq	.LBB341_14
.LBB341_12:                             // %"$22"
                                        //   Parent Loop BB341_3 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	bl	popOutFiles
	ldr	x8, [x22, :lo12:env+56]
	ldr	x9, [x26, #80]
	cmp	x8, x9
	b.ne	.LBB341_12
// %bb.13:                              // %"$24"
                                        //   in Loop: Header=BB341_3 Depth=1
	bl	tosOutFile
.LBB341_14:                             // %"$21"
                                        //   in Loop: Header=BB341_3 Depth=1
	ldr	x8, [x21, :lo12:env+48]
	ldr	x9, [x26, #72]
	cmp	x8, x9
	b.eq	.LBB341_17
.LBB341_15:                             // %"$27"
                                        //   Parent Loop BB341_3 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	bl	popInFiles
	ldr	x8, [x21, :lo12:env+48]
	ldr	x9, [x26, #72]
	cmp	x8, x9
	b.ne	.LBB341_15
// %bb.16:                              // %"$29"
                                        //   in Loop: Header=BB341_3 Depth=1
	bl	tosInFile
.LBB341_17:                             // %"$26"
                                        //   in Loop: Header=BB341_3 Depth=1
	add	x1, x26, #24                    // =24
	mov	x0, x20
	mov	w2, #152
	bl	memcpy2
	ldp	w0, w8, [x26, #16]
	bfi	x0, x8, #32, #32
	tst	x0, #0x6
	b.ne	.LBB341_20
// %bb.18:                              // %"$31"
                                        //   in Loop: Header=BB341_3 Depth=1
	tbnz	w0, #3, .LBB341_20
// %bb.19:                              // %"$33"
                                        //   in Loop: Header=BB341_3 Depth=1
	bl	evList
.LBB341_20:                             // %"$30"
                                        //   in Loop: Header=BB341_3 Depth=1
	ldr	x8, [x26]
	str	x8, [x27, :lo12:env+24]
	cmp	x26, x19
	b.eq	.LBB341_34
// %bb.21:                              // %"$36"
                                        //   in Loop: Header=BB341_3 Depth=1
	ldr	x26, [x26]
	cbnz	x26, .LBB341_3
	b	.LBB341_23
.LBB341_22:                             // %"$38"
                                        //   in Loop: Header=BB341_23 Depth=1
	ldp	w9, w8, [x25, #8]
	bfi	x9, x8, #32, #32
	ldp	w8, w10, [x25]
	stp	w8, w10, [x9]
	ldp	w25, w8, [x25, #16]
	bfi	x25, x8, #32, #32
.LBB341_23:                             // %"$37"
                                        // =>This Inner Loop Header: Depth=1
	cbnz	x25, .LBB341_22
// %bb.24:                              // %"$39"
	adrp	x8, env+8
	str	xzr, [x8, :lo12:env+8]
	ldr	x8, [x24, :lo12:env+72]
	cbz	x8, .LBB341_27
.LBB341_25:                             // %"$41"
                                        // =>This Inner Loop Header: Depth=1
	bl	popCtlFiles
	ldr	x8, [x24, :lo12:env+72]
	cbnz	x8, .LBB341_25
	b	.LBB341_27
.LBB341_26:                             // %"$44"
                                        //   in Loop: Header=BB341_27 Depth=1
	bl	popErrFiles
.LBB341_27:                             // %"$43"
                                        // =>This Inner Loop Header: Depth=1
	ldr	x8, [x23, :lo12:env+64]
	cbnz	x8, .LBB341_26
// %bb.28:                              // %"$45"
	ldr	x8, [x22, :lo12:env+56]
	adrp	x19, ($Stdout)
	ldr	x9, [x19, :lo12:($Stdout)]
	cmp	x8, x9
	b.eq	.LBB341_31
.LBB341_29:                             // %"$48"
                                        // =>This Inner Loop Header: Depth=1
	bl	popOutFiles
	ldr	x8, [x22, :lo12:env+56]
	ldr	x9, [x19, :lo12:($Stdout)]
	cmp	x8, x9
	b.ne	.LBB341_29
// %bb.30:                              // %"$50"
	bl	tosOutFile
.LBB341_31:                             // %"$47"
	ldr	x8, [x21, :lo12:env+48]
	adrp	x19, ($Stdin)
	ldr	x9, [x19, :lo12:($Stdin)]
	cmp	x8, x9
	b.eq	.LBB341_34
.LBB341_32:                             // %"$53"
                                        // =>This Inner Loop Header: Depth=1
	bl	popInFiles
	ldr	x8, [x21, :lo12:env+48]
	ldr	x9, [x19, :lo12:($Stdin)]
	cmp	x8, x9
	b.ne	.LBB341_32
// %bb.33:                              // %"$55"
	bl	tosInFile
.LBB341_34:                             // %"$35"
	ldp	x20, x19, [sp, #64]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #48]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #32]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #16]             // 16-byte Folded Reload
	ldp	x30, x27, [sp], #80             // 16-byte Folded Reload
	ret
.Lfunc_end341:
	.size	unwind, .Lfunc_end341-unwind
	.cfi_endproc
                                        // -- End function
	.globl	stop                            // -- Begin function stop
	.p2align	4
	.type	stop,@function
stop:                                   // @stop
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	wzr, wzr, [x0]
.LBB342_1:                              // %"$2"
                                        // =>This Inner Loop Header: Depth=1
	mov	x8, x0
	ldr	x0, [x0, #16]
	cbnz	x0, .LBB342_1
	b	.LBB342_3
.LBB342_2:                              // %"$6"
                                        //   in Loop: Header=BB342_3 Depth=1
	ldr	x8, [x8, #8]
	str	xzr, [x8, #16]
.LBB342_3:                              // %"$5"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w10, w9, [x8]
	bfi	x10, x9, #32, #32
	cbz	x10, .LBB342_2
// %bb.4:                               // %"$7"
	ret
.Lfunc_end342:
	.size	stop, .Lfunc_end342-stop
	.cfi_endproc
                                        // -- End function
	.globl	popCtlFiles                     // -- Begin function popCtlFiles
	.p2align	4
	.type	popCtlFiles,@function
popCtlFiles:                            // @popCtlFiles
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	adrp	x0, .L$44
	add	x0, x0, :lo12:.L$44
	bl	outString
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end343:
	.size	popCtlFiles, .Lfunc_end343-popCtlFiles
	.cfi_endproc
                                        // -- End function
	.globl	popErrFiles                     // -- Begin function popErrFiles
	.p2align	4
	.type	popErrFiles,@function
popErrFiles:                            // @popErrFiles
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	adrp	x0, .L$43
	add	x0, x0, :lo12:.L$43
	bl	outString
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end344:
	.size	popErrFiles, .Lfunc_end344-popErrFiles
	.cfi_endproc
                                        // -- End function
	.globl	popOutFiles                     // -- Begin function popOutFiles
	.p2align	4
	.type	popOutFiles,@function
popOutFiles:                            // @popOutFiles
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	adrp	x0, .L$41
	add	x0, x0, :lo12:.L$41
	bl	outString
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end345:
	.size	popOutFiles, .Lfunc_end345-popOutFiles
	.cfi_endproc
                                        // -- End function
	.globl	tosOutFile                      // -- Begin function tosOutFile
	.p2align	4
	.type	tosOutFile,@function
tosOutFile:                             // @tosOutFile
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	adrp	x0, .L$42
	add	x0, x0, :lo12:.L$42
	bl	outString
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end346:
	.size	tosOutFile, .Lfunc_end346-tosOutFile
	.cfi_endproc
                                        // -- End function
	.globl	popInFiles                      // -- Begin function popInFiles
	.p2align	4
	.type	popInFiles,@function
popInFiles:                             // @popInFiles
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	adrp	x0, .L$39
	add	x0, x0, :lo12:.L$39
	bl	outString
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end347:
	.size	popInFiles, .Lfunc_end347-popInFiles
	.cfi_endproc
                                        // -- End function
	.globl	tosInFile                       // -- Begin function tosInFile
	.p2align	4
	.type	tosInFile,@function
tosInFile:                              // @tosInFile
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	adrp	x0, .L$40
	add	x0, x0, :lo12:.L$40
	bl	outString
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end348:
	.size	tosInFile, .Lfunc_end348-tosInFile
	.cfi_endproc
                                        // -- End function
	.globl	memcpy2                         // -- Begin function memcpy2
	.p2align	4
	.type	memcpy2,@function
memcpy2:                                // @memcpy2
	.cfi_startproc
// %bb.0:                               // %"$1"
	mov	x8, xzr
	cmp	x2, x8
	b.eq	.LBB349_2
.LBB349_1:                              // %"$3"
                                        // =>This Inner Loop Header: Depth=1
	ldrb	w9, [x1, x8]
	strb	w9, [x0, x8]
	add	x8, x8, #1                      // =1
	cmp	x2, x8
	b.ne	.LBB349_1
.LBB349_2:                              // %"$4"
	ret
.Lfunc_end349:
	.size	memcpy2, .Lfunc_end349-memcpy2
	.cfi_endproc
                                        // -- End function
	.globl	xName                           // -- Begin function xName
	.p2align	4
	.type	xName,@function
xName:                                  // @xName
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	adrp	x9, SymTab+8
	add	x9, x9, :lo12:SymTab+8
	cmp	x1, x9
	b.ne	.LBB350_3
// %bb.1:
	mov	w0, #2
.LBB350_2:                              // %"$2"
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.LBB350_3:                              // %"$3"
	mov	x8, x0
	ldp	w0, w9, [x1, #-8]
	bfi	x0, x9, #32, #32
	tbnz	w0, #3, .LBB350_6
// %bb.4:                               // %"$7"
	tst	x0, #0x6
	b.ne	.LBB350_2
.LBB350_5:                              // %"$8"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w0, w8, [x0, #8]
	bfi	x0, x8, #32, #32
	tst	x0, #0x6
	b.eq	.LBB350_5
	b	.LBB350_2
.LBB350_6:                              // %"$6"
	mov	x0, x8
	bl	nameErr
.Lfunc_end350:
	.size	xName, .Lfunc_end350-xName
	.cfi_endproc
                                        // -- End function
	.globl	symByte                         // -- Begin function symByte
	.p2align	4
	.type	symByte,@function
symByte:                                // @symByte
	.cfi_startproc
// %bb.0:                               // %"$1"
	ldp	w8, w9, [x0]
	bfi	x8, x9, #32, #32
	cbnz	x8, .LBB351_7
// %bb.1:                               // %"$2"
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	cmp	x9, #2                          // =2
	b.ne	.LBB351_3
// %bb.2:                               // %"$6"
	mov	w0, wzr
	ret
.LBB351_3:                              // %"$5"
	tbz	w9, #1, .LBB351_5
// %bb.4:                               // %"$8"
	lsr	x8, x9, #4
	mov	w9, #2
	b	.LBB351_6
.LBB351_5:                              // %"$7"
	ldp	w8, w10, [x9, #-4]
	stp	w8, w10, [x0]
	bfi	x8, x10, #32, #32
	ldp	w9, w10, [x9, #4]
	bfi	x9, x10, #32, #32
.LBB351_6:                              // %"$4"
	lsr	x10, x9, #32
	stp	w9, w10, [x0, #8]
.LBB351_7:                              // %"$3"
	lsr	x9, x8, #8
	lsr	x10, x8, #40
	stp	w9, w10, [x0]
	mov	w0, w8
	ret
.Lfunc_end351:
	.size	symByte, .Lfunc_end351-symByte
	.cfi_endproc
                                        // -- End function
	.globl	preStr                          // -- Begin function preStr
	.p2align	4
	.type	preStr,@function
preStr:                                 // @preStr
	.cfi_startproc
// %bb.0:                               // %"$1"
	sub	sp, sp, #48                     // =48
	stp	x30, x21, [sp, #16]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #32]             // 16-byte Folded Spill
	.cfi_def_cfa_offset 48
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w30, -32
	mov	x19, x2
	mov	w20, w1
	stp	xzr, x0, [sp]
	mov	x0, sp
	bl	symByte
	mov	w21, w0
.LBB352_1:                              // %"$2"
                                        // =>This Inner Loop Header: Depth=1
	and	w8, w20, #0xff
	cmp	w8, w21, uxtb
	b.ne	.LBB352_4
// %bb.2:                               // %"$3"
                                        //   in Loop: Header=BB352_1 Depth=1
	mov	x0, sp
	bl	symByte
	tst	w0, #0xff
	b.eq	.LBB352_5
// %bb.3:                               // %"$6"
                                        //   in Loop: Header=BB352_1 Depth=1
	mov	w21, w0
	mov	x0, x19
	bl	symByte
	mov	w20, w0
	tst	w0, #0xff
	b.ne	.LBB352_1
.LBB352_4:
	mov	w0, wzr
	b	.LBB352_6
.LBB352_5:
	mov	w0, #1
.LBB352_6:                              // %"$4"
	ldp	x20, x19, [sp, #32]             // 16-byte Folded Reload
	ldp	x30, x21, [sp, #16]             // 16-byte Folded Reload
	add	sp, sp, #48                     // =48
	ret
.Lfunc_end352:
	.size	preStr, .Lfunc_end352-preStr
	.cfi_endproc
                                        // -- End function
	.globl	nameErr                         // -- Begin function nameErr
	.p2align	4
	.type	nameErr,@function
nameErr:                                // @nameErr
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	adrp	x2, .L$14
	add	x2, x2, :lo12:.L$14
	mov	x3, xzr
	bl	err
.Lfunc_end353:
	.size	nameErr, .Lfunc_end353-nameErr
	.cfi_endproc
                                        // -- End function
	.globl	byteSym                         // -- Begin function byteSym
	.p2align	4
	.type	byteSym,@function
byteSym:                                // @byteSym
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-32]!                // 8-byte Folded Spill
	stp	x20, x19, [sp, #16]             // 16-byte Folded Spill
	.cfi_def_cfa_offset 32
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w30, -32
	mov	x19, x1
                                        // kill: def $w0 killed $w0 def $x0
	ldp	w8, w9, [x1]
	bfi	x8, x9, #32, #32
	ldp	w9, w10, [x1, #16]
	bfi	x9, x10, #32, #32
	tbz	w9, #1, .LBB354_3
// %bb.1:                               // %"$2"
	cmp	x8, #59                         // =59
	b.hi	.LBB354_5
// %bb.2:                               // %"$5"
	and	x10, x0, #0xff
	lsl	x10, x10, x8
	orr	x9, x9, x10
	lsr	x10, x9, #32
	stp	w9, w10, [x19, #16]
	add	x8, x8, #8                      // =8
	b	.LBB354_7
.LBB354_3:                              // %"$3"
	ldp	w20, w9, [x19, #8]
	bfi	x20, x9, #32, #32
	ldp	w9, w10, [x20, #4]
	bfi	x9, x10, #32, #32
	cmp	x8, #59                         // =59
	b.hi	.LBB354_6
// %bb.4:                               // %"$8"
	and	x10, x0, #0xff
	lsl	x10, x10, x8
	orr	x9, x9, x10
	lsr	x10, x9, #32
	stp	w9, w10, [x20, #4]
	add	x8, x8, #8                      // =8
	b	.LBB354_7
.LBB354_5:                              // %"$6"
	lsr	x8, x9, #4
	orr	x0, x8, x0, lsl #56
	bl	boxNum
	lsr	x9, x0, #32
	stp	w0, w9, [x19, #8]
	mov	w8, #4
	stp	w0, w9, [x19, #16]
	b	.LBB354_7
.LBB354_6:                              // %"$9"
	lsr	x8, x9, #4
	orr	x0, x8, x0, lsl #56
	bl	boxNum
	lsr	x9, x0, #32
	stp	w0, w9, [x20, #4]
	mov	w8, #4
	stp	w0, w9, [x19, #8]
.LBB354_7:                              // %"$4"
	lsr	x9, x8, #32
	stp	w8, w9, [x19]
	ldp	x20, x19, [sp, #16]             // 16-byte Folded Reload
	ldr	x30, [sp], #32                  // 8-byte Folded Reload
	ret
.Lfunc_end354:
	.size	byteSym, .Lfunc_end354-byteSym
	.cfi_endproc
                                        // -- End function
	.globl	consStr                         // -- Begin function consStr
	.p2align	4
	.type	consStr,@function
consStr:                                // @consStr
	.cfi_startproc
// %bb.0:                               // %"$1"
	cmp	x0, #2                          // =2
	b.ne	.LBB355_2
// %bb.1:                               // %"$4"
	adrp	x0, SymTab+8
	add	x0, x0, :lo12:SymTab+8
	ret
.LBB355_2:                              // %"$3"
	mov	x1, xzr
	b	consSym
.Lfunc_end355:
	.size	consStr, .Lfunc_end355-consStr
	.cfi_endproc
                                        // -- End function
	.globl	consSym                         // -- Begin function consSym
	.p2align	4
	.type	consSym,@function
consSym:                                // @consSym
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-64]!           // 16-byte Folded Spill
	stp	x24, x23, [sp, #16]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #32]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #48]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 64
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w30, -56
	.cfi_offset w29, -64
	mov	x19, x1
	mov	x20, x0
	adrp	x22, ($Avail)
	ldr	x8, [x22, :lo12:($Avail)]
	lsr	x21, x0, #32
	cbnz	x8, .LBB356_5
// %bb.1:                               // %"$2"
	adrp	x23, env
	cbz	x19, .LBB356_3
// %bb.2:                               // %"$4"
	ldr	x9, [x23, :lo12:env]
	mov	x10, sp
	sub	x8, x10, #16                    // =16
	mov	sp, x8
	stp	w20, w21, [x10, #-16]
	lsr	x11, x9, #32
	stp	w9, w11, [x10, #-8]
	sub	x9, sp, #16                     // =16
	mov	sp, x9
	mov	x10, x19
	mov	x24, x8
	b	.LBB356_4
.LBB356_3:                              // %"$5"
	ldr	x8, [x23, :lo12:env]
	sub	x9, sp, #16                     // =16
	mov	sp, x9
	mov	x10, x20
	mov	x24, x9
.LBB356_4:                              // %"$6"
	lsr	x11, x10, #32
	lsr	x12, x8, #32
	stp	w10, w11, [x9]
	stp	w8, w12, [x9, #8]
	str	x9, [x23, :lo12:env]
	bl	gc
	ldp	w9, w8, [x24, #8]
	bfi	x9, x8, #32, #32
	str	x9, [x23, :lo12:env]
	ldr	x8, [x22, :lo12:($Avail)]
.LBB356_5:                              // %"$3"
	ldp	w10, w9, [x8]
	bfi	x10, x9, #32, #32
	str	x10, [x22, :lo12:($Avail)]
	orr	x0, x8, #0x8
	cmp	x19, #0                         // =0
	stp	w20, w21, [x8]
	csel	x8, x19, x0, ne
	lsr	x9, x8, #32
	stp	w8, w9, [x0]
	mov	sp, x29
	ldp	x20, x19, [sp, #48]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #32]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #64             // 16-byte Folded Reload
	ret
.Lfunc_end356:
	.size	consSym, .Lfunc_end356-consSym
	.cfi_endproc
                                        // -- End function
	.globl	boxNum                          // -- Begin function boxNum
	.p2align	4
	.type	boxNum,@function
boxNum:                                 // @boxNum
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-32]!                // 8-byte Folded Spill
	stp	x20, x19, [sp, #16]             // 16-byte Folded Spill
	.cfi_def_cfa_offset 32
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w30, -32
	mov	x19, x0
	adrp	x20, ($Avail)
	ldr	x8, [x20, :lo12:($Avail)]
	cbnz	x8, .LBB357_2
// %bb.1:                               // %"$2"
	bl	gc
	ldr	x8, [x20, :lo12:($Avail)]
.LBB357_2:                              // %"$3"
	mov	x0, x8
	ldr	w9, [x0, #4]!
	ldr	w10, [x8]
	bfi	x10, x9, #32, #32
	str	x10, [x20, :lo12:($Avail)]
	lsr	x9, x19, #32
	str	w9, [x0]
	str	w19, [x8]
	mov	w9, #2
	stp	w9, wzr, [x8, #8]
	ldp	x20, x19, [sp, #16]             // 16-byte Folded Reload
	ldr	x30, [sp], #32                  // 8-byte Folded Reload
	ret
.Lfunc_end357:
	.size	boxNum, .Lfunc_end357-boxNum
	.cfi_endproc
                                        // -- End function
	.globl	varErr                          // -- Begin function varErr
	.p2align	4
	.type	varErr,@function
varErr:                                 // @varErr
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	adrp	x2, .L$18
	add	x2, x2, :lo12:.L$18
	mov	x3, xzr
	bl	err
.Lfunc_end358:
	.size	varErr, .Lfunc_end358-varErr
	.cfi_endproc
                                        // -- End function
	.globl	protErr                         // -- Begin function protErr
	.p2align	4
	.type	protErr,@function
protErr:                                // @protErr
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	adrp	x2, .L$20
	add	x2, x2, :lo12:.L$20
	mov	x3, xzr
	bl	err
.Lfunc_end359:
	.size	protErr, .Lfunc_end359-protErr
	.cfi_endproc
                                        // -- End function
	.globl	execAt                          // -- Begin function execAt
	.p2align	4
	.type	execAt,@function
execAt:                                 // @execAt
	.cfi_startproc
// %bb.0:                               // %"$1"
	sub	sp, sp, #64                     // =64
	stp	x22, x21, [sp, #32]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #48]             // 16-byte Folded Spill
	.cfi_def_cfa_offset 64
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w30, -48
	mov	x19, x0
	adrp	x21, SymTab+376
	adrp	x22, env
	ldr	x20, [x21, :lo12:SymTab+376]
	ldr	x8, [x22, :lo12:env]
	str	x20, [sp]
	stp	x8, x30, [sp, #8]               // 8-byte Folded Spill
	mov	x8, sp
	str	x8, [x22, :lo12:env]
	b	.LBB360_2
.LBB360_1:                              // %"$4"
                                        //   in Loop: Header=BB360_2 Depth=1
	tst	x19, #0xf
	b.ne	.LBB360_4
.LBB360_2:                              // %"$2"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w0, w8, [x19]
	bfi	x0, x8, #32, #32
	ldp	w19, w8, [x19, #8]
	bfi	x19, x8, #32, #32
	tst	x0, #0xf
	b.ne	.LBB360_1
// %bb.3:                               // %"$3"
                                        //   in Loop: Header=BB360_2 Depth=1
	bl	evList
	b	.LBB360_1
.LBB360_4:                              // %"$6"
	str	x20, [x21, :lo12:SymTab+376]
	ldp	x8, x30, [sp, #8]               // 8-byte Folded Reload
	str	x8, [x22, :lo12:env]
	mov	x0, x20
	ldp	x20, x19, [sp, #48]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #32]             // 16-byte Folded Reload
	add	sp, sp, #64                     // =64
	ret
.Lfunc_end360:
	.size	execAt, .Lfunc_end360-execAt
	.cfi_endproc
                                        // -- End function
	.globl	loadKern                        // -- Begin function loadKern
	.p2align	4
	.type	loadKern,@function
loadKern:                               // @loadKern
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-96]!           // 16-byte Folded Spill
	stp	x28, x27, [sp, #16]             // 16-byte Folded Spill
	stp	x26, x25, [sp, #32]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #48]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #64]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #80]             // 16-byte Folded Spill
	mov	x29, sp
	sub	sp, sp, #144                    // =144
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	adrp	x20, env
	add	x20, x20, :lo12:env
	adrp	x23, SymTab+8
	add	x23, x23, :lo12:SymTab+8
	ldr	x19, [x20, #88]
	ldr	x8, [x20]
	stp	x19, x8, [x29, #-16]
	sub	x8, x29, #16                    // =16
	ldp	x9, x10, [x23, #104]
	stp	x10, x9, [x29, #-128]           // 16-byte Folded Spill
	stp	x9, x8, [x29, #-32]
	sub	x8, x29, #32                    // =32
	stp	x10, x8, [x29, #-48]
	adrp	x24, gcData
	add	x24, x24, :lo12:gcData
	sub	x8, x29, #48                    // =48
	ldp	x9, x26, [x24]
	stur	x9, [x29, #-136]                // 8-byte Folded Spill
	stp	x9, x8, [x29, #-64]
	sub	x8, x29, #64                    // =64
	stp	x26, x8, [x29, #-80]
	sub	x8, x29, #80                    // =80
	str	x8, [x20]
	mov	w9, #10
	stp	x9, x8, [x29, #-96]
	sub	x8, x29, #96                    // =96
	str	x8, [x20]
	stp	x9, x8, [x29, #-112]
	sub	x8, x29, #112                   // =112
	str	x8, [x20]
	stp	x23, x23, [x23, #104]
	str	x23, [x24, #8]
	ldr	x8, [x23, #608]
	sub	x8, x8, #8                      // =8
	str	x23, [x24]
.LBB361_1:                              // %"$2"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w8, w9, [x8]
	bfi	x8, x9, #32, #32
	tst	x8, #0x6
	b.ne	.LBB361_3
// %bb.2:                               // %"$3"
                                        //   in Loop: Header=BB361_1 Depth=1
	add	x8, x8, #8                      // =8
	b	.LBB361_1
.LBB361_3:                              // %"$4"
	adrp	x9, ($Chr)
	ldr	w9, [x9, :lo12:($Chr)]
	stur	w9, [x29, #-140]                // 4-byte Folded Spill
	adrp	x27, ($Put)
	ldr	x21, [x27, :lo12:($Put)]
	adrp	x22, ($Get)
	adrp	x9, putChr
	add	x9, x9, :lo12:putChr
	ldr	x25, [x22, :lo12:($Get)]
	adrp	x10, getChr
	add	x10, x10, :lo12:getChr
	ldr	x28, [x20, #80]
	str	x9, [x27, :lo12:($Put)]
	str	x10, [x22, :lo12:($Get)]
	ldr	x9, [x20]
	mov	x10, sp
	sub	x11, x10, #16                   // =16
	mov	sp, x11
	lsr	x12, x8, #32
	lsr	x13, x9, #32
	stp	w8, w12, [x10, #-16]
	stp	w9, w13, [x10, #-8]
	str	x11, [x20]
	mov	x9, sp
	sub	x10, x9, #32                    // =32
	mov	sp, x10
	stp	wzr, wzr, [x9, #-32]
	stp	w8, w12, [x9, #-24]
	stp	wzr, wzr, [x9, #-16]
	str	x10, [x20, #80]
.LBB361_4:                              // %"$5"
                                        // =>This Inner Loop Header: Depth=1
	mov	w0, wzr
	bl	read1
	cmp	x0, x23
	b.eq	.LBB361_8
// %bb.5:                               // %"$6"
                                        //   in Loop: Header=BB361_4 Depth=1
	stur	x0, [x29, #-96]
	tst	x0, #0x6
	b.ne	.LBB361_4
// %bb.6:                               // %"$9"
                                        //   in Loop: Header=BB361_4 Depth=1
	tbnz	w0, #3, .LBB361_4
// %bb.7:                               // %"$11"
                                        //   in Loop: Header=BB361_4 Depth=1
	bl	evList
	b	.LBB361_4
.LBB361_8:                              // %"$7"
	str	x21, [x27, :lo12:($Put)]
	str	x25, [x22, :lo12:($Get)]
	adrp	x8, ($Chr)
	ldur	w9, [x29, #-140]                // 4-byte Folded Reload
	str	w9, [x8, :lo12:($Chr)]
	ldur	x8, [x29, #-136]                // 8-byte Folded Reload
	stp	x8, x26, [x24]
	adrp	x8, SymTab+112
	add	x8, x8, :lo12:SymTab+112
	ldur	x10, [x29, #-128]               // 8-byte Folded Reload
	ldur	x9, [x29, #-120]                // 8-byte Folded Reload
	stp	x9, x10, [x8]
	stp	x28, x19, [x20, #80]
	ldur	x8, [x29, #-8]
	str	x8, [x20]
	mov	x0, x19
	mov	sp, x29
	ldp	x20, x19, [sp, #80]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #64]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #48]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #32]             // 16-byte Folded Reload
	ldp	x28, x27, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #96             // 16-byte Folded Reload
	ret
.Lfunc_end361:
	.size	loadKern, .Lfunc_end361-loadKern
	.cfi_endproc
                                        // -- End function
	.globl	putChr                          // -- Begin function putChr
	.p2align	4
	.type	putChr,@function
putChr:                                 // @putChr
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
                                        // kill: def $w0 killed $w0 def $x0
	adrp	x8, SymTab+8
	add	x8, x8, :lo12:SymTab+8
	ldr	x9, [x8, #752]
	cmp	x9, x8
	b.ne	.LBB362_2
// %bb.1:                               // %"$2"
                                        // kill: def $w0 killed $w0 killed $x0
	bl	_putUART1
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.LBB362_2:                              // %"$3"
	and	x8, x0, #0xff
	mov	w9, #2
	bfi	x9, x8, #4, #8
	adrp	x8, SymTab+760
	add	x8, x8, :lo12:SymTab+760
	str	x9, [x8, #16]
	ldr	x0, [x8]
	tst	x0, #0x6
	b.eq	.LBB362_4
// %bb.3:                               // %"$4"
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.LBB362_4:                              // %"$6"
	tbz	w0, #3, .LBB362_6
// %bb.5:                               // %"$9"
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.LBB362_6:                              // %"$8"
	bl	evList
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end362:
	.size	putChr, .Lfunc_end362-putChr
	.cfi_endproc
                                        // -- End function
	.globl	getChr                          // -- Begin function getChr
	.p2align	4
	.type	getChr,@function
getChr:                                 // @getChr
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	adrp	x8, SymTab+8
	add	x8, x8, :lo12:SymTab+8
	ldr	x9, [x8, #784]
	cmp	x9, x8
	b.ne	.LBB363_2
// %bb.1:                               // %"$2"
	bl	getParse
                                        // kill: def $w0 killed $w0 def $x0
                                        // kill: def $w0 killed $w0 killed $x0
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.LBB363_2:                              // %"$3"
	adrp	x8, SymTab+792
	ldr	x0, [x8, :lo12:SymTab+792]
	tst	x0, #0x6
	b.eq	.LBB363_5
// %bb.3:                               // %"$5"
	tbz	w0, #1, .LBB363_8
.LBB363_4:                              // %"$10"
	lsr	x0, x0, #4
	b	.LBB363_9
.LBB363_5:                              // %"$6"
	tbz	w0, #3, .LBB363_7
// %bb.6:                               // %"$9"
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	tbz	w0, #1, .LBB363_8
	b	.LBB363_4
.LBB363_7:                              // %"$8"
	bl	evList
	tbnz	w0, #1, .LBB363_4
.LBB363_8:                              // %"$11"
	ldp	w0, w8, [x0, #-4]
	bfi	x0, x8, #32, #32
.LBB363_9:                              // %"$12"
	adrp	x8, ($Chr)
	str	w0, [x8, :lo12:($Chr)]
                                        // kill: def $w0 killed $w0 killed $x0
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end363:
	.size	getChr, .Lfunc_end363-getChr
	.cfi_endproc
                                        // -- End function
	.globl	read1                           // -- Begin function read1
	.p2align	4
	.type	read1,@function
read1:                                  // @read1
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-32]!                // 8-byte Folded Spill
	stp	x20, x19, [sp, #16]             // 16-byte Folded Spill
	.cfi_def_cfa_offset 32
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w30, -32
	mov	w19, w0
	adrp	x20, ($Chr)
	ldr	w8, [x20, :lo12:($Chr)]
	cbnz	w8, .LBB364_2
// %bb.1:                               // %"$2"
	adrp	x8, ($Get)
	ldr	x8, [x8, :lo12:($Get)]
	blr	x8
.LBB364_2:                              // %"$3"
	ldr	w8, [x20, :lo12:($Chr)]
	cmp	w19, w8
	b.ne	.LBB364_4
// %bb.3:
	adrp	x0, SymTab+8
	add	x0, x0, :lo12:SymTab+8
	b	.LBB364_5
.LBB364_4:                              // %"$5"
	mov	w0, #1
	bl	read0
.LBB364_5:                              // %"$6"
	ldp	x20, x19, [sp, #16]             // 16-byte Folded Reload
	ldr	x30, [sp], #32                  // 8-byte Folded Reload
	ret
.Lfunc_end364:
	.size	read1, .Lfunc_end364-read1
	.cfi_endproc
                                        // -- End function
	.globl	read0                           // -- Begin function read0
	.p2align	4
	.type	read0,@function
read0:                                  // @read0
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-64]!           // 16-byte Folded Spill
	str	x23, [sp, #16]                  // 8-byte Folded Spill
	stp	x22, x21, [sp, #32]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #48]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 64
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -48
	.cfi_offset w30, -56
	.cfi_offset w29, -64
	mov	w20, w0
	bl	skip
	tbnz	w0, #31, .LBB365_4
// %bb.1:                               // %"$3"
	cmp	w0, #40                         // =40
	b.ne	.LBB365_6
// %bb.2:                               // %"$8"
	bl	rdList
	mov	x19, x0
	tbz	w20, #0, .LBB365_38
// %bb.3:                               // %"$10"
	adrp	x8, ($Chr)
	ldr	w8, [x8, :lo12:($Chr)]
	cmp	w8, #93                         // =93
	b.eq	.LBB365_8
	b	.LBB365_38
.LBB365_4:                              // %"$4"
	tbz	w20, #0, .LBB365_31
.LBB365_5:
	adrp	x19, SymTab+8
	add	x19, x19, :lo12:SymTab+8
	b	.LBB365_38
.LBB365_6:                              // %"$7"
	cmp	w0, #91                         // =91
	b.ne	.LBB365_9
// %bb.7:                               // %"$13"
	bl	rdList
	mov	x19, x0
	adrp	x8, ($Chr)
	ldr	w8, [x8, :lo12:($Chr)]
	cmp	w8, #93                         // =93
	b.ne	.LBB365_52
.LBB365_8:                              // %"$11"
	adrp	x8, ($Get)
	ldr	x8, [x8, :lo12:($Get)]
	blr	x8
	b	.LBB365_38
.LBB365_9:                              // %"$12"
	cmp	w0, #39                         // =39
	b.ne	.LBB365_12
// %bb.10:                              // %"$17"
	adrp	x8, ($Get)
	ldr	x8, [x8, :lo12:($Get)]
	blr	x8
	and	w0, w20, #0x1
	bl	read0
	mov	x1, x0
	adrp	x0, SymTab+200
	add	x0, x0, :lo12:SymTab+200
	bl	cons
.LBB365_11:                             // %"$2"
	mov	x19, x0
	b	.LBB365_38
.LBB365_12:                             // %"$16"
	cmp	w0, #44                         // =44
	b.ne	.LBB365_16
// %bb.13:                              // %"$19"
	adrp	x8, ($Get)
	ldr	x8, [x8, :lo12:($Get)]
	blr	x8
	and	w0, w20, #0x1
	bl	read0
	mov	x19, x0
	adrp	x8, SymTab+216
	add	x8, x8, :lo12:SymTab+216
	ldr	x9, [x8, #368]
	cmp	x9, x8
	b.eq	.LBB365_38
// %bb.14:                              // %"$21"
	adrp	x20, env
	ldr	x8, [x20, :lo12:env]
	mov	x9, sp
	sub	x21, x9, #16                    // =16
	mov	sp, x21
	lsr	x10, x19, #32
	lsr	x11, x8, #32
	stp	w19, w10, [x9, #-16]
	stp	w8, w11, [x9, #-8]
	str	x21, [x20, :lo12:env]
	adrp	x0, SymTab+584
	add	x0, x0, :lo12:SymTab+584
	mov	x1, x19
	bl	idxPut
	tst	x0, #0xf
	b.ne	.LBB365_37
// %bb.15:                              // %"$23"
	ldp	w19, w8, [x0]
	b	.LBB365_20
.LBB365_16:                             // %"$18"
	cmp	w0, #96                         // =96
	b.ne	.LBB365_21
// %bb.17:                              // %"$27"
	adrp	x8, ($Get)
	ldr	x8, [x8, :lo12:($Get)]
	blr	x8
	and	w0, w20, #0x1
	bl	read0
	mov	x19, x0
	adrp	x20, env
	ldr	x8, [x20, :lo12:env]
	mov	x9, sp
	sub	x21, x9, #16                    // =16
	mov	sp, x21
	lsr	x10, x0, #32
	lsr	x11, x8, #32
	stp	w19, w10, [x9, #-16]
	stp	w8, w11, [x9, #-8]
	tst	x0, #0x6
	str	x21, [x20, :lo12:env]
	b.ne	.LBB365_37
// %bb.18:                              // %"$29"
	tbz	w19, #3, .LBB365_36
// %bb.19:                              // %"$32"
	ldp	w19, w8, [x19]
.LBB365_20:                             // %"$25"
	bfi	x19, x8, #32, #32
	b	.LBB365_37
.LBB365_21:                             // %"$26"
	cmp	w0, #34                         // =34
	b.ne	.LBB365_24
// %bb.22:                              // %"$34"
	adrp	x20, ($Get)
	ldr	x8, [x20, :lo12:($Get)]
	blr	x8
	cmp	w0, #34                         // =34
	b.ne	.LBB365_27
// %bb.23:                              // %"$35"
	ldr	x8, [x20, :lo12:($Get)]
	blr	x8
	b	.LBB365_5
.LBB365_24:                             // %"$33"
	cmp	w0, #123                        // =123
	b.ne	.LBB365_32
// %bb.25:                              // %"$46"
	adrp	x21, ($Get)
	ldr	x8, [x21, :lo12:($Get)]
	blr	x8
	cmp	w0, #125                        // =125
	b.ne	.LBB365_39
// %bb.26:                              // %"$47"
	adrp	x1, SymTab+8
	add	x1, x1, :lo12:SymTab+8
	mov	w0, #2
	bl	consSym
	b	.LBB365_46
.LBB365_27:                             // %"$36"
	bl	testEsc
	tbz	w0, #0, .LBB365_31
// %bb.28:                              // %"$39"
	mov	x8, sp
	sub	x19, x8, #32                    // =32
	mov	sp, x19
	mov	w9, #4
	stp	w9, wzr, [x8, #-32]
	mov	w9, #2
	mov	x22, x19
	str	w9, [x22, #16]!
	stur	wzr, [x8, #-12]
	adrp	x21, env
	ldr	x9, [x21, :lo12:env]
	lsr	x10, x9, #32
	stp	w9, w10, [x8, #-8]
	str	x22, [x21, :lo12:env]
	adrp	x23, ($Chr)
.LBB365_29:                             // %"$40"
                                        // =>This Inner Loop Header: Depth=1
	ldr	w0, [x23, :lo12:($Chr)]
	mov	x1, x19
	bl	charSym
	ldr	x8, [x20, :lo12:($Get)]
	blr	x8
	cmp	w0, #34                         // =34
	b.eq	.LBB365_35
// %bb.30:                              // %"$41"
                                        //   in Loop: Header=BB365_29 Depth=1
	bl	testEsc
	tbnz	w0, #0, .LBB365_29
.LBB365_31:                             // %"$5"
	bl	eofErr
.LBB365_32:                             // %"$45"
	cmp	w0, #41                         // =41
	b.eq	.LBB365_34
// %bb.33:                              // %"$63"
	cmp	w0, #93                         // =93
	b.ne	.LBB365_47
.LBB365_34:
	mov	w8, #1
	b	.LBB365_48
.LBB365_35:                             // %"$42"
	ldr	x8, [x20, :lo12:($Get)]
	blr	x8
	ldp	w2, w8, [x22]
	bfi	x2, x8, #32, #32
	adrp	x3, gcData
	add	x3, x3, :lo12:gcData
	adrp	x4, SymTab+8
	add	x4, x4, :lo12:SymTab+8
	mov	x0, xzr
	mov	x1, xzr
	mov	w5, wzr
	bl	intern
	mov	x19, x0
	ldp	w9, w8, [x22, #8]
	bfi	x9, x8, #32, #32
	str	x9, [x21, :lo12:env]
	b	.LBB365_38
.LBB365_36:                             // %"$31"
	mov	x0, x19
	bl	evList
	mov	x19, x0
.LBB365_37:                             // %"$25"
	ldp	w9, w8, [x21, #8]
	bfi	x9, x8, #32, #32
	str	x9, [x20, :lo12:env]
.LBB365_38:                             // %"$2"
	mov	x0, x19
	mov	sp, x29
	ldp	x20, x19, [sp, #48]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #32]             // 16-byte Folded Reload
	ldr	x23, [sp, #16]                  // 8-byte Folded Reload
	ldp	x29, x30, [sp], #64             // 16-byte Folded Reload
	ret
.LBB365_39:                             // %"$50.preheader"
	mov	w19, wzr
	cmp	w0, #63                         // =63
	b.le	.LBB365_42
.LBB365_40:                             // %"$51"
                                        // =>This Inner Loop Header: Depth=1
	cmp	w0, #80                         // =80
	b.ge	.LBB365_53
// %bb.41:                              // %"$54"
                                        //   in Loop: Header=BB365_40 Depth=1
	sub	w8, w0, #64                     // =64
	orr	w19, w8, w19, lsl #4
	ldr	x8, [x21, :lo12:($Get)]
	blr	x8
	cmp	w0, #63                         // =63
	b.gt	.LBB365_40
.LBB365_42:                             // %"$55.preheader"
	mov	x20, xzr
.LBB365_43:                             // %"$55"
                                        // =>This Inner Loop Header: Depth=1
	cmp	w0, #56                         // =56
	cset	w9, lt
	subs	w8, w0, #48                     // =48
	csel	w9, wzr, w9, lt
	tbz	w9, #0, .LBB365_53
// %bb.44:                              // %"$59"
                                        //   in Loop: Header=BB365_43 Depth=1
	sxtw	x8, w8
	orr	x20, x8, x20, lsl #3
	ldr	x8, [x21, :lo12:($Get)]
	blr	x8
	cmp	w0, #125                        // =125
	b.ne	.LBB365_43
// %bb.45:                              // %"$61"
	mov	w0, w19
	mov	x1, x20
	bl	extNm
	bl	extern
.LBB365_46:                             // %"$49"
	mov	x19, x0
	ldr	x8, [x21, :lo12:($Get)]
	blr	x8
	b	.LBB365_38
.LBB365_47:                             // %"$64"
	cmp	w0, #126                        // =126
	cset	w8, eq
.LBB365_48:                             // %"$62"
	cbnz	w8, .LBB365_53
// %bb.49:                              // %"$65"
	cmp	w0, #92                         // =92
	adrp	x20, ($Get)
	b.ne	.LBB365_51
// %bb.50:                              // %"$67"
	ldr	x8, [x20, :lo12:($Get)]
	blr	x8
.LBB365_51:                             // %"$68"
	adrp	x8, ($Chr)
	ldr	w19, [x8, :lo12:($Chr)]
	ldr	x8, [x20, :lo12:($Get)]
	blr	x8
	mov	w0, w19
	bl	rdAtom
	b	.LBB365_11
.LBB365_52:                             // %"$14"
	adrp	x2, .L$46
	add	x2, x2, :lo12:.L$46
	mov	x0, xzr
	mov	x1, x19
	mov	x3, xzr
	bl	err
.LBB365_53:                             // %"$53"
	bl	badInput
.Lfunc_end365:
	.size	read0, .Lfunc_end365-read0
	.cfi_endproc
                                        // -- End function
	.globl	skip                            // -- Begin function skip
	.p2align	4
	.type	skip,@function
skip:                                   // @skip
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-32]!                // 8-byte Folded Spill
	stp	x20, x19, [sp, #16]             // 16-byte Folded Spill
	.cfi_def_cfa_offset 32
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w30, -32
	adrp	x19, ($Chr)
	adrp	x20, ($Get)
	ldr	w0, [x19, :lo12:($Chr)]
	tbnz	w0, #31, .LBB366_5
.LBB366_1:                              // %"$5"
                                        // =>This Inner Loop Header: Depth=1
	cmp	w0, #32                         // =32
	b.gt	.LBB366_3
// %bb.2:                               // %"$6"
                                        //   in Loop: Header=BB366_1 Depth=1
	ldr	x8, [x20, :lo12:($Get)]
	blr	x8
	tbz	w0, #31, .LBB366_1
	b	.LBB366_5
.LBB366_3:                              // %"$7"
                                        //   in Loop: Header=BB366_1 Depth=1
	cmp	w0, #35                         // =35
	b.ne	.LBB366_5
// %bb.4:                               // %"$11"
                                        //   in Loop: Header=BB366_1 Depth=1
	bl	comment
	ldr	w0, [x19, :lo12:($Chr)]
	tbz	w0, #31, .LBB366_1
.LBB366_5:                              // %"$3"
	ldp	x20, x19, [sp, #16]             // 16-byte Folded Reload
	ldr	x30, [sp], #32                  // 8-byte Folded Reload
	ret
.Lfunc_end366:
	.size	skip, .Lfunc_end366-skip
	.cfi_endproc
                                        // -- End function
	.globl	eofErr                          // -- Begin function eofErr
	.p2align	4
	.type	eofErr,@function
eofErr:                                 // @eofErr
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	adrp	x2, .L$35
	add	x2, x2, :lo12:.L$35
	mov	x0, xzr
	mov	x1, xzr
	mov	x3, xzr
	bl	err
.Lfunc_end367:
	.size	eofErr, .Lfunc_end367-eofErr
	.cfi_endproc
                                        // -- End function
	.globl	rdList                          // -- Begin function rdList
	.p2align	4
	.type	rdList,@function
rdList:                                 // @rdList
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-48]!           // 16-byte Folded Spill
	stp	x22, x21, [sp, #16]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #32]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 48
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w30, -40
	.cfi_offset w29, -48
	mov	x8, sp
	adrp	x9, ($StkLimit)
	ldr	x9, [x9, :lo12:($StkLimit)]
	cmp	x9, x8
	b.hi	.LBB368_18
// %bb.1:                               // %"$3"
	adrp	x21, ($Get)
	ldr	x8, [x21, :lo12:($Get)]
	blr	x8
	adrp	x20, env
	b	.LBB368_4
.LBB368_2:                              // %"$15"
                                        //   in Loop: Header=BB368_4 Depth=1
	mov	x0, x19
	bl	evList
	mov	x19, x0
.LBB368_3:                              // %"$12"
                                        //   in Loop: Header=BB368_4 Depth=1
	ldp	w9, w8, [x22, #8]
	bfi	x9, x8, #32, #32
	str	x9, [x20, :lo12:env]
	tst	x19, #0xf
	b.eq	.LBB368_12
.LBB368_4:                              // %"$4"
                                        // =>This Inner Loop Header: Depth=1
	bl	skip
	cmp	w0, #126                        // =126
	b.ne	.LBB368_8
// %bb.5:                               // %"$10"
                                        //   in Loop: Header=BB368_4 Depth=1
	ldr	x8, [x21, :lo12:($Get)]
	blr	x8
	mov	w0, wzr
	bl	read0
	mov	x19, x0
	ldr	x8, [x20, :lo12:env]
	mov	x9, sp
	sub	x22, x9, #16                    // =16
	mov	sp, x22
	lsr	x10, x0, #32
	lsr	x11, x8, #32
	stp	w19, w10, [x9, #-16]
	stp	w8, w11, [x9, #-8]
	tst	x0, #0x6
	str	x22, [x20, :lo12:env]
	b.ne	.LBB368_3
// %bb.6:                               // %"$13"
                                        //   in Loop: Header=BB368_4 Depth=1
	tbz	w19, #3, .LBB368_2
// %bb.7:                               // %"$16"
                                        //   in Loop: Header=BB368_4 Depth=1
	ldp	w19, w8, [x19]
	bfi	x19, x8, #32, #32
	b	.LBB368_3
.LBB368_8:                              // %"$4"
	cmp	w0, #93                         // =93
	b.eq	.LBB368_11
// %bb.9:                               // %"$4"
	cmp	w0, #41                         // =41
	b.ne	.LBB368_15
// %bb.10:                              // %"$7"
	ldr	x8, [x21, :lo12:($Get)]
	blr	x8
.LBB368_11:                             // %"$6.loopexit"
	adrp	x19, SymTab+8
	add	x19, x19, :lo12:SymTab+8
	b	.LBB368_17
.LBB368_12:                             // %"$18"
	ldr	x8, [x20, :lo12:env]
	mov	x9, sp
	sub	x21, x9, #16                    // =16
	mov	sp, x21
	lsr	x10, x19, #32
	lsr	x11, x8, #32
	stp	w19, w10, [x9, #-16]
	stp	w8, w11, [x9, #-8]
	mov	x8, x19
	str	x21, [x20, :lo12:env]
.LBB368_13:                             // %"$19"
                                        // =>This Inner Loop Header: Depth=1
	mov	x1, x8
	ldp	w8, w9, [x8, #8]
	bfi	x8, x9, #32, #32
	tst	x8, #0xf
	b.eq	.LBB368_13
// %bb.14:                              // %"$21"
	mov	x0, x19
	bl	rdl
	ldp	w9, w8, [x21, #8]
	b	.LBB368_16
.LBB368_15:                             // %"$11"
	mov	w0, wzr
	bl	read0
	adrp	x1, SymTab+8
	add	x1, x1, :lo12:SymTab+8
	bl	cons
	mov	x19, x0
	ldr	x8, [x20, :lo12:env]
	mov	x9, sp
	sub	x10, x9, #16                    // =16
	mov	sp, x10
	lsr	x11, x0, #32
	mov	x21, x10
	stp	w19, w11, [x9, #-16]
	str	w8, [x21, #8]!
	lsr	x8, x8, #32
	str	w8, [x21, #4]
	str	x10, [x20, :lo12:env]
	mov	x1, x0
	bl	rdl
	ldp	w9, w8, [x21]
.LBB368_16:                             // %"$6"
	bfi	x9, x8, #32, #32
	str	x9, [x20, :lo12:env]
.LBB368_17:                             // %"$6"
	mov	x0, x19
	mov	sp, x29
	ldp	x20, x19, [sp, #32]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #48             // 16-byte Folded Reload
	ret
.LBB368_18:                             // %"$2"
	mov	x0, xzr
	bl	stkErr
.Lfunc_end368:
	.size	rdList, .Lfunc_end368-rdList
	.cfi_endproc
                                        // -- End function
	.globl	idxPut                          // -- Begin function idxPut
	.p2align	4
	.type	idxPut,@function
idxPut:                                 // @idxPut
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x30, x21, [sp, #-32]!           // 16-byte Folded Spill
	stp	x20, x19, [sp, #16]             // 16-byte Folded Spill
	.cfi_def_cfa_offset 32
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w30, -32
	mov	x20, x1
	ldp	w19, w8, [x0]
	bfi	x19, x8, #32, #32
	tst	x19, #0xf
	b.eq	.LBB369_9
// %bb.1:                               // %"$3"
	mov	x21, x0
.LBB369_2:                              // %"$4"
	adrp	x19, SymTab+8
	add	x19, x19, :lo12:SymTab+8
	mov	x0, x20
	mov	x1, x19
	bl	cons
	lsr	x8, x0, #32
	stp	w0, w8, [x21]
.LBB369_3:                              // %"$4"
	mov	x0, x19
	ldp	x20, x19, [sp, #16]             // 16-byte Folded Reload
	ldp	x30, x21, [sp], #32             // 16-byte Folded Reload
	ret
.LBB369_4:                              // %"$6"
                                        //   in Loop: Header=BB369_9 Depth=1
	ldp	w21, w8, [x19, #8]
	bfi	x21, x8, #32, #32
	tst	x21, #0xf
	tbnz	x0, #63, .LBB369_7
// %bb.5:                               // %"$10"
                                        //   in Loop: Header=BB369_9 Depth=1
	b.ne	.LBB369_10
// %bb.6:                               // %"$16"
                                        //   in Loop: Header=BB369_9 Depth=1
	ldp	w19, w8, [x21]
	bfi	x19, x8, #32, #32
	tst	x19, #0xf
	b.eq	.LBB369_9
	b	.LBB369_2
.LBB369_7:                              // %"$11"
                                        //   in Loop: Header=BB369_9 Depth=1
	b.ne	.LBB369_11
// %bb.8:                               // %"$12"
                                        //   in Loop: Header=BB369_9 Depth=1
	ldp	w19, w8, [x21, #8]
	bfi	x19, x8, #32, #32
	tst	x19, #0xf
	b.ne	.LBB369_13
.LBB369_9:                              // %"$5"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w0, w8, [x19]
	bfi	x0, x8, #32, #32
	mov	x1, x20
	bl	compare
	cbnz	x0, .LBB369_4
	b	.LBB369_3
.LBB369_10:                             // %"$17"
	adrp	x21, SymTab+8
	add	x21, x21, :lo12:SymTab+8
	mov	x0, x20
	mov	x1, x21
	bl	cons
	mov	x1, x21
	b	.LBB369_12
.LBB369_11:                             // %"$13"
	adrp	x21, SymTab+8
	add	x21, x21, :lo12:SymTab+8
	mov	x0, x20
	mov	x1, x21
	bl	cons
	mov	x1, x0
	mov	x0, x21
.LBB369_12:                             // %"$4"
	bl	cons
	lsr	x8, x0, #32
	stp	w0, w8, [x19, #8]
	mov	x19, x21
	b	.LBB369_3
.LBB369_13:                             // %"$15"
	adrp	x19, SymTab+8
	add	x19, x19, :lo12:SymTab+8
	mov	x0, x20
	mov	x1, x19
	bl	cons
	lsr	x8, x0, #32
	stp	w0, w8, [x21, #8]
	b	.LBB369_3
.Lfunc_end369:
	.size	idxPut, .Lfunc_end369-idxPut
	.cfi_endproc
                                        // -- End function
	.globl	testEsc                         // -- Begin function testEsc
	.p2align	4
	.type	testEsc,@function
testEsc:                                // @testEsc
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-48]!                // 8-byte Folded Spill
	stp	x22, x21, [sp, #16]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #32]             // 16-byte Folded Spill
	.cfi_def_cfa_offset 48
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w30, -48
	adrp	x20, ($Get)
.LBB370_1:                              // %"$2"
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB370_6 Depth 2
	tbnz	w0, #31, .LBB370_8
// %bb.2:                               // %"$3"
                                        //   in Loop: Header=BB370_1 Depth=1
	cmp	w0, #94                         // =94
	b.eq	.LBB370_9
// %bb.3:                               // %"$6"
                                        //   in Loop: Header=BB370_1 Depth=1
	cmp	w0, #92                         // =92
	b.ne	.LBB370_11
// %bb.4:                               // %"$13"
                                        //   in Loop: Header=BB370_1 Depth=1
	ldr	x8, [x20, :lo12:($Get)]
	blr	x8
	cmp	w0, #10                         // =10
	b.eq	.LBB370_6
	b	.LBB370_14
.LBB370_5:                              //   in Loop: Header=BB370_6 Depth=2
	mov	w8, wzr
	tbnz	wzr, #0, .LBB370_1
.LBB370_6:                              // %"$34"
                                        //   Parent Loop BB370_1 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	x8, [x20, :lo12:($Get)]
	blr	x8
	cmp	w0, #32                         // =32
	b.eq	.LBB370_5
// %bb.7:                               // %"$36"
                                        //   in Loop: Header=BB370_6 Depth=2
	cmp	w0, #9                          // =9
	cset	w8, ne
	tbz	w8, #0, .LBB370_6
	b	.LBB370_1
.LBB370_8:
	mov	w0, wzr
	b	.LBB370_13
.LBB370_9:                              // %"$7"
	ldr	x8, [x20, :lo12:($Get)]
	blr	x8
	cmp	w0, #64                         // =64
	b.eq	.LBB370_30
// %bb.10:                              // %"$9"
	mov	w8, #127
	cmp	w0, #63                         // =63
	and	w9, w0, #0x1f
	csel	w19, w8, w9, eq
	b	.LBB370_12
.LBB370_11:                             // %"$14"
	bl	getChar
	mov	w19, w0
.LBB370_12:                             // %"$4.sink.split"
	adrp	x8, ($Chr)
	str	w19, [x8, :lo12:($Chr)]
	mov	w0, #1
.LBB370_13:                             // %"$4"
	ldp	x20, x19, [sp, #32]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #16]             // 16-byte Folded Reload
	ldr	x30, [sp], #48                  // 8-byte Folded Reload
	ret
.LBB370_14:                             // %"$16"
	sub	w8, w0, #98                     // =98
	ror	w8, w8, #1
	cmp	w8, #9                          // =9
	b.hi	.LBB370_19
// %bb.15:                              // %"$16"
	mov	w19, #98
	adrp	x9, .LJTI370_0
	add	x9, x9, :lo12:.LJTI370_0
	adr	x10, .LBB370_12
	ldrb	w11, [x9, x8]
	add	x10, x10, x11, lsl #2
	br	x10
.LBB370_16:                             // %"$20"
	mov	w19, #10
	b	.LBB370_12
.LBB370_17:                             // %"$21"
	mov	w19, #13
	b	.LBB370_12
.LBB370_18:                             // %"$22"
	mov	w19, #9
	b	.LBB370_12
.LBB370_19:                             // %"$17"
	subs	w8, w0, #48                     // =48
	b.lt	.LBB370_21
// %bb.20:                              // %"$24"
	cmp	w0, #58                         // =58
	cset	w9, lt
	b	.LBB370_22
.LBB370_21:
	mov	w9, wzr
.LBB370_22:                             // %"$23"
	mov	w19, w0
	cbz	w9, .LBB370_12
// %bb.23:                              // %"$25"
	adrp	x21, ($Chr)
	mov	w22, #10
	mov	w19, w8
.LBB370_24:                             // %"$27"
                                        // =>This Inner Loop Header: Depth=1
	ldr	x8, [x20, :lo12:($Get)]
	blr	x8
	cmp	w0, #92                         // =92
	b.eq	.LBB370_12
// %bb.25:                              // %"$28"
                                        //   in Loop: Header=BB370_24 Depth=1
	ldr	w8, [x21, :lo12:($Chr)]
	cmp	w8, #48                         // =48
	b.lt	.LBB370_27
// %bb.26:                              // %"$31"
                                        //   in Loop: Header=BB370_24 Depth=1
	ldr	w8, [x21, :lo12:($Chr)]
	cmp	w8, #58                         // =58
	cset	w8, lt
	b	.LBB370_28
.LBB370_27:                             //   in Loop: Header=BB370_24 Depth=1
	mov	w8, wzr
.LBB370_28:                             // %"$30"
                                        //   in Loop: Header=BB370_24 Depth=1
	tbz	w8, #0, .LBB370_30
// %bb.29:                              // %"$33"
                                        //   in Loop: Header=BB370_24 Depth=1
	ldr	w8, [x21, :lo12:($Chr)]
	madd	w8, w19, w22, w8
	sub	w19, w8, #48                    // =48
	b	.LBB370_24
.LBB370_30:                             // %"$8"
	bl	badInput
.Lfunc_end370:
	.size	testEsc, .Lfunc_end370-testEsc
	.cfi_endproc
	.section	.rodata,"a",@progbits
.LJTI370_0:
	.byte	(.LBB370_12-.LBB370_12)>>2
	.byte	(.LBB370_19-.LBB370_12)>>2
	.byte	(.LBB370_19-.LBB370_12)>>2
	.byte	(.LBB370_19-.LBB370_12)>>2
	.byte	(.LBB370_19-.LBB370_12)>>2
	.byte	(.LBB370_19-.LBB370_12)>>2
	.byte	(.LBB370_16-.LBB370_12)>>2
	.byte	(.LBB370_19-.LBB370_12)>>2
	.byte	(.LBB370_17-.LBB370_12)>>2
	.byte	(.LBB370_18-.LBB370_12)>>2
                                        // -- End function
	.text
	.globl	charSym                         // -- Begin function charSym
	.p2align	4
	.type	charSym,@function
charSym:                                // @charSym
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-32]!                // 8-byte Folded Spill
	stp	x20, x19, [sp, #16]             // 16-byte Folded Spill
	.cfi_def_cfa_offset 32
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w30, -32
	mov	x19, x1
	mov	w20, w0
	cmp	w0, #127                        // =127
	b.gt	.LBB371_2
// %bb.1:                               // %"$4"
	mov	w0, w20
	b	.LBB371_11
.LBB371_2:                              // %"$3"
	cmp	w20, #272, lsl #12              // =1114112
	b.ne	.LBB371_4
// %bb.3:
	mov	w0, #255
	b	.LBB371_11
.LBB371_4:                              // %"$5"
	cmp	w20, #2048                      // =2048
	b.ge	.LBB371_6
// %bb.5:
	mov	w8, #192
	mov	w9, #31
	b	.LBB371_10
.LBB371_6:                              // %"$8"
	cmp	w20, #16, lsl #12               // =65536
	b.ge	.LBB371_8
// %bb.7:
	mov	w8, #224
	mov	w9, #15
	b	.LBB371_9
.LBB371_8:                              // %"$10"
	mov	w0, #240
	bfxil	w0, w20, #18, #3
	mov	x1, x19
	bl	byteSym
	mov	w8, #128
	mov	w9, #63
.LBB371_9:                              // %"$7.sink.split"
	and	w9, w9, w20, lsr #12
	orr	w0, w8, w9
	mov	x1, x19
	bl	byteSym
	mov	w8, #128
	mov	w9, #63
.LBB371_10:                             // %"$7"
	and	w9, w9, w20, lsr #6
	orr	w0, w8, w9
	mov	x1, x19
	bl	byteSym
	mov	w0, #128
	bfxil	w0, w20, #0, #6
.LBB371_11:                             // %"$2"
	mov	x1, x19
	bl	byteSym
	ldp	x20, x19, [sp, #16]             // 16-byte Folded Reload
	ldr	x30, [sp], #32                  // 8-byte Folded Reload
	ret
.Lfunc_end371:
	.size	charSym, .Lfunc_end371-charSym
	.cfi_endproc
                                        // -- End function
	.globl	intern                          // -- Begin function intern
	.p2align	4
	.type	intern,@function
intern:                                 // @intern
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-80]!                // 8-byte Folded Spill
	stp	x26, x25, [sp, #16]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #32]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #48]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #64]             // 16-byte Folded Spill
	.cfi_def_cfa_offset 80
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w30, -80
	mov	w23, w5
	mov	x22, x4
	mov	x25, x3
	mov	x21, x2
	mov	x20, x1
	mov	x19, x0
	tbz	w21, #1, .LBB372_15
// %bb.1:                               // %"$2"
	ldp	w26, w8, [x25]
	bfi	x26, x8, #32, #32
	tst	x26, #0xf
	b.eq	.LBB372_11
.LBB372_2:                              // %"$6"
	mov	x0, x21
	mov	x1, x22
	bl	isLstIntern
	mov	x24, x0
	cbnz	x0, .LBB372_41
// %bb.3:                               // %"$50"
	cbnz	x19, .LBB372_5
// %bb.4:                               // %"$47"
	mov	x0, x21
	mov	x1, x20
	bl	consSym
	mov	x19, x0
.LBB372_5:                              // %"$48"
	adrp	x1, SymTab+8
	add	x1, x1, :lo12:SymTab+8
	mov	x0, x19
	bl	cons
	lsr	x8, x0, #32
	stp	w0, w8, [x25]
	b	.LBB372_40
.LBB372_6:                              // %"$12"
                                        //   in Loop: Header=BB372_11 Depth=1
	ldp	w25, w9, [x26, #8]
	bfi	x25, x9, #32, #32
	cmp	x21, x8
	b.ls	.LBB372_9
// %bb.7:                               // %"$20"
                                        //   in Loop: Header=BB372_11 Depth=1
	tst	x25, #0xf
	b.ne	.LBB372_35
// %bb.8:                               // %"$21"
                                        //   in Loop: Header=BB372_11 Depth=1
	ldp	w26, w8, [x25, #8]
	bfi	x26, x8, #32, #32
	tst	x26, #0xf
	b.eq	.LBB372_11
	b	.LBB372_16
.LBB372_9:                              // %"$19"
                                        //   in Loop: Header=BB372_11 Depth=1
	tst	x25, #0xf
	b.ne	.LBB372_31
// %bb.10:                              // %"$35"
                                        //   in Loop: Header=BB372_11 Depth=1
	ldp	w26, w8, [x25]
	bfi	x26, x8, #32, #32
	tst	x26, #0xf
	b.ne	.LBB372_2
.LBB372_11:                             // %"$8"
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB372_12 Depth 2
	ldp	w24, w8, [x26]
	bfi	x24, x8, #32, #32
	sub	x8, x24, #8                     // =8
.LBB372_12:                             // %"$9"
                                        //   Parent Loop BB372_11 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	w8, w9, [x8]
	bfi	x8, x9, #32, #32
	tst	x8, #0x6
	b.ne	.LBB372_14
// %bb.13:                              // %"$10"
                                        //   in Loop: Header=BB372_12 Depth=2
	add	x8, x8, #8                      // =8
	b	.LBB372_12
.LBB372_14:                             // %"$11"
                                        //   in Loop: Header=BB372_11 Depth=1
	cmp	x21, x8
	b.ne	.LBB372_6
	b	.LBB372_29
.LBB372_15:                             // %"$3"
	ldp	w26, w8, [x25, #8]
	bfi	x26, x8, #32, #32
	tst	x26, #0xf
	b.eq	.LBB372_25
.LBB372_16:                             // %"$55"
	mov	x0, x21
	mov	x1, x22
	bl	isLstIntern
	mov	x24, x0
	cbnz	x0, .LBB372_41
// %bb.17:                              // %"$99"
	cbnz	x19, .LBB372_19
// %bb.18:                              // %"$101"
	mov	x0, x21
	mov	x1, x20
	bl	consSym
	mov	x19, x0
.LBB372_19:                             // %"$102"
	adrp	x1, SymTab+8
	add	x1, x1, :lo12:SymTab+8
	mov	x0, x19
	bl	cons
	lsr	x8, x0, #32
	stp	w0, w8, [x25, #8]
	b	.LBB372_40
.LBB372_20:                             // %"$61"
                                        //   in Loop: Header=BB372_25 Depth=1
	ldp	w25, w8, [x26, #8]
	bfi	x25, x8, #32, #32
	tst	x25, #0xf
	tbnz	x0, #63, .LBB372_23
// %bb.21:                              // %"$68"
                                        //   in Loop: Header=BB372_25 Depth=1
	b.ne	.LBB372_31
// %bb.22:                              // %"$84"
                                        //   in Loop: Header=BB372_25 Depth=1
	ldp	w26, w8, [x25]
	bfi	x26, x8, #32, #32
	tst	x26, #0xf
	b.eq	.LBB372_25
	b	.LBB372_2
.LBB372_23:                             // %"$69"
                                        //   in Loop: Header=BB372_25 Depth=1
	b.ne	.LBB372_35
// %bb.24:                              // %"$70"
                                        //   in Loop: Header=BB372_25 Depth=1
	ldp	w26, w8, [x25, #8]
	bfi	x26, x8, #32, #32
	tst	x26, #0xf
	b.ne	.LBB372_16
.LBB372_25:                             // %"$57"
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB372_26 Depth 2
	ldp	w24, w8, [x26]
	bfi	x24, x8, #32, #32
	sub	x8, x24, #8                     // =8
.LBB372_26:                             // %"$58"
                                        //   Parent Loop BB372_25 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	w0, w9, [x8]
	bfi	x0, x9, #32, #32
	tst	x0, #0x6
	b.ne	.LBB372_28
// %bb.27:                              // %"$59"
                                        //   in Loop: Header=BB372_26 Depth=2
	add	x8, x0, #8                      // =8
	b	.LBB372_26
.LBB372_28:                             // %"$60"
                                        //   in Loop: Header=BB372_25 Depth=1
	mov	x1, x21
	bl	cmpLong
	cbnz	x0, .LBB372_20
.LBB372_29:                             // %"$63"
	tbz	w23, #0, .LBB372_41
// %bb.30:                              // %"$15"
	lsr	x8, x19, #32
	stp	w19, w8, [x26]
	b	.LBB372_40
.LBB372_31:                             // %"$85"
	mov	x0, x21
	mov	x1, x22
	bl	isLstIntern
	mov	x24, x0
	cbnz	x0, .LBB372_41
// %bb.32:                              // %"$87"
	cbnz	x19, .LBB372_34
// %bb.33:                              // %"$40"
	mov	x0, x21
	mov	x1, x20
	bl	consSym
	mov	x19, x0
.LBB372_34:                             // %"$41"
	adrp	x20, SymTab+8
	add	x20, x20, :lo12:SymTab+8
	mov	x0, x19
	mov	x1, x20
	bl	cons
	mov	x1, x20
	b	.LBB372_39
.LBB372_35:                             // %"$22"
	mov	x0, x21
	mov	x1, x22
	bl	isLstIntern
	mov	x24, x0
	cbnz	x0, .LBB372_41
// %bb.36:                              // %"$24"
	cbnz	x19, .LBB372_38
// %bb.37:                              // %"$26"
	mov	x0, x21
	mov	x1, x20
	bl	consSym
	mov	x19, x0
.LBB372_38:                             // %"$27"
	adrp	x20, SymTab+8
	add	x20, x20, :lo12:SymTab+8
	mov	x0, x19
	mov	x1, x20
	bl	cons
	mov	x1, x0
	mov	x0, x20
.LBB372_39:                             // %"$4"
	bl	cons
	lsr	x8, x0, #32
	stp	w0, w8, [x26, #8]
.LBB372_40:                             // %"$4"
	mov	x24, x19
.LBB372_41:                             // %"$4"
	mov	x0, x24
	ldp	x20, x19, [sp, #64]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #48]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #32]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #16]             // 16-byte Folded Reload
	ldr	x30, [sp], #80                  // 8-byte Folded Reload
	ret
.Lfunc_end372:
	.size	intern, .Lfunc_end372-intern
	.cfi_endproc
                                        // -- End function
	.globl	badInput                        // -- Begin function badInput
	.p2align	4
	.type	badInput,@function
badInput:                               // @badInput
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	adrp	x8, ($Chr)
	ldr	w8, [x8, :lo12:($Chr)]
	strb	w8, [sp, #12]
	strb	wzr, [sp, #13]
	adrp	x2, .L$36
	add	x2, x2, :lo12:.L$36
	add	x3, sp, #12                     // =12
	mov	x0, xzr
	mov	x1, xzr
	bl	err
.Lfunc_end373:
	.size	badInput, .Lfunc_end373-badInput
	.cfi_endproc
                                        // -- End function
	.globl	extNm                           // -- Begin function extNm
	.p2align	4
	.type	extNm,@function
extNm:                                  // @extNm
	.cfi_startproc
// %bb.0:                               // %"$1"
	and	w8, w0, #0xff
	ubfx	x9, x1, #20, #12
	lsr	w10, w0, #8
	lsl	x11, x1, #16
	and	x11, x11, #0xfff000000000000
	orr	x10, x11, x10, lsl #40
	orr	x9, x10, x9, lsl #28
	bfi	x9, x8, #20, #8
	bfxil	x9, x1, #0, #20
	mov	w0, #2
	bfi	x0, x9, #4, #60
	ret
.Lfunc_end374:
	.size	extNm, .Lfunc_end374-extNm
	.cfi_endproc
                                        // -- End function
	.globl	extern                          // -- Begin function extern
	.p2align	4
	.type	extern,@function
extern:                                 // @extern
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x30, x25, [sp, #-64]!           // 16-byte Folded Spill
	stp	x24, x23, [sp, #16]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #32]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #48]             // 16-byte Folded Spill
	.cfi_def_cfa_offset 64
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w30, -64
	mov	x19, x0
	mov	x22, #-9
	movk	x22, #16383, lsl #48
	bl	need3
	mov	x24, xzr
	adrp	x23, ($Extern)
	ldr	x25, [x23, :lo12:($Extern)]
.LBB375_1:                              // %"$2"
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB375_2 Depth 2
	add	x24, x24, #1                    // =1
	ldp	w20, w8, [x25]
	bfi	x20, x8, #32, #32
	ldp	w9, w8, [x20, #-8]
	bfi	x9, x8, #32, #32
	and	x8, x9, #0xfffffffffffffff7
	tst	x8, #0x6
	b.ne	.LBB375_3
.LBB375_2:                              // %"$4"
                                        //   Parent Loop BB375_1 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	w8, w9, [x8, #8]
	bfi	x8, x9, #32, #32
	tst	x8, #0x6
	b.eq	.LBB375_2
.LBB375_3:                              // %"$5"
                                        //   in Loop: Header=BB375_1 Depth=1
	and	x8, x8, x22
	cmp	x8, x19
	b.eq	.LBB375_14
// %bb.4:                               // %"$6"
                                        //   in Loop: Header=BB375_1 Depth=1
	ldp	w21, w9, [x25, #8]
	bfi	x21, x9, #32, #32
	cmp	x19, x8
	b.ls	.LBB375_7
// %bb.5:                               // %"$10"
                                        //   in Loop: Header=BB375_1 Depth=1
	tst	x21, #0xf
	b.ne	.LBB375_10
// %bb.6:                               // %"$11"
                                        //   in Loop: Header=BB375_1 Depth=1
	ldp	w25, w8, [x21, #8]
	bfi	x25, x8, #32, #32
	tst	x25, #0xf
	b.eq	.LBB375_1
	b	.LBB375_11
.LBB375_7:                              // %"$9"
                                        //   in Loop: Header=BB375_1 Depth=1
	tst	x21, #0xf
	b.ne	.LBB375_12
// %bb.8:                               // %"$15"
                                        //   in Loop: Header=BB375_1 Depth=1
	ldp	w25, w8, [x21]
	bfi	x25, x8, #32, #32
	tst	x25, #0xf
	b.eq	.LBB375_1
// %bb.9:                               // %"$18"
	mov	x0, x19
	bl	consExt
	mov	x20, x0
	adrp	x1, SymTab+8
	add	x1, x1, :lo12:SymTab+8
	bl	cons
	lsr	x8, x0, #32
	stp	w0, w8, [x21]
	b	.LBB375_14
.LBB375_10:                             // %"$12"
	mov	x0, x19
	bl	consExt
	mov	x20, x0
	adrp	x21, SymTab+8
	add	x21, x21, :lo12:SymTab+8
	mov	x1, x21
	bl	cons
	mov	x1, x0
	mov	x0, x21
	b	.LBB375_13
.LBB375_11:                             // %"$14"
	mov	x0, x19
	bl	consExt
	mov	x20, x0
	adrp	x1, SymTab+8
	add	x1, x1, :lo12:SymTab+8
	bl	cons
	lsr	x8, x0, #32
	stp	w0, w8, [x21, #8]
	b	.LBB375_14
.LBB375_12:                             // %"$16"
	mov	x0, x19
	bl	consExt
	mov	x20, x0
	adrp	x21, SymTab+8
	add	x21, x21, :lo12:SymTab+8
	mov	x1, x21
	bl	cons
	mov	x1, x21
.LBB375_13:                             // %"$7"
	bl	cons
	lsr	x8, x0, #32
	stp	w0, w8, [x25, #8]
.LBB375_14:                             // %"$7"
	lsr	x9, x24, #1
	mov	w8, #1
	lsl	x8, x8, x9
	adrp	x10, ($ExtCnt)
	ldr	x10, [x10, :lo12:($ExtCnt)]
	cmp	x8, x10
	b.ls	.LBB375_25
// %bb.15:                              // %"$19"
	ldr	x8, [x23, :lo12:($Extern)]
	adrp	x10, ($ExtSkip)
	ldr	x11, [x10, :lo12:($ExtSkip)]
	add	x11, x11, #1                    // =1
	cmp	x11, x9
	b.ls	.LBB375_26
// %bb.16:                              // %"$21"
	str	xzr, [x10, :lo12:($ExtSkip)]
.LBB375_17:                             // %"$33"
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB375_18 Depth 2
	ldp	w10, w9, [x8]
	bfi	x10, x9, #32, #32
	ldp	w10, w9, [x10, #-8]
	bfi	x10, x9, #32, #32
	and	x9, x10, #0xfffffffffffffff7
	tst	x9, #0x6
	b.ne	.LBB375_19
.LBB375_18:                             // %"$35"
                                        //   Parent Loop BB375_17 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	w9, w10, [x9, #8]
	bfi	x9, x10, #32, #32
	tst	x9, #0x6
	b.eq	.LBB375_18
.LBB375_19:                             // %"$36"
                                        //   in Loop: Header=BB375_17 Depth=1
	and	x10, x9, x22
	cmp	x10, x19
	b.eq	.LBB375_25
// %bb.20:                              // %"$37"
                                        //   in Loop: Header=BB375_17 Depth=1
	ldp	w9, w11, [x8, #8]
	bfi	x9, x11, #32, #32
	cmp	x19, x10
	b.ls	.LBB375_23
// %bb.21:                              // %"$39"
                                        //   in Loop: Header=BB375_17 Depth=1
	ldp	w10, w11, [x9, #8]
	bfi	x10, x11, #32, #32
	ldrb	w11, [x10, #8]
	tst	w11, #0xf
	b.ne	.LBB375_25
// %bb.22:                              // %"$42"
                                        //   in Loop: Header=BB375_17 Depth=1
	ldp	w11, w12, [x10]
	ldp	w14, w13, [x8]
	stp	w14, w13, [x10]
	stp	w11, w12, [x8]
	ldp	w10, w8, [x10, #8]
	bfi	x10, x8, #32, #32
	mov	x8, x10
	ldr	w11, [x8, #8]!
	ldr	w12, [x8, #4]
	ldp	w14, w13, [x10]
	stp	w14, w13, [x8]
	ldp	w13, w8, [x9]
	stp	w13, w8, [x10]
	mov	x8, x9
	ldr	w10, [x8, #8]!
	ldr	w13, [x8, #4]
	stp	w10, w13, [x9]
	stp	w11, w12, [x8]
	mov	x8, x11
	bfi	x8, x12, #32, #32
	b	.LBB375_17
.LBB375_23:                             // %"$40"
                                        //   in Loop: Header=BB375_17 Depth=1
	ldp	w10, w11, [x9]
	bfi	x10, x11, #32, #32
	ldrb	w11, [x10, #8]
	tst	w11, #0xf
	b.ne	.LBB375_25
// %bb.24:                              // %"$43"
                                        //   in Loop: Header=BB375_17 Depth=1
	ldp	w11, w12, [x10]
	ldp	w14, w13, [x8]
	stp	w14, w13, [x10]
	stp	w11, w12, [x8]
	ldp	w10, w8, [x10, #8]
	bfi	x10, x8, #32, #32
	ldp	w8, w11, [x10]
	mov	x12, x10
	ldr	w13, [x12, #8]!
	ldr	w14, [x12, #4]
	stp	w13, w14, [x10]
	mov	x10, x9
	ldr	w13, [x10, #8]!
	ldr	w14, [x10, #4]
	stp	w13, w14, [x12]
	ldp	w12, w13, [x9]
	stp	w12, w13, [x10]
	stp	w8, w11, [x9]
	bfi	x8, x11, #32, #32
	b	.LBB375_17
.LBB375_25:                             // %"$20"
	mov	x0, x20
	ldp	x20, x19, [sp, #48]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #32]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #16]             // 16-byte Folded Reload
	ldp	x30, x25, [sp], #64             // 16-byte Folded Reload
	ret
.LBB375_26:                             // %"$22"
	str	x11, [x10, :lo12:($ExtSkip)]
	b	.LBB375_28
.LBB375_27:                             // %"$27"
                                        //   in Loop: Header=BB375_28 Depth=1
	and	x10, x10, x22
	cmp	x19, x10
	add	x10, x8, #8                     // =8
	csel	x8, x8, x10, ls
	ldp	w8, w10, [x8]
	bfi	x8, x10, #32, #32
	subs	x9, x9, #1                      // =1
	b.eq	.LBB375_17
.LBB375_28:                             // %"$24"
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB375_29 Depth 2
	ldp	w11, w10, [x8]
	bfi	x11, x10, #32, #32
	ldp	w8, w10, [x8, #8]
	bfi	x8, x10, #32, #32
	ldp	w11, w10, [x11, #-8]
	bfi	x11, x10, #32, #32
	and	x10, x11, #0xfffffffffffffff7
	tst	x10, #0x6
	b.ne	.LBB375_27
.LBB375_29:                             // %"$26"
                                        //   Parent Loop BB375_28 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	w10, w11, [x10, #8]
	bfi	x10, x11, #32, #32
	tst	x10, #0x6
	b.eq	.LBB375_29
	b	.LBB375_27
.Lfunc_end375:
	.size	extern, .Lfunc_end375-extern
	.cfi_endproc
                                        // -- End function
	.globl	rdAtom                          // -- Begin function rdAtom
	.p2align	4
	.type	rdAtom,@function
rdAtom:                                 // @rdAtom
	.cfi_startproc
// %bb.0:                               // %"$1"
	sub	sp, sp, #144                    // =144
	stp	x29, x30, [sp, #48]             // 16-byte Folded Spill
	stp	x28, x27, [sp, #64]             // 16-byte Folded Spill
	stp	x26, x25, [sp, #80]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #96]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #112]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #128]            // 16-byte Folded Spill
	.cfi_def_cfa_offset 144
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	mov	w19, w0
	mov	w8, #4
	mov	w9, #2
	adrp	x10, ($Chr)
	adrp	x21, env
	add	x21, x21, :lo12:env
	add	x11, sp, #32                    // =32
	ldr	x12, [x21]
	str	x11, [x21]
	ldr	x22, [x21, #88]
	stp	x22, x12, [sp, #32]
	ldr	w20, [x10, :lo12:($Chr)]
	cmp	w20, #126                       // =126
	cset	w10, eq
	cmp	w0, #37                         // =37
	csel	w10, wzr, w10, ne
	str	x8, [sp]
	str	x9, [sp, #16]
	adrp	x23, env+88
	adrp	x24, ($Get)
	cbz	w10, .LBB376_3
// %bb.1:                               // %"$4"
	ldp	w8, w9, [x22, #8]
	bfi	x8, x9, #32, #32
	adrp	x9, SymTab+8
	add	x9, x9, :lo12:SymTab+8
	cmp	x8, x9
	b.eq	.LBB376_27
// %bb.2:                               // %"$7"
	str	x8, [x23, :lo12:env+88]
	ldr	x8, [x24, :lo12:($Get)]
	blr	x8
	mov	w19, w0
	ldr	x8, [x24, :lo12:($Get)]
	blr	x8
	mov	w20, w0
.LBB376_3:                              // %"$5"
	mov	x8, sp
	adrp	x9, env
	ldr	x10, [x9, :lo12:env]
	str	x10, [sp, #24]
	add	x8, x8, #16                     // =16
	str	x8, [x9, :lo12:env]
	mov	x1, sp
	mov	w0, w19
	bl	charSym
	adrp	x26, SymTab+40
	add	x26, x26, :lo12:SymTab+40
	adrp	x27, ($Cell)
	adrp	x25, ($Cell)
	add	x25, x25, :lo12:($Cell)
	mov	w28, #4
	mov	w29, #2
	adrp	x19, ($Delim)
	add	x19, x19, :lo12:($Delim)
	b	.LBB376_6
.LBB376_4:                              // %"$20"
                                        //   in Loop: Header=BB376_6 Depth=1
	mov	x1, sp
	mov	w0, w20
	bl	charSym
.LBB376_5:                              // %"$13"
                                        //   in Loop: Header=BB376_6 Depth=1
	ldr	x8, [x24, :lo12:($Get)]
	blr	x8
	mov	w20, w0
.LBB376_6:                              // %"$8"
                                        // =>This Inner Loop Header: Depth=1
	tbnz	w20, #31, .LBB376_14
// %bb.7:                               // %"$9"
                                        //   in Loop: Header=BB376_6 Depth=1
	cmp	w20, #126                       // =126
	b.ne	.LBB376_11
// %bb.8:                               // %"$11"
                                        //   in Loop: Header=BB376_6 Depth=1
	ldr	x0, [sp, #16]
	bl	requestSym
	mov	x1, x0
	ldp	w8, w9, [x0]
	bfi	x8, x9, #32, #32
	tst	x8, #0xf
	b.ne	.LBB376_28
// %bb.9:                               // %"$15"
                                        //   in Loop: Header=BB376_6 Depth=1
	ldp	w8, w9, [x8]
	bfi	x8, x9, #32, #32
	cmp	x26, x8
	b.ne	.LBB376_28
// %bb.10:                              // %"$17"
                                        //   in Loop: Header=BB376_6 Depth=1
	str	x25, [x23, :lo12:env+88]
	str	x1, [x27, :lo12:($Cell)]
	str	x28, [sp]
	str	x29, [sp, #16]
	b	.LBB376_5
.LBB376_11:                             // %"$12"
                                        //   in Loop: Header=BB376_6 Depth=1
	mov	x0, x19
	mov	w1, w20
	bl	strchr2
	cbnz	x0, .LBB376_14
// %bb.12:                              // %"$18"
                                        //   in Loop: Header=BB376_6 Depth=1
	cmp	w20, #92                        // =92
	b.ne	.LBB376_4
// %bb.13:                              // %"$19"
                                        //   in Loop: Header=BB376_6 Depth=1
	ldr	x8, [x24, :lo12:($Get)]
	blr	x8
	mov	w20, w0
	b	.LBB376_4
.LBB376_14:                             // %"$10"
	ldr	x19, [sp, #16]
	cmp	x19, #2                         // =2
	b.eq	.LBB376_26
// %bb.15:                              // %"$22"
	ldr	x20, [x23, :lo12:env+88]
	cmp	x20, x25
	b.ne	.LBB376_18
// %bb.16:                              // %"$25"
	ldp	w9, w8, [x20]
	bfi	x9, x8, #32, #32
	ldp	w9, w8, [x9]
	bfi	x9, x8, #32, #32
	ldp	w3, w8, [x9, #8]
	bfi	x3, x8, #32, #32
	adrp	x1, SymTab+8
	add	x1, x1, :lo12:SymTab+8
	mov	x0, xzr
	mov	x2, x19
	mov	x4, x1
	mov	w5, wzr
.LBB376_17:                             // %"$21"
	bl	intern
	b	.LBB376_23
.LBB376_18:                             // %"$24"
	adrp	x8, SymTab+488
	ldr	x8, [x8, :lo12:SymTab+488]
	lsr	x1, x8, #4
	mov	x0, x19
	mov	w2, #46
	mov	w3, wzr
	bl	symToNum
	cbnz	x0, .LBB376_23
// %bb.19:                              // %"$26"
	mov	x0, x19
	bl	anonymous
	cbnz	x0, .LBB376_23
// %bb.20:                              // %"$28"
	ldp	w9, w8, [x20]
	bfi	x9, x8, #32, #32
	adrp	x8, SymTab+152
	add	x8, x8, :lo12:SymTab+152
	cmp	x9, x8
	b.ne	.LBB376_24
// %bb.21:                              // %"$31"
	ldp	w9, w8, [x20, #8]
	adrp	x10, SymTab+8
	add	x10, x10, :lo12:SymTab+8
	bfi	x9, x8, #32, #32
	cmp	x9, x10
	cset	w8, eq
	cbnz	w8, .LBB376_25
.LBB376_22:                             // %"$32"
	mov	x0, x19
	bl	requestSym
.LBB376_23:                             // %"$21"
	str	x22, [x21, #88]
	ldr	x8, [sp, #40]
	str	x8, [x21]
	ldp	x20, x19, [sp, #128]            // 16-byte Folded Reload
	ldp	x22, x21, [sp, #112]            // 16-byte Folded Reload
	ldp	x24, x23, [sp, #96]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #80]             // 16-byte Folded Reload
	ldp	x28, x27, [sp, #64]             // 16-byte Folded Reload
	ldp	x29, x30, [sp, #48]             // 16-byte Folded Reload
	add	sp, sp, #144                    // =144
	ret
.LBB376_24:
	mov	w8, wzr
	cbz	w8, .LBB376_22
.LBB376_25:                             // %"$33"
	adrp	x20, SymTab+8
	add	x20, x20, :lo12:SymTab+8
	mov	x0, x19
	mov	x1, x20
	bl	consSym
	add	x3, x20, #104                   // =104
	mov	x1, xzr
	mov	x2, x19
	mov	x4, x20
	mov	w5, #1
	b	.LBB376_17
.LBB376_26:                             // %"$23"
	bl	badInput
.LBB376_27:                             // %"$6"
	adrp	x1, SymTab+984
	add	x1, x1, :lo12:SymTab+984
.LBB376_28:                             // %"$16"
	mov	x0, xzr
	bl	symNspErr
.Lfunc_end376:
	.size	rdAtom, .Lfunc_end376-rdAtom
	.cfi_endproc
                                        // -- End function
	.globl	symNspErr                       // -- Begin function symNspErr
	.p2align	4
	.type	symNspErr,@function
symNspErr:                              // @symNspErr
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	adrp	x2, .L$23
	add	x2, x2, :lo12:.L$23
	mov	x3, xzr
	bl	err
.Lfunc_end377:
	.size	symNspErr, .Lfunc_end377-symNspErr
	.cfi_endproc
                                        // -- End function
	.globl	requestSym                      // -- Begin function requestSym
	.p2align	4
	.type	requestSym,@function
requestSym:                             // @requestSym
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x30, x19, [sp, #-16]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w19, -8
	.cfi_offset w30, -16
	mov	x19, x0
	adrp	x1, SymTab+112
	add	x1, x1, :lo12:SymTab+112
	bl	isIntern
	cbz	x0, .LBB378_2
// %bb.1:                               // %"$4"
	ldp	x30, x19, [sp], #16             // 16-byte Folded Reload
	ret
.LBB378_2:                              // %"$3"
	adrp	x8, env+88
	ldr	x8, [x8, :lo12:env+88]
	ldp	w10, w9, [x8]
	bfi	x10, x9, #32, #32
	ldp	w10, w9, [x10]
	bfi	x10, x9, #32, #32
	ldp	w3, w9, [x10, #8]
	bfi	x3, x9, #32, #32
	ldp	w4, w9, [x8, #8]
	bfi	x4, x9, #32, #32
	adrp	x1, SymTab+8
	add	x1, x1, :lo12:SymTab+8
	mov	x2, x19
	mov	w5, wzr
	bl	intern
	ldp	x30, x19, [sp], #16             // 16-byte Folded Reload
	ret
.Lfunc_end378:
	.size	requestSym, .Lfunc_end378-requestSym
	.cfi_endproc
                                        // -- End function
	.globl	strchr2                         // -- Begin function strchr2
	.p2align	4
	.type	strchr2,@function
strchr2:                                // @strchr2
	.cfi_startproc
// %bb.0:                               // %"$1"
	ldrb	w8, [x0]
	cbz	w8, .LBB379_3
.LBB379_1:                              // %"$3"
                                        // =>This Inner Loop Header: Depth=1
	cmp	w8, w1, uxtb
	b.eq	.LBB379_4
// %bb.2:                               // %"$5"
                                        //   in Loop: Header=BB379_1 Depth=1
	add	x0, x0, #1                      // =1
	ldrb	w8, [x0]
	cbnz	w8, .LBB379_1
.LBB379_3:                              // %"$4"
	mov	x0, xzr
.LBB379_4:                              // %"$6"
	ret
.Lfunc_end379:
	.size	strchr2, .Lfunc_end379-strchr2
	.cfi_endproc
                                        // -- End function
	.globl	symToNum                        // -- Begin function symToNum
	.p2align	4
	.type	symToNum,@function
symToNum:                               // @symToNum
	.cfi_startproc
// %bb.0:                               // %"$1"
	sub	sp, sp, #96                     // =96
	stp	x30, x25, [sp, #32]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #48]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #64]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #80]             // 16-byte Folded Spill
	.cfi_def_cfa_offset 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w30, -64
	mov	w20, w3
	mov	w21, w2
	mov	x19, x1
	stp	xzr, x0, [sp, #16]
	mov	w8, #2
	str	x8, [sp]
.LBB380_1:                              // %"$2"
                                        // =>This Inner Loop Header: Depth=1
	add	x0, sp, #16                     // =16
	bl	symByte
	and	w8, w0, #0xff
	cmp	w8, #32                         // =32
	b.hi	.LBB380_3
// %bb.2:                               // %"$3"
                                        //   in Loop: Header=BB380_1 Depth=1
	tst	w0, #0xff
	b.ne	.LBB380_1
	b	.LBB380_27
.LBB380_3:                              // %"$4"
	cmp	w8, #43                         // =43
	b.ne	.LBB380_5
// %bb.4:
	mov	w22, wzr
	b	.LBB380_7
.LBB380_5:                              // %"$8"
	and	w8, w0, #0xff
	cmp	w8, #45                         // =45
	b.ne	.LBB380_8
// %bb.6:
	mov	w22, #1
.LBB380_7:                              // %"$-1"
	add	x0, sp, #16                     // =16
	bl	symByte
	tst	w0, #0xff
	b.ne	.LBB380_9
	b	.LBB380_27
.LBB380_8:
	mov	w22, wzr
.LBB380_9:                              // %"$7"
	sub	w9, w0, #48                     // =48
	and	w8, w9, #0xff
	cmp	w8, #10                         // =10
	b.hs	.LBB380_27
// %bb.10:                              // %"$15"
	mov	w8, wzr
	adrp	x23, env
	ldr	x10, [x23, :lo12:env]
	mov	x11, sp
	str	x11, [x23, :lo12:env]
	and	x9, x9, #0xff
	mov	w11, #2
	bfi	x11, x9, #4, #8
	stp	x11, x10, [sp]
	b	.LBB380_12
.LBB380_11:                             // %"$34"
                                        //   in Loop: Header=BB380_12 Depth=1
	mov	w8, #1
	tbnz	w24, #0, .LBB380_26
.LBB380_12:                             // %"$16"
                                        // =>This Inner Loop Header: Depth=1
	mov	w24, w8
	add	x0, sp, #16                     // =16
	bl	symByte
	tst	w0, #0xff
	b.eq	.LBB380_29
// %bb.13:                              // %"$17"
                                        //   in Loop: Header=BB380_12 Depth=1
	tbz	w24, #0, .LBB380_15
// %bb.14:                              // %"$20"
                                        //   in Loop: Header=BB380_12 Depth=1
	cmp	x19, #0                         // =0
	cset	w8, eq
	cbz	w8, .LBB380_16
	b	.LBB380_21
.LBB380_15:                             //   in Loop: Header=BB380_12 Depth=1
	mov	w8, wzr
	cbnz	w8, .LBB380_21
.LBB380_16:                             // %"$21"
                                        //   in Loop: Header=BB380_12 Depth=1
	and	w8, w0, #0xff
	cmp	w8, w21, uxtb
	b.eq	.LBB380_11
// %bb.17:                              // %"$33"
                                        //   in Loop: Header=BB380_12 Depth=1
	cmp	w8, w20, uxtb
	mov	w8, w24
	b.eq	.LBB380_12
// %bb.18:                              // %"$38"
                                        //   in Loop: Header=BB380_12 Depth=1
	sub	w25, w0, #48                    // =48
	and	w8, w25, #0xff
	cmp	w8, #10                         // =10
	b.hs	.LBB380_26
// %bb.19:                              // %"$40"
                                        //   in Loop: Header=BB380_12 Depth=1
	ldr	x0, [sp]
	bl	tenfold
	and	x8, x25, #0xff
	mov	w1, #2
	bfi	x1, x8, #4, #8
	bl	addu
	str	x0, [sp]
	mov	w8, w24
	tbz	w24, #0, .LBB380_12
// %bb.20:                              // %"$41"
                                        //   in Loop: Header=BB380_12 Depth=1
	sub	x19, x19, #1                    // =1
	mov	w8, w24
	b	.LBB380_12
.LBB380_21:                             // %"$22"
	sub	w8, w0, #48                     // =48
	and	w8, w8, #0xff
	cmp	w8, #10                         // =10
	b.hs	.LBB380_26
// %bb.22:                              // %"$24"
	cmp	w8, #5                          // =5
	b.lo	.LBB380_24
// %bb.23:                              // %"$25"
	ldr	x0, [sp]
	mov	w1, #18
	bl	addu
	str	x0, [sp]
.LBB380_24:                             // %"$27"
                                        // =>This Inner Loop Header: Depth=1
	add	x0, sp, #16                     // =16
	bl	symByte
	tst	w0, #0xff
	b.eq	.LBB380_29
// %bb.25:                              // %"$28"
                                        //   in Loop: Header=BB380_24 Depth=1
	sub	w8, w0, #48                     // =48
	and	w8, w8, #0xff
	cmp	w8, #10                         // =10
	b.lo	.LBB380_24
.LBB380_26:                             // %"$23"
	ldr	x8, [sp, #8]
	str	x8, [x23, :lo12:env]
.LBB380_27:                             // %"$5"
	mov	x0, xzr
.LBB380_28:                             // %"$5"
	ldp	x20, x19, [sp, #80]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #64]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #48]             // 16-byte Folded Reload
	ldp	x30, x25, [sp, #32]             // 16-byte Folded Reload
	add	sp, sp, #96                     // =96
	ret
.LBB380_29:                             // %"$18"
	tbz	w24, #0, .LBB380_32
// %bb.30:                              // %"$45.preheader"
	sub	x19, x19, #1                    // =1
	tbnz	x19, #63, .LBB380_32
.LBB380_31:                             // %"$46"
                                        // =>This Inner Loop Header: Depth=1
	ldr	x0, [sp]
	bl	tenfold
	str	x0, [sp]
	sub	x19, x19, #1                    // =1
	tbz	x19, #63, .LBB380_31
.LBB380_32:                             // %"$44"
	ldp	x8, x9, [sp]
	eor	x10, x8, #0x8
	cmp	x8, #2                          // =2
	csel	x10, x8, x10, eq
	cmp	w22, #0                         // =0
	csel	x0, x8, x10, eq
	str	x9, [x23, :lo12:env]
	b	.LBB380_28
.Lfunc_end380:
	.size	symToNum, .Lfunc_end380-symToNum
	.cfi_endproc
                                        // -- End function
	.globl	anonymous                       // -- Begin function anonymous
	.p2align	4
	.type	anonymous,@function
anonymous:                              // @anonymous
	.cfi_startproc
// %bb.0:                               // %"$1"
	sub	sp, sp, #32                     // =32
	stp	x30, x19, [sp, #16]             // 16-byte Folded Spill
	.cfi_def_cfa_offset 32
	.cfi_offset w19, -8
	.cfi_offset w30, -16
	stp	xzr, x0, [sp]
	mov	x0, sp
	bl	symByte
	and	w8, w0, #0xff
	cmp	w8, #36                         // =36
	b.ne	.LBB381_6
// %bb.1:                               // %"$3"
	mov	x0, sp
	bl	symByte
	sub	w8, w0, #48                     // =48
	and	w9, w8, #0xff
	cmp	w9, #7                          // =7
	b.hi	.LBB381_6
// %bb.2:                               // %"$5"
	and	x19, x8, #0xff
.LBB381_3:                              // %"$6"
                                        // =>This Inner Loop Header: Depth=1
	mov	x0, sp
	bl	symByte
	tst	w0, #0xff
	b.eq	.LBB381_8
// %bb.4:                               // %"$7"
                                        //   in Loop: Header=BB381_3 Depth=1
	sub	w8, w0, #48                     // =48
	and	w9, w8, #0xff
	cmp	w9, #7                          // =7
	b.hi	.LBB381_6
// %bb.5:                               // %"$10"
                                        //   in Loop: Header=BB381_3 Depth=1
	and	x8, x8, #0xff
	orr	x19, x8, x19, lsl #3
	b	.LBB381_3
.LBB381_6:
	mov	x0, xzr
.LBB381_7:                              // %"$8"
	ldp	x30, x19, [sp, #16]             // 16-byte Folded Reload
	add	sp, sp, #32                     // =32
	ret
.LBB381_8:                              // %"$9"
	mov	w0, #8
	bfi	x0, x19, #4, #60
	b	.LBB381_7
.Lfunc_end381:
	.size	anonymous, .Lfunc_end381-anonymous
	.cfi_endproc
                                        // -- End function
	.globl	addu                            // -- Begin function addu
	.p2align	4
	.type	addu,@function
addu:                                   // @addu
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-80]!           // 16-byte Folded Spill
	str	x25, [sp, #16]                  // 8-byte Folded Spill
	stp	x24, x23, [sp, #32]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #48]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #64]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 80
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -64
	.cfi_offset w30, -72
	.cfi_offset w29, -80
	mov	x20, x1
	mov	x21, x0
	tbz	w21, #1, .LBB382_4
// %bb.1:                               // %"$4"
	tbz	w20, #1, .LBB382_6
// %bb.2:                               // %"$5"
	lsr	x8, x21, #4
	add	x0, x8, x20, lsr #4
	tbz	x0, #60, .LBB382_30
// %bb.3:                               // %"$8"
	bl	boxNum
	b	.LBB382_17
.LBB382_4:                              // %"$3"
	tbz	w20, #1, .LBB382_12
// %bb.5:
	mov	x8, x21
	b	.LBB382_7
.LBB382_6:
	mov	x8, x20
	mov	x20, x21
.LBB382_7:                              // %"$-1"
	ldp	w21, w9, [x8, #4]
	ldp	w8, w10, [x8, #-4]
	bfi	x21, x9, #32, #32
	bfi	x8, x10, #32, #32
	adds	x0, x8, x20, lsr #4
	b.lo	.LBB382_16
// %bb.8:                               // %"$14"
	mov	x1, x21
	bl	consNum
	mov	x19, x0
	adrp	x22, env
	add	x22, x22, :lo12:env
	ldr	x9, [x22]
	mov	x10, sp
	sub	x20, x10, #16                   // =16
	mov	sp, x20
	lsr	x8, x0, #32
	lsr	x11, x9, #32
	mov	x0, x20
	stp	w19, w8, [x10, #-16]
	mov	x8, x19
	stp	w9, w11, [x10, #-8]
.LBB382_9:                              // %"$16"
                                        // =>This Inner Loop Header: Depth=1
	lsr	x9, x0, #32
	stp	w0, w9, [x22]
	tbnz	w21, #1, .LBB382_18
// %bb.10:                              // %"$17"
                                        //   in Loop: Header=BB382_9 Depth=1
	ldp	w10, w9, [x21, #-4]
	bfi	x10, x9, #32, #32
	ldp	w21, w9, [x21, #4]
	bfi	x21, x9, #32, #32
	add	x22, x8, #4                     // =4
	adds	x0, x10, #1                     // =1
	b.lo	.LBB382_23
// %bb.11:                              // %"$23"
                                        //   in Loop: Header=BB382_9 Depth=1
	mov	x1, x21
	bl	consNum
	mov	x8, x0
	b	.LBB382_9
.LBB382_12:                             // %"$11"
	ldp	w9, w8, [x21, #-4]
	bfi	x9, x8, #32, #32
	ldp	w10, w8, [x20, #-4]
	bfi	x10, x8, #32, #32
	adds	x0, x9, x10
	cset	w24, hs
	bl	boxNum
	mov	x19, x0
	adrp	x22, env
	add	x22, x22, :lo12:env
	ldr	x8, [x22]
	mov	x9, sp
	sub	x23, x9, #16                    // =16
	mov	sp, x23
	lsr	x10, x0, #32
	lsr	x11, x8, #32
	mov	x0, x23
	stp	w19, w10, [x9, #-16]
	mov	x25, x19
	stp	w8, w11, [x9, #-8]
.LBB382_13:                             // %"$25"
                                        // =>This Inner Loop Header: Depth=1
	lsr	x8, x0, #32
	stp	w0, w8, [x22]
	ldp	w21, w8, [x21, #4]
	bfi	x21, x8, #32, #32
	ldp	w20, w8, [x20, #4]
	bfi	x20, x8, #32, #32
	tbnz	w21, #1, .LBB382_20
// %bb.14:                              // %"$26"
                                        //   in Loop: Header=BB382_13 Depth=1
	tbnz	w20, #1, .LBB382_25
// %bb.15:                              // %"$35"
                                        //   in Loop: Header=BB382_13 Depth=1
	ldp	w9, w8, [x21, #-4]
	bfi	x9, x8, #32, #32
	ldp	w10, w8, [x20, #-4]
	bfi	x10, x8, #32, #32
	adds	x8, x9, x10
	cset	w9, hs
	and	x10, x24, #0x1
	adds	x0, x8, x10
	cset	w8, hs
	orr	w24, w9, w8
	add	x22, x25, #4                    // =4
	bl	boxNum
	mov	x25, x0
	b	.LBB382_13
.LBB382_16:                             // %"$13"
	mov	x1, x21
	bl	consNum
.LBB382_17:                             // %"$2"
	mov	x19, x0
	b	.LBB382_36
.LBB382_18:                             // %"$19"
	adds	x0, x21, #16                    // =16
	add	x22, x8, #4                     // =4
	b.lo	.LBB382_24
// %bb.19:                              // %"$21"
	mov	x8, #1152921504606846976
	bfxil	x8, x0, #4, #60
	mov	x0, x8
	bl	boxNum
	b	.LBB382_24
.LBB382_20:                             // %"$28"
	mov	x22, x20
	tbz	w20, #1, .LBB382_26
// %bb.21:                              // %"$29"
	add	x25, x25, #4                    // =4
	lsr	x8, x21, #4
	add	x8, x8, x20, lsr #4
	and	x9, x24, #0x1
	add	x8, x8, x9
	tst	x8, #0x3000000000000000
	b.ne	.LBB382_32
.LBB382_22:                             // %"$33"
	mov	w0, #2
	bfi	x0, x8, #4, #60
	b	.LBB382_33
.LBB382_23:                             // %"$24"
	mov	x1, x21
	bl	consNum
.LBB382_24:                             // %"$18"
	lsr	x8, x0, #32
	stp	w0, w8, [x22]
	ldp	w9, w8, [x20, #8]
	b	.LBB382_35
.LBB382_25:
	mov	x22, x21
	mov	x21, x20
.LBB382_26:                             // %"$-2"
	ldp	w9, w8, [x22, #-4]
	bfi	x9, x8, #32, #32
	adds	x8, x9, x21, lsr #4
	cset	w9, hs
	and	x10, x24, #0x1
	adds	x0, x8, x10
	cset	w8, hs
	orr	w20, w9, w8
.LBB382_27:                             // %"$37"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w22, w8, [x22, #4]
	bfi	x22, x8, #32, #32
	mov	x1, x22
	bl	consNum
	mov	x8, x0
	lsr	x9, x0, #32
	stp	w8, w9, [x25, #4]
	tbz	w20, #0, .LBB382_34
// %bb.28:                              // %"$38"
                                        //   in Loop: Header=BB382_27 Depth=1
	tbnz	w22, #1, .LBB382_31
// %bb.29:                              // %"$40"
                                        //   in Loop: Header=BB382_27 Depth=1
	ldp	w10, w9, [x22, #-4]
	bfi	x10, x9, #32, #32
	adds	x0, x10, #1                     // =1
	cset	w20, hs
	mov	x25, x8
	b	.LBB382_27
.LBB382_30:                             // %"$9"
	mov	w19, #2
	bfi	x19, x0, #4, #60
	b	.LBB382_36
.LBB382_31:                             // %"$41"
	add	x25, x8, #4                     // =4
	and	x8, x20, #0x1
	add	x8, x8, x22, lsr #4
	tbz	x8, #60, .LBB382_22
.LBB382_32:                             // %"$32"
	mov	x0, x8
	bl	boxNum
.LBB382_33:                             // %"$27.sink.split"
	lsr	x8, x0, #32
	stp	w0, w8, [x25]
.LBB382_34:                             // %"$27"
	ldp	w9, w8, [x23, #8]
.LBB382_35:                             // %"$2"
	bfi	x9, x8, #32, #32
	adrp	x8, env
	str	x9, [x8, :lo12:env]
.LBB382_36:                             // %"$2"
	mov	x0, x19
	mov	sp, x29
	ldp	x20, x19, [sp, #64]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #48]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #32]             // 16-byte Folded Reload
	ldr	x25, [sp, #16]                  // 8-byte Folded Reload
	ldp	x29, x30, [sp], #80             // 16-byte Folded Reload
	ret
.Lfunc_end382:
	.size	addu, .Lfunc_end382-addu
	.cfi_endproc
                                        // -- End function
	.globl	tenfold                         // -- Begin function tenfold
	.p2align	4
	.type	tenfold,@function
tenfold:                                // @tenfold
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-32]!                // 8-byte Folded Spill
	stp	x20, x19, [sp, #16]             // 16-byte Folded Spill
	.cfi_def_cfa_offset 32
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w30, -32
	mov	x19, x0
	tbz	w19, #1, .LBB383_3
// %bb.1:                               // %"$2"
	lsr	x8, x19, #4
	add	x8, x8, x8, lsl #2
	lsl	x0, x8, #1
	tst	x0, #0xf000000000000000
	b.eq	.LBB383_8
// %bb.2:                               // %"$5"
	bl	boxNum
	mov	x19, x0
	b	.LBB383_11
.LBB383_3:                              // %"$3"
	ldp	w10, w8, [x19, #-4]
	bfi	x10, x8, #32, #32
	mov	w9, #10
	umulh	x8, x10, x9
	add	x10, x10, x10, lsl #2
	lsl	x11, x10, #1
	mov	x20, x19
.LBB383_4:                              // %"$8"
                                        // =>This Inner Loop Header: Depth=1
	lsr	x10, x11, #32
	stp	w11, w10, [x20, #-4]
	ldp	w10, w11, [x20, #4]
	bfi	x10, x11, #32, #32
	tbnz	w10, #1, .LBB383_6
// %bb.5:                               // %"$9"
                                        //   in Loop: Header=BB383_4 Depth=1
	ldp	w12, w11, [x10, #-4]
	bfi	x12, x11, #32, #32
	umulh	x13, x12, x9
	add	x11, x12, x12, lsl #2
	adds	x11, x8, x11, lsl #1
	cinc	x8, x13, hs
	mov	x20, x10
	b	.LBB383_4
.LBB383_6:                              // %"$11"
	lsr	x9, x10, #4
	mov	w10, #10
	madd	x8, x9, x10, x8
	tst	x8, #0xf000000000000000
	b.eq	.LBB383_9
// %bb.7:                               // %"$12"
	mov	x0, x8
	bl	boxNum
	b	.LBB383_10
.LBB383_8:                              // %"$6"
	mov	w19, #2
	bfi	x19, x0, #4, #60
	b	.LBB383_11
.LBB383_9:                              // %"$13"
	mov	w0, #2
	bfi	x0, x8, #4, #60
.LBB383_10:                             // %"$14"
	lsr	x8, x0, #32
	stp	w0, w8, [x20, #4]
.LBB383_11:                             // %"$4"
	mov	x0, x19
	ldp	x20, x19, [sp, #16]             // 16-byte Folded Reload
	ldr	x30, [sp], #32                  // 8-byte Folded Reload
	ret
.Lfunc_end383:
	.size	tenfold, .Lfunc_end383-tenfold
	.cfi_endproc
                                        // -- End function
	.globl	consNum                         // -- Begin function consNum
	.p2align	4
	.type	consNum,@function
consNum:                                // @consNum
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-64]!           // 16-byte Folded Spill
	stp	x24, x23, [sp, #16]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #32]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #48]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 64
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w30, -56
	.cfi_offset w29, -64
	mov	x19, x1
	mov	x20, x0
	adrp	x22, ($Avail)
	ldr	x8, [x22, :lo12:($Avail)]
	lsr	x21, x1, #32
	cbnz	x8, .LBB384_2
// %bb.1:                               // %"$2"
	adrp	x23, env
	ldr	x8, [x23, :lo12:env]
	mov	x9, sp
	sub	x10, x9, #16                    // =16
	mov	sp, x10
	stp	w19, w21, [x9, #-16]
	mov	x24, x10
	str	w8, [x24, #8]!
	lsr	x8, x8, #32
	str	w8, [x24, #4]
	str	x10, [x23, :lo12:env]
	bl	gc
	ldp	w9, w8, [x24]
	bfi	x9, x8, #32, #32
	str	x9, [x23, :lo12:env]
	ldr	x8, [x22, :lo12:($Avail)]
.LBB384_2:                              // %"$3"
	mov	x0, x8
	ldr	w9, [x0, #4]!
	ldr	w10, [x8]
	bfi	x10, x9, #32, #32
	str	x10, [x22, :lo12:($Avail)]
	lsr	x9, x20, #32
	str	w9, [x0]
	str	w20, [x8]
	stp	w19, w21, [x8, #8]
	mov	sp, x29
	ldp	x20, x19, [sp, #48]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #32]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #64             // 16-byte Folded Reload
	ret
.Lfunc_end384:
	.size	consNum, .Lfunc_end384-consNum
	.cfi_endproc
                                        // -- End function
	.globl	isIntern                        // -- Begin function isIntern
	.p2align	4
	.type	isIntern,@function
isIntern:                               // @isIntern
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x30, x21, [sp, #-32]!           // 16-byte Folded Spill
	stp	x20, x19, [sp, #16]             // 16-byte Folded Spill
	.cfi_def_cfa_offset 32
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w30, -32
	mov	x19, x0
	tbnz	w19, #1, .LBB385_11
// %bb.1:                               // %"$3"
	add	x8, x1, #8                      // =8
	b	.LBB385_3
.LBB385_2:                              // %"$27"
                                        //   in Loop: Header=BB385_3 Depth=1
	ldp	w8, w9, [x21, #8]
	bfi	x8, x9, #32, #32
.LBB385_3:                              // %"$17"
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB385_5 Depth 2
	ldp	w21, w9, [x8]
	bfi	x21, x9, #32, #32
	tst	x21, #0xf
	b.ne	.LBB385_18
// %bb.4:                               // %"$18"
                                        //   in Loop: Header=BB385_3 Depth=1
	ldp	w20, w8, [x21]
	bfi	x20, x8, #32, #32
	sub	x8, x20, #8                     // =8
.LBB385_5:                              // %"$21"
                                        //   Parent Loop BB385_3 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	w0, w9, [x8]
	bfi	x0, x9, #32, #32
	tst	x0, #0x6
	b.ne	.LBB385_7
// %bb.6:                               // %"$22"
                                        //   in Loop: Header=BB385_5 Depth=2
	add	x8, x0, #8                      // =8
	b	.LBB385_5
.LBB385_7:                              // %"$23"
                                        //   in Loop: Header=BB385_3 Depth=1
	mov	x1, x19
	bl	cmpLong
	cbz	x0, .LBB385_19
// %bb.8:                               // %"$24"
                                        //   in Loop: Header=BB385_3 Depth=1
	tbz	x0, #63, .LBB385_2
// %bb.9:                               // %"$26"
                                        //   in Loop: Header=BB385_3 Depth=1
	ldp	w9, w8, [x21, #8]
	bfi	x9, x8, #32, #32
	add	x8, x9, #8                      // =8
	b	.LBB385_3
.LBB385_10:                             // %"$15"
                                        //   in Loop: Header=BB385_11 Depth=1
	ldp	w1, w9, [x8, #8]
	bfi	x1, x9, #32, #32
.LBB385_11:                             // %"$5"
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB385_13 Depth 2
	ldp	w8, w9, [x1]
	bfi	x8, x9, #32, #32
	tst	x8, #0xf
	b.ne	.LBB385_18
// %bb.12:                              // %"$6"
                                        //   in Loop: Header=BB385_11 Depth=1
	ldp	w20, w9, [x8]
	bfi	x20, x9, #32, #32
	sub	x9, x20, #8                     // =8
.LBB385_13:                             // %"$9"
                                        //   Parent Loop BB385_11 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	w9, w10, [x9]
	bfi	x9, x10, #32, #32
	tst	x9, #0x6
	b.ne	.LBB385_15
// %bb.14:                              // %"$10"
                                        //   in Loop: Header=BB385_13 Depth=2
	add	x9, x9, #8                      // =8
	b	.LBB385_13
.LBB385_15:                             // %"$11"
                                        //   in Loop: Header=BB385_11 Depth=1
	cmp	x19, x9
	b.eq	.LBB385_19
// %bb.16:                              // %"$12"
                                        //   in Loop: Header=BB385_11 Depth=1
	b.ls	.LBB385_10
// %bb.17:                              // %"$14"
                                        //   in Loop: Header=BB385_11 Depth=1
	ldp	w8, w9, [x8, #8]
	bfi	x8, x9, #32, #32
	add	x1, x8, #8                      // =8
	b	.LBB385_11
.LBB385_18:
	mov	x20, xzr
.LBB385_19:                             // %"$4"
	mov	x0, x20
	ldp	x20, x19, [sp, #16]             // 16-byte Folded Reload
	ldp	x30, x21, [sp], #32             // 16-byte Folded Reload
	ret
.Lfunc_end385:
	.size	isIntern, .Lfunc_end385-isIntern
	.cfi_endproc
                                        // -- End function
	.globl	cmpLong                         // -- Begin function cmpLong
	.p2align	4
	.type	cmpLong,@function
cmpLong:                                // @cmpLong
	.cfi_startproc
// %bb.0:                               // %"$1"
	mov	x8, x0
	mov	w0, #1
.LBB386_1:                              // %"$2"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w10, w9, [x8, #-4]
	bfi	x10, x9, #32, #32
	ldp	w11, w9, [x1, #-4]
	bfi	x11, x9, #32, #32
	subs	x10, x10, x11
	cset	w9, lo
	cbnz	x10, .LBB386_5
// %bb.2:                               // %"$3"
                                        //   in Loop: Header=BB386_1 Depth=1
	ldp	w8, w9, [x8, #4]
	bfi	x8, x9, #32, #32
	ldp	w1, w9, [x1, #4]
	bfi	x1, x9, #32, #32
	tbnz	w8, #1, .LBB386_6
// %bb.3:                               // %"$9"
                                        //   in Loop: Header=BB386_1 Depth=1
	tbz	w1, #1, .LBB386_1
// %bb.4:                               // %"$4"
	ret
.LBB386_5:                              // %"$5"
	tbz	w9, #0, .LBB386_11
	b	.LBB386_10
.LBB386_6:                              // %"$10"
	tbnz	w1, #2, .LBB386_10
// %bb.7:                               // %"$12"
	cmp	x1, x8
	b.ne	.LBB386_9
// %bb.8:
	mov	x0, xzr
	ret
.LBB386_9:                              // %"$14"
	b.ls	.LBB386_11
.LBB386_10:
	mov	x0, #-1
	ret
.LBB386_11:                             // %"$7"
	mov	w0, #1
	ret
.Lfunc_end386:
	.size	cmpLong, .Lfunc_end386-cmpLong
	.cfi_endproc
                                        // -- End function
	.globl	need3                           // -- Begin function need3
	.p2align	4
	.type	need3,@function
need3:                                  // @need3
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	adrp	x8, ($Avail)
	ldr	x8, [x8, :lo12:($Avail)]
	cbz	x8, .LBB387_3
// %bb.1:                               // %"$3"
	ldp	w8, w9, [x8]
	bfi	x8, x9, #32, #32
	cbz	x8, .LBB387_3
// %bb.2:                               // %"$4"
	ldp	w8, w9, [x8]
	bfi	x8, x9, #32, #32
	cmp	x8, #0                          // =0
	cset	w8, ne
.LBB387_3:                              // %"$2"
	tbnz	w8, #0, .LBB387_5
// %bb.4:                               // %"$5"
	bl	gc
.LBB387_5:                              // %"$6"
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end387:
	.size	need3, .Lfunc_end387-need3
	.cfi_endproc
                                        // -- End function
	.globl	consExt                         // -- Begin function consExt
	.p2align	4
	.type	consExt,@function
consExt:                                // @consExt
	.cfi_startproc
// %bb.0:                               // %"$1"
	adrp	x8, ($ExtCnt)
	adrp	x1, SymTab+8
	add	x1, x1, :lo12:SymTab+8
	ldr	x9, [x8, :lo12:($ExtCnt)]
	add	x9, x9, #1                      // =1
	str	x9, [x8, :lo12:($ExtCnt)]
	orr	x0, x0, #0x8
	b	consSym
.Lfunc_end388:
	.size	consExt, .Lfunc_end388-consExt
	.cfi_endproc
                                        // -- End function
	.globl	isLstIntern                     // -- Begin function isLstIntern
	.p2align	4
	.type	isLstIntern,@function
isLstIntern:                            // @isLstIntern
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-32]!                // 8-byte Folded Spill
	stp	x20, x19, [sp, #16]             // 16-byte Folded Spill
	.cfi_def_cfa_offset 32
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w30, -32
	mov	x19, x1
	mov	x20, x0
	tst	x19, #0xf
	b.ne	.LBB389_3
.LBB389_1:                              // %"$3"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w9, w8, [x19]
	bfi	x9, x8, #32, #32
	ldp	w9, w8, [x9]
	bfi	x9, x8, #32, #32
	ldp	w1, w8, [x9, #8]
	bfi	x1, x8, #32, #32
	mov	x0, x20
	bl	isIntern
	cbnz	x0, .LBB389_4
// %bb.2:                               // %"$6"
                                        //   in Loop: Header=BB389_1 Depth=1
	ldp	w19, w8, [x19, #8]
	bfi	x19, x8, #32, #32
	tst	x19, #0xf
	b.eq	.LBB389_1
.LBB389_3:
	mov	x0, xzr
.LBB389_4:                              // %"$4"
	ldp	x20, x19, [sp, #16]             // 16-byte Folded Reload
	ldr	x30, [sp], #32                  // 8-byte Folded Reload
	ret
.Lfunc_end389:
	.size	isLstIntern, .Lfunc_end389-isLstIntern
	.cfi_endproc
                                        // -- End function
	.globl	getChar                         // -- Begin function getChar
	.p2align	4
	.type	getChar,@function
getChar:                                // @getChar
	.cfi_startproc
// %bb.0:                               // %"$1"
	cmp	w0, #128                        // =128
	b.lt	.LBB390_10
// %bb.1:                               // %"$3"
	cmp	w0, #255                        // =255
	b.ne	.LBB390_3
// %bb.2:
	mov	w0, #1114112
	ret
.LBB390_3:                              // %"$5"
	stp	x30, x21, [sp, #-32]!           // 16-byte Folded Spill
	stp	x20, x19, [sp, #16]             // 16-byte Folded Spill
	.cfi_def_cfa_offset 32
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w30, -32
	adrp	x19, ($Get)
	tbz	w0, #5, .LBB390_6
// %bb.4:                               // %"$8"
	tbz	w0, #4, .LBB390_7
// %bb.5:                               // %"$11"
	and	w21, w0, #0x7
	ldr	x8, [x19, :lo12:($Get)]
	blr	x8
	and	w20, w0, #0x3f
	bfi	w20, w21, #6, #3
	b	.LBB390_8
.LBB390_6:                              // %"$7"
	and	w21, w0, #0x1f
	b	.LBB390_9
.LBB390_7:                              // %"$10"
	and	w20, w0, #0xf
.LBB390_8:                              // %"$12"
	ldr	x8, [x19, :lo12:($Get)]
	blr	x8
	and	w21, w0, #0x3f
	bfi	w21, w20, #6, #9
.LBB390_9:                              // %"$9"
	ldr	x8, [x19, :lo12:($Get)]
	blr	x8
	and	w0, w0, #0x3f
	bfi	w0, w21, #6, #15
	ldp	x20, x19, [sp, #16]             // 16-byte Folded Reload
	ldp	x30, x21, [sp], #32             // 16-byte Folded Reload
.LBB390_10:                             // %"$2"
	ret
.Lfunc_end390:
	.size	getChar, .Lfunc_end390-getChar
	.cfi_endproc
                                        // -- End function
	.globl	compare                         // -- Begin function compare
	.p2align	4
	.type	compare,@function
compare:                                // @compare
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-64]!                // 8-byte Folded Spill
	stp	x24, x23, [sp, #16]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #32]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #48]             // 16-byte Folded Spill
	.cfi_def_cfa_offset 64
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w30, -64
	cmp	x0, x1
	b.ne	.LBB391_2
.LBB391_1:                              // %"$72"
	mov	x0, xzr
	b	.LBB391_9
.LBB391_2:                              // %"$3"
	mov	x20, x0
	adrp	x8, SymTab+8
	add	x8, x8, :lo12:SymTab+8
	cmp	x0, x8
	b.ne	.LBB391_4
.LBB391_3:
	mov	x0, #-1
	b	.LBB391_9
.LBB391_4:                              // %"$5"
	adrp	x22, SymTab+216
	add	x22, x22, :lo12:SymTab+216
	cmp	x20, x22
	b.ne	.LBB391_6
.LBB391_5:
	mov	w0, #1
	b	.LBB391_9
.LBB391_6:                              // %"$7"
	mov	x19, x1
	tst	x20, #0x6
	b.eq	.LBB391_10
// %bb.7:                               // %"$10"
	tst	x19, #0x6
	b.eq	.LBB391_13
// %bb.8:                               // %"$13"
	mov	x0, x20
	mov	x1, x19
	bl	cmpNum
.LBB391_9:                              // %"$73"
	ldp	x20, x19, [sp, #48]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #32]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #16]             // 16-byte Folded Reload
	ldr	x30, [sp], #64                  // 8-byte Folded Reload
	ret
.LBB391_10:                             // %"$9"
	tbz	w20, #3, .LBB391_14
// %bb.11:                              // %"$17"
	tst	x19, #0x6
	b.eq	.LBB391_16
// %bb.12:
	mov	w8, #1
	b	.LBB391_17
.LBB391_13:                             // %"$12"
	cmp	x19, x8
	b.ne	.LBB391_3
	b	.LBB391_5
.LBB391_14:                             // %"$16"
	tst	x19, #0xf
	b.eq	.LBB391_20
// %bb.15:                              // %"$79"
	cmp	x19, x22
	b.eq	.LBB391_3
	b	.LBB391_5
.LBB391_16:                             // %"$20"
	cmp	x19, x8
	cset	w8, eq
.LBB391_17:                             // %"$19"
	tbnz	w8, #0, .LBB391_5
// %bb.18:                              // %"$21"
	tst	x19, #0xf
	b.eq	.LBB391_31
// %bb.19:                              // %"$24"
	cmp	x19, x22
	cset	w8, eq
	b	.LBB391_32
.LBB391_20:                             // %"$78"
	mov	x8, sp
	adrp	x9, ($StkLimit)
	ldr	x9, [x9, :lo12:($StkLimit)]
	cmp	x9, x8
	b.hi	.LBB391_62
// %bb.21:
	adrp	x24, ($Signal)
	mov	x21, x20
	mov	x23, x19
.LBB391_22:                             // %"$85"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w0, w8, [x21]
	bfi	x0, x8, #32, #32
	ldp	w1, w8, [x23]
	bfi	x1, x8, #32, #32
	bl	compare
	cbnz	x0, .LBB391_9
// %bb.23:                              // %"$86"
                                        //   in Loop: Header=BB391_22 Depth=1
	ldp	w21, w8, [x21, #8]
	bfi	x21, x8, #32, #32
	tst	x21, #0xf
	b.ne	.LBB391_58
// %bb.24:                              // %"$89"
                                        //   in Loop: Header=BB391_22 Depth=1
	ldp	w23, w8, [x23, #8]
	bfi	x23, x8, #32, #32
	tst	x23, #0xf
	b.ne	.LBB391_59
// %bb.25:                              // %"$91"
                                        //   in Loop: Header=BB391_22 Depth=1
	cmp	x21, x20
	b.ne	.LBB391_27
// %bb.26:                              // %"$97"
                                        //   in Loop: Header=BB391_22 Depth=1
	cmp	x23, x19
	cset	w8, eq
	b	.LBB391_28
.LBB391_27:                             //   in Loop: Header=BB391_22 Depth=1
	mov	w8, wzr
.LBB391_28:                             // %"$96"
                                        //   in Loop: Header=BB391_22 Depth=1
	tbnz	w8, #0, .LBB391_1
// %bb.29:                              // %"$98"
                                        //   in Loop: Header=BB391_22 Depth=1
	ldr	w8, [x24, :lo12:($Signal)]
	cbz	w8, .LBB391_22
// %bb.30:                              // %"$100"
                                        //   in Loop: Header=BB391_22 Depth=1
	mov	x0, xzr
	bl	sighandler
	b	.LBB391_22
.LBB391_31:
	mov	w8, #1
.LBB391_32:                             // %"$23"
	tbnz	w8, #0, .LBB391_3
// %bb.33:                              // %"$25"
	ldp	w9, w8, [x20, #-8]
	bfi	x9, x8, #32, #32
	and	x8, x9, #0xfffffffffffffff7
	tst	x8, #0x6
	b.ne	.LBB391_35
.LBB391_34:                             // %"$28"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w8, w9, [x8, #8]
	bfi	x8, x9, #32, #32
	tst	x8, #0x6
	b.eq	.LBB391_34
.LBB391_35:                             // %"$29"
	ldp	w10, w9, [x19, #-8]
	bfi	x10, x9, #32, #32
	and	x9, x10, #0xfffffffffffffff7
	tst	x9, #0x6
	b.ne	.LBB391_37
.LBB391_36:                             // %"$31"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w9, w10, [x9, #8]
	bfi	x9, x10, #32, #32
	tst	x9, #0x6
	b.eq	.LBB391_36
.LBB391_37:                             // %"$32"
	cmp	x8, #2                          // =2
	b.ne	.LBB391_41
// %bb.38:                              // %"$35"
	cmp	x9, #2                          // =2
	b.ne	.LBB391_3
// %bb.39:                              // %"$37"
	cmp	x20, x19
	b.ne	.LBB391_1
// %bb.40:                              // %"$39"
	b.hi	.LBB391_3
	b	.LBB391_5
.LBB391_41:                             // %"$34"
	cmp	x9, #2                          // =2
	b.eq	.LBB391_5
.LBB391_42:                             // %"$45"
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB391_44 Depth 2
                                        //     Child Loop BB391_49 Depth 2
                                        //     Child Loop BB391_52 Depth 2
	tbz	w8, #1, .LBB391_46
// %bb.43:                              // %"$49"
                                        //   in Loop: Header=BB391_42 Depth=1
	tst	x8, #0x6
	b.ne	.LBB391_45
.LBB391_44:                             // %"$50"
                                        //   Parent Loop BB391_42 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	w8, w10, [x8, #8]
	bfi	x8, x10, #32, #32
	tst	x8, #0x6
	b.eq	.LBB391_44
.LBB391_45:                             // %"$51"
                                        //   in Loop: Header=BB391_42 Depth=1
	ubfx	x10, x8, #4, #58
	mov	x8, xzr
	b	.LBB391_47
.LBB391_46:                             // %"$47"
                                        //   in Loop: Header=BB391_42 Depth=1
	ldp	w10, w11, [x8, #-4]
	bfi	x10, x11, #32, #32
	ldp	w8, w11, [x8, #4]
	bfi	x8, x11, #32, #32
.LBB391_47:                             // %"$48"
                                        //   in Loop: Header=BB391_42 Depth=1
	tbz	w9, #1, .LBB391_51
// %bb.48:                              // %"$55"
                                        //   in Loop: Header=BB391_42 Depth=1
	tst	x9, #0x6
	b.ne	.LBB391_50
.LBB391_49:                             // %"$56"
                                        //   Parent Loop BB391_42 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	w9, w11, [x9, #8]
	bfi	x9, x11, #32, #32
	tst	x9, #0x6
	b.eq	.LBB391_49
.LBB391_50:                             // %"$57"
                                        //   in Loop: Header=BB391_42 Depth=1
	ubfx	x11, x9, #4, #58
	mov	x9, xzr
	b	.LBB391_52
.LBB391_51:                             // %"$53"
                                        //   in Loop: Header=BB391_42 Depth=1
	ldp	w11, w12, [x9, #-4]
	bfi	x11, x12, #32, #32
	ldp	w9, w12, [x9, #4]
	bfi	x9, x12, #32, #32
.LBB391_52:                             // %"$58"
                                        //   Parent Loop BB391_42 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	and	x12, x10, #0xff
	subs	x12, x12, w11, uxtb
	b.ne	.LBB391_60
// %bb.53:                              // %"$60"
                                        //   in Loop: Header=BB391_52 Depth=2
	lsr	x10, x10, #8
	cbz	x10, .LBB391_55
// %bb.54:                              // %"$64"
                                        //   in Loop: Header=BB391_52 Depth=2
	lsr	x11, x11, #8
	cbnz	x11, .LBB391_52
	b	.LBB391_5
.LBB391_55:                             // %"$66"
                                        //   in Loop: Header=BB391_42 Depth=1
	lsr	x10, x11, #8
	cbnz	x10, .LBB391_3
// %bb.56:                              // %"$68"
                                        //   in Loop: Header=BB391_42 Depth=1
	cbz	x8, .LBB391_61
// %bb.57:                              // %"$70"
                                        //   in Loop: Header=BB391_42 Depth=1
	cbnz	x9, .LBB391_42
	b	.LBB391_5
.LBB391_58:                             // %"$90"
	ldp	w1, w8, [x23, #8]
	bfi	x1, x8, #32, #32
	mov	x0, x21
	bl	compare
	b	.LBB391_9
.LBB391_59:                             // %"$92"
	cmp	x23, x22
	b.eq	.LBB391_3
	b	.LBB391_5
.LBB391_60:                             // %"$59"
	mov	w8, #1
	cmp	x12, #0                         // =0
	mov	x9, #-1
	csel	x0, x8, x9, gt
	b	.LBB391_9
.LBB391_61:                             // %"$69"
	cbnz	x9, .LBB391_3
	b	.LBB391_1
.LBB391_62:                             // %"$83"
	mov	x0, xzr
	bl	stkErr
.Lfunc_end391:
	.size	compare, .Lfunc_end391-compare
	.cfi_endproc
                                        // -- End function
	.globl	cmpNum                          // -- Begin function cmpNum
	.p2align	4
	.type	cmpNum,@function
cmpNum:                                 // @cmpNum
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	tbz	w0, #3, .LBB392_3
// %bb.1:                               // %"$3"
	tbz	w1, #3, .LBB392_6
// %bb.2:                               // %"$9"
	and	x8, x1, #0xfffffffffffffff7
	and	x1, x0, #0xfffffffffffffff7
	mov	x0, x8
	b	.LBB392_5
.LBB392_3:                              // %"$2"
	tbz	w1, #3, .LBB392_5
// %bb.4:
	mov	w0, #1
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.LBB392_5:                              // %"$4"
	bl	cmpu
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.LBB392_6:
	mov	x0, #-1
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end392:
	.size	cmpNum, .Lfunc_end392-cmpNum
	.cfi_endproc
                                        // -- End function
	.globl	cmpu                            // -- Begin function cmpu
	.p2align	4
	.type	cmpu,@function
cmpu:                                   // @cmpu
	.cfi_startproc
// %bb.0:                               // %"$1"
	mov	x8, x0
	tbz	w8, #1, .LBB393_3
// %bb.1:                               // %"$2"
	mov	w9, #1
	cmp	x1, x8
	cset	w10, hi
	tst	w1, #0x4
	csel	w9, w9, w10, ne
	tbz	w9, #0, .LBB393_9
// %bb.2:
	mov	x0, #-1
	ret
.LBB393_3:                              // %"$3"
	tbnz	w1, #1, .LBB393_11
// %bb.4:                               // %"$15.preheader"
	mov	x10, xzr
	mov	x9, xzr
	mov	w0, #1
.LBB393_5:                              // %"$15"
                                        // =>This Inner Loop Header: Depth=1
	mov	x11, x1
	mov	x12, x8
	ldp	w8, w13, [x8, #4]
	bfi	x8, x13, #32, #32
	ldp	w1, w13, [x1, #4]
	bfi	x1, x13, #32, #32
	cmp	x8, x1
	b.eq	.LBB393_12
// %bb.6:                               // %"$16"
                                        //   in Loop: Header=BB393_5 Depth=1
	tbnz	w8, #1, .LBB393_17
// %bb.7:                               // %"$27"
                                        //   in Loop: Header=BB393_5 Depth=1
	tbnz	w1, #1, .LBB393_25
// %bb.8:                               // %"$36"
                                        //   in Loop: Header=BB393_5 Depth=1
	lsr	x13, x10, #32
	lsr	x14, x9, #32
	stp	w10, w13, [x12, #4]
	mov	x10, x12
	stp	w9, w14, [x11, #4]
	mov	x9, x11
	b	.LBB393_5
.LBB393_9:                              // %"$8"
	cmp	x1, x8
	b.ne	.LBB393_11
// %bb.10:
	mov	x0, xzr
	ret
.LBB393_11:                             // %"$10"
	mov	w0, #1
	b	.LBB393_26
.LBB393_12:                             // %"$19.preheader"
	mov	w0, #1
.LBB393_13:                             // %"$19"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w8, w13, [x12, #-4]
	bfi	x8, x13, #32, #32
	ldp	w13, w14, [x11, #-4]
	bfi	x13, x14, #32, #32
	cmp	x13, x8
	b.hi	.LBB393_21
// %bb.14:                              // %"$20"
                                        //   in Loop: Header=BB393_13 Depth=1
	cmp	x8, x13
	b.hi	.LBB393_25
// %bb.15:                              // %"$23"
                                        //   in Loop: Header=BB393_13 Depth=1
	cbz	x10, .LBB393_22
// %bb.16:                              // %"$25"
                                        //   in Loop: Header=BB393_13 Depth=1
	mov	x8, x10
	ldr	w13, [x8, #4]!
	ldr	w14, [x8, #4]
	bfi	x13, x14, #32, #32
	str	w12, [x8]
	lsr	x12, x12, #32
	str	w12, [x8, #4]
	mov	x8, x9
	ldr	w14, [x8, #4]!
	ldr	w12, [x8, #4]
	bfi	x14, x12, #32, #32
	lsr	x15, x11, #32
	stp	w11, w15, [x8]
	mov	x12, x10
	mov	x11, x9
	mov	x10, x13
	mov	x9, x14
	b	.LBB393_13
.LBB393_17:                             // %"$28"
	mov	w13, #1
	cmp	x1, x8
	cset	w14, hi
	tst	w1, #0x4
	csel	w13, w13, w14, ne
	tbz	w13, #0, .LBB393_19
// %bb.18:
	mov	x0, #-1
	b	.LBB393_25
.LBB393_19:                             // %"$32"
	cmp	x1, x8
	b.ne	.LBB393_23
// %bb.20:
	mov	x0, xzr
	b	.LBB393_25
.LBB393_21:
	mov	x0, #-1
	b	.LBB393_25
.LBB393_22:
	mov	x0, xzr
	b	.LBB393_25
.LBB393_23:                             // %"$34"
	mov	w0, #1
	b	.LBB393_25
.LBB393_24:                             // %"$39"
                                        //   in Loop: Header=BB393_25 Depth=1
	mov	x8, x10
	ldr	w13, [x8, #4]!
	ldr	w14, [x8, #4]
	bfi	x13, x14, #32, #32
	str	w12, [x8]
	lsr	x12, x12, #32
	str	w12, [x8, #4]
	mov	x8, x9
	ldr	w14, [x8, #4]!
	ldr	w12, [x8, #4]
	bfi	x14, x12, #32, #32
	lsr	x15, x11, #32
	stp	w11, w15, [x8]
	mov	x12, x10
	mov	x11, x9
	mov	x10, x13
	mov	x9, x14
.LBB393_25:                             // %"$38"
                                        // =>This Inner Loop Header: Depth=1
	cbnz	x10, .LBB393_24
.LBB393_26:                             // %"$4"
	ret
.Lfunc_end393:
	.size	cmpu, .Lfunc_end393-cmpu
	.cfi_endproc
                                        // -- End function
	.globl	rdl                             // -- Begin function rdl
	.p2align	4
	.type	rdl,@function
rdl:                                    // @rdl
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x30, x23, [sp, #-48]!           // 16-byte Folded Spill
	stp	x22, x21, [sp, #16]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #32]             // 16-byte Folded Spill
	.cfi_def_cfa_offset 48
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w30, -48
	mov	x20, x1
	mov	x19, x0
	adrp	x23, ($Get)
	adrp	x21, ($Delim)
	add	x21, x21, :lo12:($Delim)
	adrp	x22, SymTab+8
	add	x22, x22, :lo12:SymTab+8
	b	.LBB394_3
.LBB394_1:                              // %"$22"
                                        //   in Loop: Header=BB394_3 Depth=1
	mov	w0, wzr
	bl	read0
.LBB394_2:                              // %"$7.sink.split"
                                        //   in Loop: Header=BB394_3 Depth=1
	mov	x1, x22
	bl	cons
	lsr	x8, x0, #32
	stp	w0, w8, [x20, #8]
	mov	x20, x0
.LBB394_3:                              // %"$2"
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB394_14 Depth 2
	bl	skip
	cmp	w0, #41                         // =41
	b.eq	.LBB394_21
// %bb.4:                               // %"$3"
                                        //   in Loop: Header=BB394_3 Depth=1
	cmp	w0, #93                         // =93
	b.eq	.LBB394_22
// %bb.5:                               // %"$6"
                                        //   in Loop: Header=BB394_3 Depth=1
	cmp	w0, #46                         // =46
	b.ne	.LBB394_8
// %bb.6:                               // %"$9"
                                        //   in Loop: Header=BB394_3 Depth=1
	ldr	x8, [x23, :lo12:($Get)]
	blr	x8
	mov	w1, w0
	mov	x0, x21
	bl	strchr2
	cbnz	x0, .LBB394_16
// %bb.7:                               // %"$10"
                                        //   in Loop: Header=BB394_3 Depth=1
	mov	w0, #46
	bl	rdAtom
	b	.LBB394_2
.LBB394_8:                              // %"$8"
                                        //   in Loop: Header=BB394_3 Depth=1
	cmp	w0, #126                        // =126
	b.ne	.LBB394_1
// %bb.9:                               // %"$23"
                                        //   in Loop: Header=BB394_3 Depth=1
	ldr	x8, [x23, :lo12:($Get)]
	blr	x8
	mov	w0, wzr
	bl	read0
	lsr	x8, x0, #32
	stp	w0, w8, [x20, #8]
	tst	x0, #0x6
	b.ne	.LBB394_13
// %bb.10:                              // %"$25"
                                        //   in Loop: Header=BB394_3 Depth=1
	tbz	w0, #3, .LBB394_12
// %bb.11:                              // %"$28"
                                        //   in Loop: Header=BB394_3 Depth=1
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB394_13
.LBB394_12:                             // %"$27"
                                        //   in Loop: Header=BB394_3 Depth=1
	bl	evList
.LBB394_13:                             // %"$24"
                                        //   in Loop: Header=BB394_3 Depth=1
	lsr	x8, x0, #32
	stp	w0, w8, [x20, #8]
.LBB394_14:                             // %"$29"
                                        //   Parent Loop BB394_3 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldrb	w8, [x20, #8]
	tst	w8, #0xf
	b.ne	.LBB394_3
// %bb.15:                              // %"$30"
                                        //   in Loop: Header=BB394_14 Depth=2
	ldp	w20, w8, [x20, #8]
	bfi	x20, x8, #32, #32
	b	.LBB394_14
.LBB394_16:                             // %"$11"
	bl	skip
	cmp	w0, #41                         // =41
	b.ne	.LBB394_18
// %bb.17:
	mov	w8, #1
	tbz	w8, #0, .LBB394_19
	b	.LBB394_20
.LBB394_18:                             // %"$13"
	cmp	w0, #93                         // =93
	cset	w8, eq
	tbnz	w8, #0, .LBB394_20
.LBB394_19:                             // %"$15"
	mov	w0, wzr
	bl	read0
	mov	x19, x0
.LBB394_20:                             // %"$16"
	lsr	x8, x19, #32
	stp	w19, w8, [x20, #8]
	bl	skip
	cmp	w0, #41                         // =41
	b.ne	.LBB394_23
.LBB394_21:                             // %"$5"
	ldr	x8, [x23, :lo12:($Get)]
	blr	x8
.LBB394_22:                             // %"$4"
	ldp	x20, x19, [sp, #32]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #16]             // 16-byte Folded Reload
	ldp	x30, x23, [sp], #48             // 16-byte Folded Reload
	ret
.LBB394_23:                             // %"$18"
	adrp	x8, ($Chr)
	ldr	w8, [x8, :lo12:($Chr)]
	cmp	w8, #93                         // =93
	b.eq	.LBB394_22
// %bb.24:                              // %"$21"
	adrp	x2, .L$45
	add	x2, x2, :lo12:.L$45
	mov	x0, xzr
	mov	x1, x19
	mov	x3, xzr
	bl	err
.Lfunc_end394:
	.size	rdl, .Lfunc_end394-rdl
	.cfi_endproc
                                        // -- End function
	.globl	comment                         // -- Begin function comment
	.p2align	4
	.type	comment,@function
comment:                                // @comment
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-32]!                // 8-byte Folded Spill
	stp	x20, x19, [sp, #16]             // 16-byte Folded Spill
	.cfi_def_cfa_offset 32
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w30, -32
	adrp	x19, ($Get)
	ldr	x8, [x19, :lo12:($Get)]
	blr	x8
	cmp	w0, #123                        // =123
	b.ne	.LBB395_2
// %bb.1:                               // %"$5.preheader"
	mov	x20, xzr
	b	.LBB395_6
.LBB395_2:                              // %"$17"
                                        // =>This Inner Loop Header: Depth=1
	cmp	w0, #10                         // =10
	b.eq	.LBB395_15
// %bb.3:                               // %"$18"
                                        //   in Loop: Header=BB395_2 Depth=1
	tbnz	w0, #31, .LBB395_15
// %bb.4:                               // %"$20"
                                        //   in Loop: Header=BB395_2 Depth=1
	ldr	x8, [x19, :lo12:($Get)]
	blr	x8
	b	.LBB395_2
.LBB395_5:                              // %"$10"
                                        //   in Loop: Header=BB395_6 Depth=1
	add	x20, x20, #1                    // =1
.LBB395_6:                              // %"$5"
                                        // =>This Inner Loop Header: Depth=1
	ldr	x8, [x19, :lo12:($Get)]
	blr	x8
	tbnz	w0, #31, .LBB395_15
// %bb.7:                               // %"$6"
                                        //   in Loop: Header=BB395_6 Depth=1
	cmp	w0, #35                         // =35
	b.ne	.LBB395_9
// %bb.8:                               // %"$9"
                                        //   in Loop: Header=BB395_6 Depth=1
	ldr	x8, [x19, :lo12:($Get)]
	blr	x8
	cmp	w0, #123                        // =123
	cset	w8, eq
	cbnz	w8, .LBB395_5
	b	.LBB395_10
.LBB395_9:                              //   in Loop: Header=BB395_6 Depth=1
	mov	w8, wzr
	cbnz	w8, .LBB395_5
.LBB395_10:                             // %"$11"
                                        //   in Loop: Header=BB395_6 Depth=1
	cmp	w0, #125                        // =125
	b.ne	.LBB395_13
// %bb.11:                              // %"$14"
                                        //   in Loop: Header=BB395_6 Depth=1
	ldr	x8, [x19, :lo12:($Get)]
	blr	x8
	cmp	w0, #35                         // =35
	b.ne	.LBB395_14
// %bb.12:                              // %"$15"
                                        //   in Loop: Header=BB395_6 Depth=1
	sub	x20, x20, #1                    // =1
	lsr	x8, x20, #63
	tbz	w8, #0, .LBB395_6
	b	.LBB395_15
.LBB395_13:                             //   in Loop: Header=BB395_6 Depth=1
	mov	w8, wzr
	tbz	w8, #0, .LBB395_6
	b	.LBB395_15
.LBB395_14:                             //   in Loop: Header=BB395_6 Depth=1
	mov	w8, wzr
	tbz	w8, #0, .LBB395_6
.LBB395_15:                             // %"$4"
	ldr	x8, [x19, :lo12:($Get)]
	blr	x8
	ldp	x20, x19, [sp, #16]             // 16-byte Folded Reload
	ldr	x30, [sp], #32                  // 8-byte Folded Reload
	ret
.Lfunc_end395:
	.size	comment, .Lfunc_end395-comment
	.cfi_endproc
                                        // -- End function
	.globl	getParse                        // -- Begin function getParse
	.p2align	4
	.type	getParse,@function
getParse:                               // @getParse
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x30, x19, [sp, #-16]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w19, -8
	.cfi_offset w30, -16
	adrp	x8, env+80
	ldr	x19, [x8, :lo12:env+80]
	mov	x0, x19
	bl	symByte
	ands	w0, w0, #0xff
	b.ne	.LBB396_2
// %bb.1:                               // %"$3"
	ldr	w8, [x19, #16]!
	ldr	w9, [x19, #4]
	and	w10, w8, #0xff
	bfi	x8, x9, #32, #32
	lsr	x11, x8, #8
	ubfx	x9, x9, #8, #24
	stp	w11, w9, [x19]
	cmp	x8, #0                          // =0
	csinv	w0, w10, wzr, ne
.LBB396_2:                              // %"$4"
	adrp	x8, ($Chr)
	str	w0, [x8, :lo12:($Chr)]
	ldp	x30, x19, [sp], #16             // 16-byte Folded Reload
	ret
.Lfunc_end396:
	.size	getParse, .Lfunc_end396-getParse
	.cfi_endproc
                                        // -- End function
	.globl	_putUART1                       // -- Begin function _putUART1
	.p2align	4
	.type	_putUART1,@function
_putUART1:                              // @_putUART1
	.cfi_startproc
// %bb.0:                               // %"$1"
	mov	w8, #20544
	movk	w8, #65057, lsl #16
.LBB397_1:                              // %"$2"
                                        // =>This Inner Loop Header: Depth=1
	ldrb	w9, [x8, #20]
	tbz	w9, #5, .LBB397_1
// %bb.2:                               // %"$4"
	and	w9, w0, #0xff
	str	w9, [x8]
	ret
.Lfunc_end397:
	.size	_putUART1, .Lfunc_end397-_putUART1
	.cfi_endproc
                                        // -- End function
	.globl	evCnt                           // -- Begin function evCnt
	.p2align	4
	.type	evCnt,@function
evCnt:                                  // @evCnt
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x30, x19, [sp, #-16]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w19, -8
	.cfi_offset w30, -16
	mov	x19, x0
	ldp	w1, w8, [x1]
	bfi	x1, x8, #32, #32
	tst	x1, #0x6
	b.ne	.LBB398_4
// %bb.1:                               // %"$3"
	tbz	w1, #3, .LBB398_3
// %bb.2:                               // %"$6"
	ldp	w1, w8, [x1]
	bfi	x1, x8, #32, #32
	b	.LBB398_4
.LBB398_3:                              // %"$5"
	mov	x0, x1
	bl	evList
	mov	x1, x0
.LBB398_4:                              // %"$2"
	mov	x0, x19
	bl	xCnt
	ldp	x30, x19, [sp], #16             // 16-byte Folded Reload
	ret
.Lfunc_end398:
	.size	evCnt, .Lfunc_end398-evCnt
	.cfi_endproc
                                        // -- End function
	.globl	xCnt                            // -- Begin function xCnt
	.p2align	4
	.type	xCnt,@function
xCnt:                                   // @xCnt
	.cfi_startproc
// %bb.0:                               // %"$1"
	tbz	w1, #1, .LBB399_2
// %bb.1:                               // %"$3"
	lsr	x8, x1, #4
	tst	x1, #0x8
	cneg	x0, x8, ne
	ret
.LBB399_2:                              // %"$2"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	bl	cntErr
.Lfunc_end399:
	.size	xCnt, .Lfunc_end399-xCnt
	.cfi_endproc
                                        // -- End function
	.globl	cntErr                          // -- Begin function cntErr
	.p2align	4
	.type	cntErr,@function
cntErr:                                 // @cntErr
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	adrp	x2, .L$10
	add	x2, x2, :lo12:.L$10
	mov	x3, xzr
	bl	err
.Lfunc_end400:
	.size	cntErr, .Lfunc_end400-cntErr
	.cfi_endproc
                                        // -- End function
	.globl	evSym                           // -- Begin function evSym
	.p2align	4
	.type	evSym,@function
evSym:                                  // @evSym
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	tst	x0, #0x6
	b.ne	.LBB401_4
// %bb.1:                               // %"$3"
	tbz	w0, #3, .LBB401_3
// %bb.2:                               // %"$6"
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB401_4
.LBB401_3:                              // %"$5"
	bl	evList
.LBB401_4:                              // %"$2"
	bl	xSym
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end401:
	.size	evSym, .Lfunc_end401-evSym
	.cfi_endproc
                                        // -- End function
	.globl	bufSize                         // -- Begin function bufSize
	.p2align	4
	.type	bufSize,@function
bufSize:                                // @bufSize
	.cfi_startproc
// %bb.0:                               // %"$1"
	mov	x8, x0
	mov	w0, #1
	tbz	w8, #2, .LBB402_2
.LBB402_1:                              // %"$3"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w8, w9, [x8, #4]
	bfi	x8, x9, #32, #32
	add	x0, x0, #8                      // =8
	tbnz	w8, #2, .LBB402_1
.LBB402_2:                              // %"$4"
	lsr	x8, x8, #4
	cbz	x8, .LBB402_4
.LBB402_3:                              // %"$6"
                                        // =>This Inner Loop Header: Depth=1
	lsr	x8, x8, #8
	add	x0, x0, #1                      // =1
	cbnz	x8, .LBB402_3
.LBB402_4:                              // %"$7"
	ret
.Lfunc_end402:
	.size	bufSize, .Lfunc_end402-bufSize
	.cfi_endproc
                                        // -- End function
	.globl	bufString                       // -- Begin function bufString
	.p2align	4
	.type	bufString,@function
bufString:                              // @bufString
	.cfi_startproc
// %bb.0:                               // %"$1"
	sub	sp, sp, #48                     // =48
	stp	x0, x30, [sp, #8]               // 8-byte Folded Spill
	stp	x20, x19, [sp, #32]             // 16-byte Folded Spill
	.cfi_def_cfa_offset 48
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w30, -32
	mov	x19, x1
	str	xzr, [sp]
	mov	x20, x1
.LBB403_1:                              // %"$2"
                                        // =>This Inner Loop Header: Depth=1
	mov	x0, sp
	bl	symByte
	tst	w0, #0xff
	strb	w0, [x20]
	b.eq	.LBB403_3
// %bb.2:                               // %"$3"
                                        //   in Loop: Header=BB403_1 Depth=1
	add	x20, x20, #1                    // =1
	b	.LBB403_1
.LBB403_3:                              // %"$4"
	mov	x0, x19
	ldp	x20, x19, [sp, #32]             // 16-byte Folded Reload
	ldr	x30, [sp, #16]                  // 8-byte Folded Reload
	add	sp, sp, #48                     // =48
	ret
.Lfunc_end403:
	.size	bufString, .Lfunc_end403-bufString
	.cfi_endproc
                                        // -- End function
	.globl	xSym                            // -- Begin function xSym
	.p2align	4
	.type	xSym,@function
xSym:                                   // @xSym
	.cfi_startproc
// %bb.0:                               // %"$1"
	eor	w8, w0, #0x8
	tst	x8, #0xe
	b.eq	.LBB404_2
// %bb.1:                               // %"$3"
	stp	x29, x30, [sp, #-48]!           // 16-byte Folded Spill
	str	x21, [sp, #16]                  // 8-byte Folded Spill
	stp	x20, x19, [sp, #32]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 48
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -32
	.cfi_offset w30, -40
	.cfi_offset w29, -48
	mov	x8, sp
	sub	x1, x8, #32                     // =32
	mov	sp, x1
	mov	w9, #4
	stp	w9, wzr, [x8, #-32]
	mov	w8, #2
	mov	x19, x1
	str	w8, [x19, #16]!
	str	wzr, [x19, #4]
	adrp	x20, env
	ldr	x8, [x20, :lo12:env]
	mov	x21, x1
	str	w8, [x21, #24]!
	lsr	x8, x8, #32
	str	w8, [x21, #4]
	str	x19, [x20, :lo12:env]
	bl	pack
	ldp	w0, w8, [x19]
	bfi	x0, x8, #32, #32
	bl	consStr
	ldp	w9, w8, [x21]
	bfi	x9, x8, #32, #32
	str	x9, [x20, :lo12:env]
	mov	sp, x29
	ldp	x20, x19, [sp, #32]             // 16-byte Folded Reload
	ldr	x21, [sp, #16]                  // 8-byte Folded Reload
	ldp	x29, x30, [sp], #48             // 16-byte Folded Reload
.LBB404_2:                              // %"$4"
	ret
.Lfunc_end404:
	.size	xSym, .Lfunc_end404-xSym
	.cfi_endproc
                                        // -- End function
	.globl	pack                            // -- Begin function pack
	.p2align	4
	.type	pack,@function
pack:                                   // @pack
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-48]!           // 16-byte Folded Spill
	str	x21, [sp, #16]                  // 8-byte Folded Spill
	stp	x20, x19, [sp, #32]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 48
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -32
	.cfi_offset w30, -40
	.cfi_offset w29, -48
	mov	x19, x1
	mov	x20, x0
	tst	x0, #0xf
	b.ne	.LBB405_3
// %bb.1:                               // %"$2"
	mov	x8, sp
	adrp	x9, ($StkLimit)
	ldr	x9, [x9, :lo12:($StkLimit)]
	cmp	x9, x8
	b.hi	.LBB405_16
.LBB405_2:                              // %"$6"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w0, w8, [x20]
	bfi	x0, x8, #32, #32
	ldp	w20, w8, [x20, #8]
	bfi	x20, x8, #32, #32
	mov	x1, x19
	bl	pack
	tst	x20, #0xf
	b.eq	.LBB405_2
.LBB405_3:                              // %"$3"
	adrp	x8, SymTab+8
	add	x8, x8, :lo12:SymTab+8
	cmp	x20, x8
	b.eq	.LBB405_10
// %bb.4:                               // %"$10"
	tst	x20, #0x6
	b.eq	.LBB405_6
// %bb.5:                               // %"$12"
	mov	x0, x20
	mov	x1, xzr
	mov	w2, wzr
	mov	w3, wzr
	mov	x4, x19
	bl	fmtNum
	b	.LBB405_10
.LBB405_6:                              // %"$11"
	ldp	w21, w8, [x20, #-8]
	bfi	x21, x8, #32, #32
	tbz	w21, #3, .LBB405_11
// %bb.7:                               // %"$14"
	mov	w0, #123
	mov	x1, x19
	bl	byteSym
	and	x8, x21, #0xfffffffffffffff7
	tst	x8, #0x6
	b.ne	.LBB405_9
.LBB405_8:                              // %"$16"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w8, w9, [x8, #8]
	bfi	x8, x9, #32, #32
	tst	x8, #0x6
	b.eq	.LBB405_8
.LBB405_9:                              // %"$17"
	and	x0, x8, #0xfffffffffffffff7
	mov	x1, x19
	bl	packExtNm
	mov	w0, #125
	mov	x1, x19
	bl	byteSym
.LBB405_10:                             // %"$9"
	mov	sp, x29
	ldp	x20, x19, [sp, #32]             // 16-byte Folded Reload
	ldr	x21, [sp, #16]                  // 8-byte Folded Reload
	ldp	x29, x30, [sp], #48             // 16-byte Folded Reload
	ret
.LBB405_11:                             // %"$18"
                                        // =>This Inner Loop Header: Depth=1
	tst	x21, #0x6
	b.ne	.LBB405_13
// %bb.12:                              // %"$19"
                                        //   in Loop: Header=BB405_11 Depth=1
	ldp	w21, w8, [x21, #8]
	bfi	x21, x8, #32, #32
	b	.LBB405_11
.LBB405_13:                             // %"$20"
	mov	x8, sp
	sub	x20, x8, #16                    // =16
	mov	sp, x20
	stp	wzr, wzr, [x8, #-16]
	lsr	x9, x21, #32
	stp	w21, w9, [x8, #-8]
.LBB405_14:                             // %"$21"
                                        // =>This Inner Loop Header: Depth=1
	mov	x0, x20
	bl	symByte
	tst	w0, #0xff
	b.eq	.LBB405_10
// %bb.15:                              // %"$22"
                                        //   in Loop: Header=BB405_14 Depth=1
	mov	x1, x19
	bl	byteSym
	b	.LBB405_14
.LBB405_16:                             // %"$4"
	mov	x0, xzr
	bl	stkErr
.Lfunc_end405:
	.size	pack, .Lfunc_end405-pack
	.cfi_endproc
                                        // -- End function
	.globl	fmtNum                          // -- Begin function fmtNum
	.p2align	4
	.type	fmtNum,@function
fmtNum:                                 // @fmtNum
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-96]!           // 16-byte Folded Spill
	stp	x28, x27, [sp, #16]             // 16-byte Folded Spill
	stp	x26, x25, [sp, #32]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #48]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #64]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #80]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	mov	x19, x4
	mov	w20, w3
	mov	w21, w2
	mov	x22, x1
	and	x8, x0, #0xfffffffffffffff7
	mov	w10, #36
	mov	x9, x8
	tbnz	w9, #1, .LBB406_2
.LBB406_1:                              // %"$3"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w9, w11, [x9, #4]
	bfi	x9, x11, #32, #32
	add	x10, x10, #20                   // =20
	tbz	w9, #1, .LBB406_1
.LBB406_2:                              // %"$4"
	mov	x9, #2808348672
	movk	x9, #46771, lsl #32
	movk	x9, #3552, lsl #48
	mov	x11, #58255
	movk	x11, #36408, lsl #16
	movk	x11, #14563, lsl #32
	movk	x11, #58254, lsl #48
	umulh	x10, x10, x11
	lsr	x10, x10, #1
	and	x10, x10, #0x7ffffffffffffff8
	add	x10, x10, #15                   // =15
	and	x10, x10, #0xfffffffffffffff0
	mov	x11, sp
	sub	x23, x11, x10
	mov	sp, x23
	mov	x11, sp
	sub	x10, x11, x10
	mov	sp, x10
	stp	wzr, wzr, [x23]
	mov	w11, #1
	mov	x24, x23
	mov	x12, x10
	stp	w11, wzr, [x10]
	tbz	w8, #2, .LBB406_4
	b	.LBB406_5
.LBB406_3:                              // %"$31"
	ldp	w8, w13, [x8, #4]
	bfi	x8, x13, #32, #32
	tbnz	w8, #2, .LBB406_5
.LBB406_4:
	mov	x13, x8
	mov	w14, #16
	b	.LBB406_7
.LBB406_5:                              // %"$6"
	ldp	w13, w14, [x8, #-4]
	bfi	x13, x14, #32, #32
	mov	w14, #1
	b	.LBB406_7
.LBB406_6:                              // %"$28"
                                        //   in Loop: Header=BB406_7 Depth=1
	lsl	x14, x14, #1
	cbz	x14, .LBB406_18
.LBB406_7:                              // %"$8"
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB406_9 Depth 2
                                        //     Child Loop BB406_15 Depth 2
	tst	x13, x14
	b.eq	.LBB406_14
// %bb.8:                               // %"$11.preheader"
                                        //   in Loop: Header=BB406_7 Depth=1
	mov	x17, xzr
	mov	x15, x23
	mov	x16, x10
.LBB406_9:                              // %"$11"
                                        //   Parent Loop BB406_7 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	w1, w18, [x15]
	bfi	x1, x18, #32, #32
	ldp	w2, w18, [x16], #8
	bfi	x2, x18, #32, #32
	add	x18, x1, x2
	add	x17, x18, x17
	sub	x18, x17, x9
	cmp	x9, x17
	csel	x18, x17, x18, hi
	csel	x17, xzr, x11, hi
	str	w18, [x15]
	lsr	x18, x18, #32
	str	w18, [x15, #4]
	cmp	x16, x12
	b.hi	.LBB406_12
// %bb.10:                              // %"$15"
                                        //   in Loop: Header=BB406_9 Depth=2
	add	x15, x15, #8                    // =8
	cmp	x15, x24
	b.ls	.LBB406_9
// %bb.11:                              // %"$17"
                                        //   in Loop: Header=BB406_9 Depth=2
	add	x24, x24, #8                    // =8
	stp	wzr, wzr, [x15]
	b	.LBB406_9
.LBB406_12:                             // %"$16"
                                        //   in Loop: Header=BB406_7 Depth=1
	cbz	x17, .LBB406_14
// %bb.13:                              // %"$19"
                                        //   in Loop: Header=BB406_7 Depth=1
	str	w11, [x24, #8]!
	str	wzr, [x24, #4]
.LBB406_14:                             // %"$21.preheader"
                                        //   in Loop: Header=BB406_7 Depth=1
	mov	x16, xzr
	mov	x15, x10
.LBB406_15:                             // %"$21"
                                        //   Parent Loop BB406_7 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	w18, w17, [x15]
	bfi	x18, x17, #32, #32
	add	x17, x18, x18
	add	x16, x17, x16
	sub	x17, x16, x9
	cmp	x9, x16
	csel	x17, x16, x17, hi
	csel	x16, xzr, x11, hi
	str	w17, [x15]
	lsr	x17, x17, #32
	str	w17, [x15, #4]
	add	x15, x15, #8                    // =8
	cmp	x15, x12
	b.ls	.LBB406_15
// %bb.16:                              // %"$26"
                                        //   in Loop: Header=BB406_7 Depth=1
	cbz	x16, .LBB406_6
// %bb.17:                              // %"$27"
                                        //   in Loop: Header=BB406_7 Depth=1
	add	x12, x12, #8                    // =8
	stp	w11, wzr, [x15]
	b	.LBB406_6
.LBB406_18:                             // %"$30"
	tbz	w8, #1, .LBB406_3
// %bb.19:                              // %"$32"
	tbnz	x22, #63, .LBB406_25
// %bb.20:                              // %"$35"
	tbz	w0, #3, .LBB406_22
// %bb.21:                              // %"$36"
	mov	w0, #45
	mov	x1, x19
	bl	byteSym
.LBB406_22:                             // %"$37"
	sub	x8, x24, x23
	lsr	x8, x8, #3
	add	x8, x8, x8, lsl #3
	lsl	x8, x8, #1
	ldp	w9, w10, [x24]
	bfi	x9, x10, #32, #32
	mov	x10, #-3689348814741910324
	movk	x10, #52429
.LBB406_23:                             // %"$38"
                                        // =>This Inner Loop Header: Depth=1
	umulh	x9, x9, x10
	lsr	x9, x9, #3
	cbz	x9, .LBB406_29
// %bb.24:                              // %"$39"
                                        //   in Loop: Header=BB406_23 Depth=1
	add	x8, x8, #1                      // =1
	b	.LBB406_23
.LBB406_25:                             // %"$34"
	cmn	x22, #1                         // =1
	b.eq	.LBB406_41
// %bb.26:                              // %"$60"
	sub	x8, x24, x23
	lsr	x8, x8, #3
	add	x8, x8, x8, lsl #3
	lsl	x8, x8, #1
	ldp	w9, w10, [x24]
	bfi	x9, x10, #32, #32
	mov	x10, #-3689348814741910324
	movk	x10, #52429
.LBB406_27:                             // %"$70"
                                        // =>This Inner Loop Header: Depth=1
	mov	x11, x8
	add	x8, x8, #1                      // =1
	umulh	x9, x9, x10
	lsr	x9, x9, #3
	cbnz	x9, .LBB406_27
// %bb.28:                              // %"$72"
	add	x8, x8, #1                      // =1
	tst	w0, #0x8
	csinc	x8, x8, x11, ne
	mov	w0, #2
	bfi	x0, x8, #4, #60
	b	.LBB406_49
.LBB406_29:                             // %"$40"
	subs	x22, x8, x22
	b.mi	.LBB406_50
.LBB406_30:                             // %"$42"
	ldp	w0, w8, [x24]
	bfi	x0, x8, #32, #32
	mov	x1, x22
	mov	w2, w21
	mov	w3, w20
	mov	x4, x19
	bl	fmtWord
	mov	x22, x0
	mov	x25, #-3689348814741910324
	movk	x25, #52429
	b	.LBB406_32
.LBB406_31:                             // %"$59"
                                        //   in Loop: Header=BB406_32 Depth=1
	add	w0, w28, #48                    // =48
	mov	x1, x19
	bl	byteSym
.LBB406_32:                             // %"$46"
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB406_36 Depth 2
	sub	x24, x24, #8                    // =8
	cmp	x24, x23
	b.lo	.LBB406_48
// %bb.33:                              // %"$47"
                                        //   in Loop: Header=BB406_32 Depth=1
	ldp	w28, w8, [x24]
	bfi	x28, x8, #32, #32
	mov	x26, #1569325056
	movk	x26, #17784, lsl #32
	movk	x26, #355, lsl #48
	b	.LBB406_36
.LBB406_34:                             // %"$50.sink.split"
                                        //   in Loop: Header=BB406_36 Depth=2
	mov	x1, x19
	bl	byteSym
.LBB406_35:                             // %"$50"
                                        //   in Loop: Header=BB406_36 Depth=2
	sub	x22, x22, #1                    // =1
	udiv	x27, x28, x26
	add	w0, w27, #48                    // =48
	mov	x1, x19
	bl	byteSym
	msub	x28, x27, x26, x28
	umulh	x8, x26, x25
	lsr	x26, x8, #3
	cmp	x26, #1                         // =1
	b.eq	.LBB406_31
.LBB406_36:                             // %"$49"
                                        //   Parent Loop BB406_32 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	mov	w0, w21
	cbz	x22, .LBB406_34
// %bb.37:                              // %"$51"
                                        //   in Loop: Header=BB406_36 Depth=2
	tst	w20, #0xff
	b.eq	.LBB406_40
// %bb.38:                              // %"$54"
                                        //   in Loop: Header=BB406_36 Depth=2
	cmp	x22, #1                         // =1
	b.lt	.LBB406_40
// %bb.39:                              // %"$55"
                                        //   in Loop: Header=BB406_36 Depth=2
	mov	x8, #-6148914691236517206
	movk	x8, #43691
	mul	x8, x22, x8
	mov	x9, #6148914691236517205
	movk	x9, #21846
	cmp	x8, x9
	cset	w8, lo
	mov	w0, w20
	cbnz	w8, .LBB406_34
	b	.LBB406_35
.LBB406_40:                             //   in Loop: Header=BB406_36 Depth=2
	mov	w8, wzr
	mov	w0, w20
	cbz	w8, .LBB406_35
	b	.LBB406_34
.LBB406_41:                             // %"$61"
	adrp	x19, ($Put)
	tbz	w0, #3, .LBB406_43
// %bb.42:                              // %"$62"
	ldr	x8, [x19, :lo12:($Put)]
	mov	w0, #45
	blr	x8
.LBB406_43:                             // %"$63"
	ldp	w0, w8, [x24]
	bfi	x0, x8, #32, #32
	bl	outWord
	mov	x20, #-3689348814741910324
	movk	x20, #52429
.LBB406_44:                             // %"$64"
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB406_46 Depth 2
	sub	x24, x24, #8                    // =8
	cmp	x24, x23
	b.lo	.LBB406_48
// %bb.45:                              // %"$65"
                                        //   in Loop: Header=BB406_44 Depth=1
	ldp	w21, w8, [x24]
	bfi	x21, x8, #32, #32
	mov	x22, #1569325056
	movk	x22, #17784, lsl #32
	movk	x22, #355, lsl #48
.LBB406_46:                             // %"$67"
                                        //   Parent Loop BB406_44 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	udiv	x25, x21, x22
	add	w0, w25, #48                    // =48
	ldr	x8, [x19, :lo12:($Put)]
	blr	x8
	msub	x21, x25, x22, x21
	umulh	x8, x22, x20
	lsr	x22, x8, #3
	cmp	x22, #1                         // =1
	b.ne	.LBB406_46
// %bb.47:                              // %"$69"
                                        //   in Loop: Header=BB406_44 Depth=1
	add	w0, w21, #48                    // =48
	ldr	x8, [x19, :lo12:($Put)]
	blr	x8
	b	.LBB406_44
.LBB406_48:
	mov	x0, xzr
.LBB406_49:                             // %"$33"
	mov	sp, x29
	ldp	x20, x19, [sp, #80]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #64]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #48]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #32]             // 16-byte Folded Reload
	ldp	x28, x27, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #96             // 16-byte Folded Reload
	ret
.LBB406_50:                             // %"$41"
	mov	w0, #48
	mov	x1, x19
	bl	byteSym
	mov	w0, w21
.LBB406_51:                             // %"$43"
                                        // =>This Inner Loop Header: Depth=1
	mov	x1, x19
	bl	byteSym
	cmn	x22, #1                         // =1
	b.eq	.LBB406_30
// %bb.52:                              // %"$44"
                                        //   in Loop: Header=BB406_51 Depth=1
	add	x22, x22, #1                    // =1
	mov	w0, #48
	b	.LBB406_51
.Lfunc_end406:
	.size	fmtNum, .Lfunc_end406-fmtNum
	.cfi_endproc
                                        // -- End function
	.globl	packExtNm                       // -- Begin function packExtNm
	.p2align	4
	.type	packExtNm,@function
packExtNm:                              // @packExtNm
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-32]!                // 8-byte Folded Spill
	stp	x20, x19, [sp, #16]             // 16-byte Folded Spill
	.cfi_def_cfa_offset 32
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w30, -32
	mov	x19, x1
	mov	x20, x0
	bl	objFile
	cbz	w0, .LBB407_2
// %bb.1:                               // %"$2"
	mov	x1, x19
	bl	packAO
.LBB407_2:                              // %"$3"
	mov	x0, x20
	bl	objId
	mov	x1, x19
	bl	packOct
	ldp	x20, x19, [sp, #16]             // 16-byte Folded Reload
	ldr	x30, [sp], #32                  // 8-byte Folded Reload
	ret
.Lfunc_end407:
	.size	packExtNm, .Lfunc_end407-packExtNm
	.cfi_endproc
                                        // -- End function
	.globl	objFile                         // -- Begin function objFile
	.p2align	4
	.type	objFile,@function
objFile:                                // @objFile
	.cfi_startproc
// %bb.0:                               // %"$1"
	lsr	x8, x0, #24
	ubfx	x9, x0, #24, #8
	ubfx	x8, x8, #12, #20
	and	w8, w8, #0xff00
	orr	w0, w9, w8
	ret
.Lfunc_end408:
	.size	objFile, .Lfunc_end408-objFile
	.cfi_endproc
                                        // -- End function
	.globl	packAO                          // -- Begin function packAO
	.p2align	4
	.type	packAO,@function
packAO:                                 // @packAO
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-32]!                // 8-byte Folded Spill
	stp	x20, x19, [sp, #16]             // 16-byte Folded Spill
	.cfi_def_cfa_offset 32
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w30, -32
	mov	x19, x1
	mov	w20, w0
	cmp	w0, #16                         // =16
	b.lt	.LBB409_2
// %bb.1:                               // %"$2"
	lsr	w0, w20, #4
	mov	x1, x19
	bl	packAO
.LBB409_2:                              // %"$3"
	mov	w0, #64
	bfxil	w0, w20, #0, #4
	mov	x1, x19
	bl	byteSym
	ldp	x20, x19, [sp, #16]             // 16-byte Folded Reload
	ldr	x30, [sp], #32                  // 8-byte Folded Reload
	ret
.Lfunc_end409:
	.size	packAO, .Lfunc_end409-packAO
	.cfi_endproc
                                        // -- End function
	.globl	objId                           // -- Begin function objId
	.p2align	4
	.type	objId,@function
objId:                                  // @objId
	.cfi_startproc
// %bb.0:                               // %"$1"
	lsr	x8, x0, #12
	and	x8, x8, #0xfff00000
	bfxil	x8, x0, #4, #20
	lsr	x9, x0, #20
	and	x9, x9, #0x3ff00000000
	orr	x0, x8, x9
	ret
.Lfunc_end410:
	.size	objId, .Lfunc_end410-objId
	.cfi_endproc
                                        // -- End function
	.globl	packOct                         // -- Begin function packOct
	.p2align	4
	.type	packOct,@function
packOct:                                // @packOct
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-32]!                // 8-byte Folded Spill
	stp	x20, x19, [sp, #16]             // 16-byte Folded Spill
	.cfi_def_cfa_offset 32
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w30, -32
	mov	x19, x1
	mov	x20, x0
	cmp	x0, #8                          // =8
	b.lo	.LBB411_2
// %bb.1:                               // %"$2"
	lsr	x0, x20, #3
	mov	x1, x19
	bl	packOct
.LBB411_2:                              // %"$3"
	mov	w0, #48
	bfxil	w0, w20, #0, #3
	mov	x1, x19
	bl	byteSym
	ldp	x20, x19, [sp, #16]             // 16-byte Folded Reload
	ldr	x30, [sp], #32                  // 8-byte Folded Reload
	ret
.Lfunc_end411:
	.size	packOct, .Lfunc_end411-packOct
	.cfi_endproc
                                        // -- End function
	.globl	fmtWord                         // -- Begin function fmtWord
	.p2align	4
	.type	fmtWord,@function
fmtWord:                                // @fmtWord
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x30, x23, [sp, #-48]!           // 16-byte Folded Spill
	stp	x22, x21, [sp, #16]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #32]             // 16-byte Folded Spill
	.cfi_def_cfa_offset 48
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w30, -48
	mov	x19, x4
	mov	x20, x0
	mov	x22, x1
	cmp	x0, #10                         // =10
	b.lo	.LBB412_6
// %bb.1:                               // %"$2"
	mov	w21, w3
	mov	w23, w2
	mov	x8, #-3689348814741910324
	movk	x8, #52429
	umulh	x8, x20, x8
	lsr	x0, x8, #3
	mov	x1, x22
	mov	x4, x19
	bl	fmtWord
	mov	x22, x0
	cbz	x0, .LBB412_4
// %bb.2:                               // %"$5"
	tst	w21, #0xff
	b.eq	.LBB412_7
// %bb.3:                               // %"$8"
	mov	x8, #-6148914691236517206
	movk	x8, #43691
	mul	x8, x22, x8
	mov	x9, #6148914691236517205
	movk	x9, #21846
	cmp	x8, x9
	cset	w8, lo
	cmp	x22, #1                         // =1
	csel	w8, wzr, w8, lt
	mov	w23, w21
	cbz	w8, .LBB412_5
.LBB412_4:                              // %"$4.sink.split"
	mov	w0, w23
	mov	x1, x19
	bl	byteSym
.LBB412_5:                              // %"$4"
	sub	x22, x22, #1                    // =1
	mov	x8, #-3689348814741910324
	movk	x8, #52429
	umulh	x8, x20, x8
	lsr	x8, x8, #3
	mov	w9, #10
	msub	x20, x8, x9, x20
.LBB412_6:                              // %"$3"
	add	w0, w20, #48                    // =48
	mov	x1, x19
	bl	byteSym
	mov	x0, x22
	ldp	x20, x19, [sp, #32]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #16]             // 16-byte Folded Reload
	ldp	x30, x23, [sp], #48             // 16-byte Folded Reload
	ret
.LBB412_7:
	mov	w8, wzr
	mov	w23, w21
	cbnz	w8, .LBB412_4
	b	.LBB412_5
.Lfunc_end412:
	.size	fmtWord, .Lfunc_end412-fmtWord
	.cfi_endproc
                                        // -- End function
	.globl	numErr                          // -- Begin function numErr
	.p2align	4
	.type	numErr,@function
numErr:                                 // @numErr
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	adrp	x2, .L$11
	add	x2, x2, :lo12:.L$11
	mov	x3, xzr
	bl	err
.Lfunc_end413:
	.size	numErr, .Lfunc_end413-numErr
	.cfi_endproc
                                        // -- End function
	.globl	equal                           // -- Begin function equal
	.p2align	4
	.type	equal,@function
equal:                                  // @equal
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-48]!                // 8-byte Folded Spill
	stp	x22, x21, [sp, #16]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #32]             // 16-byte Folded Spill
	.cfi_def_cfa_offset 48
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w30, -48
	cmp	x0, x1
	b.ne	.LBB414_2
.LBB414_1:
	mov	w0, #1
	and	w0, w0, #0x1
	b	.LBB414_4
.LBB414_2:                              // %"$3"
	mov	x19, x0
	tbz	w19, #1, .LBB414_5
.LBB414_3:
	mov	w0, wzr
	and	w0, wzr, #0x1
.LBB414_4:                              // %"$14"
	ldp	x20, x19, [sp, #32]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #16]             // 16-byte Folded Reload
	ldr	x30, [sp], #48                  // 8-byte Folded Reload
	ret
.LBB414_5:                              // %"$5"
	mov	x20, x1
	tbz	w19, #2, .LBB414_14
// %bb.6:                               // %"$8"
	tbnz	w20, #1, .LBB414_3
// %bb.7:                               // %"$10"
	tbz	w19, #3, .LBB414_10
// %bb.8:                               // %"$12"
	tbz	w20, #3, .LBB414_42
// %bb.9:                               // %"$15"
	and	x19, x19, #0xfffffffffffffff7
	and	x20, x20, #0xfffffffffffffff7
.LBB414_10:                             // %"$16"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w9, w8, [x19, #-4]
	bfi	x9, x8, #32, #32
	ldp	w10, w8, [x20, #-4]
	bfi	x10, x8, #32, #32
	cmp	x9, x10
	b.ne	.LBB414_3
// %bb.11:                              // %"$17"
                                        //   in Loop: Header=BB414_10 Depth=1
	ldp	w19, w8, [x19, #4]
	bfi	x19, x8, #32, #32
	ldp	w20, w8, [x20, #4]
	bfi	x20, x8, #32, #32
	cmp	x19, x20
	b.eq	.LBB414_1
// %bb.12:                              // %"$20"
                                        //   in Loop: Header=BB414_10 Depth=1
	mov	w0, wzr
	tbnz	w19, #1, .LBB414_54
// %bb.13:                              // %"$22"
                                        //   in Loop: Header=BB414_10 Depth=1
	tbz	w20, #1, .LBB414_10
	b	.LBB414_54
.LBB414_14:                             // %"$7"
	tbz	w19, #3, .LBB414_32
// %bb.15:                              // %"$27"
	tst	x20, #0x6
	b.ne	.LBB414_3
// %bb.16:                              // %"$29"
	tst	x20, #0xf
	b.eq	.LBB414_3
// %bb.17:                              // %"$31"
	ldp	w8, w9, [x19, #-8]
	bfi	x8, x9, #32, #32
	tbnz	w8, #3, .LBB414_3
// %bb.18:                              // %"$35"
	tst	x8, #0x6
	b.ne	.LBB414_20
.LBB414_19:                             // %"$36"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w8, w9, [x8, #8]
	bfi	x8, x9, #32, #32
	tst	x8, #0x6
	b.eq	.LBB414_19
.LBB414_20:                             // %"$37"
	cmp	x8, #2                          // =2
	b.eq	.LBB414_3
// %bb.21:                              // %"$38"
	ldp	w9, w10, [x20, #-8]
	bfi	x9, x10, #32, #32
	tbnz	w9, #3, .LBB414_3
// %bb.22:                              // %"$42"
	tst	x9, #0x6
	b.ne	.LBB414_24
.LBB414_23:                             // %"$43"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w9, w10, [x9, #8]
	bfi	x9, x10, #32, #32
	tst	x9, #0x6
	b.eq	.LBB414_23
.LBB414_24:                             // %"$44"
	cmp	x9, #2                          // =2
	b.eq	.LBB414_3
// %bb.25:                              // %"$45"
	cmp	x8, x9
	b.eq	.LBB414_1
// %bb.26:                              // %"$47"
	tbnz	w8, #1, .LBB414_3
// %bb.27:                              // %"$49"
	tbnz	w9, #1, .LBB414_3
.LBB414_28:                             // %"$53"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w11, w10, [x8, #-4]
	bfi	x11, x10, #32, #32
	ldp	w12, w10, [x9, #-4]
	bfi	x12, x10, #32, #32
	cmp	x11, x12
	b.ne	.LBB414_3
// %bb.29:                              // %"$54"
                                        //   in Loop: Header=BB414_28 Depth=1
	ldp	w8, w10, [x8, #4]
	bfi	x8, x10, #32, #32
	ldp	w9, w10, [x9, #4]
	bfi	x9, x10, #32, #32
	cmp	x8, x9
	b.eq	.LBB414_1
// %bb.30:                              // %"$57"
                                        //   in Loop: Header=BB414_28 Depth=1
	mov	w0, wzr
	tbnz	w8, #1, .LBB414_54
// %bb.31:                              // %"$59"
                                        //   in Loop: Header=BB414_28 Depth=1
	tbz	w9, #1, .LBB414_28
	b	.LBB414_54
.LBB414_32:                             // %"$26"
	tst	x20, #0xf
	b.ne	.LBB414_3
// %bb.33:                              // %"$63"
	mov	x8, sp
	adrp	x9, ($StkLimit)
	ldr	x9, [x9, :lo12:($StkLimit)]
	cmp	x9, x8
	b.hi	.LBB414_51
// %bb.34:
	mov	x21, x19
	mov	x22, x20
.LBB414_35:                             // %"$67"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w0, w8, [x21]
	bfi	x0, x8, #32, #32
	ldp	w9, w8, [x22]
	bfi	x9, x8, #32, #32
	and	x1, x9, #0xfffffffffffffffe
	bl	equal
	tbz	w0, #0, .LBB414_43
// %bb.36:                              // %"$68"
                                        //   in Loop: Header=BB414_35 Depth=1
	ldrb	w8, [x21, #8]
	tst	w8, #0xf
	b.ne	.LBB414_44
// %bb.37:                              // %"$71"
                                        //   in Loop: Header=BB414_35 Depth=1
	ldrb	w8, [x22, #8]
	tst	w8, #0xf
	b.ne	.LBB414_43
// %bb.38:                              // %"$73"
                                        //   in Loop: Header=BB414_35 Depth=1
	ldr	w8, [x21]
	orr	w8, w8, #0x1
	str	w8, [x21]
	ldp	w21, w8, [x21, #8]
	bfi	x21, x8, #32, #32
	ldp	w22, w8, [x22, #8]
	bfi	x22, x8, #32, #32
	ldrb	w8, [x21]
	tbz	w8, #0, .LBB414_35
	b	.LBB414_40
.LBB414_39:                             // %"$90"
                                        //   in Loop: Header=BB414_40 Depth=1
	ldr	w8, [x19]
	and	w8, w8, #0xfffffffe
	str	w8, [x19]
	ldp	w19, w8, [x19, #8]
	bfi	x19, x8, #32, #32
	ldp	w20, w8, [x20, #8]
	bfi	x20, x8, #32, #32
.LBB414_40:                             // %"$77"
                                        // =>This Inner Loop Header: Depth=1
	cmp	x19, x21
	b.eq	.LBB414_45
// %bb.41:                              // %"$78"
                                        //   in Loop: Header=BB414_40 Depth=1
	cmp	x20, x22
	b.ne	.LBB414_39
	b	.LBB414_49
.LBB414_42:                             // %"$14"
	mov	w0, wzr
	b	.LBB414_4
.LBB414_43:
	mov	w0, wzr
	b	.LBB414_53
.LBB414_44:                             // %"$72"
	ldp	w0, w8, [x21, #8]
	bfi	x0, x8, #32, #32
	ldp	w1, w8, [x22, #8]
	bfi	x1, x8, #32, #32
	bl	equal
	b	.LBB414_53
.LBB414_45:                             // %"$80"
	cmp	x20, x22
	b.ne	.LBB414_49
.LBB414_46:                             // %"$84"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w19, w8, [x19, #8]
	bfi	x19, x8, #32, #32
	ldp	w20, w8, [x20, #8]
	bfi	x20, x8, #32, #32
	cmp	x20, x22
	b.eq	.LBB414_50
// %bb.47:                              // %"$85"
                                        //   in Loop: Header=BB414_46 Depth=1
	cmp	x19, x21
	b.ne	.LBB414_46
// %bb.48:
	mov	w0, #1
	b	.LBB414_52
.LBB414_49:
	mov	w0, wzr
	b	.LBB414_52
.LBB414_50:                             // %"$87"
	cmp	x19, x21
	cset	w0, eq
	b	.LBB414_52
.LBB414_51:                             // %"$65"
	mov	x0, xzr
	bl	stkErr
.LBB414_52:                             // %"$79"
	ldr	w8, [x19]
	and	w8, w8, #0xfffffffe
	str	w8, [x19]
	ldp	w19, w8, [x19, #8]
	bfi	x19, x8, #32, #32
.LBB414_53:                             // %"$92"
	cmp	x19, x21
	b.ne	.LBB414_52
.LBB414_54:                             // %"$2"
	and	w0, w0, #0x1
	b	.LBB414_4
.Lfunc_end414:
	.size	equal, .Lfunc_end414-equal
	.cfi_endproc
                                        // -- End function
	.globl	unify                           // -- Begin function unify
	.p2align	4
	.type	unify,@function
unify:                                  // @unify
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x30, x25, [sp, #-64]!           // 16-byte Folded Spill
	stp	x24, x23, [sp, #16]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #32]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #48]             // 16-byte Folded Spill
	.cfi_def_cfa_offset 64
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w30, -64
	mov	x21, x3
	mov	x19, x2
	mov	x22, x1
	mov	x20, x0
	adrp	x8, ($Penv)
	ldr	x23, [x8, :lo12:($Penv)]
.LBB415_1:                              // %"$-1"
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB415_7 Depth 2
	eor	w8, w22, #0x8
	tst	x8, #0xe
	b.eq	.LBB415_3
// %bb.2:                               //   in Loop: Header=BB415_1 Depth=1
	mov	w8, wzr
	tbnz	w8, #0, .LBB415_4
	b	.LBB415_12
.LBB415_3:                              // %"$3"
                                        //   in Loop: Header=BB415_1 Depth=1
	mov	x0, x22
	bl	firstByte
	and	w8, w0, #0xff
	cmp	w8, #64                         // =64
	cset	w8, eq
	tbz	w8, #0, .LBB415_12
.LBB415_4:                              // %"$4"
                                        //   in Loop: Header=BB415_1 Depth=1
	mov	x8, x23
	b	.LBB415_7
.LBB415_5:                              //   in Loop: Header=BB415_7 Depth=2
	mov	w10, wzr
	cbnz	w10, .LBB415_10
.LBB415_6:                              // %"$12"
                                        //   in Loop: Header=BB415_7 Depth=2
	add	x8, x8, #8                      // =8
.LBB415_7:                              // %"$6"
                                        //   Parent Loop BB415_1 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	w8, w9, [x8]
	bfi	x8, x9, #32, #32
	ldp	w9, w10, [x8]
	bfi	x9, x10, #32, #32
	tst	x9, #0xf
	b.ne	.LBB415_12
// %bb.8:                               // %"$7"
                                        //   in Loop: Header=BB415_7 Depth=2
	ldp	w10, w11, [x9]
	bfi	x10, x11, #32, #32
	ldp	w12, w11, [x10]
	bfi	x12, x11, #32, #32
	cmp	x20, x12
	b.ne	.LBB415_5
// %bb.9:                               // %"$10"
                                        //   in Loop: Header=BB415_7 Depth=2
	ldp	w10, w11, [x10, #8]
	bfi	x10, x11, #32, #32
	cmp	x22, x10
	cset	w10, eq
	cbz	w10, .LBB415_6
.LBB415_10:                             // %"$11"
                                        //   in Loop: Header=BB415_1 Depth=1
	ldp	w9, w8, [x9, #8]
	bfi	x9, x8, #32, #32
	ldp	w20, w8, [x9]
	bfi	x20, x8, #32, #32
	ldp	w22, w8, [x9, #8]
	bfi	x22, x8, #32, #32
	b	.LBB415_1
.LBB415_11:                             // %"$22"
                                        //   in Loop: Header=BB415_12 Depth=1
	ldp	w9, w8, [x9, #8]
	bfi	x9, x8, #32, #32
	ldp	w19, w8, [x9]
	bfi	x19, x8, #32, #32
	ldp	w21, w8, [x9, #8]
	bfi	x21, x8, #32, #32
.LBB415_12:                             // %"$-2"
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB415_18 Depth 2
	eor	w8, w21, #0x8
	tst	x8, #0xe
	b.eq	.LBB415_14
// %bb.13:                              //   in Loop: Header=BB415_12 Depth=1
	mov	w8, wzr
	cbnz	w8, .LBB415_15
	b	.LBB415_21
.LBB415_14:                             // %"$14"
                                        //   in Loop: Header=BB415_12 Depth=1
	mov	x0, x21
	bl	firstByte
	and	w8, w0, #0xff
	cmp	w8, #64                         // =64
	cset	w8, eq
	cbz	w8, .LBB415_21
.LBB415_15:                             // %"$15"
                                        //   in Loop: Header=BB415_12 Depth=1
	mov	x8, x23
	b	.LBB415_18
.LBB415_16:                             //   in Loop: Header=BB415_18 Depth=2
	mov	w10, wzr
	cbnz	w10, .LBB415_11
.LBB415_17:                             // %"$23"
                                        //   in Loop: Header=BB415_18 Depth=2
	add	x8, x8, #8                      // =8
.LBB415_18:                             // %"$17"
                                        //   Parent Loop BB415_12 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	w8, w9, [x8]
	bfi	x8, x9, #32, #32
	ldp	w9, w10, [x8]
	bfi	x9, x10, #32, #32
	tst	x9, #0xf
	b.ne	.LBB415_21
// %bb.19:                              // %"$18"
                                        //   in Loop: Header=BB415_18 Depth=2
	ldp	w10, w11, [x9]
	bfi	x10, x11, #32, #32
	ldp	w12, w11, [x10]
	bfi	x12, x11, #32, #32
	cmp	x19, x12
	b.ne	.LBB415_16
// %bb.20:                              // %"$21"
                                        //   in Loop: Header=BB415_18 Depth=2
	ldp	w10, w11, [x10, #8]
	bfi	x10, x11, #32, #32
	cmp	x21, x10
	cset	w10, eq
	cbz	w10, .LBB415_17
	b	.LBB415_11
.LBB415_21:                             // %"$16"
	cmp	x20, x19
	b.ne	.LBB415_23
// %bb.22:                              // %"$26"
	mov	x0, x22
	mov	x1, x21
	bl	equal
	tbnz	w0, #0, .LBB415_34
	b	.LBB415_24
.LBB415_23:
	mov	w0, wzr
	tbnz	w0, #0, .LBB415_34
.LBB415_24:                             // %"$27"
	eor	w8, w22, #0x8
	tst	x8, #0xe
	b.eq	.LBB415_28
// %bb.25:
	mov	w8, wzr
	cbz	w8, .LBB415_29
.LBB415_26:                             // %"$32"
	adrp	x8, SymTab+376
	add	x8, x8, :lo12:SymTab+376
	cmp	x22, x8
	b.eq	.LBB415_34
// %bb.27:                              // %"$33"
	mov	x0, x20
	mov	x1, x22
	mov	x2, x19
	mov	x3, x21
	b	.LBB415_33
.LBB415_28:                             // %"$30"
	mov	x0, x22
	bl	firstByte
	and	w8, w0, #0xff
	cmp	w8, #64                         // =64
	cset	w8, eq
	cbnz	w8, .LBB415_26
.LBB415_29:                             // %"$31"
	eor	w8, w21, #0x8
	tst	x8, #0xe
	b.eq	.LBB415_36
// %bb.30:
	mov	w8, wzr
	cbz	w8, .LBB415_37
.LBB415_31:                             // %"$38"
	adrp	x8, SymTab+376
	add	x8, x8, :lo12:SymTab+376
	cmp	x21, x8
	b.eq	.LBB415_34
// %bb.32:                              // %"$39"
	mov	x0, x19
	mov	x1, x21
	mov	x2, x20
	mov	x3, x22
.LBB415_33:                             // %"$24"
	bl	cons3
	ldp	w1, w8, [x23]
	bfi	x1, x8, #32, #32
	bl	cons
	lsr	x8, x0, #32
	stp	w0, w8, [x23]
.LBB415_34:                             // %"$24"
	mov	w0, #1
.LBB415_35:                             // %"$24"
	and	w0, w0, #0x1
	ldp	x20, x19, [sp, #48]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #32]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #16]             // 16-byte Folded Reload
	ldp	x30, x25, [sp], #64             // 16-byte Folded Reload
	ret
.LBB415_36:                             // %"$36"
	mov	x0, x21
	bl	firstByte
	and	w8, w0, #0xff
	cmp	w8, #64                         // =64
	cset	w8, eq
	cbnz	w8, .LBB415_31
.LBB415_37:                             // %"$37"
	tst	x22, #0xf
	b.eq	.LBB415_40
// %bb.38:
	mov	w8, #1
	cbz	w8, .LBB415_41
.LBB415_39:                             // %"$44"
	mov	x0, x22
	mov	x1, x21
	bl	equal
	b	.LBB415_35
.LBB415_40:                             // %"$42"
	tst	x21, #0xf
	cset	w8, ne
	cbnz	w8, .LBB415_39
.LBB415_41:                             // %"$43"
	mov	x8, sp
	adrp	x9, ($StkLimit)
	ldr	x9, [x9, :lo12:($StkLimit)]
	cmp	x9, x8
	b.hi	.LBB415_46
// %bb.42:                              // %"$46"
	ldp	w1, w8, [x22]
	bfi	x1, x8, #32, #32
	ldp	w3, w8, [x21]
	bfi	x3, x8, #32, #32
	ldp	w24, w25, [x23]
	mov	x0, x20
	mov	x2, x19
	bl	unify
	tbz	w0, #0, .LBB415_44
// %bb.43:                              // %"$49"
	ldp	w1, w8, [x22, #8]
	bfi	x1, x8, #32, #32
	ldp	w3, w8, [x21, #8]
	bfi	x3, x8, #32, #32
	mov	x0, x20
	mov	x2, x19
	bl	unify
	tbnz	w0, #0, .LBB415_34
	b	.LBB415_45
.LBB415_44:
	mov	w0, wzr
	tbnz	w0, #0, .LBB415_34
.LBB415_45:                             // %"$50"
	mov	w0, wzr
	bfi	x24, x25, #32, #32
	lsr	x8, x24, #32
	stp	w24, w8, [x23]
	b	.LBB415_35
.LBB415_46:                             // %"$45"
	mov	x0, xzr
	bl	stkErr
.Lfunc_end415:
	.size	unify, .Lfunc_end415-unify
	.cfi_endproc
                                        // -- End function
	.globl	firstByte                       // -- Begin function firstByte
	.p2align	4
	.type	firstByte,@function
firstByte:                              // @firstByte
	.cfi_startproc
// %bb.0:                               // %"$1"
	adrp	x8, SymTab+8
	add	x8, x8, :lo12:SymTab+8
	cmp	x0, x8
	b.eq	.LBB416_2
// %bb.1:                               // %"$3"
	ldp	w8, w9, [x0, #-8]
	bfi	x8, x9, #32, #32
	tbz	w8, #3, .LBB416_3
.LBB416_2:
	mov	x0, xzr
                                        // kill: def $w0 killed $w0 killed $x0
	ret
.LBB416_3:                              // %"$7"
                                        // =>This Inner Loop Header: Depth=1
	tst	x8, #0x6
	b.ne	.LBB416_5
// %bb.4:                               // %"$8"
                                        //   in Loop: Header=BB416_3 Depth=1
	ldp	w8, w9, [x8, #8]
	bfi	x8, x9, #32, #32
	b	.LBB416_3
.LBB416_5:                              // %"$9"
	tbz	w8, #1, .LBB416_7
// %bb.6:                               // %"$11"
	lsr	x0, x8, #4
                                        // kill: def $w0 killed $w0 killed $x0
	ret
.LBB416_7:                              // %"$10"
	ldp	w0, w9, [x8, #-4]
	bfi	x0, x9, #32, #32
                                        // kill: def $w0 killed $w0 killed $x0
	ret
.Lfunc_end416:
	.size	firstByte, .Lfunc_end416-firstByte
	.cfi_endproc
                                        // -- End function
	.globl	cons3                           // -- Begin function cons3
	.p2align	4
	.type	cons3,@function
cons3:                                  // @cons3
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-96]!           // 16-byte Folded Spill
	stp	x28, x27, [sp, #16]             // 16-byte Folded Spill
	stp	x26, x25, [sp, #32]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #48]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #64]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #80]             // 16-byte Folded Spill
	mov	x29, sp
	sub	sp, sp, #16                     // =16
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	mov	x19, x3
	mov	x20, x2
	mov	x21, x1
	mov	x22, x0
	adrp	x12, ($Avail)
	ldr	x8, [x12, :lo12:($Avail)]
	cbz	x8, .LBB417_4
// %bb.1:                               // %"$2"
	ldp	w9, w10, [x8]
	bfi	x9, x10, #32, #32
	cbz	x9, .LBB417_4
// %bb.2:                               // %"$4"
	ldp	w0, w10, [x9]
	bfi	x0, x10, #32, #32
	cbz	x0, .LBB417_4
// %bb.3:                               // %"$6"
	ldp	w11, w10, [x0]
	bfi	x11, x10, #32, #32
	str	x11, [x12, :lo12:($Avail)]
	lsr	x10, x22, #32
	lsr	x11, x21, #32
	stp	w22, w10, [x8]
	lsr	x10, x20, #32
	lsr	x12, x19, #32
	stp	w21, w11, [x8, #8]
	stp	w20, w10, [x9]
	stp	w19, w12, [x9, #8]
	lsr	x10, x8, #32
	stp	w8, w10, [x0]
	lsr	x8, x9, #32
	b	.LBB417_5
.LBB417_4:                              // %"$3"
	adrp	x25, env
	ldr	x8, [x25, :lo12:env]
	mov	x9, sp
	sub	x10, x9, #16                    // =16
	mov	sp, x10
	lsr	x11, x22, #32
	stur	x11, [x29, #-8]                 // 8-byte Folded Spill
	mov	x28, x10
	stp	w22, w11, [x9, #-16]
	str	w8, [x28, #8]!
	lsr	x8, x8, #32
	str	w8, [x28, #4]
	mov	x8, sp
	sub	x9, x8, #16                     // =16
	mov	sp, x9
	lsr	x26, x21, #32
	lsr	x11, x10, #32
	stp	w21, w26, [x8, #-16]
	stp	w10, w11, [x8, #-8]
	str	x9, [x25, :lo12:env]
	mov	x8, sp
	sub	x10, x8, #16                    // =16
	mov	sp, x10
	lsr	x27, x20, #32
	mov	x23, x10
	stp	w20, w27, [x8, #-16]
	str	w9, [x23, #8]!
	lsr	x8, x9, #32
	str	w8, [x23, #4]
	mov	x8, sp
	sub	x9, x8, #16                     // =16
	mov	sp, x9
	lsr	x24, x19, #32
	lsr	x11, x10, #32
	stp	w19, w24, [x8, #-16]
	stp	w10, w11, [x8, #-8]
	str	x9, [x25, :lo12:env]
	bl	gc
	ldp	w9, w8, [x23]
	ldp	w11, w10, [x28]
	adrp	x14, ($Avail)
	ldr	x12, [x14, :lo12:($Avail)]
	bfi	x9, x8, #32, #32
	bfi	x11, x10, #32, #32
	str	x9, [x25, :lo12:env]
	str	x11, [x25, :lo12:env]
	ldp	w9, w8, [x12]
	mov	x10, x9
	bfi	x10, x8, #32, #32
	ldp	w0, w11, [x10]
	bfi	x0, x11, #32, #32
	ldp	w13, w11, [x0]
	bfi	x13, x11, #32, #32
	str	x13, [x14, :lo12:($Avail)]
	ldur	x11, [x29, #-8]                 // 8-byte Folded Reload
	stp	w22, w11, [x12]
	stp	w21, w26, [x12, #8]
	stp	w20, w27, [x10]
	stp	w19, w24, [x10, #8]
	lsr	x10, x12, #32
	stp	w12, w10, [x0]
.LBB417_5:                              // %"$6"
	stp	w9, w8, [x0, #8]
	mov	sp, x29
	ldp	x20, x19, [sp, #80]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #64]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #48]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #32]             // 16-byte Folded Reload
	ldp	x28, x27, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #96             // 16-byte Folded Reload
	ret
.Lfunc_end417:
	.size	cons3, .Lfunc_end417-cons3
	.cfi_endproc
                                        // -- End function
	.globl	lookup                          // -- Begin function lookup
	.p2align	4
	.type	lookup,@function
lookup:                                 // @lookup
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x30, x19, [sp, #-16]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w19, -8
	.cfi_offset w30, -16
	bl	lup
	mov	x19, x0
	eor	w8, w19, #0x8
	tst	x8, #0xe
	b.eq	.LBB418_2
// %bb.1:
	mov	w8, wzr
	b	.LBB418_3
.LBB418_2:                              // %"$3"
	mov	x0, x19
	bl	firstByte
	and	w8, w0, #0xff
	cmp	w8, #64                         // =64
	cset	w8, eq
.LBB418_3:                              // %"$2"
	adrp	x9, SymTab+8
	add	x9, x9, :lo12:SymTab+8
	tst	w8, #0x1
	csel	x0, x9, x19, ne
	ldp	x30, x19, [sp], #16             // 16-byte Folded Reload
	ret
.Lfunc_end418:
	.size	lookup, .Lfunc_end418-lookup
	.cfi_endproc
                                        // -- End function
	.globl	lup                             // -- Begin function lup
	.p2align	4
	.type	lup,@function
lup:                                    // @lup
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-64]!           // 16-byte Folded Spill
	str	x23, [sp, #16]                  // 8-byte Folded Spill
	stp	x22, x21, [sp, #32]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #48]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 64
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -48
	.cfi_offset w30, -56
	.cfi_offset w29, -64
	mov	x8, sp
	adrp	x9, ($StkLimit)
	ldr	x9, [x9, :lo12:($StkLimit)]
	cmp	x9, x8
	b.hi	.LBB419_15
// %bb.1:                               // %"$3"
	mov	x19, x1
	mov	x20, x0
	adrp	x8, ($Penv)
	ldr	x21, [x8, :lo12:($Penv)]
.LBB419_2:                              // %"$-1"
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB419_6 Depth 2
	eor	w8, w19, #0x8
	tst	x8, #0xe
	b.eq	.LBB419_4
// %bb.3:                               //   in Loop: Header=BB419_2 Depth=1
	mov	w8, wzr
	cbnz	w8, .LBB419_5
	b	.LBB419_12
.LBB419_4:                              // %"$5"
                                        //   in Loop: Header=BB419_2 Depth=1
	mov	x0, x19
	bl	firstByte
	and	w8, w0, #0xff
	cmp	w8, #64                         // =64
	cset	w8, eq
	cbz	w8, .LBB419_12
.LBB419_5:                              // %"$6"
                                        //   in Loop: Header=BB419_2 Depth=1
	mov	x8, x21
.LBB419_6:                              // %"$8"
                                        //   Parent Loop BB419_2 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	w8, w9, [x8]
	bfi	x8, x9, #32, #32
	ldp	w9, w10, [x8]
	bfi	x9, x10, #32, #32
	tst	x9, #0xf
	b.ne	.LBB419_12
// %bb.7:                               // %"$9"
                                        //   in Loop: Header=BB419_6 Depth=2
	ldp	w10, w11, [x9]
	bfi	x10, x11, #32, #32
	ldp	w12, w11, [x10]
	bfi	x12, x11, #32, #32
	cmp	x20, x12
	b.ne	.LBB419_9
// %bb.8:                               // %"$12"
                                        //   in Loop: Header=BB419_6 Depth=2
	ldp	w10, w11, [x10, #8]
	bfi	x10, x11, #32, #32
	cmp	x19, x10
	cset	w10, eq
	cbz	w10, .LBB419_10
	b	.LBB419_11
.LBB419_9:                              //   in Loop: Header=BB419_6 Depth=2
	mov	w10, wzr
	cbnz	w10, .LBB419_11
.LBB419_10:                             // %"$14"
                                        //   in Loop: Header=BB419_6 Depth=2
	add	x8, x8, #8                      // =8
	b	.LBB419_6
.LBB419_11:                             // %"$13"
                                        //   in Loop: Header=BB419_2 Depth=1
	ldp	w9, w8, [x9, #8]
	bfi	x9, x8, #32, #32
	ldp	w20, w8, [x9]
	bfi	x20, x8, #32, #32
	ldp	w19, w8, [x9, #8]
	bfi	x19, x8, #32, #32
	b	.LBB419_2
.LBB419_12:                             // %"$7"
	tst	x19, #0xf
	b.ne	.LBB419_14
// %bb.13:                              // %"$16"
	ldp	w1, w8, [x19]
	bfi	x1, x8, #32, #32
	mov	x0, x20
	bl	lup
	mov	x21, x0
	adrp	x22, env
	ldr	x8, [x22, :lo12:env]
	mov	x9, sp
	sub	x10, x9, #16                    // =16
	mov	sp, x10
	lsr	x11, x0, #32
	stp	w21, w11, [x9, #-16]
	mov	x23, x10
	str	w8, [x23, #8]!
	lsr	x8, x8, #32
	str	w8, [x23, #4]
	str	x10, [x22, :lo12:env]
	ldp	w1, w8, [x19, #8]
	bfi	x1, x8, #32, #32
	mov	x0, x20
	bl	lup
	mov	x1, x0
	mov	x0, x21
	bl	cons
	mov	x19, x0
	ldp	w9, w8, [x23]
	bfi	x9, x8, #32, #32
	str	x9, [x22, :lo12:env]
.LBB419_14:                             // %"$17"
	mov	x0, x19
	mov	sp, x29
	ldp	x20, x19, [sp, #48]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #32]             // 16-byte Folded Reload
	ldr	x23, [sp, #16]                  // 8-byte Folded Reload
	ldp	x29, x30, [sp], #64             // 16-byte Folded Reload
	ret
.LBB419_15:                             // %"$2"
	mov	x0, xzr
	bl	stkErr
.Lfunc_end419:
	.size	lup, .Lfunc_end419-lup
	.cfi_endproc
                                        // -- End function
	.globl	get                             // -- Begin function get
	.p2align	4
	.type	get,@function
get:                                    // @get
	.cfi_startproc
// %bb.0:                               // %"$1"
	cmp	x1, #2                          // =2
	b.ne	.LBB420_2
// %bb.1:                               // %"$2"
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	ret
.LBB420_2:                              // %"$3"
	ldp	w9, w8, [x0, #-8]
	bfi	x9, x8, #32, #32
	tst	x9, #0x6
	b.eq	.LBB420_4
.LBB420_3:
	adrp	x0, SymTab+8
	add	x0, x0, :lo12:SymTab+8
	ret
.LBB420_4:                              // %"$5"
	and	x8, x9, #0xfffffffffffffff7
	ldp	w10, w11, [x8]
	bfi	x10, x11, #32, #32
	tst	x10, #0xf
	b.eq	.LBB420_6
// %bb.5:                               // %"$7"
	cmp	x1, x10
	b.ne	.LBB420_8
	b	.LBB420_17
.LBB420_6:                              // %"$8"
	ldp	w12, w11, [x10, #8]
	bfi	x12, x11, #32, #32
	cmp	x1, x12
	b.ne	.LBB420_8
	b	.LBB420_20
.LBB420_7:                              // %"$18"
                                        //   in Loop: Header=BB420_8 Depth=1
	ldp	w13, w12, [x10, #8]
	bfi	x13, x12, #32, #32
	cmp	x1, x13
	b.eq	.LBB420_13
.LBB420_8:                              // %"$14"
                                        // =>This Inner Loop Header: Depth=1
	mov	x11, x8
	ldp	w8, w10, [x8, #8]
	bfi	x8, x10, #32, #32
	tst	x8, #0xf
	b.ne	.LBB420_3
// %bb.9:                               // %"$15"
                                        //   in Loop: Header=BB420_8 Depth=1
	ldp	w10, w12, [x8]
	bfi	x10, x12, #32, #32
	tst	x10, #0xf
	b.eq	.LBB420_7
// %bb.10:                              // %"$17"
                                        //   in Loop: Header=BB420_8 Depth=1
	cmp	x1, x10
	b.ne	.LBB420_8
// %bb.11:                              // %"$20"
	ldp	w10, w12, [x8, #8]
	stp	w10, w12, [x11, #8]
	tbz	w9, #3, .LBB420_15
// %bb.12:                              // %"$23"
	and	x10, x9, #0xfffffffffffffff7
	lsr	x9, x9, #32
	stp	w10, w9, [x8, #8]
	orr	x8, x8, #0x8
	b	.LBB420_16
.LBB420_13:                             // %"$25"
	ldp	w12, w13, [x8, #8]
	stp	w12, w13, [x11, #8]
	tbz	w9, #3, .LBB420_18
// %bb.14:                              // %"$28"
	and	x11, x9, #0xfffffffffffffff7
	lsr	x9, x9, #32
	stp	w11, w9, [x8, #8]
	orr	x8, x8, #0x8
	b	.LBB420_19
.LBB420_15:                             // %"$22"
	lsr	x10, x9, #32
	stp	w9, w10, [x8, #8]
.LBB420_16:                             // %"$24"
	lsr	x9, x8, #32
	stp	w8, w9, [x0, #-8]
.LBB420_17:                             // %"$10"
	adrp	x0, SymTab+216
	add	x0, x0, :lo12:SymTab+216
	ret
.LBB420_18:                             // %"$27"
	lsr	x11, x9, #32
	stp	w9, w11, [x8, #8]
.LBB420_19:                             // %"$29"
	lsr	x9, x8, #32
	stp	w8, w9, [x0, #-8]
.LBB420_20:                             // %"$12"
	ldp	w0, w8, [x10]
	bfi	x0, x8, #32, #32
	ret
.Lfunc_end420:
	.size	get, .Lfunc_end420-get
	.cfi_endproc
                                        // -- End function
	.globl	space                           // -- Begin function space
	.p2align	4
	.type	space,@function
space:                                  // @space
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	adrp	x8, ($Put)
	ldr	x8, [x8, :lo12:($Put)]
	mov	w0, #32
	blr	x8
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end421:
	.size	space, .Lfunc_end421-space
	.cfi_endproc
                                        // -- End function
	.globl	uniFill                         // -- Begin function uniFill
	.p2align	4
	.type	uniFill,@function
uniFill:                                // @uniFill
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-48]!           // 16-byte Folded Spill
	stp	x22, x21, [sp, #16]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #32]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 48
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w30, -40
	.cfi_offset w29, -48
	mov	x19, x0
	tst	x0, #0x6
	b.ne	.LBB422_5
// %bb.1:                               // %"$3"
	tbz	w19, #3, .LBB422_3
// %bb.2:                               // %"$6"
	adrp	x8, ($Pnl)
	ldr	x8, [x8, :lo12:($Pnl)]
	ldp	w8, w9, [x8]
	bfi	x8, x9, #32, #32
	ldp	w0, w9, [x8]
	bfi	x0, x9, #32, #32
	mov	x1, x19
	bl	lup
	mov	x19, x0
	b	.LBB422_5
.LBB422_3:                              // %"$5"
	mov	x8, sp
	adrp	x9, ($StkLimit)
	ldr	x9, [x9, :lo12:($StkLimit)]
	cmp	x9, x8
	b.hi	.LBB422_6
// %bb.4:                               // %"$8"
	ldp	w0, w8, [x19]
	bfi	x0, x8, #32, #32
	bl	uniFill
	mov	x20, x0
	adrp	x21, env
	ldr	x8, [x21, :lo12:env]
	mov	x9, sp
	sub	x10, x9, #16                    // =16
	mov	sp, x10
	lsr	x11, x0, #32
	stp	w20, w11, [x9, #-16]
	mov	x22, x10
	str	w8, [x22, #8]!
	lsr	x8, x8, #32
	str	w8, [x22, #4]
	str	x10, [x21, :lo12:env]
	ldp	w0, w8, [x19, #8]
	bfi	x0, x8, #32, #32
	bl	uniFill
	mov	x1, x0
	mov	x0, x20
	bl	cons
	mov	x19, x0
	ldp	w9, w8, [x22]
	bfi	x9, x8, #32, #32
	str	x9, [x21, :lo12:env]
.LBB422_5:                              // %"$2"
	mov	x0, x19
	mov	sp, x29
	ldp	x20, x19, [sp, #32]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #48             // 16-byte Folded Reload
	ret
.LBB422_6:                              // %"$7"
	mov	x0, xzr
	bl	stkErr
.Lfunc_end422:
	.size	uniFill, .Lfunc_end422-uniFill
	.cfi_endproc
                                        // -- End function
	.globl	print                           // -- Begin function print
	.p2align	4
	.type	print,@function
print:                                  // @print
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-64]!           // 16-byte Folded Spill
	str	x23, [sp, #16]                  // 8-byte Folded Spill
	stp	x22, x21, [sp, #32]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #48]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 64
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -48
	.cfi_offset w30, -56
	.cfi_offset w29, -64
	mov	x19, x0
	adrp	x8, ($Signal)
	ldr	w8, [x8, :lo12:($Signal)]
	cbz	w8, .LBB423_2
// %bb.1:                               // %"$2"
	mov	x0, xzr
	bl	sighandler
.LBB423_2:                              // %"$3"
	tbz	w19, #1, .LBB423_4
// %bb.3:                               // %"$6"
	mov	x0, x19
	bl	outNum
	b	.LBB423_43
.LBB423_4:                              // %"$5"
	tbz	w19, #2, .LBB423_6
// %bb.5:                               // %"$8"
	mov	x0, x19
	mov	x1, #-1
	mov	w2, wzr
	mov	w3, wzr
	mov	x4, xzr
	bl	fmtNum
	b	.LBB423_43
.LBB423_6:                              // %"$7"
	tbz	w19, #3, .LBB423_13
// %bb.7:                               // %"$10"
	ldp	w20, w8, [x19, #-8]
	bfi	x20, x8, #32, #32
	tbz	w20, #3, .LBB423_11
// %bb.8:                               // %"$13"
	adrp	x19, ($Put)
	ldr	x8, [x19, :lo12:($Put)]
	mov	w0, #123
	blr	x8
	and	x0, x20, #0xfffffffffffffff7
	tst	x0, #0x6
	b.ne	.LBB423_10
.LBB423_9:                              // %"$15"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w0, w8, [x0, #8]
	bfi	x0, x8, #32, #32
	tst	x0, #0x6
	b.eq	.LBB423_9
.LBB423_10:                             // %"$16"
	bl	prExt
	ldr	x8, [x19, :lo12:($Put)]
	mov	w0, #125
	b	.LBB423_42
.LBB423_11:                             // %"$17"
                                        // =>This Inner Loop Header: Depth=1
	tst	x20, #0x6
	b.ne	.LBB423_23
// %bb.12:                              // %"$18"
                                        //   in Loop: Header=BB423_11 Depth=1
	ldp	w20, w8, [x20, #8]
	bfi	x20, x8, #32, #32
	b	.LBB423_11
.LBB423_13:                             // %"$9"
	ldp	w9, w8, [x19]
	bfi	x9, x8, #32, #32
	adrp	x8, SymTab+200
	add	x8, x8, :lo12:SymTab+200
	cmp	x9, x8
	b.ne	.LBB423_25
// %bb.14:                              // %"$49"
	ldp	w9, w8, [x19, #8]
	bfi	x9, x8, #32, #32
	cmp	x19, x9
	cset	w8, ne
	cbnz	w8, .LBB423_26
.LBB423_15:                             // %"$50"
	mov	x8, sp
	adrp	x9, ($StkLimit)
	ldr	x9, [x9, :lo12:($StkLimit)]
	cmp	x9, x8
	b.hi	.LBB423_58
// %bb.16:                              // %"$53"
	adrp	x21, ($Put)
	ldr	x8, [x21, :lo12:($Put)]
	mov	w0, #40
	blr	x8
	mov	x0, x19
	bl	circ
	cbz	x0, .LBB423_30
// %bb.17:                              // %"$55"
	mov	x20, x0
	mov	x22, x19
.LBB423_18:                             // %"$62"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w0, w8, [x22]
	bfi	x0, x8, #32, #32
	bl	print
	bl	space
	ldp	w22, w8, [x22, #8]
	bfi	x22, x8, #32, #32
	cmp	x20, x22
	b.ne	.LBB423_18
// %bb.19:                              // %"$64"
	ldr	x8, [x21, :lo12:($Put)]
	mov	w0, #46
	blr	x8
	cmp	x20, x19
	b.eq	.LBB423_41
// %bb.20:                              // %"$65"
	bl	space
	ldr	x8, [x21, :lo12:($Put)]
	mov	w0, #40
	blr	x8
.LBB423_21:                             // %"$67"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w0, w8, [x22]
	bfi	x0, x8, #32, #32
	bl	print
	bl	space
	ldp	w22, w8, [x22, #8]
	bfi	x22, x8, #32, #32
	cmp	x20, x22
	b.ne	.LBB423_21
// %bb.22:                              // %"$69"
	ldr	x8, [x21, :lo12:($Put)]
	mov	w0, #46
	blr	x8
	ldr	x8, [x21, :lo12:($Put)]
	mov	w0, #41
	blr	x8
	b	.LBB423_41
.LBB423_23:                             // %"$19"
	cmp	x20, #2                         // =2
	b.ne	.LBB423_27
// %bb.24:                              // %"$21"
	adrp	x8, ($Put)
	ldr	x8, [x8, :lo12:($Put)]
	mov	w0, #36
	blr	x8
	lsr	x0, x19, #4
	bl	outOct
	b	.LBB423_43
.LBB423_25:
	mov	w8, wzr
	cbz	w8, .LBB423_15
.LBB423_26:                             // %"$51"
	adrp	x8, ($Put)
	ldr	x8, [x8, :lo12:($Put)]
	mov	w0, #39
	blr	x8
	ldp	w0, w8, [x19, #8]
	bfi	x0, x8, #32, #32
	bl	print
	b	.LBB423_43
.LBB423_27:                             // %"$20"
	adrp	x1, SymTab+112
	add	x1, x1, :lo12:SymTab+112
	mov	x0, x20
	bl	isIntern
	cmp	x19, x0
	b.ne	.LBB423_34
// %bb.28:                              // %"$23"
	adrp	x0, .L$47
	add	x0, x0, :lo12:.L$47
	bl	outString
.LBB423_29:                             // %"$47"
	mov	x0, x20
	bl	printName
	b	.LBB423_43
.LBB423_30:                             // %"$57.preheader"
	adrp	x20, SymTab+8
	add	x20, x20, :lo12:SymTab+8
.LBB423_31:                             // %"$57"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w0, w8, [x19]
	bfi	x0, x8, #32, #32
	bl	print
	ldp	w19, w8, [x19, #8]
	bfi	x19, x8, #32, #32
	cmp	x19, x20
	b.eq	.LBB423_41
// %bb.32:                              // %"$58"
                                        //   in Loop: Header=BB423_31 Depth=1
	tst	x19, #0xf
	b.ne	.LBB423_40
// %bb.33:                              // %"$60"
                                        //   in Loop: Header=BB423_31 Depth=1
	bl	space
	b	.LBB423_31
.LBB423_34:                             // %"$22"
	mov	w22, wzr
	adrp	x8, env+88
	add	x8, x8, :lo12:env+88
	b	.LBB423_36
.LBB423_35:                             // %"$43"
                                        //   in Loop: Header=BB423_36 Depth=1
	add	x8, x23, #8                     // =8
.LBB423_36:                             // %"$25"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w23, w9, [x8]
	bfi	x23, x9, #32, #32
	tst	x23, #0xf
	b.ne	.LBB423_44
// %bb.37:                              // %"$26"
                                        //   in Loop: Header=BB423_36 Depth=1
	ldp	w21, w8, [x23]
	bfi	x21, x8, #32, #32
	ldp	w9, w8, [x21]
	bfi	x9, x8, #32, #32
	ldp	w1, w8, [x9, #8]
	bfi	x1, x8, #32, #32
	mov	x0, x20
	bl	isIntern
	cbz	x0, .LBB423_35
// %bb.38:                              // %"$42"
                                        //   in Loop: Header=BB423_36 Depth=1
	cmp	x0, x19
	b.eq	.LBB423_56
// %bb.39:                              //   in Loop: Header=BB423_36 Depth=1
	mov	w22, #1
	b	.LBB423_35
.LBB423_40:                             // %"$61"
	adrp	x0, .L$48
	add	x0, x0, :lo12:.L$48
	bl	outString
	mov	x0, x19
	bl	print
.LBB423_41:                             // %"$56"
	ldr	x8, [x21, :lo12:($Put)]
	mov	w0, #41
.LBB423_42:                             // %"$4"
	blr	x8
.LBB423_43:                             // %"$4"
	mov	sp, x29
	ldp	x20, x19, [sp, #48]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #32]             // 16-byte Folded Reload
	ldr	x23, [sp, #16]                  // 8-byte Folded Reload
	ldp	x29, x30, [sp], #64             // 16-byte Folded Reload
	ret
.LBB423_44:                             // %"$28"
	adrp	x21, ($Put)
	ldr	x8, [x21, :lo12:($Put)]
	mov	w0, #34
	blr	x8
	mov	x8, sp
	sub	x19, x8, #16                    // =16
	mov	sp, x19
	stp	wzr, wzr, [x8, #-16]
	lsr	x9, x20, #32
	stp	w20, w9, [x8, #-8]
	mov	x0, x19
	bl	symByte
	mov	w20, w0
	b	.LBB423_47
.LBB423_45:                             // %"$35"
                                        //   in Loop: Header=BB423_47 Depth=1
	ldr	x8, [x21, :lo12:($Put)]
	mov	w0, #92
	blr	x8
.LBB423_46:                             // %"$30"
                                        //   in Loop: Header=BB423_47 Depth=1
	ldr	x8, [x21, :lo12:($Put)]
	mov	w0, w20
	blr	x8
	mov	x0, x19
	bl	symByte
	mov	w20, w0
	tst	w0, #0xff
	b.eq	.LBB423_55
.LBB423_47:                             // %"$29"
                                        // =>This Inner Loop Header: Depth=1
	and	w8, w20, #0xff
	cmp	w8, #92                         // =92
	b.eq	.LBB423_49
// %bb.48:                              // %"$32"
                                        //   in Loop: Header=BB423_47 Depth=1
	cmp	w8, #94                         // =94
	b.ne	.LBB423_50
.LBB423_49:                             //   in Loop: Header=BB423_47 Depth=1
	mov	w8, #1
	cbnz	w8, .LBB423_45
	b	.LBB423_51
.LBB423_50:                             // %"$33"
                                        //   in Loop: Header=BB423_47 Depth=1
	and	w8, w20, #0xff
	cmp	w8, #34                         // =34
	cset	w8, eq
	cbnz	w8, .LBB423_45
.LBB423_51:                             // %"$34"
                                        //   in Loop: Header=BB423_47 Depth=1
	and	w8, w20, #0xff
	cmp	w8, #127                        // =127
	b.ne	.LBB423_53
// %bb.52:                              // %"$37"
                                        //   in Loop: Header=BB423_47 Depth=1
	ldr	x8, [x21, :lo12:($Put)]
	mov	w0, #94
	blr	x8
	mov	w20, #63
	b	.LBB423_46
.LBB423_53:                             // %"$36"
                                        //   in Loop: Header=BB423_47 Depth=1
	cmp	w8, #31                         // =31
	b.hi	.LBB423_46
// %bb.54:                              // %"$39"
                                        //   in Loop: Header=BB423_47 Depth=1
	ldr	x8, [x21, :lo12:($Put)]
	mov	w0, #94
	blr	x8
	orr	w20, w20, #0x40
	b	.LBB423_46
.LBB423_55:                             // %"$41"
	ldr	x8, [x21, :lo12:($Put)]
	mov	w0, #34
	b	.LBB423_42
.LBB423_56:                             // %"$45"
	tbz	w22, #0, .LBB423_29
// %bb.57:                              // %"$46"
	mov	x0, x21
	bl	printSym
	adrp	x8, ($Put)
	ldr	x8, [x8, :lo12:($Put)]
	mov	w0, #126
	blr	x8
	b	.LBB423_29
.LBB423_58:                             // %"$52"
	mov	x0, xzr
	bl	stkErr
.Lfunc_end423:
	.size	print, .Lfunc_end423-print
	.cfi_endproc
                                        // -- End function
	.globl	outNum                          // -- Begin function outNum
	.p2align	4
	.type	outNum,@function
outNum:                                 // @outNum
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x30, x19, [sp, #-16]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w19, -8
	.cfi_offset w30, -16
	mov	x19, x0
	tbz	w19, #3, .LBB424_2
// %bb.1:                               // %"$2"
	adrp	x8, ($Put)
	ldr	x8, [x8, :lo12:($Put)]
	mov	w0, #45
	blr	x8
.LBB424_2:                              // %"$3"
	lsr	x0, x19, #4
	bl	outWord
	ldp	x30, x19, [sp], #16             // 16-byte Folded Reload
	ret
.Lfunc_end424:
	.size	outNum, .Lfunc_end424-outNum
	.cfi_endproc
                                        // -- End function
	.globl	prExt                           // -- Begin function prExt
	.p2align	4
	.type	prExt,@function
prExt:                                  // @prExt
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x30, x19, [sp, #-16]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w19, -8
	.cfi_offset w30, -16
	mov	x19, x0
	bl	objFile
	cbz	w0, .LBB425_2
// %bb.1:                               // %"$2"
	bl	outAo
.LBB425_2:                              // %"$3"
	mov	x0, x19
	bl	objId
	bl	outOct
	ldp	x30, x19, [sp], #16             // 16-byte Folded Reload
	ret
.Lfunc_end425:
	.size	prExt, .Lfunc_end425-prExt
	.cfi_endproc
                                        // -- End function
	.globl	outOct                          // -- Begin function outOct
	.p2align	4
	.type	outOct,@function
outOct:                                 // @outOct
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x30, x19, [sp, #-16]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w19, -8
	.cfi_offset w30, -16
	mov	x19, x0
	cmp	x0, #8                          // =8
	b.lo	.LBB426_2
// %bb.1:                               // %"$2"
	lsr	x0, x19, #3
	bl	outOct
	and	x19, x19, #0x7
.LBB426_2:                              // %"$3"
	add	w0, w19, #48                    // =48
	adrp	x8, ($Put)
	ldr	x8, [x8, :lo12:($Put)]
	blr	x8
	ldp	x30, x19, [sp], #16             // 16-byte Folded Reload
	ret
.Lfunc_end426:
	.size	outOct, .Lfunc_end426-outOct
	.cfi_endproc
                                        // -- End function
	.globl	printSym                        // -- Begin function printSym
	.p2align	4
	.type	printSym,@function
printSym:                               // @printSym
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	sub	x8, x0, #8                      // =8
.LBB427_1:                              // %"$2"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w0, w9, [x8]
	bfi	x0, x9, #32, #32
	tst	x0, #0x6
	b.ne	.LBB427_3
// %bb.2:                               // %"$3"
                                        //   in Loop: Header=BB427_1 Depth=1
	add	x8, x0, #8                      // =8
	b	.LBB427_1
.LBB427_3:                              // %"$4"
	bl	printName
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end427:
	.size	printSym, .Lfunc_end427-printSym
	.cfi_endproc
                                        // -- End function
	.globl	printName                       // -- Begin function printName
	.p2align	4
	.type	printName,@function
printName:                              // @printName
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-48]!           // 16-byte Folded Spill
	stp	x22, x21, [sp, #16]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #32]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 48
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w30, -40
	.cfi_offset w29, -48
	cmp	x0, #738                        // =738
	b.ne	.LBB428_3
// %bb.1:                               // %"$3"
	adrp	x19, ($Put)
	ldr	x8, [x19, :lo12:($Put)]
	mov	w0, #92
	blr	x8
	ldr	x8, [x19, :lo12:($Put)]
	mov	w0, #46
	blr	x8
.LBB428_2:                              // %"$4"
	mov	sp, x29
	ldp	x20, x19, [sp, #32]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #48             // 16-byte Folded Reload
	ret
.LBB428_3:                              // %"$2"
	mov	x8, sp
	sub	x19, x8, #16                    // =16
	mov	sp, x19
	stp	wzr, wzr, [x8, #-16]
	lsr	x9, x0, #32
	stp	w0, w9, [x8, #-8]
	mov	x0, x19
	bl	symByte
	mov	w20, w0
	and	w8, w0, #0xff
	cmp	w8, #35                         // =35
	adrp	x22, ($Put)
	b.ne	.LBB428_5
// %bb.4:                               // %"$5"
	ldr	x8, [x22, :lo12:($Put)]
	mov	w0, #92
	blr	x8
.LBB428_5:                              // %"$7.preheader"
	adrp	x21, ($Delim)
	add	x21, x21, :lo12:($Delim)
	b	.LBB428_7
.LBB428_6:                              // %"$11"
                                        //   in Loop: Header=BB428_7 Depth=1
	ldr	x8, [x22, :lo12:($Put)]
	mov	w0, w20
	blr	x8
	mov	x0, x19
	bl	symByte
	mov	w20, w0
	tst	w0, #0xff
	b.eq	.LBB428_2
.LBB428_7:                              // %"$7"
                                        // =>This Inner Loop Header: Depth=1
	and	w1, w20, #0xff
	cmp	w1, #92                         // =92
	b.ne	.LBB428_9
// %bb.8:                               //   in Loop: Header=BB428_7 Depth=1
	mov	w8, #1
	cbz	w8, .LBB428_6
	b	.LBB428_10
.LBB428_9:                              // %"$9"
                                        //   in Loop: Header=BB428_7 Depth=1
	mov	x0, x21
	bl	strchr2
	cmp	x0, #0                          // =0
	cset	w8, ne
	cbz	w8, .LBB428_6
.LBB428_10:                             // %"$10"
                                        //   in Loop: Header=BB428_7 Depth=1
	ldr	x8, [x22, :lo12:($Put)]
	mov	w0, #92
	blr	x8
	b	.LBB428_6
.Lfunc_end428:
	.size	printName, .Lfunc_end428-printName
	.cfi_endproc
                                        // -- End function
	.globl	circ                            // -- Begin function circ
	.p2align	4
	.type	circ,@function
circ:                                   // @circ
	.cfi_startproc
// %bb.0:                               // %"$1"
	tst	x0, #0xf
	b.eq	.LBB429_2
// %bb.1:
	mov	x0, xzr
	ret
.LBB429_2:                              // %"$5.preheader"
	mov	x8, x0
.LBB429_3:                              // %"$5"
                                        // =>This Inner Loop Header: Depth=1
	ldr	w9, [x8]
	orr	w9, w9, #0x1
	str	w9, [x8]
	ldp	w8, w9, [x8, #8]
	bfi	x8, x9, #32, #32
	tst	x8, #0xf
	b.ne	.LBB429_5
// %bb.4:                               // %"$6"
                                        //   in Loop: Header=BB429_3 Depth=1
	ldrb	w9, [x8]
	tbz	w9, #0, .LBB429_3
	b	.LBB429_8
.LBB429_5:                              // %"$9"
                                        // =>This Inner Loop Header: Depth=1
	ldr	w8, [x0]
	and	w8, w8, #0xfffffffe
	str	w8, [x0]
	ldp	w0, w8, [x0, #8]
	bfi	x0, x8, #32, #32
	tst	x0, #0xf
	b.eq	.LBB429_5
// %bb.6:
	mov	x0, xzr
	ret
.LBB429_7:                              // %"$15"
                                        //   in Loop: Header=BB429_8 Depth=1
	ldr	w9, [x0]
	and	w9, w9, #0xfffffffe
	str	w9, [x0]
	ldp	w0, w9, [x0, #8]
	bfi	x0, x9, #32, #32
.LBB429_8:                              // %"$14"
                                        // =>This Inner Loop Header: Depth=1
	cmp	x0, x8
	b.ne	.LBB429_7
.LBB429_9:                              // %"$17"
                                        // =>This Inner Loop Header: Depth=1
	ldr	w9, [x0]
	and	w9, w9, #0xfffffffe
	str	w9, [x0]
	ldp	w0, w9, [x0, #8]
	bfi	x0, x9, #32, #32
	cmp	x8, x0
	b.ne	.LBB429_9
// %bb.10:                              // %"$4"
	mov	x0, x8
	ret
.Lfunc_end429:
	.size	circ, .Lfunc_end429-circ
	.cfi_endproc
                                        // -- End function
	.globl	outAo                           // -- Begin function outAo
	.p2align	4
	.type	outAo,@function
outAo:                                  // @outAo
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x30, x19, [sp, #-16]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w19, -8
	.cfi_offset w30, -16
	mov	w19, w0
	cmp	w0, #16                         // =16
	b.lt	.LBB430_2
// %bb.1:                               // %"$2"
	lsr	w0, w19, #4
	bl	outAo
	and	w19, w19, #0xf
.LBB430_2:                              // %"$3"
	add	w0, w19, #64                    // =64
	adrp	x8, ($Put)
	ldr	x8, [x8, :lo12:($Put)]
	blr	x8
	ldp	x30, x19, [sp], #16             // 16-byte Folded Reload
	ret
.Lfunc_end430:
	.size	outAo, .Lfunc_end430-outAo
	.cfi_endproc
                                        // -- End function
	.globl	fill                            // -- Begin function fill
	.p2align	4
	.type	fill,@function
fill:                                   // @fill
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-64]!           // 16-byte Folded Spill
	stp	x24, x23, [sp, #16]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #32]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #48]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 64
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w30, -56
	.cfi_offset w29, -64
	tst	x0, #0x6
	b.eq	.LBB431_3
.LBB431_1:
	mov	x19, xzr
.LBB431_2:                              // %"$2"
	mov	x0, x19
	mov	sp, x29
	ldp	x20, x19, [sp, #48]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #32]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #64             // 16-byte Folded Reload
	ret
.LBB431_3:                              // %"$3"
	mov	x20, x1
	tbz	w0, #3, .LBB431_8
// %bb.4:                               // %"$6"
	ldp	w19, w8, [x0]
	bfi	x19, x8, #32, #32
	cmp	x0, x19
	b.eq	.LBB431_1
// %bb.5:                               // %"$8"
	adrp	x8, SymTab+8
	add	x8, x8, :lo12:SymTab+8
	cmp	x20, x8
	b.ne	.LBB431_17
// %bb.6:                               // %"$11"
	adrp	x8, SymTab+376
	add	x8, x8, :lo12:SymTab+376
	cmp	x0, x8
	b.eq	.LBB431_1
// %bb.7:                               // %"$13"
	bl	firstByte
	and	w8, w0, #0xff
	cmp	w8, #64                         // =64
	b.ne	.LBB431_1
	b	.LBB431_2
.LBB431_8:                              // %"$5"
	mov	x8, sp
	adrp	x9, ($StkLimit)
	ldr	x9, [x9, :lo12:($StkLimit)]
	cmp	x9, x8
	b.hi	.LBB431_36
// %bb.9:                               // %"$28"
	ldp	w22, w8, [x0]
	bfi	x22, x8, #32, #32
	ldp	w21, w8, [x0, #8]
	bfi	x21, x8, #32, #32
	adrp	x8, SymTab+536
	add	x8, x8, :lo12:SymTab+536
	cmp	x22, x8
	b.ne	.LBB431_13
// %bb.10:                              // %"$29"
	ldp	w19, w8, [x21]
	bfi	x19, x8, #32, #32
	ldp	w21, w8, [x21, #8]
	bfi	x21, x8, #32, #32
	tst	x19, #0x6
	b.ne	.LBB431_25
// %bb.11:                              // %"$33"
	tbz	w19, #3, .LBB431_24
// %bb.12:                              // %"$36"
	ldp	w19, w8, [x19]
	bfi	x19, x8, #32, #32
	b	.LBB431_25
.LBB431_13:                             // %"$30"
	mov	x0, x22
	mov	x1, x20
	bl	fill
	cbz	x0, .LBB431_22
// %bb.14:                              // %"$51"
	mov	x19, x0
	adrp	x22, env
	ldr	x8, [x22, :lo12:env]
	mov	x9, sp
	sub	x23, x9, #16                    // =16
	mov	sp, x23
	lsr	x10, x0, #32
	lsr	x11, x8, #32
	stp	w19, w10, [x9, #-16]
	stp	w8, w11, [x9, #-8]
	str	x23, [x22, :lo12:env]
	mov	x0, x21
	mov	x1, x20
	bl	fill
	mov	x1, x0
	cbnz	x0, .LBB431_16
// %bb.15:                              // %"$53"
	mov	x1, x21
.LBB431_16:                             // %"$54"
	mov	x0, x19
	bl	cons
	mov	x19, x0
	b	.LBB431_33
.LBB431_17:                             // %"$10"
	cmp	x0, x20
	b.ne	.LBB431_19
.LBB431_18:
	mov	w8, #1
	b	.LBB431_35
.LBB431_19:                             // %"$19"
                                        // =>This Inner Loop Header: Depth=1
	tst	x20, #0xf
	b.ne	.LBB431_34
// %bb.20:                              // %"$20"
                                        //   in Loop: Header=BB431_19 Depth=1
	ldp	w9, w8, [x20]
	bfi	x9, x8, #32, #32
	cmp	x0, x9
	b.eq	.LBB431_18
// %bb.21:                              // %"$23"
                                        //   in Loop: Header=BB431_19 Depth=1
	ldp	w20, w8, [x20, #8]
	bfi	x20, x8, #32, #32
	b	.LBB431_19
.LBB431_22:                             // %"$50"
	mov	x0, x21
	mov	x1, x20
	bl	fill
	cbz	x0, .LBB431_1
// %bb.23:                              // %"$56"
	mov	x1, x0
	mov	x0, x22
	bl	cons
	mov	x19, x0
	b	.LBB431_2
.LBB431_24:                             // %"$35"
	mov	x0, x19
	bl	evList
	mov	x19, x0
.LBB431_25:                             // %"$32"
	tst	x19, #0xf
	b.eq	.LBB431_28
// %bb.26:                              // %"$37"
	mov	x0, x21
	mov	x1, x20
	bl	fill
	mov	x19, x0
	cbnz	x0, .LBB431_2
// %bb.27:                              // %"$41"
	mov	x19, x21
	b	.LBB431_2
.LBB431_28:                             // %"$38"
	adrp	x22, env
	ldr	x8, [x22, :lo12:env]
	mov	x9, sp
	sub	x23, x9, #16                    // =16
	mov	sp, x23
	lsr	x10, x19, #32
	lsr	x11, x8, #32
	stp	w19, w10, [x9, #-16]
	stp	w8, w11, [x9, #-8]
	mov	x8, x19
	str	x23, [x22, :lo12:env]
.LBB431_29:                             // %"$43"
                                        // =>This Inner Loop Header: Depth=1
	mov	x24, x8
	ldp	w8, w9, [x8, #8]
	bfi	x8, x9, #32, #32
	tst	x8, #0xf
	b.eq	.LBB431_29
// %bb.30:                              // %"$45"
	mov	x0, x21
	mov	x1, x20
	bl	fill
	cbnz	x0, .LBB431_32
// %bb.31:                              // %"$47"
	mov	x0, x21
.LBB431_32:                             // %"$48"
	lsr	x8, x0, #32
	stp	w0, w8, [x24, #8]
.LBB431_33:                             // %"$2"
	ldp	w9, w8, [x23, #8]
	bfi	x9, x8, #32, #32
	str	x9, [x22, :lo12:env]
	b	.LBB431_2
.LBB431_34:
	mov	w8, wzr
.LBB431_35:                             // %"$17"
	tst	w8, #0x1
	csel	x19, x19, xzr, ne
	b	.LBB431_2
.LBB431_36:                             // %"$27"
	mov	x0, xzr
	bl	stkErr
.Lfunc_end431:
	.size	fill, .Lfunc_end431-fill
	.cfi_endproc
                                        // -- End function
	.globl	match                           // -- Begin function match
	.p2align	4
	.type	match,@function
match:                                  // @match
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-48]!                // 8-byte Folded Spill
	stp	x22, x21, [sp, #16]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #32]             // 16-byte Folded Spill
	.cfi_def_cfa_offset 48
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w30, -48
	mov	x19, x1
	mov	x20, x0
	adrp	x22, ($StkLimit)
	tst	x20, #0xf
	b.eq	.LBB432_6
.LBB432_1:                              // %"$5"
	tst	x20, #0x6
	b.eq	.LBB432_22
// %bb.2:
	mov	w8, #1
	cbz	w8, .LBB432_23
.LBB432_3:                              // %"$8"
	mov	x0, x20
	mov	x1, x19
	bl	equal
	b	.LBB432_25
.LBB432_4:                              // %"$28"
                                        //   in Loop: Header=BB432_6 Depth=1
	ldp	w1, w8, [x19]
	bfi	x1, x8, #32, #32
	mov	x0, x21
	bl	match
	eor	w8, w0, #0x1
	tbnz	w8, #0, .LBB432_18
.LBB432_5:                              // %"$29"
                                        //   in Loop: Header=BB432_6 Depth=1
	ldp	w20, w8, [x20, #8]
	bfi	x20, x8, #32, #32
	ldp	w19, w8, [x19, #8]
	bfi	x19, x8, #32, #32
	tst	x20, #0xf
	b.ne	.LBB432_1
.LBB432_6:                              // %"$3"
                                        // =>This Inner Loop Header: Depth=1
	mov	x8, sp
	ldr	x9, [x22, :lo12:($StkLimit)]
	cmp	x9, x8
	b.hi	.LBB432_26
// %bb.7:                               // %"$12"
                                        //   in Loop: Header=BB432_6 Depth=1
	ldp	w21, w8, [x20]
	eor	w9, w21, #0x8
	bfi	x21, x8, #32, #32
	tst	x9, #0xe
	b.eq	.LBB432_9
// %bb.8:                               //   in Loop: Header=BB432_6 Depth=1
	mov	w8, wzr
	cbnz	w8, .LBB432_10
	b	.LBB432_14
.LBB432_9:                              // %"$14"
                                        //   in Loop: Header=BB432_6 Depth=1
	mov	x0, x21
	bl	firstByte
	and	w8, w0, #0xff
	cmp	w8, #64                         // =64
	cset	w8, eq
	cbz	w8, .LBB432_14
.LBB432_10:                             // %"$15"
                                        //   in Loop: Header=BB432_6 Depth=1
	tst	x19, #0xf
	b.ne	.LBB432_16
// %bb.11:                              // %"$17"
                                        //   in Loop: Header=BB432_6 Depth=1
	ldp	w0, w8, [x20, #8]
	bfi	x0, x8, #32, #32
	ldp	w1, w8, [x19, #8]
	bfi	x1, x8, #32, #32
	bl	match
	tbnz	w0, #0, .LBB432_19
// %bb.12:                              // %"$21"
                                        //   in Loop: Header=BB432_6 Depth=1
	ldp	w0, w8, [x20, #8]
	bfi	x0, x8, #32, #32
	mov	x1, x19
	bl	match
	tbnz	w0, #0, .LBB432_17
// %bb.13:                              // %"$23"
                                        //   in Loop: Header=BB432_6 Depth=1
	ldp	w1, w8, [x19, #8]
	bfi	x1, x8, #32, #32
	mov	x0, x20
	bl	match
	tbnz	w0, #0, .LBB432_20
.LBB432_14:                             // %"$16"
                                        //   in Loop: Header=BB432_6 Depth=1
	tst	x19, #0xf
	b.eq	.LBB432_4
// %bb.15:                              //   in Loop: Header=BB432_6 Depth=1
	mov	w8, #1
	tbz	w8, #0, .LBB432_5
	b	.LBB432_18
.LBB432_16:                             // %"$18"
	ldp	w0, w8, [x20, #8]
	bfi	x0, x8, #32, #32
	mov	x1, x19
	bl	equal
	tbz	w0, #0, .LBB432_18
.LBB432_17:                             // %"$20"
	adrp	x8, SymTab+8
	add	x8, x8, :lo12:SymTab+8
	lsr	x9, x8, #32
	stp	w8, w9, [x21]
	b	.LBB432_24
.LBB432_18:
	mov	w0, wzr
	b	.LBB432_25
.LBB432_19:                             // %"$22"
	ldp	w0, w8, [x19]
	bfi	x0, x8, #32, #32
	adrp	x1, SymTab+8
	add	x1, x1, :lo12:SymTab+8
	b	.LBB432_21
.LBB432_20:                             // %"$26"
	ldp	w0, w8, [x19]
	bfi	x0, x8, #32, #32
	ldp	w1, w8, [x21]
	bfi	x1, x8, #32, #32
.LBB432_21:                             // %"$4"
	bl	cons
	lsr	x8, x0, #32
	stp	w0, w8, [x21]
	b	.LBB432_24
.LBB432_22:                             // %"$7"
	mov	x0, x20
	bl	firstByte
	and	w8, w0, #0xff
	cmp	w8, #64                         // =64
	cset	w8, ne
	cbnz	w8, .LBB432_3
.LBB432_23:                             // %"$9"
	lsr	x8, x19, #32
	stp	w19, w8, [x20]
.LBB432_24:                             // %"$4"
	mov	w0, #1
.LBB432_25:                             // %"$4"
	and	w0, w0, #0x1
	ldp	x20, x19, [sp, #32]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #16]             // 16-byte Folded Reload
	ldr	x30, [sp], #48                  // 8-byte Folded Reload
	ret
.LBB432_26:                             // %"$11"
	mov	x0, xzr
	bl	stkErr
.Lfunc_end432:
	.size	match, .Lfunc_end432-match
	.cfi_endproc
                                        // -- End function
	.globl	binSize                         // -- Begin function binSize
	.p2align	4
	.type	binSize,@function
binSize:                                // @binSize
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-48]!                // 8-byte Folded Spill
	stp	x22, x21, [sp, #16]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #32]             // 16-byte Folded Spill
	.cfi_def_cfa_offset 48
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w30, -48
	mov	x20, x0
	tbz	w20, #1, .LBB433_4
// %bb.1:                               // %"$4"
	lsr	x8, x20, #3
.LBB433_2:                              // %"$5.preheader"
	mov	w19, #2
	lsr	x8, x8, #8
	cbz	x8, .LBB433_17
.LBB433_3:                              // %"$6"
                                        // =>This Inner Loop Header: Depth=1
	add	x19, x19, #1                    // =1
	lsr	x8, x8, #8
	cbnz	x8, .LBB433_3
	b	.LBB433_17
.LBB433_4:                              // %"$3"
	tbz	w20, #2, .LBB433_8
// %bb.5:                               // %"$9"
	and	x9, x20, #0xfffffffffffffff7
	mov	w8, #9
.LBB433_6:                              // %"$10"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w10, w11, [x9, #4]
	bfi	x10, x11, #32, #32
	tbnz	w10, #1, .LBB433_14
// %bb.7:                               // %"$11"
                                        //   in Loop: Header=BB433_6 Depth=1
	add	x8, x8, #8                      // =8
	mov	x9, x10
	b	.LBB433_6
.LBB433_8:                              // %"$8"
	tbz	w20, #3, .LBB433_18
// %bb.9:                               // %"$22"
	adrp	x8, SymTab+8
	add	x8, x8, :lo12:SymTab+8
	cmp	x20, x8
	b.eq	.LBB433_13
// %bb.10:                              // %"$24"
	ldp	w9, w8, [x20, #-8]
	bfi	x9, x8, #32, #32
	and	x9, x9, #0xfffffffffffffff7
	tst	x9, #0x6
	b.ne	.LBB433_12
.LBB433_11:                             // %"$27"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w9, w8, [x9, #8]
	bfi	x9, x8, #32, #32
	tst	x9, #0x6
	b.eq	.LBB433_11
.LBB433_12:                             // %"$28"
	cmp	x9, #2                          // =2
	b.ne	.LBB433_24
.LBB433_13:
	mov	w19, #1
	b	.LBB433_17
.LBB433_14:                             // %"$12"
	ldp	w9, w11, [x9, #-4]
	bfi	x9, x11, #32, #32
	lsr	x10, x10, #4
	cmn	x9, x9
	add	x9, x10, x10
	cinc	x9, x9, hs
	cbz	x9, .LBB433_16
.LBB433_15:                             // %"$15"
                                        // =>This Inner Loop Header: Depth=1
	add	x8, x8, #1                      // =1
	lsr	x9, x9, #8
	cbnz	x9, .LBB433_15
.LBB433_16:                             // %"$14"
	sub	x9, x8, #64                     // =64
	mov	x10, #-9187201950435737472
	movk	x10, #32897
	umulh	x9, x9, x10
	add	x9, x8, x9, lsr #7
	cmp	x8, #64                         // =64
	csinc	x19, x8, x9, lo
.LBB433_17:                             // %"$2"
	mov	x0, x19
	ldp	x20, x19, [sp, #32]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #16]             // 16-byte Folded Reload
	ldr	x30, [sp], #48                  // 8-byte Folded Reload
	ret
.LBB433_18:                             // %"$21"
	mov	w19, #2
	mov	x21, x20
	adrp	x22, SymTab+8
	add	x22, x22, :lo12:SymTab+8
.LBB433_19:                             // %"$36"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w0, w8, [x21]
	bfi	x0, x8, #32, #32
	ldp	w21, w8, [x21, #8]
	bfi	x21, x8, #32, #32
	bl	binSize
	add	x19, x19, x0
	cmp	x21, x22
	b.eq	.LBB433_17
// %bb.20:                              // %"$37"
                                        //   in Loop: Header=BB433_19 Depth=1
	cmp	x20, x21
	b.eq	.LBB433_23
// %bb.21:                              // %"$40"
                                        //   in Loop: Header=BB433_19 Depth=1
	tst	x21, #0xf
	b.eq	.LBB433_19
// %bb.22:                              // %"$43"
	mov	x0, x21
	bl	binSize
	add	x19, x19, x0
	b	.LBB433_17
.LBB433_23:                             // %"$41"
	add	x19, x19, #1                    // =1
	b	.LBB433_17
.LBB433_24:                             // %"$29"
	tbz	w9, #1, .LBB433_26
// %bb.25:                              // %"$32"
	ubfx	x8, x9, #4, #58
	b	.LBB433_2
.LBB433_26:                             // %"$33.preheader"
	mov	w8, #9
.LBB433_27:                             // %"$33"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w9, w10, [x9, #4]
	bfi	x9, x10, #32, #32
	tbnz	w9, #1, .LBB433_29
// %bb.28:                              // %"$34"
                                        //   in Loop: Header=BB433_27 Depth=1
	add	x8, x8, #8                      // =8
	b	.LBB433_27
.LBB433_29:                             // %"$35"
	lsr	x9, x9, #4
	cbnz	x9, .LBB433_15
	b	.LBB433_16
.Lfunc_end433:
	.size	binSize, .Lfunc_end433-binSize
	.cfi_endproc
                                        // -- End function
	.globl	size                            // -- Begin function size
	.p2align	4
	.type	size,@function
size:                                   // @size
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x30, x23, [sp, #-48]!           // 16-byte Folded Spill
	stp	x22, x21, [sp, #16]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #32]             // 16-byte Folded Spill
	.cfi_def_cfa_offset 48
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w30, -48
	mov	x19, x0
	ldp	w21, w8, [x0]
	mov	w20, #1
	bfi	x21, x8, #32, #32
	adrp	x23, ($StkLimit)
	mov	x22, x0
	tst	x21, #0xf
	b.ne	.LBB434_3
.LBB434_1:                              // %"$3"
	mov	x8, sp
	ldr	x9, [x23, :lo12:($StkLimit)]
	cmp	x9, x8
	b.hi	.LBB434_11
// %bb.2:                               // %"$6"
	mov	x0, x21
	bl	size
	add	x20, x20, x0
.LBB434_3:                              // %"$4"
                                        // =>This Inner Loop Header: Depth=1
	orr	w8, w21, #0x1
	lsr	x9, x21, #32
	stp	w8, w9, [x22]
	ldp	w22, w8, [x22, #8]
	bfi	x22, x8, #32, #32
	tst	x22, #0xf
	b.ne	.LBB434_6
// %bb.4:                               // %"$7"
                                        //   in Loop: Header=BB434_3 Depth=1
	ldp	w21, w8, [x22]
	bfi	x21, x8, #32, #32
	tbnz	w21, #0, .LBB434_8
// %bb.5:                               // %"$13"
                                        //   in Loop: Header=BB434_3 Depth=1
	add	x20, x20, #1                    // =1
	tst	x21, #0xf
	b.ne	.LBB434_3
	b	.LBB434_1
.LBB434_6:                              // %"$10"
                                        // =>This Inner Loop Header: Depth=1
	ldr	w8, [x19]
	and	w8, w8, #0xfffffffe
	str	w8, [x19]
	ldp	w19, w8, [x19, #8]
	bfi	x19, x8, #32, #32
	cmp	x22, x19
	b.ne	.LBB434_6
	b	.LBB434_10
.LBB434_7:                              // %"$16"
                                        //   in Loop: Header=BB434_8 Depth=1
	ldr	w8, [x19]
	and	w8, w8, #0xfffffffe
	str	w8, [x19]
	ldp	w19, w8, [x19, #8]
	bfi	x19, x8, #32, #32
.LBB434_8:                              // %"$15"
                                        // =>This Inner Loop Header: Depth=1
	cmp	x22, x19
	b.ne	.LBB434_7
.LBB434_9:                              // %"$18"
                                        // =>This Inner Loop Header: Depth=1
	ldr	w8, [x19]
	and	w8, w8, #0xfffffffe
	str	w8, [x19]
	ldp	w19, w8, [x19, #8]
	bfi	x19, x8, #32, #32
	cmp	x22, x19
	b.ne	.LBB434_9
.LBB434_10:                             // %"$8"
	mov	x0, x20
	ldp	x20, x19, [sp, #32]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #16]             // 16-byte Folded Reload
	ldp	x30, x23, [sp], #48             // 16-byte Folded Reload
	ret
.LBB434_11:                             // %"$5"
	mov	x0, xzr
	bl	stkErr
.Lfunc_end434:
	.size	size, .Lfunc_end434-size
	.cfi_endproc
                                        // -- End function
	.globl	dbFetch                         // -- Begin function dbFetch
	.p2align	4
	.type	dbFetch,@function
dbFetch:                                // @dbFetch
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	ldp	w9, w8, [x1, #-8]
	bfi	x9, x8, #32, #32
	adds	x8, x9, x9
	cset	w10, hs
	adds	x11, x8, x8
	cset	w12, lo
	cmp	w10, #0                         // =0
	csel	x8, x8, x11, ne
	csel	w10, wzr, w12, ne
	tst	x9, #0x6
	csel	x8, x9, x8, eq
	csel	w9, wzr, w10, eq
	cbz	w9, .LBB435_2
// %bb.1:                               // %"$5"
	mov	x2, #4611686018427387904
	bfxil	x2, x8, #2, #62
	lsr	x8, x8, #2
	lsr	x9, x2, #32
	stp	w8, w9, [x1, #-8]
	bl	db
.LBB435_2:                              // %"$6"
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end435:
	.size	dbFetch, .Lfunc_end435-dbFetch
	.cfi_endproc
                                        // -- End function
	.globl	db                              // -- Begin function db
	.p2align	4
	.type	db,@function
db:                                     // @db
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-48]!           // 16-byte Folded Spill
	stp	x22, x21, [sp, #16]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #32]             // 16-byte Folded Spill
	mov	x29, sp
	sub	sp, sp, #16                     // =16
	.cfi_def_cfa w29, 48
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w30, -40
	.cfi_offset w29, -48
	mov	x20, x2
	mov	x19, x1
	mov	x21, x0
	adrp	x22, env
	ldr	x8, [x22, :lo12:env]
	stp	x1, x8, [x29, #-16]
	sub	x8, x29, #16                    // =16
	str	x8, [x22, :lo12:env]
	mov	x0, x2
	bl	objFile
	adrp	x8, ($DBs)
	ldr	w8, [x8, :lo12:($DBs)]
	cmp	w0, w8
	b.lt	.LBB436_7
// %bb.1:                               // %"$2"
	adrp	x8, SymTab+472
	ldr	x8, [x8, :lo12:SymTab+472]
	tst	x8, #0xf
	b.eq	.LBB436_17
// %bb.2:
	mov	w9, #1
	tbnz	w9, #0, .LBB436_18
.LBB436_3:                              // %"$10"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w9, w10, [x8, #8]
	bfi	x9, x10, #32, #32
	tst	x9, #0xf
	b.eq	.LBB436_5
// %bb.4:                               //   in Loop: Header=BB436_3 Depth=1
	mov	w9, wzr
	cbnz	w9, .LBB436_6
	b	.LBB436_11
.LBB436_5:                              // %"$12"
                                        //   in Loop: Header=BB436_3 Depth=1
	ldp	w9, w10, [x9]
	bfi	x9, x10, #32, #32
	ldp	w9, w10, [x9]
	bfi	x9, x10, #32, #32
	lsr	x9, x9, #4
	cmp	w0, w9
	cset	w9, ge
	cbz	w9, .LBB436_11
.LBB436_6:                              // %"$13"
                                        //   in Loop: Header=BB436_3 Depth=1
	ldp	w8, w9, [x8, #8]
	bfi	x8, x9, #32, #32
	b	.LBB436_3
.LBB436_7:                              // %"$3"
	adrp	x8, ($DbFiles)
	ldr	x8, [x8, :lo12:($DbFiles)]
	mov	w9, #42
	mul	w9, w0, w9
	add	x8, x8, w9, sxtw
	adrp	x9, ($DbFile)
	str	x8, [x9, :lo12:($DbFile)]
	bl	rdLockDb
	mov	x0, x20
	bl	objId
	lsl	x0, x0, #6
	bl	rdBlock
	ldrb	w8, [x0]
	and	w8, w8, #0x3f
	cmp	w8, #1                          // =1
	b.ne	.LBB436_23
// %bb.8:                               // %"$22"
	adrp	x8, ($GetBin)
	adrp	x9, getBlock
	add	x9, x9, :lo12:getBlock
	str	x9, [x8, :lo12:($GetBin)]
	adrp	x8, ($Extn)
	str	wzr, [x8, :lo12:($Extn)]
	bl	binRead
	lsr	x8, x0, #32
	stp	w0, w8, [x19]
	bl	binRead
	adrp	x21, SymTab+8
	add	x21, x21, :lo12:SymTab+8
	cmp	x0, x21
	b.ne	.LBB436_13
// %bb.9:                               // %"$23"
	lsr	x8, x20, #32
	stp	w20, w8, [x19, #-8]
.LBB436_10:                             // %"$25"
	mov	w0, #1
	bl	unLockDb
	b	.LBB436_22
.LBB436_11:                             // %"$14"
	mov	x9, sp
	sub	x10, x9, #32                    // =32
	mov	sp, x10
	adrp	x11, SymTab+8
	add	x11, x11, :lo12:SymTab+8
	lsr	x12, x11, #32
	stp	w11, w12, [x9, #-24]
	mov	w11, #2
	stp	w11, wzr, [x9, #-16]
	lsr	x12, x19, #32
	mov	x13, x10
	str	w19, [x13, #24]!
	stur	w12, [x9, #-4]
	ldp	w8, w12, [x8]
	bfi	x8, x12, #32, #32
	ldp	w12, w8, [x8, #8]
	mov	x14, sp
	sub	x0, x14, #32                    // =32
	mov	sp, x0
	lsr	x15, x10, #32
	stp	w10, w15, [x14, #-24]
	stp	w11, wzr, [x14, #-16]
	stur	w8, [x14, #-4]
	mov	x8, x0
	str	w12, [x8, #24]!
	lsr	x10, x13, #32
	stp	w13, w10, [x9, #-32]
	lsr	x9, x8, #32
	stp	w8, w9, [x14, #-32]
	bl	evList
	ldp	w9, w10, [x0]
	ldp	w8, w11, [x0, #8]
	bfi	x8, x11, #32, #32
	stp	w9, w10, [x19]
	tst	x8, #0xf
	b.eq	.LBB436_19
// %bb.12:                              // %"$15"
	lsr	x8, x20, #32
	stp	w20, w8, [x19, #-8]
	b	.LBB436_22
.LBB436_13:                             // %"$24"
	mov	x1, x20
	bl	cons
	mov	x20, x0
	orr	w8, w20, #0x8
	lsr	x9, x0, #32
	stp	w8, w9, [x19, #-8]
	bl	binRead
	adrp	x19, SymTab+216
	add	x19, x19, :lo12:SymTab+216
	cmp	x0, x19
	b.eq	.LBB436_15
.LBB436_14:                             // %"$26"
	ldp	w1, w8, [x20]
	bfi	x1, x8, #32, #32
	bl	cons
	lsr	x8, x0, #32
	stp	w0, w8, [x20]
.LBB436_15:                             // %"$28"
                                        // =>This Inner Loop Header: Depth=1
	bl	binRead
	cmp	x0, x21
	b.eq	.LBB436_10
// %bb.16:                              // %"$29"
                                        //   in Loop: Header=BB436_15 Depth=1
	ldr	w1, [x20, #8]!
	ldr	w8, [x20, #4]
	bfi	x1, x8, #32, #32
	bl	cons
	lsr	x8, x0, #32
	stp	w0, w8, [x20]
	mov	x20, x0
	bl	binRead
	cmp	x0, x19
	b.ne	.LBB436_14
	b	.LBB436_15
.LBB436_17:                             // %"$6"
	ldp	w10, w9, [x8]
	bfi	x10, x9, #32, #32
	ldp	w10, w9, [x10]
	bfi	x10, x9, #32, #32
	lsr	x9, x10, #4
	add	w0, w0, #1                      // =1
	cmp	w9, w0
	cset	w9, gt
	tbz	w9, #0, .LBB436_3
.LBB436_18:                             // %"$7"
	mov	x0, x21
	bl	dbfErr
.LBB436_19:                             // %"$16"
	orr	w9, w8, #0x8
	lsr	x10, x8, #32
	stp	w9, w10, [x19, #-8]
.LBB436_20:                             // %"$18"
                                        // =>This Inner Loop Header: Depth=1
	mov	x9, x8
	ldp	w8, w10, [x8, #8]
	bfi	x8, x10, #32, #32
	tst	x8, #0xf
	b.eq	.LBB436_20
// %bb.21:                              // %"$20"
	lsr	x8, x20, #32
	stp	w20, w8, [x9, #8]
.LBB436_22:                             // %"$4"
	ldur	x8, [x29, #-8]
	str	x8, [x22, :lo12:env]
	mov	sp, x29
	ldp	x20, x19, [sp, #32]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #48             // 16-byte Folded Reload
	ret
.LBB436_23:                             // %"$21"
	adrp	x2, .L$71
	add	x2, x2, :lo12:.L$71
	mov	x0, x21
	mov	x1, x19
	mov	x3, xzr
	bl	err
.Lfunc_end436:
	.size	db, .Lfunc_end436-db
	.cfi_endproc
                                        // -- End function
	.globl	dbfErr                          // -- Begin function dbfErr
	.p2align	4
	.type	dbfErr,@function
dbfErr:                                 // @dbfErr
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	adrp	x2, .L$50
	add	x2, x2, :lo12:.L$50
	mov	x1, xzr
	mov	x3, xzr
	bl	err
.Lfunc_end437:
	.size	dbfErr, .Lfunc_end437-dbfErr
	.cfi_endproc
                                        // -- End function
	.globl	rdLockDb                        // -- Begin function rdLockDb
	.p2align	4
	.type	rdLockDb,@function
rdLockDb:                               // @rdLockDb
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	adrp	x0, .L$55
	add	x0, x0, :lo12:.L$55
	bl	outString
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end438:
	.size	rdLockDb, .Lfunc_end438-rdLockDb
	.cfi_endproc
                                        // -- End function
	.globl	rdBlock                         // -- Begin function rdBlock
	.p2align	4
	.type	rdBlock,@function
rdBlock:                                // @rdBlock
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-32]!                // 8-byte Folded Spill
	stp	x20, x19, [sp, #16]             // 16-byte Folded Spill
	.cfi_def_cfa_offset 32
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w30, -32
	adrp	x8, ($DbFile)
	ldr	x20, [x8, :lo12:($DbFile)]
	adrp	x8, ($DbBlock)
	ldr	x19, [x8, :lo12:($DbBlock)]
	adrp	x8, ($BlkIndex)
	str	x0, [x8, :lo12:($BlkIndex)]
	ldp	w8, w2, [x20, #8]
                                        // kill: def $w8 killed $w8 def $x8
	sxtw	x8, w8
	lsl	x0, x0, x8
	mov	x1, x19
	bl	blkPeek
	mov	x0, x19
	bl	getAdr
	adrp	x8, ($BlkLink)
	adrp	x9, ($BlkEnd)
	add	x10, x19, #6                    // =6
	and	x11, x0, #0xffffffffffffffc0
	str	x11, [x8, :lo12:($BlkLink)]
	ldrsw	x8, [x20, #12]
	add	x8, x19, x8
	str	x8, [x9, :lo12:($BlkEnd)]
	adrp	x8, ($BlkPtr)
	str	x10, [x8, :lo12:($BlkPtr)]
	mov	x0, x19
	ldp	x20, x19, [sp, #16]             // 16-byte Folded Reload
	ldr	x30, [sp], #32                  // 8-byte Folded Reload
	ret
.Lfunc_end439:
	.size	rdBlock, .Lfunc_end439-rdBlock
	.cfi_endproc
                                        // -- End function
	.globl	getBlock                        // -- Begin function getBlock
	.p2align	4
	.type	getBlock,@function
getBlock:                               // @getBlock
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x30, x19, [sp, #-16]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w19, -8
	.cfi_offset w30, -16
	adrp	x19, ($BlkPtr)
	ldr	x8, [x19, :lo12:($BlkPtr)]
	adrp	x9, ($BlkEnd)
	ldr	x9, [x9, :lo12:($BlkEnd)]
	cmp	x8, x9
	b.ne	.LBB440_3
// %bb.1:                               // %"$2"
	adrp	x8, ($BlkLink)
	ldr	x0, [x8, :lo12:($BlkLink)]
	cbz	x0, .LBB440_4
// %bb.2:                               // %"$5"
	bl	rdBlock
	add	x8, x0, #6                      // =6
.LBB440_3:                              // %"$3"
	add	x9, x8, #1                      // =1
	str	x9, [x19, :lo12:($BlkPtr)]
	ldrb	w0, [x8]
	ldp	x30, x19, [sp], #16             // 16-byte Folded Reload
	ret
.LBB440_4:                              // %"$4"
	mov	w0, #-1
	ldp	x30, x19, [sp], #16             // 16-byte Folded Reload
	ret
.Lfunc_end440:
	.size	getBlock, .Lfunc_end440-getBlock
	.cfi_endproc
                                        // -- End function
	.globl	binRead                         // -- Begin function binRead
	.p2align	4
	.type	binRead,@function
binRead:                                // @binRead
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-64]!           // 16-byte Folded Spill
	stp	x24, x23, [sp, #16]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #32]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #48]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 64
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w30, -56
	.cfi_offset w29, -64
	adrp	x23, ($GetBin)
	ldr	x8, [x23, :lo12:($GetBin)]
	blr	x8
                                        // kill: def $w0 killed $w0 def $x0
	cmp	w0, #3                          // =3
	b.hi	.LBB441_8
// %bb.1:                               // %"$1"
	adrp	x19, SymTab+8
	add	x19, x19, :lo12:SymTab+8
	mov	w8, w0
	adrp	x9, .LJTI441_0
	add	x9, x9, :lo12:.LJTI441_0
	adr	x10, .LBB441_2
	ldrb	w11, [x9, x8]
	add	x10, x10, x11, lsl #2
	br	x10
.LBB441_2:                              // %"$5"
	bl	binRead
	cbz	x0, .LBB441_23
// %bb.3:                               // %"$9"
	adrp	x20, SymTab+8
	add	x20, x20, :lo12:SymTab+8
	mov	x1, x20
	bl	cons
	mov	x19, x0
	adrp	x21, env
	ldr	x8, [x21, :lo12:env]
	mov	x9, sp
	sub	x22, x9, #16                    // =16
	mov	sp, x22
	lsr	x10, x0, #32
	lsr	x11, x8, #32
	stp	w19, w10, [x9, #-16]
	stp	w8, w11, [x9, #-8]
	mov	x23, x0
	str	x22, [x21, :lo12:env]
	bl	binRead
	cbz	x0, .LBB441_7
.LBB441_4:                              // %"$12"
                                        // =>This Inner Loop Header: Depth=1
	cmp	x0, #3                          // =3
	b.eq	.LBB441_40
// %bb.5:                               // %"$15"
                                        //   in Loop: Header=BB441_4 Depth=1
	cmp	x0, #10                         // =10
	b.eq	.LBB441_35
// %bb.6:                               // %"$17"
                                        //   in Loop: Header=BB441_4 Depth=1
	mov	x1, x20
	bl	cons
	lsr	x8, x0, #32
	stp	w0, w8, [x23, #8]
	mov	x23, x0
	bl	binRead
	cbnz	x0, .LBB441_4
.LBB441_7:                              // %"$28"
	mov	x19, x0
	b	.LBB441_40
.LBB441_8:                              // %"$2"
	tbnz	w0, #31, .LBB441_23
// %bb.9:                               // %"$26"
	and	w24, w0, #0x3
	lsr	w20, w0, #2
	mov	x8, sp
	sub	x19, x8, #32                    // =32
	mov	sp, x19
	stur	wzr, [x8, #-12]
	mov	w9, #2
	mov	x22, x19
	str	w9, [x22, #16]!
	adrp	x21, env
	ldr	x9, [x21, :lo12:env]
	lsr	x10, x9, #32
	stp	w9, w10, [x8, #-8]
	str	x22, [x21, :lo12:env]
	cbz	w24, .LBB441_24
// %bb.10:                              // %"$29"
	mov	w8, #4
	stp	w8, wzr, [x19]
	cmp	w20, #63                        // =63
	b.ne	.LBB441_16
.LBB441_11:                             // %"$56"
                                        // =>This Inner Loop Header: Depth=1
	ldr	x8, [x23, :lo12:($GetBin)]
	blr	x8
	tbnz	w0, #31, .LBB441_34
// %bb.12:                              // %"$58"
                                        //   in Loop: Header=BB441_11 Depth=1
	mov	x1, x19
	bl	byteSym
	subs	w20, w20, #1                    // =1
	b.ne	.LBB441_11
// %bb.13:                              // %"$60"
                                        //   in Loop: Header=BB441_11 Depth=1
	ldr	x8, [x23, :lo12:($GetBin)]
	blr	x8
	tbnz	w0, #31, .LBB441_34
// %bb.14:                              // %"$62"
                                        //   in Loop: Header=BB441_11 Depth=1
	mov	w20, w0
	cmp	w0, #255                        // =255
	b.eq	.LBB441_11
// %bb.15:                              // %"$64"
	cbz	w20, .LBB441_18
.LBB441_16:                             // %"$67"
                                        // =>This Inner Loop Header: Depth=1
	ldr	x8, [x23, :lo12:($GetBin)]
	blr	x8
	tbnz	w0, #31, .LBB441_34
// %bb.17:                              // %"$69"
                                        //   in Loop: Header=BB441_16 Depth=1
	mov	x1, x19
	bl	byteSym
	subs	w20, w20, #1                    // =1
	b.ne	.LBB441_16
.LBB441_18:                             // %"$-3"
	ldp	w19, w8, [x22]
	bfi	x19, x8, #32, #32
	cmp	w24, #1                         // =1
	b.eq	.LBB441_43
// %bb.19:                              // %"$-3"
	cmp	w24, #2                         // =2
	b.ne	.LBB441_44
// %bb.20:                              // %"$74"
	mov	x0, x19
	bl	consStr
	b	.LBB441_7
.LBB441_21:                             // %"$6"
	mov	w19, #10
	b	.LBB441_41
.LBB441_22:                             // %"$7"
	sxtw	x19, w0
	b	.LBB441_41
.LBB441_23:
	mov	x19, xzr
	b	.LBB441_41
.LBB441_24:                             // %"$30"
	mov	w8, #3
	stp	w8, wzr, [x19]
	cmp	w20, #63                        // =63
	b.ne	.LBB441_30
.LBB441_25:                             // %"$34"
                                        // =>This Inner Loop Header: Depth=1
	ldr	x8, [x23, :lo12:($GetBin)]
	blr	x8
	tbnz	w0, #31, .LBB441_34
// %bb.26:                              // %"$36"
                                        //   in Loop: Header=BB441_25 Depth=1
	mov	x1, x19
	bl	byteNum
	subs	w20, w20, #1                    // =1
	b.ne	.LBB441_25
// %bb.27:                              // %"$38"
                                        //   in Loop: Header=BB441_25 Depth=1
	ldr	x8, [x23, :lo12:($GetBin)]
	blr	x8
	tbnz	w0, #31, .LBB441_34
// %bb.28:                              // %"$40"
                                        //   in Loop: Header=BB441_25 Depth=1
	mov	w20, w0
	cmp	w0, #255                        // =255
	b.eq	.LBB441_25
// %bb.29:                              // %"$42"
	cbz	w20, .LBB441_32
.LBB441_30:                             // %"$45"
                                        // =>This Inner Loop Header: Depth=1
	ldr	x8, [x23, :lo12:($GetBin)]
	blr	x8
	tbnz	w0, #31, .LBB441_34
// %bb.31:                              // %"$47"
                                        //   in Loop: Header=BB441_30 Depth=1
	mov	x1, x19
	bl	byteNum
	subs	w20, w20, #1                    // =1
	b.ne	.LBB441_30
.LBB441_32:                             // %"$-2"
	ldp	w19, w8, [x22]
	bfi	x19, x8, #32, #32
	tbnz	w19, #1, .LBB441_40
// %bb.33:                              // %"$51"
	ldur	w8, [x19, #-4]
	and	x20, x8, #0x1
	mov	x0, x19
	bl	half
	orr	x19, x0, x20, lsl #3
	b	.LBB441_40
.LBB441_34:                             // %"$-1"
	ldp	w9, w8, [x22, #8]
	bfi	x9, x8, #32, #32
	str	x9, [x21, :lo12:env]
	mov	x0, xzr
	b	.LBB441_42
.LBB441_35:                             // %"$18"
	bl	binRead
	cbz	x0, .LBB441_39
// %bb.36:                              // %"$20"
	cmp	x0, #3                          // =3
	mov	x8, x19
	b.eq	.LBB441_38
// %bb.37:                              // %"$23"
	mov	x8, x0
.LBB441_38:                             // %"$24"
	lsr	x9, x8, #32
	stp	w8, w9, [x23, #8]
	b	.LBB441_40
.LBB441_39:
	mov	x19, xzr
.LBB441_40:                             // %"$28"
	ldp	w9, w8, [x22, #8]
	bfi	x9, x8, #32, #32
	str	x9, [x21, :lo12:env]
.LBB441_41:                             // %"$3"
	mov	x0, x19
.LBB441_42:                             // %"$3"
	mov	sp, x29
	ldp	x20, x19, [sp, #48]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #32]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #64             // 16-byte Folded Reload
	ret
.LBB441_43:                             // %"$75"
	mov	x0, x19
	bl	requestSym
	b	.LBB441_7
.LBB441_44:                             // %"$72"
	adrp	x8, ($Extn)
	ldr	w20, [x8, :lo12:($Extn)]
	cbz	w20, .LBB441_46
// %bb.45:                              // %"$76"
	mov	x0, x19
	bl	objFile
	add	w8, w0, w20
	and	x8, x8, #0xffff
	lsl	x9, x8, #24
	mov	x10, #-4486007441326081
	movk	x10, #255, lsl #16
	and	x10, x19, x10
	orr	x8, x9, x8, lsl #36
	and	x8, x8, #0xfffff000ffffffff
	orr	x19, x10, x8
.LBB441_46:                             // %"$77"
	mov	x0, x19
	bl	extern
	b	.LBB441_7
.Lfunc_end441:
	.size	binRead, .Lfunc_end441-binRead
	.cfi_endproc
	.section	.rodata,"a",@progbits
.LJTI441_0:
	.byte	(.LBB441_41-.LBB441_2)>>2
	.byte	(.LBB441_2-.LBB441_2)>>2
	.byte	(.LBB441_21-.LBB441_2)>>2
	.byte	(.LBB441_22-.LBB441_2)>>2
                                        // -- End function
	.text
	.globl	unLockDb                        // -- Begin function unLockDb
	.p2align	4
	.type	unLockDb,@function
unLockDb:                               // @unLockDb
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	adrp	x0, .L$57
	add	x0, x0, :lo12:.L$57
	bl	outString
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end442:
	.size	unLockDb, .Lfunc_end442-unLockDb
	.cfi_endproc
                                        // -- End function
	.globl	byteNum                         // -- Begin function byteNum
	.p2align	4
	.type	byteNum,@function
byteNum:                                // @byteNum
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-32]!                // 8-byte Folded Spill
	stp	x20, x19, [sp, #16]             // 16-byte Folded Spill
	.cfi_def_cfa_offset 32
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w30, -32
	mov	x19, x1
                                        // kill: def $w0 killed $w0 def $x0
	ldp	w8, w9, [x1]
	bfi	x8, x9, #32, #32
	ldp	w9, w10, [x1, #16]
	bfi	x9, x10, #32, #32
	tbz	w9, #1, .LBB443_4
// %bb.1:                               // %"$2"
	cmp	x8, #59                         // =59
	b.eq	.LBB443_7
// %bb.2:                               // %"$2"
	cmp	x8, #67                         // =67
	b.ne	.LBB443_10
// %bb.3:                               // %"$7"
	lsr	x8, x9, #3
	and	x9, x0, #0xff
	mov	w1, #2
	bfi	x1, x9, #4, #8
	mov	x0, x8
	bl	consNum
	lsr	x9, x0, #32
	stp	w0, w9, [x19, #8]
	mov	w8, #12
	b	.LBB443_9
.LBB443_4:                              // %"$3"
	ldp	w20, w9, [x19, #8]
	bfi	x20, x9, #32, #32
	ldp	w9, w10, [x20, #4]
	bfi	x9, x10, #32, #32
	cmp	x8, #60                         // =60
	b.eq	.LBB443_11
// %bb.5:                               // %"$3"
	cmp	x8, #68                         // =68
	b.ne	.LBB443_14
// %bb.6:                               // %"$14"
	lsr	x8, x9, #4
	and	x9, x0, #0xff
	mov	w1, #2
	bfi	x1, x9, #4, #8
	mov	x0, x8
	bl	consNum
	lsr	x9, x0, #32
	stp	w0, w9, [x20, #4]
	mov	w8, #12
	b	.LBB443_16
.LBB443_7:                              // %"$9"
	and	w10, w0, #0xff
	cmp	w10, #32                        // =32
	b.lo	.LBB443_10
// %bb.8:                               // %"$11"
	lsr	x8, x9, #3
	orr	x0, x8, x0, lsl #56
	bl	boxNum
	lsr	x9, x0, #32
	stp	w0, w9, [x19, #8]
	mov	w8, #4
.LBB443_9:                              // %"$4"
	stp	w0, w9, [x19, #16]
	b	.LBB443_17
.LBB443_10:                             // %"$10"
	and	x10, x0, #0xff
	lsl	x10, x10, x8
	orr	x9, x9, x10
	lsr	x10, x9, #32
	stp	w9, w10, [x19, #16]
	b	.LBB443_13
.LBB443_11:                             // %"$16"
	and	w10, w0, #0xff
	cmp	w10, #15                        // =15
	cset	w10, hi
	cbnz	w10, .LBB443_15
.LBB443_12:                             // %"$17"
	and	x10, x0, #0xff
	lsl	x10, x10, x8
	orr	x9, x9, x10
	lsr	x10, x9, #32
	stp	w9, w10, [x20, #4]
.LBB443_13:                             // %"$4"
	add	x8, x8, #8                      // =8
	b	.LBB443_17
.LBB443_14:
	mov	w10, wzr
	cbz	w10, .LBB443_12
.LBB443_15:                             // %"$18"
	lsr	x8, x9, #4
	orr	x0, x8, x0, lsl #56
	bl	boxNum
	lsr	x9, x0, #32
	stp	w0, w9, [x20, #4]
	mov	w8, #4
.LBB443_16:                             // %"$4"
	stp	w0, w9, [x19, #8]
.LBB443_17:                             // %"$4"
	lsr	x9, x8, #32
	stp	w8, w9, [x19]
	ldp	x20, x19, [sp, #16]             // 16-byte Folded Reload
	ldr	x30, [sp], #32                  // 8-byte Folded Reload
	ret
.Lfunc_end443:
	.size	byteNum, .Lfunc_end443-byteNum
	.cfi_endproc
                                        // -- End function
	.globl	half                            // -- Begin function half
	.p2align	4
	.type	half,@function
half:                                   // @half
	.cfi_startproc
// %bb.0:                               // %"$1"
	tbz	w0, #1, .LBB444_2
// %bb.1:                               // %"$2"
	lsr	x8, x0, #1
	orr	x8, x8, #0x2
	mov	x9, #-10
	movk	x9, #32767, lsl #48
	and	x0, x8, x9
	ret
.LBB444_2:                              // %"$3"
	ldp	w8, w9, [x0, #-4]
	bfi	x8, x9, #32, #32
	lsr	x8, x8, #1
	ldp	w10, w9, [x0, #4]
	bfi	x10, x9, #32, #32
	tbz	w10, #2, .LBB444_7
// %bb.3:                               // %"$8.preheader"
	mov	x9, x0
.LBB444_4:                              // %"$8"
                                        // =>This Inner Loop Header: Depth=1
	mov	x11, x9
	mov	x9, x10
	ldp	w10, w12, [x10, #4]
	bfi	x10, x12, #32, #32
	ldp	w13, w12, [x9, #-4]
	bfi	x13, x12, #32, #32
	orr	x12, x8, x13, lsl #63
	stur	w8, [x11, #-4]
	lsr	x8, x12, #32
	str	w8, [x11]
	lsr	x8, x13, #1
	tbz	w10, #1, .LBB444_4
// %bb.5:                               // %"$10"
	lsr	x12, x10, #4
	bfi	x8, x12, #63, #1
	lsr	x12, x10, #5
	mov	w10, #1
	tst	x8, #0xf000000000000000
	cset	w13, ne
	cmp	x12, #0                         // =0
	csel	w10, w10, w13, ne
	tbz	w10, #0, .LBB444_9
// %bb.6:                               // %"$14"
	stur	w8, [x9, #-4]
	lsr	x8, x8, #32
	str	w8, [x9], #4
	mov	w10, #2
	bfi	x10, x12, #4, #59
	b	.LBB444_10
.LBB444_7:                              // %"$6"
	lsr	x9, x10, #4
	bfi	x8, x9, #63, #1
	lsr	x11, x10, #5
	mov	w9, #1
	tst	x8, #0xf000000000000000
	cset	w10, ne
	cmp	x11, #0                         // =0
	csel	w9, w9, w10, ne
	tbz	w9, #0, .LBB444_11
// %bb.8:                               // %"$19"
	stur	w8, [x0, #-4]
	lsr	x8, x8, #32
	str	w8, [x0]
	add	x9, x0, #4                      // =4
	mov	w10, #2
	bfi	x10, x11, #4, #59
	b	.LBB444_10
.LBB444_9:                              // %"$13"
	add	x9, x11, #4                     // =4
	mov	w10, #2
	bfi	x10, x8, #4, #60
.LBB444_10:                             // %"$7"
	lsr	x8, x10, #32
	stp	w10, w8, [x9]
	ret
.LBB444_11:                             // %"$18"
	mov	w0, #2
	bfi	x0, x8, #4, #60
	ret
.Lfunc_end444:
	.size	half, .Lfunc_end444-half
	.cfi_endproc
                                        // -- End function
	.globl	blkPeek                         // -- Begin function blkPeek
	.p2align	4
	.type	blkPeek,@function
blkPeek:                                // @blkPeek
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	adrp	x0, .L$61
	add	x0, x0, :lo12:.L$61
	bl	outString
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end445:
	.size	blkPeek, .Lfunc_end445-blkPeek
	.cfi_endproc
                                        // -- End function
	.globl	getAdr                          // -- Begin function getAdr
	.p2align	4
	.type	getAdr,@function
getAdr:                                 // @getAdr
	.cfi_startproc
// %bb.0:                               // %"$1"
	ldrb	w8, [x0, #5]
	ldrb	w9, [x0, #4]
	bfi	w9, w8, #8, #8
	ldrb	w8, [x0, #3]
	ldrb	w10, [x0, #2]
	ldrb	w11, [x0, #1]
	lsl	x8, x8, #24
	bfi	x8, x9, #32, #16
	bfi	x8, x10, #16, #8
	bfi	x8, x11, #8, #8
	ldrb	w9, [x0]
	orr	x0, x8, x9
	ret
.Lfunc_end446:
	.size	getAdr, .Lfunc_end446-getAdr
	.cfi_endproc
                                        // -- End function
	.globl	symChar                         // -- Begin function symChar
	.p2align	4
	.type	symChar,@function
symChar:                                // @symChar
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x30, x21, [sp, #-32]!           // 16-byte Folded Spill
	stp	x20, x19, [sp, #16]             // 16-byte Folded Spill
	.cfi_def_cfa_offset 32
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w30, -32
	mov	x19, x0
	bl	symByte
	and	w0, w0, #0xff
	cmp	w0, #128                        // =128
	b.lt	.LBB447_10
// %bb.1:                               // %"$3"
	cmp	w0, #255                        // =255
	b.ne	.LBB447_3
// %bb.2:
	mov	w0, #1114112
	b	.LBB447_10
.LBB447_3:                              // %"$5"
	tbz	w0, #5, .LBB447_6
// %bb.4:                               // %"$8"
	tbz	w0, #4, .LBB447_7
// %bb.5:                               // %"$11"
	and	w21, w0, #0x7
	mov	x0, x19
	bl	symByte
	and	w20, w0, #0x3f
	bfi	w20, w21, #6, #3
	b	.LBB447_8
.LBB447_6:                              // %"$7"
	and	w21, w0, #0x1f
	b	.LBB447_9
.LBB447_7:                              // %"$10"
	and	w20, w0, #0xf
.LBB447_8:                              // %"$12"
	mov	x0, x19
	bl	symByte
	and	w21, w0, #0x3f
	bfi	w21, w20, #6, #9
.LBB447_9:                              // %"$9"
	mov	x0, x19
	bl	symByte
	and	w0, w0, #0x3f
	bfi	w0, w21, #6, #15
.LBB447_10:                             // %"$2"
	ldp	x20, x19, [sp, #16]             // 16-byte Folded Reload
	ldp	x30, x21, [sp], #32             // 16-byte Folded Reload
	ret
.Lfunc_end447:
	.size	symChar, .Lfunc_end447-symChar
	.cfi_endproc
                                        // -- End function
	.globl	isBlank                         // -- Begin function isBlank
	.p2align	4
	.type	isBlank,@function
isBlank:                                // @isBlank
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-32]!           // 16-byte Folded Spill
	str	x19, [sp, #16]                  // 8-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 32
	.cfi_offset w19, -16
	.cfi_offset w30, -24
	.cfi_offset w29, -32
	adrp	x8, SymTab+8
	add	x8, x8, :lo12:SymTab+8
	cmp	x0, x8
	b.ne	.LBB448_2
.LBB448_1:
	mov	w0, #1
	b	.LBB448_10
.LBB448_2:                              // %"$3"
	eor	w8, w0, #0x8
	tst	x8, #0xe
	b.ne	.LBB448_9
// %bb.3:                               // %"$5"
	ldp	w8, w9, [x0, #-8]
	bfi	x8, x9, #32, #32
	tbnz	w8, #3, .LBB448_9
	b	.LBB448_5
.LBB448_4:                              // %"$8"
                                        //   in Loop: Header=BB448_5 Depth=1
	ldp	w8, w9, [x8, #8]
	bfi	x8, x9, #32, #32
.LBB448_5:                              // %"$7"
                                        // =>This Inner Loop Header: Depth=1
	tst	x8, #0x6
	b.eq	.LBB448_4
// %bb.6:                               // %"$9"
	mov	x9, sp
	sub	x19, x9, #16                    // =16
	mov	sp, x19
	stp	wzr, wzr, [x9, #-16]
	lsr	x10, x8, #32
	stp	w8, w10, [x9, #-8]
.LBB448_7:                              // %"$10"
                                        // =>This Inner Loop Header: Depth=1
	mov	x0, x19
	bl	symByte
	tst	w0, #0xff
	b.eq	.LBB448_1
// %bb.8:                               // %"$11"
                                        //   in Loop: Header=BB448_7 Depth=1
	and	w8, w0, #0xff
	cmp	w8, #33                         // =33
	b.lo	.LBB448_7
.LBB448_9:
	mov	w0, wzr
.LBB448_10:                             // %"$2"
	mov	sp, x29
	ldr	x19, [sp, #16]                  // 8-byte Folded Reload
	ldp	x29, x30, [sp], #32             // 16-byte Folded Reload
	ret
.Lfunc_end448:
	.size	isBlank, .Lfunc_end448-isBlank
	.cfi_endproc
                                        // -- End function
	.globl	trim                            // -- Begin function trim
	.p2align	4
	.type	trim,@function
trim:                                   // @trim
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-32]!                // 8-byte Folded Spill
	stp	x20, x19, [sp, #16]             // 16-byte Folded Spill
	.cfi_def_cfa_offset 32
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w30, -32
	mov	x19, x0
	tst	x0, #0xf
	b.ne	.LBB449_6
// %bb.1:                               // %"$3"
	mov	x8, sp
	adrp	x9, ($StkLimit)
	ldr	x9, [x9, :lo12:($StkLimit)]
	cmp	x9, x8
	b.hi	.LBB449_7
// %bb.2:                               // %"$6"
	ldp	w0, w8, [x19, #8]
	bfi	x0, x8, #32, #32
	bl	trim
	mov	x20, x0
	adrp	x8, SymTab+8
	add	x8, x8, :lo12:SymTab+8
	cmp	x0, x8
	b.ne	.LBB449_5
// %bb.3:                               // %"$8"
	ldp	w0, w8, [x19]
	bfi	x0, x8, #32, #32
	bl	isBlank
	tbz	w0, #0, .LBB449_5
// %bb.4:
	adrp	x19, SymTab+8
	add	x19, x19, :lo12:SymTab+8
	b	.LBB449_6
.LBB449_5:                              // %"$10"
	ldp	w0, w8, [x19]
	bfi	x0, x8, #32, #32
	mov	x1, x20
	bl	cons
	mov	x19, x0
.LBB449_6:                              // %"$4"
	mov	x0, x19
	ldp	x20, x19, [sp, #16]             // 16-byte Folded Reload
	ldr	x30, [sp], #32                  // 8-byte Folded Reload
	ret
.LBB449_7:                              // %"$5"
	mov	x0, xzr
	bl	stkErr
.Lfunc_end449:
	.size	trim, .Lfunc_end449-trim
	.cfi_endproc
                                        // -- End function
	.globl	makeErr                         // -- Begin function makeErr
	.p2align	4
	.type	makeErr,@function
makeErr:                                // @makeErr
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	adrp	x2, .L$85
	add	x2, x2, :lo12:.L$85
	mov	x1, xzr
	mov	x3, xzr
	bl	err
.Lfunc_end450:
	.size	makeErr, .Lfunc_end450-makeErr
	.cfi_endproc
                                        // -- End function
	.globl	argErr                          // -- Begin function argErr
	.p2align	4
	.type	argErr,@function
argErr:                                 // @argErr
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	adrp	x2, .L$9
	add	x2, x2, :lo12:.L$9
	mov	x3, xzr
	bl	err
.Lfunc_end451:
	.size	argErr, .Lfunc_end451-argErr
	.cfi_endproc
                                        // -- End function
	.globl	adds                            // -- Begin function adds
	.p2align	4
	.type	adds,@function
adds:                                   // @adds
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	tbz	w0, #3, .LBB452_3
// %bb.1:                               // %"$3"
	and	x0, x0, #0xfffffffffffffff7
	tbz	w1, #3, .LBB452_5
// %bb.2:                               // %"$9"
	and	x1, x1, #0xfffffffffffffff7
	bl	addu
	b	.LBB452_6
.LBB452_3:                              // %"$2"
	tbz	w1, #3, .LBB452_7
// %bb.4:                               // %"$6"
	and	x1, x1, #0xfffffffffffffff7
	bl	subu
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.LBB452_5:                              // %"$8"
	bl	subu
.LBB452_6:                              // %"$10"
	eor	x8, x0, #0x8
	cmp	x0, #2                          // =2
	csel	x0, x0, x8, eq
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.LBB452_7:                              // %"$5"
	bl	addu
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end452:
	.size	adds, .Lfunc_end452-adds
	.cfi_endproc
                                        // -- End function
	.globl	subs                            // -- Begin function subs
	.p2align	4
	.type	subs,@function
subs:                                   // @subs
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	tbz	w0, #3, .LBB453_3
// %bb.1:                               // %"$3"
	and	x0, x0, #0xfffffffffffffff7
	tbz	w1, #3, .LBB453_5
// %bb.2:                               // %"$9"
	and	x1, x1, #0xfffffffffffffff7
	bl	subu
	b	.LBB453_6
.LBB453_3:                              // %"$2"
	tbz	w1, #3, .LBB453_7
// %bb.4:                               // %"$6"
	and	x1, x1, #0xfffffffffffffff7
	bl	addu
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.LBB453_5:                              // %"$8"
	bl	addu
.LBB453_6:                              // %"$10"
	eor	x8, x0, #0x8
	cmp	x0, #2                          // =2
	csel	x0, x0, x8, eq
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.LBB453_7:                              // %"$5"
	bl	subu
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end453:
	.size	subs, .Lfunc_end453-subs
	.cfi_endproc
                                        // -- End function
	.globl	subu                            // -- Begin function subu
	.p2align	4
	.type	subu,@function
subu:                                   // @subu
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-80]!           // 16-byte Folded Spill
	str	x25, [sp, #16]                  // 8-byte Folded Spill
	stp	x24, x23, [sp, #32]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #48]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #64]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 80
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -64
	.cfi_offset w30, -72
	.cfi_offset w29, -80
	mov	x21, x1
	mov	x20, x0
	tbz	w20, #1, .LBB454_3
// %bb.1:                               // %"$4"
	tbz	w21, #1, .LBB454_5
// %bb.2:                               // %"$5"
	and	x8, x21, #0xfffffffffffffffd
	subs	x8, x20, x8
	eor	x9, x8, #0xfffffffffffffff0
	add	x9, x9, #24                     // =24
	csel	x0, x8, x9, hs
	b	.LBB454_27
.LBB454_3:                              // %"$3"
	tbz	w21, #1, .LBB454_6
// %bb.4:                               // %"$15"
	mov	x0, x20
	mov	x1, x21
	bl	sub1
	b	.LBB454_27
.LBB454_5:                              // %"$6"
	mov	x0, x21
	mov	x1, x20
	bl	sub1
	eor	x8, x0, #0x8
	cmp	x0, #2                          // =2
	csel	x0, x0, x8, eq
	b	.LBB454_27
.LBB454_6:                              // %"$14"
	ldp	w9, w8, [x20, #-4]
	bfi	x9, x8, #32, #32
	ldp	w10, w8, [x21, #-4]
	bfi	x10, x8, #32, #32
	subs	x0, x9, x10
	cset	w24, lo
	bl	boxNum
	mov	x19, x0
	adrp	x25, env
	add	x25, x25, :lo12:env
	ldr	x8, [x25]
	mov	x9, sp
	sub	x23, x9, #16                    // =16
	mov	sp, x23
	lsr	x10, x0, #32
	lsr	x11, x8, #32
	mov	x0, x23
	stp	w19, w10, [x9, #-16]
	mov	x22, x19
	stp	w8, w11, [x9, #-8]
.LBB454_7:                              // %"$16"
                                        // =>This Inner Loop Header: Depth=1
	lsr	x8, x0, #32
	stp	w0, w8, [x25]
	ldp	w20, w8, [x20, #4]
	bfi	x20, x8, #32, #32
	ldp	w21, w8, [x21, #4]
	bfi	x21, x8, #32, #32
	tbnz	w21, #1, .LBB454_10
// %bb.8:                               // %"$17"
                                        //   in Loop: Header=BB454_7 Depth=1
	tbnz	w20, #1, .LBB454_13
// %bb.9:                               // %"$25"
                                        //   in Loop: Header=BB454_7 Depth=1
	ldp	w9, w8, [x20, #-4]
	bfi	x9, x8, #32, #32
	ldp	w10, w8, [x21, #-4]
	bfi	x10, x8, #32, #32
	subs	x8, x9, x10
	cset	w9, lo
	and	x10, x24, #0x1
	subs	x0, x8, x10
	cset	w8, lo
	orr	w24, w9, w8
	add	x25, x22, #4                    // =4
	bl	boxNum
	mov	x22, x0
	b	.LBB454_7
.LBB454_10:                             // %"$19"
	lsr	x8, x21, #4
.LBB454_11:                             // %"$20"
                                        // =>This Inner Loop Header: Depth=1
	tbnz	w20, #1, .LBB454_16
// %bb.12:                              // %"$21"
                                        //   in Loop: Header=BB454_11 Depth=1
	ldp	w10, w9, [x20, #-4]
	and	x11, x24, #0x1
	bfi	x10, x9, #32, #32
	subs	x8, x10, x8
	cset	w9, lo
	subs	x0, x8, x11
	cset	w8, lo
	orr	w24, w9, w8
	ldp	w20, w8, [x20, #4]
	bfi	x20, x8, #32, #32
	mov	x1, x20
	bl	consNum
	mov	x8, xzr
	lsr	x9, x0, #32
	stp	w0, w9, [x22, #4]
	mov	x22, x0
	tbnz	w24, #0, .LBB454_11
	b	.LBB454_19
.LBB454_13:                             // %"$26"
	lsr	x8, x20, #4
.LBB454_14:                             // %"$27"
                                        // =>This Inner Loop Header: Depth=1
	mov	x20, x22
	ldp	w10, w9, [x21, #-4]
	bfi	x10, x9, #32, #32
	subs	x8, x8, x10
	cset	w9, lo
	and	x10, x24, #0x1
	subs	x0, x8, x10
	cset	w8, lo
	orr	w24, w9, w8
	bl	boxNum
	mov	x22, x0
	mov	x8, xzr
	lsr	x9, x0, #32
	stp	w22, w9, [x20, #4]
	ldp	w21, w9, [x21, #4]
	bfi	x21, x9, #32, #32
	tbz	w21, #1, .LBB454_14
// %bb.15:                              // %"$29"
	mov	x9, xzr
	lsr	x8, x21, #4
	b	.LBB454_17
.LBB454_16:                             // %"$22"
	lsr	x9, x20, #4
.LBB454_17:                             // %"$18"
	subs	x8, x9, x8
	cset	w10, lo
	and	x9, x24, #0x1
	subs	x9, x8, x9
	cset	w8, lo
	mov	w11, #2
	bfi	w11, w9, #4, #28
	lsr	x9, x9, #28
	stp	w11, w9, [x22, #4]
	mov	x9, x19
	tbnz	w10, #0, .LBB454_20
// %bb.18:                              // %"$18"
	mov	x9, x19
	cbnz	w8, .LBB454_20
.LBB454_19:                             // %"$23"
	mov	x0, x19
	bl	zapZero
	b	.LBB454_26
.LBB454_20:                             // %"$33"
                                        // =>This Inner Loop Header: Depth=1
	mov	x8, x9
	mov	x10, x9
	ldr	w11, [x10, #-4]!
	ldp	w12, w9, [x10, #4]
	bfi	x11, x12, #32, #32
	mvn	x11, x11
	str	w11, [x10]
	lsr	x11, x11, #32
	str	w11, [x10, #4]
	ldr	w10, [x10, #12]
	bfi	x9, x10, #32, #32
	tbz	w9, #1, .LBB454_20
// %bb.21:                              // %"$35"
	eor	x9, x9, #0xfffffffffffffff0
	lsr	x10, x9, #32
	stp	w9, w10, [x8, #4]
	mov	x9, x19
.LBB454_22:                             // %"$36"
                                        // =>This Inner Loop Header: Depth=1
	mov	x8, x9
	ldr	w10, [x9, #-4]!
	ldr	w11, [x9, #4]
	bfi	x10, x11, #32, #32
	adds	x10, x10, #1                    // =1
	str	w10, [x9]
	lsr	x10, x10, #32
	str	w10, [x9, #4]
	b.lo	.LBB454_25
// %bb.23:                              // %"$38"
                                        //   in Loop: Header=BB454_22 Depth=1
	ldp	w9, w10, [x8, #4]
	bfi	x9, x10, #32, #32
	tbz	w9, #1, .LBB454_22
// %bb.24:                              // %"$40"
	add	x9, x9, #16                     // =16
	lsr	x10, x9, #32
	stp	w9, w10, [x8, #4]
.LBB454_25:                             // %"$-9"
	mov	x0, x19
	bl	zapZero
	orr	x0, x0, #0x8
.LBB454_26:                             // %"$32"
	ldp	w9, w8, [x23, #8]
	bfi	x9, x8, #32, #32
	adrp	x8, env
	str	x9, [x8, :lo12:env]
.LBB454_27:                             // %"$2"
	mov	sp, x29
	ldp	x20, x19, [sp, #64]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #48]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #32]             // 16-byte Folded Reload
	ldr	x25, [sp, #16]                  // 8-byte Folded Reload
	ldp	x29, x30, [sp], #80             // 16-byte Folded Reload
	ret
.Lfunc_end454:
	.size	subu, .Lfunc_end454-subu
	.cfi_endproc
                                        // -- End function
	.globl	sub1                            // -- Begin function sub1
	.p2align	4
	.type	sub1,@function
sub1:                                   // @sub1
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-64]!           // 16-byte Folded Spill
	str	x23, [sp, #16]                  // 8-byte Folded Spill
	stp	x22, x21, [sp, #32]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #48]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 64
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -48
	.cfi_offset w30, -56
	.cfi_offset w29, -64
	mov	x8, x0
	ldp	w9, w10, [x0, #-4]
	ldr	w19, [x0, #4]
	bfi	x9, x10, #32, #32
	subs	x0, x9, x1, lsr #4
	ldr	w8, [x8, #8]
	bfi	x19, x8, #32, #32
	b.hs	.LBB455_6
// %bb.1:                               // %"$3"
	tbz	w19, #2, .LBB455_9
// %bb.2:                               // %"$11"
	bl	boxNum
	mov	x20, x0
	adrp	x21, env
	ldr	x8, [x21, :lo12:env]
	mov	x9, sp
	sub	x22, x9, #16                    // =16
	mov	sp, x22
	lsr	x10, x0, #32
	lsr	x11, x8, #32
	stp	w20, w10, [x9, #-16]
	stp	w8, w11, [x9, #-8]
	mov	x23, x0
	str	x22, [x21, :lo12:env]
.LBB455_3:                              // %"$16"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w9, w8, [x19, #-4]
	bfi	x9, x8, #32, #32
	subs	x0, x9, #1                      // =1
	ldp	w19, w8, [x19, #4]
	bfi	x19, x8, #32, #32
	b.hs	.LBB455_12
// %bb.4:                               // %"$17"
                                        //   in Loop: Header=BB455_3 Depth=1
	mov	x1, x19
	bl	consNum
	lsr	x8, x0, #32
	stp	w0, w8, [x23, #4]
	mov	x23, x0
	tbz	w19, #1, .LBB455_3
// %bb.5:                               // %"$21"
	add	x23, x0, #4                     // =4
	sub	x0, x19, #16                    // =16
	b	.LBB455_13
.LBB455_6:                              // %"$4"
	cmp	x19, #2                         // =2
	b.ne	.LBB455_11
// %bb.7:                               // %"$5"
	tst	x0, #0xf000000000000000
	b.eq	.LBB455_15
// %bb.8:                               // %"$8"
	bl	boxNum
	mov	x8, x0
	b	.LBB455_16
.LBB455_9:                              // %"$12"
	subs	x1, x19, #16                    // =16
	b.hs	.LBB455_14
// %bb.10:                              // %"$13"
	mov	w8, #10
	sub	x8, x8, x0, lsl #4
	b	.LBB455_16
.LBB455_11:                             // %"$6"
	mov	x1, x19
	bl	consNum
	mov	x8, x0
	b	.LBB455_16
.LBB455_12:                             // %"$19"
	add	x23, x23, #4                    // =4
	mov	x1, x19
	bl	consNum
.LBB455_13:                             // %"$18"
	lsr	x8, x0, #32
	stp	w0, w8, [x23]
	mov	x0, x20
	bl	zapZero
	mov	x8, x0
	ldp	w10, w9, [x22, #8]
	bfi	x10, x9, #32, #32
	str	x10, [x21, :lo12:env]
	b	.LBB455_16
.LBB455_14:                             // %"$14"
	bl	consNum
	bl	zapZero
	mov	x8, x0
	b	.LBB455_16
.LBB455_15:                             // %"$9"
	mov	w8, #2
	bfi	x8, x0, #4, #60
.LBB455_16:                             // %"$2"
	mov	x0, x8
	mov	sp, x29
	ldp	x20, x19, [sp, #48]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #32]             // 16-byte Folded Reload
	ldr	x23, [sp, #16]                  // 8-byte Folded Reload
	ldp	x29, x30, [sp], #64             // 16-byte Folded Reload
	ret
.Lfunc_end455:
	.size	sub1, .Lfunc_end455-sub1
	.cfi_endproc
                                        // -- End function
	.globl	zapZero                         // -- Begin function zapZero
	.p2align	4
	.type	zapZero,@function
zapZero:                                // @zapZero
	.cfi_startproc
// %bb.0:                               // %"$1"
	sub	sp, sp, #16                     // =16
	.cfi_def_cfa_offset 16
	add	x8, sp, #8                      // =8
	str	x0, [sp, #8]
	add	x9, sp, #8                      // =8
.LBB456_1:                              // %"$2"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w10, w11, [x0, #4]
	bfi	x10, x11, #32, #32
	tbnz	w10, #1, .LBB456_3
// %bb.2:                               // %"$3"
                                        //   in Loop: Header=BB456_1 Depth=1
	ldp	w11, w10, [x0, #-4]
	bfi	x11, x10, #32, #32
	cmp	x11, #0                         // =0
	csel	x8, x8, x9, eq
	ldr	w10, [x0, #4]!
	mov	x9, x0
	ldr	w11, [x0, #4]
	bfi	x10, x11, #32, #32
	mov	x0, x10
	b	.LBB456_1
.LBB456_3:                              // %"$4"
	cmp	x10, #2                         // =2
	b.ne	.LBB456_11
// %bb.4:                               // %"$7"
	ldp	w11, w10, [x0, #-4]
	bfi	x11, x10, #32, #32
	cbz	x11, .LBB456_7
// %bb.5:                               // %"$11"
	tst	x11, #0xf000000000000000
	b.ne	.LBB456_11
// %bb.6:                               // %"$12"
	mov	w10, #2
	bfi	x10, x11, #4, #60
	b	.LBB456_10
.LBB456_7:                              // %"$10"
	ldp	w10, w9, [x8]
	bfi	x10, x9, #32, #32
	ldp	w9, w11, [x10, #-4]
	bfi	x9, x11, #32, #32
	tst	x9, #0xf000000000000000
	b.eq	.LBB456_9
// %bb.8:                               // %"$15"
	ldp	w8, w9, [x8]
	bfi	x8, x9, #32, #32
	add	x9, x8, #4                      // =4
	mov	w10, #2
	b	.LBB456_10
.LBB456_9:                              // %"$14"
	mov	w10, #2
	bfi	x10, x9, #4, #60
	mov	x9, x8
.LBB456_10:                             // %"$9.sink.split"
	lsr	x8, x10, #32
	stp	w10, w8, [x9]
.LBB456_11:                             // %"$8"
	ldr	x0, [sp, #8]
	add	sp, sp, #16                     // =16
	ret
.Lfunc_end456:
	.size	zapZero, .Lfunc_end456-zapZero
	.cfi_endproc
                                        // -- End function
	.globl	pairErr                         // -- Begin function pairErr
	.p2align	4
	.type	pairErr,@function
pairErr:                                // @pairErr
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	adrp	x2, .L$16
	add	x2, x2, :lo12:.L$16
	mov	x3, xzr
	bl	err
.Lfunc_end457:
	.size	pairErr, .Lfunc_end457-pairErr
	.cfi_endproc
                                        // -- End function
	.globl	lstErr                          // -- Begin function lstErr
	.p2align	4
	.type	lstErr,@function
lstErr:                                 // @lstErr
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	adrp	x2, .L$17
	add	x2, x2, :lo12:.L$17
	mov	x3, xzr
	bl	err
.Lfunc_end458:
	.size	lstErr, .Lfunc_end458-lstErr
	.cfi_endproc
                                        // -- End function
	.globl	reentErr                        // -- Begin function reentErr
	.p2align	4
	.type	reentErr,@function
reentErr:                               // @reentErr
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	adrp	x2, .L$76
	add	x2, x2, :lo12:.L$76
	mov	x3, xzr
	bl	err
.Lfunc_end459:
	.size	reentErr, .Lfunc_end459-reentErr
	.cfi_endproc
                                        // -- End function
	.globl	saveCoEnv                       // -- Begin function saveCoEnv
	.p2align	4
	.type	saveCoEnv,@function
saveCoEnv:                              // @saveCoEnv
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	adrp	x8, SymTab+376
	ldr	x8, [x8, :lo12:SymTab+376]
	lsr	x9, x8, #32
	stp	w8, w9, [x0, #48]
	adrp	x1, env
	add	x1, x1, :lo12:env
	ldr	x8, [x1, #56]
	adrp	x9, ($Put)
	ldr	x9, [x9, :lo12:($Put)]
	str	x9, [x8, #16]
	ldr	x8, [x1, #48]
	adrp	x9, ($Get)
	ldr	x9, [x9, :lo12:($Get)]
	str	x9, [x8, #16]
	ldr	x8, [x8, #8]
	adrp	x9, ($Chr)
	ldr	w9, [x9, :lo12:($Chr)]
	str	w9, [x8, #12]
	add	x0, x0, #112                    // =112
	mov	w2, #152
	bl	memcpy2
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end460:
	.size	saveCoEnv, .Lfunc_end460-saveCoEnv
	.cfi_endproc
                                        // -- End function
	.globl	loadCoEnv                       // -- Begin function loadCoEnv
	.p2align	4
	.type	loadCoEnv,@function
loadCoEnv:                              // @loadCoEnv
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x30, x19, [sp, #-16]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w19, -8
	.cfi_offset w30, -16
	mov	x19, x0
	adrp	x0, env
	add	x0, x0, :lo12:env
	str	x19, [x0, #32]
	ldr	x8, [x19, #40]
	add	x8, x8, #1, lsl #12             // =4096
	adrp	x9, ($StkLimit)
	str	x8, [x9, :lo12:($StkLimit)]
	add	x1, x19, #112                   // =112
	mov	w2, #152
	bl	memcpy2
	bl	tosInFile
	bl	tosOutFile
	ldr	w8, [x19, #48]!
	ldr	w9, [x19, #4]
	bfi	x8, x9, #32, #32
	adrp	x9, SymTab+376
	str	x8, [x9, :lo12:SymTab+376]
	stp	wzr, wzr, [x19]
	adrp	x8, ($Ret)
	ldr	x0, [x8, :lo12:($Ret)]
	ldp	x30, x19, [sp], #16             // 16-byte Folded Reload
	ret
.Lfunc_end461:
	.size	loadCoEnv, .Lfunc_end461-loadCoEnv
	.cfi_endproc
                                        // -- End function
	.globl	setDestruct                     // -- Begin function setDestruct
	.p2align	4
	.type	setDestruct,@function
setDestruct:                            // @setDestruct
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x30, x21, [sp, #-32]!           // 16-byte Folded Spill
	stp	x20, x19, [sp, #16]             // 16-byte Folded Spill
	.cfi_def_cfa_offset 32
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w30, -32
	mov	x20, x1
	mov	x19, x0
	adrp	x21, SymTab+8
	add	x21, x21, :lo12:SymTab+8
	b	.LBB462_3
.LBB462_1:                              // %"$6"
                                        //   in Loop: Header=BB462_3 Depth=1
	bl	setDestruct
.LBB462_2:                              // %"$7"
                                        //   in Loop: Header=BB462_3 Depth=1
	tst	x19, #0xf
	b.ne	.LBB462_6
.LBB462_3:                              // %"$2"
                                        // =>This Inner Loop Header: Depth=1
	tst	x20, #0xf
	csel	x8, x20, x21, eq
	ldp	w0, w9, [x19]
	bfi	x0, x9, #32, #32
	ldp	w19, w9, [x19, #8]
	bfi	x19, x9, #32, #32
	ldp	w1, w9, [x8]
	bfi	x1, x9, #32, #32
	ldp	w20, w9, [x8, #8]
	bfi	x20, x9, #32, #32
	tst	x0, #0xf
	b.eq	.LBB462_1
// %bb.4:                               // %"$5"
                                        //   in Loop: Header=BB462_3 Depth=1
	cmp	x0, x21
	b.eq	.LBB462_2
// %bb.5:                               // %"$8"
                                        //   in Loop: Header=BB462_3 Depth=1
	lsr	x8, x1, #32
	stp	w1, w8, [x0]
	b	.LBB462_2
.LBB462_6:                              // %"$12"
	cmp	x19, x21
	b.eq	.LBB462_8
// %bb.7:                               // %"$13"
	lsr	x8, x20, #32
	stp	w20, w8, [x19]
.LBB462_8:                              // %"$11"
	ldp	x20, x19, [sp, #16]             // 16-byte Folded Reload
	ldp	x30, x21, [sp], #32             // 16-byte Folded Reload
	ret
.Lfunc_end462:
	.size	setDestruct, .Lfunc_end462-setDestruct
	.cfi_endproc
                                        // -- End function
	.globl	loop1                           // -- Begin function loop1
	.p2align	4
	.type	loop1,@function
loop1:                                  // @loop1
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-48]!                // 8-byte Folded Spill
	stp	x22, x21, [sp, #16]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #32]             // 16-byte Folded Spill
	.cfi_def_cfa_offset 48
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w30, -48
	mov	x19, x0
	adrp	x20, SymTab+8
	add	x20, x20, :lo12:SymTab+8
	adrp	x21, SymTab+216
	add	x21, x21, :lo12:SymTab+216
	b	.LBB463_3
.LBB463_1:                              // %"$7"
                                        //   in Loop: Header=BB463_3 Depth=1
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
.LBB463_2:                              // %"$4"
                                        //   in Loop: Header=BB463_3 Depth=1
	ldp	w19, w8, [x19, #8]
	bfi	x19, x8, #32, #32
	tst	x19, #0xf
	b.ne	.LBB463_23
.LBB463_3:                              // %"$2"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w0, w8, [x19]
	bfi	x0, x8, #32, #32
	tst	x0, #0x6
	b.ne	.LBB463_2
// %bb.4:                               // %"$3"
                                        //   in Loop: Header=BB463_3 Depth=1
	tbnz	w0, #3, .LBB463_1
// %bb.5:                               // %"$6"
                                        //   in Loop: Header=BB463_3 Depth=1
	ldp	w9, w8, [x0]
	bfi	x9, x8, #32, #32
	cmp	x9, x20
	b.ne	.LBB463_9
// %bb.6:                               // %"$9"
                                        //   in Loop: Header=BB463_3 Depth=1
	ldp	w22, w8, [x0, #8]
	bfi	x22, x8, #32, #32
	ldp	w0, w8, [x22]
	bfi	x0, x8, #32, #32
	tst	x0, #0x6
	b.ne	.LBB463_16
// %bb.7:                               // %"$11"
                                        //   in Loop: Header=BB463_3 Depth=1
	tbz	w0, #3, .LBB463_15
// %bb.8:                               // %"$14"
                                        //   in Loop: Header=BB463_3 Depth=1
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB463_16
.LBB463_9:                              // %"$8"
                                        //   in Loop: Header=BB463_3 Depth=1
	ldp	w9, w8, [x0]
	bfi	x9, x8, #32, #32
	cmp	x9, x21
	b.ne	.LBB463_14
// %bb.10:                              // %"$30"
                                        //   in Loop: Header=BB463_3 Depth=1
	ldp	w22, w8, [x0, #8]
	bfi	x22, x8, #32, #32
	ldp	w0, w8, [x22]
	bfi	x0, x8, #32, #32
	tst	x0, #0x6
	b.ne	.LBB463_13
// %bb.11:                              // %"$32"
                                        //   in Loop: Header=BB463_3 Depth=1
	tbz	w0, #3, .LBB463_18
// %bb.12:                              // %"$35"
                                        //   in Loop: Header=BB463_3 Depth=1
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
.LBB463_13:                             // %"$31"
                                        //   in Loop: Header=BB463_3 Depth=1
	cmp	x0, x20
	b.eq	.LBB463_2
	b	.LBB463_19
.LBB463_14:                             // %"$29"
                                        //   in Loop: Header=BB463_3 Depth=1
	bl	evList
	b	.LBB463_2
.LBB463_15:                             // %"$13"
                                        //   in Loop: Header=BB463_3 Depth=1
	bl	evList
.LBB463_16:                             // %"$10"
                                        //   in Loop: Header=BB463_3 Depth=1
	cmp	x0, x20
	b.eq	.LBB463_25
// %bb.17:                              // %"$15"
                                        //   in Loop: Header=BB463_3 Depth=1
	str	x0, [x20, #368]
	mov	x0, x20
	b	.LBB463_2
.LBB463_18:                             // %"$34"
                                        //   in Loop: Header=BB463_3 Depth=1
	bl	evList
	cmp	x0, x20
	b.eq	.LBB463_2
.LBB463_19:                             // %"$37"
	adrp	x8, SymTab+376
	str	x0, [x8, :lo12:SymTab+376]
	ldp	w19, w8, [x22, #8]
	bfi	x19, x8, #32, #32
.LBB463_20:                             // %"$38"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w0, w8, [x19]
	bfi	x0, x8, #32, #32
	ldp	w19, w8, [x19, #8]
	bfi	x19, x8, #32, #32
	tst	x19, #0xf
	b.ne	.LBB463_32
// %bb.21:                              // %"$39"
                                        //   in Loop: Header=BB463_20 Depth=1
	tst	x0, #0xf
	b.ne	.LBB463_20
// %bb.22:                              // %"$48"
                                        //   in Loop: Header=BB463_20 Depth=1
	bl	evList
	b	.LBB463_20
.LBB463_23:                             // %"$50"
	orr	x0, x0, #0x1
.LBB463_24:                             // %"$16"
	ldp	x20, x19, [sp, #32]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #16]             // 16-byte Folded Reload
	ldr	x30, [sp], #48                  // 8-byte Folded Reload
	ret
.LBB463_25:                             // %"$17"
	ldp	w19, w8, [x22, #8]
	bfi	x19, x8, #32, #32
.LBB463_26:                             // %"$18"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w0, w8, [x19]
	bfi	x0, x8, #32, #32
	ldp	w19, w8, [x19, #8]
	bfi	x19, x8, #32, #32
	tst	x19, #0xf
	b.ne	.LBB463_29
// %bb.27:                              // %"$19"
                                        //   in Loop: Header=BB463_26 Depth=1
	tst	x0, #0xf
	b.ne	.LBB463_26
// %bb.28:                              // %"$28"
                                        //   in Loop: Header=BB463_26 Depth=1
	bl	evList
	b	.LBB463_26
.LBB463_29:                             // %"$21"
	tst	x0, #0x6
	b.ne	.LBB463_24
// %bb.30:                              // %"$23"
	tbz	w0, #3, .LBB463_34
.LBB463_31:                             // %"$26"
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB463_24
.LBB463_32:                             // %"$41"
	tst	x0, #0x6
	b.ne	.LBB463_24
// %bb.33:                              // %"$43"
	tbnz	w0, #3, .LBB463_31
.LBB463_34:                             // %"$25"
	bl	evList
	b	.LBB463_24
.Lfunc_end463:
	.size	loop1, .Lfunc_end463-loop1
	.cfi_endproc
                                        // -- End function
	.globl	loop2                           // -- Begin function loop2
	.p2align	4
	.type	loop2,@function
loop2:                                  // @loop2
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-64]!                // 8-byte Folded Spill
	stp	x24, x23, [sp, #16]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #32]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #48]             // 16-byte Folded Spill
	.cfi_def_cfa_offset 64
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w30, -64
	mov	x19, x0
	adrp	x21, SymTab+8
	add	x21, x21, :lo12:SymTab+8
	adrp	x20, SymTab+376
	mov	x23, x0
	adrp	x22, SymTab+216
	add	x22, x22, :lo12:SymTab+216
.LBB464_1:                              // %"$3"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w0, w8, [x23]
	bfi	x0, x8, #32, #32
	tst	x0, #0xf
	b.ne	.LBB464_14
// %bb.2:                               // %"$4"
                                        //   in Loop: Header=BB464_1 Depth=1
	ldp	w9, w8, [x0]
	bfi	x9, x8, #32, #32
	cmp	x9, x21
	b.ne	.LBB464_8
// %bb.3:                               // %"$8"
                                        //   in Loop: Header=BB464_1 Depth=1
	ldp	w24, w8, [x0, #8]
	bfi	x24, x8, #32, #32
	ldp	w0, w8, [x24]
	bfi	x0, x8, #32, #32
	tst	x0, #0x6
	b.ne	.LBB464_6
// %bb.4:                               // %"$10"
                                        //   in Loop: Header=BB464_1 Depth=1
	tbz	w0, #3, .LBB464_16
// %bb.5:                               // %"$13"
                                        //   in Loop: Header=BB464_1 Depth=1
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
.LBB464_6:                              // %"$9"
                                        //   in Loop: Header=BB464_1 Depth=1
	cmp	x0, x21
	b.eq	.LBB464_22
.LBB464_7:                              // %"$15"
                                        //   in Loop: Header=BB464_1 Depth=1
	str	x0, [x20, :lo12:SymTab+376]
	b	.LBB464_14
.LBB464_8:                              // %"$7"
                                        //   in Loop: Header=BB464_1 Depth=1
	ldp	w9, w8, [x0]
	bfi	x9, x8, #32, #32
	cmp	x9, x22
	b.ne	.LBB464_13
// %bb.9:                               // %"$28"
                                        //   in Loop: Header=BB464_1 Depth=1
	ldp	w24, w8, [x0, #8]
	bfi	x24, x8, #32, #32
	ldp	w0, w8, [x24]
	bfi	x0, x8, #32, #32
	tst	x0, #0x6
	b.ne	.LBB464_12
// %bb.10:                              // %"$30"
                                        //   in Loop: Header=BB464_1 Depth=1
	tbz	w0, #3, .LBB464_17
// %bb.11:                              // %"$33"
                                        //   in Loop: Header=BB464_1 Depth=1
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
.LBB464_12:                             // %"$29"
                                        //   in Loop: Header=BB464_1 Depth=1
	cmp	x0, x21
	b.eq	.LBB464_14
	b	.LBB464_18
.LBB464_13:                             // %"$27"
                                        //   in Loop: Header=BB464_1 Depth=1
	bl	evList
.LBB464_14:                             // %"$5"
                                        //   in Loop: Header=BB464_1 Depth=1
	ldp	w23, w8, [x23, #8]
	bfi	x23, x8, #32, #32
	tst	x23, #0xf
	b.eq	.LBB464_1
// %bb.15:                              // %"$48"
                                        //   in Loop: Header=BB464_1 Depth=1
	mov	x23, x19
	b	.LBB464_1
.LBB464_16:                             // %"$12"
                                        //   in Loop: Header=BB464_1 Depth=1
	bl	evList
	cmp	x0, x21
	b.ne	.LBB464_7
	b	.LBB464_22
.LBB464_17:                             // %"$32"
                                        //   in Loop: Header=BB464_1 Depth=1
	bl	evList
	cmp	x0, x21
	b.eq	.LBB464_14
.LBB464_18:                             // %"$34"
	str	x0, [x20, :lo12:SymTab+376]
	ldp	w19, w8, [x24, #8]
	bfi	x19, x8, #32, #32
.LBB464_19:                             // %"$36"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w0, w8, [x19]
	bfi	x0, x8, #32, #32
	ldp	w19, w8, [x19, #8]
	bfi	x19, x8, #32, #32
	tst	x19, #0xf
	b.ne	.LBB464_29
// %bb.20:                              // %"$37"
                                        //   in Loop: Header=BB464_19 Depth=1
	tst	x0, #0xf
	b.ne	.LBB464_19
// %bb.21:                              // %"$46"
                                        //   in Loop: Header=BB464_19 Depth=1
	bl	evList
	b	.LBB464_19
.LBB464_22:                             // %"$14"
	ldp	w19, w8, [x24, #8]
	bfi	x19, x8, #32, #32
.LBB464_23:                             // %"$16"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w0, w8, [x19]
	bfi	x0, x8, #32, #32
	ldp	w19, w8, [x19, #8]
	bfi	x19, x8, #32, #32
	tst	x19, #0xf
	b.ne	.LBB464_26
// %bb.24:                              // %"$17"
                                        //   in Loop: Header=BB464_23 Depth=1
	tst	x0, #0xf
	b.ne	.LBB464_23
// %bb.25:                              // %"$26"
                                        //   in Loop: Header=BB464_23 Depth=1
	bl	evList
	b	.LBB464_23
.LBB464_26:                             // %"$19"
	tst	x0, #0x6
	b.ne	.LBB464_32
// %bb.27:                              // %"$21"
	tbz	w0, #3, .LBB464_31
.LBB464_28:                             // %"$24"
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB464_32
.LBB464_29:                             // %"$39"
	tst	x0, #0x6
	b.ne	.LBB464_32
// %bb.30:                              // %"$41"
	tbnz	w0, #3, .LBB464_28
.LBB464_31:                             // %"$23"
	bl	evList
.LBB464_32:                             // %"$18"
	ldp	x20, x19, [sp, #48]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #32]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #16]             // 16-byte Folded Reload
	ldr	x30, [sp], #64                  // 8-byte Folded Reload
	ret
.Lfunc_end464:
	.size	loop2, .Lfunc_end464-loop2
	.cfi_endproc
                                        // -- End function
	.globl	extra                           // -- Begin function extra
	.p2align	4
	.type	extra,@function
extra:                                  // @extra
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-48]!                // 8-byte Folded Spill
	stp	x22, x21, [sp, #16]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #32]             // 16-byte Folded Spill
	.cfi_def_cfa_offset 48
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w30, -48
	mov	x19, x1
.LBB465_1:                              // %"$2"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w20, w8, [x0]
	bfi	x20, x8, #32, #32
	ldrb	w8, [x20]
	tst	w8, #0xf
	b.ne	.LBB465_3
// %bb.2:                               // %"$3"
                                        //   in Loop: Header=BB465_1 Depth=1
	add	x0, x20, #8                     // =8
	b	.LBB465_1
.LBB465_3:
	adrp	x21, env+104
	adrp	x22, ($StkLimit)
	tst	x20, #0xf
	b.ne	.LBB465_9
.LBB465_4:                              // %"$6"
                                        // =>This Inner Loop Header: Depth=1
	ldr	x8, [x21, :lo12:env+104]
	cmp	x20, x8
	b.eq	.LBB465_10
// %bb.5:                               // %"$9"
                                        //   in Loop: Header=BB465_4 Depth=1
	mov	x8, sp
	ldr	x9, [x22, :lo12:($StkLimit)]
	cmp	x9, x8
	b.hi	.LBB465_18
// %bb.6:                               // %"$18"
                                        //   in Loop: Header=BB465_4 Depth=1
	ldp	w0, w8, [x20]
	bfi	x0, x8, #32, #32
	mov	x1, x19
	bl	extra
	cmp	x0, #0                          // =0
	b.gt	.LBB465_17
// %bb.7:                               // %"$19"
                                        //   in Loop: Header=BB465_4 Depth=1
	cbz	x0, .LBB465_13
// %bb.8:                               // %"$21"
                                        //   in Loop: Header=BB465_4 Depth=1
	ldp	w20, w8, [x20, #8]
	bfi	x20, x8, #32, #32
	tst	x20, #0xf
	b.eq	.LBB465_4
.LBB465_9:
	mov	x0, #-1
	b	.LBB465_17
.LBB465_10:                             // %"$11.preheader"
	adrp	x21, ($Ret)
.LBB465_11:                             // %"$11"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w20, w8, [x20, #8]
	bfi	x20, x8, #32, #32
	tst	x20, #0xf
	b.ne	.LBB465_16
// %bb.12:                              // %"$12"
                                        //   in Loop: Header=BB465_11 Depth=1
	str	x20, [x21, :lo12:($Ret)]
	ldp	w0, w8, [x20]
	bfi	x0, x8, #32, #32
	mov	x1, x19
	bl	method
	cbz	x0, .LBB465_11
	b	.LBB465_17
.LBB465_13:                             // %"$23.preheader"
	adrp	x21, ($Ret)
.LBB465_14:                             // %"$23"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w20, w8, [x20, #8]
	bfi	x20, x8, #32, #32
	tst	x20, #0xf
	b.ne	.LBB465_16
// %bb.15:                              // %"$24"
                                        //   in Loop: Header=BB465_14 Depth=1
	str	x20, [x21, :lo12:($Ret)]
	ldp	w0, w8, [x20]
	bfi	x0, x8, #32, #32
	mov	x1, x19
	bl	method
	cbz	x0, .LBB465_14
	b	.LBB465_17
.LBB465_16:
	mov	x0, xzr
.LBB465_17:                             // %"$7"
	ldp	x20, x19, [sp, #32]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #16]             // 16-byte Folded Reload
	ldr	x30, [sp], #48                  // 8-byte Folded Reload
	ret
.LBB465_18:                             // %"$17"
	mov	x0, xzr
	bl	stkErr
.Lfunc_end465:
	.size	extra, .Lfunc_end465-extra
	.cfi_endproc
                                        // -- End function
	.globl	method                          // -- Begin function method
	.p2align	4
	.type	method,@function
method:                                 // @method
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x30, x21, [sp, #-32]!           // 16-byte Folded Spill
	stp	x20, x19, [sp, #16]             // 16-byte Folded Spill
	.cfi_def_cfa_offset 32
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w30, -32
	ldp	w20, w8, [x0]
	bfi	x20, x8, #32, #32
	tst	x20, #0xf
	b.eq	.LBB466_3
.LBB466_1:                              // %"$9"
	mov	x0, xzr
.LBB466_2:                              // %"$14"
	ldp	x20, x19, [sp, #16]             // 16-byte Folded Reload
	ldp	x30, x21, [sp], #32             // 16-byte Folded Reload
	ret
.LBB466_3:                              // %"$4.preheader"
	mov	x19, x1
.LBB466_4:                              // %"$4"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w8, w9, [x20]
	bfi	x8, x9, #32, #32
	tst	x8, #0xf
	b.ne	.LBB466_7
// %bb.5:                               // %"$5"
                                        //   in Loop: Header=BB466_4 Depth=1
	ldp	w10, w9, [x8]
	bfi	x10, x9, #32, #32
	cmp	x19, x10
	b.eq	.LBB466_11
// %bb.6:                               // %"$8"
                                        //   in Loop: Header=BB466_4 Depth=1
	ldp	w20, w8, [x20, #8]
	bfi	x20, x8, #32, #32
	tst	x20, #0xf
	b.eq	.LBB466_4
	b	.LBB466_1
.LBB466_7:                              // %"$6"
	mov	x8, sp
	adrp	x9, ($StkLimit)
	ldr	x9, [x9, :lo12:($StkLimit)]
	cmp	x9, x8
	b.hi	.LBB466_12
// %bb.8:
	adrp	x21, ($Ret)
.LBB466_9:                              // %"$13"
                                        // =>This Inner Loop Header: Depth=1
	str	x20, [x21, :lo12:($Ret)]
	ldp	w0, w8, [x20]
	bfi	x0, x8, #32, #32
	mov	x1, x19
	bl	method
	cbnz	x0, .LBB466_2
// %bb.10:                              // %"$15"
                                        //   in Loop: Header=BB466_9 Depth=1
	ldp	w20, w8, [x20, #8]
	bfi	x20, x8, #32, #32
	tst	x20, #0xf
	b.eq	.LBB466_9
	b	.LBB466_1
.LBB466_11:                             // %"$7"
	ldp	w0, w9, [x8, #8]
	bfi	x0, x9, #32, #32
	b	.LBB466_2
.LBB466_12:                             // %"$11"
	mov	x0, xzr
	bl	stkErr
.Lfunc_end466:
	.size	method, .Lfunc_end466-method
	.cfi_endproc
                                        // -- End function
	.globl	isLife                          // -- Begin function isLife
	.p2align	4
	.type	isLife,@function
isLife:                                 // @isLife
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-48]!           // 16-byte Folded Spill
	str	x21, [sp, #16]                  // 8-byte Folded Spill
	stp	x20, x19, [sp, #32]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 48
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -32
	.cfi_offset w30, -40
	.cfi_offset w29, -48
	ldp	w9, w8, [x0, #-8]
	bfi	x9, x8, #32, #32
	and	x19, x9, #0xfffffffffffffff7
	tst	x19, #0x6
	b.ne	.LBB467_2
.LBB467_1:                              // %"$3"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w19, w8, [x19, #8]
	bfi	x19, x8, #32, #32
	tst	x19, #0x6
	b.eq	.LBB467_1
.LBB467_2:                              // %"$4"
	mov	x0, x19
	bl	objFile
	mov	w20, w0
	mov	x0, x19
	bl	objId
	lsl	x21, x0, #6
	cbz	x21, .LBB467_10
// %bb.3:                               // %"$5"
	adrp	x8, ($DBs)
	ldr	w8, [x8, :lo12:($DBs)]
	cmp	w8, w20
	b.le	.LBB467_7
// %bb.4:                               // %"$9"
	adds	x8, x19, x19
	b.hs	.LBB467_6
// %bb.5:                               // %"$11"
	cmn	x8, x8
	b.lo	.LBB467_8
.LBB467_6:                              // %"$10"
	mov	w0, #1
	b	.LBB467_11
.LBB467_7:                              // %"$8"
	adrp	x8, SymTab+472
	ldrb	w8, [x8, :lo12:SymTab+472]
	tst	w8, #0xf
	cset	w0, eq
	b	.LBB467_11
.LBB467_8:                              // %"$13"
	adrp	x8, ($DbFiles)
	ldr	x8, [x8, :lo12:($DbFiles)]
	mov	w9, #42
	mul	w9, w20, w9
	add	x20, x8, w9, sxtw
	adrp	x8, ($DbFile)
	str	x20, [x8, :lo12:($DbFile)]
	sub	x19, sp, #16                    // =16
	mov	sp, x19
	mov	w0, #6
	mov	x1, x19
	mov	w2, #6
	bl	blkPeek
	mov	x0, x19
	bl	getAdr
	cmp	x0, x21
	b.ls	.LBB467_10
// %bb.9:                               // %"$14"
	ldrsw	x8, [x20, #8]
	lsl	x0, x21, x8
	mov	x1, x19
	mov	w2, #6
	bl	blkPeek
	ldrb	w8, [x19]
	and	w8, w8, #0x3f
	cmp	w8, #1                          // =1
	cset	w0, eq
	b	.LBB467_11
.LBB467_10:                             // %"$6"
	mov	w0, wzr
.LBB467_11:                             // %"$10"
	mov	sp, x29
	ldp	x20, x19, [sp, #32]             // 16-byte Folded Reload
	ldr	x21, [sp, #16]                  // 8-byte Folded Reload
	ldp	x29, x30, [sp], #48             // 16-byte Folded Reload
	ret
.Lfunc_end467:
	.size	isLife, .Lfunc_end467-isLife
	.cfi_endproc
                                        // -- End function
	.globl	evMethod                        // -- Begin function evMethod
	.p2align	4
	.type	evMethod,@function
evMethod:                               // @evMethod
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-96]!           // 16-byte Folded Spill
	stp	x28, x27, [sp, #16]             // 16-byte Folded Spill
	stp	x26, x25, [sp, #32]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #48]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #64]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #80]             // 16-byte Folded Spill
	mov	x29, sp
	sub	sp, sp, #80                     // =80
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	mov	x22, x4
	mov	x19, x3
	mov	x28, x2
	mov	x21, x1
	adrp	x24, env+8
	sub	x26, x29, #32                   // =32
	adrp	x25, SymTab+376
	add	x25, x25, :lo12:SymTab+376
	ldp	w23, w8, [x3]
	mov	x1, x25
	ldr	x9, [x1], #48
	ldr	x10, [x24, :lo12:env+8]
	str	x26, [x24, :lo12:env+8]
	stp	x9, x25, [x29, #-32]
	bfi	x23, x8, #32, #32
	stp	x10, x3, [x29, #-16]
	sub	x8, x29, #64                    // =64
	adrp	x27, SymTab+8
	add	x27, x27, :lo12:SymTab+8
.LBB468_1:                              // %"$2.sink.split"
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB468_2 Depth 2
                                        //       Child Loop BB468_8 Depth 3
	lsr	x9, x0, #32
	lsr	x10, x1, #32
	stp	w0, w9, [x8]
	stp	w1, w10, [x8, #8]
	lsr	x9, x26, #32
	stp	w26, w9, [x8, #16]
	mov	x26, x8
	str	x8, [x24, :lo12:env+8]
.LBB468_2:                              // %"$2"
                                        //   Parent Loop BB468_1 Depth=1
                                        // =>  This Loop Header: Depth=2
                                        //       Child Loop BB468_8 Depth 3
	tst	x23, #0xf
	b.ne	.LBB468_21
// %bb.3:                               // %"$3"
                                        //   in Loop: Header=BB468_2 Depth=2
	ldp	w0, w8, [x22]
	bfi	x0, x8, #32, #32
	ldp	w22, w8, [x22, #8]
	bfi	x22, x8, #32, #32
	tst	x0, #0x6
	b.ne	.LBB468_7
// %bb.4:                               // %"$6"
                                        //   in Loop: Header=BB468_2 Depth=2
	tbz	w0, #3, .LBB468_6
// %bb.5:                               // %"$9"
                                        //   in Loop: Header=BB468_2 Depth=2
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB468_7
.LBB468_6:                              // %"$8"
                                        //   in Loop: Header=BB468_2 Depth=2
	bl	evList
.LBB468_7:                              // %"$5"
                                        //   in Loop: Header=BB468_2 Depth=2
	ldp	w1, w8, [x23]
	bfi	x1, x8, #32, #32
	ldp	w23, w8, [x23, #8]
	bfi	x23, x8, #32, #32
	tst	x1, #0xf
	b.ne	.LBB468_18
.LBB468_8:                              // %"$19"
                                        //   Parent Loop BB468_1 Depth=1
                                        //     Parent Loop BB468_2 Depth=2
                                        // =>    This Inner Loop Header: Depth=3
	tst	x0, #0xf
	b.eq	.LBB468_10
// %bb.9:                               //   in Loop: Header=BB468_8 Depth=3
	mov	x10, x27
	b	.LBB468_11
.LBB468_10:                             // %"$20"
                                        //   in Loop: Header=BB468_8 Depth=3
	ldp	w10, w8, [x0]
	bfi	x10, x8, #32, #32
	ldp	w0, w8, [x0, #8]
	bfi	x0, x8, #32, #32
.LBB468_11:                             // %"$22"
                                        //   in Loop: Header=BB468_8 Depth=3
	ldp	w8, w9, [x1]
	bfi	x8, x9, #32, #32
	tst	x8, #0x6
	b.ne	.LBB468_77
// %bb.12:                              // %"$24"
                                        //   in Loop: Header=BB468_8 Depth=3
	add	x9, x27, #208                   // =208
	cmp	x9, x8
	ccmp	x8, x27, #0, hs
	b.hs	.LBB468_78
// %bb.13:                              // %"$28"
                                        //   in Loop: Header=BB468_8 Depth=3
	ldp	w1, w9, [x1, #8]
	bfi	x1, x9, #32, #32
	mov	x11, sp
	sub	x9, x11, #32                    // =32
	mov	sp, x9
	lsr	x12, x10, #32
	lsr	x13, x8, #32
	stp	w10, w12, [x11, #-32]
	stp	w8, w13, [x11, #-24]
	lsr	x8, x26, #32
	stp	w26, w8, [x11, #-16]
	tst	x1, #0xf
	mov	x26, x9
	str	x9, [x24, :lo12:env+8]
	b.eq	.LBB468_8
// %bb.14:                              // %"$30"
                                        //   in Loop: Header=BB468_2 Depth=2
	cmp	x1, x27
	mov	x26, x9
	b.eq	.LBB468_2
// %bb.15:                              // %"$31"
                                        //   in Loop: Header=BB468_1 Depth=1
	tst	x1, #0x6
	b.ne	.LBB468_79
// %bb.16:                              // %"$34"
                                        //   in Loop: Header=BB468_1 Depth=1
	add	x8, x27, #208                   // =208
	cmp	x8, x1
	ccmp	x1, x27, #0, hs
	b.hs	.LBB468_80
// %bb.17:                              // %"$38"
                                        //   in Loop: Header=BB468_1 Depth=1
	sub	x8, sp, #32                     // =32
	mov	sp, x8
	mov	x26, x9
	b	.LBB468_1
.LBB468_18:                             // %"$10"
                                        //   in Loop: Header=BB468_1 Depth=1
	tst	x1, #0x6
	b.ne	.LBB468_79
// %bb.19:                              // %"$14"
                                        //   in Loop: Header=BB468_1 Depth=1
	add	x8, x27, #208                   // =208
	cmp	x8, x1
	ccmp	x1, x27, #0, hs
	b.hs	.LBB468_80
// %bb.20:                              // %"$18"
                                        //   in Loop: Header=BB468_1 Depth=1
	sub	x8, sp, #32                     // =32
	mov	sp, x8
	b	.LBB468_1
.LBB468_21:                             // %"$4"
	cmp	x23, x25
	b.ne	.LBB468_26
// %bb.22:                              // %"$39"
	tst	x22, #0xf
	b.eq	.LBB468_46
// %bb.23:                              // %"$43"
	adrp	x8, env+96
	ldr	x22, [x8, :lo12:env+96]
	str	x27, [x8, :lo12:env+96]
.LBB468_24:                             // %"$72"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w9, w8, [x26, #8]
	bfi	x9, x8, #32, #32
	ldp	w8, w10, [x9]
	ldp	w12, w11, [x26]
	stp	w12, w11, [x9]
	stp	w8, w10, [x26]
	cmp	x25, x9
	b.eq	.LBB468_39
// %bb.25:                              // %"$73"
                                        //   in Loop: Header=BB468_24 Depth=1
	ldp	w26, w8, [x26, #16]
	bfi	x26, x8, #32, #32
	b	.LBB468_24
.LBB468_26:                             // %"$40"
	cmp	x23, x27
	b.eq	.LBB468_31
// %bb.27:                              // %"$86"
	tst	x23, #0x6
	b.ne	.LBB468_81
// %bb.28:                              // %"$89"
	add	x8, x27, #208                   // =208
	cmp	x8, x23
	ccmp	x23, x27, #0, hs
	b.hs	.LBB468_82
// %bb.29:                              // %"$93"
	ldp	w8, w9, [x23]
	mov	x10, sp
	sub	x11, x10, #32                   // =32
	mov	sp, x11
	stp	w8, w9, [x10, #-32]
	lsr	x8, x23, #32
	stp	w23, w8, [x10, #-24]
	lsr	x8, x26, #32
	stp	w26, w8, [x10, #-16]
	str	x11, [x24, :lo12:env+8]
	lsr	x8, x22, #32
	stp	w22, w8, [x23]
	b	.LBB468_31
.LBB468_30:                             // %"$95"
                                        //   in Loop: Header=BB468_31 Depth=1
	ldp	w26, w8, [x26, #16]
	bfi	x26, x8, #32, #32
.LBB468_31:                             // %"$94"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w9, w8, [x26, #8]
	bfi	x9, x8, #32, #32
	ldp	w8, w10, [x9]
	ldp	w12, w11, [x26]
	stp	w12, w11, [x9]
	stp	w8, w10, [x26]
	cmp	x25, x9
	b.ne	.LBB468_30
// %bb.32:                              // %"$96"
	adrp	x26, env+104
	add	x26, x26, :lo12:env+104
	ldp	x22, x20, [x26]
	stp	x21, x28, [x26]
	ldp	w19, w8, [x19, #8]
	bfi	x19, x8, #32, #32
.LBB468_33:                             // %"$97"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w0, w8, [x19]
	bfi	x0, x8, #32, #32
	ldp	w19, w8, [x19, #8]
	bfi	x19, x8, #32, #32
	tst	x19, #0xf
	b.ne	.LBB468_36
// %bb.34:                              // %"$98"
                                        //   in Loop: Header=BB468_33 Depth=1
	tst	x0, #0xf
	b.ne	.LBB468_33
// %bb.35:                              // %"$107"
                                        //   in Loop: Header=BB468_33 Depth=1
	bl	evList
	b	.LBB468_33
.LBB468_36:                             // %"$100"
	tst	x0, #0x6
	b.ne	.LBB468_52
// %bb.37:                              // %"$102"
	tbz	w0, #3, .LBB468_49
// %bb.38:                              // %"$105"
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB468_52
.LBB468_39:                             // %"$74"
	adrp	x8, env+104
	add	x8, x8, :lo12:env+104
	ldp	x20, x23, [x8]
	stp	x21, x28, [x8]
	ldp	w19, w8, [x19, #8]
	bfi	x19, x8, #32, #32
.LBB468_40:                             // %"$75"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w0, w8, [x19]
	bfi	x0, x8, #32, #32
	ldp	w19, w8, [x19, #8]
	bfi	x19, x8, #32, #32
	tst	x19, #0xf
	b.ne	.LBB468_43
// %bb.41:                              // %"$76"
                                        //   in Loop: Header=BB468_40 Depth=1
	tst	x0, #0xf
	b.ne	.LBB468_40
// %bb.42:                              // %"$85"
                                        //   in Loop: Header=BB468_40 Depth=1
	bl	evList
	b	.LBB468_40
.LBB468_43:                             // %"$78"
	tst	x0, #0x6
	b.ne	.LBB468_51
// %bb.44:                              // %"$80"
	tbz	w0, #3, .LBB468_50
// %bb.45:                              // %"$83"
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB468_51
.LBB468_46:                             // %"$42"
	ldp	w0, w8, [x22]
	bfi	x0, x8, #32, #32
	tst	x0, #0x6
	stur	x28, [x29, #-72]                // 8-byte Folded Spill
	b.ne	.LBB468_58
// %bb.47:                              // %"$46"
	tbz	w0, #3, .LBB468_57
// %bb.48:                              // %"$49"
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB468_58
.LBB468_49:                             // %"$104"
	bl	evList
	b	.LBB468_52
.LBB468_50:                             // %"$82"
	bl	evList
.LBB468_51:                             // %"$77"
	adrp	x26, env+96
	add	x26, x26, :lo12:env+96
	str	x23, [x26, #16]
.LBB468_52:                             // %"$99"
	str	x20, [x26, #8]
.LBB468_53:                             // %"$41"
	lsr	x8, x22, #32
	stp	w22, w8, [x26]
	adrp	x8, env+8
	add	x8, x8, :lo12:env+8
.LBB468_54:                             // %"$108"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w8, w9, [x8]
	bfi	x8, x9, #32, #32
	ldp	w10, w9, [x8, #8]
	bfi	x10, x9, #32, #32
	ldp	w9, w11, [x8]
	stp	w9, w11, [x10]
	cmp	x25, x10
	b.eq	.LBB468_56
// %bb.55:                              // %"$109"
                                        //   in Loop: Header=BB468_54 Depth=1
	add	x8, x8, #16                     // =16
	b	.LBB468_54
.LBB468_56:                             // %"$110"
	ldp	w8, w9, [x8, #16]
	bfi	x8, x9, #32, #32
	str	x8, [x24, :lo12:env+8]
	mov	sp, x29
	ldp	x20, x19, [sp, #80]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #64]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #48]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #32]             // 16-byte Folded Reload
	ldp	x28, x27, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #96             // 16-byte Folded Reload
	ret
.LBB468_57:                             // %"$48"
	bl	evList
.LBB468_58:                             // %"$45"
	mov	x8, sp
	sub	x23, x8, #32                    // =32
	mov	sp, x23
	sub	x8, x8, #24                     // =24
	adrp	x20, env
	mov	x28, x23
	b	.LBB468_61
.LBB468_59:                             // %"$56"
                                        //   in Loop: Header=BB468_61 Depth=1
	mov	x0, x8
	bl	evList
	mov	x8, x0
.LBB468_60:                             // %"$53"
                                        //   in Loop: Header=BB468_61 Depth=1
	mov	x9, sp
	sub	x0, x9, #32                     // =32
	mov	sp, x0
	lsr	x10, x8, #32
	stp	w8, w10, [x9, #-24]
	mov	x8, x28
	mov	x28, x0
.LBB468_61:                             // %"$50"
                                        // =>This Inner Loop Header: Depth=1
	lsr	x9, x0, #32
	stp	w0, w9, [x8]
	add	x8, x28, #8                     // =8
	ldr	x9, [x20, :lo12:env]
	lsr	x10, x9, #32
	stp	w9, w10, [x28, #16]
	str	x8, [x20, :lo12:env]
	ldp	w22, w8, [x22, #8]
	bfi	x22, x8, #32, #32
	tst	x22, #0xf
	b.ne	.LBB468_65
// %bb.62:                              // %"$51"
                                        //   in Loop: Header=BB468_61 Depth=1
	ldp	w8, w9, [x22]
	bfi	x8, x9, #32, #32
	tst	x8, #0x6
	b.ne	.LBB468_60
// %bb.63:                              // %"$54"
                                        //   in Loop: Header=BB468_61 Depth=1
	tbz	w8, #3, .LBB468_59
// %bb.64:                              // %"$57"
                                        //   in Loop: Header=BB468_61 Depth=1
	ldp	w8, w9, [x8]
	bfi	x8, x9, #32, #32
	b	.LBB468_60
.LBB468_65:                             // %"$52"
	adrp	x8, env+96
	ldr	x22, [x8, :lo12:env+96]
	lsr	x9, x27, #32
	stp	w27, w9, [x28]
	str	x23, [x8, :lo12:env+96]
	ldur	x13, [x29, #-72]                // 8-byte Folded Reload
.LBB468_66:                             // %"$58"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w9, w8, [x26, #8]
	bfi	x9, x8, #32, #32
	ldp	w8, w10, [x9]
	ldp	w12, w11, [x26]
	stp	w12, w11, [x9]
	stp	w8, w10, [x26]
	cmp	x25, x9
	b.eq	.LBB468_68
// %bb.67:                              // %"$59"
                                        //   in Loop: Header=BB468_66 Depth=1
	ldp	w26, w8, [x26, #16]
	bfi	x26, x8, #32, #32
	b	.LBB468_66
.LBB468_68:                             // %"$60"
	adrp	x8, env+104
	add	x8, x8, :lo12:env+104
	ldp	x20, x27, [x8]
	stp	x21, x13, [x8]
	ldp	w19, w8, [x19, #8]
	bfi	x19, x8, #32, #32
.LBB468_69:                             // %"$61"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w0, w8, [x19]
	bfi	x0, x8, #32, #32
	ldp	w19, w8, [x19, #8]
	bfi	x19, x8, #32, #32
	tst	x19, #0xf
	b.ne	.LBB468_72
// %bb.70:                              // %"$62"
                                        //   in Loop: Header=BB468_69 Depth=1
	tst	x0, #0xf
	b.ne	.LBB468_69
// %bb.71:                              // %"$71"
                                        //   in Loop: Header=BB468_69 Depth=1
	bl	evList
	b	.LBB468_69
.LBB468_72:                             // %"$64"
	tst	x0, #0x6
	b.ne	.LBB468_76
// %bb.73:                              // %"$66"
	tbz	w0, #3, .LBB468_75
// %bb.74:                              // %"$69"
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB468_76
.LBB468_75:                             // %"$68"
	bl	evList
.LBB468_76:                             // %"$63"
	adrp	x26, env
	add	x26, x26, :lo12:env
	stp	x20, x27, [x26, #104]
	str	x22, [x26, #96]
	ldp	w22, w8, [x23, #16]
	bfi	x22, x8, #32, #32
	b	.LBB468_53
.LBB468_77:                             // %"$23"
	mov	x0, x19
	mov	x1, x8
	bl	varErr
.LBB468_78:                             // %"$27"
	mov	x0, x19
	mov	x1, x8
	bl	protErr
.LBB468_79:                             // %"$13"
	mov	x0, x19
	bl	varErr
.LBB468_80:                             // %"$17"
	mov	x0, x19
	bl	protErr
.LBB468_81:                             // %"$88"
	mov	x0, x19
	mov	x1, x23
	bl	varErr
.LBB468_82:                             // %"$92"
	mov	x0, x19
	mov	x1, x23
	bl	protErr
.Lfunc_end468:
	.size	evMethod, .Lfunc_end468-evMethod
	.cfi_endproc
                                        // -- End function
	.globl	symErr                          // -- Begin function symErr
	.p2align	4
	.type	symErr,@function
symErr:                                 // @symErr
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	adrp	x2, .L$12
	add	x2, x2, :lo12:.L$12
	mov	x3, xzr
	bl	err
.Lfunc_end469:
	.size	symErr, .Lfunc_end469-symErr
	.cfi_endproc
                                        // -- End function
	.globl	isa                             // -- Begin function isa
	.p2align	4
	.type	isa,@function
isa:                                    // @isa
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x30, x21, [sp, #-32]!           // 16-byte Folded Spill
	stp	x20, x19, [sp, #16]             // 16-byte Folded Spill
	.cfi_def_cfa_offset 32
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w30, -32
	mov	x19, x0
	ldp	w20, w8, [x1]
	bfi	x20, x8, #32, #32
	mov	x21, x20
.LBB470_1:                              // %"$2"
                                        // =>This Inner Loop Header: Depth=1
	tst	x21, #0xf
	b.ne	.LBB470_4
// %bb.2:                               // %"$3"
                                        //   in Loop: Header=BB470_1 Depth=1
	ldrb	w8, [x21]
	tst	w8, #0xf
	b.ne	.LBB470_6
// %bb.3:                               // %"$6"
                                        //   in Loop: Header=BB470_1 Depth=1
	ldp	w21, w8, [x21, #8]
	bfi	x21, x8, #32, #32
	cmp	x20, x21
	b.ne	.LBB470_1
.LBB470_4:
	mov	w0, wzr
.LBB470_5:                              // %"$4"
	ldp	x20, x19, [sp, #16]             // 16-byte Folded Reload
	ldp	x30, x21, [sp], #32             // 16-byte Folded Reload
	ret
.LBB470_6:                              // %"$7"
	mov	x8, sp
	adrp	x9, ($StkLimit)
	ldr	x9, [x9, :lo12:($StkLimit)]
	cmp	x9, x8
	b.hi	.LBB470_13
.LBB470_7:                              // %"$10"
                                        // =>This Inner Loop Header: Depth=1
	ldr	w1, [x21]
	eor	w8, w1, #0x8
	tst	x8, #0xe
	b.ne	.LBB470_4
// %bb.8:                               // %"$11"
                                        //   in Loop: Header=BB470_7 Depth=1
	ldr	w8, [x21, #4]
	bfi	x1, x8, #32, #32
	cmp	x1, x19
	b.eq	.LBB470_12
// %bb.9:                               // %"$14"
                                        //   in Loop: Header=BB470_7 Depth=1
	mov	x0, x19
	bl	isa
	tbnz	w0, #0, .LBB470_12
// %bb.10:                              // %"$16"
                                        //   in Loop: Header=BB470_7 Depth=1
	ldp	w21, w8, [x21, #8]
	bfi	x21, x8, #32, #32
	tst	x21, #0xf
	b.ne	.LBB470_4
// %bb.11:                              // %"$18"
                                        //   in Loop: Header=BB470_7 Depth=1
	cmp	x20, x21
	b.ne	.LBB470_7
	b	.LBB470_4
.LBB470_12:
	mov	w0, #1
	b	.LBB470_5
.LBB470_13:                             // %"$8"
	mov	x0, xzr
	bl	stkErr
.Lfunc_end470:
	.size	isa, .Lfunc_end470-isa
	.cfi_endproc
                                        // -- End function
	.globl	newId                           // -- Begin function newId
	.p2align	4
	.type	newId,@function
newId:                                  // @newId
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x30, x21, [sp, #-32]!           // 16-byte Folded Spill
	stp	x20, x19, [sp, #16]             // 16-byte Folded Spill
	.cfi_def_cfa_offset 32
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w30, -32
	sub	w8, w1, #1                      // =1
	adrp	x9, ($DBs)
	ldr	w9, [x9, :lo12:($DBs)]
	cmp	w8, w9
	b.ge	.LBB471_6
// %bb.1:                               // %"$3"
	adrp	x9, ($DbFiles)
	mov	w10, #42
	adrp	x19, ($DbFile)
	adrp	x20, env+136
	ldr	x9, [x9, :lo12:($DbFiles)]
	mul	w8, w8, w10
	add	x8, x9, w8, sxtw
	str	x8, [x19, :lo12:($DbFile)]
	ldr	w8, [x20, :lo12:env+136]
	add	w8, w8, #1                      // =1
	str	w8, [x20, :lo12:env+136]
	bl	wrLockDb
	adrp	x21, ($DbJnl)
	ldr	x8, [x21, :lo12:($DbJnl)]
	cbz	x8, .LBB471_3
// %bb.2:                               // %"$4"
	bl	lockJnl
.LBB471_3:                              // %"$5"
	ldr	x8, [x19, :lo12:($DbFile)]
	ldr	w19, [x8, #4]
	bl	newBlock
	lsr	x1, x0, #6
	mov	w0, w19
	bl	extNm
	mov	x19, x0
	ldr	x8, [x21, :lo12:($DbJnl)]
	cbz	x8, .LBB471_5
// %bb.4:                               // %"$6"
	bl	unLockJnl
.LBB471_5:                              // %"$7"
	mov	w0, #1
	bl	unLockDb
	ldr	w8, [x20, :lo12:env+136]
	sub	w8, w8, #1                      // =1
	str	w8, [x20, :lo12:env+136]
	mov	x0, x19
	ldp	x20, x19, [sp, #16]             // 16-byte Folded Reload
	ldp	x30, x21, [sp], #32             // 16-byte Folded Reload
	ret
.LBB471_6:                              // %"$2"
	bl	dbfErr
.Lfunc_end471:
	.size	newId, .Lfunc_end471-newId
	.cfi_endproc
                                        // -- End function
	.globl	put                             // -- Begin function put
	.p2align	4
	.type	put,@function
put:                                    // @put
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-48]!                // 8-byte Folded Spill
	stp	x22, x21, [sp, #16]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #32]             // 16-byte Folded Spill
	.cfi_def_cfa_offset 48
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w30, -48
	mov	x19, x0
	ldp	w20, w8, [x0, #-8]
	bfi	x20, x8, #32, #32
	tst	x20, #0x6
	b.eq	.LBB472_6
.LBB472_1:                              // %"$3"
	adrp	x8, SymTab+8
	add	x8, x8, :lo12:SymTab+8
	cmp	x2, x8
	b.eq	.LBB472_12
// %bb.2:                               // %"$54"
	adrp	x8, SymTab+216
	add	x8, x8, :lo12:SymTab+216
	cmp	x2, x8
	b.eq	.LBB472_4
// %bb.3:                               // %"$57"
	mov	x0, x2
	bl	cons
	mov	x1, x0
.LBB472_4:                              // %"$58"
	tbz	w20, #3, .LBB472_10
// %bb.5:                               // %"$59"
	and	x8, x20, #0xfffffffffffffff7
	mov	x0, x1
	mov	x1, x8
	bl	cons
	orr	x0, x0, #0x8
	b	.LBB472_11
.LBB472_6:                              // %"$2"
	and	x21, x20, #0xfffffffffffffff7
	ldp	w8, w9, [x21]
	bfi	x8, x9, #32, #32
	tst	x8, #0xf
	b.eq	.LBB472_13
// %bb.7:                               // %"$4"
	cmp	x1, x8
	b.ne	.LBB472_18
// %bb.8:                               // %"$7"
	adrp	x8, SymTab+8
	add	x8, x8, :lo12:SymTab+8
	cmp	x2, x8
	b.ne	.LBB472_24
// %bb.9:                               // %"$11"
	ldp	w9, w8, [x21, #8]
	bfi	x9, x8, #32, #32
	sub	x21, x19, #8                    // =8
	orr	x8, x9, #0x8
	tst	w20, #0x8
	csel	x0, x9, x8, eq
	b	.LBB472_26
.LBB472_10:                             // %"$60"
	mov	x0, x1
	mov	x1, x20
	bl	cons
.LBB472_11:                             // %"$61"
	lsr	x8, x0, #32
	stp	w0, w8, [x19, #-8]
.LBB472_12:                             // %"$9"
	ldp	x20, x19, [sp, #32]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #16]             // 16-byte Folded Reload
	ldr	x30, [sp], #48                  // 8-byte Folded Reload
	ret
.LBB472_13:                             // %"$5"
	ldp	w10, w9, [x8, #8]
	bfi	x10, x9, #32, #32
	cmp	x1, x10
	b.ne	.LBB472_18
// %bb.14:                              // %"$17"
	adrp	x9, SymTab+8
	add	x9, x9, :lo12:SymTab+8
	cmp	x2, x9
	b.ne	.LBB472_27
// %bb.15:                              // %"$21"
	ldp	w8, w9, [x21, #8]
	bfi	x8, x9, #32, #32
	sub	x9, x19, #8                     // =8
	tbz	w20, #3, .LBB472_28
// %bb.16:                              // %"$22"
	orr	x8, x8, #0x8
	b	.LBB472_28
.LBB472_17:                             // %"$31"
                                        //   in Loop: Header=BB472_18 Depth=1
	ldp	w10, w9, [x8, #8]
	bfi	x10, x9, #32, #32
	cmp	x1, x10
	b.eq	.LBB472_29
.LBB472_18:                             // %"$27"
                                        // =>This Inner Loop Header: Depth=1
	mov	x22, x21
	ldp	w21, w8, [x21, #8]
	bfi	x21, x8, #32, #32
	tst	x21, #0xf
	b.ne	.LBB472_1
// %bb.19:                              // %"$28"
                                        //   in Loop: Header=BB472_18 Depth=1
	ldp	w8, w9, [x21]
	bfi	x8, x9, #32, #32
	tst	x8, #0xf
	b.eq	.LBB472_17
// %bb.20:                              // %"$30"
                                        //   in Loop: Header=BB472_18 Depth=1
	cmp	x1, x8
	b.ne	.LBB472_18
// %bb.21:                              // %"$33"
	adrp	x8, SymTab+8
	add	x8, x8, :lo12:SymTab+8
	cmp	x2, x8
	b.eq	.LBB472_30
// %bb.22:                              // %"$36"
	adrp	x8, SymTab+216
	add	x8, x8, :lo12:SymTab+216
	cmp	x2, x8
	b.eq	.LBB472_32
// %bb.23:                              // %"$38"
	mov	x0, x2
	bl	cons
	lsr	x8, x0, #32
	stp	w0, w8, [x21]
	b	.LBB472_32
.LBB472_24:                             // %"$10"
	adrp	x8, SymTab+216
	add	x8, x8, :lo12:SymTab+216
	cmp	x2, x8
	b.eq	.LBB472_12
// %bb.25:                              // %"$16"
	mov	x0, x2
	bl	cons
.LBB472_26:                             // %"$9.sink.split"
	lsr	x8, x0, #32
	stp	w0, w8, [x21]
	b	.LBB472_12
.LBB472_27:                             // %"$20"
	adrp	x9, SymTab+216
	add	x9, x9, :lo12:SymTab+216
	cmp	x2, x9
	csel	x9, x21, x8, eq
	csel	x8, x1, x2, eq
.LBB472_28:                             // %"$19"
	lsr	x10, x8, #32
	stp	w8, w10, [x9]
	b	.LBB472_12
.LBB472_29:                             // %"$43"
	adrp	x9, SymTab+8
	add	x9, x9, :lo12:SymTab+8
	cmp	x2, x9
	b.ne	.LBB472_31
.LBB472_30:                             // %"$35"
	ldp	w9, w8, [x21, #8]
	stp	w9, w8, [x22, #8]
	b	.LBB472_12
.LBB472_31:                             // %"$46"
	adrp	x9, SymTab+216
	add	x9, x9, :lo12:SymTab+216
	cmp	x2, x9
	csel	x8, x21, x8, eq
	csel	x9, x1, x2, eq
	lsr	x10, x9, #32
	stp	w9, w10, [x8]
.LBB472_32:                             // %"$39"
	ldp	w8, w9, [x21, #8]
	stp	w8, w9, [x22, #8]
	tbz	w20, #3, .LBB472_34
// %bb.33:                              // %"$41"
	and	x8, x20, #0xfffffffffffffff7
	lsr	x9, x20, #32
	stp	w8, w9, [x21, #8]
	orr	x21, x21, #0x8
	b	.LBB472_35
.LBB472_34:                             // %"$40"
	lsr	x8, x20, #32
	stp	w20, w8, [x21, #8]
.LBB472_35:                             // %"$42"
	lsr	x8, x21, #32
	stp	w21, w8, [x19, #-8]
	b	.LBB472_12
.Lfunc_end472:
	.size	put, .Lfunc_end472-put
	.cfi_endproc
                                        // -- End function
	.globl	wrLockDb                        // -- Begin function wrLockDb
	.p2align	4
	.type	wrLockDb,@function
wrLockDb:                               // @wrLockDb
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	adrp	x0, .L$56
	add	x0, x0, :lo12:.L$56
	bl	outString
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end473:
	.size	wrLockDb, .Lfunc_end473-wrLockDb
	.cfi_endproc
                                        // -- End function
	.globl	lockJnl                         // -- Begin function lockJnl
	.p2align	4
	.type	lockJnl,@function
lockJnl:                                // @lockJnl
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	adrp	x0, .L$59
	add	x0, x0, :lo12:.L$59
	bl	outString
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end474:
	.size	lockJnl, .Lfunc_end474-lockJnl
	.cfi_endproc
                                        // -- End function
	.globl	newBlock                        // -- Begin function newBlock
	.p2align	4
	.type	newBlock,@function
newBlock:                               // @newBlock
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-64]!           // 16-byte Folded Spill
	str	x23, [sp, #16]                  // 8-byte Folded Spill
	stp	x22, x21, [sp, #32]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #48]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 64
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -48
	.cfi_offset w30, -56
	.cfi_offset w29, -64
	adrp	x8, ($DbFile)
	ldr	x22, [x8, :lo12:($DbFile)]
	ldr	w23, [x22, #12]
	mov	x8, sp
	add	x9, x23, #15                    // =15
	and	x9, x9, #0x1fffffff0
	sub	x19, x8, x9
	mov	sp, x19
	mov	x0, xzr
	mov	x1, x19
	mov	w2, #12
	bl	blkPeek
	mov	x0, x19
	bl	getAdr
	mov	x20, x0
	cbz	x0, .LBB475_3
// %bb.1:                               // %"$4"
	ldp	w9, w8, [x22, #32]
	bfi	x9, x8, #32, #32
	cmp	x9, #0                          // =0
	cset	w8, ne
	cbz	w8, .LBB475_4
.LBB475_2:                              // %"$6"
	ldrsw	x8, [x22, #8]
	lsl	x0, x20, x8
	mov	x1, x19
	mov	w2, #6
	bl	blkPeek
	mov	x8, x22
	ldr	w9, [x8, #32]!
	ldr	w10, [x8, #4]
	bfi	x9, x10, #32, #32
	sub	x9, x9, #1                      // =1
	str	w9, [x8]
	lsr	x9, x9, #32
	str	w9, [x8, #4]
	b	.LBB475_6
.LBB475_3:
	mov	w8, wzr
	cbnz	w8, .LBB475_2
.LBB475_4:                              // %"$5"
	add	x21, x19, #6                    // =6
	mov	x0, x21
	bl	getAdr
	mov	x8, #281474976710592
	cmp	x0, x8
	b.eq	.LBB475_7
// %bb.5:                               // %"$7"
	mov	x20, x0
	add	x0, x0, #64                     // =64
	mov	x1, x21
	bl	setAdr
.LBB475_6:                              // %"$2"
	sxtw	x21, w23
	mov	x0, xzr
	mov	x1, x19
	mov	w2, #12
	bl	blkPoke
	mov	x0, x19
	mov	w1, wzr
	mov	x2, x21
	bl	memset2
	ldrsw	x8, [x22, #8]
	lsl	x0, x20, x8
	mov	x1, x19
	mov	w2, w21
	bl	blkPoke
	mov	x0, x20
	mov	sp, x29
	ldp	x20, x19, [sp, #48]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #32]             // 16-byte Folded Reload
	ldr	x23, [sp, #16]                  // 8-byte Folded Reload
	ldp	x29, x30, [sp], #64             // 16-byte Folded Reload
	ret
.LBB475_7:                              // %"$8"
	adrp	x2, .L$65
	add	x2, x2, :lo12:.L$65
	mov	x0, xzr
	mov	x1, xzr
	mov	x3, xzr
	bl	err
.Lfunc_end475:
	.size	newBlock, .Lfunc_end475-newBlock
	.cfi_endproc
                                        // -- End function
	.globl	unLockJnl                       // -- Begin function unLockJnl
	.p2align	4
	.type	unLockJnl,@function
unLockJnl:                              // @unLockJnl
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	adrp	x0, .L$60
	add	x0, x0, :lo12:.L$60
	bl	outString
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end476:
	.size	unLockJnl, .Lfunc_end476-unLockJnl
	.cfi_endproc
                                        // -- End function
	.globl	setAdr                          // -- Begin function setAdr
	.p2align	4
	.type	setAdr,@function
setAdr:                                 // @setAdr
	.cfi_startproc
// %bb.0:                               // %"$1"
	strb	w0, [x1]
	lsr	x8, x0, #8
	strb	w8, [x1, #1]
	lsr	x8, x0, #16
	lsr	x9, x0, #24
	strb	w8, [x1, #2]
	strb	w9, [x1, #3]
	lsr	x8, x0, #32
	strb	w8, [x1, #4]
	lsr	x8, x0, #40
	strb	w8, [x1, #5]
	ret
.Lfunc_end477:
	.size	setAdr, .Lfunc_end477-setAdr
	.cfi_endproc
                                        // -- End function
	.globl	blkPoke                         // -- Begin function blkPoke
	.p2align	4
	.type	blkPoke,@function
blkPoke:                                // @blkPoke
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	adrp	x0, .L$62
	add	x0, x0, :lo12:.L$62
	bl	outString
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end478:
	.size	blkPoke, .Lfunc_end478-blkPoke
	.cfi_endproc
                                        // -- End function
	.globl	memset2                         // -- Begin function memset2
	.p2align	4
	.type	memset2,@function
memset2:                                // @memset2
	.cfi_startproc
// %bb.0:                               // %"$1"
	mov	x8, xzr
	cmp	x2, x8
	b.eq	.LBB479_2
.LBB479_1:                              // %"$3"
                                        // =>This Inner Loop Header: Depth=1
	strb	w1, [x0]
	add	x8, x8, #1                      // =1
	cmp	x2, x8
	b.ne	.LBB479_1
.LBB479_2:                              // %"$4"
	ret
.Lfunc_end479:
	.size	memset2, .Lfunc_end479-memset2
	.cfi_endproc
                                        // -- End function
	.globl	redefine                        // -- Begin function redefine
	.p2align	4
	.type	redefine,@function
redefine:                               // @redefine
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	tst	x1, #0x6
	b.ne	.LBB480_3
// %bb.1:                               // %"$3"
	adrp	x8, SymTab+8
	add	x8, x8, :lo12:SymTab+8
	add	x9, x8, #208                    // =208
	cmp	x9, x1
	ccmp	x1, x8, #0, hs
	b.hs	.LBB480_4
// %bb.2:                               // %"$7"
	lsr	x8, x2, #32
	stp	w2, w8, [x1]
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.LBB480_3:                              // %"$2"
	bl	varErr
.LBB480_4:                              // %"$6"
	bl	protErr
.Lfunc_end480:
	.size	redefine, .Lfunc_end480-redefine
	.cfi_endproc
                                        // -- End function
	.globl	dbTouch                         // -- Begin function dbTouch
	.p2align	4
	.type	dbTouch,@function
dbTouch:                                // @dbTouch
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	mov	x8, x1
	ldr	w9, [x8, #-8]!
	ldr	w10, [x8, #4]
	bfi	x9, x10, #32, #32
	tst	x9, #0x6
	b.ne	.LBB481_3
// %bb.1:                               // %"$2"
	and	x9, x9, #0xfffffffffffffff7
.LBB481_2:                              // %"$4"
                                        // =>This Inner Loop Header: Depth=1
	mov	x8, x9
	ldr	w9, [x8, #8]!
	ldr	w10, [x8, #4]
	bfi	x9, x10, #32, #32
	tst	x9, #0x6
	b.eq	.LBB481_2
.LBB481_3:                              // %"$3"
	adds	x9, x9, x9
	b.hs	.LBB481_6
// %bb.4:                               // %"$7"
	adds	x9, x9, x9
	mov	x2, #-9223372036854775808
	bfxil	x2, x9, #2, #62
	lsr	x9, x9, #2
	lsr	x10, x2, #32
	stp	w9, w10, [x8]
	b.hs	.LBB481_6
// %bb.5:                               // %"$9"
	bl	db
.LBB481_6:                              // %"$8"
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end481:
	.size	dbTouch, .Lfunc_end481-dbTouch
	.cfi_endproc
                                        // -- End function
	.globl	runAt                           // -- Begin function runAt
	.p2align	4
	.type	runAt,@function
runAt:                                  // @runAt
	.cfi_startproc
// %bb.0:                               // %"$1"
	sub	sp, sp, #64                     // =64
	stp	x22, x21, [sp, #32]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #48]             // 16-byte Folded Spill
	.cfi_def_cfa_offset 64
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w30, -48
	mov	x19, x0
	adrp	x20, SymTab+376
	adrp	x21, env
	ldr	x22, [x20, :lo12:SymTab+376]
	ldr	x8, [x21, :lo12:env]
	str	x22, [sp]
	stp	x8, x30, [sp, #8]               // 8-byte Folded Spill
	mov	x8, sp
	str	x8, [x21, :lo12:env]
.LBB482_1:                              // %"$2"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w0, w8, [x19]
	bfi	x0, x8, #32, #32
	ldp	w19, w8, [x19, #8]
	bfi	x19, x8, #32, #32
	tst	x19, #0xf
	b.ne	.LBB482_4
// %bb.2:                               // %"$3"
                                        //   in Loop: Header=BB482_1 Depth=1
	tst	x0, #0xf
	b.ne	.LBB482_1
// %bb.3:                               // %"$12"
                                        //   in Loop: Header=BB482_1 Depth=1
	bl	evList
	b	.LBB482_1
.LBB482_4:                              // %"$5"
	tst	x0, #0x6
	b.ne	.LBB482_8
// %bb.5:                               // %"$7"
	tbz	w0, #3, .LBB482_7
// %bb.6:                               // %"$10"
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB482_8
.LBB482_7:                              // %"$9"
	bl	evList
.LBB482_8:                              // %"$4"
	str	x22, [x20, :lo12:SymTab+376]
	ldp	x8, x30, [sp, #8]               // 8-byte Folded Reload
	str	x8, [x21, :lo12:env]
	ldp	x20, x19, [sp, #48]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #32]             // 16-byte Folded Reload
	add	sp, sp, #64                     // =64
	ret
.Lfunc_end482:
	.size	runAt, .Lfunc_end482-runAt
	.cfi_endproc
                                        // -- End function
	.globl	fish                            // -- Begin function fish
	.p2align	4
	.type	fish,@function
fish:                                   // @fish
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x30, x23, [sp, #-48]!           // 16-byte Folded Spill
	stp	x22, x21, [sp, #16]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #32]             // 16-byte Folded Spill
	.cfi_def_cfa_offset 48
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w30, -48
	mov	x20, x4
	mov	x19, x3
	mov	x22, x2
	mov	x21, x1
	mov	x23, x0
	lsr	x8, x1, #32
	stp	w21, w8, [x2]
	bl	evList
	adrp	x8, SymTab+8
	add	x8, x8, :lo12:SymTab+8
	cmp	x0, x8
	b.ne	.LBB483_6
// %bb.1:                               // %"$4"
	tst	x21, #0xf
	b.ne	.LBB483_8
// %bb.2:                               // %"$5"
	mov	x9, sp
	adrp	x10, ($StkLimit)
	ldr	x10, [x10, :lo12:($StkLimit)]
	cmp	x10, x9
	b.hi	.LBB483_9
// %bb.3:                               // %"$8"
	ldp	w1, w9, [x21, #8]
	bfi	x1, x9, #32, #32
	cmp	x1, x8
	b.eq	.LBB483_5
// %bb.4:                               // %"$9"
	mov	x0, x23
	mov	x2, x22
	mov	x3, x19
	mov	x4, x20
	bl	fish
.LBB483_5:                              // %"$10"
	ldp	w1, w8, [x21]
	bfi	x1, x8, #32, #32
	mov	x0, x23
	mov	x2, x22
	mov	x3, x19
	mov	x4, x20
	bl	fish
	b	.LBB483_8
.LBB483_6:                              // %"$3"
	cmp	x0, x20
	b.eq	.LBB483_8
// %bb.7:                               // %"$12"
	ldp	w1, w8, [x19]
	bfi	x1, x8, #32, #32
	mov	x0, x21
	bl	cons
	lsr	x8, x0, #32
	stp	w0, w8, [x19]
.LBB483_8:                              // %"$2"
	ldp	x20, x19, [sp, #32]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #16]             // 16-byte Folded Reload
	ldp	x30, x23, [sp], #48             // 16-byte Folded Reload
	ret
.LBB483_9:                              // %"$7"
	mov	x0, xzr
	bl	stkErr
.Lfunc_end483:
	.size	fish, .Lfunc_end483-fish
	.cfi_endproc
                                        // -- End function
	.globl	begString                       // -- Begin function begString
	.p2align	4
	.type	begString,@function
begString:                              // @begString
	.cfi_startproc
// %bb.0:                               // %"$1"
	adrp	x8, ($StrP)
	adrp	x9, env
	adrp	x10, ($Put)
	ldr	x11, [x8, :lo12:($StrP)]
	lsr	x12, x11, #32
	stp	w11, w12, [x0, #40]
	str	x0, [x8, :lo12:($StrP)]
	ldr	x8, [x9, :lo12:env]
	lsr	x11, x8, #32
	stp	w8, w11, [x0, #24]
	add	x8, x0, #16                     // =16
	str	x8, [x9, :lo12:env]
	ldr	x8, [x10, :lo12:($Put)]
	lsr	x9, x8, #32
	stp	w8, w9, [x0, #32]
	adrp	x8, putString
	add	x8, x8, :lo12:putString
	str	x8, [x10, :lo12:($Put)]
	ret
.Lfunc_end484:
	.size	begString, .Lfunc_end484-begString
	.cfi_endproc
                                        // -- End function
	.globl	endString                       // -- Begin function endString
	.p2align	4
	.type	endString,@function
endString:                              // @endString
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x30, x19, [sp, #-16]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w19, -8
	.cfi_offset w30, -16
	adrp	x8, ($StrP)
	ldr	x19, [x8, :lo12:($StrP)]
	adrp	x9, ($Put)
	ldp	w11, w10, [x19, #32]
	bfi	x11, x10, #32, #32
	str	x11, [x9, :lo12:($Put)]
	ldp	w10, w9, [x19, #40]
	bfi	x10, x9, #32, #32
	str	x10, [x8, :lo12:($StrP)]
	ldp	w0, w8, [x19, #16]
	bfi	x0, x8, #32, #32
	bl	consStr
	ldp	w9, w8, [x19, #24]
	bfi	x9, x8, #32, #32
	adrp	x8, env
	str	x9, [x8, :lo12:env]
	ldp	x30, x19, [sp], #16             // 16-byte Folded Reload
	ret
.Lfunc_end485:
	.size	endString, .Lfunc_end485-endString
	.cfi_endproc
                                        // -- End function
	.globl	parse                           // -- Begin function parse
	.p2align	4
	.type	parse,@function
parse:                                  // @parse
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-96]!           // 16-byte Folded Spill
	stp	x28, x27, [sp, #16]             // 16-byte Folded Spill
	stp	x26, x25, [sp, #32]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #48]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #64]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #80]             // 16-byte Folded Spill
	mov	x29, sp
	sub	sp, sp, #48                     // =48
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	mov	x19, x3
	adrp	x22, ($Chr)
	ldr	w23, [x22, :lo12:($Chr)]
	str	wzr, [x22, :lo12:($Chr)]
	adrp	x25, ($Get)
	adrp	x24, env
	add	x24, x24, :lo12:env
	ldr	x26, [x25, :lo12:($Get)]
	adrp	x8, getParse
	add	x8, x8, :lo12:getParse
	str	x8, [x25, :lo12:($Get)]
	ldr	x8, [x24]
	sub	x9, x29, #16                    // =16
	str	x9, [x24]
	stp	xzr, x0, [x29, #-48]
	stp	x0, x8, [x29, #-16]
	ldr	x27, [x24, #80]
	stur	x2, [x29, #-32]
	sub	x8, x29, #48                    // =48
	str	x8, [x24, #80]
	tbz	w1, #0, .LBB486_2
// %bb.1:                               // %"$2"
	bl	getParse
.LBB486_2:                              // %"$3"
	cbz	x19, .LBB486_5
// %bb.3:                               // %"$5"
	cmp	x19, #1                         // =1
	b.ne	.LBB486_8
// %bb.4:                               // %"$8"
	mov	w0, #1
	bl	read0
	b	.LBB486_6
.LBB486_5:                              // %"$6"
	bl	rdList
.LBB486_6:                              // %"$4"
	mov	x20, x0
.LBB486_7:                              // %"$4"
	str	x27, [x24, #80]
	str	x26, [x25, :lo12:($Get)]
	str	w23, [x22, :lo12:($Chr)]
	ldur	x8, [x29, #-8]
	str	x8, [x24]
	mov	x0, x20
	mov	sp, x29
	ldp	x20, x19, [sp, #80]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #64]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #48]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #32]             // 16-byte Folded Reload
	ldp	x28, x27, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #96             // 16-byte Folded Reload
	ret
.LBB486_8:                              // %"$7"
	mov	x0, x19
	mov	w1, wzr
	bl	token
	cbz	x0, .LBB486_12
// %bb.9:                               // %"$9"
	adrp	x21, SymTab+8
	add	x21, x21, :lo12:SymTab+8
	mov	x1, x21
	bl	cons
	mov	x20, x0
	adrp	x8, env
	ldr	x9, [x8, :lo12:env]
	mov	x10, sp
	sub	x11, x10, #16                   // =16
	mov	sp, x11
	lsr	x12, x0, #32
	lsr	x13, x9, #32
	stp	w20, w12, [x10, #-16]
	stp	w9, w13, [x10, #-8]
	mov	x28, x0
	str	x11, [x8, :lo12:env]
.LBB486_10:                             // %"$11"
                                        // =>This Inner Loop Header: Depth=1
	mov	x0, x19
	mov	w1, wzr
	bl	token
	cbz	x0, .LBB486_7
// %bb.11:                              // %"$12"
                                        //   in Loop: Header=BB486_10 Depth=1
	mov	x1, x21
	bl	cons
	lsr	x8, x0, #32
	stp	w0, w8, [x28, #8]
	mov	x28, x0
	b	.LBB486_10
.LBB486_12:
	adrp	x20, SymTab+8
	add	x20, x20, :lo12:SymTab+8
	b	.LBB486_7
.Lfunc_end486:
	.size	parse, .Lfunc_end486-parse
	.cfi_endproc
                                        // -- End function
	.globl	token                           // -- Begin function token
	.p2align	4
	.type	token,@function
token:                                  // @token
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-80]!           // 16-byte Folded Spill
	str	x25, [sp, #16]                  // 8-byte Folded Spill
	stp	x24, x23, [sp, #32]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #48]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #64]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 80
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -64
	.cfi_offset w30, -72
	.cfi_offset w29, -80
	mov	w19, w1
	mov	x20, x0
	adrp	x21, ($Chr)
	ldr	w8, [x21, :lo12:($Chr)]
	cbnz	w8, .LBB487_2
// %bb.1:                               // %"$2"
	adrp	x8, ($Get)
	ldr	x8, [x8, :lo12:($Get)]
	blr	x8
.LBB487_2:                              // %"$3"
	mov	w0, w19
	bl	skipc
	tbnz	w0, #31, .LBB487_6
// %bb.3:                               // %"$5"
	mov	w19, w0
	cmp	w0, #34                         // =34
	b.ne	.LBB487_7
// %bb.4:                               // %"$8"
	adrp	x22, ($Get)
	ldr	x8, [x22, :lo12:($Get)]
	blr	x8
	cmp	w0, #34                         // =34
	b.ne	.LBB487_13
// %bb.5:                               // %"$11"
	ldr	x8, [x22, :lo12:($Get)]
	blr	x8
	b	.LBB487_18
.LBB487_6:
	mov	x19, xzr
	b	.LBB487_42
.LBB487_7:                              // %"$7"
	cmp	w19, #57                        // =57
	b.gt	.LBB487_19
// %bb.8:                               // %"$20"
	cmp	w19, #47                        // =47
	cset	w8, gt
	cbnz	w8, .LBB487_20
.LBB487_9:                              // %"$21"
	mov	x0, xzr
	mov	x1, x20
	bl	xName
	mov	x20, x0
	bl	bufSize
	add	x8, x0, #15                     // =15
	and	x8, x8, #0xfffffffffffffff0
	mov	x9, sp
	sub	x1, x9, x8
	mov	sp, x1
	mov	x0, x20
	bl	bufString
	mov	x20, x0
	cmp	w19, #43                        // =43
	b.eq	.LBB487_11
// %bb.10:                              // %"$31"
	cmp	w19, #45                        // =45
	b.ne	.LBB487_25
.LBB487_11:
	mov	w8, #1
	cbz	w8, .LBB487_29
.LBB487_12:                             // %"$41"
	mov	w0, w19
	bl	getChar
	bl	mkChar
	mov	x19, x0
	adrp	x8, ($Get)
	ldr	x8, [x8, :lo12:($Get)]
	blr	x8
	b	.LBB487_42
.LBB487_13:                             // %"$10"
	bl	testEsc
	tbz	w0, #0, .LBB487_18
// %bb.14:                              // %"$12"
	ldr	w0, [x21, :lo12:($Chr)]
	bl	mkChar
	adrp	x20, SymTab+8
	add	x20, x20, :lo12:SymTab+8
	mov	x1, x20
	bl	cons
	mov	x19, x0
	adrp	x23, env
	ldr	x8, [x23, :lo12:env]
	mov	x9, sp
	sub	x24, x9, #16                    // =16
	mov	sp, x24
	lsr	x10, x0, #32
	lsr	x11, x8, #32
	stp	w19, w10, [x9, #-16]
	stp	w8, w11, [x9, #-8]
	mov	x25, x0
	str	x24, [x23, :lo12:env]
.LBB487_15:                             // %"$14"
                                        // =>This Inner Loop Header: Depth=1
	ldr	x8, [x22, :lo12:($Get)]
	blr	x8
	cmp	w0, #34                         // =34
	b.eq	.LBB487_23
// %bb.16:                              // %"$15"
                                        //   in Loop: Header=BB487_15 Depth=1
	bl	testEsc
	tbz	w0, #0, .LBB487_24
// %bb.17:                              // %"$18"
                                        //   in Loop: Header=BB487_15 Depth=1
	ldr	w0, [x21, :lo12:($Chr)]
	bl	mkChar
	mov	x1, x20
	bl	cons
	lsr	x8, x0, #32
	stp	w0, w8, [x25, #8]
	mov	x25, x0
	b	.LBB487_15
.LBB487_18:
	adrp	x19, SymTab+8
	add	x19, x19, :lo12:SymTab+8
	b	.LBB487_42
.LBB487_19:
	mov	w8, wzr
	cbz	w8, .LBB487_9
.LBB487_20:                             // %"$22"
	mov	x8, sp
	sub	x20, x8, #32                    // =32
	mov	sp, x20
	stur	wzr, [x8, #-12]
	adrp	x21, env
	ldr	x9, [x21, :lo12:env]
	mov	w10, #4
	mov	w11, #2
	mov	x12, x20
	stp	w10, wzr, [x8, #-32]
	str	w11, [x12, #16]!
	lsr	x10, x9, #32
	stp	w9, w10, [x8, #-8]
	str	x12, [x21, :lo12:env]
	adrp	x22, ($Get)
	mov	w23, #1
.LBB487_21:                             // %"$23"
                                        // =>This Inner Loop Header: Depth=1
	mov	w0, w19
	mov	x1, x20
	bl	byteSym
	ldr	x8, [x22, :lo12:($Get)]
	blr	x8
	mov	w19, w0
	cmp	w0, #57                         // =57
	cset	w8, gt
	cmp	w0, #48                         // =48
	csel	w8, w23, w8, lt
	cmp	w0, #46                         // =46
	csel	w8, wzr, w8, eq
	cbz	w8, .LBB487_21
// %bb.22:                              // %"$29"
	ldp	w0, w8, [x20, #16]
	bfi	x0, x8, #32, #32
	adrp	x8, SymTab+488
	ldr	x8, [x8, :lo12:SymTab+488]
	lsr	x1, x8, #4
	mov	w2, #46
	mov	w3, wzr
	bl	symToNum
	mov	x19, x0
	ldp	w9, w8, [x20, #24]
	bfi	x9, x8, #32, #32
	str	x9, [x21, :lo12:env]
	b	.LBB487_42
.LBB487_23:                             // %"$17"
	ldr	x8, [x22, :lo12:($Get)]
	blr	x8
.LBB487_24:                             // %"$16"
	ldp	w9, w8, [x24, #8]
	bfi	x9, x8, #32, #32
	str	x9, [x23, :lo12:env]
	b	.LBB487_42
.LBB487_25:                             // %"$32"
	cmp	w19, #92                        // =92
	b.eq	.LBB487_28
// %bb.26:                              // %"$34"
	cmp	w19, #123                       // =123
	cset	w8, lt
	cmp	w19, #96                        // =96
	cset	w9, gt
	and	w8, w8, w9
	tbnz	w8, #0, .LBB487_28
// %bb.27:                              // %"$37"
	cmp	w19, #91                        // =91
	cset	w8, lt
	cmp	w19, #64                        // =64
	cset	w9, gt
	and	w8, w8, w9
	tbz	w8, #0, .LBB487_43
.LBB487_28:
	mov	w8, #1
	eor	w8, w8, #0x1
	cbnz	w8, .LBB487_12
.LBB487_29:                             // %"$42"
	cmp	w19, #92                        // =92
	b.ne	.LBB487_31
// %bb.30:                              // %"$44"
	adrp	x8, ($Get)
	ldr	x8, [x8, :lo12:($Get)]
	blr	x8
.LBB487_31:                             // %"$45"
	mov	x8, sp
	sub	x21, x8, #32                    // =32
	mov	sp, x21
	stur	wzr, [x8, #-12]
	adrp	x22, env
	ldr	x9, [x22, :lo12:env]
	mov	w10, #4
	mov	w11, #2
	mov	x12, x21
	stp	w10, wzr, [x8, #-32]
	str	w11, [x12, #16]!
	lsr	x10, x9, #32
	stp	w9, w10, [x8, #-8]
	str	x12, [x22, :lo12:env]
	adrp	x23, ($Get)
	mov	w24, #1
.LBB487_32:                             // %"$46"
                                        // =>This Inner Loop Header: Depth=1
	mov	w0, w19
	mov	x1, x21
	bl	byteSym
	ldr	x8, [x23, :lo12:($Get)]
	blr	x8
	mov	w19, w0
	cmp	w0, #92                         // =92
	b.eq	.LBB487_35
// %bb.33:                              // %"$49"
                                        //   in Loop: Header=BB487_32 Depth=1
	cmp	w19, #123                       // =123
	cset	w8, lt
	cmp	w19, #96                        // =96
	cset	w9, gt
	and	w8, w8, w9
	tbnz	w8, #0, .LBB487_35
// %bb.34:                              // %"$52"
                                        //   in Loop: Header=BB487_32 Depth=1
	cmp	w19, #91                        // =91
	cset	w8, lt
	cmp	w19, #64                        // =64
	cset	w9, gt
	and	w8, w8, w9
	tbz	w8, #0, .LBB487_37
.LBB487_35:                             //   in Loop: Header=BB487_32 Depth=1
	mov	w8, #1
	cbz	w8, .LBB487_38
.LBB487_36:                             //   in Loop: Header=BB487_32 Depth=1
	mov	w8, wzr
	tbz	w8, #0, .LBB487_39
	b	.LBB487_41
.LBB487_37:                             // %"$55"
                                        //   in Loop: Header=BB487_32 Depth=1
	mov	x0, x20
	mov	w1, w19
	bl	strchr2
	cmp	x0, #0                          // =0
	cset	w8, ne
	cbnz	w8, .LBB487_36
.LBB487_38:                             // %"$56"
                                        //   in Loop: Header=BB487_32 Depth=1
	cmp	w19, #57                        // =57
	cset	w8, gt
	cmp	w19, #48                        // =48
	csel	w8, w24, w8, lt
	tbnz	w8, #0, .LBB487_41
.LBB487_39:                             // %"$59"
                                        //   in Loop: Header=BB487_32 Depth=1
	cmp	w19, #92                        // =92
	b.ne	.LBB487_32
// %bb.40:                              // %"$61"
                                        //   in Loop: Header=BB487_32 Depth=1
	ldr	x8, [x23, :lo12:($Get)]
	blr	x8
	b	.LBB487_32
.LBB487_41:                             // %"$60"
	ldp	w0, w8, [x21, #16]
	bfi	x0, x8, #32, #32
	bl	requestSym
	mov	x19, x0
	ldp	w9, w8, [x21, #24]
	bfi	x9, x8, #32, #32
	str	x9, [x22, :lo12:env]
.LBB487_42:                             // %"$4"
	mov	x0, x19
	mov	sp, x29
	ldp	x20, x19, [sp, #64]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #48]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #32]             // 16-byte Folded Reload
	ldr	x25, [sp, #16]                  // 8-byte Folded Reload
	ldp	x29, x30, [sp], #80             // 16-byte Folded Reload
	ret
.LBB487_43:                             // %"$40"
	mov	x0, x20
	mov	w1, w19
	bl	strchr2
	cmp	x0, #0                          // =0
	cset	w8, ne
	eor	w8, w8, #0x1
	cbz	w8, .LBB487_29
	b	.LBB487_12
.Lfunc_end487:
	.size	token, .Lfunc_end487-token
	.cfi_endproc
                                        // -- End function
	.globl	skipc                           // -- Begin function skipc
	.p2align	4
	.type	skipc,@function
skipc:                                  // @skipc
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-32]!                // 8-byte Folded Spill
	stp	x20, x19, [sp, #16]             // 16-byte Folded Spill
	.cfi_def_cfa_offset 32
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w30, -32
	mov	w19, w0
	adrp	x8, ($Chr)
	ldr	w0, [x8, :lo12:($Chr)]
	adrp	x20, ($Get)
	cmp	w0, #32                         // =32
	b.gt	.LBB488_3
.LBB488_1:                              // %"$4"
                                        // =>This Inner Loop Header: Depth=1
	ldr	x8, [x20, :lo12:($Get)]
	blr	x8
	tbnz	w0, #31, .LBB488_7
// %bb.2:                               // %"$3"
                                        //   in Loop: Header=BB488_1 Depth=1
	cmp	w0, #32                         // =32
	b.le	.LBB488_1
.LBB488_3:                              // %"$5"
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB488_4 Depth 2
	cmp	w0, w19
	b.ne	.LBB488_7
.LBB488_4:                              // %"$10"
                                        //   Parent Loop BB488_3 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	x8, [x20, :lo12:($Get)]
	blr	x8
	cmp	w0, #10                         // =10
	b.eq	.LBB488_6
// %bb.5:                               // %"$11"
                                        //   in Loop: Header=BB488_4 Depth=2
	tbz	w0, #31, .LBB488_4
	b	.LBB488_7
.LBB488_6:                              // %"$12"
                                        //   in Loop: Header=BB488_3 Depth=1
	ldr	x8, [x20, :lo12:($Get)]
	blr	x8
	cmp	w0, #32                         // =32
	b.le	.LBB488_1
	b	.LBB488_3
.LBB488_7:                              // %"$6"
	ldp	x20, x19, [sp, #16]             // 16-byte Folded Reload
	ldr	x30, [sp], #32                  // 8-byte Folded Reload
	ret
.Lfunc_end488:
	.size	skipc, .Lfunc_end488-skipc
	.cfi_endproc
                                        // -- End function
	.globl	mkChar                          // -- Begin function mkChar
	.p2align	4
	.type	mkChar,@function
mkChar:                                 // @mkChar
	.cfi_startproc
// %bb.0:                               // %"$1"
                                        // kill: def $w0 killed $w0 def $x0
	cmp	w0, #127                        // =127
	b.gt	.LBB489_2
// %bb.1:                               // %"$4"
	sxtw	x8, w0
	b	.LBB489_9
.LBB489_2:                              // %"$3"
	cmp	w0, #272, lsl #12               // =1114112
	b.ne	.LBB489_4
// %bb.3:
	mov	w8, #255
	b	.LBB489_9
.LBB489_4:                              // %"$5"
	cmp	w0, #2047                       // =2047
	b.gt	.LBB489_6
// %bb.5:                               // %"$8"
	ubfx	w8, w0, #6, #5
	and	w9, w0, #0x3f
	bfi	w8, w9, #8, #6
	mov	w9, #32960
	orr	w8, w8, w9
	b	.LBB489_9
.LBB489_6:                              // %"$7"
	cmp	w0, #16, lsl #12                // =65536
	b.ge	.LBB489_8
// %bb.7:                               // %"$10"
	ubfx	w8, w0, #12, #4
	ubfx	w9, w0, #6, #6
	bfi	w8, w9, #8, #6
	and	w9, w0, #0x3f
	bfi	w8, w9, #16, #6
	mov	w9, #32992
	movk	w9, #128, lsl #16
	orr	w8, w8, w9
	b	.LBB489_9
.LBB489_8:                              // %"$9"
	ubfx	w8, w0, #18, #3
	ubfx	w9, w0, #12, #6
	bfi	w8, w9, #8, #6
	ubfx	w9, w0, #6, #6
	bfi	w8, w9, #16, #6
	mov	w9, #33008
	movk	w9, #128, lsl #16
	orr	w8, w8, w9
	and	x9, x0, #0x3f
	bfi	x8, x9, #24, #6
	orr	x8, x8, #0x80000000
.LBB489_9:                              // %"$2"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	mov	w0, #2
	bfi	x0, x8, #4, #60
	bl	consStr
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end489:
	.size	mkChar, .Lfunc_end489-mkChar
	.cfi_endproc
                                        // -- End function
	.globl	putString                       // -- Begin function putString
	.p2align	4
	.type	putString,@function
putString:                              // @putString
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	adrp	x8, ($StrP)
	ldr	x1, [x8, :lo12:($StrP)]
	bl	byteSym
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end490:
	.size	putString, .Lfunc_end490-putString
	.cfi_endproc
                                        // -- End function
	.globl	pr                              // -- Begin function pr
	.p2align	4
	.type	pr,@function
pr:                                     // @pr
	.cfi_startproc
// %bb.0:                               // %"$1"
	adrp	x8, putChr
	add	x8, x8, :lo12:putChr
	adrp	x9, ($PutBin)
	str	x8, [x9, :lo12:($PutBin)]
	b	binPrint
.Lfunc_end491:
	.size	pr, .Lfunc_end491-pr
	.cfi_endproc
                                        // -- End function
	.globl	binPrint                        // -- Begin function binPrint
	.p2align	4
	.type	binPrint,@function
binPrint:                               // @binPrint
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-80]!           // 16-byte Folded Spill
	stp	x26, x25, [sp, #16]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #32]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #48]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #64]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 80
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w30, -72
	.cfi_offset w29, -80
	mov	x19, x0
	tbz	w19, #1, .LBB492_3
// %bb.1:                               // %"$4"
	lsr	x1, x19, #3
	mov	w0, #4
.LBB492_2:                              // %"$2"
	bl	prCnt
	b	.LBB492_37
.LBB492_3:                              // %"$3"
	tbz	w19, #2, .LBB492_7
// %bb.4:                               // %"$6"
	and	x8, x19, #0xfffffffffffffff7
	mov	w21, #8
	mov	x10, x8
.LBB492_5:                              // %"$7"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w9, w11, [x10, #4]
	bfi	x9, x11, #32, #32
	tbnz	w9, #1, .LBB492_9
// %bb.6:                               // %"$8"
                                        //   in Loop: Header=BB492_5 Depth=1
	add	x21, x21, #8                    // =8
	mov	x10, x9
	b	.LBB492_5
.LBB492_7:                              // %"$5"
	adrp	x22, SymTab+8
	add	x22, x22, :lo12:SymTab+8
	cmp	x19, x22
	b.ne	.LBB492_25
.LBB492_8:                              // %"$35"
	adrp	x8, ($PutBin)
	ldr	x8, [x8, :lo12:($PutBin)]
	b	.LBB492_35
.LBB492_9:                              // %"$10"
	ldp	w10, w11, [x10, #-4]
	bfi	x10, x11, #32, #32
	lsr	x9, x9, #4
	cmn	x10, x10
	add	x9, x9, x9
	cinc	x9, x9, hs
	cbz	x9, .LBB492_11
.LBB492_10:                             // %"$13"
                                        // =>This Inner Loop Header: Depth=1
	add	x21, x21, #1                    // =1
	lsr	x9, x9, #8
	cbnz	x9, .LBB492_10
.LBB492_11:                             // %"$12"
	subs	x20, x21, #63                   // =63
	ldp	w9, w10, [x8, #-4]
	bfi	x9, x10, #32, #32
	b.mi	.LBB492_13
// %bb.12:                              // %"$16"
	mov	w21, #63
.LBB492_13:                             // %"$17"
	ldp	w22, w10, [x8, #4]
	bfi	x22, x10, #32, #32
	ror	x8, x19, #4
	cmn	x8, x8
	cset	w8, hs
	adds	x9, x9, x9
	cset	w10, hs
	adds	x19, x9, x8
	cset	w8, hs
	orr	w24, w10, w8
	adrp	x23, ($PutBin)
	ldr	x8, [x23, :lo12:($PutBin)]
	lsl	w0, w21, #2
	blr	x8
	mov	w25, #8
	b	.LBB492_15
.LBB492_14:                             // %"$33"
                                        //   in Loop: Header=BB492_15 Depth=1
	ldr	x8, [x23, :lo12:($PutBin)]
	mov	w0, w20
	blr	x8
	mov	x21, x20
	mov	x20, x26
.LBB492_15:                             // %"$19"
                                        // =>This Inner Loop Header: Depth=1
	ldr	x8, [x23, :lo12:($PutBin)]
	mov	w0, w19
	blr	x8
	subs	x25, x25, #1                    // =1
	b.eq	.LBB492_17
// %bb.16:                              // %"$20"
                                        //   in Loop: Header=BB492_15 Depth=1
	lsr	x19, x19, #8
	subs	x21, x21, #1                    // =1
	b.ne	.LBB492_15
	b	.LBB492_21
.LBB492_17:                             // %"$21"
                                        //   in Loop: Header=BB492_15 Depth=1
	tbz	w22, #1, .LBB492_19
// %bb.18:                              // %"$23"
                                        //   in Loop: Header=BB492_15 Depth=1
	lsr	x8, x22, #4
	b	.LBB492_20
.LBB492_19:                             // %"$24"
                                        //   in Loop: Header=BB492_15 Depth=1
	ldp	w8, w9, [x22, #-4]
	bfi	x8, x9, #32, #32
	ldp	w22, w9, [x22, #4]
	bfi	x22, x9, #32, #32
.LBB492_20:                             // %"$25"
                                        //   in Loop: Header=BB492_15 Depth=1
	adds	x8, x8, x8
	cset	w9, hs
	and	x10, x24, #0x1
	adds	x19, x8, x10
	cset	w8, hs
	orr	w24, w9, w8
	mov	w25, #8
	subs	x21, x21, #1                    // =1
	b.ne	.LBB492_15
.LBB492_21:                             // %"$27"
                                        //   in Loop: Header=BB492_15 Depth=1
	tbnz	x20, #63, .LBB492_37
// %bb.22:                              // %"$28"
                                        //   in Loop: Header=BB492_15 Depth=1
	cbz	x20, .LBB492_34
// %bb.23:                              // %"$30"
                                        //   in Loop: Header=BB492_15 Depth=1
	subs	x26, x20, #255                  // =255
	b.mi	.LBB492_14
// %bb.24:                              // %"$32"
                                        //   in Loop: Header=BB492_15 Depth=1
	mov	w20, #255
	b	.LBB492_14
.LBB492_25:                             // %"$34"
	tst	x19, #0xf
	b.eq	.LBB492_38
// %bb.26:                              // %"$36"
	ldp	w20, w8, [x19, #-8]
	bfi	x20, x8, #32, #32
	tbz	w20, #3, .LBB492_32
// %bb.27:                              // %"$56"
	and	x19, x20, #0xfffffffffffffff7
	tst	x19, #0x6
	b.ne	.LBB492_29
.LBB492_28:                             // %"$58"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w19, w8, [x19, #8]
	bfi	x19, x8, #32, #32
	tst	x19, #0x6
	b.eq	.LBB492_28
.LBB492_29:                             // %"$59"
	adrp	x8, ($Extn)
	ldr	w20, [x8, :lo12:($Extn)]
	cbz	w20, .LBB492_31
// %bb.30:                              // %"$60"
	mov	x0, x19
	bl	objFile
	sub	w8, w0, w20
	and	x8, x8, #0xffff
	lsl	x9, x8, #24
	mov	x10, #-4486007441326081
	movk	x10, #255, lsl #16
	and	x10, x19, x10
	orr	x8, x9, x8, lsl #36
	and	x8, x8, #0xfffff000ffffffff
	orr	x19, x10, x8
.LBB492_31:                             // %"$61"
	ubfx	x1, x19, #4, #58
	mov	w0, #7
	b	.LBB492_2
.LBB492_32:                             // %"$62"
                                        // =>This Inner Loop Header: Depth=1
	tst	x20, #0x6
	b.ne	.LBB492_49
// %bb.33:                              // %"$63"
                                        //   in Loop: Header=BB492_32 Depth=1
	ldp	w20, w8, [x20, #8]
	bfi	x20, x8, #32, #32
	b	.LBB492_32
.LBB492_34:                             // %"$31"
	ldr	x8, [x23, :lo12:($PutBin)]
.LBB492_35:                             // %"$2"
	mov	w0, wzr
.LBB492_36:                             // %"$2"
	blr	x8
.LBB492_37:                             // %"$2"
	mov	sp, x29
	ldp	x20, x19, [sp, #64]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #48]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #32]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #80             // 16-byte Folded Reload
	ret
.LBB492_38:                             // %"$37"
	adrp	x21, ($PutBin)
	ldr	x8, [x21, :lo12:($PutBin)]
	mov	w0, #1
	blr	x8
	mov	x0, x19
	bl	circ
	cbz	x0, .LBB492_46
// %bb.39:                              // %"$39"
	mov	x20, x0
	mov	x22, x19
.LBB492_40:                             // %"$47"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w0, w8, [x22]
	bfi	x0, x8, #32, #32
	bl	binPrint
	ldp	w22, w8, [x22, #8]
	bfi	x22, x8, #32, #32
	cmp	x20, x22
	b.ne	.LBB492_40
// %bb.41:                              // %"$49"
	ldr	x8, [x21, :lo12:($PutBin)]
	mov	w0, #2
	blr	x8
	cmp	x20, x19
	b.eq	.LBB492_45
// %bb.42:                              // %"$50"
	ldr	x8, [x21, :lo12:($PutBin)]
	mov	w0, #1
	blr	x8
.LBB492_43:                             // %"$52"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w0, w8, [x22]
	bfi	x0, x8, #32, #32
	bl	binPrint
	ldp	w22, w8, [x22, #8]
	bfi	x22, x8, #32, #32
	cmp	x20, x22
	b.ne	.LBB492_43
// %bb.44:                              // %"$54"
	ldr	x8, [x21, :lo12:($PutBin)]
	mov	w0, #2
	blr	x8
.LBB492_45:                             // %"$44"
	ldr	x8, [x21, :lo12:($PutBin)]
	mov	w0, #3
	b	.LBB492_36
.LBB492_46:                             // %"$41"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w0, w8, [x19]
	bfi	x0, x8, #32, #32
	bl	binPrint
	ldp	w19, w8, [x19, #8]
	bfi	x19, x8, #32, #32
	cmp	x19, x22
	b.eq	.LBB492_45
// %bb.47:                              // %"$42"
                                        //   in Loop: Header=BB492_46 Depth=1
	tst	x19, #0xf
	b.eq	.LBB492_46
// %bb.48:                              // %"$46"
	ldr	x8, [x21, :lo12:($PutBin)]
	mov	w0, #2
	blr	x8
	mov	x0, x19
	bl	binPrint
	b	.LBB492_37
.LBB492_49:                             // %"$64"
	cmp	x20, #2                         // =2
	b.eq	.LBB492_8
// %bb.50:                              // %"$65"
	adrp	x8, env+88
	ldr	x2, [x8, :lo12:env+88]
	mov	x0, x19
	mov	x1, x20
	bl	findSym
	tbz	w0, #0, .LBB492_52
// %bb.51:
	mov	w0, #1
	b	.LBB492_53
.LBB492_52:                             // %"$68"
	mov	w0, #2
.LBB492_53:                             // %"$69"
	tbz	w20, #1, .LBB492_55
// %bb.54:                              // %"$70"
	orr	w0, w0, #0x4
	lsr	x1, x20, #4
	b	.LBB492_2
.LBB492_55:                             // %"$73.preheader"
	mov	w8, #8
	mov	x9, x20
.LBB492_56:                             // %"$73"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w9, w10, [x9, #4]
	bfi	x9, x10, #32, #32
	tbz	w9, #2, .LBB492_58
// %bb.57:                              // %"$74"
                                        //   in Loop: Header=BB492_56 Depth=1
	add	x8, x8, #8                      // =8
	b	.LBB492_56
.LBB492_58:                             // %"$75"
	lsr	x9, x9, #4
	cbz	x9, .LBB492_60
.LBB492_59:                             // %"$77"
                                        // =>This Inner Loop Header: Depth=1
	lsr	x9, x9, #8
	add	x8, x8, #1                      // =1
	cbnz	x9, .LBB492_59
.LBB492_60:                             // %"$78"
	mov	x9, sp
	sub	x19, x9, #16                    // =16
	mov	sp, x19
	stp	wzr, wzr, [x9, #-16]
	lsr	x10, x20, #32
	subs	x21, x8, #63                    // =63
	mov	w11, #63
	csel	x23, x8, x11, mi
	bfi	w0, w23, #2, #30
	adrp	x22, ($PutBin)
	ldr	x8, [x22, :lo12:($PutBin)]
	stp	w20, w10, [x9, #-8]
	blr	x8
	b	.LBB492_62
.LBB492_61:                             // %"$90"
                                        //   in Loop: Header=BB492_62 Depth=1
	ldr	x8, [x22, :lo12:($PutBin)]
	mov	w0, w21
	blr	x8
	mov	x23, x21
	mov	x21, x20
.LBB492_62:                             // %"$82"
                                        // =>This Inner Loop Header: Depth=1
	mov	x0, x19
	bl	symByte
	ldr	x8, [x22, :lo12:($PutBin)]
	blr	x8
	subs	x23, x23, #1                    // =1
	b.ne	.LBB492_62
// %bb.63:                              // %"$84"
                                        //   in Loop: Header=BB492_62 Depth=1
	tbnz	x21, #63, .LBB492_37
// %bb.64:                              // %"$85"
                                        //   in Loop: Header=BB492_62 Depth=1
	cbz	x21, .LBB492_67
// %bb.65:                              // %"$87"
                                        //   in Loop: Header=BB492_62 Depth=1
	subs	x20, x21, #255                  // =255
	b.mi	.LBB492_61
// %bb.66:                              // %"$89"
                                        //   in Loop: Header=BB492_62 Depth=1
	mov	w21, #255
	b	.LBB492_61
.LBB492_67:                             // %"$88"
	ldr	x8, [x22, :lo12:($PutBin)]
	b	.LBB492_35
.Lfunc_end492:
	.size	binPrint, .Lfunc_end492-binPrint
	.cfi_endproc
                                        // -- End function
	.globl	prCnt                           // -- Begin function prCnt
	.p2align	4
	.type	prCnt,@function
prCnt:                                  // @prCnt
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-32]!                // 8-byte Folded Spill
	stp	x20, x19, [sp, #16]             // 16-byte Folded Spill
	.cfi_def_cfa_offset 32
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w30, -32
	mov	x19, x1
	mov	x8, x1
	lsr	x8, x8, #8
	cbz	x8, .LBB493_2
.LBB493_1:                              // %"$3"
                                        // =>This Inner Loop Header: Depth=1
	add	w0, w0, #4                      // =4
	lsr	x8, x8, #8
	cbnz	x8, .LBB493_1
.LBB493_2:                              // %"$4"
	adrp	x20, ($PutBin)
	ldr	x8, [x20, :lo12:($PutBin)]
	blr	x8
.LBB493_3:                              // %"$5"
                                        // =>This Inner Loop Header: Depth=1
	ldr	x8, [x20, :lo12:($PutBin)]
	mov	w0, w19
	blr	x8
	lsr	x19, x19, #8
	cbnz	x19, .LBB493_3
// %bb.4:                               // %"$7"
	ldp	x20, x19, [sp, #16]             // 16-byte Folded Reload
	ldr	x30, [sp], #32                  // 8-byte Folded Reload
	ret
.Lfunc_end493:
	.size	prCnt, .Lfunc_end493-prCnt
	.cfi_endproc
                                        // -- End function
	.globl	findSym                         // -- Begin function findSym
	.p2align	4
	.type	findSym,@function
findSym:                                // @findSym
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x30, x21, [sp, #-32]!           // 16-byte Folded Spill
	stp	x20, x19, [sp, #16]             // 16-byte Folded Spill
	.cfi_def_cfa_offset 32
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w30, -32
	mov	x19, x2
	mov	x20, x1
	mov	x21, x0
	tst	x19, #0xf
	b.ne	.LBB494_3
.LBB494_1:                              // %"$3"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w9, w8, [x19]
	bfi	x9, x8, #32, #32
	ldp	w9, w8, [x9]
	bfi	x9, x8, #32, #32
	ldp	w1, w8, [x9, #8]
	bfi	x1, x8, #32, #32
	mov	x0, x20
	bl	isIntern
	cmp	x21, x0
	b.eq	.LBB494_4
// %bb.2:                               // %"$6"
                                        //   in Loop: Header=BB494_1 Depth=1
	ldp	w19, w8, [x19, #8]
	bfi	x19, x8, #32, #32
	tst	x19, #0xf
	b.eq	.LBB494_1
.LBB494_3:
	mov	w0, wzr
	b	.LBB494_5
.LBB494_4:
	mov	w0, #1
.LBB494_5:                              // %"$4"
	ldp	x20, x19, [sp, #16]             // 16-byte Folded Reload
	ldp	x30, x21, [sp], #32             // 16-byte Folded Reload
	ret
.Lfunc_end494:
	.size	findSym, .Lfunc_end494-findSym
	.cfi_endproc
                                        // -- End function
	.globl	getBinary                       // -- Begin function getBinary
	.p2align	4
	.type	getBinary,@function
getBinary:                              // @getBinary
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	adrp	x8, ($Get)
	ldr	x8, [x8, :lo12:($Get)]
	blr	x8
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end495:
	.size	getBinary, .Lfunc_end495-getBinary
	.cfi_endproc
                                        // -- End function
	.globl	twice                           // -- Begin function twice
	.p2align	4
	.type	twice,@function
twice:                                  // @twice
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	tbz	w0, #1, .LBB496_3
// %bb.1:                               // %"$2"
	adds	x8, x0, x0
	b.lo	.LBB496_4
// %bb.2:                               // %"$5"
	lsr	x0, x0, #3
	bl	boxNum
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.LBB496_3:                              // %"$3"
	bl	twiceBig
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.LBB496_4:                              // %"$6"
	eor	x0, x8, #0x6
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end496:
	.size	twice, .Lfunc_end496-twice
	.cfi_endproc
                                        // -- End function
	.globl	mulu                            // -- Begin function mulu
	.p2align	4
	.type	mulu,@function
mulu:                                   // @mulu
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-96]!           // 16-byte Folded Spill
	stp	x28, x27, [sp, #16]             // 16-byte Folded Spill
	stp	x26, x25, [sp, #32]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #48]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #64]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #80]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	mov	x19, x0
	cmp	x0, #2                          // =2
	b.eq	.LBB497_41
// %bb.1:                               // %"$3"
	mov	x21, x1
	tbz	w19, #1, .LBB497_5
// %bb.2:                               // %"$6"
	lsr	x22, x19, #4
	tbz	w21, #1, .LBB497_7
// %bb.3:                               // %"$7"
	lsr	x9, x21, #4
	umulh	x8, x22, x9
	mul	x0, x22, x9
	mov	w9, #1
	tst	x0, #0xf000000000000000
	cset	w10, ne
	cmp	x8, #0                          // =0
	csel	w9, w9, w10, ne
	cbz	w9, .LBB497_17
// %bb.4:                               // %"$12"
	mov	w1, #2
	bfi	x1, x8, #4, #60
	bl	consNum
	mov	x19, x0
	b	.LBB497_41
.LBB497_5:                              // %"$5"
	cmp	x21, #2                         // =2
	b.ne	.LBB497_8
// %bb.6:
	mov	x19, x21
	b	.LBB497_41
.LBB497_7:
	mov	x19, x21
	b	.LBB497_10
.LBB497_8:                              // %"$23"
	tbz	w21, #1, .LBB497_18
// %bb.9:                               // %"$26"
	lsr	x22, x21, #4
.LBB497_10:                             // %"$-1"
	mov	x21, x19
	ldp	w9, w8, [x19, #-4]
	bfi	x9, x8, #32, #32
	umulh	x23, x22, x9
	mul	x0, x22, x9
	bl	boxNum
	mov	x19, x0
	adrp	x25, env
	add	x25, x25, :lo12:env
	ldr	x8, [x25]
	mov	x9, sp
	sub	x20, x9, #16                    // =16
	mov	sp, x20
	lsr	x10, x0, #32
	lsr	x11, x8, #32
	mov	x0, x20
	stp	w19, w10, [x9, #-16]
	mov	x24, x19
	stp	w8, w11, [x9, #-8]
.LBB497_11:                             // %"$15"
                                        // =>This Inner Loop Header: Depth=1
	lsr	x8, x0, #32
	stp	w0, w8, [x25]
	ldp	w21, w8, [x21, #4]
	bfi	x21, x8, #32, #32
	tbz	w21, #2, .LBB497_13
// %bb.12:                              // %"$16"
                                        //   in Loop: Header=BB497_11 Depth=1
	ldp	w9, w8, [x21, #-4]
	bfi	x9, x8, #32, #32
	mul	x8, x22, x9
	adds	x0, x8, x23
	umulh	x8, x22, x9
	cinc	x23, x8, hs
	add	x25, x24, #4                    // =4
	bl	boxNum
	mov	x24, x0
	b	.LBB497_11
.LBB497_13:                             // %"$17"
	lsr	x8, x21, #4
	umulh	x9, x22, x8
	mul	x8, x22, x8
	adds	x0, x8, x23
	cinc	x8, x9, hs
	mov	w9, #1
	tst	x0, #0xf000000000000000
	cset	w10, ne
	cmp	x8, #0                          // =0
	csel	w9, w9, w10, ne
	cbz	w9, .LBB497_15
// %bb.14:                              // %"$20"
	mov	w1, #2
	bfi	x1, x8, #4, #60
	bl	consNum
	mov	x8, x0
	b	.LBB497_16
.LBB497_15:                             // %"$21"
	mov	w8, #2
	bfi	x8, x0, #4, #60
.LBB497_16:                             // %"$22"
	lsr	x9, x8, #32
	stp	w8, w9, [x24, #4]
	ldp	w9, w8, [x20, #8]
	bfi	x9, x8, #32, #32
	adrp	x8, env
	str	x9, [x8, :lo12:env]
	b	.LBB497_41
.LBB497_17:                             // %"$13"
	mov	w19, #2
	bfi	x19, x0, #4, #60
	b	.LBB497_41
.LBB497_18:                             // %"$25"
	mov	x0, xzr
	bl	boxNum
	mov	x20, x0
	adrp	x22, env
	ldr	x8, [x22, :lo12:env]
	mov	x9, sp
	sub	x23, x9, #16                    // =16
	mov	sp, x23
	lsr	x10, x0, #32
	lsr	x11, x8, #32
	stp	w20, w10, [x9, #-16]
	stp	w8, w11, [x9, #-8]
	mov	x24, x0
	str	x23, [x22, :lo12:env]
	b	.LBB497_22
.LBB497_19:                             // %"$37"
                                        //   in Loop: Header=BB497_22 Depth=1
	add	x25, x9, #4                     // =4
.LBB497_20:                             // %"$38"
                                        //   in Loop: Header=BB497_22 Depth=1
	lsr	x9, x8, #32
	stp	w8, w9, [x25]
.LBB497_21:                             // %"$35"
                                        //   in Loop: Header=BB497_22 Depth=1
	ldp	w24, w8, [x24, #4]
	bfi	x24, x8, #32, #32
	ldp	w21, w8, [x21, #4]
	bfi	x21, x8, #32, #32
	tbnz	w21, #1, .LBB497_30
.LBB497_22:                             // %"$27"
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB497_23 Depth 2
	ldp	w10, w8, [x19, #-4]
	ldp	w11, w9, [x21, #-4]
	bfi	x10, x8, #32, #32
	bfi	x11, x9, #32, #32
	ldp	w8, w12, [x24, #-4]
	mul	x9, x10, x11
	bfi	x8, x12, #32, #32
	adds	x8, x9, x8
	cset	w9, hs
	umulh	x26, x10, x11
	mov	x25, x19
	mov	x27, x24
.LBB497_23:                             // %"$28"
                                        //   Parent Loop BB497_22 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	and	x28, x9, #0x1
	stur	w8, [x27, #-4]
	lsr	x8, x8, #32
	str	w8, [x27]
	ldp	w0, w8, [x27, #4]
	bfi	x0, x8, #32, #32
	tbz	w0, #1, .LBB497_25
// %bb.24:                              // %"$29"
                                        //   in Loop: Header=BB497_23 Depth=2
	mov	x0, xzr
	bl	boxNum
	lsr	x8, x0, #32
	stp	w0, w8, [x27, #4]
.LBB497_25:                             // %"$31"
                                        //   in Loop: Header=BB497_23 Depth=2
	add	x8, x26, x28
	ldp	w25, w9, [x25, #4]
	bfi	x25, x9, #32, #32
	tbnz	w25, #1, .LBB497_27
// %bb.26:                              // %"$32"
                                        //   in Loop: Header=BB497_23 Depth=2
	ldp	w10, w9, [x25, #-4]
	bfi	x10, x9, #32, #32
	ldp	w11, w9, [x21, #-4]
	bfi	x11, x9, #32, #32
	ldp	w12, w9, [x0, #-4]
	bfi	x12, x9, #32, #32
	mul	x9, x10, x11
	adds	x9, x9, x12
	umulh	x10, x10, x11
	cinc	x26, x10, hs
	adds	x8, x9, x8
	cset	w9, hs
	mov	x27, x0
	b	.LBB497_23
.LBB497_27:                             // %"$33"
                                        //   in Loop: Header=BB497_22 Depth=1
	lsr	x9, x25, #4
	ldp	w11, w10, [x21, #-4]
	bfi	x11, x10, #32, #32
	umulh	x10, x9, x11
	mul	x9, x9, x11
	mov	x11, x0
	ldr	w12, [x11, #-4]!
	ldr	w13, [x11, #4]
	bfi	x12, x13, #32, #32
	adds	x9, x9, x12
	cinc	x10, x10, hs
	adds	x9, x9, x8
	cinc	x8, x10, hs
	str	w9, [x11]
	lsr	x9, x9, #32
	str	w9, [x11, #4]
	cbz	x8, .LBB497_21
// %bb.28:                              // %"$34"
                                        //   in Loop: Header=BB497_22 Depth=1
	ldp	w9, w10, [x0, #4]
	bfi	x9, x10, #32, #32
	tbz	w9, #1, .LBB497_19
// %bb.29:                              // %"$36"
                                        //   in Loop: Header=BB497_22 Depth=1
	add	x25, x0, #4                     // =4
	mov	x0, x8
	bl	boxNum
	mov	x8, x0
	b	.LBB497_20
.LBB497_30:                             // %"$40"
	lsr	x21, x21, #4
	ldp	w9, w8, [x19, #-4]
	bfi	x9, x8, #32, #32
	umulh	x25, x9, x21
	mul	x8, x9, x21
	ldp	w10, w9, [x24, #-4]
	bfi	x10, x9, #32, #32
	adds	x8, x8, x10
	cset	w9, hs
.LBB497_31:                             // %"$41"
                                        // =>This Inner Loop Header: Depth=1
	and	x26, x9, #0x1
	stur	w8, [x24, #-4]
	lsr	x8, x8, #32
	str	w8, [x24]
	ldp	w0, w8, [x24, #4]
	bfi	x0, x8, #32, #32
	tbz	w0, #1, .LBB497_33
// %bb.32:                              // %"$42"
                                        //   in Loop: Header=BB497_31 Depth=1
	mov	x0, xzr
	bl	boxNum
	lsr	x8, x0, #32
	stp	w0, w8, [x24, #4]
.LBB497_33:                             // %"$44"
                                        //   in Loop: Header=BB497_31 Depth=1
	add	x8, x25, x26
	ldp	w19, w9, [x19, #4]
	bfi	x19, x9, #32, #32
	tbnz	w19, #1, .LBB497_35
// %bb.34:                              // %"$45"
                                        //   in Loop: Header=BB497_31 Depth=1
	ldp	w10, w9, [x19, #-4]
	bfi	x10, x9, #32, #32
	mul	x9, x10, x21
	ldp	w12, w11, [x0, #-4]
	bfi	x12, x11, #32, #32
	adds	x9, x9, x12
	umulh	x10, x10, x21
	cinc	x25, x10, hs
	adds	x8, x9, x8
	cset	w9, hs
	mov	x24, x0
	b	.LBB497_31
.LBB497_35:                             // %"$46"
	lsr	x9, x19, #4
	umulh	x10, x9, x21
	mul	x9, x9, x21
	mov	x11, x0
	ldr	w12, [x11, #-4]!
	ldr	w13, [x11, #4]
	bfi	x12, x13, #32, #32
	adds	x9, x9, x12
	cinc	x10, x10, hs
	adds	x9, x9, x8
	cinc	x8, x10, hs
	str	w9, [x11]
	lsr	x9, x9, #32
	str	w9, [x11, #4]
	cbz	x8, .LBB497_40
// %bb.36:                              // %"$47"
	ldp	w9, w10, [x0, #4]
	bfi	x9, x10, #32, #32
	tbz	w9, #1, .LBB497_38
// %bb.37:                              // %"$49"
	add	x19, x0, #4                     // =4
	mov	x0, x8
	bl	boxNum
	mov	x8, x0
	b	.LBB497_39
.LBB497_38:                             // %"$50"
	add	x19, x9, #4                     // =4
.LBB497_39:                             // %"$51"
	lsr	x9, x8, #32
	stp	w8, w9, [x19]
.LBB497_40:                             // %"$48"
	mov	x0, x20
	bl	zapZero
	mov	x19, x0
	ldp	w9, w8, [x23, #8]
	bfi	x9, x8, #32, #32
	str	x9, [x22, :lo12:env]
.LBB497_41:                             // %"$2"
	mov	x0, x19
	mov	sp, x29
	ldp	x20, x19, [sp, #80]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #64]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #48]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #32]             // 16-byte Folded Reload
	ldp	x28, x27, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #96             // 16-byte Folded Reload
	ret
.Lfunc_end497:
	.size	mulu, .Lfunc_end497-mulu
	.cfi_endproc
                                        // -- End function
	.globl	twiceBig                        // -- Begin function twiceBig
	.p2align	4
	.type	twiceBig,@function
twiceBig:                               // @twiceBig
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-32]!                // 8-byte Folded Spill
	stp	x20, x19, [sp, #16]             // 16-byte Folded Spill
	.cfi_def_cfa_offset 32
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w30, -32
	mov	x19, x0
	mov	x10, x0
	ldr	w8, [x10, #-4]!
	lsl	w13, w8, #1
	ldp	w12, w9, [x10, #4]
	bfi	x8, x12, #32, #32
	ldr	w12, [x10, #12]
	bfi	x9, x12, #32, #32
	lsr	x11, x8, #31
	stp	w13, w11, [x10]
	mov	x20, x0
	tbz	w9, #2, .LBB498_2
.LBB498_1:                              // %"$3"
                                        // =>This Inner Loop Header: Depth=1
	mov	x20, x9
	ldr	w10, [x9, #-4]!
	ldp	w13, w11, [x9, #8]
	ldr	w12, [x9, #4]
	bfi	x10, x12, #32, #32
	extr	x8, x10, x8, #63
	str	w8, [x9]
	lsr	x8, x8, #32
	str	w8, [x9, #4]
	bfi	x13, x11, #32, #32
	mov	x8, x10
	mov	x9, x13
	tbnz	w9, #2, .LBB498_1
.LBB498_2:                              // %"$4"
	lsr	x9, x9, #4
	extr	x8, x9, x8, #63
	tbz	x8, #60, .LBB498_4
// %bb.3:                               // %"$5"
	mov	x0, x8
	bl	boxNum
	b	.LBB498_5
.LBB498_4:                              // %"$6"
	mov	w0, #2
	bfi	x0, x8, #4, #60
.LBB498_5:                              // %"$7"
	lsr	x8, x0, #32
	stp	w0, w8, [x20, #4]
	mov	x0, x19
	ldp	x20, x19, [sp, #16]             // 16-byte Folded Reload
	ldr	x30, [sp], #32                  // 8-byte Folded Reload
	ret
.Lfunc_end498:
	.size	twiceBig, .Lfunc_end498-twiceBig
	.cfi_endproc
                                        // -- End function
	.globl	putPlio                         // -- Begin function putPlio
	.p2align	4
	.type	putPlio,@function
putPlio:                                // @putPlio
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	adrp	x8, ($Ptr)
	ldr	x9, [x8, :lo12:($Ptr)]
	strb	w0, [x9], #1
	str	x9, [x8, :lo12:($Ptr)]
	adrp	x8, ($End)
	ldr	x8, [x8, :lo12:($End)]
	cmp	x9, x8
	b.eq	.LBB499_2
// %bb.1:                               // %"$3"
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.LBB499_2:                              // %"$2"
	mov	x0, xzr
	bl	sizeErr
.Lfunc_end499:
	.size	putPlio, .Lfunc_end499-putPlio
	.cfi_endproc
                                        // -- End function
	.globl	getPlio                         // -- Begin function getPlio
	.p2align	4
	.type	getPlio,@function
getPlio:                                // @getPlio
	.cfi_startproc
// %bb.0:                               // %"$1"
	adrp	x8, ($Ptr)
	ldr	x9, [x8, :lo12:($Ptr)]
	add	x10, x9, #1                     // =1
	str	x10, [x8, :lo12:($Ptr)]
	ldrb	w0, [x9]
	ret
.Lfunc_end500:
	.size	getPlio, .Lfunc_end500-getPlio
	.cfi_endproc
                                        // -- End function
	.globl	sizeErr                         // -- Begin function sizeErr
	.p2align	4
	.type	sizeErr,@function
sizeErr:                                // @sizeErr
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	adrp	x2, .L$34
	add	x2, x2, :lo12:.L$34
	mov	x1, xzr
	mov	x3, xzr
	bl	err
.Lfunc_end501:
	.size	sizeErr, .Lfunc_end501-sizeErr
	.cfi_endproc
                                        // -- End function
	.globl	prin                            // -- Begin function prin
	.p2align	4
	.type	prin,@function
prin:                                   // @prin
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-32]!                // 8-byte Folded Spill
	stp	x20, x19, [sp, #16]             // 16-byte Folded Spill
	.cfi_def_cfa_offset 32
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w30, -32
	mov	x19, x0
	adrp	x8, ($Signal)
	ldr	w8, [x8, :lo12:($Signal)]
	cbz	w8, .LBB502_2
// %bb.1:                               // %"$2"
	mov	x0, xzr
	bl	sighandler
.LBB502_2:                              // %"$3"
	adrp	x20, SymTab+8
	add	x20, x20, :lo12:SymTab+8
	cmp	x19, x20
	b.eq	.LBB502_19
// %bb.3:                               // %"$4"
	tbz	w19, #1, .LBB502_5
// %bb.4:                               // %"$8"
	mov	x0, x19
	bl	outNum
	b	.LBB502_19
.LBB502_5:                              // %"$7"
	tbz	w19, #2, .LBB502_7
// %bb.6:                               // %"$10"
	mov	x0, x19
	mov	x1, #-1
	mov	w2, wzr
	mov	w3, wzr
	mov	x4, xzr
	bl	fmtNum
	b	.LBB502_19
.LBB502_7:                              // %"$9"
	tst	x19, #0xf
	b.eq	.LBB502_14
// %bb.8:                               // %"$11"
	ldp	w19, w8, [x19, #-8]
	bfi	x19, x8, #32, #32
	tbz	w19, #3, .LBB502_12
// %bb.9:                               // %"$21"
	adrp	x20, ($Put)
	ldr	x8, [x20, :lo12:($Put)]
	mov	w0, #123
	blr	x8
	and	x0, x19, #0xfffffffffffffff7
	tst	x0, #0x6
	b.ne	.LBB502_11
.LBB502_10:                             // %"$23"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w0, w8, [x0, #8]
	bfi	x0, x8, #32, #32
	tst	x0, #0x6
	b.eq	.LBB502_10
.LBB502_11:                             // %"$24"
	bl	prExt
	ldr	x8, [x20, :lo12:($Put)]
	mov	w0, #125
	blr	x8
	b	.LBB502_19
.LBB502_12:                             // %"$25"
                                        // =>This Inner Loop Header: Depth=1
	tst	x19, #0x6
	b.ne	.LBB502_18
// %bb.13:                              // %"$26"
                                        //   in Loop: Header=BB502_12 Depth=1
	ldp	w19, w8, [x19, #8]
	bfi	x19, x8, #32, #32
	b	.LBB502_12
.LBB502_14:                             // %"$12"
	mov	x8, sp
	adrp	x9, ($StkLimit)
	ldr	x9, [x9, :lo12:($StkLimit)]
	cmp	x9, x8
	b.hi	.LBB502_20
.LBB502_15:                             // %"$15"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w0, w8, [x19]
	bfi	x0, x8, #32, #32
	bl	prin
	ldp	w19, w8, [x19, #8]
	bfi	x19, x8, #32, #32
	cmp	x19, x20
	b.eq	.LBB502_19
// %bb.16:                              // %"$16"
                                        //   in Loop: Header=BB502_15 Depth=1
	tst	x19, #0xf
	b.eq	.LBB502_15
// %bb.17:                              // %"$19"
	mov	x0, x19
	bl	prin
	b	.LBB502_19
.LBB502_18:                             // %"$27"
	mov	x0, x19
	bl	prName
.LBB502_19:                             // %"$5"
	ldp	x20, x19, [sp, #16]             // 16-byte Folded Reload
	ldr	x30, [sp], #32                  // 8-byte Folded Reload
	ret
.LBB502_20:                             // %"$13"
	mov	x0, xzr
	bl	stkErr
.Lfunc_end502:
	.size	prin, .Lfunc_end502-prin
	.cfi_endproc
                                        // -- End function
	.globl	prName                          // -- Begin function prName
	.p2align	4
	.type	prName,@function
prName:                                 // @prName
	.cfi_startproc
// %bb.0:                               // %"$1"
	sub	sp, sp, #32                     // =32
	stp	x30, x19, [sp, #16]             // 16-byte Folded Spill
	.cfi_def_cfa_offset 32
	.cfi_offset w19, -8
	.cfi_offset w30, -16
	stp	xzr, x0, [sp]
	adrp	x19, ($Put)
.LBB503_1:                              // %"$2"
                                        // =>This Inner Loop Header: Depth=1
	mov	x0, sp
	bl	symByte
	tst	w0, #0xff
	b.eq	.LBB503_3
// %bb.2:                               // %"$3"
                                        //   in Loop: Header=BB503_1 Depth=1
	ldr	x8, [x19, :lo12:($Put)]
	blr	x8
	b	.LBB503_1
.LBB503_3:                              // %"$4"
	ldp	x30, x19, [sp, #16]             // 16-byte Folded Reload
	add	sp, sp, #32                     // =32
	ret
.Lfunc_end503:
	.size	prName, .Lfunc_end503-prName
	.cfi_endproc
                                        // -- End function
	.globl	memcmp                          // -- Begin function memcmp
	.p2align	4
	.type	memcmp,@function
memcmp:                                 // @memcmp
	.cfi_startproc
// %bb.0:                               // %"$1"
	mov	w0, wzr
	ret
.Lfunc_end504:
	.size	memcmp, .Lfunc_end504-memcmp
	.cfi_endproc
                                        // -- End function
	.globl	eol                             // -- Begin function eol
	.p2align	4
	.type	eol,@function
eol:                                    // @eol
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	tbnz	w0, #31, .LBB505_6
// %bb.1:                               // %"$3"
	cmp	w0, #13                         // =13
	b.eq	.LBB505_4
// %bb.2:                               // %"$3"
	cmp	w0, #10                         // =10
	b.eq	.LBB505_5
// %bb.3:
	mov	w0, wzr
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.LBB505_4:                              // %"$8"
	adrp	x8, ($Get)
	ldr	x8, [x8, :lo12:($Get)]
	blr	x8
	cmp	w0, #10                         // =10
	b.ne	.LBB505_6
.LBB505_5:                              // %"$9"
	adrp	x8, ($Chr)
	str	wzr, [x8, :lo12:($Chr)]
.LBB505_6:                              // %"$2"
	mov	w0, #1
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end505:
	.size	eol, .Lfunc_end505-eol
	.cfi_endproc
                                        // -- End function
	.globl	firstChar                       // -- Begin function firstChar
	.p2align	4
	.type	firstChar,@function
firstChar:                              // @firstChar
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-16]!           // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	adrp	x8, SymTab+8
	add	x8, x8, :lo12:SymTab+8
	cmp	x0, x8
	b.eq	.LBB506_2
// %bb.1:                               // %"$3"
	ldp	w8, w9, [x0, #-8]
	bfi	x8, x9, #32, #32
	tbz	w8, #3, .LBB506_3
.LBB506_2:
	mov	w0, wzr
	b	.LBB506_6
.LBB506_3:                              // %"$7"
                                        // =>This Inner Loop Header: Depth=1
	tst	x8, #0x6
	b.ne	.LBB506_5
// %bb.4:                               // %"$8"
                                        //   in Loop: Header=BB506_3 Depth=1
	ldp	w8, w9, [x8, #8]
	bfi	x8, x9, #32, #32
	b	.LBB506_3
.LBB506_5:                              // %"$9"
	mov	x9, sp
	sub	x0, x9, #16                     // =16
	mov	sp, x0
	stp	wzr, wzr, [x9, #-16]
	lsr	x10, x8, #32
	stp	w8, w10, [x9, #-8]
	bl	symChar
.LBB506_6:                              // %"$2"
	mov	sp, x29
	ldp	x29, x30, [sp], #16             // 16-byte Folded Reload
	ret
.Lfunc_end506:
	.size	firstChar, .Lfunc_end506-firstChar
	.cfi_endproc
                                        // -- End function
	.globl	atomErr                         // -- Begin function atomErr
	.p2align	4
	.type	atomErr,@function
atomErr:                                // @atomErr
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	adrp	x2, .L$15
	add	x2, x2, :lo12:.L$15
	mov	x3, xzr
	bl	err
.Lfunc_end507:
	.size	atomErr, .Lfunc_end507-atomErr
	.cfi_endproc
                                        // -- End function
	.globl	stdinByte                       // -- Begin function stdinByte
	.p2align	4
	.type	stdinByte,@function
stdinByte:                              // @stdinByte
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	adrp	x8, ($Get)
	ldr	x8, [x8, :lo12:($Get)]
	blr	x8
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end508:
	.size	stdinByte, .Lfunc_end508-stdinByte
	.cfi_endproc
                                        // -- End function
	.globl	meta                            // -- Begin function meta
	.p2align	4
	.type	meta,@function
meta:                                   // @meta
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x30, x23, [sp, #-48]!           // 16-byte Folded Spill
	stp	x22, x21, [sp, #16]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #32]             // 16-byte Folded Spill
	.cfi_def_cfa_offset 48
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w30, -48
	mov	x20, x1
	mov	x21, x0
	adrp	x23, ($StkLimit)
	adrp	x19, SymTab+8
	add	x19, x19, :lo12:SymTab+8
	b	.LBB509_2
.LBB509_1:                              // %"$7"
                                        //   in Loop: Header=BB509_2 Depth=1
	ldp	w21, w8, [x21, #8]
	bfi	x21, x8, #32, #32
.LBB509_2:                              // %"$2"
                                        // =>This Inner Loop Header: Depth=1
	tst	x21, #0xf
	b.ne	.LBB509_8
// %bb.3:                               // %"$3"
                                        //   in Loop: Header=BB509_2 Depth=1
	ldr	w22, [x21]
	eor	w8, w22, #0x8
	tst	x8, #0xe
	b.ne	.LBB509_1
// %bb.4:                               // %"$6"
                                        //   in Loop: Header=BB509_2 Depth=1
	ldr	w8, [x21, #4]
	bfi	x22, x8, #32, #32
	mov	x0, x22
	mov	x1, x20
	bl	get
	cmp	x0, x19
	b.ne	.LBB509_7
// %bb.5:                               // %"$8"
                                        //   in Loop: Header=BB509_2 Depth=1
	mov	x8, sp
	ldr	x9, [x23, :lo12:($StkLimit)]
	cmp	x9, x8
	b.hi	.LBB509_9
// %bb.6:                               // %"$11"
                                        //   in Loop: Header=BB509_2 Depth=1
	ldp	w0, w8, [x22]
	bfi	x0, x8, #32, #32
	mov	x1, x20
	bl	meta
	cmp	x0, x19
	b.eq	.LBB509_1
.LBB509_7:
	mov	x19, x0
.LBB509_8:                              // %"$4"
	mov	x0, x19
	ldp	x20, x19, [sp, #32]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #16]             // 16-byte Folded Reload
	ldp	x30, x23, [sp], #48             // 16-byte Folded Reload
	ret
.LBB509_9:                              // %"$10"
	mov	x0, xzr
	bl	stkErr
.Lfunc_end509:
	.size	meta, .Lfunc_end509-meta
	.cfi_endproc
                                        // -- End function
	.globl	getn                            // -- Begin function getn
	.p2align	4
	.type	getn,@function
getn:                                   // @getn
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-32]!                // 8-byte Folded Spill
	stp	x20, x19, [sp, #16]             // 16-byte Folded Spill
	.cfi_def_cfa_offset 32
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w30, -32
	mov	x19, x1
	tst	x1, #0x6
	b.ne	.LBB510_18
// %bb.1:                               // %"$3"
	mov	x20, x2
	tst	x19, #0xf
	b.eq	.LBB510_6
// %bb.2:                               // %"$5"
	ldurb	w8, [x19, #-8]
	tbz	w8, #3, .LBB510_4
// %bb.3:                               // %"$26"
	mov	x1, x19
	bl	dbFetch
.LBB510_4:                              // %"$27"
	mov	x0, x19
	mov	x1, x20
	bl	get
.LBB510_5:                              // %"$6"
	ldp	x20, x19, [sp, #16]             // 16-byte Folded Reload
	ldr	x30, [sp], #32                  // 8-byte Folded Reload
	ret
.LBB510_6:                              // %"$4"
	tst	x20, #0x6
	b.eq	.LBB510_9
// %bb.7:                               // %"$8"
	cmp	x20, #2                         // =2
	b.ne	.LBB510_14
// %bb.8:
	adrp	x0, SymTab+8
	add	x0, x0, :lo12:SymTab+8
	b	.LBB510_5
.LBB510_9:                              // %"$10.preheader"
	adrp	x0, SymTab+8
	add	x0, x0, :lo12:SymTab+8
.LBB510_10:                             // %"$10"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w8, w9, [x19]
	bfi	x8, x9, #32, #32
	tst	x8, #0xf
	b.eq	.LBB510_12
// %bb.11:                              //   in Loop: Header=BB510_10 Depth=1
	mov	w9, wzr
	cbz	w9, .LBB510_13
	b	.LBB510_17
.LBB510_12:                             // %"$12"
                                        //   in Loop: Header=BB510_10 Depth=1
	ldp	w10, w9, [x8]
	bfi	x10, x9, #32, #32
	cmp	x20, x10
	cset	w9, eq
	cbnz	w9, .LBB510_17
.LBB510_13:                             // %"$13"
                                        //   in Loop: Header=BB510_10 Depth=1
	ldp	w19, w8, [x19, #8]
	bfi	x19, x8, #32, #32
	tst	x19, #0xf
	b.eq	.LBB510_10
	b	.LBB510_5
.LBB510_14:                             // %"$19"
	lsr	x8, x20, #4
	sub	x8, x8, #1                      // =1
	cbz	x8, .LBB510_16
.LBB510_15:                             // %"$21"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w19, w9, [x19, #8]
	bfi	x19, x9, #32, #32
	sub	x8, x8, #1                      // =1
	cbnz	x8, .LBB510_15
.LBB510_16:                             // %"$22"
	add	x8, x19, #8                     // =8
	tst	w20, #0x8
	csel	x8, x19, x8, eq
	ldp	w0, w9, [x8]
	bfi	x0, x9, #32, #32
	b	.LBB510_5
.LBB510_17:                             // %"$15"
	ldp	w0, w9, [x8, #8]
	bfi	x0, x9, #32, #32
	b	.LBB510_5
.LBB510_18:                             // %"$2"
	mov	x1, x19
	bl	argErr
.Lfunc_end510:
	.size	getn, .Lfunc_end510-getn
	.cfi_endproc
                                        // -- End function
	.globl	wipe                            // -- Begin function wipe
	.p2align	4
	.type	wipe,@function
wipe:                                   // @wipe
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	eor	w8, w1, #0x8
	tst	x8, #0xe
	b.ne	.LBB511_9
// %bb.1:                               // %"$3"
	ldp	w9, w8, [x1, #-8]
	bfi	x9, x8, #32, #32
	and	x8, x9, #0xfffffffffffffff7
	tst	x8, #0x6
	b.ne	.LBB511_3
.LBB511_2:                              // %"$5"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w8, w10, [x8, #8]
	bfi	x8, x10, #32, #32
	tst	x8, #0x6
	b.eq	.LBB511_2
.LBB511_3:                              // %"$6"
	tbz	w9, #3, .LBB511_8
// %bb.4:                               // %"$8"
	adds	x8, x8, x8
	b.hs	.LBB511_7
// %bb.5:                               // %"$10"
	adds	x8, x8, x8
	b.lo	.LBB511_7
// %bb.6:                               // %"$12"
	adrp	x9, SymTab+8
	add	x9, x9, :lo12:SymTab+8
	lsr	x10, x9, #32
	stp	w9, w10, [x1]
	lsr	x9, x8, #2
	orr	w9, w9, #0x8
	lsr	x8, x8, #34
	stp	w9, w8, [x1, #-8]
.LBB511_7:                              // %"$9"
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.LBB511_8:                              // %"$7"
	adrp	x9, SymTab+8
	add	x9, x9, :lo12:SymTab+8
	lsr	x10, x9, #32
	stp	w9, w10, [x1]
	lsr	x9, x8, #32
	stp	w8, w9, [x1, #-8]
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.LBB511_9:                              // %"$2"
	bl	symErr
.Lfunc_end511:
	.size	wipe, .Lfunc_end511-wipe
	.cfi_endproc
                                        // -- End function
	.globl	prop                            // -- Begin function prop
	.p2align	4
	.type	prop,@function
prop:                                   // @prop
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x30, x21, [sp, #-32]!           // 16-byte Folded Spill
	stp	x20, x19, [sp, #16]             // 16-byte Folded Spill
	.cfi_def_cfa_offset 32
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w30, -32
	mov	x19, x0
	ldp	w20, w8, [x0, #-8]
	bfi	x20, x8, #32, #32
	tst	x20, #0x6
	b.eq	.LBB512_3
.LBB512_1:                              // %"$3"
	adrp	x0, SymTab+8
	add	x0, x0, :lo12:SymTab+8
	bl	cons
	mov	x21, x0
	tbz	w20, #3, .LBB512_6
// %bb.2:                               // %"$27"
	and	x1, x20, #0xfffffffffffffff7
	mov	x0, x21
	bl	cons
	orr	x0, x0, #0x8
	b	.LBB512_7
.LBB512_3:                              // %"$2"
	and	x8, x20, #0xfffffffffffffff7
	ldp	w0, w9, [x8]
	bfi	x0, x9, #32, #32
	tst	x0, #0xf
	b.eq	.LBB512_9
// %bb.4:                               // %"$4"
	cmp	x1, x0
	b.ne	.LBB512_11
// %bb.5:                               // %"$7"
	mov	x0, x1
	b	.LBB512_8
.LBB512_6:                              // %"$28"
	mov	x0, x21
	mov	x1, x20
	bl	cons
.LBB512_7:                              // %"$29"
	lsr	x8, x0, #32
	stp	w0, w8, [x19, #-8]
	mov	x0, x21
.LBB512_8:                              // %"$9"
	ldp	x20, x19, [sp, #16]             // 16-byte Folded Reload
	ldp	x30, x21, [sp], #32             // 16-byte Folded Reload
	ret
.LBB512_9:                              // %"$5"
	ldp	w10, w9, [x0, #8]
	bfi	x10, x9, #32, #32
	cmp	x1, x10
	b.ne	.LBB512_11
	b	.LBB512_8
.LBB512_10:                             // %"$15"
                                        //   in Loop: Header=BB512_11 Depth=1
	ldp	w11, w10, [x0, #8]
	bfi	x11, x10, #32, #32
	cmp	x1, x11
	b.eq	.LBB512_16
.LBB512_11:                             // %"$11"
                                        // =>This Inner Loop Header: Depth=1
	mov	x9, x8
	ldp	w8, w10, [x8, #8]
	bfi	x8, x10, #32, #32
	tst	x8, #0xf
	b.ne	.LBB512_1
// %bb.12:                              // %"$12"
                                        //   in Loop: Header=BB512_11 Depth=1
	ldp	w0, w10, [x8]
	bfi	x0, x10, #32, #32
	tst	x0, #0xf
	b.eq	.LBB512_10
// %bb.13:                              // %"$14"
                                        //   in Loop: Header=BB512_11 Depth=1
	cmp	x1, x0
	b.ne	.LBB512_11
// %bb.14:                              // %"$17"
	ldp	w10, w11, [x8, #8]
	stp	w10, w11, [x9, #8]
	tbz	w20, #3, .LBB512_18
// %bb.15:                              // %"$20"
	and	x9, x20, #0xfffffffffffffff7
	lsr	x10, x20, #32
	stp	w9, w10, [x8, #8]
	orr	x8, x8, #0x8
	b	.LBB512_19
.LBB512_16:                             // %"$22"
	ldp	w10, w11, [x8, #8]
	stp	w10, w11, [x9, #8]
	tbz	w20, #3, .LBB512_20
// %bb.17:                              // %"$25"
	and	x9, x20, #0xfffffffffffffff7
	lsr	x10, x20, #32
	stp	w9, w10, [x8, #8]
	orr	x8, x8, #0x8
	b	.LBB512_21
.LBB512_18:                             // %"$19"
	lsr	x9, x20, #32
	stp	w20, w9, [x8, #8]
.LBB512_19:                             // %"$21"
	lsr	x9, x8, #32
	stp	w8, w9, [x19, #-8]
	mov	x0, x1
	b	.LBB512_8
.LBB512_20:                             // %"$24"
	lsr	x9, x20, #32
	stp	w20, w9, [x8, #8]
.LBB512_21:                             // %"$26"
	lsr	x9, x8, #32
	stp	w8, w9, [x19, #-8]
	b	.LBB512_8
.Lfunc_end512:
	.size	prop, .Lfunc_end512-prop
	.cfi_endproc
                                        // -- End function
	.globl	putn                            // -- Begin function putn
	.p2align	4
	.type	putn,@function
putn:                                   // @putn
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	tst	x2, #0x6
	b.eq	.LBB513_5
// %bb.1:                               // %"$3"
	cmp	x2, #2                          // =2
	b.eq	.LBB513_13
// %bb.2:                               // %"$14"
	lsr	x8, x2, #4
	sub	x8, x8, #1                      // =1
.LBB513_3:                              // %"$15"
                                        // =>This Inner Loop Header: Depth=1
	cbz	x8, .LBB513_10
// %bb.4:                               // %"$16"
                                        //   in Loop: Header=BB513_3 Depth=1
	ldp	w1, w9, [x1, #8]
	bfi	x1, x9, #32, #32
	and	x9, x1, #0xf
	sub	x8, x8, #1                      // =1
	cbz	x9, .LBB513_3
	b	.LBB513_9
.LBB513_5:                              // %"$5"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w8, w9, [x1]
	bfi	x8, x9, #32, #32
	tst	x8, #0xf
	b.eq	.LBB513_7
// %bb.6:                               //   in Loop: Header=BB513_5 Depth=1
	mov	w9, wzr
	cbz	w9, .LBB513_8
	b	.LBB513_11
.LBB513_7:                              // %"$7"
                                        //   in Loop: Header=BB513_5 Depth=1
	ldp	w10, w9, [x8]
	bfi	x10, x9, #32, #32
	cmp	x2, x10
	cset	w9, eq
	cbnz	w9, .LBB513_11
.LBB513_8:                              // %"$8"
                                        //   in Loop: Header=BB513_5 Depth=1
	ldp	w1, w8, [x1, #8]
	bfi	x1, x8, #32, #32
	tst	x1, #0xf
	b.eq	.LBB513_5
.LBB513_9:                              // %"$11"
	mov	x1, x2
	bl	itemErr
.LBB513_10:                             // %"$17"
	add	x8, x1, #8                      // =8
	tst	w2, #0x8
	csel	x8, x1, x8, eq
	b	.LBB513_12
.LBB513_11:                             // %"$10"
	add	x8, x8, #8                      // =8
.LBB513_12:                             // %"$2"
	lsr	x9, x3, #32
	stp	w3, w9, [x8]
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.LBB513_13:                             // %"$13"
	mov	x1, x2
	bl	argErr
.Lfunc_end513:
	.size	putn, .Lfunc_end513-putn
	.cfi_endproc
                                        // -- End function
	.globl	itemErr                         // -- Begin function itemErr
	.p2align	4
	.type	itemErr,@function
itemErr:                                // @itemErr
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	adrp	x2, .L$19
	add	x2, x2, :lo12:.L$19
	mov	x3, xzr
	bl	err
.Lfunc_end514:
	.size	itemErr, .Lfunc_end514-itemErr
	.cfi_endproc
                                        // -- End function
	.globl	consTree                        // -- Begin function consTree
	.p2align	4
	.type	consTree,@function
consTree:                               // @consTree
	.cfi_startproc
// %bb.0:                               // %"$1"
	tst	x0, #0xf
	b.eq	.LBB515_2
// %bb.1:                               // %"$4"
	mov	x0, x1
	ret
.LBB515_2:                              // %"$3"
	stp	x29, x30, [sp, #-64]!           // 16-byte Folded Spill
	str	x23, [sp, #16]                  // 8-byte Folded Spill
	stp	x22, x21, [sp, #32]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #48]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 64
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -48
	.cfi_offset w30, -56
	.cfi_offset w29, -64
	mov	x19, x0
	mov	x9, sp
	sub	x20, x9, #16                    // =16
	mov	sp, x20
	lsr	x10, x0, #32
	adrp	x8, env
	add	x8, x8, :lo12:env
	stp	w19, w10, [x9, #-16]
	ldr	x10, [x8]
	lsr	x11, x10, #32
	stp	w10, w11, [x9, #-8]
	str	x20, [x8]
	mov	x9, sp
	sub	x21, x9, #16                    // =16
	mov	sp, x21
	lsr	x10, x1, #32
	stp	w1, w10, [x9, #-16]
	ldr	x10, [x8]
	lsr	x11, x10, #32
	stp	w10, w11, [x9, #-8]
	str	x21, [x8]
	mov	x9, sp
	sub	x22, x9, #16                    // =16
	mov	sp, x22
	mov	w10, #10
	stp	w10, wzr, [x9, #-16]
	ldr	x10, [x8]
	lsr	x11, x10, #32
	stp	w10, w11, [x9, #-8]
	mov	x9, x22
.LBB515_3:                              // %"$6"
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB515_4 Depth 2
                                        //       Child Loop BB515_6 Depth 3
	lsr	x10, x9, #32
	stp	w9, w10, [x8]
	ldp	w9, w8, [x19, #8]
	bfi	x9, x8, #32, #32
	ldp	w10, w8, [x9, #8]
	bfi	x10, x8, #32, #32
	tst	x10, #0xf
	b.eq	.LBB515_10
.LBB515_4:                              // %"$9"
                                        //   Parent Loop BB515_3 Depth=1
                                        // =>  This Loop Header: Depth=2
                                        //       Child Loop BB515_6 Depth 3
	lsr	x23, x19, #32
	stp	w19, w23, [x20]
	ldp	w0, w8, [x19]
	bfi	x0, x8, #32, #32
	ldp	w1, w8, [x21]
	bfi	x1, x8, #32, #32
	bl	cons
	lsr	x8, x0, #32
	stp	w0, w8, [x21]
	ldp	w8, w9, [x19, #8]
	bfi	x8, x9, #32, #32
	ldp	w9, w10, [x8]
	bfi	x9, x10, #32, #32
	tst	x9, #0xf
	b.eq	.LBB515_11
// %bb.5:                               //   in Loop: Header=BB515_4 Depth=2
	mov	x8, x19
.LBB515_6:                              // %"$13"
                                        //   Parent Loop BB515_3 Depth=1
                                        //     Parent Loop BB515_4 Depth=2
                                        // =>    This Inner Loop Header: Depth=3
	ldp	w19, w9, [x22]
	bfi	x19, x9, #32, #32
	cmp	x19, #10                        // =10
	b.eq	.LBB515_12
// %bb.7:                               // %"$15"
                                        //   in Loop: Header=BB515_6 Depth=3
	tbz	w19, #3, .LBB515_9
// %bb.8:                               // %"$16"
                                        //   in Loop: Header=BB515_6 Depth=3
	and	x9, x19, #0xfffffffffffffff7
	ldp	w11, w10, [x9, #8]
	bfi	x11, x10, #32, #32
	ldp	w10, w12, [x11]
	stp	w10, w12, [x22]
	lsr	x10, x8, #32
	stp	w8, w10, [x11]
	lsr	x8, x19, #32
	stp	w9, w8, [x20]
	mov	x8, x9
	b	.LBB515_6
.LBB515_9:                              // %"$18"
                                        //   in Loop: Header=BB515_4 Depth=2
	ldp	w10, w9, [x19, #8]
	bfi	x10, x9, #32, #32
	ldr	w9, [x10, #8]!
	ldr	w11, [x10, #4]
	stp	w9, w11, [x22]
	lsr	x9, x8, #32
	stp	w8, w9, [x10]
	b	.LBB515_4
.LBB515_10:                             // %"$7"
                                        //   in Loop: Header=BB515_3 Depth=1
	ldp	w11, w12, [x22]
	mov	x8, x22
	stp	w11, w12, [x9, #8]
	mov	x9, x19
	mov	x19, x10
	b	.LBB515_3
.LBB515_11:                             // %"$12"
                                        //   in Loop: Header=BB515_3 Depth=1
	ldp	w10, w11, [x22]
	stp	w10, w11, [x8]
	orr	w8, w19, #0x8
	stp	w8, w23, [x22]
	mov	x8, x20
	mov	x19, x9
	b	.LBB515_3
.LBB515_12:                             // %"$14"
	ldp	w9, w8, [x20, #8]
	bfi	x9, x8, #32, #32
	adrp	x8, env
	str	x9, [x8, :lo12:env]
	ldp	w0, w8, [x21]
	bfi	x0, x8, #32, #32
	mov	sp, x29
	ldp	x20, x19, [sp, #48]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #32]             // 16-byte Folded Reload
	ldr	x23, [sp, #16]                  // 8-byte Folded Reload
	ldp	x29, x30, [sp], #64             // 16-byte Folded Reload
	ret
.Lfunc_end515:
	.size	consTree, .Lfunc_end515-consTree
	.cfi_endproc
                                        // -- End function
	.globl	idxGet                          // -- Begin function idxGet
	.p2align	4
	.type	idxGet,@function
idxGet:                                 // @idxGet
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x30, x21, [sp, #-32]!           // 16-byte Folded Spill
	stp	x20, x19, [sp, #16]             // 16-byte Folded Spill
	.cfi_def_cfa_offset 32
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w30, -32
	mov	x19, x1
	adrp	x21, SymTab+8
	add	x21, x21, :lo12:SymTab+8
.LBB516_1:                              // %"$2"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w20, w8, [x0]
	bfi	x20, x8, #32, #32
	tst	x20, #0xf
	b.ne	.LBB516_5
// %bb.2:                               // %"$3"
                                        //   in Loop: Header=BB516_1 Depth=1
	ldp	w0, w8, [x20]
	bfi	x0, x8, #32, #32
	mov	x1, x19
	bl	compare
	cbz	x0, .LBB516_6
// %bb.3:                               // %"$6"
                                        //   in Loop: Header=BB516_1 Depth=1
	mov	x8, x0
	ldp	w0, w9, [x20, #8]
	bfi	x0, x9, #32, #32
	tbz	x8, #63, .LBB516_1
// %bb.4:                               // %"$8"
                                        //   in Loop: Header=BB516_1 Depth=1
	add	x0, x0, #8                      // =8
	b	.LBB516_1
.LBB516_5:
	mov	x20, x21
.LBB516_6:                              // %"$4"
	mov	x0, x20
	ldp	x20, x19, [sp, #16]             // 16-byte Folded Reload
	ldp	x30, x21, [sp], #32             // 16-byte Folded Reload
	ret
.Lfunc_end516:
	.size	idxGet, .Lfunc_end516-idxGet
	.cfi_endproc
                                        // -- End function
	.globl	idxDel                          // -- Begin function idxDel
	.p2align	4
	.type	idxDel,@function
idxDel:                                 // @idxDel
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x30, x23, [sp, #-48]!           // 16-byte Folded Spill
	stp	x22, x21, [sp, #16]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #32]             // 16-byte Folded Spill
	.cfi_def_cfa_offset 48
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w30, -48
	mov	x21, x1
	mov	x20, x0
	adrp	x22, SymTab+8
	add	x22, x22, :lo12:SymTab+8
.LBB517_1:                              // %"$2"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w19, w8, [x20]
	bfi	x19, x8, #32, #32
	tst	x19, #0xf
	b.ne	.LBB517_6
// %bb.2:                               // %"$3"
                                        //   in Loop: Header=BB517_1 Depth=1
	ldp	w23, w8, [x19, #8]
	bfi	x23, x8, #32, #32
	ldp	w0, w8, [x19]
	bfi	x0, x8, #32, #32
	mov	x1, x21
	bl	compare
	cbz	x0, .LBB517_7
// %bb.3:                               // %"$6"
                                        //   in Loop: Header=BB517_1 Depth=1
	tst	x23, #0xf
	b.ne	.LBB517_6
// %bb.4:                               // %"$19"
                                        //   in Loop: Header=BB517_1 Depth=1
	mov	x20, x23
	tbz	x0, #63, .LBB517_1
// %bb.5:                               // %"$22"
                                        //   in Loop: Header=BB517_1 Depth=1
	add	x20, x23, #8                    // =8
	b	.LBB517_1
.LBB517_6:
	mov	x19, x22
	b	.LBB517_12
.LBB517_7:                              // %"$7"
	ldrb	w8, [x23]
	tst	w8, #0xf
	b.eq	.LBB517_9
// %bb.8:                               // %"$10"
	ldp	w8, w9, [x23, #8]
	b	.LBB517_11
.LBB517_9:                              // %"$9"
	ldrb	w8, [x23, #8]
	tst	w8, #0xf
	b.eq	.LBB517_13
// %bb.10:                              // %"$12"
	ldp	w8, w9, [x23]
.LBB517_11:                             // %"$4"
	stp	w8, w9, [x20]
.LBB517_12:                             // %"$4"
	mov	x0, x19
	ldp	x20, x19, [sp, #32]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #16]             // 16-byte Folded Reload
	ldp	x30, x23, [sp], #48             // 16-byte Folded Reload
	ret
.LBB517_13:                             // %"$11"
	ldp	w8, w9, [x23, #8]
	bfi	x8, x9, #32, #32
	ldp	w9, w10, [x8, #8]
	bfi	x9, x10, #32, #32
	ldrb	w10, [x9]
	tst	w10, #0xf
	b.eq	.LBB517_15
// %bb.14:                              // %"$13"
	ldp	w10, w8, [x8]
	stp	w10, w8, [x19]
	ldp	w10, w8, [x19, #8]
	bfi	x10, x8, #32, #32
	ldp	w8, w9, [x9, #8]
	stp	w8, w9, [x10, #8]
	b	.LBB517_12
.LBB517_15:                             // %"$14"
	ldp	w9, w10, [x9]
	bfi	x9, x10, #32, #32
.LBB517_16:                             // %"$16"
                                        // =>This Inner Loop Header: Depth=1
	mov	x10, x9
	ldp	w9, w11, [x9, #8]
	bfi	x9, x11, #32, #32
	ldrb	w11, [x9]
	tst	w11, #0xf
	b.ne	.LBB517_18
// %bb.17:                              // %"$17"
                                        //   in Loop: Header=BB517_16 Depth=1
	ldp	w9, w8, [x9]
	bfi	x9, x8, #32, #32
	mov	x8, x10
	b	.LBB517_16
.LBB517_18:                             // %"$18"
	ldp	w11, w10, [x10]
	stp	w11, w10, [x19]
	ldp	w8, w10, [x8, #8]
	bfi	x8, x10, #32, #32
	ldp	w10, w9, [x9, #8]
	stp	w10, w9, [x8]
	b	.LBB517_12
.Lfunc_end517:
	.size	idxDel, .Lfunc_end517-idxDel
	.cfi_endproc
                                        // -- End function
	.globl	chopExtNm                       // -- Begin function chopExtNm
	.p2align	4
	.type	chopExtNm,@function
chopExtNm:                              // @chopExtNm
	.cfi_startproc
// %bb.0:                               // %"$1"
	sub	sp, sp, #48                     // =48
	stp	x30, x21, [sp, #16]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #32]             // 16-byte Folded Spill
	.cfi_def_cfa_offset 48
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w30, -32
	mov	x19, x0
	adrp	x8, SymTab+8
	add	x8, x8, :lo12:SymTab+8
	adrp	x20, env
	ldr	x9, [x20, :lo12:env]
	stp	x8, x9, [sp]
	mov	x8, sp
	str	x8, [x20, :lo12:env]
	bl	objId
	b	.LBB518_3
.LBB518_1:                              //   in Loop: Header=BB518_3 Depth=1
	mov	x21, x9
.LBB518_2:                              // %"$4"
                                        //   in Loop: Header=BB518_3 Depth=1
	mov	w0, #2
	bfi	x0, x8, #4, #22
	mov	x1, xzr
	bl	consSym
	ldr	x1, [sp]
	bl	cons
	str	x0, [sp]
	lsr	x0, x21, #3
	cbz	x0, .LBB518_6
.LBB518_3:                              // %"$2"
                                        // =>This Inner Loop Header: Depth=1
	mov	w8, #48
	bfxil	x8, x0, #0, #3
	lsr	x9, x0, #3
	cbz	x9, .LBB518_1
// %bb.4:                               // %"$3"
                                        //   in Loop: Header=BB518_3 Depth=1
	lsl	x8, x8, #8
	bfxil	x8, x0, #3, #3
	orr	x8, x8, #0x30
	lsr	x21, x9, #3
	cbz	x21, .LBB518_2
// %bb.5:                               // %"$5"
                                        //   in Loop: Header=BB518_3 Depth=1
	lsl	x8, x8, #8
	bfxil	x8, x9, #3, #3
	orr	x8, x8, #0x30
	b	.LBB518_2
.LBB518_6:                              // %"$8"
	mov	x0, x19
	bl	objFile
	cbz	w0, .LBB518_11
// %bb.7:                               // %"$11.preheader"
	mov	w8, wzr
.LBB518_8:                              // %"$11"
                                        // =>This Inner Loop Header: Depth=1
	and	w9, w0, #0xf
	orr	w8, w9, w8
	orr	w8, w8, #0x40
	lsr	w0, w0, #4
	cbz	w0, .LBB518_10
// %bb.9:                               // %"$12"
                                        //   in Loop: Header=BB518_8 Depth=1
	lsl	w8, w8, #8
	b	.LBB518_8
.LBB518_10:                             // %"$13"
	sxtw	x8, w8
	mov	w0, #2
	bfi	x0, x8, #4, #60
	bl	consStr
	ldr	x1, [sp]
	bl	cons
	str	x0, [sp]
.LBB518_11:                             // %"$10"
	ldp	x0, x8, [sp]
	str	x8, [x20, :lo12:env]
	ldp	x20, x19, [sp, #32]             // 16-byte Folded Reload
	ldp	x30, x21, [sp, #16]             // 16-byte Folded Reload
	add	sp, sp, #48                     // =48
	ret
.Lfunc_end518:
	.size	chopExtNm, .Lfunc_end518-chopExtNm
	.cfi_endproc
                                        // -- End function
	.globl	dbZap                           // -- Begin function dbZap
	.p2align	4
	.type	dbZap,@function
dbZap:                                  // @dbZap
	.cfi_startproc
// %bb.0:                               // %"$1"
	ldp	w8, w9, [x0, #-8]
	bfi	x8, x9, #32, #32
	tst	x8, #0x6
	b.ne	.LBB519_4
// %bb.1:                               // %"$2"
	and	x8, x8, #0xfffffffffffffff7
.LBB519_2:                              // %"$4"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w8, w9, [x8, #8]
	bfi	x8, x9, #32, #32
	tst	x8, #0x6
	b.eq	.LBB519_2
// %bb.3:                               // %"$6"
	orr	x8, x8, #0x8
.LBB519_4:                              // %"$3"
	orr	x9, x8, #0xc000000000000000
	lsr	x9, x9, #32
	stp	w8, w9, [x0, #-8]
	adrp	x8, SymTab+8
	add	x8, x8, :lo12:SymTab+8
	lsr	x9, x8, #32
	stp	w8, w9, [x0]
	ret
.Lfunc_end519:
	.size	dbZap, .Lfunc_end519-dbZap
	.cfi_endproc
                                        // -- End function
	.globl	unintern                        // -- Begin function unintern
	.p2align	4
	.type	unintern,@function
unintern:                               // @unintern
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x30, x23, [sp, #-48]!           // 16-byte Folded Spill
	stp	x22, x21, [sp, #16]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #32]             // 16-byte Folded Spill
	.cfi_def_cfa_offset 48
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w30, -48
	mov	x20, x1
	mov	x19, x0
	tbz	w20, #1, .LBB520_9
.LBB520_1:                              // %"$5"
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB520_3 Depth 2
	ldp	w0, w8, [x2]
	bfi	x0, x8, #32, #32
	tst	x0, #0xf
	b.ne	.LBB520_23
// %bb.2:                               // %"$6"
                                        //   in Loop: Header=BB520_1 Depth=1
	ldp	w8, w9, [x0]
	bfi	x8, x9, #32, #32
	sub	x9, x8, #8                      // =8
.LBB520_3:                              // %"$8"
                                        //   Parent Loop BB520_1 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	w9, w10, [x9]
	bfi	x9, x10, #32, #32
	tst	x9, #0x6
	b.ne	.LBB520_5
// %bb.4:                               // %"$9"
                                        //   in Loop: Header=BB520_3 Depth=2
	add	x9, x9, #8                      // =8
	b	.LBB520_3
.LBB520_5:                              // %"$10"
                                        //   in Loop: Header=BB520_1 Depth=1
	cmp	x20, x9
	b.eq	.LBB520_18
// %bb.6:                               // %"$11"
                                        //   in Loop: Header=BB520_1 Depth=1
	ldp	w2, w8, [x0, #8]
	bfi	x2, x8, #32, #32
	tst	x2, #0xf
	b.ne	.LBB520_23
// %bb.7:                               // %"$15"
                                        //   in Loop: Header=BB520_1 Depth=1
	cmp	x20, x9
	b.ls	.LBB520_1
// %bb.8:                               // %"$16"
                                        //   in Loop: Header=BB520_1 Depth=1
	add	x2, x2, #8                      // =8
	b	.LBB520_1
.LBB520_9:                              // %"$3"
	add	x21, x2, #8                     // =8
.LBB520_10:                             // %"$19"
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB520_12 Depth 2
	ldp	w22, w8, [x21]
	bfi	x22, x8, #32, #32
	tst	x22, #0xf
	b.ne	.LBB520_23
// %bb.11:                              // %"$20"
                                        //   in Loop: Header=BB520_10 Depth=1
	ldp	w23, w8, [x22]
	bfi	x23, x8, #32, #32
	sub	x8, x23, #8                     // =8
.LBB520_12:                             // %"$22"
                                        //   Parent Loop BB520_10 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	w0, w9, [x8]
	bfi	x0, x9, #32, #32
	tst	x0, #0x6
	b.ne	.LBB520_14
// %bb.13:                              // %"$23"
                                        //   in Loop: Header=BB520_12 Depth=2
	add	x8, x0, #8                      // =8
	b	.LBB520_12
.LBB520_14:                             // %"$24"
                                        //   in Loop: Header=BB520_10 Depth=1
	mov	x1, x20
	bl	cmpLong
	cbz	x0, .LBB520_20
// %bb.15:                              // %"$25"
                                        //   in Loop: Header=BB520_10 Depth=1
	ldp	w21, w8, [x22, #8]
	bfi	x21, x8, #32, #32
	tst	x21, #0xf
	b.ne	.LBB520_23
// %bb.16:                              // %"$29"
                                        //   in Loop: Header=BB520_10 Depth=1
	tbz	x0, #63, .LBB520_10
// %bb.17:                              // %"$30"
                                        //   in Loop: Header=BB520_10 Depth=1
	add	x21, x21, #8                    // =8
	b	.LBB520_10
.LBB520_18:                             // %"$12"
	cmp	x8, x19
	b.ne	.LBB520_23
// %bb.19:                              // %"$13"
	mov	x1, x2
	b	.LBB520_22
.LBB520_20:                             // %"$26"
	cmp	x23, x19
	b.ne	.LBB520_23
// %bb.21:                              // %"$27"
	mov	x0, x22
	mov	x1, x21
.LBB520_22:                             // %"$4"
	bl	delNode
.LBB520_23:                             // %"$4"
	ldp	x20, x19, [sp, #32]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #16]             // 16-byte Folded Reload
	ldp	x30, x23, [sp], #48             // 16-byte Folded Reload
	ret
.Lfunc_end520:
	.size	unintern, .Lfunc_end520-unintern
	.cfi_endproc
                                        // -- End function
	.globl	delNode                         // -- Begin function delNode
	.p2align	4
	.type	delNode,@function
delNode:                                // @delNode
	.cfi_startproc
// %bb.0:                               // %"$1"
	ldp	w8, w9, [x0, #8]
	bfi	x8, x9, #32, #32
	ldrb	w9, [x8]
	tst	w9, #0xf
	b.eq	.LBB521_2
// %bb.1:                               // %"$4"
	ldp	w8, w9, [x8, #8]
	stp	w8, w9, [x1]
	ret
.LBB521_2:                              // %"$3"
	ldrb	w9, [x8, #8]
	tst	w9, #0xf
	b.eq	.LBB521_4
// %bb.3:                               // %"$6"
	ldp	w8, w9, [x8]
	stp	w8, w9, [x1]
	ret
.LBB521_4:                              // %"$5"
	ldp	w9, w10, [x8, #8]
	bfi	x9, x10, #32, #32
	ldp	w8, w10, [x9, #8]
	bfi	x8, x10, #32, #32
	ldrb	w10, [x8]
	tst	w10, #0xf
	b.eq	.LBB521_6
// %bb.5:                               // %"$8"
	ldp	w10, w9, [x9]
	stp	w10, w9, [x0]
	ldp	w10, w9, [x0, #8]
	bfi	x10, x9, #32, #32
	ldp	w8, w9, [x8, #8]
	stp	w8, w9, [x10, #8]
	ret
.LBB521_6:                              // %"$9"
                                        // =>This Inner Loop Header: Depth=1
	mov	x10, x9
	ldp	w9, w11, [x8]
	bfi	x9, x11, #32, #32
	ldp	w8, w11, [x9, #8]
	bfi	x8, x11, #32, #32
	ldrb	w11, [x8]
	tst	w11, #0xf
	b.eq	.LBB521_6
// %bb.7:                               // %"$12"
	ldp	w11, w9, [x9]
	stp	w11, w9, [x0]
	ldp	w10, w9, [x10, #8]
	bfi	x10, x9, #32, #32
	ldp	w8, w9, [x8, #8]
	stp	w8, w9, [x10]
	ret
.Lfunc_end521:
	.size	delNode, .Lfunc_end521-delNode
	.cfi_endproc
                                        // -- End function
	.globl	funq                            // -- Begin function funq
	.p2align	4
	.type	funq,@function
funq:                                   // @funq
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-48]!                // 8-byte Folded Spill
	stp	x22, x21, [sp, #16]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #32]             // 16-byte Folded Spill
	.cfi_def_cfa_offset 48
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w30, -48
	mov	x19, x0
	tbnz	w19, #1, .LBB522_4
// %bb.1:                               // %"$3"
	mov	w8, #1
	ubfx	x9, x19, #3, #1
	tst	w19, #0x4
	csel	w8, w8, w9, ne
	tbnz	w8, #0, .LBB522_3
// %bb.2:                               // %"$7"
	mov	x0, x19
	bl	circ
	cbz	x0, .LBB522_5
.LBB522_3:
	mov	x19, xzr
.LBB522_4:                              // %"$2"
	mov	x0, x19
	ldp	x20, x19, [sp, #32]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #16]             // 16-byte Folded Reload
	ldr	x30, [sp], #48                  // 8-byte Folded Reload
	ret
.LBB522_5:                              // %"$9"
	ldp	w8, w9, [x19, #8]
	adrp	x21, SymTab+8
	add	x21, x21, :lo12:SymTab+8
	bfi	x8, x9, #32, #32
	adrp	x22, SymTab+216
	add	x22, x22, :lo12:SymTab+216
	b	.LBB522_7
.LBB522_6:                              // %"$39"
                                        //   in Loop: Header=BB522_7 Depth=1
	cmp	x8, x21
	b.ne	.LBB522_3
.LBB522_7:                              // %"$11"
                                        // =>This Inner Loop Header: Depth=1
	tst	x8, #0xf
	b.ne	.LBB522_14
// %bb.8:                               // %"$12"
                                        //   in Loop: Header=BB522_7 Depth=1
	ldp	w9, w10, [x8]
	bfi	x9, x10, #32, #32
	ldp	w8, w10, [x8, #8]
	bfi	x8, x10, #32, #32
	tst	x9, #0xf
	b.ne	.LBB522_6
// %bb.9:                               // %"$38"
                                        //   in Loop: Header=BB522_7 Depth=1
	ldrb	w10, [x9]
	tst	w10, #0x6
	b.eq	.LBB522_11
// %bb.10:                              // %"$41"
                                        //   in Loop: Header=BB522_7 Depth=1
	tst	x8, #0xf
	b.ne	.LBB522_7
	b	.LBB522_3
.LBB522_11:                             // %"$42"
                                        //   in Loop: Header=BB522_7 Depth=1
	ldp	w11, w10, [x9]
	bfi	x11, x10, #32, #32
	cmp	x11, x21
	b.ne	.LBB522_13
// %bb.12:                              //   in Loop: Header=BB522_7 Depth=1
	mov	w9, #1
	tbz	w9, #0, .LBB522_7
	b	.LBB522_3
.LBB522_13:                             // %"$47"
                                        //   in Loop: Header=BB522_7 Depth=1
	ldp	w9, w10, [x9]
	bfi	x9, x10, #32, #32
	cmp	x9, x22
	cset	w9, eq
	tbz	w9, #0, .LBB522_7
	b	.LBB522_3
.LBB522_14:                             // %"$14"
	cmp	x8, x21
	b.ne	.LBB522_3
// %bb.15:                              // %"$16"
	ldp	w20, w8, [x19]
	bfi	x20, x8, #32, #32
	cmp	x20, x21
	b.ne	.LBB522_17
// %bb.16:
	add	x19, x21, #208                  // =208
	b	.LBB522_4
.LBB522_17:                             // %"$18"
	adrp	x8, SymTab+40
	add	x8, x8, :lo12:SymTab+40
	cmp	x20, x8
	b.eq	.LBB522_3
// %bb.18:                              // %"$20"
	mov	x0, x20
	bl	circ
	cbnz	x0, .LBB522_3
// %bb.19:                              // %"$24.preheader"
	mov	w9, #1
	mov	x8, x20
.LBB522_20:                             // %"$24"
                                        // =>This Inner Loop Header: Depth=1
	tst	x8, #0xf
	b.ne	.LBB522_22
// %bb.21:                              // %"$25"
                                        //   in Loop: Header=BB522_20 Depth=1
	mov	x19, xzr
	ldp	w11, w10, [x8]
	eor	w12, w11, #0x8
	bfi	x11, x10, #32, #32
	ldp	w8, w10, [x8, #8]
	bfi	x8, x10, #32, #32
	cmp	x11, x22
	cset	w10, eq
	cmp	x11, x21
	csel	w10, w9, w10, eq
	tst	x12, #0xe
	csel	w10, w9, w10, ne
	tbz	w10, #0, .LBB522_20
	b	.LBB522_4
.LBB522_22:                             // %"$27"
	cmp	x8, x22
	cset	w9, eq
	tst	x8, #0x6
	mov	w8, #1
	csel	w8, w8, w9, ne
	tst	w8, #0x1
	csel	x19, xzr, x20, ne
	b	.LBB522_4
.Lfunc_end522:
	.size	funq, .Lfunc_end522-funq
	.cfi_endproc
                                        // -- End function
	.globl	initSeed                        // -- Begin function initSeed
	.p2align	4
	.type	initSeed,@function
initSeed:                               // @initSeed
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-32]!                // 8-byte Folded Spill
	stp	x20, x19, [sp, #16]             // 16-byte Folded Spill
	.cfi_def_cfa_offset 32
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w30, -32
	mov	x20, x0
	mov	x19, xzr
	tst	x20, #0xf
	b.ne	.LBB523_2
.LBB523_1:                              // %"$3"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w0, w8, [x20]
	bfi	x0, x8, #32, #32
	ldp	w20, w8, [x20, #8]
	bfi	x20, x8, #32, #32
	bl	initSeed
	add	x19, x19, x0
	tst	x20, #0xf
	b.eq	.LBB523_1
.LBB523_2:                              // %"$4"
	adrp	x8, SymTab+8
	add	x8, x8, :lo12:SymTab+8
	cmp	x20, x8
	b.eq	.LBB523_10
// %bb.3:                               // %"$5"
	tst	x20, #0x6
	b.eq	.LBB523_11
.LBB523_4:                              // %"$8"
	tbz	w20, #1, .LBB523_6
// %bb.5:                               // %"$12"
	lsr	x8, x20, #3
	b	.LBB523_9
.LBB523_6:                              // %"$13"
	and	x8, x20, #0xfffffffffffffff7
	tst	w20, #0x8
	csel	x8, x20, x8, eq
	cinc	x19, x19, ne
.LBB523_7:                              // %"$17"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w10, w9, [x8, #-4]
	bfi	x10, x9, #32, #32
	add	x19, x19, x10
	ldp	w8, w9, [x8, #4]
	bfi	x8, x9, #32, #32
	tbz	w8, #1, .LBB523_7
// %bb.8:                               // %"$19"
	lsr	x8, x8, #4
.LBB523_9:                              // %"$14"
	add	x19, x19, x8
.LBB523_10:                             // %"$6"
	mov	x0, x19
	ldp	x20, x19, [sp, #16]             // 16-byte Folded Reload
	ldr	x30, [sp], #32                  // 8-byte Folded Reload
	ret
.LBB523_11:                             // %"$7"
	ldp	w9, w8, [x20, #-8]
	bfi	x9, x8, #32, #32
	and	x20, x9, #0xfffffffffffffff7
	tst	x20, #0x6
	b.ne	.LBB523_4
.LBB523_12:                             // %"$10"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w20, w8, [x20, #8]
	bfi	x20, x8, #32, #32
	tst	x20, #0x6
	b.eq	.LBB523_12
	b	.LBB523_4
.Lfunc_end523:
	.size	initSeed, .Lfunc_end523-initSeed
	.cfi_endproc
                                        // -- End function
	.globl	xoru                            // -- Begin function xoru
	.p2align	4
	.type	xoru,@function
xoru:                                   // @xoru
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-64]!           // 16-byte Folded Spill
	str	x23, [sp, #16]                  // 8-byte Folded Spill
	stp	x22, x21, [sp, #32]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #48]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 64
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -48
	.cfi_offset w30, -56
	.cfi_offset w29, -64
	mov	x19, x1
	mov	x20, x0
	tbz	w20, #1, .LBB524_3
// %bb.1:                               // %"$4"
	tbz	w19, #1, .LBB524_5
// %bb.2:                               // %"$5"
	eor	x8, x20, x19
	orr	x0, x8, #0x2
	b	.LBB524_17
.LBB524_3:                              // %"$3"
	tbz	w19, #1, .LBB524_7
// %bb.4:                               // %"$9"
	ldp	w8, w9, [x20, #-4]
	bfi	x8, x9, #32, #32
	eor	x0, x8, x19, lsr #4
	ldp	w1, w8, [x20, #4]
	b	.LBB524_6
.LBB524_5:                              // %"$6"
	ldp	w8, w9, [x19, #-4]
	bfi	x8, x9, #32, #32
	eor	x0, x8, x20, lsr #4
	ldp	w1, w8, [x19, #4]
.LBB524_6:                              // %"$2"
	bfi	x1, x8, #32, #32
	bl	consNum
	bl	zapZero
	b	.LBB524_17
.LBB524_7:                              // %"$8"
	ldp	w9, w8, [x20, #-4]
	bfi	x9, x8, #32, #32
	ldp	w10, w8, [x19, #-4]
	bfi	x10, x8, #32, #32
	eor	x0, x9, x10
	bl	boxNum
	mov	x21, x0
	adrp	x23, env
	add	x23, x23, :lo12:env
	ldr	x9, [x23]
	mov	x10, sp
	sub	x22, x10, #16                   // =16
	mov	sp, x22
	lsr	x8, x0, #32
	lsr	x11, x9, #32
	mov	x0, x22
	stp	w21, w8, [x10, #-16]
	mov	x8, x21
	stp	w9, w11, [x10, #-8]
.LBB524_8:                              // %"$10"
                                        // =>This Inner Loop Header: Depth=1
	lsr	x9, x0, #32
	stp	w0, w9, [x23]
	ldp	w20, w9, [x20, #4]
	bfi	x20, x9, #32, #32
	ldp	w19, w9, [x19, #4]
	bfi	x19, x9, #32, #32
	add	x23, x8, #4                     // =4
	tbnz	w20, #1, .LBB524_11
// %bb.9:                               // %"$11"
                                        //   in Loop: Header=BB524_8 Depth=1
	tbnz	w19, #1, .LBB524_13
// %bb.10:                              // %"$17"
                                        //   in Loop: Header=BB524_8 Depth=1
	ldp	w9, w8, [x20, #-4]
	bfi	x9, x8, #32, #32
	ldp	w10, w8, [x19, #-4]
	bfi	x10, x8, #32, #32
	eor	x0, x9, x10
	bl	boxNum
	mov	x8, x0
	b	.LBB524_8
.LBB524_11:                             // %"$13"
	tbz	w19, #1, .LBB524_14
// %bb.12:                              // %"$14"
	eor	x8, x20, x19
	orr	x0, x8, #0x2
	b	.LBB524_16
.LBB524_13:                             // %"$18"
	ldp	w8, w9, [x20, #-4]
	bfi	x8, x9, #32, #32
	eor	x0, x8, x19, lsr #4
	ldp	w1, w8, [x20, #4]
	b	.LBB524_15
.LBB524_14:                             // %"$15"
	ldp	w8, w9, [x19, #-4]
	bfi	x8, x9, #32, #32
	eor	x0, x8, x20, lsr #4
	ldp	w1, w8, [x19, #4]
.LBB524_15:                             // %"$12"
	bfi	x1, x8, #32, #32
	bl	consNum
.LBB524_16:                             // %"$12"
	lsr	x8, x0, #32
	stp	w0, w8, [x23]
	mov	x0, x21
	bl	zapZero
	ldp	w9, w8, [x22, #8]
	bfi	x9, x8, #32, #32
	adrp	x8, env
	str	x9, [x8, :lo12:env]
.LBB524_17:                             // %"$2"
	mov	sp, x29
	ldp	x20, x19, [sp, #48]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #32]             // 16-byte Folded Reload
	ldr	x23, [sp, #16]                  // 8-byte Folded Reload
	ldp	x29, x30, [sp], #64             // 16-byte Folded Reload
	ret
.Lfunc_end524:
	.size	xoru, .Lfunc_end524-xoru
	.cfi_endproc
                                        // -- End function
	.globl	oru                             // -- Begin function oru
	.p2align	4
	.type	oru,@function
oru:                                    // @oru
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-64]!           // 16-byte Folded Spill
	str	x23, [sp, #16]                  // 8-byte Folded Spill
	stp	x22, x21, [sp, #32]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #48]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 64
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -48
	.cfi_offset w30, -56
	.cfi_offset w29, -64
	mov	x20, x1
	mov	x21, x0
	tbz	w21, #1, .LBB525_3
// %bb.1:                               // %"$4"
	tbz	w20, #1, .LBB525_5
// %bb.2:                               // %"$5"
	orr	x19, x21, x20
	b	.LBB525_17
.LBB525_3:                              // %"$3"
	tbz	w20, #1, .LBB525_7
// %bb.4:                               // %"$9"
	ldp	w8, w9, [x21, #-4]
	bfi	x8, x9, #32, #32
	orr	x0, x8, x20, lsr #4
	ldp	w1, w8, [x21, #4]
	b	.LBB525_6
.LBB525_5:                              // %"$6"
	ldp	w8, w9, [x20, #-4]
	bfi	x8, x9, #32, #32
	orr	x0, x8, x21, lsr #4
	ldp	w1, w8, [x20, #4]
.LBB525_6:                              // %"$2"
	bfi	x1, x8, #32, #32
	bl	consNum
	mov	x19, x0
	b	.LBB525_17
.LBB525_7:                              // %"$8"
	ldp	w9, w8, [x21, #-4]
	bfi	x9, x8, #32, #32
	ldp	w10, w8, [x20, #-4]
	bfi	x10, x8, #32, #32
	orr	x0, x9, x10
	bl	boxNum
	mov	x19, x0
	adrp	x23, env
	add	x23, x23, :lo12:env
	ldr	x9, [x23]
	mov	x10, sp
	sub	x22, x10, #16                   // =16
	mov	sp, x22
	lsr	x8, x0, #32
	lsr	x11, x9, #32
	mov	x0, x22
	stp	w19, w8, [x10, #-16]
	mov	x8, x19
	stp	w9, w11, [x10, #-8]
.LBB525_8:                              // %"$10"
                                        // =>This Inner Loop Header: Depth=1
	lsr	x9, x0, #32
	stp	w0, w9, [x23]
	ldp	w21, w9, [x21, #4]
	bfi	x21, x9, #32, #32
	ldp	w20, w9, [x20, #4]
	bfi	x20, x9, #32, #32
	add	x23, x8, #4                     // =4
	tbnz	w21, #1, .LBB525_11
// %bb.9:                               // %"$11"
                                        //   in Loop: Header=BB525_8 Depth=1
	tbnz	w20, #1, .LBB525_13
// %bb.10:                              // %"$17"
                                        //   in Loop: Header=BB525_8 Depth=1
	ldp	w9, w8, [x21, #-4]
	bfi	x9, x8, #32, #32
	ldp	w10, w8, [x20, #-4]
	bfi	x10, x8, #32, #32
	orr	x0, x9, x10
	bl	boxNum
	mov	x8, x0
	b	.LBB525_8
.LBB525_11:                             // %"$13"
	tbz	w20, #1, .LBB525_14
// %bb.12:                              // %"$14"
	orr	x0, x21, x20
	b	.LBB525_16
.LBB525_13:                             // %"$18"
	ldp	w8, w9, [x21, #-4]
	bfi	x8, x9, #32, #32
	orr	x0, x8, x20, lsr #4
	ldp	w1, w8, [x21, #4]
	b	.LBB525_15
.LBB525_14:                             // %"$15"
	ldp	w8, w9, [x20, #-4]
	bfi	x8, x9, #32, #32
	orr	x0, x8, x21, lsr #4
	ldp	w1, w8, [x20, #4]
.LBB525_15:                             // %"$12"
	bfi	x1, x8, #32, #32
	bl	consNum
.LBB525_16:                             // %"$12"
	lsr	x8, x0, #32
	stp	w0, w8, [x23]
	ldp	w9, w8, [x22, #8]
	bfi	x9, x8, #32, #32
	adrp	x8, env
	str	x9, [x8, :lo12:env]
.LBB525_17:                             // %"$2"
	mov	x0, x19
	mov	sp, x29
	ldp	x20, x19, [sp, #48]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #32]             // 16-byte Folded Reload
	ldr	x23, [sp, #16]                  // 8-byte Folded Reload
	ldp	x29, x30, [sp], #64             // 16-byte Folded Reload
	ret
.Lfunc_end525:
	.size	oru, .Lfunc_end525-oru
	.cfi_endproc
                                        // -- End function
	.globl	andu                            // -- Begin function andu
	.p2align	4
	.type	andu,@function
andu:                                   // @andu
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-64]!           // 16-byte Folded Spill
	str	x23, [sp, #16]                  // 8-byte Folded Spill
	stp	x22, x21, [sp, #32]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #48]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 64
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -48
	.cfi_offset w30, -56
	.cfi_offset w29, -64
	mov	x19, x1
	mov	x20, x0
	tbz	w20, #1, .LBB526_4
// %bb.1:                               // %"$4"
	tbnz	w19, #1, .LBB526_3
// %bb.2:                               // %"$6"
	ldp	w9, w8, [x19, #-4]
	bfi	x9, x8, #32, #32
	mov	w19, #2
	bfi	x19, x9, #4, #60
.LBB526_3:                              // %"$7"
	and	x0, x20, x19
	b	.LBB526_15
.LBB526_4:                              // %"$3"
	tbz	w19, #1, .LBB526_6
// %bb.5:                               // %"$9"
	ldp	w9, w8, [x20, #-4]
	bfi	x9, x8, #32, #32
	mov	w8, #2
	bfi	x8, x9, #4, #60
	and	x0, x19, x8
	b	.LBB526_15
.LBB526_6:                              // %"$8"
	ldp	w9, w8, [x20, #-4]
	bfi	x9, x8, #32, #32
	ldp	w10, w8, [x19, #-4]
	bfi	x10, x8, #32, #32
	and	x0, x9, x10
	bl	boxNum
	mov	x21, x0
	adrp	x23, env
	add	x23, x23, :lo12:env
	ldr	x9, [x23]
	mov	x10, sp
	sub	x22, x10, #16                   // =16
	mov	sp, x22
	lsr	x8, x0, #32
	lsr	x11, x9, #32
	mov	x0, x22
	stp	w21, w8, [x10, #-16]
	mov	x8, x21
	stp	w9, w11, [x10, #-8]
.LBB526_7:                              // %"$10"
                                        // =>This Inner Loop Header: Depth=1
	lsr	x9, x0, #32
	stp	w0, w9, [x23]
	ldp	w20, w9, [x20, #4]
	bfi	x20, x9, #32, #32
	ldp	w19, w9, [x19, #4]
	bfi	x19, x9, #32, #32
	tbnz	w20, #1, .LBB526_10
// %bb.8:                               // %"$11"
                                        //   in Loop: Header=BB526_7 Depth=1
	tbnz	w19, #1, .LBB526_13
// %bb.9:                               // %"$17"
                                        //   in Loop: Header=BB526_7 Depth=1
	add	x23, x8, #4                     // =4
	ldp	w9, w8, [x20, #-4]
	bfi	x9, x8, #32, #32
	ldp	w10, w8, [x19, #-4]
	bfi	x10, x8, #32, #32
	and	x0, x9, x10
	bl	boxNum
	mov	x8, x0
	b	.LBB526_7
.LBB526_10:                             // %"$13"
	add	x8, x8, #4                      // =4
	tbnz	w19, #1, .LBB526_12
// %bb.11:                              // %"$15"
	ldp	w10, w9, [x19, #-4]
	bfi	x10, x9, #32, #32
	mov	w19, #2
	bfi	x19, x10, #4, #60
.LBB526_12:                             // %"$16"
	and	x9, x20, x19
	b	.LBB526_14
.LBB526_13:                             // %"$18"
	add	x8, x8, #4                      // =4
	ldp	w10, w9, [x20, #-4]
	bfi	x10, x9, #32, #32
	mov	w9, #2
	bfi	x9, x10, #4, #60
	and	x9, x19, x9
.LBB526_14:                             // %"$12"
	lsr	x10, x9, #32
	stp	w9, w10, [x8]
	mov	x0, x21
	bl	zapZero
	ldp	w9, w8, [x22, #8]
	bfi	x9, x8, #32, #32
	adrp	x8, env
	str	x9, [x8, :lo12:env]
.LBB526_15:                             // %"$2"
	mov	sp, x29
	ldp	x20, x19, [sp, #48]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #32]             // 16-byte Folded Reload
	ldr	x23, [sp, #16]                  // 8-byte Folded Reload
	ldp	x29, x30, [sp], #64             // 16-byte Folded Reload
	ret
.Lfunc_end526:
	.size	andu, .Lfunc_end526-andu
	.cfi_endproc
                                        // -- End function
	.globl	shru                            // -- Begin function shru
	.p2align	4
	.type	shru,@function
shru:                                   // @shru
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-64]!           // 16-byte Folded Spill
	stp	x24, x23, [sp, #16]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #32]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #48]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 64
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w30, -56
	.cfi_offset w29, -64
	mov	x8, x0
	tbz	w8, #1, .LBB527_2
// %bb.1:                               // %"$2"
	lsr	x8, x8, #1
	orr	x8, x8, #0x2
	mov	x9, #-10
	movk	x9, #32767, lsl #48
	and	x19, x8, x9
	b	.LBB527_13
.LBB527_2:                              // %"$3"
	ldp	w9, w10, [x8, #-4]
	ldp	w21, w8, [x8, #4]
	bfi	x9, x10, #32, #32
	lsr	x0, x9, #1
	bfi	x21, x8, #32, #32
	tbz	w21, #2, .LBB527_6
// %bb.3:                               // %"$5"
	ldp	w23, w8, [x21, #-4]
	bfi	x23, x8, #32, #32
	bfi	x0, x23, #63, #1
	bl	boxNum
	mov	x19, x0
	adrp	x24, env
	add	x24, x24, :lo12:env
	ldr	x8, [x24]
	mov	x9, sp
	sub	x20, x9, #16                    // =16
	mov	sp, x20
	lsr	x10, x0, #32
	lsr	x11, x8, #32
	mov	x0, x20
	stp	w19, w10, [x9, #-16]
	mov	x22, x19
	stp	w8, w11, [x9, #-8]
.LBB527_4:                              // %"$8"
                                        // =>This Inner Loop Header: Depth=1
	lsr	x8, x0, #32
	stp	w0, w8, [x24]
	lsr	x0, x23, #1
	ldp	w21, w8, [x21, #4]
	bfi	x21, x8, #32, #32
	tbnz	w21, #1, .LBB527_8
// %bb.5:                               // %"$9"
                                        //   in Loop: Header=BB527_4 Depth=1
	ldp	w23, w8, [x21, #-4]
	bfi	x23, x8, #32, #32
	add	x24, x22, #4                    // =4
	bfi	x0, x23, #63, #1
	bl	boxNum
	mov	x22, x0
	b	.LBB527_4
.LBB527_6:                              // %"$6"
	lsr	x8, x21, #4
	bfi	x0, x8, #63, #1
	lsr	x20, x21, #5
	mov	w8, #1
	tst	x0, #0xf000000000000000
	cset	w9, ne
	cmp	x20, #0                         // =0
	csel	w8, w8, w9, ne
	tbz	w8, #0, .LBB527_10
// %bb.7:                               // %"$19"
	bl	boxNum
	mov	x19, x0
	mov	w8, #2
	bfi	w8, w20, #4, #28
	lsr	x9, x20, #28
	stp	w8, w9, [x0, #4]
	b	.LBB527_13
.LBB527_8:                              // %"$10"
	lsr	x8, x21, #4
	bfi	x0, x8, #63, #1
	lsr	x21, x21, #5
	mov	w8, #1
	tst	x0, #0xf000000000000000
	cset	w9, ne
	cmp	x21, #0                         // =0
	csel	w8, w8, w9, ne
	tbz	w8, #0, .LBB527_11
// %bb.9:                               // %"$14"
	bl	boxNum
	mov	x8, x0
	mov	w9, #2
	bfi	w9, w21, #4, #28
	lsr	x10, x21, #28
	stp	w9, w10, [x0, #4]
	b	.LBB527_12
.LBB527_10:                             // %"$18"
	mov	w19, #2
	bfi	x19, x0, #4, #60
	b	.LBB527_13
.LBB527_11:                             // %"$13"
	mov	w8, #2
	bfi	x8, x0, #4, #60
.LBB527_12:                             // %"$15"
	lsr	x9, x8, #32
	stp	w8, w9, [x22, #4]
	ldp	w9, w8, [x20, #8]
	bfi	x9, x8, #32, #32
	adrp	x8, env
	str	x9, [x8, :lo12:env]
.LBB527_13:                             // %"$4"
	mov	x0, x19
	mov	sp, x29
	ldp	x20, x19, [sp, #48]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #32]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #64             // 16-byte Folded Reload
	ret
.Lfunc_end527:
	.size	shru, .Lfunc_end527-shru
	.cfi_endproc
                                        // -- End function
	.globl	shlu                            // -- Begin function shlu
	.p2align	4
	.type	shlu,@function
shlu:                                   // @shlu
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-80]!           // 16-byte Folded Spill
	str	x25, [sp, #16]                  // 8-byte Folded Spill
	stp	x24, x23, [sp, #32]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #48]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #64]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 80
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -64
	.cfi_offset w30, -72
	.cfi_offset w29, -80
	mov	x20, x0
	tbz	w20, #1, .LBB528_3
// %bb.1:                               // %"$2"
	adds	x8, x20, x20
	b.lo	.LBB528_7
// %bb.2:                               // %"$5"
	lsr	x0, x20, #3
	bl	boxNum
	mov	x19, x0
	b	.LBB528_10
.LBB528_3:                              // %"$3"
	ldp	w23, w8, [x20, #-4]
	bfi	x23, x8, #32, #32
	lsl	x0, x23, #1
	bl	boxNum
	mov	x19, x0
	ldp	w22, w8, [x20, #4]
	bfi	x22, x8, #32, #32
	adrp	x20, env
	ldr	x8, [x20, :lo12:env]
	mov	x9, sp
	sub	x21, x9, #16                    // =16
	mov	sp, x21
	lsr	x10, x0, #32
	lsr	x11, x8, #32
	stp	w19, w10, [x9, #-16]
	stp	w8, w11, [x9, #-8]
	mov	x24, x0
	str	x21, [x20, :lo12:env]
	tbz	w22, #2, .LBB528_5
.LBB528_4:                              // %"$9"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w25, w8, [x22, #-4]
	bfi	x25, x8, #32, #32
	extr	x0, x25, x23, #63
	bl	boxNum
	lsr	x8, x0, #32
	stp	w0, w8, [x24, #4]
	ldp	w22, w8, [x22, #4]
	bfi	x22, x8, #32, #32
	mov	x23, x25
	mov	x24, x0
	tbnz	w22, #2, .LBB528_4
.LBB528_5:                              // %"$10"
	lsr	x8, x22, #4
	extr	x8, x8, x23, #63
	tbz	x8, #60, .LBB528_8
// %bb.6:                               // %"$11"
	mov	x0, x8
	bl	boxNum
	b	.LBB528_9
.LBB528_7:                              // %"$6"
	eor	x19, x8, #0x6
	b	.LBB528_10
.LBB528_8:                              // %"$12"
	mov	w0, #2
	bfi	x0, x8, #4, #60
.LBB528_9:                              // %"$13"
	lsr	x8, x0, #32
	stp	w0, w8, [x24, #4]
	ldp	w9, w8, [x21, #8]
	bfi	x9, x8, #32, #32
	str	x9, [x20, :lo12:env]
.LBB528_10:                             // %"$4"
	mov	x0, x19
	mov	sp, x29
	ldp	x20, x19, [sp, #64]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #48]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #32]             // 16-byte Folded Reload
	ldr	x25, [sp, #16]                  // 8-byte Folded Reload
	ldp	x29, x30, [sp], #80             // 16-byte Folded Reload
	ret
.Lfunc_end528:
	.size	shlu, .Lfunc_end528-shlu
	.cfi_endproc
                                        // -- End function
	.globl	divErr                          // -- Begin function divErr
	.p2align	4
	.type	divErr,@function
divErr:                                 // @divErr
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	adrp	x2, .L$29
	add	x2, x2, :lo12:.L$29
	mov	x1, xzr
	mov	x3, xzr
	bl	err
.Lfunc_end529:
	.size	divErr, .Lfunc_end529-divErr
	.cfi_endproc
                                        // -- End function
	.globl	remu                            // -- Begin function remu
	.p2align	4
	.type	remu,@function
remu:                                   // @remu
	.cfi_startproc
// %bb.0:                               // %"$1"
	tbz	w0, #2, .LBB530_2
// %bb.1:                               // %"$4"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	mov	w2, #1
	bl	div1
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.LBB530_2:                              // %"$3"
	tbnz	w1, #2, .LBB530_4
// %bb.3:                               // %"$5"
	lsr	x8, x0, #4
	lsr	x9, x1, #4
	udiv	x10, x8, x9
	msub	x8, x10, x9, x8
	mov	w0, #2
	bfi	x0, x8, #4, #60
.LBB530_4:                              // %"$2"
	ret
.Lfunc_end530:
	.size	remu, .Lfunc_end530-remu
	.cfi_endproc
                                        // -- End function
	.globl	div1                            // -- Begin function div1
	.p2align	4
	.type	div1,@function
div1:                                   // @div1
	.cfi_startproc
// %bb.0:                               // %"$1"
	sub	sp, sp, #144                    // =144
	stp	x29, x30, [sp, #48]             // 16-byte Folded Spill
	stp	x28, x27, [sp, #64]             // 16-byte Folded Spill
	stp	x26, x25, [sp, #80]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #96]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #112]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #128]            // 16-byte Folded Spill
	.cfi_def_cfa_offset 144
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	mov	w19, w2
	mov	x21, x1
	mov	x22, x0
	adrp	x23, env
	ldr	x8, [x23, :lo12:env]
	mov	w9, #2
	stp	x9, x8, [sp, #32]
	add	x8, sp, #32                     // =32
	str	x8, [x23, :lo12:env]
	ldp	w0, w8, [x0, #-4]
	bfi	x0, x8, #32, #32
	bl	boxNum
	mov	x20, x0
	mov	x25, xzr
	ldr	x8, [x23, :lo12:env]
	stp	x0, x8, [sp, #16]
	add	x8, sp, #16                     // =16
	stp	x21, x8, [sp]
	mov	x8, sp
	str	x8, [x23, :lo12:env]
.LBB531_1:                              // %"$2"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w22, w8, [x22, #4]
	bfi	x22, x8, #32, #32
	tbz	w22, #2, .LBB531_3
// %bb.2:                               // %"$3"
                                        //   in Loop: Header=BB531_1 Depth=1
	ldp	w0, w8, [x22, #-4]
	bfi	x0, x8, #32, #32
	bl	boxNum
	lsr	x8, x0, #32
	stp	w0, w8, [x20, #4]
	add	x25, x25, #1                    // =1
	mov	x20, x0
	b	.LBB531_1
.LBB531_3:                              // %"$4"
	cmp	x22, #2                         // =2
	b.eq	.LBB531_5
// %bb.4:                               // %"$5"
	lsr	x0, x22, #4
	bl	boxNum
	lsr	x8, x0, #32
	stp	w0, w8, [x20, #4]
	add	x25, x25, #1                    // =1
	mov	x20, x0
.LBB531_5:                              // %"$6"
	tbz	w21, #1, .LBB531_7
// %bb.6:                               // %"$7"
	lsr	x0, x21, #4
	bl	boxNum
	mov	x22, x0
	mov	x27, xzr
	str	x0, [sp]
	mov	w26, #1
	b	.LBB531_13
.LBB531_7:                              // %"$8"
	ldp	w0, w8, [x21, #-4]
	bfi	x0, x8, #32, #32
	bl	boxNum
	mov	x22, x0
	mov	x27, xzr
	str	x0, [sp]
	mov	w26, #1
.LBB531_8:                              // %"$10"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w21, w8, [x21, #4]
	bfi	x21, x8, #32, #32
	tbz	w21, #2, .LBB531_10
// %bb.9:                               // %"$11"
                                        //   in Loop: Header=BB531_8 Depth=1
	ldp	w0, w8, [x21, #-4]
	bfi	x0, x8, #32, #32
	bl	boxNum
	lsr	x8, x0, #32
	sub	x25, x25, #1                    // =1
	add	x26, x26, #1                    // =1
	stp	w0, w8, [x22, #4]
	mov	x27, x22
	mov	x22, x0
	b	.LBB531_8
.LBB531_10:                             // %"$12"
	cmp	x21, #2                         // =2
	b.eq	.LBB531_12
// %bb.11:                              // %"$13"
	lsr	x0, x21, #4
	bl	boxNum
	lsr	x8, x0, #32
	sub	x25, x25, #1                    // =1
	add	x26, x26, #1                    // =1
	stp	w0, w8, [x22, #4]
	mov	x27, x22
	mov	x22, x0
.LBB531_12:                             // %"$14"
	tbnz	x25, #63, .LBB531_49
.LBB531_13:                             // %"$9"
	mov	x0, xzr
	bl	boxNum
	mov	x28, xzr
	lsr	x8, x0, #32
	stp	w0, w8, [x20, #4]
.LBB531_14:                             // %"$20"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w9, w8, [x22, #-4]
	bfi	x9, x8, #32, #32
	tbnz	x9, #63, .LBB531_16
// %bb.15:                              // %"$21"
                                        //   in Loop: Header=BB531_14 Depth=1
	ldr	x0, [sp, #16]
	bl	twiceBig
	ldr	x0, [sp]
	bl	twiceBig
	add	x28, x28, #1                    // =1
	b	.LBB531_14
.LBB531_16:                             // %"$22"
	ldp	w20, w8, [x22, #-4]
	bfi	x20, x8, #32, #32
	cbz	x27, .LBB531_18
// %bb.17:                              // %"$23"
	ldp	w27, w8, [x27, #-4]
	bfi	x27, x8, #32, #32
.LBB531_18:                             // %"$26.preheader"
	add	x22, sp, #16                    // =16
	mov	w21, #2
	mov	x8, x25
	b	.LBB531_20
.LBB531_19:                             // %"$27"
                                        //   in Loop: Header=BB531_20 Depth=1
	add	x22, x29, #4                    // =4
.LBB531_20:                             // %"$26"
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB531_22 Depth 2
                                        //     Child Loop BB531_27 Depth 2
                                        //     Child Loop BB531_31 Depth 2
                                        //     Child Loop BB531_39 Depth 2
	ldp	w29, w9, [x22]
	bfi	x29, x9, #32, #32
	subs	x8, x8, #1                      // =1
	b.pl	.LBB531_19
// %bb.21:                              // %"$29.preheader"
                                        //   in Loop: Header=BB531_20 Depth=1
	mov	x22, xzr
	mov	x23, xzr
	mov	x8, x26
	mov	x9, x29
.LBB531_22:                             // %"$29"
                                        //   Parent Loop BB531_20 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	mov	x24, x23
	mov	x23, x22
	ldp	w22, w10, [x9, #-4]
	bfi	x22, x10, #32, #32
	ldp	w9, w10, [x9, #4]
	bfi	x9, x10, #32, #32
	subs	x8, x8, #1                      // =1
	b.pl	.LBB531_22
// %bb.23:                              // %"$31"
                                        //   in Loop: Header=BB531_20 Depth=1
	cmp	x22, x20
	b.ne	.LBB531_25
// %bb.24:                              //   in Loop: Header=BB531_20 Depth=1
	mov	x0, #-1
	b	.LBB531_26
.LBB531_25:                             // %"$33"
                                        //   in Loop: Header=BB531_20 Depth=1
	mov	x0, x23
	mov	x1, x22
	mov	x2, x20
	mov	x3, xzr
	bl	__udivti3
.LBB531_26:                             // %"$34"
                                        //   in Loop: Header=BB531_20 Depth=1
	umulh	x9, x0, x20
	mul	x8, x0, x20
	subs	x8, x23, x8
	cset	w10, lo
	sub	x9, x22, x9
	sub	x9, x9, x10
	cbnz	x9, .LBB531_30
.LBB531_27:                             // %"$36"
                                        //   Parent Loop BB531_20 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	umulh	x10, x0, x27
	cmp	x8, x10
	b.hi	.LBB531_30
// %bb.28:                              // %"$38"
                                        //   in Loop: Header=BB531_27 Depth=2
	mul	x11, x0, x27
	cmp	x24, x11
	cset	w11, hs
	cmp	x8, x10
	csel	w10, wzr, w11, ne
	tbnz	w10, #0, .LBB531_30
// %bb.29:                              // %"$41"
                                        //   in Loop: Header=BB531_27 Depth=2
	sub	x0, x0, #1                      // =1
	adds	x8, x8, x20
	cinc	x9, x9, hs
	cbz	x9, .LBB531_27
.LBB531_30:                             // %"$37"
                                        //   in Loop: Header=BB531_20 Depth=1
	ldr	x8, [sp]
	mov	x9, x29
	ldr	w10, [x9, #-4]!
	ldr	w11, [x9, #4]
	bfi	x10, x11, #32, #32
	ldp	w12, w11, [x8, #-4]
	bfi	x12, x11, #32, #32
	umulh	x11, x0, x12
	mul	x12, x0, x12
	subs	x10, x10, x12
	lsr	x12, x10, #32
	stp	w10, w12, [x9]
	cinc	x10, x11, lo
	mov	x9, x29
.LBB531_31:                             // %"$42"
                                        //   Parent Loop BB531_20 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	w8, w11, [x8, #4]
	bfi	x8, x11, #32, #32
	tbz	w8, #2, .LBB531_33
// %bb.32:                              // %"$43"
                                        //   in Loop: Header=BB531_31 Depth=2
	ldp	w9, w11, [x9, #4]
	bfi	x9, x11, #32, #32
	mov	x11, x9
	ldr	w12, [x11, #-4]!
	ldr	w13, [x11, #4]
	bfi	x12, x13, #32, #32
	subs	x10, x12, x10
	lsr	x12, x10, #32
	stp	w10, w12, [x11]
	ldp	w13, w12, [x8, #-4]
	bfi	x13, x12, #32, #32
	mul	x12, x0, x13
	umulh	x13, x0, x13
	cinc	x13, x13, lo
	subs	x10, x10, x12
	lsr	x12, x10, #32
	stp	w10, w12, [x11]
	cinc	x10, x13, lo
	b	.LBB531_31
.LBB531_33:                             // %"$44"
                                        //   in Loop: Header=BB531_20 Depth=1
	cbz	x10, .LBB531_42
// %bb.34:                              // %"$45"
                                        //   in Loop: Header=BB531_20 Depth=1
	ldp	w9, w8, [x9, #4]
	bfi	x9, x8, #32, #32
	ldr	w8, [x9, #-4]!
	ldr	w11, [x9, #4]
	bfi	x8, x11, #32, #32
	subs	x8, x8, x10
	str	w8, [x9]
	lsr	x8, x8, #32
	str	w8, [x9, #4]
	b.hs	.LBB531_42
// %bb.35:                              // %"$47"
                                        //   in Loop: Header=BB531_20 Depth=1
	sub	x0, x0, #1                      // =1
	tbz	w19, #0, .LBB531_37
// %bb.36:                              //   in Loop: Header=BB531_20 Depth=1
	mov	w8, #1
	cbnz	w8, .LBB531_38
	b	.LBB531_42
.LBB531_37:                             // %"$50"
                                        //   in Loop: Header=BB531_20 Depth=1
	cmp	x25, #0                         // =0
	cset	w8, ne
	cbz	w8, .LBB531_42
.LBB531_38:                             // %"$51"
                                        //   in Loop: Header=BB531_20 Depth=1
	ldr	x8, [sp]
	mov	x10, x29
	ldr	w9, [x10, #-4]!
	ldr	w11, [x29]
	bfi	x9, x11, #32, #32
	ldp	w12, w11, [x8, #-4]
	bfi	x12, x11, #32, #32
	adds	x11, x9, x12
	cset	w9, hs
.LBB531_39:                             // %"$53"
                                        //   Parent Loop BB531_20 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	lsr	x12, x11, #32
	stp	w11, w12, [x10]
	ldp	w29, w10, [x29, #4]
	bfi	x29, x10, #32, #32
	ldp	w8, w10, [x8, #4]
	bfi	x8, x10, #32, #32
	tbnz	w8, #1, .LBB531_41
// %bb.40:                              // %"$54"
                                        //   in Loop: Header=BB531_39 Depth=2
	mov	x10, x29
	ldr	w11, [x10, #-4]!
	ldr	w12, [x29]
	bfi	x11, x12, #32, #32
	ldp	w13, w12, [x8, #-4]
	bfi	x13, x12, #32, #32
	adds	x11, x11, x13
	cset	w12, hs
	and	x9, x9, #0x1
	adds	x11, x11, x9
	cset	w9, hs
	orr	w9, w12, w9
	b	.LBB531_39
.LBB531_41:                             // %"$55"
                                        //   in Loop: Header=BB531_20 Depth=1
	ldr	w8, [x29, #-4]!
	ldr	w10, [x29, #4]
	bfi	x8, x10, #32, #32
	and	x9, x9, #0x1
	add	x8, x8, x9
	str	w8, [x29]
	lsr	x8, x8, #32
	str	w8, [x29, #4]
.LBB531_42:                             // %"$46"
                                        //   in Loop: Header=BB531_20 Depth=1
	add	x22, sp, #16                    // =16
	mov	x1, x21
	bl	consNum
	mov	x21, x0
	str	x0, [sp, #32]
	subs	x25, x25, #1                    // =1
	mov	x8, x25
	b.pl	.LBB531_20
// %bb.43:                              // %"$57"
	tbz	w19, #0, .LBB531_46
// %bb.44:                              // %"$59"
	ldr	x0, [sp, #16]
	bl	zapZero
	cbz	x28, .LBB531_47
.LBB531_45:                             // %"$62"
                                        // =>This Inner Loop Header: Depth=1
	bl	half
	sub	x28, x28, #1                    // =1
	cbnz	x28, .LBB531_45
	b	.LBB531_47
.LBB531_46:                             // %"$58"
	mov	x0, x21
	bl	zapZero
.LBB531_47:
	adrp	x9, env
	ldr	x8, [sp, #40]
	str	x8, [x9, :lo12:env]
.LBB531_48:                             // %"$19"
	ldp	x20, x19, [sp, #128]            // 16-byte Folded Reload
	ldp	x22, x21, [sp, #112]            // 16-byte Folded Reload
	ldp	x24, x23, [sp, #96]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #80]             // 16-byte Folded Reload
	ldp	x28, x27, [sp, #64]             // 16-byte Folded Reload
	ldp	x29, x30, [sp, #48]             // 16-byte Folded Reload
	add	sp, sp, #144                    // =144
	ret
.LBB531_49:                             // %"$15"
	tbz	w19, #0, .LBB531_51
// %bb.50:                              // %"$17"
	ldr	x0, [sp, #16]
	bl	zapZero
	b	.LBB531_52
.LBB531_51:
	mov	w0, #2
.LBB531_52:                             // %"$19"
	ldr	x8, [sp, #40]
	str	x8, [x23, :lo12:env]
	b	.LBB531_48
.Lfunc_end531:
	.size	div1, .Lfunc_end531-div1
	.cfi_endproc
                                        // -- End function
	.globl	divu                            // -- Begin function divu
	.p2align	4
	.type	divu,@function
divu:                                   // @divu
	.cfi_startproc
// %bb.0:                               // %"$1"
	tbz	w0, #2, .LBB532_2
// %bb.1:                               // %"$4"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	mov	w2, wzr
	bl	div1
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.LBB532_2:                              // %"$3"
	tbz	w1, #2, .LBB532_4
// %bb.3:
	mov	w0, #2
	ret
.LBB532_4:                              // %"$5"
	lsr	x8, x0, #4
	lsr	x9, x1, #4
	udiv	x8, x8, x9
	mov	w0, #2
	bfi	x0, x8, #4, #60
	ret
.Lfunc_end532:
	.size	divu, .Lfunc_end532-divu
	.cfi_endproc
                                        // -- End function
	.globl	decs                            // -- Begin function decs
	.p2align	4
	.type	decs,@function
decs:                                   // @decs
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	tbz	w0, #3, .LBB533_2
// %bb.1:                               // %"$2"
	and	x0, x0, #0xfffffffffffffff7
	mov	w1, #18
	bl	addu
	eor	x8, x0, #0x8
	cmp	x0, #2                          // =2
	csel	x0, x0, x8, eq
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.LBB533_2:                              // %"$3"
	mov	w1, #18
	bl	subu
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end533:
	.size	decs, .Lfunc_end533-decs
	.cfi_endproc
                                        // -- End function
	.globl	incs                            // -- Begin function incs
	.p2align	4
	.type	incs,@function
incs:                                   // @incs
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	tbz	w0, #3, .LBB534_2
// %bb.1:                               // %"$2"
	and	x0, x0, #0xfffffffffffffff7
	mov	w1, #18
	bl	subu
	eor	x8, x0, #0x8
	cmp	x0, #2                          // =2
	csel	x0, x0, x8, eq
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.LBB534_2:                              // %"$3"
	mov	w1, #18
	bl	addu
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end534:
	.size	incs, .Lfunc_end534-incs
	.cfi_endproc
                                        // -- End function
	.globl	malloc                          // -- Begin function malloc
	.p2align	4
	.type	malloc,@function
malloc:                                 // @malloc
	.cfi_startproc
// %bb.0:                               // %"$1"
	mov	x0, xzr
	ret
.Lfunc_end535:
	.size	malloc, .Lfunc_end535-malloc
	.cfi_endproc
                                        // -- End function
	.globl	realloc                         // -- Begin function realloc
	.p2align	4
	.type	realloc,@function
realloc:                                // @realloc
	.cfi_startproc
// %bb.0:                               // %"$1"
	mov	x0, xzr
	ret
.Lfunc_end536:
	.size	realloc, .Lfunc_end536-realloc
	.cfi_endproc
                                        // -- End function
	.globl	free                            // -- Begin function free
	.p2align	4
	.type	free,@function
free:                                   // @free
	.cfi_startproc
// %bb.0:                               // %"$1"
	ret
.Lfunc_end537:
	.size	free, .Lfunc_end537-free
	.cfi_endproc
                                        // -- End function
	.globl	putc_unlocked                   // -- Begin function putc_unlocked
	.p2align	4
	.type	putc_unlocked,@function
putc_unlocked:                          // @putc_unlocked
	.cfi_startproc
// %bb.0:                               // %"$1"
	mov	w0, wzr
	ret
.Lfunc_end538:
	.size	putc_unlocked, .Lfunc_end538-putc_unlocked
	.cfi_endproc
                                        // -- End function
	.globl	getc_unlocked                   // -- Begin function getc_unlocked
	.p2align	4
	.type	getc_unlocked,@function
getc_unlocked:                          // @getc_unlocked
	.cfi_startproc
// %bb.0:                               // %"$1"
	mov	w0, wzr
	ret
.Lfunc_end539:
	.size	getc_unlocked, .Lfunc_end539-getc_unlocked
	.cfi_endproc
                                        // -- End function
	.globl	nErrno                          // -- Begin function nErrno
	.p2align	4
	.type	nErrno,@function
nErrno:                                 // @nErrno
	.cfi_startproc
// %bb.0:                               // %"$1"
	mov	w0, wzr
	ret
.Lfunc_end540:
	.size	nErrno, .Lfunc_end540-nErrno
	.cfi_endproc
                                        // -- End function
	.globl	gErrno                          // -- Begin function gErrno
	.p2align	4
	.type	gErrno,@function
gErrno:                                 // @gErrno
	.cfi_startproc
// %bb.0:                               // %"$1"
	mov	w0, wzr
	ret
.Lfunc_end541:
	.size	gErrno, .Lfunc_end541-gErrno
	.cfi_endproc
                                        // -- End function
	.globl	finish                          // -- Begin function finish
	.p2align	4
	.type	finish,@function
finish:                                 // @finish
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	adrp	x0, .L$1
	add	x0, x0, :lo12:.L$1
	bl	outString
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end542:
	.size	finish, .Lfunc_end542-finish
	.cfi_endproc
                                        // -- End function
	.globl	giveup                          // -- Begin function giveup
	.p2align	4
	.type	giveup,@function
giveup:                                 // @giveup
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x30, x19, [sp, #-16]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w19, -8
	.cfi_offset w30, -16
	mov	x19, x1
	bl	outString
	bl	space
	mov	x0, x19
	bl	outString
	bl	newline
	mov	w0, #1
	bl	finish
.Lfunc_end543:
	.size	giveup, .Lfunc_end543-giveup
	.cfi_endproc
                                        // -- End function
	.globl	bye                             // -- Begin function bye
	.p2align	4
	.type	bye,@function
bye:                                    // @bye
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	adrp	x0, .L$2
	add	x0, x0, :lo12:.L$2
	bl	outString
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end544:
	.size	bye, .Lfunc_end544-bye
	.cfi_endproc
                                        // -- End function
	.globl	execErr                         // -- Begin function execErr
	.p2align	4
	.type	execErr,@function
execErr:                                // @execErr
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x30, x19, [sp, #-16]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w19, -8
	.cfi_offset w30, -16
	mov	x19, x0
	adrp	x0, .L$3
	add	x0, x0, :lo12:.L$3
	bl	outString
	bl	space
	mov	x0, x19
	bl	outString
	bl	newline
	adrp	x0, .L$4
	add	x0, x0, :lo12:.L$4
	bl	outString
	ldp	x30, x19, [sp], #16             // 16-byte Folded Reload
	ret
.Lfunc_end545:
	.size	execErr, .Lfunc_end545-execErr
	.cfi_endproc
                                        // -- End function
	.globl	sigTerm                         // -- Begin function sigTerm
	.p2align	4
	.type	sigTerm,@function
sigTerm:                                // @sigTerm
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	adrp	x0, .L$5
	add	x0, x0, :lo12:.L$5
	bl	outString
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end546:
	.size	sigTerm, .Lfunc_end546-sigTerm
	.cfi_endproc
                                        // -- End function
	.globl	sig                             // -- Begin function sig
	.p2align	4
	.type	sig,@function
sig:                                    // @sig
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-32]!                // 8-byte Folded Spill
	stp	x20, x19, [sp, #16]             // 16-byte Folded Spill
	.cfi_def_cfa_offset 32
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w30, -32
	mov	w20, #4480
	movk	w20, #65412, lsl #16
	ldrsw	x19, [x20, #3724]
	and	x8, x19, #0x1f
	mov	w9, #1
	lsl	x8, x9, x8
	str	w8, [x20]
	bl	newline
	adrp	x0, .L$6
	add	x0, x0, :lo12:.L$6
	bl	outString
	mov	x0, x19
	bl	outWord
	bl	newline
	adrp	x8, ($Signal)
	add	x8, x8, :lo12:($Signal)
	ldr	w9, [x8]
	add	w9, w9, #1                      // =1
	str	w9, [x8]
	add	w9, w19, #1                     // =1
	sbfiz	x9, x9, #2, #32
	ldr	w10, [x8, x9]
	add	w10, w10, #1                    // =1
	str	w10, [x8, x9]
	str	w19, [x20, #3728]
	ldp	x20, x19, [sp, #16]             // 16-byte Folded Reload
	ldr	x30, [sp], #32                  // 8-byte Folded Reload
	ret
.Lfunc_end547:
	.size	sig, .Lfunc_end547-sig
	.cfi_endproc
                                        // -- End function
	.globl	extErr                          // -- Begin function extErr
	.p2align	4
	.type	extErr,@function
extErr:                                 // @extErr
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	adrp	x2, .L$13
	add	x2, x2, :lo12:.L$13
	mov	x3, xzr
	bl	err
.Lfunc_end548:
	.size	extErr, .Lfunc_end548-extErr
	.cfi_endproc
                                        // -- End function
	.globl	lockErr                         // -- Begin function lockErr
	.p2align	4
	.type	lockErr,@function
lockErr:                                // @lockErr
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	adrp	x2, .L$21
	add	x2, x2, :lo12:.L$21
	mov	x0, xzr
	mov	x1, xzr
	mov	x3, xzr
	bl	err
.Lfunc_end549:
	.size	lockErr, .Lfunc_end549-lockErr
	.cfi_endproc
                                        // -- End function
	.globl	forkErr                         // -- Begin function forkErr
	.p2align	4
	.type	forkErr,@function
forkErr:                                // @forkErr
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	adrp	x2, .L$22
	add	x2, x2, :lo12:.L$22
	mov	x1, xzr
	mov	x3, xzr
	bl	err
.Lfunc_end550:
	.size	forkErr, .Lfunc_end550-forkErr
	.cfi_endproc
                                        // -- End function
	.globl	evLst                           // -- Begin function evLst
	.p2align	4
	.type	evLst,@function
evLst:                                  // @evLst
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x30, x19, [sp, #-16]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w19, -8
	.cfi_offset w30, -16
	mov	x19, x0
	ldp	w1, w8, [x0]
	bfi	x1, x8, #32, #32
	tst	x1, #0x6
	b.ne	.LBB551_4
// %bb.1:                               // %"$3"
	tbz	w1, #3, .LBB551_3
// %bb.2:                               // %"$6"
	ldp	w1, w8, [x1]
	bfi	x1, x8, #32, #32
	b	.LBB551_4
.LBB551_3:                              // %"$5"
	mov	x0, x1
	bl	evList
	mov	x1, x0
.LBB551_4:                              // %"$2"
	tst	x1, #0xf
	cset	w8, eq
	adrp	x9, SymTab+8
	add	x9, x9, :lo12:SymTab+8
	cmp	x1, x9
	cset	w9, eq
	orr	w8, w8, w9
	tbz	w8, #0, .LBB551_6
// %bb.5:                               // %"$10"
	mov	x0, x1
	ldp	x30, x19, [sp], #16             // 16-byte Folded Reload
	ret
.LBB551_6:                              // %"$9"
	mov	x0, x19
	bl	lstErr
.Lfunc_end551:
	.size	evLst, .Lfunc_end551-evLst
	.cfi_endproc
                                        // -- End function
	.globl	_tty                            // -- Begin function _tty
	.p2align	4
	.type	_tty,@function
_tty:                                   // @_tty
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	adrp	x0, .L$24
	add	x0, x0, :lo12:.L$24
	bl	outString
	adrp	x0, SymTab+8
	add	x0, x0, :lo12:SymTab+8
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end552:
	.size	_tty, .Lfunc_end552-_tty
	.cfi_endproc
                                        // -- End function
	.globl	_raw                            // -- Begin function _raw
	.p2align	4
	.type	_raw,@function
_raw:                                   // @_raw
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	adrp	x0, .L$25
	add	x0, x0, :lo12:.L$25
	bl	outString
	adrp	x0, SymTab+8
	add	x0, x0, :lo12:SymTab+8
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end553:
	.size	_raw, .Lfunc_end553-_raw
	.cfi_endproc
                                        // -- End function
	.globl	_alarm                          // -- Begin function _alarm
	.p2align	4
	.type	_alarm,@function
_alarm:                                 // @_alarm
	.cfi_startproc
// %bb.0:                               // %"$1"
	ldp	w9, w8, [x0, #8]
	bfi	x9, x8, #32, #32
	ldp	w0, w8, [x9, #8]
	bfi	x0, x8, #32, #32
	adrp	x8, gcData+16
	str	x0, [x8, :lo12:gcData+16]
	ret
.Lfunc_end554:
	.size	_alarm, .Lfunc_end554-_alarm
	.cfi_endproc
                                        // -- End function
	.globl	_sigio                          // -- Begin function _sigio
	.p2align	4
	.type	_sigio,@function
_sigio:                                 // @_sigio
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	adrp	x0, .L$26
	add	x0, x0, :lo12:.L$26
	bl	outString
	adrp	x0, SymTab+8
	add	x0, x0, :lo12:SymTab+8
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end555:
	.size	_sigio, .Lfunc_end555-_sigio
	.cfi_endproc
                                        // -- End function
	.globl	_kids                           // -- Begin function _kids
	.p2align	4
	.type	_kids,@function
_kids:                                  // @_kids
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	adrp	x0, .L$27
	add	x0, x0, :lo12:.L$27
	bl	outString
	adrp	x0, SymTab+8
	add	x0, x0, :lo12:SymTab+8
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end556:
	.size	_kids, .Lfunc_end556-_kids
	.cfi_endproc
                                        // -- End function
	.globl	box                             // -- Begin function box
	.p2align	4
	.type	box,@function
box:                                    // @box
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	mov	x8, x0
	tbnz	x0, #63, .LBB557_3
// %bb.1:                               // %"$2"
	tst	x8, #0xf000000000000000
	b.eq	.LBB557_5
// %bb.2:                               // %"$5"
	mov	x0, x8
	bl	boxNum
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.LBB557_3:                              // %"$3"
	neg	x8, x8
	tst	x8, #0xf000000000000000
	b.eq	.LBB557_6
// %bb.4:                               // %"$8"
	mov	x0, x8
	bl	boxNum
	b	.LBB557_7
.LBB557_5:                              // %"$6"
	mov	w0, #2
	bfi	x0, x8, #4, #60
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.LBB557_6:                              // %"$9"
	mov	w0, #2
	bfi	x0, x8, #4, #60
.LBB557_7:                              // %"$10"
	orr	x0, x0, #0x8
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end557:
	.size	box, .Lfunc_end557-box
	.cfi_endproc
                                        // -- End function
	.globl	cpyString                       // -- Begin function cpyString
	.p2align	4
	.type	cpyString,@function
cpyString:                              // @cpyString
	.cfi_startproc
// %bb.0:                               // %"$1"
	ldrb	w8, [x1]
	cbz	w8, .LBB558_2
.LBB558_1:                              // %"$3"
                                        // =>This Inner Loop Header: Depth=1
	ldrb	w8, [x1], #1
	strb	w8, [x0], #1
	ldrb	w8, [x1]
	cbnz	w8, .LBB558_1
.LBB558_2:                              // %"$4"
	ret
.Lfunc_end558:
	.size	cpyString, .Lfunc_end558-cpyString
	.cfi_endproc
                                        // -- End function
	.globl	mkStrE                          // -- Begin function mkStrE
	.p2align	4
	.type	mkStrE,@function
mkStrE:                                 // @mkStrE
	.cfi_startproc
// %bb.0:                               // %"$1"
	sub	sp, sp, #64                     // =64
	stp	x30, x21, [sp, #32]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #48]             // 16-byte Folded Spill
	.cfi_def_cfa_offset 64
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w30, -32
	mov	x19, x1
	mov	x20, x0
	mov	w8, #4
	mov	x9, sp
	mov	w10, #2
	str	x8, [sp]
	str	x10, [sp, #16]
	adrp	x21, env
	ldr	x8, [x21, :lo12:env]
	str	x8, [sp, #24]
	add	x8, x9, #16                     // =16
	str	x8, [x21, :lo12:env]
	cmp	x19, x20
	b.eq	.LBB559_3
.LBB559_1:                              // %"$3"
                                        // =>This Inner Loop Header: Depth=1
	ldrb	w0, [x20]
	cbz	w0, .LBB559_3
// %bb.2:                               // %"$5"
                                        //   in Loop: Header=BB559_1 Depth=1
	mov	x1, sp
	bl	byteSym
	add	x20, x20, #1                    // =1
	cmp	x19, x20
	b.ne	.LBB559_1
.LBB559_3:                              // %"$4"
	ldr	x0, [sp, #16]
	bl	consStr
	ldr	x8, [sp, #24]
	str	x8, [x21, :lo12:env]
	ldp	x20, x19, [sp, #48]             // 16-byte Folded Reload
	ldp	x30, x21, [sp, #32]             // 16-byte Folded Reload
	add	sp, sp, #64                     // =64
	ret
.Lfunc_end559:
	.size	mkStrE, .Lfunc_end559-mkStrE
	.cfi_endproc
                                        // -- End function
	.globl	openErr                         // -- Begin function openErr
	.p2align	4
	.type	openErr,@function
openErr:                                // @openErr
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	adrp	x2, .L$31
	add	x2, x2, :lo12:.L$31
	mov	x3, xzr
	bl	err
.Lfunc_end560:
	.size	openErr, .Lfunc_end560-openErr
	.cfi_endproc
                                        // -- End function
	.globl	closeErr                        // -- Begin function closeErr
	.p2align	4
	.type	closeErr,@function
closeErr:                               // @closeErr
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	adrp	x2, .L$32
	add	x2, x2, :lo12:.L$32
	mov	x0, xzr
	mov	x1, xzr
	mov	x3, xzr
	bl	err
.Lfunc_end561:
	.size	closeErr, .Lfunc_end561-closeErr
	.cfi_endproc
                                        // -- End function
	.globl	pipeErr                         // -- Begin function pipeErr
	.p2align	4
	.type	pipeErr,@function
pipeErr:                                // @pipeErr
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	adrp	x2, .L$33
	add	x2, x2, :lo12:.L$33
	mov	x1, xzr
	mov	x3, xzr
	bl	err
.Lfunc_end562:
	.size	pipeErr, .Lfunc_end562-pipeErr
	.cfi_endproc
                                        // -- End function
	.globl	badFd                           // -- Begin function badFd
	.p2align	4
	.type	badFd,@function
badFd:                                  // @badFd
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	adrp	x2, .L$37
	add	x2, x2, :lo12:.L$37
	mov	x3, xzr
	bl	err
.Lfunc_end563:
	.size	badFd, .Lfunc_end563-badFd
	.cfi_endproc
                                        // -- End function
	.globl	selectErr                       // -- Begin function selectErr
	.p2align	4
	.type	selectErr,@function
selectErr:                              // @selectErr
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	adrp	x2, .L$38
	add	x2, x2, :lo12:.L$38
	mov	x1, xzr
	mov	x3, xzr
	bl	err
.Lfunc_end564:
	.size	selectErr, .Lfunc_end564-selectErr
	.cfi_endproc
                                        // -- End function
	.globl	_getUART1                       // -- Begin function _getUART1
	.p2align	4
	.type	_getUART1,@function
_getUART1:                              // @_getUART1
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x30, x19, [sp, #-16]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w19, -8
	.cfi_offset w30, -16
	mov	w8, #20544
	movk	w8, #65057, lsl #16
.LBB565_1:                              // %"$2"
                                        // =>This Inner Loop Header: Depth=1
	ldrb	w9, [x8, #20]
	tbz	w9, #0, .LBB565_1
// %bb.2:                               // %"$4"
	ldr	w19, [x8]
	adrp	x8, ($Put)
	ldr	x8, [x8, :lo12:($Put)]
	mov	w0, w19
	blr	x8
	adrp	x8, ($Chr)
	str	w19, [x8, :lo12:($Chr)]
	mov	w0, w19
	ldp	x30, x19, [sp], #16             // 16-byte Folded Reload
	ret
.Lfunc_end565:
	.size	_getUART1, .Lfunc_end565-_getUART1
	.cfi_endproc
                                        // -- End function
	.globl	_putOutUART0                    // -- Begin function _putOutUART0
	.p2align	4
	.type	_putOutUART0,@function
_putOutUART0:                           // @_putOutUART0
	.cfi_startproc
// %bb.0:                               // %"$1"
	mov	w8, #4096
	movk	w8, #65056, lsl #16
.LBB566_1:                              // %"$2"
                                        // =>This Inner Loop Header: Depth=1
	ldrb	w9, [x8, #24]
	tbnz	w9, #5, .LBB566_1
// %bb.2:                               // %"$4"
	and	w9, w0, #0xff
	str	w9, [x8]
	ret
.Lfunc_end566:
	.size	_putOutUART0, .Lfunc_end566-_putOutUART0
	.cfi_endproc
                                        // -- End function
	.globl	bufAo                           // -- Begin function bufAo
	.p2align	4
	.type	bufAo,@function
bufAo:                                  // @bufAo
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x30, x19, [sp, #-16]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w19, -8
	.cfi_offset w30, -16
	mov	w19, w1
	cmp	w1, #16                         // =16
	b.lt	.LBB567_2
// %bb.1:                               // %"$2"
	lsr	w1, w19, #4
	bl	bufAo
	and	w19, w19, #0xf
.LBB567_2:                              // %"$3"
	add	w8, w19, #64                    // =64
	strb	w8, [x0], #1
	ldp	x30, x19, [sp], #16             // 16-byte Folded Reload
	ret
.Lfunc_end567:
	.size	bufAo, .Lfunc_end567-bufAo
	.cfi_endproc
                                        // -- End function
	.globl	prSym                           // -- Begin function prSym
	.p2align	4
	.type	prSym,@function
prSym:                                  // @prSym
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	sub	x8, x0, #8                      // =8
.LBB568_1:                              // %"$2"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w0, w9, [x8]
	bfi	x0, x9, #32, #32
	tst	x0, #0x6
	b.ne	.LBB568_3
// %bb.2:                               // %"$3"
                                        //   in Loop: Header=BB568_1 Depth=1
	add	x8, x0, #8                      // =8
	b	.LBB568_1
.LBB568_3:                              // %"$4"
	bl	prName
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end568:
	.size	prSym, .Lfunc_end568-prSym
	.cfi_endproc
                                        // -- End function
	.globl	tglString                       // -- Begin function tglString
	.p2align	4
	.type	tglString,@function
tglString:                              // @tglString
	.cfi_startproc
// %bb.0:                               // %"$1"
	adrp	x8, ($Put)
	ldr	w9, [x0, #32]!
	ldr	w10, [x0, #4]
	ldr	x11, [x8, :lo12:($Put)]
	lsr	x12, x11, #32
	stp	w11, w12, [x0]
	bfi	x9, x10, #32, #32
	str	x9, [x8, :lo12:($Put)]
	ret
.Lfunc_end569:
	.size	tglString, .Lfunc_end569-tglString
	.cfi_endproc
                                        // -- End function
	.globl	repl                            // -- Begin function repl
	.p2align	4
	.type	repl,@function
repl:                                   // @repl
	.cfi_startproc
// %bb.0:                               // %"$1"
	sub	sp, sp, #240                    // =240
	stp	x29, x30, [sp, #144]            // 16-byte Folded Spill
	stp	x28, x27, [sp, #160]            // 16-byte Folded Spill
	stp	x26, x25, [sp, #176]            // 16-byte Folded Spill
	stp	x24, x23, [sp, #192]            // 16-byte Folded Spill
	stp	x22, x21, [sp, #208]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #224]            // 16-byte Folded Spill
	.cfi_def_cfa_offset 240
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	mov	x19, x1
	adrp	x23, env
	add	x23, x23, :lo12:env
	ldr	x9, [x23, #88]
	ldr	x8, [x23]
	str	x9, [sp, #24]                   // 8-byte Folded Spill
	stp	x9, x8, [sp, #128]
	adrp	x26, SymTab+8
	add	x26, x26, :lo12:SymTab+8
	add	x8, sp, #128                    // =128
	ldp	x9, x10, [x26, #104]
	stp	x10, x9, [sp, #8]               // 16-byte Folded Spill
	stp	x9, x8, [sp, #112]
	add	x8, sp, #112                    // =112
	stp	x10, x8, [sp, #96]
	adrp	x28, gcData
	add	x28, x28, :lo12:gcData
	add	x8, sp, #96                     // =96
	ldp	x9, x24, [x28]
	str	x9, [sp]                        // 8-byte Folded Spill
	stp	x9, x8, [sp, #80]
	add	x8, sp, #80                     // =80
	stp	x24, x8, [sp, #64]
	add	x8, sp, #64                     // =64
	str	x8, [x23]
	mov	w9, #10
	stp	x9, x8, [sp, #48]
	add	x8, sp, #48                     // =48
	str	x8, [x23]
	stp	x9, x8, [sp, #32]
	add	x8, sp, #32                     // =32
	str	x8, [x23]
	stp	x26, x26, [x26, #104]
	adrp	x25, ($Chr)
	adrp	x27, SymTab+376
	add	x27, x27, :lo12:SymTab+376
	stp	x26, x26, [x28]
	adrp	x20, .L$49
	add	x20, x20, :lo12:.L$49
	adrp	x29, SymTab+376
	mov	x22, x26
	b	.LBB570_3
.LBB570_1:                              // %"$8"
                                        //   in Loop: Header=BB570_3 Depth=1
	mov	x0, x21
	bl	evList
	mov	x21, x0
.LBB570_2:                              // %"$5"
                                        //   in Loop: Header=BB570_3 Depth=1
	ldr	x8, [x27, #16]
	str	x8, [x27, #32]
	str	x22, [x27, #16]
	str	x21, [x27]
	mov	x0, x20
	bl	outString
	mov	x0, x21
	bl	print
	bl	newline
	mov	x22, x21
.LBB570_3:                              // %"$2"
                                        // =>This Inner Loop Header: Depth=1
	mov	x0, x19
	bl	outString
	mov	w0, #10
	bl	read1
	str	wzr, [x25, :lo12:($Chr)]
	cmp	x0, x26
	b.eq	.LBB570_7
// %bb.4:                               // %"$3"
                                        //   in Loop: Header=BB570_3 Depth=1
	mov	x21, x0
	str	x0, [sp, #48]
	bl	newline
	ldr	x22, [x29, :lo12:SymTab+376]
	str	x22, [sp, #32]
	tst	x21, #0x6
	b.ne	.LBB570_2
// %bb.5:                               // %"$6"
                                        //   in Loop: Header=BB570_3 Depth=1
	tbz	w21, #3, .LBB570_1
// %bb.6:                               // %"$9"
                                        //   in Loop: Header=BB570_3 Depth=1
	ldp	w21, w8, [x21]
	bfi	x21, x8, #32, #32
	b	.LBB570_2
.LBB570_7:                              // %"$4"
	ldr	x8, [sp]                        // 8-byte Folded Reload
	stp	x8, x24, [x28]
	adrp	x8, SymTab+112
	add	x8, x8, :lo12:SymTab+112
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	ldr	x9, [sp, #16]                   // 8-byte Folded Reload
	stp	x9, x10, [x8]
	ldr	x8, [sp, #24]                   // 8-byte Folded Reload
	str	x8, [x23, #88]
	ldr	x8, [sp, #136]
	str	x8, [x23]
	mov	x0, x22
	ldp	x20, x19, [sp, #224]            // 16-byte Folded Reload
	ldp	x22, x21, [sp, #208]            // 16-byte Folded Reload
	ldp	x24, x23, [sp, #192]            // 16-byte Folded Reload
	ldp	x26, x25, [sp, #176]            // 16-byte Folded Reload
	ldp	x28, x27, [sp, #160]            // 16-byte Folded Reload
	ldp	x29, x30, [sp, #144]            // 16-byte Folded Reload
	add	sp, sp, #240                    // =240
	ret
.Lfunc_end570:
	.size	repl, .Lfunc_end570-repl
	.cfi_endproc
                                        // -- End function
	.globl	dbRdErr                         // -- Begin function dbRdErr
	.p2align	4
	.type	dbRdErr,@function
dbRdErr:                                // @dbRdErr
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	adrp	x2, .L$51
	add	x2, x2, :lo12:.L$51
	mov	x0, xzr
	mov	x1, xzr
	mov	x3, xzr
	bl	err
.Lfunc_end571:
	.size	dbRdErr, .Lfunc_end571-dbRdErr
	.cfi_endproc
                                        // -- End function
	.globl	dbWrErr                         // -- Begin function dbWrErr
	.p2align	4
	.type	dbWrErr,@function
dbWrErr:                                // @dbWrErr
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	adrp	x2, .L$52
	add	x2, x2, :lo12:.L$52
	mov	x0, xzr
	mov	x1, xzr
	mov	x3, xzr
	bl	err
.Lfunc_end572:
	.size	dbWrErr, .Lfunc_end572-dbWrErr
	.cfi_endproc
                                        // -- End function
	.globl	jnlErr                          // -- Begin function jnlErr
	.p2align	4
	.type	jnlErr,@function
jnlErr:                                 // @jnlErr
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	adrp	x2, .L$53
	add	x2, x2, :lo12:.L$53
	mov	x1, xzr
	mov	x3, xzr
	bl	err
.Lfunc_end573:
	.size	jnlErr, .Lfunc_end573-jnlErr
	.cfi_endproc
                                        // -- End function
	.globl	dbSyncErr                       // -- Begin function dbSyncErr
	.p2align	4
	.type	dbSyncErr,@function
dbSyncErr:                              // @dbSyncErr
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	adrp	x2, .L$54
	add	x2, x2, :lo12:.L$54
	mov	x1, xzr
	mov	x3, xzr
	bl	err
.Lfunc_end574:
	.size	dbSyncErr, .Lfunc_end574-dbSyncErr
	.cfi_endproc
                                        // -- End function
	.globl	dbfBuf                          // -- Begin function dbfBuf
	.p2align	4
	.type	dbfBuf,@function
dbfBuf:                                 // @dbfBuf
	.cfi_startproc
// %bb.0:                               // %"$1"
	ldrb	w9, [x0, #1]
	ldrb	w8, [x0]
	bfi	w8, w9, #8, #8
	adrp	x9, ($DBs)
	ldr	w9, [x9, :lo12:($DBs)]
	cmp	w9, w8
	b.le	.LBB575_2
// %bb.1:                               // %"$2"
	adrp	x9, ($DbFiles)
	ldr	x9, [x9, :lo12:($DbFiles)]
	mov	w10, #42
	mul	w8, w8, w10
	add	x0, x9, x8
	adrp	x8, ($DbFile)
	str	x0, [x8, :lo12:($DbFile)]
	ret
.LBB575_2:
	mov	x0, xzr
	ret
.Lfunc_end575:
	.size	dbfBuf, .Lfunc_end575-dbfBuf
	.cfi_endproc
                                        // -- End function
	.globl	tryLock                         // -- Begin function tryLock
	.p2align	4
	.type	tryLock,@function
tryLock:                                // @tryLock
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	adrp	x0, .L$58
	add	x0, x0, :lo12:.L$58
	bl	outString
	mov	w0, wzr
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end576:
	.size	tryLock, .Lfunc_end576-tryLock
	.cfi_endproc
                                        // -- End function
	.globl	wrBlock                         // -- Begin function wrBlock
	.p2align	4
	.type	wrBlock,@function
wrBlock:                                // @wrBlock
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	adrp	x0, .L$63
	add	x0, x0, :lo12:.L$63
	bl	outString
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end577:
	.size	wrBlock, .Lfunc_end577-wrBlock
	.cfi_endproc
                                        // -- End function
	.globl	logBlock                        // -- Begin function logBlock
	.p2align	4
	.type	logBlock,@function
logBlock:                               // @logBlock
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	adrp	x0, .L$64
	add	x0, x0, :lo12:.L$64
	bl	outString
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end578:
	.size	logBlock, .Lfunc_end578-logBlock
	.cfi_endproc
                                        // -- End function
	.globl	_extQ                           // -- Begin function _extQ
	.p2align	4
	.type	_extQ,@function
_extQ:                                  // @_extQ
	.cfi_startproc
// %bb.0:                               // %"$1"
	adrp	x0, SymTab+8
	add	x0, x0, :lo12:SymTab+8
	ret
.Lfunc_end579:
	.size	_extQ, .Lfunc_end579-_extQ
	.cfi_endproc
                                        // -- End function
	.globl	cleanUp                         // -- Begin function cleanUp
	.p2align	4
	.type	cleanUp,@function
cleanUp:                                // @cleanUp
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-48]!                // 8-byte Folded Spill
	stp	x22, x21, [sp, #16]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #32]             // 16-byte Folded Spill
	.cfi_def_cfa_offset 48
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w30, -48
	mov	x20, x0
	adrp	x8, ($DbFile)
	ldr	x22, [x8, :lo12:($DbFile)]
	add	x1, sp, #8                      // =8
	mov	x0, xzr
	mov	w2, #6
	bl	blkPeek
	add	x0, sp, #8                      // =8
	bl	getAdr
	mov	x19, x0
	add	x1, sp, #8                      // =8
	mov	x0, x20
	bl	setAdr
	mov	x21, xzr
.LBB580_1:                              // %"$2"
                                        // =>This Inner Loop Header: Depth=1
	add	x1, sp, #8                      // =8
	mov	x0, x21
	mov	w2, #6
	bl	blkPoke
	ldrsw	x8, [x22, #8]
	lsl	x21, x20, x8
	add	x1, sp, #8                      // =8
	mov	x0, x21
	mov	w2, #6
	bl	blkPeek
	ldrb	w8, [sp, #8]
	and	w8, w8, #0xc0
	strb	w8, [sp, #8]
	add	x0, sp, #8                      // =8
	bl	getAdr
	mov	x20, x0
	cbnz	x0, .LBB580_1
// %bb.2:                               // %"$5"
	add	x1, sp, #8                      // =8
	mov	x0, x19
	bl	setAdr
	add	x1, sp, #8                      // =8
	mov	x0, x21
	mov	w2, #6
	bl	blkPoke
	ldp	x20, x19, [sp, #32]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #16]             // 16-byte Folded Reload
	ldr	x30, [sp], #48                  // 8-byte Folded Reload
	ret
.Lfunc_end580:
	.size	cleanUp, .Lfunc_end580-cleanUp
	.cfi_endproc
                                        // -- End function
	.globl	putBlock                        // -- Begin function putBlock
	.p2align	4
	.type	putBlock,@function
putBlock:                               // @putBlock
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x30, x23, [sp, #-48]!           // 16-byte Folded Spill
	stp	x22, x21, [sp, #16]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #32]             // 16-byte Folded Spill
	.cfi_def_cfa_offset 48
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w30, -48
	mov	w19, w0
	adrp	x22, ($BlkPtr)
	ldr	x8, [x22, :lo12:($BlkPtr)]
	adrp	x9, ($BlkEnd)
	ldr	x9, [x9, :lo12:($BlkEnd)]
	cmp	x8, x9
	b.ne	.LBB581_5
// %bb.1:                               // %"$2"
	adrp	x8, ($BlkLink)
	ldr	x20, [x8, :lo12:($BlkLink)]
	cbz	x20, .LBB581_3
// %bb.2:                               // %"$5"
	bl	wrBlock
	mov	x0, x20
	bl	rdBlock
	mov	x20, x0
	b	.LBB581_4
.LBB581_3:                              // %"$4"
	bl	newBlock
	mov	x21, x0
	adrp	x8, ($DbBlock)
	ldr	x20, [x8, :lo12:($DbBlock)]
	ldrb	w23, [x20]
	orr	x0, x0, x23
	mov	x1, x20
	bl	setAdr
	bl	wrBlock
	adrp	x8, ($BlkIndex)
	str	x21, [x8, :lo12:($BlkIndex)]
	cmp	w23, #63                        // =63
	cinc	x0, x23, ne
	mov	x1, x20
	bl	setAdr
.LBB581_4:                              // %"$6"
	add	x8, x20, #6                     // =6
.LBB581_5:                              // %"$3"
	strb	w19, [x8], #1
	str	x8, [x22, :lo12:($BlkPtr)]
	ldp	x20, x19, [sp, #32]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #16]             // 16-byte Folded Reload
	ldp	x30, x23, [sp], #48             // 16-byte Folded Reload
	ret
.Lfunc_end581:
	.size	putBlock, .Lfunc_end581-putBlock
	.cfi_endproc
                                        // -- End function
	.globl	ignLog                          // -- Begin function ignLog
	.p2align	4
	.type	ignLog,@function
ignLog:                                 // @ignLog
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	adrp	x0, .L$66
	add	x0, x0, :lo12:.L$66
	bl	outString
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end582:
	.size	ignLog, .Lfunc_end582-ignLog
	.cfi_endproc
                                        // -- End function
	.globl	transaction                     // -- Begin function transaction
	.p2align	4
	.type	transaction,@function
transaction:                            // @transaction
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	adrp	x0, .L$67
	add	x0, x0, :lo12:.L$67
	bl	outString
	mov	w0, wzr
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end583:
	.size	transaction, .Lfunc_end583-transaction
	.cfi_endproc
                                        // -- End function
	.globl	fsyncDB                         // -- Begin function fsyncDB
	.p2align	4
	.type	fsyncDB,@function
fsyncDB:                                // @fsyncDB
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	adrp	x0, .L$68
	add	x0, x0, :lo12:.L$68
	bl	outString
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end584:
	.size	fsyncDB, .Lfunc_end584-fsyncDB
	.cfi_endproc
                                        // -- End function
	.globl	restore                         // -- Begin function restore
	.p2align	4
	.type	restore,@function
restore:                                // @restore
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	adrp	x0, .L$69
	add	x0, x0, :lo12:.L$69
	bl	outString
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end585:
	.size	restore, .Lfunc_end585-restore
	.cfi_endproc
                                        // -- End function
	.globl	truncLog                        // -- Begin function truncLog
	.p2align	4
	.type	truncLog,@function
truncLog:                               // @truncLog
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	adrp	x0, .L$70
	add	x0, x0, :lo12:.L$70
	bl	outString
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end586:
	.size	truncLog, .Lfunc_end586-truncLog
	.cfi_endproc
                                        // -- End function
	.globl	brkLoad                         // -- Begin function brkLoad
	.p2align	4
	.type	brkLoad,@function
brkLoad:                                // @brkLoad
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-32]!           // 16-byte Folded Spill
	stp	x20, x19, [sp, #16]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 32
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w30, -24
	.cfi_offset w29, -32
	adrp	x8, env+16
	ldr	x8, [x8, :lo12:env+16]
	cbnz	x8, .LBB587_2
// %bb.1:                               // %"$2"
	adrp	x20, env+8
	add	x20, x20, :lo12:env+8
	adrp	x19, SymTab+8
	add	x19, x19, :lo12:SymTab+8
	ldr	x8, [x20]
	add	x9, x19, #368                   // =368
	ldr	x10, [x19, #368]
	mov	x11, sp
	sub	x12, x11, #32                   // =32
	mov	sp, x12
	lsr	x13, x10, #32
	lsr	x14, x9, #32
	stp	w10, w13, [x11, #-32]
	stp	w9, w14, [x11, #-24]
	lsr	x9, x8, #32
	stp	w8, w9, [x11, #-16]
	add	x8, x19, #528                   // =528
	ldr	x9, [x19, #528]
	stp	wzr, wzr, [x11, #-8]
	mov	x10, sp
	sub	x11, x10, #32                   // =32
	mov	sp, x11
	lsr	x13, x9, #32
	stp	w9, w13, [x10, #-32]
	lsr	x9, x8, #32
	stp	w8, w9, [x10, #-24]
	lsr	x8, x12, #32
	stp	w12, w8, [x10, #-16]
	add	x8, x19, #512                   // =512
	ldr	x9, [x19, #512]
	str	x0, [x19, #528]
	mov	x10, sp
	sub	x12, x10, #32                   // =32
	mov	sp, x12
	lsr	x13, x9, #32
	lsr	x14, x8, #32
	stp	w9, w13, [x10, #-32]
	stp	w8, w14, [x10, #-24]
	lsr	x8, x11, #32
	stp	w11, w8, [x10, #-16]
	stp	x12, x12, [x20]
	str	x19, [x19, #512]
	bl	print
	bl	newline
	adrp	x1, .L$81
	add	x1, x1, :lo12:.L$81
	mov	x0, xzr
	mov	x2, x19
	bl	repl
	ldr	x0, [x19, #528]
	ldr	x8, [x20]
	ldp	w10, w9, [x8]
	bfi	x10, x9, #32, #32
	str	x10, [x19, #512]
	ldp	w8, w9, [x8, #16]
	bfi	x8, x9, #32, #32
	ldp	w10, w9, [x8]
	bfi	x10, x9, #32, #32
	str	x10, [x19, #528]
	ldp	w8, w9, [x8, #16]
	bfi	x8, x9, #32, #32
	ldp	w10, w9, [x8]
	bfi	x10, x9, #32, #32
	str	x10, [x19, #368]
	ldp	w8, w9, [x8, #16]
	bfi	x8, x9, #32, #32
	stp	x8, xzr, [x20]
.LBB587_2:                              // %"$3"
	mov	sp, x29
	ldp	x20, x19, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #32             // 16-byte Folded Reload
	ret
.Lfunc_end587:
	.size	brkLoad, .Lfunc_end587-brkLoad
	.cfi_endproc
                                        // -- End function
	.globl	_break                          // -- Begin function _break
	.p2align	4
	.type	_break,@function
_break:                                 // @_break
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-16]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 16
	.cfi_offset w30, -16
	ldp	w0, w8, [x0, #8]
	adrp	x9, SymTab+8
	add	x9, x9, :lo12:SymTab+8
	bfi	x0, x8, #32, #32
	ldr	x8, [x9, #592]
	cmp	x8, x9
	b.eq	.LBB588_2
// %bb.1:                               // %"$2"
	bl	brkLoad
.LBB588_2:                              // %"$3"
	tst	x0, #0x6
	b.eq	.LBB588_4
// %bb.3:                               // %"$4"
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.LBB588_4:                              // %"$5"
	tbz	w0, #3, .LBB588_6
// %bb.5:                               // %"$8"
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.LBB588_6:                              // %"$7"
	bl	evList
	ldr	x30, [sp], #16                  // 8-byte Folded Reload
	ret
.Lfunc_end588:
	.size	_break, .Lfunc_end588-_break
	.cfi_endproc
                                        // -- End function
	.globl	_e                              // -- Begin function _e
	.p2align	4
	.type	_e,@function
_e:                                     // @_e
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-64]!           // 16-byte Folded Spill
	stp	x24, x23, [sp, #16]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #32]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #48]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 64
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w30, -56
	.cfi_offset w29, -64
	adrp	x8, env+16
	ldr	x9, [x8, :lo12:env+16]
	cbz	x9, .LBB589_12
// %bb.1:                               // %"$3"
	adrp	x8, SymTab+8
	add	x8, x8, :lo12:SymTab+8
	ldr	x20, [x8, #592]
	adrp	x19, env
	ldr	x10, [x19, :lo12:env]
	mov	x11, sp
	sub	x21, x11, #16                   // =16
	mov	sp, x21
	lsr	x12, x20, #32
	stp	w20, w12, [x11, #-16]
	lsr	x12, x10, #32
	stp	w10, w12, [x11, #-8]
	ldr	x22, [x8, #368]
	str	x21, [x19, :lo12:env]
	mov	x10, sp
	sub	x11, x10, #16                   // =16
	mov	sp, x11
	lsr	x12, x22, #32
	stp	w22, w12, [x10, #-16]
	lsr	x12, x21, #32
	stp	w21, w12, [x10, #-8]
	ldr	x23, [x8, #512]
	str	x11, [x19, :lo12:env]
	mov	x10, sp
	sub	x12, x10, #16                   // =16
	mov	sp, x12
	lsr	x13, x23, #32
	stp	w23, w13, [x10, #-16]
	lsr	x13, x11, #32
	stp	w11, w13, [x10, #-8]
	str	x12, [x19, :lo12:env]
	str	x8, [x8, #592]
	ldp	w11, w10, [x9]
	bfi	x11, x10, #32, #32
	str	x11, [x8, #512]
	ldp	w9, w10, [x9, #16]
	bfi	x9, x10, #32, #32
	ldp	w9, w10, [x9, #16]
	bfi	x9, x10, #32, #32
	ldp	w9, w10, [x9]
	bfi	x9, x10, #32, #32
	str	x9, [x8, #368]
	ldp	w24, w8, [x0, #8]
	bfi	x24, x8, #32, #32
	tst	x24, #0xf
	b.eq	.LBB589_7
// %bb.2:                               // %"$5"
	adrp	x8, SymTab+536
	ldr	x0, [x8, :lo12:SymTab+536]
	tst	x0, #0x6
	b.ne	.LBB589_11
// %bb.3:                               // %"$19"
	tbz	w0, #3, .LBB589_10
.LBB589_4:                              // %"$15"
	ldp	w0, w8, [x0]
	bfi	x0, x8, #32, #32
	b	.LBB589_11
.LBB589_5:                              // %"$8"
                                        //   in Loop: Header=BB589_7 Depth=1
	tst	x0, #0xf
	b.ne	.LBB589_7
// %bb.6:                               // %"$17"
                                        //   in Loop: Header=BB589_7 Depth=1
	bl	evList
.LBB589_7:                              // %"$7"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w0, w8, [x24]
	bfi	x0, x8, #32, #32
	ldp	w24, w8, [x24, #8]
	bfi	x24, x8, #32, #32
	tst	x24, #0xf
	b.eq	.LBB589_5
// %bb.8:                               // %"$10"
	tst	x0, #0x6
	b.ne	.LBB589_11
// %bb.9:                               // %"$12"
	tbnz	w0, #3, .LBB589_4
.LBB589_10:                             // %"$21"
	bl	evList
.LBB589_11:                             // %"$6"
	adrp	x8, SymTab+376
	add	x8, x8, :lo12:SymTab+376
	str	x23, [x8, #144]
	str	x22, [x8]
	str	x20, [x8, #224]
	ldp	w9, w8, [x21, #8]
	bfi	x9, x8, #32, #32
	str	x9, [x19, :lo12:env]
	mov	sp, x29
	ldp	x20, x19, [sp, #48]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #32]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #64             // 16-byte Folded Reload
	ret
.LBB589_12:                             // %"$2"
	adrp	x2, .L$82
	add	x2, x2, :lo12:.L$82
	mov	x1, xzr
	mov	x3, xzr
	bl	err
.Lfunc_end589:
	.size	_e, .Lfunc_end589-_e
	.cfi_endproc
                                        // -- End function
	.globl	trace                           // -- Begin function trace
	.p2align	4
	.type	trace,@function
trace:                                  // @trace
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-32]!                // 8-byte Folded Spill
	stp	x20, x19, [sp, #16]             // 16-byte Folded Spill
	.cfi_def_cfa_offset 32
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w30, -32
	mov	x19, x1
	cmp	w0, #65                         // =65
	mov	w8, #64
	csel	w8, w0, w8, lt
	sub	w20, w8, #1                     // =1
	tbnz	w20, #31, .LBB590_2
.LBB590_1:                              // %"$5"
                                        // =>This Inner Loop Header: Depth=1
	bl	space
	sub	w20, w20, #1                    // =1
	tbz	w20, #31, .LBB590_1
.LBB590_2:                              // %"$6"
	tst	x19, #0xf
	b.ne	.LBB590_4
// %bb.3:                               // %"$8"
	ldp	w0, w8, [x19]
	bfi	x0, x8, #32, #32
	bl	print
	bl	space
	ldp	w0, w8, [x19, #8]
	bfi	x0, x8, #32, #32
	bl	print
	bl	space
	adrp	x8, SymTab+424
	ldr	x19, [x8, :lo12:SymTab+424]
.LBB590_4:                              // %"$9"
	mov	x0, x19
	bl	print
	ldp	x20, x19, [sp, #16]             // 16-byte Folded Reload
	ldr	x30, [sp], #32                  // 8-byte Folded Reload
	ret
.Lfunc_end590:
	.size	trace, .Lfunc_end590-trace
	.cfi_endproc
                                        // -- End function
	.globl	_trace                          // -- Begin function _trace
	.p2align	4
	.type	_trace,@function
_trace:                                 // @_trace
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x30, x23, [sp, #-48]!           // 16-byte Folded Spill
	stp	x22, x21, [sp, #16]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #32]             // 16-byte Folded Spill
	.cfi_def_cfa_offset 48
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w30, -48
	ldp	w8, w9, [x0, #8]
	adrp	x20, SymTab+8
	add	x20, x20, :lo12:SymTab+8
	bfi	x8, x9, #32, #32
	ldr	x9, [x20, #592]
	cmp	x9, x20
	b.ne	.LBB591_5
// %bb.1:                               // %"$2"
	ldp	w8, w9, [x8, #8]
	bfi	x8, x9, #32, #32
	ldp	w19, w9, [x8, #8]
	bfi	x19, x9, #32, #32
.LBB591_2:                              // %"$5"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w20, w8, [x19]
	bfi	x20, x8, #32, #32
	ldp	w19, w8, [x19, #8]
	bfi	x19, x8, #32, #32
	tst	x19, #0xf
	b.ne	.LBB591_11
// %bb.3:                               // %"$6"
                                        //   in Loop: Header=BB591_2 Depth=1
	tst	x20, #0xf
	b.ne	.LBB591_2
// %bb.4:                               // %"$15"
                                        //   in Loop: Header=BB591_2 Depth=1
	mov	x0, x20
	bl	evList
	b	.LBB591_2
.LBB591_5:                              // %"$3"
	ldp	w10, w9, [x8, #8]
	ldp	w19, w11, [x8]
	bfi	x19, x11, #32, #32
	bfi	x10, x9, #32, #32
	ldp	w23, w8, [x10]
	bfi	x23, x8, #32, #32
	ldp	w21, w8, [x10, #8]
	bfi	x21, x8, #32, #32
	adrp	x22, env+144
	ldr	w8, [x22, :lo12:env+144]
	add	w0, w8, #1                      // =1
	str	w0, [x22, :lo12:env+144]
	mov	x1, x19
	bl	trace
	adrp	x0, .L$83
	add	x0, x0, :lo12:.L$83
	bl	outString
	tst	x23, #0xf
	b.ne	.LBB591_7
.LBB591_6:                              // %"$17"
                                        // =>This Inner Loop Header: Depth=1
	bl	space
	ldp	w9, w8, [x23]
	bfi	x9, x8, #32, #32
	ldp	w23, w8, [x23, #8]
	bfi	x23, x8, #32, #32
	ldp	w0, w8, [x9]
	bfi	x0, x8, #32, #32
	bl	print
	tst	x23, #0xf
	b.eq	.LBB591_6
.LBB591_7:                              // %"$18"
	adrp	x8, SymTab+376
	add	x8, x8, :lo12:SymTab+376
	cmp	x23, x8
	b.ne	.LBB591_14
// %bb.8:                               // %"$22.preheader"
	adrp	x20, env+96
	add	x20, x20, :lo12:env+96
.LBB591_9:                              // %"$22"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w20, w8, [x20]
	bfi	x20, x8, #32, #32
	tst	x20, #0xf
	b.ne	.LBB591_16
// %bb.10:                              // %"$23"
                                        //   in Loop: Header=BB591_9 Depth=1
	bl	space
	ldp	w0, w8, [x20, #8]
	bfi	x0, x8, #32, #32
	bl	print
	b	.LBB591_9
.LBB591_11:                             // %"$8"
	tst	x20, #0x6
	b.ne	.LBB591_26
// %bb.12:                              // %"$10"
	tbz	w20, #3, .LBB591_23
// %bb.13:                              // %"$13"
	ldp	w20, w8, [x20]
	bfi	x20, x8, #32, #32
	b	.LBB591_26
.LBB591_14:                             // %"$20"
	cmp	x23, x20
	b.eq	.LBB591_16
// %bb.15:                              // %"$26"
	bl	space
	ldp	w0, w8, [x23]
	bfi	x0, x8, #32, #32
	bl	print
.LBB591_16:                             // %"$19"
	bl	newline
.LBB591_17:                             // %"$27"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w20, w8, [x21]
	bfi	x20, x8, #32, #32
	ldp	w21, w8, [x21, #8]
	bfi	x21, x8, #32, #32
	tst	x21, #0xf
	b.ne	.LBB591_20
// %bb.18:                              // %"$28"
                                        //   in Loop: Header=BB591_17 Depth=1
	tst	x20, #0xf
	b.ne	.LBB591_17
// %bb.19:                              // %"$37"
                                        //   in Loop: Header=BB591_17 Depth=1
	mov	x0, x20
	bl	evList
	b	.LBB591_17
.LBB591_20:                             // %"$30"
	tst	x20, #0x6
	b.ne	.LBB591_25
// %bb.21:                              // %"$32"
	tbz	w20, #3, .LBB591_24
// %bb.22:                              // %"$35"
	ldp	w20, w8, [x20]
	bfi	x20, x8, #32, #32
	b	.LBB591_25
.LBB591_23:                             // %"$12"
	mov	x0, x20
	bl	evList
	mov	x20, x0
	b	.LBB591_26
.LBB591_24:                             // %"$34"
	mov	x0, x20
	bl	evList
	mov	x20, x0
.LBB591_25:                             // %"$29"
	ldr	w21, [x22, :lo12:env+144]
	mov	w0, w21
	mov	x1, x19
	bl	trace
	sub	w8, w21, #1                     // =1
	str	w8, [x22, :lo12:env+144]
	adrp	x0, .L$84
	add	x0, x0, :lo12:.L$84
	bl	outString
	mov	x0, x20
	bl	print
	bl	newline
.LBB591_26:                             // %"$4"
	mov	x0, x20
	ldp	x20, x19, [sp, #32]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #16]             // 16-byte Folded Reload
	ldp	x30, x23, [sp], #48             // 16-byte Folded Reload
	ret
.Lfunc_end591:
	.size	_trace, .Lfunc_end591-_trace
	.cfi_endproc
                                        // -- End function
	.globl	setPeri                         // -- Begin function setPeri
	.p2align	4
	.type	setPeri,@function
setPeri:                                // @setPeri
	.cfi_startproc
// %bb.0:                               // %"$1"
	stp	x29, x30, [sp, #-96]!           // 16-byte Folded Spill
	stp	x28, x27, [sp, #16]             // 16-byte Folded Spill
	stp	x26, x25, [sp, #32]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #48]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #64]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #80]             // 16-byte Folded Spill
	sub	sp, sp, #848                    // =848
	.cfi_def_cfa_offset 944
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	adrp	x9, SymTab+8
	add	x9, x9, :lo12:SymTab+8
	mov	x8, #68182605824
	movk	x8, #2
	str	x8, [x9, #672]
	str	x9, [x9, #704]
	adrp	x0, .L$87
	add	x0, x0, :lo12:.L$87
	bl	mkStr
	mov	x1, #2
	movk	x1, #63553, lsl #16
	movk	x1, #15, lsl #32
	bl	cons
	str	x0, [sp, #840]                  // 8-byte Folded Spill
	adrp	x0, .L$88
	add	x0, x0, :lo12:.L$88
	bl	mkStr
	mov	x1, #66
	movk	x1, #63553, lsl #16
	movk	x1, #15, lsl #32
	bl	cons
	str	x0, [sp, #832]                  // 8-byte Folded Spill
	adrp	x0, .L$89
	add	x0, x0, :lo12:.L$89
	bl	mkStr
	mov	x1, #130
	movk	x1, #63553, lsl #16
	movk	x1, #15, lsl #32
	bl	cons
	str	x0, [sp, #824]                  // 8-byte Folded Spill
	adrp	x0, .L$90
	add	x0, x0, :lo12:.L$90
	bl	mkStr
	mov	x1, #2050
	movk	x1, #63553, lsl #16
	movk	x1, #15, lsl #32
	bl	cons
	str	x0, [sp, #816]                  // 8-byte Folded Spill
	adrp	x0, .L$91
	add	x0, x0, :lo12:.L$91
	bl	mkStr
	mov	x1, #4098
	movk	x1, #63553, lsl #16
	movk	x1, #15, lsl #32
	bl	cons
	str	x0, [sp, #808]                  // 8-byte Folded Spill
	adrp	x0, .L$92
	add	x0, x0, :lo12:.L$92
	bl	mkStr
	mov	x1, #6146
	movk	x1, #63553, lsl #16
	movk	x1, #15, lsl #32
	bl	cons
	str	x0, [sp, #800]                  // 8-byte Folded Spill
	adrp	x0, .L$93
	add	x0, x0, :lo12:.L$93
	bl	mkStr
	mov	x1, #8194
	movk	x1, #63553, lsl #16
	movk	x1, #15, lsl #32
	bl	cons
	str	x0, [sp, #792]                  // 8-byte Folded Spill
	adrp	x0, .L$94
	add	x0, x0, :lo12:.L$94
	bl	mkStr
	mov	x1, #10242
	movk	x1, #63553, lsl #16
	movk	x1, #15, lsl #32
	bl	cons
	str	x0, [sp, #784]                  // 8-byte Folded Spill
	adrp	x0, .L$95
	add	x0, x0, :lo12:.L$95
	bl	mkStr
	mov	x1, #12290
	movk	x1, #63553, lsl #16
	movk	x1, #15, lsl #32
	bl	cons
	str	x0, [sp, #776]                  // 8-byte Folded Spill
	adrp	x0, .L$96
	add	x0, x0, :lo12:.L$96
	bl	mkStr
	mov	x1, #14338
	movk	x1, #63553, lsl #16
	movk	x1, #15, lsl #32
	bl	cons
	str	x0, [sp, #768]                  // 8-byte Folded Spill
	adrp	x0, .L$97
	add	x0, x0, :lo12:.L$97
	bl	mkStr
	mov	x1, #16386
	movk	x1, #63553, lsl #16
	movk	x1, #15, lsl #32
	bl	cons
	str	x0, [sp, #760]                  // 8-byte Folded Spill
	adrp	x0, .L$98
	add	x0, x0, :lo12:.L$98
	bl	mkStr
	mov	x1, #32770
	movk	x1, #63553, lsl #16
	movk	x1, #15, lsl #32
	bl	cons
	str	x0, [sp, #752]                  // 8-byte Folded Spill
	adrp	x0, .L$99
	add	x0, x0, :lo12:.L$99
	bl	mkStr
	mov	x1, #49154
	movk	x1, #63553, lsl #16
	movk	x1, #15, lsl #32
	bl	cons
	str	x0, [sp, #744]                  // 8-byte Folded Spill
	adrp	x0, .L$100
	add	x0, x0, :lo12:.L$100
	bl	mkStr
	mov	x1, #53250
	movk	x1, #63553, lsl #16
	movk	x1, #15, lsl #32
	bl	cons
	str	x0, [sp, #736]                  // 8-byte Folded Spill
	adrp	x0, .L$101
	add	x0, x0, :lo12:.L$101
	bl	mkStr
	mov	x1, #53314
	movk	x1, #63553, lsl #16
	movk	x1, #15, lsl #32
	bl	cons
	str	x0, [sp, #728]                  // 8-byte Folded Spill
	adrp	x0, .L$102
	add	x0, x0, :lo12:.L$102
	bl	mkStr
	mov	x1, #61442
	movk	x1, #63553, lsl #16
	movk	x1, #15, lsl #32
	bl	cons
	str	x0, [sp, #720]                  // 8-byte Folded Spill
	adrp	x0, .L$103
	add	x0, x0, :lo12:.L$103
	bl	mkStr
	mov	x1, #61698
	movk	x1, #63553, lsl #16
	movk	x1, #15, lsl #32
	bl	cons
	str	x0, [sp, #712]                  // 8-byte Folded Spill
	adrp	x0, .L$104
	add	x0, x0, :lo12:.L$104
	bl	mkStr
	mov	x1, #61954
	movk	x1, #63553, lsl #16
	movk	x1, #15, lsl #32
	bl	cons
	str	x0, [sp, #704]                  // 8-byte Folded Spill
	adrp	x0, .L$105
	add	x0, x0, :lo12:.L$105
	bl	mkStr
	mov	x1, #64770
	movk	x1, #63553, lsl #16
	movk	x1, #15, lsl #32
	bl	cons
	str	x0, [sp, #696]                  // 8-byte Folded Spill
	adrp	x0, .L$106
	add	x0, x0, :lo12:.L$106
	bl	mkStr
	mov	x1, #64834
	movk	x1, #63553, lsl #16
	movk	x1, #15, lsl #32
	bl	cons
	str	x0, [sp, #688]                  // 8-byte Folded Spill
	adrp	x0, .L$107
	add	x0, x0, :lo12:.L$107
	bl	mkStr
	mov	x1, #64898
	movk	x1, #63553, lsl #16
	movk	x1, #15, lsl #32
	bl	cons
	str	x0, [sp, #680]                  // 8-byte Folded Spill
	adrp	x0, .L$108
	add	x0, x0, :lo12:.L$108
	bl	mkStr
	mov	x1, #64962
	movk	x1, #63553, lsl #16
	movk	x1, #15, lsl #32
	bl	cons
	str	x0, [sp, #672]                  // 8-byte Folded Spill
	adrp	x0, .L$109
	add	x0, x0, :lo12:.L$109
	bl	mkStr
	mov	x1, #65026
	movk	x1, #63553, lsl #16
	movk	x1, #15, lsl #32
	bl	cons
	str	x0, [sp, #664]                  // 8-byte Folded Spill
	adrp	x0, .L$110
	add	x0, x0, :lo12:.L$110
	bl	mkStr
	mov	x1, #65090
	movk	x1, #63553, lsl #16
	movk	x1, #15, lsl #32
	bl	cons
	str	x0, [sp, #656]                  // 8-byte Folded Spill
	adrp	x0, .L$111
	add	x0, x0, :lo12:.L$111
	bl	mkStr
	mov	x1, #65154
	movk	x1, #63553, lsl #16
	movk	x1, #15, lsl #32
	bl	cons
	str	x0, [sp, #648]                  // 8-byte Folded Spill
	adrp	x0, .L$112
	add	x0, x0, :lo12:.L$112
	bl	mkStr
	mov	x1, #65218
	movk	x1, #63553, lsl #16
	movk	x1, #15, lsl #32
	bl	cons
	str	x0, [sp, #640]                  // 8-byte Folded Spill
	adrp	x0, .L$113
	add	x0, x0, :lo12:.L$113
	bl	mkStr
	mov	x1, #65282
	movk	x1, #63553, lsl #16
	movk	x1, #15, lsl #32
	bl	cons
	str	x0, [sp, #632]                  // 8-byte Folded Spill
	adrp	x0, .L$114
	add	x0, x0, :lo12:.L$114
	bl	mkStr
	mov	x1, #65346
	movk	x1, #63553, lsl #16
	movk	x1, #15, lsl #32
	bl	cons
	str	x0, [sp, #624]                  // 8-byte Folded Spill
	adrp	x0, .L$115
	add	x0, x0, :lo12:.L$115
	bl	mkStr
	mov	x1, #65410
	movk	x1, #63553, lsl #16
	movk	x1, #15, lsl #32
	bl	cons
	str	x0, [sp, #616]                  // 8-byte Folded Spill
	adrp	x0, .L$116
	add	x0, x0, :lo12:.L$116
	bl	mkStr
	mov	x1, #65218
	movk	x1, #63553, lsl #16
	movk	x1, #15, lsl #32
	bl	cons
	str	x0, [sp, #608]                  // 8-byte Folded Spill
	adrp	x0, .L$117
	add	x0, x0, :lo12:.L$117
	bl	mkStr
	mov	x1, #2
	movk	x1, #63554, lsl #16
	movk	x1, #15, lsl #32
	bl	cons
	str	x0, [sp, #600]                  // 8-byte Folded Spill
	adrp	x0, .L$118
	add	x0, x0, :lo12:.L$118
	bl	mkStr
	mov	x1, #66
	movk	x1, #63554, lsl #16
	movk	x1, #15, lsl #32
	bl	cons
	str	x0, [sp, #592]                  // 8-byte Folded Spill
	adrp	x0, .L$119
	add	x0, x0, :lo12:.L$119
	bl	mkStr
	mov	x1, #130
	movk	x1, #63554, lsl #16
	movk	x1, #15, lsl #32
	bl	cons
	str	x0, [sp, #584]                  // 8-byte Folded Spill
	adrp	x0, .L$120
	add	x0, x0, :lo12:.L$120
	bl	mkStr
	mov	x1, #194
	movk	x1, #63554, lsl #16
	movk	x1, #15, lsl #32
	bl	cons
	mov	x19, x0
	adrp	x0, .L$121
	add	x0, x0, :lo12:.L$121
	bl	mkStr
	mov	x1, #258
	movk	x1, #63554, lsl #16
	movk	x1, #15, lsl #32
	bl	cons
	mov	x20, x0
	adrp	x0, .L$122
	add	x0, x0, :lo12:.L$122
	bl	mkStr
	mov	x1, #322
	movk	x1, #63554, lsl #16
	movk	x1, #15, lsl #32
	bl	cons
	mov	x21, x0
	adrp	x0, .L$123
	add	x0, x0, :lo12:.L$123
	bl	mkStr
	mov	x1, #386
	movk	x1, #63554, lsl #16
	movk	x1, #15, lsl #32
	bl	cons
	mov	x22, x0
	adrp	x0, .L$124
	add	x0, x0, :lo12:.L$124
	bl	mkStr
	mov	x1, #450
	movk	x1, #63554, lsl #16
	movk	x1, #15, lsl #32
	bl	cons
	mov	x23, x0
	adrp	x0, .L$125
	add	x0, x0, :lo12:.L$125
	bl	mkStr
	mov	x1, #514
	movk	x1, #63554, lsl #16
	movk	x1, #15, lsl #32
	bl	cons
	mov	x24, x0
	adrp	x0, .L$126
	add	x0, x0, :lo12:.L$126
	bl	mkStr
	mov	x1, #578
	movk	x1, #63554, lsl #16
	movk	x1, #15, lsl #32
	bl	cons
	mov	x25, x0
	adrp	x0, .L$127
	add	x0, x0, :lo12:.L$127
	bl	mkStr
	mov	x1, #642
	movk	x1, #63554, lsl #16
	movk	x1, #15, lsl #32
	bl	cons
	mov	x26, x0
	adrp	x0, .L$128
	add	x0, x0, :lo12:.L$128
	bl	mkStr
	mov	x1, #3330
	movk	x1, #63554, lsl #16
	movk	x1, #15, lsl #32
	bl	cons
	mov	x27, x0
	adrp	x0, .L$129
	add	x0, x0, :lo12:.L$129
	bl	mkStr
	mov	x1, #3586
	movk	x1, #63554, lsl #16
	movk	x1, #15, lsl #32
	bl	cons
	mov	x28, x0
	adrp	x0, .L$130
	add	x0, x0, :lo12:.L$130
	bl	mkStr
	mov	x1, #4034
	movk	x1, #63554, lsl #16
	movk	x1, #15, lsl #32
	bl	cons
	mov	x29, x0
	adrp	x0, .L$131
	add	x0, x0, :lo12:.L$131
	bl	mkStr
	mov	x1, #2
	movk	x1, #63555, lsl #16
	movk	x1, #15, lsl #32
	bl	cons
	adrp	x1, SymTab+8
	add	x1, x1, :lo12:SymTab+8
	bl	cons
	mov	x1, x0
	mov	x0, x29
	bl	cons
	mov	x1, x0
	mov	x0, x28
	bl	cons
	mov	x1, x0
	mov	x0, x27
	bl	cons
	mov	x1, x0
	mov	x0, x26
	bl	cons
	mov	x1, x0
	mov	x0, x25
	bl	cons
	mov	x1, x0
	mov	x0, x24
	bl	cons
	mov	x1, x0
	mov	x0, x23
	bl	cons
	mov	x1, x0
	mov	x0, x22
	bl	cons
	mov	x1, x0
	mov	x0, x21
	bl	cons
	mov	x1, x0
	mov	x0, x20
	bl	cons
	mov	x1, x0
	mov	x0, x19
	bl	cons
	mov	x1, x0
	ldr	x0, [sp, #584]                  // 8-byte Folded Reload
	bl	cons
	mov	x1, x0
	ldr	x0, [sp, #592]                  // 8-byte Folded Reload
	bl	cons
	mov	x1, x0
	ldr	x0, [sp, #600]                  // 8-byte Folded Reload
	bl	cons
	mov	x1, x0
	ldr	x0, [sp, #608]                  // 8-byte Folded Reload
	bl	cons
	mov	x1, x0
	ldr	x0, [sp, #616]                  // 8-byte Folded Reload
	bl	cons
	mov	x1, x0
	ldr	x0, [sp, #624]                  // 8-byte Folded Reload
	bl	cons
	mov	x1, x0
	ldr	x0, [sp, #632]                  // 8-byte Folded Reload
	bl	cons
	mov	x1, x0
	ldr	x0, [sp, #640]                  // 8-byte Folded Reload
	bl	cons
	mov	x1, x0
	ldr	x0, [sp, #648]                  // 8-byte Folded Reload
	bl	cons
	mov	x1, x0
	ldr	x0, [sp, #656]                  // 8-byte Folded Reload
	bl	cons
	mov	x1, x0
	ldr	x0, [sp, #664]                  // 8-byte Folded Reload
	bl	cons
	mov	x1, x0
	ldr	x0, [sp, #672]                  // 8-byte Folded Reload
	bl	cons
	mov	x1, x0
	ldr	x0, [sp, #680]                  // 8-byte Folded Reload
	bl	cons
	mov	x1, x0
	ldr	x0, [sp, #688]                  // 8-byte Folded Reload
	bl	cons
	mov	x1, x0
	ldr	x0, [sp, #696]                  // 8-byte Folded Reload
	bl	cons
	mov	x1, x0
	ldr	x0, [sp, #704]                  // 8-byte Folded Reload
	bl	cons
	mov	x1, x0
	ldr	x0, [sp, #712]                  // 8-byte Folded Reload
	bl	cons
	mov	x1, x0
	ldr	x0, [sp, #720]                  // 8-byte Folded Reload
	bl	cons
	mov	x1, x0
	ldr	x0, [sp, #728]                  // 8-byte Folded Reload
	bl	cons
	mov	x1, x0
	ldr	x0, [sp, #736]                  // 8-byte Folded Reload
	bl	cons
	mov	x1, x0
	ldr	x0, [sp, #744]                  // 8-byte Folded Reload
	bl	cons
	mov	x1, x0
	ldr	x0, [sp, #752]                  // 8-byte Folded Reload
	bl	cons
	mov	x1, x0
	ldr	x0, [sp, #760]                  // 8-byte Folded Reload
	bl	cons
	mov	x1, x0
	ldr	x0, [sp, #768]                  // 8-byte Folded Reload
	bl	cons
	mov	x1, x0
	ldr	x0, [sp, #776]                  // 8-byte Folded Reload
	bl	cons
	mov	x1, x0
	ldr	x0, [sp, #784]                  // 8-byte Folded Reload
	bl	cons
	mov	x1, x0
	ldr	x0, [sp, #792]                  // 8-byte Folded Reload
	bl	cons
	mov	x1, x0
	ldr	x0, [sp, #800]                  // 8-byte Folded Reload
	bl	cons
	mov	x1, x0
	ldr	x0, [sp, #808]                  // 8-byte Folded Reload
	bl	cons
	mov	x1, x0
	ldr	x0, [sp, #816]                  // 8-byte Folded Reload
	bl	cons
	mov	x1, x0
	ldr	x0, [sp, #824]                  // 8-byte Folded Reload
	bl	cons
	mov	x1, x0
	ldr	x0, [sp, #832]                  // 8-byte Folded Reload
	bl	cons
	mov	x1, x0
	ldr	x0, [sp, #840]                  // 8-byte Folded Reload
	bl	cons
	adrp	x8, SymTab+8
	add	x8, x8, :lo12:SymTab+8
	str	x0, [x8, #688]
	adrp	x0, .L$132
	add	x0, x0, :lo12:.L$132
	bl	mkStr
	mov	x1, #2
	movk	x1, #57877, lsl #16
	movk	x1, #15, lsl #32
	bl	cons
	str	x0, [sp, #840]                  // 8-byte Folded Spill
	adrp	x0, .L$133
	add	x0, x0, :lo12:.L$133
	bl	mkStr
	mov	x1, #66
	movk	x1, #57877, lsl #16
	movk	x1, #15, lsl #32
	bl	cons
	str	x0, [sp, #832]                  // 8-byte Folded Spill
	adrp	x0, .L$134
	add	x0, x0, :lo12:.L$134
	bl	mkStr
	mov	x1, #1026
	movk	x1, #57877, lsl #16
	movk	x1, #15, lsl #32
	bl	cons
	str	x0, [sp, #824]                  // 8-byte Folded Spill
	adrp	x0, .L$135
	add	x0, x0, :lo12:.L$135
	bl	mkStr
	mov	x1, #1090
	movk	x1, #57877, lsl #16
	movk	x1, #15, lsl #32
	bl	cons
	str	x0, [sp, #816]                  // 8-byte Folded Spill
	adrp	x0, .L$136
	add	x0, x0, :lo12:.L$136
	bl	mkStr
	mov	x1, #1154
	movk	x1, #57877, lsl #16
	movk	x1, #15, lsl #32
	bl	cons
	str	x0, [sp, #808]                  // 8-byte Folded Spill
	adrp	x0, .L$137
	add	x0, x0, :lo12:.L$137
	bl	mkStr
	mov	x1, #1218
	movk	x1, #57877, lsl #16
	movk	x1, #15, lsl #32
	bl	cons
	str	x0, [sp, #800]                  // 8-byte Folded Spill
	adrp	x0, .L$138
	add	x0, x0, :lo12:.L$138
	bl	mkStr
	mov	x1, #1282
	movk	x1, #57877, lsl #16
	movk	x1, #15, lsl #32
	bl	cons
	str	x0, [sp, #792]                  // 8-byte Folded Spill
	adrp	x0, .L$139
	add	x0, x0, :lo12:.L$139
	bl	mkStr
	mov	x1, #1346
	movk	x1, #57877, lsl #16
	movk	x1, #15, lsl #32
	bl	cons
	str	x0, [sp, #784]                  // 8-byte Folded Spill
	adrp	x0, .L$140
	add	x0, x0, :lo12:.L$140
	bl	mkStr
	mov	x1, #1410
	movk	x1, #57877, lsl #16
	movk	x1, #15, lsl #32
	bl	cons
	str	x0, [sp, #776]                  // 8-byte Folded Spill
	adrp	x0, .L$141
	add	x0, x0, :lo12:.L$141
	bl	mkStr
	mov	x1, #1474
	movk	x1, #57877, lsl #16
	movk	x1, #15, lsl #32
	bl	cons
	str	x0, [sp, #768]                  // 8-byte Folded Spill
	adrp	x0, .L$142
	add	x0, x0, :lo12:.L$142
	bl	mkStr
	mov	x1, #1538
	movk	x1, #57877, lsl #16
	movk	x1, #15, lsl #32
	bl	cons
	str	x0, [sp, #760]                  // 8-byte Folded Spill
	adrp	x0, .L$143
	add	x0, x0, :lo12:.L$143
	bl	mkStr
	mov	x1, #1602
	movk	x1, #57877, lsl #16
	movk	x1, #15, lsl #32
	bl	cons
	str	x0, [sp, #752]                  // 8-byte Folded Spill
	adrp	x0, .L$144
	add	x0, x0, :lo12:.L$144
	bl	mkStr
	mov	x1, #1666
	movk	x1, #57877, lsl #16
	movk	x1, #15, lsl #32
	bl	cons
	str	x0, [sp, #744]                  // 8-byte Folded Spill
	adrp	x0, .L$145
	add	x0, x0, :lo12:.L$145
	bl	mkStr
	mov	x1, #2050
	movk	x1, #57877, lsl #16
	movk	x1, #15, lsl #32
	bl	cons
	str	x0, [sp, #736]                  // 8-byte Folded Spill
	adrp	x0, .L$146
	add	x0, x0, :lo12:.L$146
	bl	mkStr
	mov	x1, #2114
	movk	x1, #57877, lsl #16
	movk	x1, #15, lsl #32
	bl	cons
	str	x0, [sp, #728]                  // 8-byte Folded Spill
	adrp	x0, .L$147
	add	x0, x0, :lo12:.L$147
	bl	mkStr
	mov	x1, #2178
	movk	x1, #57877, lsl #16
	movk	x1, #15, lsl #32
	bl	cons
	str	x0, [sp, #720]                  // 8-byte Folded Spill
	adrp	x0, .L$148
	add	x0, x0, :lo12:.L$148
	bl	mkStr
	mov	x1, #2242
	movk	x1, #57877, lsl #16
	movk	x1, #15, lsl #32
	bl	cons
	str	x0, [sp, #712]                  // 8-byte Folded Spill
	adrp	x19, .L$149
	add	x19, x19, :lo12:.L$149
	mov	x0, x19
	bl	mkStr
	mov	x1, #2754
	movk	x1, #57877, lsl #16
	movk	x1, #15, lsl #32
	bl	cons
	str	x0, [sp, #704]                  // 8-byte Folded Spill
	mov	x0, x19
	bl	mkStr
	mov	x1, #2754
	movk	x1, #57877, lsl #16
	movk	x1, #15, lsl #32
	bl	cons
	str	x0, [sp, #696]                  // 8-byte Folded Spill
	mov	x0, x19
	bl	mkStr
	mov	x1, #2754
	movk	x1, #57877, lsl #16
	movk	x1, #15, lsl #32
	bl	cons
	str	x0, [sp, #688]                  // 8-byte Folded Spill
	mov	x0, x19
	bl	mkStr
	mov	x1, #2754
	movk	x1, #57877, lsl #16
	movk	x1, #15, lsl #32
	bl	cons
	str	x0, [sp, #680]                  // 8-byte Folded Spill
	adrp	x21, .L$150
	add	x21, x21, :lo12:.L$150
	mov	x0, x21
	bl	mkStr
	mov	x1, #3010
	movk	x1, #57877, lsl #16
	movk	x1, #15, lsl #32
	bl	cons
	str	x0, [sp, #672]                  // 8-byte Folded Spill
	mov	x0, x21
	bl	mkStr
	mov	x1, #3010
	movk	x1, #57877, lsl #16
	movk	x1, #15, lsl #32
	bl	cons
	str	x0, [sp, #664]                  // 8-byte Folded Spill
	mov	x0, x21
	bl	mkStr
	mov	x1, #3010
	movk	x1, #57877, lsl #16
	movk	x1, #15, lsl #32
	bl	cons
	str	x0, [sp, #656]                  // 8-byte Folded Spill
	mov	x0, x21
	bl	mkStr
	mov	x1, #3010
	movk	x1, #57877, lsl #16
	movk	x1, #15, lsl #32
	bl	cons
	str	x0, [sp, #648]                  // 8-byte Folded Spill
	adrp	x0, .L$151
	add	x0, x0, :lo12:.L$151
	bl	mkStr
	mov	x1, #3074
	movk	x1, #57877, lsl #16
	movk	x1, #15, lsl #32
	bl	cons
	str	x0, [sp, #640]                  // 8-byte Folded Spill
	adrp	x0, .L$152
	add	x0, x0, :lo12:.L$152
	bl	mkStr
	mov	x1, #3138
	movk	x1, #57877, lsl #16
	movk	x1, #15, lsl #32
	bl	cons
	mov	x23, x0
	adrp	x0, .L$153
	add	x0, x0, :lo12:.L$153
	bl	mkStr
	mov	x1, #3202
	movk	x1, #57877, lsl #16
	movk	x1, #15, lsl #32
	bl	cons
	mov	x24, x0
	adrp	x0, .L$154
	add	x0, x0, :lo12:.L$154
	bl	mkStr
	mov	x1, #3266
	movk	x1, #57877, lsl #16
	movk	x1, #15, lsl #32
	bl	cons
	mov	x25, x0
	adrp	x29, .L$155
	add	x29, x29, :lo12:.L$155
	mov	x0, x29
	bl	mkStr
	mov	x1, #3778
	movk	x1, #57877, lsl #16
	movk	x1, #15, lsl #32
	bl	cons
	mov	x26, x0
	mov	x0, x29
	bl	mkStr
	mov	x1, #3778
	movk	x1, #57877, lsl #16
	movk	x1, #15, lsl #32
	bl	cons
	mov	x27, x0
	mov	x0, x29
	bl	mkStr
	mov	x1, #3778
	movk	x1, #57877, lsl #16
	movk	x1, #15, lsl #32
	bl	cons
	mov	x28, x0
	mov	x0, x29
	bl	mkStr
	mov	x1, #3778
	movk	x1, #57877, lsl #16
	movk	x1, #15, lsl #32
	bl	cons
	mov	x29, x0
	adrp	x19, .L$156
	add	x19, x19, :lo12:.L$156
	mov	x0, x19
	bl	mkStr
	mov	x1, #4034
	movk	x1, #57877, lsl #16
	movk	x1, #15, lsl #32
	bl	cons
	mov	x20, x0
	mov	x0, x19
	bl	mkStr
	mov	x1, #4034
	movk	x1, #57877, lsl #16
	movk	x1, #15, lsl #32
	bl	cons
	mov	x21, x0
	mov	x0, x19
	bl	mkStr
	mov	x1, #4034
	movk	x1, #57877, lsl #16
	movk	x1, #15, lsl #32
	bl	cons
	mov	x22, x0
	mov	x0, x19
	bl	mkStr
	mov	x1, #4034
	movk	x1, #57877, lsl #16
	movk	x1, #15, lsl #32
	bl	cons
	adrp	x19, SymTab+8
	add	x19, x19, :lo12:SymTab+8
	mov	x1, x19
	bl	cons
	mov	x1, x0
	mov	x0, x22
	bl	cons
	mov	x1, x0
	mov	x0, x21
	bl	cons
	mov	x1, x0
	mov	x0, x20
	bl	cons
	mov	x1, x0
	mov	x0, x29
	bl	cons
	mov	x1, x0
	mov	x0, x28
	bl	cons
	mov	x1, x0
	mov	x0, x27
	bl	cons
	mov	x1, x0
	mov	x0, x26
	bl	cons
	mov	x1, x0
	mov	x0, x25
	bl	cons
	mov	x1, x0
	mov	x0, x24
	bl	cons
	mov	x1, x0
	mov	x0, x23
	bl	cons
	mov	x1, x0
	ldr	x0, [sp, #640]                  // 8-byte Folded Reload
	bl	cons
	mov	x1, x0
	ldr	x0, [sp, #648]                  // 8-byte Folded Reload
	bl	cons
	mov	x1, x0
	ldr	x0, [sp, #656]                  // 8-byte Folded Reload
	bl	cons
	mov	x1, x0
	ldr	x0, [sp, #664]                  // 8-byte Folded Reload
	bl	cons
	mov	x1, x0
	ldr	x0, [sp, #672]                  // 8-byte Folded Reload
	bl	cons
	mov	x1, x0
	ldr	x0, [sp, #680]                  // 8-byte Folded Reload
	bl	cons
	mov	x1, x0
	ldr	x0, [sp, #688]                  // 8-byte Folded Reload
	bl	cons
	mov	x1, x0
	ldr	x0, [sp, #696]                  // 8-byte Folded Reload
	bl	cons
	mov	x1, x0
	ldr	x0, [sp, #704]                  // 8-byte Folded Reload
	bl	cons
	mov	x1, x0
	ldr	x0, [sp, #712]                  // 8-byte Folded Reload
	bl	cons
	mov	x1, x0
	ldr	x0, [sp, #720]                  // 8-byte Folded Reload
	bl	cons
	mov	x1, x0
	ldr	x0, [sp, #728]                  // 8-byte Folded Reload
	bl	cons
	mov	x1, x0
	ldr	x0, [sp, #736]                  // 8-byte Folded Reload
	bl	cons
	mov	x1, x0
	ldr	x0, [sp, #744]                  // 8-byte Folded Reload
	bl	cons
	mov	x1, x0
	ldr	x0, [sp, #752]                  // 8-byte Folded Reload
	bl	cons
	mov	x1, x0
	ldr	x0, [sp, #760]                  // 8-byte Folded Reload
	bl	cons
	mov	x1, x0
	ldr	x0, [sp, #768]                  // 8-byte Folded Reload
	bl	cons
	mov	x1, x0
	ldr	x0, [sp, #776]                  // 8-byte Folded Reload
	bl	cons
	mov	x1, x0
	ldr	x0, [sp, #784]                  // 8-byte Folded Reload
	bl	cons
	mov	x1, x0
	ldr	x0, [sp, #792]                  // 8-byte Folded Reload
	bl	cons
	mov	x1, x0
	ldr	x0, [sp, #800]                  // 8-byte Folded Reload
	bl	cons
	mov	x1, x0
	ldr	x0, [sp, #808]                  // 8-byte Folded Reload
	bl	cons
	mov	x1, x0
	ldr	x0, [sp, #816]                  // 8-byte Folded Reload
	bl	cons
	mov	x1, x0
	ldr	x0, [sp, #824]                  // 8-byte Folded Reload
	bl	cons
	mov	x1, x0
	ldr	x0, [sp, #832]                  // 8-byte Folded Reload
	bl	cons
	mov	x1, x0
	ldr	x0, [sp, #840]                  // 8-byte Folded Reload
	bl	cons
	str	x0, [x19, #720]
	adrp	x0, .L$157
	add	x0, x0, :lo12:.L$157
	bl	mkStr
	mov	x1, #2
	movk	x1, #57857, lsl #16
	movk	x1, #15, lsl #32
	bl	cons
	str	x0, [sp, #840]                  // 8-byte Folded Spill
	adrp	x0, .L$158
	add	x0, x0, :lo12:.L$158
	bl	mkStr
	mov	x1, #66
	movk	x1, #57857, lsl #16
	movk	x1, #15, lsl #32
	bl	cons
	str	x0, [sp, #832]                  // 8-byte Folded Spill
	adrp	x0, .L$159
	add	x0, x0, :lo12:.L$159
	bl	mkStr
	mov	x1, #386
	movk	x1, #57857, lsl #16
	movk	x1, #15, lsl #32
	bl	cons
	str	x0, [sp, #824]                  // 8-byte Folded Spill
	adrp	x0, .L$160
	add	x0, x0, :lo12:.L$160
	bl	mkStr
	mov	x1, #514
	movk	x1, #57857, lsl #16
	movk	x1, #15, lsl #32
	bl	cons
	str	x0, [sp, #816]                  // 8-byte Folded Spill
	adrp	x0, .L$161
	add	x0, x0, :lo12:.L$161
	bl	mkStr
	mov	x1, #578
	movk	x1, #57857, lsl #16
	movk	x1, #15, lsl #32
	bl	cons
	str	x0, [sp, #808]                  // 8-byte Folded Spill
	adrp	x0, .L$162
	add	x0, x0, :lo12:.L$162
	bl	mkStr
	mov	x1, #642
	movk	x1, #57857, lsl #16
	movk	x1, #15, lsl #32
	bl	cons
	str	x0, [sp, #800]                  // 8-byte Folded Spill
	adrp	x0, .L$163
	add	x0, x0, :lo12:.L$163
	bl	mkStr
	mov	x1, #706
	movk	x1, #57857, lsl #16
	movk	x1, #15, lsl #32
	bl	cons
	str	x0, [sp, #792]                  // 8-byte Folded Spill
	adrp	x0, .L$164
	add	x0, x0, :lo12:.L$164
	bl	mkStr
	mov	x1, #770
	movk	x1, #57857, lsl #16
	movk	x1, #15, lsl #32
	bl	cons
	str	x0, [sp, #784]                  // 8-byte Folded Spill
	adrp	x0, .L$165
	add	x0, x0, :lo12:.L$165
	bl	mkStr
	mov	x1, #834
	movk	x1, #57857, lsl #16
	movk	x1, #15, lsl #32
	bl	cons
	str	x0, [sp, #776]                  // 8-byte Folded Spill
	adrp	x0, .L$166
	add	x0, x0, :lo12:.L$166
	bl	mkStr
	mov	x1, #898
	movk	x1, #57857, lsl #16
	movk	x1, #15, lsl #32
	bl	cons
	str	x0, [sp, #768]                  // 8-byte Folded Spill
	adrp	x0, .L$167
	add	x0, x0, :lo12:.L$167
	bl	mkStr
	mov	x1, #962
	movk	x1, #57857, lsl #16
	movk	x1, #15, lsl #32
	bl	cons
	str	x0, [sp, #760]                  // 8-byte Folded Spill
	adrp	x0, .L$168
	add	x0, x0, :lo12:.L$168
	bl	mkStr
	mov	x1, #1026
	movk	x1, #57857, lsl #16
	movk	x1, #15, lsl #32
	bl	cons
	str	x0, [sp, #752]                  // 8-byte Folded Spill
	adrp	x0, .L$169
	add	x0, x0, :lo12:.L$169
	bl	mkStr
	mov	x1, #1090
	movk	x1, #57857, lsl #16
	movk	x1, #15, lsl #32
	bl	cons
	str	x0, [sp, #744]                  // 8-byte Folded Spill
	adrp	x0, .L$170
	add	x0, x0, :lo12:.L$170
	bl	mkStr
	mov	x1, #1154
	movk	x1, #57857, lsl #16
	movk	x1, #15, lsl #32
	bl	cons
	str	x0, [sp, #736]                  // 8-byte Folded Spill
	adrp	x0, .L$171
	add	x0, x0, :lo12:.L$171
	bl	mkStr
	mov	x1, #2050
	movk	x1, #57857, lsl #16
	movk	x1, #15, lsl #32
	bl	cons
	str	x0, [sp, #728]                  // 8-byte Folded Spill
	adrp	x0, .L$172
	add	x0, x0, :lo12:.L$172
	bl	mkStr
	mov	x1, #2114
	movk	x1, #57857, lsl #16
	movk	x1, #15, lsl #32
	bl	cons
	str	x0, [sp, #720]                  // 8-byte Folded Spill
	adrp	x0, .L$173
	add	x0, x0, :lo12:.L$173
	bl	mkStr
	mov	x1, #2178
	movk	x1, #57857, lsl #16
	movk	x1, #15, lsl #32
	bl	cons
	str	x0, [sp, #712]                  // 8-byte Folded Spill
	adrp	x0, .L$174
	add	x0, x0, :lo12:.L$174
	bl	mkStr
	mov	x1, #2242
	movk	x1, #57857, lsl #16
	movk	x1, #15, lsl #32
	bl	cons
	str	x0, [sp, #704]                  // 8-byte Folded Spill
	adrp	x0, .L$175
	add	x0, x0, :lo12:.L$175
	bl	mkStr
	mov	x1, #16386
	movk	x1, #57857, lsl #16
	movk	x1, #15, lsl #32
	bl	cons
	str	x0, [sp, #696]                  // 8-byte Folded Spill
	adrp	x0, .L$176
	add	x0, x0, :lo12:.L$176
	bl	mkStr
	mov	x1, #16450
	movk	x1, #57857, lsl #16
	movk	x1, #15, lsl #32
	bl	cons
	str	x0, [sp, #688]                  // 8-byte Folded Spill
	adrp	x0, .L$177
	add	x0, x0, :lo12:.L$177
	bl	mkStr
	mov	x1, #16770
	movk	x1, #57857, lsl #16
	movk	x1, #15, lsl #32
	bl	cons
	str	x0, [sp, #680]                  // 8-byte Folded Spill
	adrp	x0, .L$178
	add	x0, x0, :lo12:.L$178
	bl	mkStr
	mov	x1, #16898
	movk	x1, #57857, lsl #16
	movk	x1, #15, lsl #32
	bl	cons
	str	x0, [sp, #672]                  // 8-byte Folded Spill
	adrp	x0, .L$179
	add	x0, x0, :lo12:.L$179
	bl	mkStr
	mov	x1, #16962
	movk	x1, #57857, lsl #16
	movk	x1, #15, lsl #32
	bl	cons
	str	x0, [sp, #664]                  // 8-byte Folded Spill
	adrp	x0, .L$180
	add	x0, x0, :lo12:.L$180
	bl	mkStr
	mov	x1, #17026
	movk	x1, #57857, lsl #16
	movk	x1, #15, lsl #32
	bl	cons
	str	x0, [sp, #656]                  // 8-byte Folded Spill
	adrp	x0, .L$181
	add	x0, x0, :lo12:.L$181
	bl	mkStr
	mov	x1, #17090
	movk	x1, #57857, lsl #16
	movk	x1, #15, lsl #32
	bl	cons
	str	x0, [sp, #648]                  // 8-byte Folded Spill
	adrp	x0, .L$182
	add	x0, x0, :lo12:.L$182
	bl	mkStr
	mov	x1, #17154
	movk	x1, #57857, lsl #16
	movk	x1, #15, lsl #32
	bl	cons
	str	x0, [sp, #640]                  // 8-byte Folded Spill
	adrp	x0, .L$183
	add	x0, x0, :lo12:.L$183
	bl	mkStr
	mov	x1, #17218
	movk	x1, #57857, lsl #16
	movk	x1, #15, lsl #32
	bl	cons
	str	x0, [sp, #632]                  // 8-byte Folded Spill
	adrp	x0, .L$184
	add	x0, x0, :lo12:.L$184
	bl	mkStr
	mov	x1, #17282
	movk	x1, #57857, lsl #16
	movk	x1, #15, lsl #32
	bl	cons
	str	x0, [sp, #624]                  // 8-byte Folded Spill
	adrp	x0, .L$185
	add	x0, x0, :lo12:.L$185
	bl	mkStr
	mov	x1, #17346
	movk	x1, #57857, lsl #16
	movk	x1, #15, lsl #32
	bl	cons
	str	x0, [sp, #616]                  // 8-byte Folded Spill
	adrp	x0, .L$186
	add	x0, x0, :lo12:.L$186
	bl	mkStr
	mov	x1, #17410
	movk	x1, #57857, lsl #16
	movk	x1, #15, lsl #32
	bl	cons
	str	x0, [sp, #608]                  // 8-byte Folded Spill
	adrp	x0, .L$187
	add	x0, x0, :lo12:.L$187
	bl	mkStr
	mov	x1, #17474
	movk	x1, #57857, lsl #16
	movk	x1, #15, lsl #32
	bl	cons
	str	x0, [sp, #600]                  // 8-byte Folded Spill
	adrp	x0, .L$188
	add	x0, x0, :lo12:.L$188
	bl	mkStr
	mov	x1, #17538
	movk	x1, #57857, lsl #16
	movk	x1, #15, lsl #32
	bl	cons
	str	x0, [sp, #592]                  // 8-byte Folded Spill
	adrp	x0, .L$189
	add	x0, x0, :lo12:.L$189
	bl	mkStr
	mov	x1, #18434
	movk	x1, #57857, lsl #16
	movk	x1, #15, lsl #32
	bl	cons
	str	x0, [sp, #584]                  // 8-byte Folded Spill
	adrp	x0, .L$190
	add	x0, x0, :lo12:.L$190
	bl	mkStr
	mov	x1, #18498
	movk	x1, #57857, lsl #16
	movk	x1, #15, lsl #32
	bl	cons
	str	x0, [sp, #576]                  // 8-byte Folded Spill
	adrp	x0, .L$191
	add	x0, x0, :lo12:.L$191
	bl	mkStr
	mov	x1, #18562
	movk	x1, #57857, lsl #16
	movk	x1, #15, lsl #32
	bl	cons
	str	x0, [sp, #568]                  // 8-byte Folded Spill
	adrp	x0, .L$192
	add	x0, x0, :lo12:.L$192
	bl	mkStr
	mov	x1, #18626
	movk	x1, #57857, lsl #16
	movk	x1, #15, lsl #32
	bl	cons
	str	x0, [sp, #560]                  // 8-byte Folded Spill
	adrp	x0, .L$193
	add	x0, x0, :lo12:.L$193
	bl	mkStr
	mov	x1, #24578
	movk	x1, #57857, lsl #16
	movk	x1, #15, lsl #32
	bl	cons
	str	x0, [sp, #552]                  // 8-byte Folded Spill
	adrp	x0, .L$194
	add	x0, x0, :lo12:.L$194
	bl	mkStr
	mov	x1, #24642
	movk	x1, #57857, lsl #16
	movk	x1, #15, lsl #32
	bl	cons
	str	x0, [sp, #544]                  // 8-byte Folded Spill
	adrp	x0, .L$195
	add	x0, x0, :lo12:.L$195
	bl	mkStr
	mov	x1, #24962
	movk	x1, #57857, lsl #16
	movk	x1, #15, lsl #32
	bl	cons
	str	x0, [sp, #536]                  // 8-byte Folded Spill
	adrp	x0, .L$196
	add	x0, x0, :lo12:.L$196
	bl	mkStr
	mov	x1, #25090
	movk	x1, #57857, lsl #16
	movk	x1, #15, lsl #32
	bl	cons
	str	x0, [sp, #528]                  // 8-byte Folded Spill
	adrp	x0, .L$197
	add	x0, x0, :lo12:.L$197
	bl	mkStr
	mov	x1, #25154
	movk	x1, #57857, lsl #16
	movk	x1, #15, lsl #32
	bl	cons
	str	x0, [sp, #520]                  // 8-byte Folded Spill
	adrp	x0, .L$198
	add	x0, x0, :lo12:.L$198
	bl	mkStr
	mov	x1, #25218
	movk	x1, #57857, lsl #16
	movk	x1, #15, lsl #32
	bl	cons
	str	x0, [sp, #512]                  // 8-byte Folded Spill
	adrp	x0, .L$199
	add	x0, x0, :lo12:.L$199
	bl	mkStr
	mov	x1, #25282
	movk	x1, #57857, lsl #16
	movk	x1, #15, lsl #32
	bl	cons
	str	x0, [sp, #504]                  // 8-byte Folded Spill
	adrp	x0, .L$200
	add	x0, x0, :lo12:.L$200
	bl	mkStr
	mov	x1, #25346
	movk	x1, #57857, lsl #16
	movk	x1, #15, lsl #32
	bl	cons
	str	x0, [sp, #496]                  // 8-byte Folded Spill
	adrp	x0, .L$201
	add	x0, x0, :lo12:.L$201
	bl	mkStr
	mov	x1, #25410
	movk	x1, #57857, lsl #16
	movk	x1, #15, lsl #32
	bl	cons
	str	x0, [sp, #488]                  // 8-byte Folded Spill
	adrp	x0, .L$202
	add	x0, x0, :lo12:.L$202
	bl	mkStr
	mov	x1, #25474
	movk	x1, #57857, lsl #16
	movk	x1, #15, lsl #32
	bl	cons
	str	x0, [sp, #480]                  // 8-byte Folded Spill
	adrp	x0, .L$203
	add	x0, x0, :lo12:.L$203
	bl	mkStr
	mov	x1, #25538
	movk	x1, #57857, lsl #16
	movk	x1, #15, lsl #32
	bl	cons
	str	x0, [sp, #472]                  // 8-byte Folded Spill
	adrp	x0, .L$204
	add	x0, x0, :lo12:.L$204
	bl	mkStr
	mov	x1, #25602
	movk	x1, #57857, lsl #16
	movk	x1, #15, lsl #32
	bl	cons
	str	x0, [sp, #464]                  // 8-byte Folded Spill
	adrp	x0, .L$205
	add	x0, x0, :lo12:.L$205
	bl	mkStr
	mov	x1, #25666
	movk	x1, #57857, lsl #16
	movk	x1, #15, lsl #32
	bl	cons
	str	x0, [sp, #456]                  // 8-byte Folded Spill
	adrp	x0, .L$206
	add	x0, x0, :lo12:.L$206
	bl	mkStr
	mov	x1, #25730
	movk	x1, #57857, lsl #16
	movk	x1, #15, lsl #32
	bl	cons
	str	x0, [sp, #448]                  // 8-byte Folded Spill
	adrp	x0, .L$207
	add	x0, x0, :lo12:.L$207
	bl	mkStr
	mov	x1, #26626
	movk	x1, #57857, lsl #16
	movk	x1, #15, lsl #32
	bl	cons
	str	x0, [sp, #440]                  // 8-byte Folded Spill
	adrp	x0, .L$208
	add	x0, x0, :lo12:.L$208
	bl	mkStr
	mov	x1, #26690
	movk	x1, #57857, lsl #16
	movk	x1, #15, lsl #32
	bl	cons
	str	x0, [sp, #432]                  // 8-byte Folded Spill
	adrp	x0, .L$209
	add	x0, x0, :lo12:.L$209
	bl	mkStr
	mov	x1, #26754
	movk	x1, #57857, lsl #16
	movk	x1, #15, lsl #32
	bl	cons
	str	x0, [sp, #424]                  // 8-byte Folded Spill
	adrp	x0, .L$210
	add	x0, x0, :lo12:.L$210
	bl	mkStr
	mov	x1, #26818
	movk	x1, #57857, lsl #16
	movk	x1, #15, lsl #32
	bl	cons
	str	x0, [sp, #416]                  // 8-byte Folded Spill
	adrp	x0, .L$211
	add	x0, x0, :lo12:.L$211
	bl	mkStr
	mov	x1, #32770
	movk	x1, #57857, lsl #16
	movk	x1, #15, lsl #32
	bl	cons
	str	x0, [sp, #408]                  // 8-byte Folded Spill
	adrp	x0, .L$212
	add	x0, x0, :lo12:.L$212
	bl	mkStr
	mov	x1, #32834
	movk	x1, #57857, lsl #16
	movk	x1, #15, lsl #32
	bl	cons
	str	x0, [sp, #400]                  // 8-byte Folded Spill
	adrp	x0, .L$213
	add	x0, x0, :lo12:.L$213
	bl	mkStr
	mov	x1, #33154
	movk	x1, #57857, lsl #16
	movk	x1, #15, lsl #32
	bl	cons
	str	x0, [sp, #392]                  // 8-byte Folded Spill
	adrp	x0, .L$214
	add	x0, x0, :lo12:.L$214
	bl	mkStr
	mov	x1, #33282
	movk	x1, #57857, lsl #16
	movk	x1, #15, lsl #32
	bl	cons
	str	x0, [sp, #384]                  // 8-byte Folded Spill
	adrp	x0, .L$215
	add	x0, x0, :lo12:.L$215
	bl	mkStr
	mov	x1, #33346
	movk	x1, #57857, lsl #16
	movk	x1, #15, lsl #32
	bl	cons
	str	x0, [sp, #376]                  // 8-byte Folded Spill
	adrp	x0, .L$216
	add	x0, x0, :lo12:.L$216
	bl	mkStr
	mov	x1, #33410
	movk	x1, #57857, lsl #16
	movk	x1, #15, lsl #32
	bl	cons
	str	x0, [sp, #368]                  // 8-byte Folded Spill
	adrp	x0, .L$217
	add	x0, x0, :lo12:.L$217
	bl	mkStr
	mov	x1, #33474
	movk	x1, #57857, lsl #16
	movk	x1, #15, lsl #32
	bl	cons
	str	x0, [sp, #360]                  // 8-byte Folded Spill
	adrp	x0, .L$218
	add	x0, x0, :lo12:.L$218
	bl	mkStr
	mov	x1, #33538
	movk	x1, #57857, lsl #16
	movk	x1, #15, lsl #32
	bl	cons
	str	x0, [sp, #352]                  // 8-byte Folded Spill
	adrp	x0, .L$219
	add	x0, x0, :lo12:.L$219
	bl	mkStr
	mov	x1, #33602
	movk	x1, #57857, lsl #16
	movk	x1, #15, lsl #32
	bl	cons
	str	x0, [sp, #344]                  // 8-byte Folded Spill
	adrp	x0, .L$220
	add	x0, x0, :lo12:.L$220
	bl	mkStr
	mov	x1, #33666
	movk	x1, #57857, lsl #16
	movk	x1, #15, lsl #32
	bl	cons
	str	x0, [sp, #336]                  // 8-byte Folded Spill
	adrp	x0, .L$221
	add	x0, x0, :lo12:.L$221
	bl	mkStr
	mov	x1, #33730
	movk	x1, #57857, lsl #16
	movk	x1, #15, lsl #32
	bl	cons
	str	x0, [sp, #328]                  // 8-byte Folded Spill
	adrp	x0, .L$222
	add	x0, x0, :lo12:.L$222
	bl	mkStr
	mov	x1, #33794
	movk	x1, #57857, lsl #16
	movk	x1, #15, lsl #32
	bl	cons
	str	x0, [sp, #320]                  // 8-byte Folded Spill
	adrp	x0, .L$223
	add	x0, x0, :lo12:.L$223
	bl	mkStr
	mov	x1, #33858
	movk	x1, #57857, lsl #16
	movk	x1, #15, lsl #32
	bl	cons
	str	x0, [sp, #312]                  // 8-byte Folded Spill
	adrp	x0, .L$224
	add	x0, x0, :lo12:.L$224
	bl	mkStr
	mov	x1, #33922
	movk	x1, #57857, lsl #16
	movk	x1, #15, lsl #32
	bl	cons
	str	x0, [sp, #304]                  // 8-byte Folded Spill
	adrp	x0, .L$225
	add	x0, x0, :lo12:.L$225
	bl	mkStr
	mov	x1, #34818
	movk	x1, #57857, lsl #16
	movk	x1, #15, lsl #32
	bl	cons
	str	x0, [sp, #296]                  // 8-byte Folded Spill
	adrp	x0, .L$226
	add	x0, x0, :lo12:.L$226
	bl	mkStr
	mov	x1, #34882
	movk	x1, #57857, lsl #16
	movk	x1, #15, lsl #32
	bl	cons
	str	x0, [sp, #288]                  // 8-byte Folded Spill
	adrp	x0, .L$227
	add	x0, x0, :lo12:.L$227
	bl	mkStr
	mov	x1, #34946
	movk	x1, #57857, lsl #16
	movk	x1, #15, lsl #32
	bl	cons
	str	x0, [sp, #280]                  // 8-byte Folded Spill
	adrp	x0, .L$228
	add	x0, x0, :lo12:.L$228
	bl	mkStr
	mov	x1, #35010
	movk	x1, #57857, lsl #16
	movk	x1, #15, lsl #32
	bl	cons
	str	x0, [sp, #272]                  // 8-byte Folded Spill
	adrp	x0, .L$229
	add	x0, x0, :lo12:.L$229
	bl	mkStr
	mov	x1, #40962
	movk	x1, #57857, lsl #16
	movk	x1, #15, lsl #32
	bl	cons
	str	x0, [sp, #264]                  // 8-byte Folded Spill
	adrp	x0, .L$230
	add	x0, x0, :lo12:.L$230
	bl	mkStr
	mov	x1, #41026
	movk	x1, #57857, lsl #16
	movk	x1, #15, lsl #32
	bl	cons
	str	x0, [sp, #256]                  // 8-byte Folded Spill
	adrp	x0, .L$231
	add	x0, x0, :lo12:.L$231
	bl	mkStr
	mov	x1, #41346
	movk	x1, #57857, lsl #16
	movk	x1, #15, lsl #32
	bl	cons
	str	x0, [sp, #248]                  // 8-byte Folded Spill
	adrp	x0, .L$232
	add	x0, x0, :lo12:.L$232
	bl	mkStr
	mov	x1, #41474
	movk	x1, #57857, lsl #16
	movk	x1, #15, lsl #32
	bl	cons
	str	x0, [sp, #240]                  // 8-byte Folded Spill
	adrp	x0, .L$233
	add	x0, x0, :lo12:.L$233
	bl	mkStr
	mov	x1, #41538
	movk	x1, #57857, lsl #16
	movk	x1, #15, lsl #32
	bl	cons
	str	x0, [sp, #232]                  // 8-byte Folded Spill
	adrp	x0, .L$234
	add	x0, x0, :lo12:.L$234
	bl	mkStr
	mov	x1, #41602
	movk	x1, #57857, lsl #16
	movk	x1, #15, lsl #32
	bl	cons
	str	x0, [sp, #224]                  // 8-byte Folded Spill
	adrp	x0, .L$235
	add	x0, x0, :lo12:.L$235
	bl	mkStr
	mov	x1, #41666
	movk	x1, #57857, lsl #16
	movk	x1, #15, lsl #32
	bl	cons
	mov	x20, x0
	adrp	x0, .L$236
	add	x0, x0, :lo12:.L$236
	bl	mkStr
	mov	x1, #41730
	movk	x1, #57857, lsl #16
	movk	x1, #15, lsl #32
	bl	cons
	mov	x21, x0
	adrp	x0, .L$237
	add	x0, x0, :lo12:.L$237
	bl	mkStr
	mov	x1, #41794
	movk	x1, #57857, lsl #16
	movk	x1, #15, lsl #32
	bl	cons
	mov	x22, x0
	adrp	x0, .L$238
	add	x0, x0, :lo12:.L$238
	bl	mkStr
	mov	x1, #41858
	movk	x1, #57857, lsl #16
	movk	x1, #15, lsl #32
	bl	cons
	mov	x23, x0
	adrp	x0, .L$239
	add	x0, x0, :lo12:.L$239
	bl	mkStr
	mov	x1, #41922
	movk	x1, #57857, lsl #16
	movk	x1, #15, lsl #32
	bl	cons
	mov	x24, x0
	adrp	x0, .L$240
	add	x0, x0, :lo12:.L$240
	bl	mkStr
	mov	x1, #41986
	movk	x1, #57857, lsl #16
	movk	x1, #15, lsl #32
	bl	cons
	mov	x25, x0
	adrp	x0, .L$241
	add	x0, x0, :lo12:.L$241
	bl	mkStr
	mov	x1, #42050
	movk	x1, #57857, lsl #16
	movk	x1, #15, lsl #32
	bl	cons
	mov	x26, x0
	adrp	x0, .L$242
	add	x0, x0, :lo12:.L$242
	bl	mkStr
	mov	x1, #42114
	movk	x1, #57857, lsl #16
	movk	x1, #15, lsl #32
	bl	cons
	mov	x27, x0
	adrp	x0, .L$243
	add	x0, x0, :lo12:.L$243
	bl	mkStr
	mov	x1, #43010
	movk	x1, #57857, lsl #16
	movk	x1, #15, lsl #32
	bl	cons
	mov	x28, x0
	adrp	x0, .L$244
	add	x0, x0, :lo12:.L$244
	bl	mkStr
	mov	x1, #43074
	movk	x1, #57857, lsl #16
	movk	x1, #15, lsl #32
	bl	cons
	mov	x29, x0
	adrp	x0, .L$245
	add	x0, x0, :lo12:.L$245
	bl	mkStr
	mov	x1, #43138
	movk	x1, #57857, lsl #16
	movk	x1, #15, lsl #32
	bl	cons
	mov	x19, x0
	adrp	x0, .L$246
	add	x0, x0, :lo12:.L$246
	bl	mkStr
	mov	x1, #43202
	movk	x1, #57857, lsl #16
	movk	x1, #15, lsl #32
	bl	cons
	adrp	x1, SymTab+8
	add	x1, x1, :lo12:SymTab+8
	bl	cons
	mov	x1, x0
	mov	x0, x19
	bl	cons
	mov	x1, x0
	mov	x0, x29
	bl	cons
	mov	x1, x0
	mov	x0, x28
	bl	cons
	mov	x1, x0
	mov	x0, x27
	bl	cons
	mov	x1, x0
	mov	x0, x26
	bl	cons
	mov	x1, x0
	mov	x0, x25
	bl	cons
	mov	x1, x0
	mov	x0, x24
	bl	cons
	mov	x1, x0
	mov	x0, x23
	bl	cons
	mov	x1, x0
	mov	x0, x22
	bl	cons
	mov	x1, x0
	mov	x0, x21
	bl	cons
	mov	x1, x0
	mov	x0, x20
	bl	cons
	mov	x1, x0
	ldr	x0, [sp, #224]                  // 8-byte Folded Reload
	bl	cons
	mov	x1, x0
	ldr	x0, [sp, #232]                  // 8-byte Folded Reload
	bl	cons
	mov	x1, x0
	ldr	x0, [sp, #240]                  // 8-byte Folded Reload
	bl	cons
	mov	x1, x0
	ldr	x0, [sp, #248]                  // 8-byte Folded Reload
	bl	cons
	mov	x1, x0
	ldr	x0, [sp, #256]                  // 8-byte Folded Reload
	bl	cons
	mov	x1, x0
	ldr	x0, [sp, #264]                  // 8-byte Folded Reload
	bl	cons
	mov	x1, x0
	ldr	x0, [sp, #272]                  // 8-byte Folded Reload
	bl	cons
	mov	x1, x0
	ldr	x0, [sp, #280]                  // 8-byte Folded Reload
	bl	cons
	mov	x1, x0
	ldr	x0, [sp, #288]                  // 8-byte Folded Reload
	bl	cons
	mov	x1, x0
	ldr	x0, [sp, #296]                  // 8-byte Folded Reload
	bl	cons
	mov	x1, x0
	ldr	x0, [sp, #304]                  // 8-byte Folded Reload
	bl	cons
	mov	x1, x0
	ldr	x0, [sp, #312]                  // 8-byte Folded Reload
	bl	cons
	mov	x1, x0
	ldr	x0, [sp, #320]                  // 8-byte Folded Reload
	bl	cons
	mov	x1, x0
	ldr	x0, [sp, #328]                  // 8-byte Folded Reload
	bl	cons
	mov	x1, x0
	ldr	x0, [sp, #336]                  // 8-byte Folded Reload
	bl	cons
	mov	x1, x0
	ldr	x0, [sp, #344]                  // 8-byte Folded Reload
	bl	cons
	mov	x1, x0
	ldr	x0, [sp, #352]                  // 8-byte Folded Reload
	bl	cons
	mov	x1, x0
	ldr	x0, [sp, #360]                  // 8-byte Folded Reload
	bl	cons
	mov	x1, x0
	ldr	x0, [sp, #368]                  // 8-byte Folded Reload
	bl	cons
	mov	x1, x0
	ldr	x0, [sp, #376]                  // 8-byte Folded Reload
	bl	cons
	mov	x1, x0
	ldr	x0, [sp, #384]                  // 8-byte Folded Reload
	bl	cons
	mov	x1, x0
	ldr	x0, [sp, #392]                  // 8-byte Folded Reload
	bl	cons
	mov	x1, x0
	ldr	x0, [sp, #400]                  // 8-byte Folded Reload
	bl	cons
	mov	x1, x0
	ldr	x0, [sp, #408]                  // 8-byte Folded Reload
	bl	cons
	mov	x1, x0
	ldr	x0, [sp, #416]                  // 8-byte Folded Reload
	bl	cons
	mov	x1, x0
	ldr	x0, [sp, #424]                  // 8-byte Folded Reload
	bl	cons
	mov	x1, x0
	ldr	x0, [sp, #432]                  // 8-byte Folded Reload
	bl	cons
	mov	x1, x0
	ldr	x0, [sp, #440]                  // 8-byte Folded Reload
	bl	cons
	mov	x1, x0
	ldr	x0, [sp, #448]                  // 8-byte Folded Reload
	bl	cons
	mov	x1, x0
	ldr	x0, [sp, #456]                  // 8-byte Folded Reload
	bl	cons
	mov	x1, x0
	ldr	x0, [sp, #464]                  // 8-byte Folded Reload
	bl	cons
	mov	x1, x0
	ldr	x0, [sp, #472]                  // 8-byte Folded Reload
	bl	cons
	mov	x1, x0
	ldr	x0, [sp, #480]                  // 8-byte Folded Reload
	bl	cons
	mov	x1, x0
	ldr	x0, [sp, #488]                  // 8-byte Folded Reload
	bl	cons
	mov	x1, x0
	ldr	x0, [sp, #496]                  // 8-byte Folded Reload
	bl	cons
	mov	x1, x0
	ldr	x0, [sp, #504]                  // 8-byte Folded Reload
	bl	cons
	mov	x1, x0
	ldr	x0, [sp, #512]                  // 8-byte Folded Reload
	bl	cons
	mov	x1, x0
	ldr	x0, [sp, #520]                  // 8-byte Folded Reload
	bl	cons
	mov	x1, x0
	ldr	x0, [sp, #528]                  // 8-byte Folded Reload
	bl	cons
	mov	x1, x0
	ldr	x0, [sp, #536]                  // 8-byte Folded Reload
	bl	cons
	mov	x1, x0
	ldr	x0, [sp, #544]                  // 8-byte Folded Reload
	bl	cons
	mov	x1, x0
	ldr	x0, [sp, #552]                  // 8-byte Folded Reload
	bl	cons
	mov	x1, x0
	ldr	x0, [sp, #560]                  // 8-byte Folded Reload
	bl	cons
	mov	x1, x0
	ldr	x0, [sp, #568]                  // 8-byte Folded Reload
	bl	cons
	mov	x1, x0
	ldr	x0, [sp, #576]                  // 8-byte Folded Reload
	bl	cons
	mov	x1, x0
	ldr	x0, [sp, #584]                  // 8-byte Folded Reload
	bl	cons
	mov	x1, x0
	ldr	x0, [sp, #592]                  // 8-byte Folded Reload
	bl	cons
	mov	x1, x0
	ldr	x0, [sp, #600]                  // 8-byte Folded Reload
	bl	cons
	mov	x1, x0
	ldr	x0, [sp, #608]                  // 8-byte Folded Reload
	bl	cons
	mov	x1, x0
	ldr	x0, [sp, #616]                  // 8-byte Folded Reload
	bl	cons
	mov	x1, x0
	ldr	x0, [sp, #624]                  // 8-byte Folded Reload
	bl	cons
	mov	x1, x0
	ldr	x0, [sp, #632]                  // 8-byte Folded Reload
	bl	cons
	mov	x1, x0
	ldr	x0, [sp, #640]                  // 8-byte Folded Reload
	bl	cons
	mov	x1, x0
	ldr	x0, [sp, #648]                  // 8-byte Folded Reload
	bl	cons
	mov	x1, x0
	ldr	x0, [sp, #656]                  // 8-byte Folded Reload
	bl	cons
	mov	x1, x0
	ldr	x0, [sp, #664]                  // 8-byte Folded Reload
	bl	cons
	mov	x1, x0
	ldr	x0, [sp, #672]                  // 8-byte Folded Reload
	bl	cons
	mov	x1, x0
	ldr	x0, [sp, #680]                  // 8-byte Folded Reload
	bl	cons
	mov	x1, x0
	ldr	x0, [sp, #688]                  // 8-byte Folded Reload
	bl	cons
	mov	x1, x0
	ldr	x0, [sp, #696]                  // 8-byte Folded Reload
	bl	cons
	mov	x1, x0
	ldr	x0, [sp, #704]                  // 8-byte Folded Reload
	bl	cons
	mov	x1, x0
	ldr	x0, [sp, #712]                  // 8-byte Folded Reload
	bl	cons
	mov	x1, x0
	ldr	x0, [sp, #720]                  // 8-byte Folded Reload
	bl	cons
	mov	x1, x0
	ldr	x0, [sp, #728]                  // 8-byte Folded Reload
	bl	cons
	mov	x1, x0
	ldr	x0, [sp, #736]                  // 8-byte Folded Reload
	bl	cons
	mov	x1, x0
	ldr	x0, [sp, #744]                  // 8-byte Folded Reload
	bl	cons
	mov	x1, x0
	ldr	x0, [sp, #752]                  // 8-byte Folded Reload
	bl	cons
	mov	x1, x0
	ldr	x0, [sp, #760]                  // 8-byte Folded Reload
	bl	cons
	mov	x1, x0
	ldr	x0, [sp, #768]                  // 8-byte Folded Reload
	bl	cons
	mov	x1, x0
	ldr	x0, [sp, #776]                  // 8-byte Folded Reload
	bl	cons
	mov	x1, x0
	ldr	x0, [sp, #784]                  // 8-byte Folded Reload
	bl	cons
	mov	x1, x0
	ldr	x0, [sp, #792]                  // 8-byte Folded Reload
	bl	cons
	mov	x1, x0
	ldr	x0, [sp, #800]                  // 8-byte Folded Reload
	bl	cons
	mov	x1, x0
	ldr	x0, [sp, #808]                  // 8-byte Folded Reload
	bl	cons
	mov	x1, x0
	ldr	x0, [sp, #816]                  // 8-byte Folded Reload
	bl	cons
	mov	x1, x0
	ldr	x0, [sp, #824]                  // 8-byte Folded Reload
	bl	cons
	mov	x1, x0
	ldr	x0, [sp, #832]                  // 8-byte Folded Reload
	bl	cons
	mov	x1, x0
	ldr	x0, [sp, #840]                  // 8-byte Folded Reload
	bl	cons
	adrp	x8, SymTab+8
	add	x8, x8, :lo12:SymTab+8
	str	x0, [x8, #736]
	adrp	x0, .L$247
	add	x0, x0, :lo12:.L$247
	bl	mkStr
	mov	w1, #418
	bl	cons
	str	x0, [sp, #840]                  // 8-byte Folded Spill
	adrp	x0, .L$248
	add	x0, x0, :lo12:.L$248
	bl	mkStr
	mov	w1, #434
	bl	cons
	str	x0, [sp, #832]                  // 8-byte Folded Spill
	adrp	x0, .L$249
	add	x0, x0, :lo12:.L$249
	bl	mkStr
	mov	w1, #450
	bl	cons
	str	x0, [sp, #824]                  // 8-byte Folded Spill
	adrp	x0, .L$250
	add	x0, x0, :lo12:.L$250
	bl	mkStr
	mov	w1, #466
	bl	cons
	str	x0, [sp, #816]                  // 8-byte Folded Spill
	adrp	x0, .L$251
	add	x0, x0, :lo12:.L$251
	bl	mkStr
	mov	w1, #482
	bl	cons
	str	x0, [sp, #808]                  // 8-byte Folded Spill
	adrp	x0, .L$252
	add	x0, x0, :lo12:.L$252
	bl	mkStr
	mov	w1, #498
	bl	cons
	str	x0, [sp, #800]                  // 8-byte Folded Spill
	adrp	x0, .L$253
	add	x0, x0, :lo12:.L$253
	bl	mkStr
	mov	w1, #514
	bl	cons
	str	x0, [sp, #792]                  // 8-byte Folded Spill
	adrp	x0, .L$254
	add	x0, x0, :lo12:.L$254
	bl	mkStr
	mov	w1, #530
	bl	cons
	str	x0, [sp, #784]                  // 8-byte Folded Spill
	adrp	x0, .L$255
	add	x0, x0, :lo12:.L$255
	bl	mkStr
	mov	w1, #546
	bl	cons
	str	x0, [sp, #776]                  // 8-byte Folded Spill
	adrp	x0, .L$256
	add	x0, x0, :lo12:.L$256
	bl	mkStr
	mov	w1, #562
	bl	cons
	str	x0, [sp, #768]                  // 8-byte Folded Spill
	adrp	x0, .L$257
	add	x0, x0, :lo12:.L$257
	bl	mkStr
	mov	w1, #578
	bl	cons
	str	x0, [sp, #760]                  // 8-byte Folded Spill
	adrp	x0, .L$258
	add	x0, x0, :lo12:.L$258
	bl	mkStr
	mov	w1, #594
	bl	cons
	str	x0, [sp, #752]                  // 8-byte Folded Spill
	adrp	x0, .L$259
	add	x0, x0, :lo12:.L$259
	bl	mkStr
	mov	w1, #610
	bl	cons
	str	x0, [sp, #744]                  // 8-byte Folded Spill
	adrp	x0, .L$260
	add	x0, x0, :lo12:.L$260
	bl	mkStr
	mov	w1, #626
	bl	cons
	str	x0, [sp, #736]                  // 8-byte Folded Spill
	adrp	x0, .L$261
	add	x0, x0, :lo12:.L$261
	bl	mkStr
	mov	w1, #642
	bl	cons
	str	x0, [sp, #728]                  // 8-byte Folded Spill
	adrp	x0, .L$262
	add	x0, x0, :lo12:.L$262
	bl	mkStr
	mov	w1, #658
	bl	cons
	str	x0, [sp, #720]                  // 8-byte Folded Spill
	adrp	x0, .L$263
	add	x0, x0, :lo12:.L$263
	bl	mkStr
	mov	w1, #674
	bl	cons
	str	x0, [sp, #712]                  // 8-byte Folded Spill
	adrp	x0, .L$264
	add	x0, x0, :lo12:.L$264
	bl	mkStr
	mov	w1, #690
	bl	cons
	str	x0, [sp, #704]                  // 8-byte Folded Spill
	adrp	x0, .L$265
	add	x0, x0, :lo12:.L$265
	bl	mkStr
	mov	w1, #706
	bl	cons
	str	x0, [sp, #696]                  // 8-byte Folded Spill
	adrp	x0, .L$266
	add	x0, x0, :lo12:.L$266
	bl	mkStr
	mov	w1, #722
	bl	cons
	str	x0, [sp, #688]                  // 8-byte Folded Spill
	adrp	x0, .L$267
	add	x0, x0, :lo12:.L$267
	bl	mkStr
	mov	w1, #738
	bl	cons
	str	x0, [sp, #680]                  // 8-byte Folded Spill
	adrp	x0, .L$268
	add	x0, x0, :lo12:.L$268
	bl	mkStr
	mov	w1, #754
	bl	cons
	str	x0, [sp, #672]                  // 8-byte Folded Spill
	adrp	x0, .L$269
	add	x0, x0, :lo12:.L$269
	bl	mkStr
	mov	w1, #770
	bl	cons
	str	x0, [sp, #664]                  // 8-byte Folded Spill
	adrp	x0, .L$270
	add	x0, x0, :lo12:.L$270
	bl	mkStr
	mov	w1, #770
	bl	cons
	str	x0, [sp, #656]                  // 8-byte Folded Spill
	adrp	x0, .L$271
	add	x0, x0, :lo12:.L$271
	bl	mkStr
	mov	w1, #770
	bl	cons
	str	x0, [sp, #648]                  // 8-byte Folded Spill
	adrp	x0, .L$272
	add	x0, x0, :lo12:.L$272
	bl	mkStr
	mov	w1, #770
	bl	cons
	str	x0, [sp, #640]                  // 8-byte Folded Spill
	adrp	x0, .L$273
	add	x0, x0, :lo12:.L$273
	bl	mkStr
	mov	w1, #834
	bl	cons
	str	x0, [sp, #632]                  // 8-byte Folded Spill
	adrp	x0, .L$274
	add	x0, x0, :lo12:.L$274
	bl	mkStr
	mov	w1, #850
	bl	cons
	str	x0, [sp, #624]                  // 8-byte Folded Spill
	adrp	x0, .L$275
	add	x0, x0, :lo12:.L$275
	bl	mkStr
	mov	w1, #1026
	bl	cons
	str	x0, [sp, #616]                  // 8-byte Folded Spill
	adrp	x0, .L$276
	add	x0, x0, :lo12:.L$276
	bl	mkStr
	mov	w1, #1042
	bl	cons
	str	x0, [sp, #608]                  // 8-byte Folded Spill
	adrp	x0, .L$277
	add	x0, x0, :lo12:.L$277
	bl	mkStr
	mov	w1, #1058
	bl	cons
	str	x0, [sp, #600]                  // 8-byte Folded Spill
	adrp	x0, .L$278
	add	x0, x0, :lo12:.L$278
	bl	mkStr
	mov	w1, #1074
	bl	cons
	str	x0, [sp, #592]                  // 8-byte Folded Spill
	adrp	x0, .L$279
	add	x0, x0, :lo12:.L$279
	bl	mkStr
	mov	w1, #1090
	bl	cons
	str	x0, [sp, #584]                  // 8-byte Folded Spill
	adrp	x0, .L$280
	add	x0, x0, :lo12:.L$280
	bl	mkStr
	mov	w1, #1106
	bl	cons
	str	x0, [sp, #576]                  // 8-byte Folded Spill
	adrp	x0, .L$281
	add	x0, x0, :lo12:.L$281
	bl	mkStr
	mov	w1, #1122
	bl	cons
	str	x0, [sp, #568]                  // 8-byte Folded Spill
	adrp	x0, .L$282
	add	x0, x0, :lo12:.L$282
	bl	mkStr
	mov	w1, #1138
	bl	cons
	str	x0, [sp, #560]                  // 8-byte Folded Spill
	adrp	x0, .L$283
	add	x0, x0, :lo12:.L$283
	bl	mkStr
	mov	w1, #1154
	bl	cons
	str	x0, [sp, #552]                  // 8-byte Folded Spill
	adrp	x0, .L$284
	add	x0, x0, :lo12:.L$284
	bl	mkStr
	mov	w1, #1170
	bl	cons
	str	x0, [sp, #544]                  // 8-byte Folded Spill
	adrp	x0, .L$285
	add	x0, x0, :lo12:.L$285
	bl	mkStr
	mov	w1, #1186
	bl	cons
	str	x0, [sp, #536]                  // 8-byte Folded Spill
	adrp	x0, .L$286
	add	x0, x0, :lo12:.L$286
	bl	mkStr
	mov	w1, #1202
	bl	cons
	str	x0, [sp, #528]                  // 8-byte Folded Spill
	adrp	x0, .L$287
	add	x0, x0, :lo12:.L$287
	bl	mkStr
	mov	w1, #1218
	bl	cons
	str	x0, [sp, #520]                  // 8-byte Folded Spill
	adrp	x0, .L$288
	add	x0, x0, :lo12:.L$288
	bl	mkStr
	mov	w1, #1234
	bl	cons
	str	x0, [sp, #512]                  // 8-byte Folded Spill
	adrp	x0, .L$289
	add	x0, x0, :lo12:.L$289
	bl	mkStr
	mov	w1, #1250
	bl	cons
	str	x0, [sp, #504]                  // 8-byte Folded Spill
	adrp	x0, .L$290
	add	x0, x0, :lo12:.L$290
	bl	mkStr
	mov	w1, #1266
	bl	cons
	str	x0, [sp, #496]                  // 8-byte Folded Spill
	adrp	x0, .L$291
	add	x0, x0, :lo12:.L$291
	bl	mkStr
	mov	w1, #1538
	bl	cons
	str	x0, [sp, #488]                  // 8-byte Folded Spill
	adrp	x0, .L$292
	add	x0, x0, :lo12:.L$292
	bl	mkStr
	mov	w1, #1554
	bl	cons
	str	x0, [sp, #480]                  // 8-byte Folded Spill
	adrp	x0, .L$293
	add	x0, x0, :lo12:.L$293
	bl	mkStr
	mov	w1, #1570
	bl	cons
	str	x0, [sp, #472]                  // 8-byte Folded Spill
	adrp	x0, .L$294
	add	x0, x0, :lo12:.L$294
	bl	mkStr
	mov	w1, #1586
	bl	cons
	str	x0, [sp, #464]                  // 8-byte Folded Spill
	adrp	x0, .L$295
	add	x0, x0, :lo12:.L$295
	bl	mkStr
	mov	w1, #1602
	bl	cons
	str	x0, [sp, #456]                  // 8-byte Folded Spill
	adrp	x0, .L$296
	add	x0, x0, :lo12:.L$296
	bl	mkStr
	mov	w1, #1618
	bl	cons
	str	x0, [sp, #448]                  // 8-byte Folded Spill
	adrp	x0, .L$297
	add	x0, x0, :lo12:.L$297
	bl	mkStr
	mov	w1, #1634
	bl	cons
	str	x0, [sp, #440]                  // 8-byte Folded Spill
	adrp	x0, .L$298
	add	x0, x0, :lo12:.L$298
	bl	mkStr
	mov	w1, #1650
	bl	cons
	str	x0, [sp, #432]                  // 8-byte Folded Spill
	adrp	x0, .L$299
	add	x0, x0, :lo12:.L$299
	bl	mkStr
	mov	w1, #1666
	bl	cons
	str	x0, [sp, #424]                  // 8-byte Folded Spill
	adrp	x0, .L$300
	add	x0, x0, :lo12:.L$300
	bl	mkStr
	mov	w1, #1682
	bl	cons
	str	x0, [sp, #416]                  // 8-byte Folded Spill
	adrp	x0, .L$301
	add	x0, x0, :lo12:.L$301
	bl	mkStr
	mov	w1, #1698
	bl	cons
	str	x0, [sp, #408]                  // 8-byte Folded Spill
	adrp	x0, .L$302
	add	x0, x0, :lo12:.L$302
	bl	mkStr
	mov	w1, #1714
	bl	cons
	str	x0, [sp, #400]                  // 8-byte Folded Spill
	adrp	x0, .L$303
	add	x0, x0, :lo12:.L$303
	bl	mkStr
	mov	w1, #1730
	bl	cons
	str	x0, [sp, #392]                  // 8-byte Folded Spill
	adrp	x0, .L$304
	add	x0, x0, :lo12:.L$304
	bl	mkStr
	mov	w1, #1746
	bl	cons
	str	x0, [sp, #384]                  // 8-byte Folded Spill
	adrp	x0, .L$305
	add	x0, x0, :lo12:.L$305
	bl	mkStr
	mov	w1, #1762
	bl	cons
	str	x0, [sp, #376]                  // 8-byte Folded Spill
	adrp	x0, .L$306
	add	x0, x0, :lo12:.L$306
	bl	mkStr
	mov	w1, #1778
	bl	cons
	str	x0, [sp, #368]                  // 8-byte Folded Spill
	adrp	x0, .L$307
	add	x0, x0, :lo12:.L$307
	bl	mkStr
	mov	w1, #1794
	bl	cons
	str	x0, [sp, #360]                  // 8-byte Folded Spill
	adrp	x0, .L$308
	add	x0, x0, :lo12:.L$308
	bl	mkStr
	mov	w1, #1810
	bl	cons
	str	x0, [sp, #352]                  // 8-byte Folded Spill
	adrp	x0, .L$309
	add	x0, x0, :lo12:.L$309
	bl	mkStr
	mov	w1, #1826
	bl	cons
	str	x0, [sp, #344]                  // 8-byte Folded Spill
	adrp	x0, .L$310
	add	x0, x0, :lo12:.L$310
	bl	mkStr
	mov	w1, #1842
	bl	cons
	str	x0, [sp, #336]                  // 8-byte Folded Spill
	adrp	x0, .L$311
	add	x0, x0, :lo12:.L$311
	bl	mkStr
	mov	w1, #1858
	bl	cons
	str	x0, [sp, #328]                  // 8-byte Folded Spill
	adrp	x0, .L$312
	add	x0, x0, :lo12:.L$312
	bl	mkStr
	mov	w1, #1874
	bl	cons
	str	x0, [sp, #320]                  // 8-byte Folded Spill
	adrp	x0, .L$313
	add	x0, x0, :lo12:.L$313
	bl	mkStr
	mov	w1, #1890
	bl	cons
	str	x0, [sp, #312]                  // 8-byte Folded Spill
	adrp	x0, .L$314
	add	x0, x0, :lo12:.L$314
	bl	mkStr
	mov	w1, #1906
	bl	cons
	str	x0, [sp, #304]                  // 8-byte Folded Spill
	adrp	x0, .L$315
	add	x0, x0, :lo12:.L$315
	bl	mkStr
	mov	w1, #1922
	bl	cons
	str	x0, [sp, #296]                  // 8-byte Folded Spill
	adrp	x0, .L$316
	add	x0, x0, :lo12:.L$316
	bl	mkStr
	mov	w1, #1938
	bl	cons
	str	x0, [sp, #288]                  // 8-byte Folded Spill
	adrp	x0, .L$317
	add	x0, x0, :lo12:.L$317
	bl	mkStr
	mov	w1, #1954
	bl	cons
	str	x0, [sp, #280]                  // 8-byte Folded Spill
	adrp	x0, .L$318
	add	x0, x0, :lo12:.L$318
	bl	mkStr
	mov	w1, #1970
	bl	cons
	str	x0, [sp, #272]                  // 8-byte Folded Spill
	adrp	x0, .L$319
	add	x0, x0, :lo12:.L$319
	bl	mkStr
	mov	w1, #1986
	bl	cons
	str	x0, [sp, #264]                  // 8-byte Folded Spill
	adrp	x0, .L$320
	add	x0, x0, :lo12:.L$320
	bl	mkStr
	mov	w1, #2002
	bl	cons
	str	x0, [sp, #256]                  // 8-byte Folded Spill
	adrp	x0, .L$321
	add	x0, x0, :lo12:.L$321
	bl	mkStr
	mov	w1, #2018
	bl	cons
	str	x0, [sp, #248]                  // 8-byte Folded Spill
	adrp	x0, .L$322
	add	x0, x0, :lo12:.L$322
	bl	mkStr
	mov	w1, #2034
	bl	cons
	str	x0, [sp, #240]                  // 8-byte Folded Spill
	adrp	x0, .L$323
	add	x0, x0, :lo12:.L$323
	bl	mkStr
	mov	w1, #2050
	bl	cons
	str	x0, [sp, #232]                  // 8-byte Folded Spill
	adrp	x0, .L$324
	add	x0, x0, :lo12:.L$324
	bl	mkStr
	mov	w1, #2066
	bl	cons
	str	x0, [sp, #224]                  // 8-byte Folded Spill
	adrp	x0, .L$325
	add	x0, x0, :lo12:.L$325
	bl	mkStr
	mov	w1, #2082
	bl	cons
	str	x0, [sp, #216]                  // 8-byte Folded Spill
	adrp	x0, .L$326
	add	x0, x0, :lo12:.L$326
	bl	mkStr
	mov	w1, #2098
	bl	cons
	str	x0, [sp, #208]                  // 8-byte Folded Spill
	adrp	x0, .L$327
	add	x0, x0, :lo12:.L$327
	bl	mkStr
	mov	w1, #2114
	bl	cons
	str	x0, [sp, #200]                  // 8-byte Folded Spill
	adrp	x0, .L$328
	add	x0, x0, :lo12:.L$328
	bl	mkStr
	mov	w1, #2130
	bl	cons
	str	x0, [sp, #192]                  // 8-byte Folded Spill
	adrp	x0, .L$329
	add	x0, x0, :lo12:.L$329
	bl	mkStr
	mov	w1, #2146
	bl	cons
	str	x0, [sp, #184]                  // 8-byte Folded Spill
	adrp	x0, .L$330
	add	x0, x0, :lo12:.L$330
	bl	mkStr
	mov	w1, #2162
	bl	cons
	str	x0, [sp, #176]                  // 8-byte Folded Spill
	adrp	x0, .L$331
	add	x0, x0, :lo12:.L$331
	bl	mkStr
	mov	w1, #2178
	bl	cons
	str	x0, [sp, #168]                  // 8-byte Folded Spill
	adrp	x0, .L$332
	add	x0, x0, :lo12:.L$332
	bl	mkStr
	mov	w1, #2194
	bl	cons
	str	x0, [sp, #160]                  // 8-byte Folded Spill
	adrp	x0, .L$333
	add	x0, x0, :lo12:.L$333
	bl	mkStr
	mov	w1, #2210
	bl	cons
	str	x0, [sp, #152]                  // 8-byte Folded Spill
	adrp	x0, .L$334
	add	x0, x0, :lo12:.L$334
	bl	mkStr
	mov	w1, #2226
	bl	cons
	str	x0, [sp, #144]                  // 8-byte Folded Spill
	adrp	x0, .L$335
	add	x0, x0, :lo12:.L$335
	bl	mkStr
	mov	w1, #2242
	bl	cons
	str	x0, [sp, #136]                  // 8-byte Folded Spill
	adrp	x0, .L$336
	add	x0, x0, :lo12:.L$336
	bl	mkStr
	mov	w1, #2258
	bl	cons
	str	x0, [sp, #128]                  // 8-byte Folded Spill
	adrp	x0, .L$337
	add	x0, x0, :lo12:.L$337
	bl	mkStr
	mov	w1, #2274
	bl	cons
	str	x0, [sp, #120]                  // 8-byte Folded Spill
	adrp	x0, .L$338
	add	x0, x0, :lo12:.L$338
	bl	mkStr
	mov	w1, #2290
	bl	cons
	str	x0, [sp, #112]                  // 8-byte Folded Spill
	adrp	x0, .L$339
	add	x0, x0, :lo12:.L$339
	bl	mkStr
	mov	w1, #2306
	bl	cons
	str	x0, [sp, #104]                  // 8-byte Folded Spill
	adrp	x0, .L$340
	add	x0, x0, :lo12:.L$340
	bl	mkStr
	mov	w1, #2322
	bl	cons
	str	x0, [sp, #96]                   // 8-byte Folded Spill
	adrp	x0, .L$341
	add	x0, x0, :lo12:.L$341
	bl	mkStr
	mov	w1, #2338
	bl	cons
	str	x0, [sp, #88]                   // 8-byte Folded Spill
	adrp	x0, .L$342
	add	x0, x0, :lo12:.L$342
	bl	mkStr
	mov	w1, #2354
	bl	cons
	str	x0, [sp, #80]                   // 8-byte Folded Spill
	adrp	x0, .L$343
	add	x0, x0, :lo12:.L$343
	bl	mkStr
	mov	w1, #2370
	bl	cons
	str	x0, [sp, #72]                   // 8-byte Folded Spill
	adrp	x0, .L$344
	add	x0, x0, :lo12:.L$344
	bl	mkStr
	mov	w1, #2386
	bl	cons
	str	x0, [sp, #64]                   // 8-byte Folded Spill
	adrp	x0, .L$345
	add	x0, x0, :lo12:.L$345
	bl	mkStr
	mov	w1, #2402
	bl	cons
	str	x0, [sp, #56]                   // 8-byte Folded Spill
	adrp	x0, .L$346
	add	x0, x0, :lo12:.L$346
	bl	mkStr
	mov	w1, #2418
	bl	cons
	str	x0, [sp, #48]                   // 8-byte Folded Spill
	adrp	x0, .L$347
	add	x0, x0, :lo12:.L$347
	bl	mkStr
	mov	w1, #2434
	bl	cons
	str	x0, [sp, #40]                   // 8-byte Folded Spill
	adrp	x0, .L$348
	add	x0, x0, :lo12:.L$348
	bl	mkStr
	mov	w1, #2450
	bl	cons
	str	x0, [sp, #32]                   // 8-byte Folded Spill
	adrp	x0, .L$349
	add	x0, x0, :lo12:.L$349
	bl	mkStr
	mov	w1, #2466
	bl	cons
	str	x0, [sp, #24]                   // 8-byte Folded Spill
	adrp	x0, .L$350
	add	x0, x0, :lo12:.L$350
	bl	mkStr
	mov	w1, #2482
	bl	cons
	str	x0, [sp, #16]                   // 8-byte Folded Spill
	adrp	x0, .L$351
	add	x0, x0, :lo12:.L$351
	bl	mkStr
	mov	w1, #2498
	bl	cons
	str	x0, [sp, #8]                    // 8-byte Folded Spill
	adrp	x0, .L$352
	add	x0, x0, :lo12:.L$352
	bl	mkStr
	mov	w1, #2514
	bl	cons
	mov	x27, x0
	adrp	x0, .L$353
	add	x0, x0, :lo12:.L$353
	bl	mkStr
	mov	w1, #2530
	bl	cons
	mov	x28, x0
	adrp	x0, .L$354
	add	x0, x0, :lo12:.L$354
	bl	mkStr
	mov	w1, #2546
	bl	cons
	mov	x29, x0
	adrp	x0, .L$355
	add	x0, x0, :lo12:.L$355
	bl	mkStr
	mov	w1, #2706
	bl	cons
	mov	x20, x0
	adrp	x0, .L$356
	add	x0, x0, :lo12:.L$356
	bl	mkStr
	mov	w1, #2802
	bl	cons
	mov	x21, x0
	adrp	x0, .L$357
	add	x0, x0, :lo12:.L$357
	bl	mkStr
	mov	w1, #2818
	bl	cons
	mov	x22, x0
	adrp	x0, .L$358
	add	x0, x0, :lo12:.L$358
	bl	mkStr
	mov	w1, #2834
	bl	cons
	mov	x23, x0
	adrp	x0, .L$359
	add	x0, x0, :lo12:.L$359
	bl	mkStr
	mov	w1, #2850
	bl	cons
	mov	x24, x0
	adrp	x0, .L$360
	add	x0, x0, :lo12:.L$360
	bl	mkStr
	mov	w1, #2882
	bl	cons
	mov	x25, x0
	adrp	x0, .L$361
	add	x0, x0, :lo12:.L$361
	bl	mkStr
	mov	w1, #3026
	bl	cons
	mov	x19, x0
	adrp	x0, .L$362
	add	x0, x0, :lo12:.L$362
	bl	mkStr
	mov	w1, #3042
	bl	cons
	mov	x26, x0
	adrp	x0, .L$363
	add	x0, x0, :lo12:.L$363
	bl	mkStr
	mov	w1, #3330
	bl	cons
	adrp	x1, SymTab+8
	add	x1, x1, :lo12:SymTab+8
	bl	cons
	mov	x1, x0
	mov	x0, x26
	bl	cons
	mov	x1, x0
	mov	x0, x19
	bl	cons
	mov	x1, x0
	mov	x0, x25
	bl	cons
	mov	x1, x0
	mov	x0, x24
	bl	cons
	mov	x1, x0
	mov	x0, x23
	bl	cons
	mov	x1, x0
	mov	x0, x22
	bl	cons
	mov	x1, x0
	mov	x0, x21
	bl	cons
	mov	x1, x0
	mov	x0, x20
	bl	cons
	mov	x1, x0
	mov	x0, x29
	bl	cons
	mov	x1, x0
	mov	x0, x28
	bl	cons
	mov	x1, x0
	mov	x0, x27
	bl	cons
	mov	x1, x0
	ldr	x0, [sp, #8]                    // 8-byte Folded Reload
	bl	cons
	mov	x1, x0
	ldr	x0, [sp, #16]                   // 8-byte Folded Reload
	bl	cons
	mov	x1, x0
	ldr	x0, [sp, #24]                   // 8-byte Folded Reload
	bl	cons
	mov	x1, x0
	ldr	x0, [sp, #32]                   // 8-byte Folded Reload
	bl	cons
	mov	x1, x0
	ldr	x0, [sp, #40]                   // 8-byte Folded Reload
	bl	cons
	mov	x1, x0
	ldr	x0, [sp, #48]                   // 8-byte Folded Reload
	bl	cons
	mov	x1, x0
	ldr	x0, [sp, #56]                   // 8-byte Folded Reload
	bl	cons
	mov	x1, x0
	ldr	x0, [sp, #64]                   // 8-byte Folded Reload
	bl	cons
	mov	x1, x0
	ldr	x0, [sp, #72]                   // 8-byte Folded Reload
	bl	cons
	mov	x1, x0
	ldr	x0, [sp, #80]                   // 8-byte Folded Reload
	bl	cons
	mov	x1, x0
	ldr	x0, [sp, #88]                   // 8-byte Folded Reload
	bl	cons
	mov	x1, x0
	ldr	x0, [sp, #96]                   // 8-byte Folded Reload
	bl	cons
	mov	x1, x0
	ldr	x0, [sp, #104]                  // 8-byte Folded Reload
	bl	cons
	mov	x1, x0
	ldr	x0, [sp, #112]                  // 8-byte Folded Reload
	bl	cons
	mov	x1, x0
	ldr	x0, [sp, #120]                  // 8-byte Folded Reload
	bl	cons
	mov	x1, x0
	ldr	x0, [sp, #128]                  // 8-byte Folded Reload
	bl	cons
	mov	x1, x0
	ldr	x0, [sp, #136]                  // 8-byte Folded Reload
	bl	cons
	mov	x1, x0
	ldr	x0, [sp, #144]                  // 8-byte Folded Reload
	bl	cons
	mov	x1, x0
	ldr	x0, [sp, #152]                  // 8-byte Folded Reload
	bl	cons
	mov	x1, x0
	ldr	x0, [sp, #160]                  // 8-byte Folded Reload
	bl	cons
	mov	x1, x0
	ldr	x0, [sp, #168]                  // 8-byte Folded Reload
	bl	cons
	mov	x1, x0
	ldr	x0, [sp, #176]                  // 8-byte Folded Reload
	bl	cons
	mov	x1, x0
	ldr	x0, [sp, #184]                  // 8-byte Folded Reload
	bl	cons
	mov	x1, x0
	ldr	x0, [sp, #192]                  // 8-byte Folded Reload
	bl	cons
	mov	x1, x0
	ldr	x0, [sp, #200]                  // 8-byte Folded Reload
	bl	cons
	mov	x1, x0
	ldr	x0, [sp, #208]                  // 8-byte Folded Reload
	bl	cons
	mov	x1, x0
	ldr	x0, [sp, #216]                  // 8-byte Folded Reload
	bl	cons
	mov	x1, x0
	ldr	x0, [sp, #224]                  // 8-byte Folded Reload
	bl	cons
	mov	x1, x0
	ldr	x0, [sp, #232]                  // 8-byte Folded Reload
	bl	cons
	mov	x1, x0
	ldr	x0, [sp, #240]                  // 8-byte Folded Reload
	bl	cons
	mov	x1, x0
	ldr	x0, [sp, #248]                  // 8-byte Folded Reload
	bl	cons
	mov	x1, x0
	ldr	x0, [sp, #256]                  // 8-byte Folded Reload
	bl	cons
	mov	x1, x0
	ldr	x0, [sp, #264]                  // 8-byte Folded Reload
	bl	cons
	mov	x1, x0
	ldr	x0, [sp, #272]                  // 8-byte Folded Reload
	bl	cons
	mov	x1, x0
	ldr	x0, [sp, #280]                  // 8-byte Folded Reload
	bl	cons
	mov	x1, x0
	ldr	x0, [sp, #288]                  // 8-byte Folded Reload
	bl	cons
	mov	x1, x0
	ldr	x0, [sp, #296]                  // 8-byte Folded Reload
	bl	cons
	mov	x1, x0
	ldr	x0, [sp, #304]                  // 8-byte Folded Reload
	bl	cons
	mov	x1, x0
	ldr	x0, [sp, #312]                  // 8-byte Folded Reload
	bl	cons
	mov	x1, x0
	ldr	x0, [sp, #320]                  // 8-byte Folded Reload
	bl	cons
	mov	x1, x0
	ldr	x0, [sp, #328]                  // 8-byte Folded Reload
	bl	cons
	mov	x1, x0
	ldr	x0, [sp, #336]                  // 8-byte Folded Reload
	bl	cons
	mov	x1, x0
	ldr	x0, [sp, #344]                  // 8-byte Folded Reload
	bl	cons
	mov	x1, x0
	ldr	x0, [sp, #352]                  // 8-byte Folded Reload
	bl	cons
	mov	x1, x0
	ldr	x0, [sp, #360]                  // 8-byte Folded Reload
	bl	cons
	mov	x1, x0
	ldr	x0, [sp, #368]                  // 8-byte Folded Reload
	bl	cons
	mov	x1, x0
	ldr	x0, [sp, #376]                  // 8-byte Folded Reload
	bl	cons
	mov	x1, x0
	ldr	x0, [sp, #384]                  // 8-byte Folded Reload
	bl	cons
	mov	x1, x0
	ldr	x0, [sp, #392]                  // 8-byte Folded Reload
	bl	cons
	mov	x1, x0
	ldr	x0, [sp, #400]                  // 8-byte Folded Reload
	bl	cons
	mov	x1, x0
	ldr	x0, [sp, #408]                  // 8-byte Folded Reload
	bl	cons
	mov	x1, x0
	ldr	x0, [sp, #416]                  // 8-byte Folded Reload
	bl	cons
	mov	x1, x0
	ldr	x0, [sp, #424]                  // 8-byte Folded Reload
	bl	cons
	mov	x1, x0
	ldr	x0, [sp, #432]                  // 8-byte Folded Reload
	bl	cons
	mov	x1, x0
	ldr	x0, [sp, #440]                  // 8-byte Folded Reload
	bl	cons
	mov	x1, x0
	ldr	x0, [sp, #448]                  // 8-byte Folded Reload
	bl	cons
	mov	x1, x0
	ldr	x0, [sp, #456]                  // 8-byte Folded Reload
	bl	cons
	mov	x1, x0
	ldr	x0, [sp, #464]                  // 8-byte Folded Reload
	bl	cons
	mov	x1, x0
	ldr	x0, [sp, #472]                  // 8-byte Folded Reload
	bl	cons
	mov	x1, x0
	ldr	x0, [sp, #480]                  // 8-byte Folded Reload
	bl	cons
	mov	x1, x0
	ldr	x0, [sp, #488]                  // 8-byte Folded Reload
	bl	cons
	mov	x1, x0
	ldr	x0, [sp, #496]                  // 8-byte Folded Reload
	bl	cons
	mov	x1, x0
	ldr	x0, [sp, #504]                  // 8-byte Folded Reload
	bl	cons
	mov	x1, x0
	ldr	x0, [sp, #512]                  // 8-byte Folded Reload
	bl	cons
	mov	x1, x0
	ldr	x0, [sp, #520]                  // 8-byte Folded Reload
	bl	cons
	mov	x1, x0
	ldr	x0, [sp, #528]                  // 8-byte Folded Reload
	bl	cons
	mov	x1, x0
	ldr	x0, [sp, #536]                  // 8-byte Folded Reload
	bl	cons
	mov	x1, x0
	ldr	x0, [sp, #544]                  // 8-byte Folded Reload
	bl	cons
	mov	x1, x0
	ldr	x0, [sp, #552]                  // 8-byte Folded Reload
	bl	cons
	mov	x1, x0
	ldr	x0, [sp, #560]                  // 8-byte Folded Reload
	bl	cons
	mov	x1, x0
	ldr	x0, [sp, #568]                  // 8-byte Folded Reload
	bl	cons
	mov	x1, x0
	ldr	x0, [sp, #576]                  // 8-byte Folded Reload
	bl	cons
	mov	x1, x0
	ldr	x0, [sp, #584]                  // 8-byte Folded Reload
	bl	cons
	mov	x1, x0
	ldr	x0, [sp, #592]                  // 8-byte Folded Reload
	bl	cons
	mov	x1, x0
	ldr	x0, [sp, #600]                  // 8-byte Folded Reload
	bl	cons
	mov	x1, x0
	ldr	x0, [sp, #608]                  // 8-byte Folded Reload
	bl	cons
	mov	x1, x0
	ldr	x0, [sp, #616]                  // 8-byte Folded Reload
	bl	cons
	mov	x1, x0
	ldr	x0, [sp, #624]                  // 8-byte Folded Reload
	bl	cons
	mov	x1, x0
	ldr	x0, [sp, #632]                  // 8-byte Folded Reload
	bl	cons
	mov	x1, x0
	ldr	x0, [sp, #640]                  // 8-byte Folded Reload
	bl	cons
	mov	x1, x0
	ldr	x0, [sp, #648]                  // 8-byte Folded Reload
	bl	cons
	mov	x1, x0
	ldr	x0, [sp, #656]                  // 8-byte Folded Reload
	bl	cons
	mov	x1, x0
	ldr	x0, [sp, #664]                  // 8-byte Folded Reload
	bl	cons
	mov	x1, x0
	ldr	x0, [sp, #672]                  // 8-byte Folded Reload
	bl	cons
	mov	x1, x0
	ldr	x0, [sp, #680]                  // 8-byte Folded Reload
	bl	cons
	mov	x1, x0
	ldr	x0, [sp, #688]                  // 8-byte Folded Reload
	bl	cons
	mov	x1, x0
	ldr	x0, [sp, #696]                  // 8-byte Folded Reload
	bl	cons
	mov	x1, x0
	ldr	x0, [sp, #704]                  // 8-byte Folded Reload
	bl	cons
	mov	x1, x0
	ldr	x0, [sp, #712]                  // 8-byte Folded Reload
	bl	cons
	mov	x1, x0
	ldr	x0, [sp, #720]                  // 8-byte Folded Reload
	bl	cons
	mov	x1, x0
	ldr	x0, [sp, #728]                  // 8-byte Folded Reload
	bl	cons
	mov	x1, x0
	ldr	x0, [sp, #736]                  // 8-byte Folded Reload
	bl	cons
	mov	x1, x0
	ldr	x0, [sp, #744]                  // 8-byte Folded Reload
	bl	cons
	mov	x1, x0
	ldr	x0, [sp, #752]                  // 8-byte Folded Reload
	bl	cons
	mov	x1, x0
	ldr	x0, [sp, #760]                  // 8-byte Folded Reload
	bl	cons
	mov	x1, x0
	ldr	x0, [sp, #768]                  // 8-byte Folded Reload
	bl	cons
	mov	x1, x0
	ldr	x0, [sp, #776]                  // 8-byte Folded Reload
	bl	cons
	mov	x1, x0
	ldr	x0, [sp, #784]                  // 8-byte Folded Reload
	bl	cons
	mov	x1, x0
	ldr	x0, [sp, #792]                  // 8-byte Folded Reload
	bl	cons
	mov	x1, x0
	ldr	x0, [sp, #800]                  // 8-byte Folded Reload
	bl	cons
	mov	x1, x0
	ldr	x0, [sp, #808]                  // 8-byte Folded Reload
	bl	cons
	mov	x1, x0
	ldr	x0, [sp, #816]                  // 8-byte Folded Reload
	bl	cons
	mov	x1, x0
	ldr	x0, [sp, #824]                  // 8-byte Folded Reload
	bl	cons
	mov	x1, x0
	ldr	x0, [sp, #832]                  // 8-byte Folded Reload
	bl	cons
	mov	x1, x0
	ldr	x0, [sp, #840]                  // 8-byte Folded Reload
	bl	cons
	adrp	x8, SymTab+8
	add	x8, x8, :lo12:SymTab+8
	str	x0, [x8, #704]
	add	sp, sp, #848                    // =848
	ldp	x20, x19, [sp, #80]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #64]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #48]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #32]             // 16-byte Folded Reload
	ldp	x28, x27, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #96             // 16-byte Folded Reload
	ret
.Lfunc_end592:
	.size	setPeri, .Lfunc_end592-setPeri
	.cfi_endproc
                                        // -- End function
	.globl	main                            // -- Begin function main
	.p2align	4
	.type	main,@function
main:                                   // @main
	.cfi_startproc
// %bb.0:                               // %"$1"
	str	x30, [sp, #-48]!                // 8-byte Folded Spill
	stp	x22, x21, [sp, #16]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #32]             // 16-byte Folded Spill
	.cfi_def_cfa_offset 48
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w30, -48
	//APP
	mrs	x8, CNTVCT_EL0
	//NO_APP
	adrp	x19, SymTab+8
	add	x19, x19, :lo12:SymTab+8
	adrp	x9, ($USec)
	mov	w10, #2
	movk	w10, #16384, lsl #16
	str	x8, [x9, :lo12:($USec)]
	adrp	x20, ($QuitRst)
	add	x20, x20, :lo12:($QuitRst)
	str	x10, [x19, #624]
	mov	w8, #144
	strb	w8, [x20]
	adrp	x21, ($Heap)
	mov	w8, #1168
	movk	w8, #1024, lsl #16
	str	x8, [x21, :lo12:($Heap)]
	adrp	x22, ($Limit)
	str	x8, [x22, :lo12:($Limit)]
	adrp	x8, _putUART1
	add	x8, x8, :lo12:_putUART1
	adrp	x9, ($Put)
	str	x8, [x9, :lo12:($Put)]
	adrp	x8, ($Get)
	adrp	x9, _getUART1
	add	x9, x9, :lo12:_getUART1
	str	x9, [x8, :lo12:($Get)]
	bl	newline
	adrp	x0, .L$364
	add	x0, x0, :lo12:.L$364
	bl	outString
	mov	w0, #67108864
	bl	outWord
	bl	newline
	adrp	x0, .L$365
	add	x0, x0, :lo12:.L$365
	bl	outString
	mov	x0, x20
	bl	outWord
	bl	newline
	adrp	x0, .L$366
	add	x0, x0, :lo12:.L$366
	bl	outString
	ldr	x0, [x21, :lo12:($Heap)]
	bl	outWord
	bl	newline
	adrp	x0, .L$367
	add	x0, x0, :lo12:.L$367
	bl	outString
	ldr	x0, [x22, :lo12:($Limit)]
	bl	outWord
	bl	newline
	adrp	x0, .L$368
	add	x0, x0, :lo12:.L$368
	bl	outString
	bl	heapAlloc
	adrp	x0, .L$369
	add	x0, x0, :lo12:.L$369
	bl	outString
	mov	w8, #6080
	add	x22, x19, x8
	mov	x20, x19
	b	.LBB593_2
.LBB593_1:                              // %"$7"
                                        //   in Loop: Header=BB593_2 Depth=1
	add	x20, x20, #16                   // =16
.LBB593_2:                              // %"$5"
                                        // =>This Inner Loop Header: Depth=1
	ldp	w21, w8, [x20, #-8]
	bfi	x21, x8, #32, #32
	tst	x21, #0x6
	b.eq	.LBB593_1
// %bb.3:                               // %"$6"
                                        //   in Loop: Header=BB593_2 Depth=1
	ldr	x3, [x19, #64]
	mov	x0, x20
	mov	x1, xzr
	mov	x2, x21
	mov	x4, x19
	mov	w5, wzr
	bl	intern
	cmp	x20, x22
	b.eq	.LBB593_6
// %bb.4:                               // %"$8"
                                        //   in Loop: Header=BB593_2 Depth=1
	tbz	w21, #2, .LBB593_1
// %bb.5:                               // %"$10"
                                        //   in Loop: Header=BB593_2 Depth=1
	add	x20, x20, #16                   // =16
	b	.LBB593_1
.LBB593_6:                              // %"$9"
	str	x19, [x19, #592]
	add	x0, x19, #336                   // =336
	str	x0, [x19, #160]
	mov	w8, #26
	str	x8, [x19, #328]
	mov	x1, x19
	bl	cons
	adrp	x8, ($Extern)
	str	x0, [x8, :lo12:($Extern)]
	bl	setPeri
	adrp	x0, ($Kerns)
	add	x0, x0, :lo12:($Kerns)
	bl	mkStr
	str	x0, [x19, #608]
	bl	loadKern
	ldp	x20, x19, [sp, #32]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #16]             // 16-byte Folded Reload
	ldr	x30, [sp], #48                  // 8-byte Folded Reload
	ret
.Lfunc_end593:
	.size	main, .Lfunc_end593-main
	.cfi_endproc
                                        // -- End function
	.type	$Heap,@object                   // @"$Heap"
	.bss
	.globl	$Heap
	.p2align	3
$Heap:
	.xword	0                               // 0x0
	.size	$Heap, 8

	.type	$Limit,@object                  // @"$Limit"
	.globl	$Limit
	.p2align	3
$Limit:
	.xword	0                               // 0x0
	.size	$Limit, 8

	.type	$Heaps,@object                  // @"$Heaps"
	.globl	$Heaps
	.p2align	3
$Heaps:
	.xword	0                               // 0x0
	.size	$Heaps, 8

	.type	$Avail,@object                  // @"$Avail"
	.globl	$Avail
	.p2align	3
$Avail:
	.xword	0                               // 0x0
	.size	$Avail, 8

	.type	$Extern,@object                 // @"$Extern"
	.globl	$Extern
	.p2align	3
$Extern:
	.xword	0                               // 0x0
	.size	$Extern, 8

	.type	$ExtCnt,@object                 // @"$ExtCnt"
	.data
	.globl	$ExtCnt
	.p2align	3
$ExtCnt:
	.xword	1                               // 0x1
	.size	$ExtCnt, 8

	.type	$ExtSkip,@object                // @"$ExtSkip"
	.bss
	.globl	$ExtSkip
	.p2align	3
$ExtSkip:
	.xword	0                               // 0x0
	.size	$ExtSkip, 8

	.type	$StkSize,@object                // @"$StkSize"
	.data
	.globl	$StkSize
	.p2align	3
$StkSize:
	.xword	65536                           // 0x10000
	.size	$StkSize, 8

	.type	$StkLimit,@object               // @"$StkLimit"
	.bss
	.globl	$StkLimit
	.p2align	3
$StkLimit:
	.xword	0
	.size	$StkLimit, 8

	.type	$Stdin,@object                  // @"$Stdin"
	.globl	$Stdin
	.p2align	3
$Stdin:
	.xword	0
	.size	$Stdin, 8

	.type	$Stdout,@object                 // @"$Stdout"
	.globl	$Stdout
	.p2align	3
$Stdout:
	.xword	0
	.size	$Stdout, 8

	.type	$ReplPrmt,@object               // @"$ReplPrmt"
	.globl	$ReplPrmt
	.p2align	3
$ReplPrmt:
	.xword	0
	.size	$ReplPrmt, 8

	.type	$ContPrmt,@object               // @"$ContPrmt"
	.globl	$ContPrmt
	.p2align	3
$ContPrmt:
	.xword	0
	.size	$ContPrmt, 8

	.type	$Ret,@object                    // @"$Ret"
	.globl	$Ret
	.p2align	3
$Ret:
	.xword	0                               // 0x0
	.size	$Ret, 8

	.type	$Chr,@object                    // @"$Chr"
	.globl	$Chr
	.p2align	2
$Chr:
	.word	0                               // 0x0
	.size	$Chr, 4

	.type	$Put,@object                    // @"$Put"
	.globl	$Put
	.p2align	3
$Put:
	.xword	0
	.size	$Put, 8

	.type	$Get,@object                    // @"$Get"
	.globl	$Get
	.p2align	3
$Get:
	.xword	0
	.size	$Get, 8

	.type	$PutBin,@object                 // @"$PutBin"
	.globl	$PutBin
	.p2align	3
$PutBin:
	.xword	0
	.size	$PutBin, 8

	.type	$GetBin,@object                 // @"$GetBin"
	.globl	$GetBin
	.p2align	3
$GetBin:
	.xword	0
	.size	$GetBin, 8

	.type	$SeedL,@object                  // @"$SeedL"
	.globl	$SeedL
	.p2align	3
$SeedL:
	.xword	0                               // 0x0
	.size	$SeedL, 8

	.type	$SeedH,@object                  // @"$SeedH"
	.globl	$SeedH
	.p2align	3
$SeedH:
	.xword	0                               // 0x0
	.size	$SeedH, 8

	.type	$USec,@object                   // @"$USec"
	.globl	$USec
	.p2align	3
$USec:
	.xword	0                               // 0x0
	.size	$USec, 8

	.type	$Ptr,@object                    // @"$Ptr"
	.globl	$Ptr
	.p2align	3
$Ptr:
	.xword	0
	.size	$Ptr, 8

	.type	$End,@object                    // @"$End"
	.globl	$End
	.p2align	3
$End:
	.xword	0
	.size	$End, 8

	.type	$BufX,@object                   // @"$BufX"
	.globl	$BufX
	.p2align	3
$BufX:
	.xword	0
	.size	$BufX, 8

	.type	$PtrX,@object                   // @"$PtrX"
	.globl	$PtrX
	.p2align	3
$PtrX:
	.xword	0
	.size	$PtrX, 8

	.type	$EndX,@object                   // @"$EndX"
	.globl	$EndX
	.p2align	3
$EndX:
	.xword	0
	.size	$EndX, 8

	.type	$ExtN,@object                   // @"$ExtN"
	.globl	$ExtN
	.p2align	2
$ExtN:
	.word	0                               // 0x0
	.size	$ExtN, 4

	.type	$Extn,@object                   // @"$Extn"
	.globl	$Extn
	.p2align	2
$Extn:
	.word	0                               // 0x0
	.size	$Extn, 4

	.type	$StrP,@object                   // @"$StrP"
	.globl	$StrP
	.p2align	3
$StrP:
	.xword	0
	.size	$StrP, 8

	.type	$GcCount,@object                // @"$GcCount"
	.data
	.globl	$GcCount
	.p2align	3
$GcCount:
	.xword	65536                           // 0x10000
	.size	$GcCount, 8

	.type	$DbFiles,@object                // @"$DbFiles"
	.bss
	.globl	$DbFiles
	.p2align	3
$DbFiles:
	.xword	0
	.size	$DbFiles, 8

	.type	$DbFile,@object                 // @"$DbFile"
	.globl	$DbFile
	.p2align	3
$DbFile:
	.xword	0
	.size	$DbFile, 8

	.type	$DBs,@object                    // @"$DBs"
	.globl	$DBs
	.p2align	2
$DBs:
	.word	0                               // 0x0
	.size	$DBs, 4

	.type	$MaxBlkSize,@object             // @"$MaxBlkSize"
	.globl	$MaxBlkSize
	.p2align	2
$MaxBlkSize:
	.word	0                               // 0x0
	.size	$MaxBlkSize, 4

	.type	$DbBlock,@object                // @"$DbBlock"
	.globl	$DbBlock
	.p2align	3
$DbBlock:
	.xword	0
	.size	$DbBlock, 8

	.type	$BlkIndex,@object               // @"$BlkIndex"
	.globl	$BlkIndex
	.p2align	3
$BlkIndex:
	.xword	0                               // 0x0
	.size	$BlkIndex, 8

	.type	$BlkLink,@object                // @"$BlkLink"
	.globl	$BlkLink
	.p2align	3
$BlkLink:
	.xword	0                               // 0x0
	.size	$BlkLink, 8

	.type	$BlkPtr,@object                 // @"$BlkPtr"
	.globl	$BlkPtr
	.p2align	3
$BlkPtr:
	.xword	0
	.size	$BlkPtr, 8

	.type	$BlkEnd,@object                 // @"$BlkEnd"
	.globl	$BlkEnd
	.p2align	3
$BlkEnd:
	.xword	0
	.size	$BlkEnd, 8

	.type	$DbJnl,@object                  // @"$DbJnl"
	.globl	$DbJnl
	.p2align	3
$DbJnl:
	.xword	0
	.size	$DbJnl, 8

	.type	$DbLog,@object                  // @"$DbLog"
	.globl	$DbLog
	.p2align	3
$DbLog:
	.xword	0
	.size	$DbLog, 8

	.type	$JmpBufSize,@object             // @"$JmpBufSize"
	.data
	.globl	$JmpBufSize
	.p2align	3
$JmpBufSize:
	.xword	256                             // 0x100
	.size	$JmpBufSize, 8

	.type	$QuitRst,@object                // @"$QuitRst"
	.bss
	.globl	$QuitRst
	.p2align	4
$QuitRst:
	.zero	176
	.size	$QuitRst, 176

	.type	$Signal,@object                 // @"$Signal"
	.globl	$Signal
	.p2align	4
$Signal:
	.zero	4100
	.size	$Signal, 4100

	.type	SymTab,@object                  // @SymTab
	.data
	.globl	SymTab
	.p2align	4
SymTab:
	.xword	79992034                        // 0x4c494e2
	.xword	SymTab+8
	.xword	SymTab+8
	.xword	0                               // 0x0
	.xword	2018                            // 0x7e2
	.xword	SymTab+40
	.xword	SymTab+8
	.xword	SymTab+8
	.xword	SymTab+40
	.xword	SymTab+48
	.xword	29900576514                     // 0x6f6369702
	.xword	SymTab+64
	.xword	SymTab+88
	.xword	SymTab+8
	.xword	SymTab+8
	.xword	SymTab+8
	.xword	SymTab+40
	.xword	SymTab+112
	.xword	31785953026                     // 0x766972702
	.xword	SymTab+128
	.xword	69485218                        // 0x42442a2
	.xword	0                               // 0x0
	.xword	28039337682                     // 0x6874656d2
	.xword	__meth+2
	.xword	6971922536210                   // 0x65746f75712
	.xword	_quote+2
	.xword	1346                            // 0x542
	.xword	SymTab+216
	.xword	1250                            // 0x4e2
	.xword	SymTab+8
	.xword	1074                            // 0x432
	.xword	SymTab+8
	.xword	1330                            // 0x532
	.xword	SymTab+8
	.xword	1058                            // 0x422
	.xword	SymTab+8
	.xword	1170                            // 0x492
	.xword	SymTab+8
	.xword	1282                            // 0x502
	.xword	SymTab+8
	.xword	1394                            // 0x572
	.xword	SymTab+8
	.xword	0                               // 0x0
	.xword	SymTab+8
	.xword	7656969679522                   // 0x6f6c6f532a2
	.xword	2                               // 0x2
	.xword	1026                            // 0x402
	.xword	SymTab+8
	.xword	263170                          // 0x40402
	.xword	SymTab+8
	.xword	67372034                        // 0x4040402
	.xword	SymTab+8
	.xword	30980605250                     // 0x736968542
	.xword	SymTab+8
	.xword	524395401951117986              // 0x74706d6f72502a2
	.xword	SymTab+8
	.xword	30166852258                     // 0x70615a2a2
	.xword	SymTab+8
	.xword	31264625314                     // 0x7478452a2
	.xword	SymTab+8
	.xword	29095178914                     // 0x6c63532a2
	.xword	2                               // 0x2
	.xword	2031030286693026                // 0x7373616c432a2
	.xword	SymTab+8
	.xword	29650920098                     // 0x6e75522a2
	.xword	SymTab+8
	.xword	1506                            // 0x5e2
	.xword	SymTab+8
	.xword	30721462946                     // 0x7272452a2
	.xword	SymTab+8
	.xword	27769754274                     // 0x67734d2a2
	.xword	SymTab+8
	.xword	28301415074                     // 0x696e552a2
	.xword	SymTab+8
	.xword	27751891618                     // 0x6762442a2
	.xword	SymTab+8
	.xword	7589850296994                   // 0x6e72654b2a2
	.xword	SymTab+8
	.xword	8276203066018                   // 0x786f424d2a2
	.xword	SymTab+8
	.xword	1201316426977954                // 0x4449746e492a2
	.xword	SymTab+8
	.xword	31254155938                     // 0x746e492a2
	.xword	SymTab+8
	.xword	7246252933794                   // 0x697265502a2
	.xword	SymTab+8
	.xword	26685502114                     // 0x6369472a2
	.xword	SymTab+8
	.xword	30453043874                     // 0x7172492a2
	.xword	SymTab+8
	.xword	32335205026                     // 0x7875412a2
	.xword	SymTab+8
	.xword	8002163004066                   // 0x747261552a2
	.xword	SymTab+8
	.xword	6834489721506                   // 0x637475502a2
	.xword	SymTab+8
	.xword	109327010                       // 0x68432a2
	.xword	SymTab+8
	.xword	6834472907426                   // 0x637465472a2
	.xword	SymTab+8
	.xword	SymTab+820
	.xword	SymTab+8
	.xword	7310579611546251107             // 0x6574656c706d6f63
	.xword	2                               // 0x2
	.xword	407154                          // 0x63672
	.xword	_gc+2
	.xword	2047388749854306                // 0x74616d726f662
	.xword	_format+2
	.xword	690                             // 0x2b2
	.xword	_add+2
	.xword	722                             // 0x2d2
	.xword	_sub+2
	.xword	104261266                       // 0x636e692
	.xword	_inc+2
	.xword	104224322                       // 0x6365642
	.xword	_dec+2
	.xword	674                             // 0x2a2
	.xword	_mul+2
	.xword	193186                          // 0x2f2a2
	.xword	_mulDiv+2
	.xword	754                             // 0x2f2
	.xword	_div+2
	.xword	594                             // 0x252
	.xword	_rem+2
	.xword	254946                          // 0x3e3e2
	.xword	_shr+2
	.xword	50808514                        // 0x30746c2
	.xword	_lt0+2
	.xword	50747074                        // 0x30656c2
	.xword	_le0+2
	.xword	50746994                        // 0x3065672
	.xword	_ge0+2
	.xword	50808434                        // 0x3074672
	.xword	_gt0+2
	.xword	120989202                       // 0x7362612
	.xword	_abs+2
	.xword	17033500194                     // 0x3f7469622
	.xword	_bitQ+2
	.xword	610                             // 0x262
	.xword	_bitAnd+2
	.xword	1986                            // 0x7c2
	.xword	_bitOr+2
	.xword	509826                          // 0x7c782
	.xword	_bitXor+2
	.xword	31258515250                     // 0x747271732
	.xword	_sqrt+2
	.xword	26949867314                     // 0x646565732
	.xword	_seed+2
	.xword	28038272642                     // 0x687361682
	.xword	_hash+2
	.xword	26959288098                     // 0x646e61722
	.xword	_rand+2
	.xword	27226674914                     // 0x656d616e2
	.xword	_name+2
	.xword	117913314                       // 0x70736e2
	.xword	_nsp+2
	.xword	66520882                        // 0x3f70732
	.xword	_spQ+2
	.xword	17033467650                     // 0x3f7461702
	.xword	_patQ+2
	.xword	17027257954                     // 0x3f6e75662
	.xword	_funQ+2
	.xword	26965595762                     // 0x647465672
	.xword	_getd+2
	.xword	113690130                       // 0x6c6c612
	.xword	_all+2
	.xword	519821567523788594              // 0x736c6f626d79732
	.xword	_symbols+2
	.xword	1943001719301778                // 0x6e7265746e692
	.xword	_intern+2
	.xword	17037719074                     // 0x3f786f622
	.xword	_boxQ+2
	.xword	17031448370                     // 0x3f7274732
	.xword	_strQ+2
	.xword	117839778                       // 0x70617a2
	.xword	_zap+2
	.xword	30181590578                     // 0x706f68632
	.xword	_chop+2
	.xword	28826801922                     // 0x6b6361702
	.xword	_pack+2
	.xword	27235108466                     // 0x65756c672
	.xword	_glue+2
	.xword	31264757570                     // 0x747865742
	.xword	_text+2
	.xword	17017808642                     // 0x3f6572702
	.xword	_preQ+2
	.xword	17014675250                     // 0x3f6275732
	.xword	_subQ+2
	.xword	113645410                       // 0x6c61762
	.xword	_val+2
	.xword	122050354                       // 0x7465732
	.xword	_set+2
	.xword	30455256882                     // 0x717465732
	.xword	_setq+2
	.xword	30166972210                     // 0x706177732
	.xword	_swap+2
	.xword	27758311298                     // 0x676863782
	.xword	_xchg+2
	.xword	452338                          // 0x6e6f2
	.xword	_on+2
	.xword	107374322                       // 0x66666f2
	.xword	_off+2
	.xword	7036850333426                   // 0x66664f6e6f2
	.xword	_onOff+2
	.xword	29916288930                     // 0x6f72657a2
	.xword	_zero+2
	.xword	106358514                       // 0x656e6f2
	.xword	_one+2
	.xword	524325579192161858              // 0x746c75616665642
	.xword	_default+2
	.xword	28038354690                     // 0x687375702
	.xword	_push+2
	.xword	3395292714754                   // 0x31687375702
	.xword	_push1+2
	.xword	1991312315733762                // 0x7131687375702
	.xword	_push1q+2
	.xword	117896962                       // 0x706f702
	.xword	_pop+2
	.xword	176818                          // 0x2b2b2
	.xword	_popq+2
	.xword	122115634                       // 0x7475632
	.xword	_cut+2
	.xword	113661506                       // 0x6c65642
	.xword	_del+2
	.xword	6972180485906                   // 0x65756575712
	.xword	_queue+2
	.xword	29903722082                     // 0x6f6669662
	.xword	_fifo+2
	.xword	126240402                       // 0x7864692
	.xword	_idx+2
	.xword	117921474                       // 0x70756c2
	.xword	_lup+2
	.xword	122115842                       // 0x7475702
	.xword	_put+2
	.xword	122050162                       // 0x7465672
	.xword	_get+2
	.xword	30181631746                     // 0x706f72702
	.xword	_prop+2
	.xword	946                             // 0x3b2
	.xword	_semicol+2
	.xword	238546                          // 0x3a3d2
	.xword	_setCol+2
	.xword	930                             // 0x3a2
	.xword	_col+2
	.xword	238498                          // 0x3a3a2
	.xword	_propCol+2
	.xword	29113145090                     // 0x6c7475702
	.xword	_putl+2
	.xword	29113079410                     // 0x6c7465672
	.xword	_getl+2
	.xword	27229853554                     // 0x657069772
	.xword	_wipe+2
	.xword	26160289490                     // 0x6174656d2
	.xword	_meta+2
	.xword	17036670658                     // 0x3f776f6c2
	.xword	_lowQ+2
	.xword	17029334866                     // 0x3f7070752
	.xword	_uppQ+2
	.xword	26700347074                     // 0x63776f6c2
	.xword	_lowc+2
	.xword	26693011282                     // 0x637070752
	.xword	_uppc+2
	.xword	26957248098                     // 0x646c6f662
	.xword	_fold+2
	.xword	26945672994                     // 0x646165722
	.xword	_read+2
	.xword	127293106                       // 0x79656b2
	.xword	_key+2
	.xword	28828915458                     // 0x6b6565702
	.xword	_peek+2
	.xword	30703781426                     // 0x726168632
	.xword	_char+2
	.xword	30175311666                     // 0x70696b732
	.xword	_skip+2
	.xword	113702482                       // 0x6c6f652
	.xword	_eol+2
	.xword	107411026                       // 0x666f652
	.xword	_eof+2
	.xword	29376325218                     // 0x6d6f72662
	.xword	_from+2
	.xword	29104707394                     // 0x6c6c69742
	.xword	_till+2
	.xword	27227756226                     // 0x656e696c2
	.xword	_line+2
	.xword	29905794642                     // 0x6f6863652
	.xword	_echo+2
	.xword	29638469378                     // 0x6e6972702
	.xword	_prin+2
	.xword	7451341956866                   // 0x6c6e6972702
	.xword	_prinl+2
	.xword	6967344432946                   // 0x65636170732
	.xword	_space+2
	.xword	8001097770754                   // 0x746e6972702
	.xword	_print+2
	.xword	506434260758374146              // 0x7073746e6972702
	.xword	_printsp+2
	.xword	497303916201322242              // 0x6e6c746e6972702
	.xword	_println+2
	.xword	122127954                       // 0x7478652
	.xword	_ext+2
	.xword	29906880258                     // 0x6f696c702
	.xword	_plio+2
	.xword	411426                          // 0x64722
	.xword	_rd+2
	.xword	468738                          // 0x72702
	.xword	_pr+2
	.xword	468850                          // 0x72772
	.xword	_wr+2
	.xword	127329810                       // 0x796e612
	.xword	_any+2
	.xword	114792242                       // 0x6d79732
	.xword	_sym+2
	.xword	120014642                       // 0x7274732
	.xword	_str+2
	.xword	8344165615122                   // 0x796c7070612
	.xword	_apply+2
	.xword	30991062786                     // 0x737361702
	.xword	_pass+2
	.xword	30987917010                     // 0x7370616d2
	.xword	_maps+2
	.xword	117839570                       // 0x70616d2
	.xword	_map+2
	.xword	26692949714                     // 0x6370616d2
	.xword	_mapc+2
	.xword	524447902824011474              // 0x7473696c70616d2
	.xword	_maplist+2
	.xword	2012201691256530                // 0x72616370616d2
	.xword	_mapcar+2
	.xword	1942795019753170                // 0x6e6f6370616d2
	.xword	_mapcon+2
	.xword	1941832947078866                // 0x6e616370616d2
	.xword	_mapcan+2
	.xword	2012481128404578                // 0x7265746c69662
	.xword	_filter+2
	.xword	524165879706388050              // 0x746361727478652
	.xword	_extract+2
	.xword	28828915506                     // 0x6b6565732
	.xword	_seek+2
	.xword	26959320674                     // 0x646e69662
	.xword	_find+2
	.xword	28826834690                     // 0x6b6369702
	.xword	_pick+2
	.xword	8344161441378                   // 0x796c6c75662
	.xword	_fully+2
	.xword	122086962                       // 0x746e632
	.xword	_cnt+2
	.xword	114775858                       // 0x6d75732
	.xword	_sum+2
	.xword	28311951058                     // 0x6978616d2
	.xword	_maxi+2
	.xword	28301498066                     // 0x696e696d2
	.xword	_mini+2
	.xword	28038305378                     // 0x687369662
	.xword	_fish+2
	.xword	497186                          // 0x79622
	.xword	_by+2
	.xword	472594                          // 0x73612
	.xword	_as+2
	.xword	122066626                       // 0x74696c2
	.xword	_lit+2
	.xword	29093226066                     // 0x6c6176652
	.xword	_eval+2
	.xword	115824418                       // 0x6e75722
	.xword	_run+2
	.xword	107370050                       // 0x6665642
	.xword	_def+2
	.xword	415298                          // 0x65642
	.xword	_de+2
	.xword	448066                          // 0x6d642
	.xword	_dm+2
	.xword	126285346                       // 0x786f622
	.xword	_box+2
	.xword	125196002                       // 0x77656e2
	.xword	_new+2
	.xword	27229919042                     // 0x657079742
	.xword	_type+2
	.xword	102184594                       // 0x6173692
	.xword	_isa+2
	.xword	1766874505696978                // 0x646f6874656d2
	.xword	_method+2
	.xword	26959304498                     // 0x646e65732
	.xword	_send+2
	.xword	127346498                       // 0x7972742
	.xword	_try+2
	.xword	7861250250546                   // 0x72657075732
	.xword	_super+2
	.xword	6696513013330                   // 0x61727478652
	.xword	_extra+2
	.xword	105309714                       // 0x646e612
	.xword	_and+2
	.xword	468722                          // 0x726f2
	.xword	_or+2
	.xword	26959288034                     // 0x646e616e2
	.xword	_nand+2
	.xword	119994082                       // 0x726f6e2
	.xword	_nor+2
	.xword	119994242                       // 0x726f782
	.xword	_xor+2
	.xword	29107877410                     // 0x6c6f6f622
	.xword	_bool+2
	.xword	122091234                       // 0x746f6e2
	.xword	_not+2
	.xword	113678050                       // 0x6c696e2
	.xword	_nil+2
	.xword	1858                            // 0x742
	.xword	_t+2
	.xword	27765712642                     // 0x676f72702
	.xword	_prog+2
	.xword	3395020072706                   // 0x31676f72702
	.xword	_prog1+2
	.xword	3463739549442                   // 0x32676f72702
	.xword	_prog2+2
	.xword	419474                          // 0x66692
	.xword	_if+2
	.xword	115762834                       // 0x6e66692
	.xword	_ifn+2
	.xword	52848274                        // 0x3266692
	.xword	_if2+2
	.xword	29634234226                     // 0x6e6568772
	.xword	_when+2
	.xword	2031031360612178                // 0x7373656c6e752
	.xword	_unless+2
	.xword	26959345202                     // 0x646e6f632
	.xword	_cond+2
	.xword	26959345378                     // 0x646e6f6e2
	.xword	_nond+2
	.xword	27232966194                     // 0x657361632
	.xword	_case+2
	.xword	30454191666                     // 0x717361632
	.xword	_casq+2
	.xword	6971907852082                   // 0x65746174732
	.xword	_state+2
	.xword	6969768707954                   // 0x656c6968772
	.xword	_while+2
	.xword	7450011297618                   // 0x6c69746e752
	.xword	_until+2
	.xword	476690                          // 0x74612
	.xword	_at+2
	.xword	456258                          // 0x6f642
	.xword	_do+2
	.xword	30181619394                     // 0x706f6f6c2
	.xword	_loop+2
	.xword	119993954                       // 0x726f662
	.xword	_for+2
	.xword	28039354226                     // 0x687469772
	.xword	_with+2
	.xword	26959320610                     // 0x646e69622
	.xword	_bind+2
	.xword	103216802                       // 0x626f6a2
	.xword	_job+2
	.xword	122050242                       // 0x74656c2
	.xword	_let+2
	.xword	17033483970                     // 0x3f74656c2
	.xword	_letQ+2
	.xword	106379090                       // 0x6573752
	.xword	_use+2
	.xword	107435554                       // 0x6675622
	.xword	_buf+2
	.xword	7173522724402                   // 0x68637461632
	.xword	_catch+2
	.xword	8207534032706                   // 0x776f7268742
	.xword	_throw+2
	.xword	546842958862128738              // 0x796c6c616e69662
	.xword	_finally+2
	.xword	456242                          // 0x6f632
	.xword	_co+2
	.xword	6901045041042                   // 0x646c6569792
	.xword	_yield+2
	.xword	119936562                       // 0x7261632
	.xword	_car+2
	.xword	119948850                       // 0x7264632
	.xword	_cdr+2
	.xword	30703752754                     // 0x726161632
	.xword	_caar+2
	.xword	30706898482                     // 0x726461632
	.xword	_cadr+2
	.xword	30703765042                     // 0x726164632
	.xword	_cdar+2
	.xword	30706910770                     // 0x726464632
	.xword	_cddr+2
	.xword	7860160697906                   // 0x72616161632
	.xword	_caaar+2
	.xword	7860966004274                   // 0x72646161632
	.xword	_caadr+2
	.xword	7860163843634                   // 0x72616461632
	.xword	_cadar+2
	.xword	7860969150002                   // 0x72646461632
	.xword	_caddr+2
	.xword	7860160710194                   // 0x72616164632
	.xword	_cdaar+2
	.xword	7860966016562                   // 0x72646164632
	.xword	_cdadr+2
	.xword	7860163855922                   // 0x72616464632
	.xword	_cddar+2
	.xword	7860969162290                   // 0x72646464632
	.xword	_cdddr+2
	.xword	2012201138656818                // 0x7261616161632
	.xword	_caaaar+2
	.xword	2012407297087026                // 0x7264616161632
	.xword	_caaadr+2
	.xword	2012201943963186                // 0x7261646161632
	.xword	_caadar+2
	.xword	2012408102393394                // 0x7264646161632
	.xword	_caaddr+2
	.xword	2012201141802546                // 0x7261616461632
	.xword	_cadaar+2
	.xword	2012407300232754                // 0x7264616461632
	.xword	_cadadr+2
	.xword	2012201947108914                // 0x7261646461632
	.xword	_caddar+2
	.xword	2012408105539122                // 0x7264646461632
	.xword	_cadddr+2
	.xword	2012201138669106                // 0x7261616164632
	.xword	_cdaaar+2
	.xword	2012407297099314                // 0x7264616164632
	.xword	_cdaadr+2
	.xword	2012201943975474                // 0x7261646164632
	.xword	_cdadar+2
	.xword	2012408102405682                // 0x7264646164632
	.xword	_cdaddr+2
	.xword	2012201141814834                // 0x7261616464632
	.xword	_cddaar+2
	.xword	2012407300245042                // 0x7264616464632
	.xword	_cddadr+2
	.xword	2012201947121202                // 0x7261646464632
	.xword	_cdddar+2
	.xword	2012408105551410                // 0x7264646464632
	.xword	_cddddr+2
	.xword	109528802                       // 0x68746e2
	.xword	_nth+2
	.xword	115799602                       // 0x6e6f632
	.xword	_con+2
	.xword	30985877042                     // 0x736e6f632
	.xword	_cons+2
	.xword	26690909746                     // 0x636e6f632
	.xword	_conc+2
	.xword	26695079474                     // 0x637269632
	.xword	_circ+2
	.xword	122091298                       // 0x746f722
	.xword	_rot+2
	.xword	31259530946                     // 0x7473696c2
	.xword	_list+2
	.xword	26949867234                     // 0x6465656e2
	.xword	_need+2
	.xword	6968431744802                   // 0x65676e61722
	.xword	_range+2
	.xword	29104756322                     // 0x6c6c75662
	.xword	_full+2
	.xword	27224577746                     // 0x656b616d2
	.xword	_make+2
	.xword	27217237714                     // 0x6564616d2
	.xword	_made+2
	.xword	7587430303282                   // 0x6e696168632
	.xword	_chain+2
	.xword	28838368962                     // 0x6b6e696c2
	.xword	_link+2
	.xword	27224635282                     // 0x656b6f792
	.xword	_yoke+2
	.xword	32598586930                     // 0x79706f632
	.xword	_copy+2
	.xword	126260946                       // 0x78696d2
	.xword	_mix+2
	.xword	1766804976764434                // 0x646e657070612
	.xword	_append+2
	.xword	1784809475429954                // 0x6574656c65642
	.xword	_delete+2
	.xword	30446868034                     // 0x716c65642
	.xword	_delq+2
	.xword	456611883680945954              // 0x6563616c7065722
	.xword	_replace+2
	.xword	2048554834519698                // 0x747265736e692
	.xword	_insert+2
	.xword	1784949599786786                // 0x65766f6d65722
	.xword	_remove+2
	.xword	6967344416514                   // 0x6563616c702
	.xword	_place+2
	.xword	7724887131954                   // 0x70697274732
	.xword	_strip+2
	.xword	7999758731058                   // 0x74696c70732
	.xword	_split+2
	.xword	456894525016004386              // 0x657372657665722
	.xword	_reverse+2
	.xword	30175315554                     // 0x70696c662
	.xword	_flip+2
	.xword	29370033986                     // 0x6d6972742
	.xword	_trim+2
	.xword	30175315506                     // 0x70696c632
	.xword	_clip+2
	.xword	26945672834                     // 0x646165682
	.xword	_head+2
	.xword	29101528898                     // 0x6c6961742
	.xword	_tail+2
	.xword	29365847858                     // 0x6d6574732
	.xword	_stem+2
	.xword	115775074                       // 0x6e69662
	.xword	_fin+2
	.xword	31259498178                     // 0x7473616c2
	.xword	_last+2
	.xword	250834                          // 0x3d3d2
	.xword	_eq+2
	.xword	64214754                        // 0x3d3d6e2
	.xword	_neq+2
	.xword	978                             // 0x3d2
	.xword	_equal+2
	.xword	254914                          // 0x3e3c2
	.xword	_nequal+2
	.xword	197586                          // 0x303d2
	.xword	_eq0+2
	.xword	201682                          // 0x313d2
	.xword	_eq1+2
	.xword	345042                          // 0x543d2
	.xword	_eqT+2
	.xword	198370                          // 0x306e2
	.xword	_neq0+2
	.xword	345826                          // 0x546e2
	.xword	_neqT+2
	.xword	962                             // 0x3c2
	.xword	_lt+2
	.xword	250818                          // 0x3d3c2
	.xword	_le+2
	.xword	994                             // 0x3e2
	.xword	_gt+2
	.xword	250850                          // 0x3d3e2
	.xword	_ge+2
	.xword	126228178                       // 0x78616d2
	.xword	_max+2
	.xword	115775186                       // 0x6e696d2
	.xword	_min+2
	.xword	29376333330                     // 0x6d6f74612
	.xword	_atom+2
	.xword	30712141570                     // 0x726961702
	.xword	_pair+2
	.xword	4356022113842                   // 0x3f637269632
	.xword	_circQ+2
	.xword	17033541314                     // 0x3f74736c2
	.xword	_lstQ+2
	.xword	17026209506                     // 0x3f6d756e2
	.xword	_numQ+2
	.xword	17026225970                     // 0x3f6d79732
	.xword	_symQ+2
	.xword	17019881058                     // 0x3f676c662
	.xword	_flgQ+2
	.xword	2012476297598674                // 0x7265626d656d2
	.xword	_member+2
	.xword	30447916754                     // 0x716d656d2
	.xword	_memq+2
	.xword	30439560914                     // 0x71656d6d2
	.xword	_mmeq+2
	.xword	31242737458                     // 0x746365732
	.xword	_sect+2
	.xword	27487802946                     // 0x666669642
	.xword	_diff+2
	.xword	8273554499218                   // 0x7865646e692
	.xword	_index+2
	.xword	2047665225754354                // 0x74657366666f2
	.xword	_offset+2
	.xword	7863927252738                   // 0x726f6972702
	.xword	_prior+2
	.xword	1837586572531394                // 0x6874676e656c2
	.xword	_length+2
	.xword	27240339250                     // 0x657a69732
	.xword	_size+2
	.xword	7929973937698                   // 0x73657479622
	.xword	_bytes+2
	.xword	6833145591314                   // 0x636f7373612
	.xword	_assoc+2
	.xword	1749285271377698                // 0x636f737361722
	.xword	_rassoc+2
	.xword	30450071058                     // 0x716f73612
	.xword	_asoq+2
	.xword	28838336290                     // 0x6b6e61722
	.xword	_rank+2
	.xword	7173522724562                   // 0x686374616d2
	.xword	_match+2
	.xword	29104707170                     // 0x6c6c69662
	.xword	_fill+2
	.xword	6972459394818                   // 0x65766f72702
	.xword	_prove+2
	.xword	254674                          // 0x3e2d2
	.xword	_arrow+2
	.xword	8342547654482                   // 0x7966696e752
	.xword	_unify+2
	.xword	7728105203314                   // 0x70756f72672
	.xword	_group+2
	.xword	31258507058                     // 0x74726f732
	.xword	_sort+2
	.xword	524166155115898626              // 0x746365746f72702
	.xword	_protect+2
	.xword	30166898306                     // 0x706165682
	.xword	_heap+2
	.xword	7379661309746                   // 0x6b636174732
	.xword	_stack+2
	.xword	27234113058                     // 0x657479622
	.xword	_byte+2
	.xword	3449784059650                   // 0x32337274702
	.xword	_ptr32+2
	.xword	3588028319490                   // 0x34367274702
	.xword	_ptr64+2
	.xword	124184146                       // 0x766e652
	.xword	_env+2
	.xword	26681489234                     // 0x636573752
	.xword	_usec+2
	.xword	31249094418                     // 0x746975712
	.xword	_quit+2
	.xword	30978549266                     // 0x736772612
	.xword	_args+2
	.xword	31264757474                     // 0x7478656e2
	.xword	_next+2
	.xword	108471826                       // 0x6772612
	.xword	_arg+2
	.xword	31259514658                     // 0x747365722
	.xword	_rest+2
	.xword	119948818                       // 0x7264612
	.xword	_adr+2
	.xword	7449991391042                   // 0x6c696172742
	.xword	_trail+2
	.xword	460626                          // 0x70752
	.xword	_up+2
	.xword	29647853234                     // 0x6e72656b2
	.xword	_kern+2
	.xword	103233170                       // 0x6273692
	.xword	_isb+2
	.xword	110520178                       // 0x6966772
	.xword	_wfi+2
	.xword	106325874                       // 0x6566772
	.xword	_wfe+2
	.xword	27490915906                     // 0x666961642
	.xword	_daif+2
	.xword	3463464752706                   // 0x32666961642
	.xword	_daif2+2
	.xword	510919288690239026              // 0x7172662d746e632
	.xword	"_cnt-frq"+2
	.xword	SymTab+5876
	.xword	"_cntv-ctl"+2
	.xword	7814980300306673251             // 0x6c74632d76746e63
	.xword	2                               // 0x2
	.xword	SymTab+5908
	.xword	"_cntv-cval"+2
	.xword	7022909715842887267             // 0x6176632d76746e63
	.xword	1730                            // 0x6c2
	.xword	SymTab+5940
	.xword	"_cntv-tval"+2
	.xword	7022928407540559459             // 0x6176742d76746e63
	.xword	1730                            // 0x6c2
	.xword	2047528606819890                // 0x746376746e632
	.xword	_cntvct+2
	.xword	SymTab+5988
	.xword	"_cntp-ctl"+2
	.xword	7814980300206009955             // 0x6c74632d70746e63
	.xword	2                               // 0x2
	.xword	SymTab+6020
	.xword	"_cntp-cval"+2
	.xword	7022909715742223971             // 0x6176632d70746e63
	.xword	1730                            // 0x6c2
	.xword	SymTab+6052
	.xword	"_cntp-tval"+2
	.xword	7022928407439896163             // 0x6176742d70746e63
	.xword	1730                            // 0x6c2
	.xword	2047526996207154                // 0x746370746e632
	.xword	_cntpct+2
	.xword	497355938196772706              // 0x6e6f69737265762
	.xword	_version+2
	.size	SymTab, 6096

	.type	$Version,@object                // @"$Version"
	.globl	$Version
	.p2align	3
$Version:
	.xword	338                             // 0x152
	.xword	18                              // 0x12
	.xword	402                             // 0x192
	.size	$Version, 24

	.type	env,@object                     // @env
	.globl	env
	.p2align	3
env:
	.xword	0                               // 0x0
	.xword	0                               // 0x0
	.xword	0                               // 0x0
	.xword	0                               // 0x0
	.xword	0                               // 0x0
	.xword	0                               // 0x0
	.xword	0                               // 0x0
	.xword	0                               // 0x0
	.xword	0                               // 0x0
	.xword	0                               // 0x0
	.xword	0                               // 0x0
	.xword	SymTab+96
	.xword	SymTab+8
	.xword	0                               // 0x0
	.xword	0                               // 0x0
	.xword	0                               // 0x0
	.xword	0                               // 0x0
	.xword	0                               // 0x0
	.xword	0                               // 0x0
	.size	env, 152

	.type	gcData,@object                  // @gcData
	.globl	gcData
	.p2align	3
gcData:
	.xword	SymTab+8
	.xword	SymTab+8
	.xword	SymTab+8
	.xword	SymTab+8
	.xword	SymTab+8
	.xword	SymTab+8
	.xword	SymTab+8
	.xword	SymTab+8
	.xword	SymTab+8
	.xword	SymTab+8
	.xword	SymTab+8
	.xword	SymTab+8
	.xword	SymTab+8
	.xword	SymTab+8
	.xword	SymTab+8
	.xword	SymTab+8
	.xword	SymTab+8
	.xword	SymTab+8
	.xword	SymTab+8
	.xword	SymTab+8
	.xword	SymTab+8
	.xword	SymTab+8
	.xword	SymTab+8
	.xword	SymTab+8
	.xword	SymTab+8
	.xword	SymTab+8
	.xword	SymTab+8
	.xword	SymTab+8
	.xword	SymTab+8
	.xword	SymTab+8
	.xword	SymTab+8
	.xword	SymTab+8
	.xword	SymTab+8
	.xword	SymTab+8
	.xword	SymTab+8
	.xword	SymTab+8
	.xword	SymTab+8
	.xword	SymTab+8
	.xword	SymTab+8
	.xword	SymTab+8
	.xword	SymTab+8
	.xword	SymTab+8
	.xword	SymTab+8
	.xword	SymTab+8
	.xword	SymTab+8
	.xword	SymTab+8
	.xword	SymTab+8
	.xword	SymTab+8
	.xword	SymTab+8
	.xword	SymTab+8
	.xword	SymTab+8
	.xword	SymTab+8
	.size	gcData, 416

	.type	.L$28,@object                   // @"$28"
	.section	.rodata,"a",@progbits
	.p2align	2
.L$28:
	.asciz	"gc:free="
	.size	.L$28, 9

	.type	.L$8,@object                    // @"$8"
	.p2align	2
.L$8:
	.asciz	"Stack overflow"
	.size	.L$8, 15

	.type	.L$7,@object                    // @"$7"
	.p2align	4
.L$7:
	.asciz	"pil21 err loop wfe"
	.size	.L$7, 19

	.type	.L$40,@object                   // @"$40"
	.p2align	2
.L$40:
	.asciz	"tosInFile\n"
	.size	.L$40, 11

	.type	.L$39,@object                   // @"$39"
	.p2align	2
.L$39:
	.asciz	"popInFiles\n"
	.size	.L$39, 12

	.type	.L$42,@object                   // @"$42"
	.p2align	2
.L$42:
	.asciz	"tosOutFile\n"
	.size	.L$42, 12

	.type	.L$41,@object                   // @"$41"
	.p2align	2
.L$41:
	.asciz	"popOutFiles\n"
	.size	.L$41, 13

	.type	.L$43,@object                   // @"$43"
	.p2align	2
.L$43:
	.asciz	"popErrFiles\n"
	.size	.L$43, 13

	.type	.L$44,@object                   // @"$44"
	.p2align	2
.L$44:
	.asciz	"popCtlFiles\n"
	.size	.L$44, 13

	.type	.L$14,@object                   // @"$14"
	.p2align	2
.L$14:
	.asciz	"Name expected"
	.size	.L$14, 14

	.type	.L$30,@object                   // @"$30"
	.p2align	2
.L$30:
	.asciz	"Undefined"
	.size	.L$30, 10

	.type	.L$20,@object                   // @"$20"
	.p2align	2
.L$20:
	.asciz	"Protected"
	.size	.L$20, 10

	.type	.L$18,@object                   // @"$18"
	.p2align	4
.L$18:
	.asciz	"Variable expected"
	.size	.L$18, 18

	.type	.L$46,@object                   // @"$46"
	.p2align	4
.L$46:
	.asciz	"Super parentheses mismatch"
	.size	.L$46, 27

	.type	$Cell,@object                   // @"$Cell"
	.data
	.globl	$Cell
	.p2align	3
$Cell:
	.xword	SymTab+8
	.xword	SymTab+8
	.size	$Cell, 16

	.type	$Delim,@object                  // @"$Delim"
	.section	.rodata,"a",@progbits
	.globl	$Delim
	.p2align	2
$Delim:
	.asciz	" \t\n\r\"'(),[]`{}~"
	.size	$Delim, 16

	.type	.L$23,@object                   // @"$23"
	.p2align	4
.L$23:
	.asciz	"Bad symbol namespace"
	.size	.L$23, 21

	.type	.L$36,@object                   // @"$36"
	.p2align	2
.L$36:
	.asciz	"Bad input '%s'"
	.size	.L$36, 15

	.type	.L$45,@object                   // @"$45"
	.p2align	2
.L$45:
	.asciz	"Bad dotted pair"
	.size	.L$45, 16

	.type	.L$35,@object                   // @"$35"
	.p2align	2
.L$35:
	.asciz	"EOF Overrun"
	.size	.L$35, 12

	.type	.L$10,@object                   // @"$10"
	.p2align	4
.L$10:
	.asciz	"Small number expected"
	.size	.L$10, 22

	.type	.L$86,@object                   // @"$86"
	.p2align	2
.L$86:
	.asciz	"%s"
	.size	.L$86, 3

	.type	.L$11,@object                   // @"$11"
	.p2align	2
.L$11:
	.asciz	"Number expected"
	.size	.L$11, 16

	.type	$Pnl,@object                    // @"$Pnl"
	.bss
	.globl	$Pnl
	.p2align	3
$Pnl:
	.xword	0                               // 0x0
	.size	$Pnl, 8

	.type	$Penv,@object                   // @"$Penv"
	.globl	$Penv
	.p2align	3
$Penv:
	.xword	0                               // 0x0
	.size	$Penv, 8

	.type	.L$47,@object                   // @"$47"
	.section	.rodata,"a",@progbits
	.p2align	2
.L$47:
	.asciz	"priv~"
	.size	.L$47, 6

	.type	.L$48,@object                   // @"$48"
	.p2align	2
.L$48:
	.asciz	" . "
	.size	.L$48, 4

	.type	.L$71,@object                   // @"$71"
	.p2align	2
.L$71:
	.asciz	"Bad ID"
	.size	.L$71, 7

	.type	.L$57,@object                   // @"$57"
	.p2align	2
.L$57:
	.asciz	"unLockDb\n"
	.size	.L$57, 10

	.type	.L$61,@object                   // @"$61"
	.p2align	2
.L$61:
	.asciz	"blkPeek\n"
	.size	.L$61, 9

	.type	.L$55,@object                   // @"$55"
	.p2align	2
.L$55:
	.asciz	"rdLockDb\n"
	.size	.L$55, 10

	.type	.L$50,@object                   // @"$50"
	.p2align	2
.L$50:
	.asciz	"Bad DB file"
	.size	.L$50, 12

	.type	.L$85,@object                   // @"$85"
	.p2align	2
.L$85:
	.asciz	"Not making"
	.size	.L$85, 11

	.type	.L$9,@object                    // @"$9"
	.p2align	2
.L$9:
	.asciz	"Bad argument"
	.size	.L$9, 13

	.type	.L$16,@object                   // @"$16"
	.p2align	4
.L$16:
	.asciz	"Cons pair expected"
	.size	.L$16, 19

	.type	.L$17,@object                   // @"$17"
	.p2align	2
.L$17:
	.asciz	"List expected"
	.size	.L$17, 14

	.type	.L$78,@object                   // @"$78"
	.p2align	2
.L$78:
	.asciz	"No coroutines"
	.size	.L$78, 14

	.type	.L$79,@object                   // @"$79"
	.p2align	4
.L$79:
	.asciz	"Coroutine not found"
	.size	.L$79, 20

	.type	.L$80,@object                   // @"$80"
	.p2align	2
.L$80:
	.asciz	"Tag expected"
	.size	.L$80, 13

	.type	.L$76,@object                   // @"$76"
	.p2align	4
.L$76:
	.asciz	"Reentrant coroutine"
	.size	.L$76, 20

	.type	.L$77,@object                   // @"$77"
	.p2align	4
.L$77:
	.asciz	"Can't stop main routine"
	.size	.L$77, 24

	.type	.L$75,@object                   // @"$75"
	.p2align	2
.L$75:
	.asciz	"Tag not found"
	.size	.L$75, 14

	.type	.L$74,@object                   // @"$74"
	.p2align	2
.L$74:
	.asciz	"Bad extra"
	.size	.L$74, 10

	.type	.L$73,@object                   // @"$73"
	.p2align	2
.L$73:
	.asciz	"Bad super"
	.size	.L$73, 10

	.type	.L$72,@object                   // @"$72"
	.p2align	2
.L$72:
	.asciz	"Bad message"
	.size	.L$72, 12

	.type	.L$12,@object                   // @"$12"
	.p2align	2
.L$12:
	.asciz	"Symbol expected"
	.size	.L$12, 16

	.type	.L$60,@object                   // @"$60"
	.p2align	2
.L$60:
	.asciz	"unLockJnl\n"
	.size	.L$60, 11

	.type	.L$65,@object                   // @"$65"
	.p2align	2
.L$65:
	.asciz	"DB Oversize"
	.size	.L$65, 12

	.type	.L$62,@object                   // @"$62"
	.p2align	2
.L$62:
	.asciz	"blkPoke\n"
	.size	.L$62, 9

	.type	.L$59,@object                   // @"$59"
	.p2align	2
.L$59:
	.asciz	"lockJnl\n"
	.size	.L$59, 9

	.type	.L$56,@object                   // @"$56"
	.p2align	2
.L$56:
	.asciz	"wrLockDb\n"
	.size	.L$56, 10

	.type	.L$34,@object                   // @"$34"
	.p2align	2
.L$34:
	.asciz	"Size overflow"
	.size	.L$34, 14

	.type	.L$15,@object                   // @"$15"
	.p2align	2
.L$15:
	.asciz	"Atom expected"
	.size	.L$15, 14

	.type	.L$19,@object                   // @"$19"
	.p2align	2
.L$19:
	.asciz	"Item not found"
	.size	.L$19, 15

	.type	.L$29,@object                   // @"$29"
	.p2align	2
.L$29:
	.asciz	"Div/0"
	.size	.L$29, 6

	.type	$TBuf,@object                   // @"$TBuf"
	.data
	.globl	$TBuf
	.p2align	2
$TBuf:
	.ascii	"\005T"
	.size	$TBuf, 2

	.type	$Repl,@object                   // @"$Repl"
	.bss
	.globl	$Repl
$Repl:
	.byte	0                               // 0x0
	.size	$Repl, 1

	.type	$PRepl,@object                  // @"$PRepl"
	.globl	$PRepl
$PRepl:
	.byte	0                               // 0x0
	.size	$PRepl, 1

	.type	$Jam,@object                    // @"$Jam"
	.globl	$Jam
$Jam:
	.byte	0                               // 0x0
	.size	$Jam, 1

	.type	$InBye,@object                  // @"$InBye"
	.globl	$InBye
$InBye:
	.byte	0                               // 0x0
	.size	$InBye, 1

	.type	$Empty,@object                  // @"$Empty"
	.section	.rodata,"a",@progbits
	.globl	$Empty
	.p2align	2
$Empty:
	.zero	1
	.size	$Empty, 1

	.type	$Kerns,@object                  // @"$Kerns"
	.globl	$Kerns
	.p2align	4
$Kerns:
	.asciz	"\n(prinl \"No Kernel\")\nT\n"
	.size	$Kerns, 24

	.type	Sig,@object                     // @Sig
	.bss
	.globl	Sig
	.p2align	2
Sig:
	.word	0                               // 0x0
	.size	Sig, 4

	.type	SigDfl,@object                  // @SigDfl
	.globl	SigDfl
	.p2align	3
SigDfl:
	.xword	0
	.size	SigDfl, 8

	.type	SigIgn,@object                  // @SigIgn
	.globl	SigIgn
	.p2align	3
SigIgn:
	.xword	0
	.size	SigIgn, 8

	.type	.L$1,@object                    // @"$1"
	.section	.rodata,"a",@progbits
	.p2align	2
.L$1:
	.asciz	"finish\n"
	.size	.L$1, 8

	.type	.L$2,@object                    // @"$2"
	.p2align	2
.L$2:
	.asciz	"bye\n"
	.size	.L$2, 5

	.type	.L$3,@object                    // @"$3"
	.p2align	2
.L$3:
	.asciz	"%s: Can't exec\n"
	.size	.L$3, 16

	.type	.L$4,@object                    // @"$4"
	.p2align	2
.L$4:
	.asciz	"exit\n"
	.size	.L$4, 6

	.type	.L$5,@object                    // @"$5"
	.p2align	2
.L$5:
	.asciz	"sigTerm\n"
	.size	.L$5, 9

	.type	.L$6,@object                    // @"$6"
	.p2align	2
.L$6:
	.asciz	"sig: "
	.size	.L$6, 6

	.type	.L$13,@object                   // @"$13"
	.p2align	4
.L$13:
	.asciz	"External symbol expected"
	.size	.L$13, 25

	.type	.L$21,@object                   // @"$21"
	.p2align	4
.L$21:
	.asciz	"File lock: <ERRNO>"
	.size	.L$21, 19

	.type	.L$22,@object                   // @"$22"
	.p2align	2
.L$22:
	.asciz	"Can't fork"
	.size	.L$22, 11

	.type	.L$24,@object                   // @"$24"
	.p2align	2
.L$24:
	.asciz	"tty\n"
	.size	.L$24, 5

	.type	.L$25,@object                   // @"$25"
	.p2align	2
.L$25:
	.asciz	"raw\n"
	.size	.L$25, 5

	.type	.L$26,@object                   // @"$26"
	.p2align	2
.L$26:
	.asciz	"sigio\n"
	.size	.L$26, 7

	.type	.L$27,@object                   // @"$27"
	.p2align	2
.L$27:
	.asciz	"kids\n"
	.size	.L$27, 6

	.type	.L$31,@object                   // @"$31"
	.p2align	4
.L$31:
	.asciz	"Open error: <ERRNO>"
	.size	.L$31, 20

	.type	.L$32,@object                   // @"$32"
	.p2align	4
.L$32:
	.asciz	"Close error: <ERRNO>"
	.size	.L$32, 21

	.type	.L$33,@object                   // @"$33"
	.p2align	4
.L$33:
	.asciz	"Pipe error: <ERRNO>"
	.size	.L$33, 20

	.type	.L$37,@object                   // @"$37"
	.p2align	2
.L$37:
	.asciz	"Bad FD"
	.size	.L$37, 7

	.type	.L$38,@object                   // @"$38"
	.p2align	4
.L$38:
	.asciz	"Select error: <ERRNO>"
	.size	.L$38, 22

	.type	.L$49,@object                   // @"$49"
	.p2align	2
.L$49:
	.asciz	"-> "
	.size	.L$49, 4

	.type	.L$51,@object                   // @"$51"
	.p2align	4
.L$51:
	.asciz	"DB read: <ERRNO>"
	.size	.L$51, 17

	.type	.L$52,@object                   // @"$52"
	.p2align	4
.L$52:
	.asciz	"DB write: <ERRNO>"
	.size	.L$52, 18

	.type	.L$53,@object                   // @"$53"
	.p2align	2
.L$53:
	.asciz	"Bad Journal"
	.size	.L$53, 12

	.type	.L$54,@object                   // @"$54"
	.p2align	4
.L$54:
	.asciz	"DB fsync error: <ERRNO>"
	.size	.L$54, 24

	.type	.L$58,@object                   // @"$58"
	.p2align	2
.L$58:
	.asciz	"tryLock\n"
	.size	.L$58, 9

	.type	.L$63,@object                   // @"$63"
	.p2align	2
.L$63:
	.asciz	"wrBlock\n"
	.size	.L$63, 9

	.type	.L$64,@object                   // @"$64"
	.p2align	2
.L$64:
	.asciz	"logBlock\n"
	.size	.L$64, 10

	.type	.L$66,@object                   // @"$66"
	.p2align	2
.L$66:
	.asciz	"ignLog\n"
	.size	.L$66, 8

	.type	.L$67,@object                   // @"$67"
	.p2align	2
.L$67:
	.asciz	"transaction\n"
	.size	.L$67, 13

	.type	.L$68,@object                   // @"$68"
	.p2align	2
.L$68:
	.asciz	"fsyncDB\n"
	.size	.L$68, 9

	.type	.L$69,@object                   // @"$69"
	.p2align	2
.L$69:
	.asciz	"restore\n"
	.size	.L$69, 9

	.type	.L$70,@object                   // @"$70"
	.p2align	2
.L$70:
	.asciz	"truncLog\n"
	.size	.L$70, 10

	.type	.L$81,@object                   // @"$81"
	.p2align	2
.L$81:
	.asciz	"! "
	.size	.L$81, 3

	.type	.L$82,@object                   // @"$82"
	.p2align	2
.L$82:
	.asciz	"No Break"
	.size	.L$82, 9

	.type	.L$83,@object                   // @"$83"
	.p2align	2
.L$83:
	.asciz	" :"
	.size	.L$83, 3

	.type	.L$84,@object                   // @"$84"
	.p2align	2
.L$84:
	.asciz	" = "
	.size	.L$84, 4

	.type	.L$87,@object                   // @"$87"
	.p2align	2
.L$87:
	.asciz	"DIST-CTLR"
	.size	.L$87, 10

	.type	.L$88,@object                   // @"$88"
	.p2align	2
.L$88:
	.asciz	"DIST-TYPER"
	.size	.L$88, 11

	.type	.L$89,@object                   // @"$89"
	.p2align	2
.L$89:
	.asciz	"DIST-IIDR"
	.size	.L$89, 10

	.type	.L$90,@object                   // @"$90"
	.p2align	2
.L$90:
	.asciz	"DIST-IGROUPR"
	.size	.L$90, 13

	.type	.L$91,@object                   // @"$91"
	.p2align	2
.L$91:
	.asciz	"DIST-ISENABLER"
	.size	.L$91, 15

	.type	.L$92,@object                   // @"$92"
	.p2align	2
.L$92:
	.asciz	"DIST-ICENABLER"
	.size	.L$92, 15

	.type	.L$93,@object                   // @"$93"
	.p2align	2
.L$93:
	.asciz	"DIST-ISPENDR"
	.size	.L$93, 13

	.type	.L$94,@object                   // @"$94"
	.p2align	2
.L$94:
	.asciz	"DIST-ICPENDR"
	.size	.L$94, 13

	.type	.L$95,@object                   // @"$95"
	.p2align	2
.L$95:
	.asciz	"DIST-ISACTIVER"
	.size	.L$95, 15

	.type	.L$96,@object                   // @"$96"
	.p2align	2
.L$96:
	.asciz	"DIST-ICACTIVER"
	.size	.L$96, 15

	.type	.L$97,@object                   // @"$97"
	.p2align	2
.L$97:
	.asciz	"DIST-IPRIORITYR"
	.size	.L$97, 16

	.type	.L$98,@object                   // @"$98"
	.p2align	2
.L$98:
	.asciz	"DIST-ITARGETS"
	.size	.L$98, 14

	.type	.L$99,@object                   // @"$99"
	.p2align	2
.L$99:
	.asciz	"DIST-ICFGR"
	.size	.L$99, 11

	.type	.L$100,@object                  // @"$100"
	.p2align	2
.L$100:
	.asciz	"DIST-PPISR"
	.size	.L$100, 11

	.type	.L$101,@object                  // @"$101"
	.p2align	2
.L$101:
	.asciz	"DIST-SPISR"
	.size	.L$101, 11

	.type	.L$102,@object                  // @"$102"
	.p2align	2
.L$102:
	.asciz	"DIST-SGIR"
	.size	.L$102, 10

	.type	.L$103,@object                  // @"$103"
	.p2align	2
.L$103:
	.asciz	"DIST-CPENDSGIR"
	.size	.L$103, 15

	.type	.L$104,@object                  // @"$104"
	.p2align	2
.L$104:
	.asciz	"DIST-SPENDSGIR"
	.size	.L$104, 15

	.type	.L$105,@object                  // @"$105"
	.p2align	2
.L$105:
	.asciz	"DIST-PIDR4"
	.size	.L$105, 11

	.type	.L$106,@object                  // @"$106"
	.p2align	2
.L$106:
	.asciz	"DIST-PIDR5"
	.size	.L$106, 11

	.type	.L$107,@object                  // @"$107"
	.p2align	2
.L$107:
	.asciz	"DIST-PIDR6"
	.size	.L$107, 11

	.type	.L$108,@object                  // @"$108"
	.p2align	2
.L$108:
	.asciz	"DIST-PIDR7"
	.size	.L$108, 11

	.type	.L$109,@object                  // @"$109"
	.p2align	2
.L$109:
	.asciz	"DIST-PIDR0"
	.size	.L$109, 11

	.type	.L$110,@object                  // @"$110"
	.p2align	2
.L$110:
	.asciz	"DIST-PIDR1"
	.size	.L$110, 11

	.type	.L$111,@object                  // @"$111"
	.p2align	2
.L$111:
	.asciz	"DIST-PIDR2"
	.size	.L$111, 11

	.type	.L$112,@object                  // @"$112"
	.p2align	2
.L$112:
	.asciz	"DIST-PIDR3"
	.size	.L$112, 11

	.type	.L$113,@object                  // @"$113"
	.p2align	2
.L$113:
	.asciz	"DIST-CIDR0"
	.size	.L$113, 11

	.type	.L$114,@object                  // @"$114"
	.p2align	2
.L$114:
	.asciz	"DIST-CIDR1"
	.size	.L$114, 11

	.type	.L$115,@object                  // @"$115"
	.p2align	2
.L$115:
	.asciz	"DIST-CIDR2"
	.size	.L$115, 11

	.type	.L$116,@object                  // @"$116"
	.p2align	2
.L$116:
	.asciz	"DIST-CIDR3"
	.size	.L$116, 11

	.type	.L$117,@object                  // @"$117"
	.p2align	2
.L$117:
	.asciz	"CPUI-CTLR"
	.size	.L$117, 10

	.type	.L$118,@object                  // @"$118"
	.p2align	2
.L$118:
	.asciz	"CPUI-PMR"
	.size	.L$118, 9

	.type	.L$119,@object                  // @"$119"
	.p2align	2
.L$119:
	.asciz	"CPUI-BPR"
	.size	.L$119, 9

	.type	.L$120,@object                  // @"$120"
	.p2align	2
.L$120:
	.asciz	"CPUI-IAR"
	.size	.L$120, 9

	.type	.L$121,@object                  // @"$121"
	.p2align	2
.L$121:
	.asciz	"CPUI-EOIR"
	.size	.L$121, 10

	.type	.L$122,@object                  // @"$122"
	.p2align	2
.L$122:
	.asciz	"CPUI-RPR"
	.size	.L$122, 9

	.type	.L$123,@object                  // @"$123"
	.p2align	2
.L$123:
	.asciz	"CPUI-HPPIR"
	.size	.L$123, 11

	.type	.L$124,@object                  // @"$124"
	.p2align	2
.L$124:
	.asciz	"CPUI-ABPR"
	.size	.L$124, 10

	.type	.L$125,@object                  // @"$125"
	.p2align	2
.L$125:
	.asciz	"CPUI-AIAR"
	.size	.L$125, 10

	.type	.L$126,@object                  // @"$126"
	.p2align	2
.L$126:
	.asciz	"CPUI-AEOIR"
	.size	.L$126, 11

	.type	.L$127,@object                  // @"$127"
	.p2align	2
.L$127:
	.asciz	"CPUI-AHPPIR"
	.size	.L$127, 12

	.type	.L$128,@object                  // @"$128"
	.p2align	2
.L$128:
	.asciz	"CPUI-APR0"
	.size	.L$128, 10

	.type	.L$129,@object                  // @"$129"
	.p2align	2
.L$129:
	.asciz	"CPUI-NSAPR0"
	.size	.L$129, 12

	.type	.L$130,@object                  // @"$130"
	.p2align	2
.L$130:
	.asciz	"CPUI-IIDR"
	.size	.L$130, 10

	.type	.L$131,@object                  // @"$131"
	.p2align	2
.L$131:
	.asciz	"CPUI-DIR"
	.size	.L$131, 9

	.type	.L$132,@object                  // @"$132"
	.p2align	2
.L$132:
	.asciz	"AUX-IRQ"
	.size	.L$132, 8

	.type	.L$133,@object                  // @"$133"
	.p2align	2
.L$133:
	.asciz	"AUX-ENABLES"
	.size	.L$133, 12

	.type	.L$134,@object                  // @"$134"
	.p2align	2
.L$134:
	.asciz	"AUX-MU-IO-REG"
	.size	.L$134, 14

	.type	.L$135,@object                  // @"$135"
	.p2align	2
.L$135:
	.asciz	"AUX-MU-IER-REG"
	.size	.L$135, 15

	.type	.L$136,@object                  // @"$136"
	.p2align	2
.L$136:
	.asciz	"AUX-MU-IIR-REG"
	.size	.L$136, 15

	.type	.L$137,@object                  // @"$137"
	.p2align	2
.L$137:
	.asciz	"AUX-MU-LCR-REG"
	.size	.L$137, 15

	.type	.L$138,@object                  // @"$138"
	.p2align	2
.L$138:
	.asciz	"AUX-MU-MCR-REG"
	.size	.L$138, 15

	.type	.L$139,@object                  // @"$139"
	.p2align	2
.L$139:
	.asciz	"AUX-MU-LSR-REG"
	.size	.L$139, 15

	.type	.L$140,@object                  // @"$140"
	.p2align	2
.L$140:
	.asciz	"AUX-MU-MSR-REG"
	.size	.L$140, 15

	.type	.L$141,@object                  // @"$141"
	.p2align	2
.L$141:
	.asciz	"AUX-MU-SCRATCH"
	.size	.L$141, 15

	.type	.L$142,@object                  // @"$142"
	.p2align	2
.L$142:
	.asciz	"AUX-MU-CNTL-REG"
	.size	.L$142, 16

	.type	.L$143,@object                  // @"$143"
	.p2align	2
.L$143:
	.asciz	"AUX-MU-STAT-REG"
	.size	.L$143, 16

	.type	.L$144,@object                  // @"$144"
	.p2align	2
.L$144:
	.asciz	"AUX-MU-BAUD-REG"
	.size	.L$144, 16

	.type	.L$145,@object                  // @"$145"
	.p2align	4
.L$145:
	.asciz	"AUX-SPI1-CNTL0-REG"
	.size	.L$145, 19

	.type	.L$146,@object                  // @"$146"
	.p2align	4
.L$146:
	.asciz	"AUX-SPI1-CNTL1-REG"
	.size	.L$146, 19

	.type	.L$147,@object                  // @"$147"
	.p2align	4
.L$147:
	.asciz	"AUX-SPI1-STAT-REG"
	.size	.L$147, 18

	.type	.L$148,@object                  // @"$148"
	.p2align	4
.L$148:
	.asciz	"AUX-SPI1-PEEK-REG"
	.size	.L$148, 18

	.type	.L$149,@object                  // @"$149"
	.p2align	2
.L$149:
	.asciz	"AUX-SPI1-IO-REG"
	.size	.L$149, 16

	.type	.L$150,@object                  // @"$150"
	.p2align	4
.L$150:
	.asciz	"AUX-SPI1-TXHOLD-REG"
	.size	.L$150, 20

	.type	.L$151,@object                  // @"$151"
	.p2align	4
.L$151:
	.asciz	"AUX-SPI2-CNTL0-REG"
	.size	.L$151, 19

	.type	.L$152,@object                  // @"$152"
	.p2align	4
.L$152:
	.asciz	"AUX-SPI2-CNTL1-REG"
	.size	.L$152, 19

	.type	.L$153,@object                  // @"$153"
	.p2align	4
.L$153:
	.asciz	"AUX-SPI2-STAT-REG"
	.size	.L$153, 18

	.type	.L$154,@object                  // @"$154"
	.p2align	4
.L$154:
	.asciz	"AUX-SPI2-PEEK-REG"
	.size	.L$154, 18

	.type	.L$155,@object                  // @"$155"
	.p2align	2
.L$155:
	.asciz	"AUX-SPI2-IO-REG"
	.size	.L$155, 16

	.type	.L$156,@object                  // @"$156"
	.p2align	4
.L$156:
	.asciz	"AUX-SPI2-TXHOLD-REG"
	.size	.L$156, 20

	.type	.L$157,@object                  // @"$157"
	.p2align	2
.L$157:
	.asciz	"UART0-DR"
	.size	.L$157, 9

	.type	.L$158,@object                  // @"$158"
	.p2align	2
.L$158:
	.asciz	"UART0-RSRECR"
	.size	.L$158, 13

	.type	.L$159,@object                  // @"$159"
	.p2align	2
.L$159:
	.asciz	"UART0-FR"
	.size	.L$159, 9

	.type	.L$160,@object                  // @"$160"
	.p2align	2
.L$160:
	.asciz	"UART0-ILPR"
	.size	.L$160, 11

	.type	.L$161,@object                  // @"$161"
	.p2align	2
.L$161:
	.asciz	"UART0-IBRD"
	.size	.L$161, 11

	.type	.L$162,@object                  // @"$162"
	.p2align	2
.L$162:
	.asciz	"UART0-FBRD"
	.size	.L$162, 11

	.type	.L$163,@object                  // @"$163"
	.p2align	2
.L$163:
	.asciz	"UART0-LCRH"
	.size	.L$163, 11

	.type	.L$164,@object                  // @"$164"
	.p2align	2
.L$164:
	.asciz	"UART0-CR"
	.size	.L$164, 9

	.type	.L$165,@object                  // @"$165"
	.p2align	2
.L$165:
	.asciz	"UART0-IFLS"
	.size	.L$165, 11

	.type	.L$166,@object                  // @"$166"
	.p2align	2
.L$166:
	.asciz	"UART0-IMSC"
	.size	.L$166, 11

	.type	.L$167,@object                  // @"$167"
	.p2align	2
.L$167:
	.asciz	"UART0-RIS"
	.size	.L$167, 10

	.type	.L$168,@object                  // @"$168"
	.p2align	2
.L$168:
	.asciz	"UART0-MIS"
	.size	.L$168, 10

	.type	.L$169,@object                  // @"$169"
	.p2align	2
.L$169:
	.asciz	"UART0-ICR"
	.size	.L$169, 10

	.type	.L$170,@object                  // @"$170"
	.p2align	2
.L$170:
	.asciz	"UART0-DMACR"
	.size	.L$170, 12

	.type	.L$171,@object                  // @"$171"
	.p2align	2
.L$171:
	.asciz	"UART0-ITCR"
	.size	.L$171, 11

	.type	.L$172,@object                  // @"$172"
	.p2align	2
.L$172:
	.asciz	"UART0-ITIP"
	.size	.L$172, 11

	.type	.L$173,@object                  // @"$173"
	.p2align	2
.L$173:
	.asciz	"UART0-ITOP"
	.size	.L$173, 11

	.type	.L$174,@object                  // @"$174"
	.p2align	2
.L$174:
	.asciz	"UART0-TDR"
	.size	.L$174, 10

	.type	.L$175,@object                  // @"$175"
	.p2align	2
.L$175:
	.asciz	"UART2-DR"
	.size	.L$175, 9

	.type	.L$176,@object                  // @"$176"
	.p2align	2
.L$176:
	.asciz	"UART2-RSRECR"
	.size	.L$176, 13

	.type	.L$177,@object                  // @"$177"
	.p2align	2
.L$177:
	.asciz	"UART2-FR"
	.size	.L$177, 9

	.type	.L$178,@object                  // @"$178"
	.p2align	2
.L$178:
	.asciz	"UART2-ILPR"
	.size	.L$178, 11

	.type	.L$179,@object                  // @"$179"
	.p2align	2
.L$179:
	.asciz	"UART2-IBRD"
	.size	.L$179, 11

	.type	.L$180,@object                  // @"$180"
	.p2align	2
.L$180:
	.asciz	"UART2-FBRD"
	.size	.L$180, 11

	.type	.L$181,@object                  // @"$181"
	.p2align	2
.L$181:
	.asciz	"UART2-LCRH"
	.size	.L$181, 11

	.type	.L$182,@object                  // @"$182"
	.p2align	2
.L$182:
	.asciz	"UART2-CR"
	.size	.L$182, 9

	.type	.L$183,@object                  // @"$183"
	.p2align	2
.L$183:
	.asciz	"UART2-IFLS"
	.size	.L$183, 11

	.type	.L$184,@object                  // @"$184"
	.p2align	2
.L$184:
	.asciz	"UART2-IMSC"
	.size	.L$184, 11

	.type	.L$185,@object                  // @"$185"
	.p2align	2
.L$185:
	.asciz	"UART2-RIS"
	.size	.L$185, 10

	.type	.L$186,@object                  // @"$186"
	.p2align	2
.L$186:
	.asciz	"UART2-MIS"
	.size	.L$186, 10

	.type	.L$187,@object                  // @"$187"
	.p2align	2
.L$187:
	.asciz	"UART2-ICR"
	.size	.L$187, 10

	.type	.L$188,@object                  // @"$188"
	.p2align	2
.L$188:
	.asciz	"UART2-DMACR"
	.size	.L$188, 12

	.type	.L$189,@object                  // @"$189"
	.p2align	2
.L$189:
	.asciz	"UART2-ITCR"
	.size	.L$189, 11

	.type	.L$190,@object                  // @"$190"
	.p2align	2
.L$190:
	.asciz	"UART2-ITIP"
	.size	.L$190, 11

	.type	.L$191,@object                  // @"$191"
	.p2align	2
.L$191:
	.asciz	"UART2-ITOP"
	.size	.L$191, 11

	.type	.L$192,@object                  // @"$192"
	.p2align	2
.L$192:
	.asciz	"UART2-TDR"
	.size	.L$192, 10

	.type	.L$193,@object                  // @"$193"
	.p2align	2
.L$193:
	.asciz	"UART3-DR"
	.size	.L$193, 9

	.type	.L$194,@object                  // @"$194"
	.p2align	2
.L$194:
	.asciz	"UART3-RSRECR"
	.size	.L$194, 13

	.type	.L$195,@object                  // @"$195"
	.p2align	2
.L$195:
	.asciz	"UART3-FR"
	.size	.L$195, 9

	.type	.L$196,@object                  // @"$196"
	.p2align	2
.L$196:
	.asciz	"UART3-ILPR"
	.size	.L$196, 11

	.type	.L$197,@object                  // @"$197"
	.p2align	2
.L$197:
	.asciz	"UART3-IBRD"
	.size	.L$197, 11

	.type	.L$198,@object                  // @"$198"
	.p2align	2
.L$198:
	.asciz	"UART3-FBRD"
	.size	.L$198, 11

	.type	.L$199,@object                  // @"$199"
	.p2align	2
.L$199:
	.asciz	"UART3-LCRH"
	.size	.L$199, 11

	.type	.L$200,@object                  // @"$200"
	.p2align	2
.L$200:
	.asciz	"UART3-CR"
	.size	.L$200, 9

	.type	.L$201,@object                  // @"$201"
	.p2align	2
.L$201:
	.asciz	"UART3-IFLS"
	.size	.L$201, 11

	.type	.L$202,@object                  // @"$202"
	.p2align	2
.L$202:
	.asciz	"UART3-IMSC"
	.size	.L$202, 11

	.type	.L$203,@object                  // @"$203"
	.p2align	2
.L$203:
	.asciz	"UART3-RIS"
	.size	.L$203, 10

	.type	.L$204,@object                  // @"$204"
	.p2align	2
.L$204:
	.asciz	"UART3-MIS"
	.size	.L$204, 10

	.type	.L$205,@object                  // @"$205"
	.p2align	2
.L$205:
	.asciz	"UART3-ICR"
	.size	.L$205, 10

	.type	.L$206,@object                  // @"$206"
	.p2align	2
.L$206:
	.asciz	"UART3-DMACR"
	.size	.L$206, 12

	.type	.L$207,@object                  // @"$207"
	.p2align	2
.L$207:
	.asciz	"UART3-ITCR"
	.size	.L$207, 11

	.type	.L$208,@object                  // @"$208"
	.p2align	2
.L$208:
	.asciz	"UART3-ITIP"
	.size	.L$208, 11

	.type	.L$209,@object                  // @"$209"
	.p2align	2
.L$209:
	.asciz	"UART3-ITOP"
	.size	.L$209, 11

	.type	.L$210,@object                  // @"$210"
	.p2align	2
.L$210:
	.asciz	"UART3-TDR"
	.size	.L$210, 10

	.type	.L$211,@object                  // @"$211"
	.p2align	2
.L$211:
	.asciz	"UART4-DR"
	.size	.L$211, 9

	.type	.L$212,@object                  // @"$212"
	.p2align	2
.L$212:
	.asciz	"UART4-RSRECR"
	.size	.L$212, 13

	.type	.L$213,@object                  // @"$213"
	.p2align	2
.L$213:
	.asciz	"UART4-FR"
	.size	.L$213, 9

	.type	.L$214,@object                  // @"$214"
	.p2align	2
.L$214:
	.asciz	"UART4-ILPR"
	.size	.L$214, 11

	.type	.L$215,@object                  // @"$215"
	.p2align	2
.L$215:
	.asciz	"UART4-IBRD"
	.size	.L$215, 11

	.type	.L$216,@object                  // @"$216"
	.p2align	2
.L$216:
	.asciz	"UART4-FBRD"
	.size	.L$216, 11

	.type	.L$217,@object                  // @"$217"
	.p2align	2
.L$217:
	.asciz	"UART4-LCRH"
	.size	.L$217, 11

	.type	.L$218,@object                  // @"$218"
	.p2align	2
.L$218:
	.asciz	"UART4-CR"
	.size	.L$218, 9

	.type	.L$219,@object                  // @"$219"
	.p2align	2
.L$219:
	.asciz	"UART4-IFLS"
	.size	.L$219, 11

	.type	.L$220,@object                  // @"$220"
	.p2align	2
.L$220:
	.asciz	"UART4-IMSC"
	.size	.L$220, 11

	.type	.L$221,@object                  // @"$221"
	.p2align	2
.L$221:
	.asciz	"UART4-RIS"
	.size	.L$221, 10

	.type	.L$222,@object                  // @"$222"
	.p2align	2
.L$222:
	.asciz	"UART4-MIS"
	.size	.L$222, 10

	.type	.L$223,@object                  // @"$223"
	.p2align	2
.L$223:
	.asciz	"UART4-ICR"
	.size	.L$223, 10

	.type	.L$224,@object                  // @"$224"
	.p2align	2
.L$224:
	.asciz	"UART4-DMACR"
	.size	.L$224, 12

	.type	.L$225,@object                  // @"$225"
	.p2align	2
.L$225:
	.asciz	"UART4-ITCR"
	.size	.L$225, 11

	.type	.L$226,@object                  // @"$226"
	.p2align	2
.L$226:
	.asciz	"UART4-ITIP"
	.size	.L$226, 11

	.type	.L$227,@object                  // @"$227"
	.p2align	2
.L$227:
	.asciz	"UART4-ITOP"
	.size	.L$227, 11

	.type	.L$228,@object                  // @"$228"
	.p2align	2
.L$228:
	.asciz	"UART4-TDR"
	.size	.L$228, 10

	.type	.L$229,@object                  // @"$229"
	.p2align	2
.L$229:
	.asciz	"UART5-DR"
	.size	.L$229, 9

	.type	.L$230,@object                  // @"$230"
	.p2align	2
.L$230:
	.asciz	"UART5-RSRECR"
	.size	.L$230, 13

	.type	.L$231,@object                  // @"$231"
	.p2align	2
.L$231:
	.asciz	"UART5-FR"
	.size	.L$231, 9

	.type	.L$232,@object                  // @"$232"
	.p2align	2
.L$232:
	.asciz	"UART5-ILPR"
	.size	.L$232, 11

	.type	.L$233,@object                  // @"$233"
	.p2align	2
.L$233:
	.asciz	"UART5-IBRD"
	.size	.L$233, 11

	.type	.L$234,@object                  // @"$234"
	.p2align	2
.L$234:
	.asciz	"UART5-FBRD"
	.size	.L$234, 11

	.type	.L$235,@object                  // @"$235"
	.p2align	2
.L$235:
	.asciz	"UART5-LCRH"
	.size	.L$235, 11

	.type	.L$236,@object                  // @"$236"
	.p2align	2
.L$236:
	.asciz	"UART5-CR"
	.size	.L$236, 9

	.type	.L$237,@object                  // @"$237"
	.p2align	2
.L$237:
	.asciz	"UART5-IFLS"
	.size	.L$237, 11

	.type	.L$238,@object                  // @"$238"
	.p2align	2
.L$238:
	.asciz	"UART5-IMSC"
	.size	.L$238, 11

	.type	.L$239,@object                  // @"$239"
	.p2align	2
.L$239:
	.asciz	"UART5-RIS"
	.size	.L$239, 10

	.type	.L$240,@object                  // @"$240"
	.p2align	2
.L$240:
	.asciz	"UART5-MIS"
	.size	.L$240, 10

	.type	.L$241,@object                  // @"$241"
	.p2align	2
.L$241:
	.asciz	"UART5-ICR"
	.size	.L$241, 10

	.type	.L$242,@object                  // @"$242"
	.p2align	2
.L$242:
	.asciz	"UART5-DMACR"
	.size	.L$242, 12

	.type	.L$243,@object                  // @"$243"
	.p2align	2
.L$243:
	.asciz	"UART5-ITCR"
	.size	.L$243, 11

	.type	.L$244,@object                  // @"$244"
	.p2align	2
.L$244:
	.asciz	"UART5-ITIP"
	.size	.L$244, 11

	.type	.L$245,@object                  // @"$245"
	.p2align	2
.L$245:
	.asciz	"UART5-ITOP"
	.size	.L$245, 11

	.type	.L$246,@object                  // @"$246"
	.p2align	2
.L$246:
	.asciz	"UART5-TDR"
	.size	.L$246, 10

	.type	.L$247,@object                  // @"$247"
	.p2align	4
.L$247:
	.asciz	"IRQ-CORE-N-HP-TIMER"
	.size	.L$247, 20

	.type	.L$248,@object                  // @"$248"
	.p2align	4
.L$248:
	.asciz	"IRQ-CORE-N-V-TIMER"
	.size	.L$248, 19

	.type	.L$249,@object                  // @"$249"
	.p2align	2
.L$249:
	.asciz	"IRQ-LEGACY-FIQn"
	.size	.L$249, 16

	.type	.L$250,@object                  // @"$250"
	.p2align	4
.L$250:
	.asciz	"IRQ-CORE-N-PS-TIMER"
	.size	.L$250, 20

	.type	.L$251,@object                  // @"$251"
	.p2align	4
.L$251:
	.asciz	"IRQ-CORE-N-PNS-TIMER"
	.size	.L$251, 21

	.type	.L$252,@object                  // @"$252"
	.p2align	2
.L$252:
	.asciz	"IRQ-LEGACY-IRQn"
	.size	.L$252, 16

	.type	.L$253,@object                  // @"$253"
	.p2align	2
.L$253:
	.asciz	"IRQ-MAILBOX-0"
	.size	.L$253, 14

	.type	.L$254,@object                  // @"$254"
	.p2align	2
.L$254:
	.asciz	"IRQ-MAILBOX-1"
	.size	.L$254, 14

	.type	.L$255,@object                  // @"$255"
	.p2align	2
.L$255:
	.asciz	"IRQ-MAILBOX-2"
	.size	.L$255, 14

	.type	.L$256,@object                  // @"$256"
	.p2align	2
.L$256:
	.asciz	"IRQ-MAILBOX-3"
	.size	.L$256, 14

	.type	.L$257,@object                  // @"$257"
	.p2align	2
.L$257:
	.asciz	"IRQ-MAILBOX-4"
	.size	.L$257, 14

	.type	.L$258,@object                  // @"$258"
	.p2align	2
.L$258:
	.asciz	"IRQ-MAILBOX-5"
	.size	.L$258, 14

	.type	.L$259,@object                  // @"$259"
	.p2align	2
.L$259:
	.asciz	"IRQ-MAILBOX-6"
	.size	.L$259, 14

	.type	.L$260,@object                  // @"$260"
	.p2align	2
.L$260:
	.asciz	"IRQ-MAILBOX-7"
	.size	.L$260, 14

	.type	.L$261,@object                  // @"$261"
	.p2align	2
.L$261:
	.asciz	"IRQ-MAILBOX-8"
	.size	.L$261, 14

	.type	.L$262,@object                  // @"$262"
	.p2align	2
.L$262:
	.asciz	"IRQ-MAILBOX-9"
	.size	.L$262, 14

	.type	.L$263,@object                  // @"$263"
	.p2align	2
.L$263:
	.asciz	"IRQ-MAILBOX-10"
	.size	.L$263, 15

	.type	.L$264,@object                  // @"$264"
	.p2align	2
.L$264:
	.asciz	"IRQ-MAILBOX-11"
	.size	.L$264, 15

	.type	.L$265,@object                  // @"$265"
	.p2align	2
.L$265:
	.asciz	"IRQ-MAILBOX-12"
	.size	.L$265, 15

	.type	.L$266,@object                  // @"$266"
	.p2align	2
.L$266:
	.asciz	"IRQ-MAILBOX-13"
	.size	.L$266, 15

	.type	.L$267,@object                  // @"$267"
	.p2align	2
.L$267:
	.asciz	"IRQ-MAILBOX-14"
	.size	.L$267, 15

	.type	.L$268,@object                  // @"$268"
	.p2align	2
.L$268:
	.asciz	"IRQ-MAILBOX-15"
	.size	.L$268, 15

	.type	.L$269,@object                  // @"$269"
	.p2align	2
.L$269:
	.asciz	"IRQ-CORE-0-PMU"
	.size	.L$269, 15

	.type	.L$270,@object                  // @"$270"
	.p2align	2
.L$270:
	.asciz	"IRQ-CORE-1-PMU"
	.size	.L$270, 15

	.type	.L$271,@object                  // @"$271"
	.p2align	2
.L$271:
	.asciz	"IRQ-CORE-2-PMU"
	.size	.L$271, 15

	.type	.L$272,@object                  // @"$272"
	.p2align	2
.L$272:
	.asciz	"IRQ-CORE-3-PMU"
	.size	.L$272, 15

	.type	.L$273,@object                  // @"$273"
	.p2align	2
.L$273:
	.asciz	"IRQ-AXIERR"
	.size	.L$273, 11

	.type	.L$274,@object                  // @"$274"
	.p2align	2
.L$274:
	.asciz	"IRQ-LOCAL-TIMER"
	.size	.L$274, 16

	.type	.L$275,@object                  // @"$275"
	.p2align	2
.L$275:
	.asciz	"IRQ-TIMER"
	.size	.L$275, 10

	.type	.L$276,@object                  // @"$276"
	.p2align	2
.L$276:
	.asciz	"IRQ-MAILBOX"
	.size	.L$276, 12

	.type	.L$277,@object                  // @"$277"
	.p2align	2
.L$277:
	.asciz	"IRQ-DOORBELL-0"
	.size	.L$277, 15

	.type	.L$278,@object                  // @"$278"
	.p2align	2
.L$278:
	.asciz	"IRQ-DOORBELL-1"
	.size	.L$278, 15

	.type	.L$279,@object                  // @"$279"
	.p2align	2
.L$279:
	.asciz	"IRQ-VPU0-HALTED"
	.size	.L$279, 16

	.type	.L$280,@object                  // @"$280"
	.p2align	2
.L$280:
	.asciz	"IRQ-VPU1-HALTED"
	.size	.L$280, 16

	.type	.L$281,@object                  // @"$281"
	.p2align	4
.L$281:
	.asciz	"IRQ-ARM-ADDRESS-ERROR"
	.size	.L$281, 22

	.type	.L$282,@object                  // @"$282"
	.p2align	4
.L$282:
	.asciz	"IRQ-ARM-AXI-ERROR"
	.size	.L$282, 18

	.type	.L$283,@object                  // @"$283"
	.p2align	4
.L$283:
	.asciz	"IRQ-SOFTWARE-INTERRUPT-0"
	.size	.L$283, 25

	.type	.L$284,@object                  // @"$284"
	.p2align	4
.L$284:
	.asciz	"IRQ-SOFTWARE-INTERRUPT-1"
	.size	.L$284, 25

	.type	.L$285,@object                  // @"$285"
	.p2align	4
.L$285:
	.asciz	"IRQ-SOFTWARE-INTERRUPT-2"
	.size	.L$285, 25

	.type	.L$286,@object                  // @"$286"
	.p2align	4
.L$286:
	.asciz	"IRQ-SOFTWARE-INTERRUPT-3"
	.size	.L$286, 25

	.type	.L$287,@object                  // @"$287"
	.p2align	4
.L$287:
	.asciz	"IRQ-SOFTWARE-INTERRUPT-4"
	.size	.L$287, 25

	.type	.L$288,@object                  // @"$288"
	.p2align	4
.L$288:
	.asciz	"IRQ-SOFTWARE-INTERRUPT-5"
	.size	.L$288, 25

	.type	.L$289,@object                  // @"$289"
	.p2align	4
.L$289:
	.asciz	"IRQ-SOFTWARE-INTERRUPT-6"
	.size	.L$289, 25

	.type	.L$290,@object                  // @"$290"
	.p2align	4
.L$290:
	.asciz	"IRQ-SOFTWARE-INTERRUPT-7"
	.size	.L$290, 25

	.type	.L$291,@object                  // @"$291"
	.p2align	2
.L$291:
	.asciz	"IRQ-TIMER-0"
	.size	.L$291, 12

	.type	.L$292,@object                  // @"$292"
	.p2align	2
.L$292:
	.asciz	"IRQ-TIMER-1"
	.size	.L$292, 12

	.type	.L$293,@object                  // @"$293"
	.p2align	2
.L$293:
	.asciz	"IRQ-TIMER-2"
	.size	.L$293, 12

	.type	.L$294,@object                  // @"$294"
	.p2align	2
.L$294:
	.asciz	"IRQ-TIMER-3"
	.size	.L$294, 12

	.type	.L$295,@object                  // @"$295"
	.p2align	2
.L$295:
	.asciz	"IRQ-H264-0"
	.size	.L$295, 11

	.type	.L$296,@object                  // @"$296"
	.p2align	2
.L$296:
	.asciz	"IRQ-H264-1"
	.size	.L$296, 11

	.type	.L$297,@object                  // @"$297"
	.p2align	2
.L$297:
	.asciz	"IRQ-H264-2"
	.size	.L$297, 11

	.type	.L$298,@object                  // @"$298"
	.p2align	2
.L$298:
	.asciz	"IRQ-JPEG"
	.size	.L$298, 9

	.type	.L$299,@object                  // @"$299"
	.p2align	2
.L$299:
	.asciz	"IRQ-ISP"
	.size	.L$299, 8

	.type	.L$300,@object                  // @"$300"
	.p2align	2
.L$300:
	.asciz	"IRQ-USB"
	.size	.L$300, 8

	.type	.L$301,@object                  // @"$301"
	.p2align	2
.L$301:
	.asciz	"IRQ-V3D"
	.size	.L$301, 8

	.type	.L$302,@object                  // @"$302"
	.p2align	2
.L$302:
	.asciz	"IRQ-TRANSPOSER"
	.size	.L$302, 15

	.type	.L$303,@object                  // @"$303"
	.p2align	4
.L$303:
	.asciz	"IRQ-MULTICORE-SYNC-0"
	.size	.L$303, 21

	.type	.L$304,@object                  // @"$304"
	.p2align	4
.L$304:
	.asciz	"IRQ-MULTICORE-SYNC-1"
	.size	.L$304, 21

	.type	.L$305,@object                  // @"$305"
	.p2align	4
.L$305:
	.asciz	"IRQ-MULTICORE-SYNC-2"
	.size	.L$305, 21

	.type	.L$306,@object                  // @"$306"
	.p2align	4
.L$306:
	.asciz	"IRQ-MULTICORE-SYNC-3"
	.size	.L$306, 21

	.type	.L$307,@object                  // @"$307"
	.p2align	2
.L$307:
	.asciz	"IRQ-DMA-0"
	.size	.L$307, 10

	.type	.L$308,@object                  // @"$308"
	.p2align	2
.L$308:
	.asciz	"IRQ-DMA-1"
	.size	.L$308, 10

	.type	.L$309,@object                  // @"$309"
	.p2align	2
.L$309:
	.asciz	"IRQ-DMA-2"
	.size	.L$309, 10

	.type	.L$310,@object                  // @"$310"
	.p2align	2
.L$310:
	.asciz	"IRQ-DMA-3"
	.size	.L$310, 10

	.type	.L$311,@object                  // @"$311"
	.p2align	2
.L$311:
	.asciz	"IRQ-DMA-4"
	.size	.L$311, 10

	.type	.L$312,@object                  // @"$312"
	.p2align	2
.L$312:
	.asciz	"IRQ-DMA-5"
	.size	.L$312, 10

	.type	.L$313,@object                  // @"$313"
	.p2align	2
.L$313:
	.asciz	"IRQ-DMA-6"
	.size	.L$313, 10

	.type	.L$314,@object                  // @"$314"
	.p2align	2
.L$314:
	.asciz	"IRQ-DMA-7&8"
	.size	.L$314, 12

	.type	.L$315,@object                  // @"$315"
	.p2align	2
.L$315:
	.asciz	"IRQ-DMA-9&10"
	.size	.L$315, 13

	.type	.L$316,@object                  // @"$316"
	.p2align	2
.L$316:
	.asciz	"IRQ-DMA-11"
	.size	.L$316, 11

	.type	.L$317,@object                  // @"$317"
	.p2align	2
.L$317:
	.asciz	"IRQ-DMA-12"
	.size	.L$317, 11

	.type	.L$318,@object                  // @"$318"
	.p2align	2
.L$318:
	.asciz	"IRQ-DMA-13"
	.size	.L$318, 11

	.type	.L$319,@object                  // @"$319"
	.p2align	2
.L$319:
	.asciz	"IRQ-DMA-14"
	.size	.L$319, 11

	.type	.L$320,@object                  // @"$320"
	.p2align	2
.L$320:
	.asciz	"IRQ-AUX"
	.size	.L$320, 8

	.type	.L$321,@object                  // @"$321"
	.p2align	2
.L$321:
	.asciz	"IRQ-ARM"
	.size	.L$321, 8

	.type	.L$322,@object                  // @"$322"
	.p2align	2
.L$322:
	.asciz	"IRQ-DMA-15"
	.size	.L$322, 11

	.type	.L$323,@object                  // @"$323"
	.p2align	2
.L$323:
	.asciz	"IRQ-HDMI-CEC"
	.size	.L$323, 13

	.type	.L$324,@object                  // @"$324"
	.p2align	2
.L$324:
	.asciz	"IRQ-HVS"
	.size	.L$324, 8

	.type	.L$325,@object                  // @"$325"
	.p2align	2
.L$325:
	.asciz	"IRQ-RPIVID"
	.size	.L$325, 11

	.type	.L$326,@object                  // @"$326"
	.p2align	2
.L$326:
	.asciz	"IRQ-SDC"
	.size	.L$326, 8

	.type	.L$327,@object                  // @"$327"
	.p2align	2
.L$327:
	.asciz	"IRQ-DSI-0"
	.size	.L$327, 10

	.type	.L$328,@object                  // @"$328"
	.p2align	4
.L$328:
	.asciz	"IRQ-PIXEL-VALVE-2"
	.size	.L$328, 18

	.type	.L$329,@object                  // @"$329"
	.p2align	2
.L$329:
	.asciz	"IRQ-CAMERA-0"
	.size	.L$329, 13

	.type	.L$330,@object                  // @"$330"
	.p2align	2
.L$330:
	.asciz	"IRQ-CAMERA-1"
	.size	.L$330, 13

	.type	.L$331,@object                  // @"$331"
	.p2align	2
.L$331:
	.asciz	"IRQ-HDMI-0"
	.size	.L$331, 11

	.type	.L$332,@object                  // @"$332"
	.p2align	2
.L$332:
	.asciz	"IRQ-HDMI-1"
	.size	.L$332, 11

	.type	.L$333,@object                  // @"$333"
	.p2align	4
.L$333:
	.asciz	"IRQ-PIXEL-VALVE-3"
	.size	.L$333, 18

	.type	.L$334,@object                  // @"$334"
	.p2align	4
.L$334:
	.asciz	"IRQ-SPI/BSC-SLAVE"
	.size	.L$334, 18

	.type	.L$335,@object                  // @"$335"
	.p2align	2
.L$335:
	.asciz	"IRQ-DSI-1"
	.size	.L$335, 10

	.type	.L$336,@object                  // @"$336"
	.p2align	4
.L$336:
	.asciz	"IRQ-PIXEL-VALVE-0"
	.size	.L$336, 18

	.type	.L$337,@object                  // @"$337"
	.p2align	4
.L$337:
	.asciz	"IRQ-PIXEL-VALVE-1&4"
	.size	.L$337, 20

	.type	.L$338,@object                  // @"$338"
	.p2align	2
.L$338:
	.asciz	"IRQ-CPR"
	.size	.L$338, 8

	.type	.L$339,@object                  // @"$339"
	.p2align	2
.L$339:
	.asciz	"IRQ-SMI"
	.size	.L$339, 8

	.type	.L$340,@object                  // @"$340"
	.p2align	2
.L$340:
	.asciz	"IRQ-GPIO-0"
	.size	.L$340, 11

	.type	.L$341,@object                  // @"$341"
	.p2align	2
.L$341:
	.asciz	"IRQ-GPIO-1"
	.size	.L$341, 11

	.type	.L$342,@object                  // @"$342"
	.p2align	2
.L$342:
	.asciz	"IRQ-GPIO-2"
	.size	.L$342, 11

	.type	.L$343,@object                  // @"$343"
	.p2align	2
.L$343:
	.asciz	"IRQ-GPIO-3"
	.size	.L$343, 11

	.type	.L$344,@object                  // @"$344"
	.p2align	2
.L$344:
	.asciz	"IRQ-I2C-ALL"
	.size	.L$344, 12

	.type	.L$345,@object                  // @"$345"
	.p2align	2
.L$345:
	.asciz	"IRQ-SPI-ALL"
	.size	.L$345, 12

	.type	.L$346,@object                  // @"$346"
	.p2align	2
.L$346:
	.asciz	"IRQ-PCM/I2S"
	.size	.L$346, 12

	.type	.L$347,@object                  // @"$347"
	.p2align	2
.L$347:
	.asciz	"IRQ-SDHOST"
	.size	.L$347, 11

	.type	.L$348,@object                  // @"$348"
	.p2align	4
.L$348:
	.asciz	"IRQ-PL011-UART-ALL"
	.size	.L$348, 19

	.type	.L$349,@object                  // @"$349"
	.p2align	4
.L$349:
	.asciz	"IRQ-ETH-PCIe-L2-ALL"
	.size	.L$349, 20

	.type	.L$350,@object                  // @"$350"
	.p2align	2
.L$350:
	.asciz	"IRQ-VEC"
	.size	.L$350, 8

	.type	.L$351,@object                  // @"$351"
	.p2align	2
.L$351:
	.asciz	"IRQ-CPG"
	.size	.L$351, 8

	.type	.L$352,@object                  // @"$352"
	.p2align	2
.L$352:
	.asciz	"IRQ-RNG"
	.size	.L$352, 8

	.type	.L$353,@object                  // @"$353"
	.p2align	2
.L$353:
	.asciz	"IRQ-EMMC&2"
	.size	.L$353, 11

	.type	.L$354,@object                  // @"$354"
	.p2align	4
.L$354:
	.asciz	"IRQ-ETH-PCIe-SECURE"
	.size	.L$354, 20

	.type	.L$355,@object                  // @"$355"
	.p2align	2
.L$355:
	.asciz	"IRQ-AVS"
	.size	.L$355, 8

	.type	.L$356,@object                  // @"$356"
	.p2align	2
.L$356:
	.asciz	"IRQ-PCIE-0-INTA"
	.size	.L$356, 16

	.type	.L$357,@object                  // @"$357"
	.p2align	2
.L$357:
	.asciz	"IRQ-PCIE-0-INTB"
	.size	.L$357, 16

	.type	.L$358,@object                  // @"$358"
	.p2align	2
.L$358:
	.asciz	"IRQ-PCIE-0-INTC"
	.size	.L$358, 16

	.type	.L$359,@object                  // @"$359"
	.p2align	2
.L$359:
	.asciz	"IRQ-PCIE-0-INTD"
	.size	.L$359, 16

	.type	.L$360,@object                  // @"$360"
	.p2align	2
.L$360:
	.asciz	"IRQ-PCIE-0-MSI"
	.size	.L$360, 15

	.type	.L$361,@object                  // @"$361"
	.p2align	2
.L$361:
	.asciz	"IRQ-GENET-0-A"
	.size	.L$361, 14

	.type	.L$362,@object                  // @"$362"
	.p2align	2
.L$362:
	.asciz	"IRQ-GENET-0-B"
	.size	.L$362, 14

	.type	.L$363,@object                  // @"$363"
	.p2align	2
.L$363:
	.asciz	"IRQ-USB0-XHCI-0"
	.size	.L$363, 16

	.type	.L$364,@object                  // @"$364"
	.p2align	2
.L$364:
	.asciz	"$MBox="
	.size	.L$364, 7

	.type	.L$365,@object                  // @"$365"
	.p2align	2
.L$365:
	.asciz	"$QuitRst="
	.size	.L$365, 10

	.type	.L$366,@object                  // @"$366"
	.p2align	2
.L$366:
	.asciz	"$Heap="
	.size	.L$366, 7

	.type	.L$367,@object                  // @"$367"
	.p2align	2
.L$367:
	.asciz	"$Limit="
	.size	.L$367, 8

	.type	.L$368,@object                  // @"$368"
	.p2align	4
.L$368:
	.asciz	"Call heapAlloc...\n"
	.size	.L$368, 19

	.type	.L$369,@object                  // @"$369"
	.p2align	4
.L$369:
	.asciz	"Init internal symbols...\n"
	.size	.L$369, 26

	.section	".note.GNU-stack","",@progbits
